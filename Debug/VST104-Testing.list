
VST104-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08009be8  08009be8  00019be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2a0  0800a2a0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2a0  0800a2a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001dc  0800a484  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  0800a484  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147dc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000266f  00000000  00000000  000349e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00037058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ba6a  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3ac  00000000  00000000  00064e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c5cc  00000000  00000000  000731f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017f7c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c70  00000000  00000000  0017f840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009bd0 	.word	0x08009bd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08009bd0 	.word	0x08009bd0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d013      	beq.n	8000ca8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00b      	beq.n	8000ca8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c90:	e000      	b.n	8000c94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f9      	beq.n	8000c92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//SWD printf workaround
int _write(int file, char *ptr, int len) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e009      	b.n	8000ce0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffc7 	bl	8000c68 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf1      	blt.n	8000ccc <_write+0x16>
  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <QSPI_read_data>:

int QSPI_read_data(QSPI_HandleTypeDef *hqspi, int device, uint8_t command, uint8_t *buff, int size){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b094      	sub	sp, #80	; 0x50
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	QSPI_CommandTypeDef sCommand;

	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.Instruction       = command;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;	//OK
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DataMode          = QSPI_DATA_1_LINE;			//OK
 8000d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData            = size;
 8000d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles       = 0;							//when 8 then 1 bit left shift
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;		//OK
 8000d22:	2300      	movs	r3, #0
 8000d24:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d26:	2300      	movs	r3, #0
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;	//OK
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	64bb      	str	r3, [r7, #72]	; 0x48

	//reset all devices
	HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin | QSPI_CS2_Pin , GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2103      	movs	r1, #3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f002 ffb1 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(QSPI_CS3_GPIO_Port, QSPI_CS3_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f002 ffab 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f001 f9fa 	bl	8002140 <HAL_Delay>

	//select appropriate memory
	if(device == 1) HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin, GPIO_PIN_RESET);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d106      	bne.n	8000d60 <QSPI_read_data+0x6e>
 8000d52:	2200      	movs	r2, #0
 8000d54:	2101      	movs	r1, #1
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f002 ff9f 	bl	8003c9c <HAL_GPIO_WritePin>
 8000d5e:	e00f      	b.n	8000d80 <QSPI_read_data+0x8e>
	else if(device ==2 ) HAL_GPIO_WritePin(GPIOA, QSPI_CS2_Pin, GPIO_PIN_RESET);
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d106      	bne.n	8000d74 <QSPI_read_data+0x82>
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f002 ff95 	bl	8003c9c <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <QSPI_read_data+0x8e>
	else HAL_GPIO_WritePin(QSPI_CS3_GPIO_Port, QSPI_CS3_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2104      	movs	r1, #4
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f002 ff8e 	bl	8003c9c <HAL_GPIO_WritePin>

	//send command
	ret = HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d88:	4619      	mov	r1, r3
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f003 fe84 	bl	8004a98 <HAL_QSPI_Command>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK) return 1;
 8000d96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <QSPI_read_data+0xb0>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <QSPI_read_data+0xd0>

	//receive answer
	ret = HAL_QSPI_Receive(hqspi, buff, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da6:	6839      	ldr	r1, [r7, #0]
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f003 fed3 	bl	8004b54 <HAL_QSPI_Receive>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK) return 2;
 8000db4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <QSPI_read_data+0xce>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e000      	b.n	8000dc2 <QSPI_read_data+0xd0>

	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3750      	adds	r7, #80	; 0x50
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <SPI_read_data>:

int SPI_read_data(SPI_HandleTypeDef *hspi, uint8_t *command, uint8_t *buff, int size){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;

	//toggle NCS pin
	HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2110      	movs	r1, #16
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <SPI_read_data+0x74>)
 8000de0:	f002 ff5c 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f001 f9ab 	bl	8002140 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2110      	movs	r1, #16
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <SPI_read_data+0x74>)
 8000df0:	f002 ff54 	bl	8003c9c <HAL_GPIO_WritePin>

	ret = HAL_SPI_Transmit(hspi, command, 1, 100);
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	2201      	movs	r2, #1
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f005 fcca 	bl	8006794 <HAL_SPI_Transmit>
 8000e00:	4603      	mov	r3, r0
 8000e02:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) return 1;
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SPI_read_data+0x42>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e013      	b.n	8000e36 <SPI_read_data+0x6a>

	ret = HAL_SPI_Receive(hspi, buff, size, 100);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f005 fe22 	bl	8006a60 <HAL_SPI_Receive>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) return 2;
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SPI_read_data+0x5e>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e005      	b.n	8000e36 <SPI_read_data+0x6a>

	//power off device
	HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <SPI_read_data+0x74>)
 8000e30:	f002 ff34 	bl	8003c9c <HAL_GPIO_WritePin>

	return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	48000800 	.word	0x48000800
 8000e44:	00000000 	.word	0x00000000

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b09b      	sub	sp, #108	; 0x6c
 8000e4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f001 f906 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 fadf 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 fd1d 	bl	8001894 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e5a:	f000 fb8f 	bl	800157c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e5e:	f000 fc07 	bl	8001670 <MX_ADC2_Init>
  MX_I2C2_Init();
 8000e62:	f000 fc6d 	bl	8001740 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000e66:	f000 fcab 	bl	80017c0 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000e6a:	f000 fcd5 	bl	8001818 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


	//test SDW printf
  	HAL_Delay(1500);
 8000e6e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e72:	f001 f965 	bl	8002140 <HAL_Delay>
	printf("\n\nSDW printf() initialized\n\n");
 8000e76:	4896      	ldr	r0, [pc, #600]	; (80010d0 <main+0x288>)
 8000e78:	f006 ffb8 	bl	8007dec <puts>

	//open USER1 isolator and turn on green LED
	printf("Opening LED isolator & turning on green\n\n");
 8000e7c:	4895      	ldr	r0, [pc, #596]	; (80010d4 <main+0x28c>)
 8000e7e:	f006 ffb5 	bl	8007dec <puts>
	HAL_GPIO_WritePin(USER1_EN_GPIO_Port, USER1_EN_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	4893      	ldr	r0, [pc, #588]	; (80010d8 <main+0x290>)
 8000e8a:	f002 ff07 	bl	8003c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2101      	movs	r1, #1
 8000e92:	4892      	ldr	r0, [pc, #584]	; (80010dc <main+0x294>)
 8000e94:	f002 ff02 	bl	8003c9c <HAL_GPIO_WritePin>

	//initialize I2C MCP9804 temperature sensors
	printf("Initializing MCP9804 temp. sensors:\n");
 8000e98:	4891      	ldr	r0, [pc, #580]	; (80010e0 <main+0x298>)
 8000e9a:	f006 ffa7 	bl	8007dec <puts>

	//power on temperature sensors
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4890      	ldr	r0, [pc, #576]	; (80010e4 <main+0x29c>)
 8000ea4:	f002 fefa 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	f001 f949 	bl	8002140 <HAL_Delay>
	//prepare I2C variables
	HAL_StatusTypeDef MCP_ret;
	uint8_t MCP_buff[2];

	//configure sensor: thermostat mode, interrupt not used
	MCP_buff[0] = 0x00; MCP_buff[1] = 0x08;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(int i=0; i<sizeof MCP_add; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	657b      	str	r3, [r7, #84]	; 0x54
 8000ebe:	e02e      	b.n	8000f1e <main+0xd6>
		MCP_ret = HAL_I2C_Mem_Write(&hi2c2, MCP_add[i] << 1, MCP_REG_CONF, 1, MCP_buff, 2, HAL_MAX_DELAY);
 8000ec0:	4a89      	ldr	r2, [pc, #548]	; (80010e8 <main+0x2a0>)
 8000ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4882      	ldr	r0, [pc, #520]	; (80010ec <main+0x2a4>)
 8000ee4:	f002 ff9a 	bl	8003e1c <HAL_I2C_Mem_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(MCP_ret == HAL_OK) printf("\t- device 0x%02X configured\n", MCP_add[i]);
 8000eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d108      	bne.n	8000f08 <main+0xc0>
 8000ef6:	4a7c      	ldr	r2, [pc, #496]	; (80010e8 <main+0x2a0>)
 8000ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	487b      	ldr	r0, [pc, #492]	; (80010f0 <main+0x2a8>)
 8000f02:	f006 feeb 	bl	8007cdc <iprintf>
 8000f06:	e007      	b.n	8000f18 <main+0xd0>
		else printf("\t- device %02X failed\n", MCP_add[i]);
 8000f08:	4a77      	ldr	r2, [pc, #476]	; (80010e8 <main+0x2a0>)
 8000f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4878      	ldr	r0, [pc, #480]	; (80010f4 <main+0x2ac>)
 8000f14:	f006 fee2 	bl	8007cdc <iprintf>
	for(int i=0; i<sizeof MCP_add; i++) {
 8000f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d9cd      	bls.n	8000ec0 <main+0x78>
	}

	HAL_Delay(500);
 8000f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f28:	f001 f90a 	bl	8002140 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	//greetings and blink
	printf("\nBoard Sierra test iteration:\n");
 8000f2c:	4872      	ldr	r0, [pc, #456]	; (80010f8 <main+0x2b0>)
 8000f2e:	f006 ff5d 	bl	8007dec <puts>

	//LED GPIO demonstration ############################################################################################################
	printf("\n(1) Blinking red LED\n");
 8000f32:	4872      	ldr	r0, [pc, #456]	; (80010fc <main+0x2b4>)
 8000f34:	f006 ff5a 	bl	8007dec <puts>

	//blink with red LED
	for(int i=0; i<4; i++) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8000f3c:	e00a      	b.n	8000f54 <main+0x10c>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f42:	486f      	ldr	r0, [pc, #444]	; (8001100 <main+0x2b8>)
 8000f44:	f002 fec2 	bl	8003ccc <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000f48:	20c8      	movs	r0, #200	; 0xc8
 8000f4a:	f001 f8f9 	bl	8002140 <HAL_Delay>
	for(int i=0; i<4; i++) {
 8000f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f50:	3301      	adds	r3, #1
 8000f52:	653b      	str	r3, [r7, #80]	; 0x50
 8000f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	ddf1      	ble.n	8000f3e <main+0xf6>
	}

	//clock source checking ##############################################################################################################
	printf("\n(2) Clock freq. and source demonstration:\n");
 8000f5a:	486a      	ldr	r0, [pc, #424]	; (8001104 <main+0x2bc>)
 8000f5c:	f006 ff46 	bl	8007dec <puts>

	//read and print SYSCLK, HCLK, PCLK1 and PCLK2 frequencies
	printf("\t- SYSCLK freq.: %lu [Hz]\n", HAL_RCC_GetSysClockFreq());
 8000f60:	f004 fd68 	bl	8005a34 <HAL_RCC_GetSysClockFreq>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4867      	ldr	r0, [pc, #412]	; (8001108 <main+0x2c0>)
 8000f6a:	f006 feb7 	bl	8007cdc <iprintf>
	printf("\t- HCLK freq.:   %lu [Hz]\n", HAL_RCC_GetHCLKFreq());
 8000f6e:	f004 fdeb 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4619      	mov	r1, r3
 8000f76:	4865      	ldr	r0, [pc, #404]	; (800110c <main+0x2c4>)
 8000f78:	f006 feb0 	bl	8007cdc <iprintf>
	printf("\t- PCLK1 freq.:  %lu [Hz]\n", HAL_RCC_GetPCLK1Freq());
 8000f7c:	f004 fdf0 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4619      	mov	r1, r3
 8000f84:	4862      	ldr	r0, [pc, #392]	; (8001110 <main+0x2c8>)
 8000f86:	f006 fea9 	bl	8007cdc <iprintf>
	printf("\t- PCLK2 freq.:  %lu [Hz]\n", HAL_RCC_GetPCLK2Freq());
 8000f8a:	f004 fdff 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4619      	mov	r1, r3
 8000f92:	4860      	ldr	r0, [pc, #384]	; (8001114 <main+0x2cc>)
 8000f94:	f006 fea2 	bl	8007cdc <iprintf>

	//current reading testing ############################################################################################################
	printf("\n(3) Power management current readings:\n");
 8000f98:	485f      	ldr	r0, [pc, #380]	; (8001118 <main+0x2d0>)
 8000f9a:	f006 ff27 	bl	8007dec <puts>

	//prepare ADC variables
	uint16_t ADC_vals[2];

	//start ADC conversion for EF1
	HAL_ADC_Start(&hadc1);
 8000f9e:	485f      	ldr	r0, [pc, #380]	; (800111c <main+0x2d4>)
 8000fa0:	f001 fc80 	bl	80028a4 <HAL_ADC_Start>
	//poll ADC peripheral
	HAL_ADC_PollForConversion(&hadc1, 1);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	485d      	ldr	r0, [pc, #372]	; (800111c <main+0x2d4>)
 8000fa8:	f001 fd6a 	bl	8002a80 <HAL_ADC_PollForConversion>
	//read ADC conversion result
	ADC_vals[0] = HAL_ADC_GetValue(&hadc1);
 8000fac:	485b      	ldr	r0, [pc, #364]	; (800111c <main+0x2d4>)
 8000fae:	f001 fe37 	bl	8002c20 <HAL_ADC_GetValue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	843b      	strh	r3, [r7, #32]
	//stop ADC conversion for EF1
	HAL_ADC_Stop(&hadc1);
 8000fb8:	4858      	ldr	r0, [pc, #352]	; (800111c <main+0x2d4>)
 8000fba:	f001 fd2d 	bl	8002a18 <HAL_ADC_Stop>

	//start ADC conversion for EF2
	HAL_ADC_Start(&hadc2);
 8000fbe:	4858      	ldr	r0, [pc, #352]	; (8001120 <main+0x2d8>)
 8000fc0:	f001 fc70 	bl	80028a4 <HAL_ADC_Start>
	//poll ADC peripheral
	HAL_ADC_PollForConversion(&hadc2, 1);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4856      	ldr	r0, [pc, #344]	; (8001120 <main+0x2d8>)
 8000fc8:	f001 fd5a 	bl	8002a80 <HAL_ADC_PollForConversion>
	//read ADC conversion result
	ADC_vals[1] = HAL_ADC_GetValue(&hadc2);
 8000fcc:	4854      	ldr	r0, [pc, #336]	; (8001120 <main+0x2d8>)
 8000fce:	f001 fe27 	bl	8002c20 <HAL_ADC_GetValue>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	847b      	strh	r3, [r7, #34]	; 0x22
	//stop ADC conversion for EF2
	HAL_ADC_Stop(&hadc2);
 8000fd8:	4851      	ldr	r0, [pc, #324]	; (8001120 <main+0x2d8>)
 8000fda:	f001 fd1d 	bl	8002a18 <HAL_ADC_Stop>

	//compute current consumption from ADC values in [mA]
	float CUR_vals[2];
	for(int i=0; i<2; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fe2:	e04b      	b.n	800107c <main+0x234>
		CUR_vals[i] = (3000 * (float)VREFINT_CAL / (float)ADC_vals[i]) / 1000;
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <main+0x2dc>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001128 <main+0x2e0>
 8000ff4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001000:	4413      	add	r3, r2
 8001002:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001012:	eddf 6a46 	vldr	s13, [pc, #280]	; 800112c <main+0x2e4>
 8001016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001022:	4413      	add	r3, r2
 8001024:	3b40      	subs	r3, #64	; 0x40
 8001026:	edc3 7a00 	vstr	s15, [r3]
		CUR_vals[i] = (CUR_vals[i] - CUR_IOS * CUR_RMON) / (CUR_GAIN * CUR_RMON);
 800102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001032:	4413      	add	r3, r2
 8001034:	3b40      	subs	r3, #64	; 0x40
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa95 	bl	8000568 <__aeabi_f2d>
 800103e:	a320      	add	r3, pc, #128	; (adr r3, 80010c0 <main+0x278>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff f930 	bl	80002a8 <__aeabi_dsub>
 8001048:	4603      	mov	r3, r0
 800104a:	460c      	mov	r4, r1
 800104c:	4618      	mov	r0, r3
 800104e:	4621      	mov	r1, r4
 8001050:	a31d      	add	r3, pc, #116	; (adr r3, 80010c8 <main+0x280>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fc09 	bl	800086c <__aeabi_ddiv>
 800105a:	4603      	mov	r3, r0
 800105c:	460c      	mov	r4, r1
 800105e:	4618      	mov	r0, r3
 8001060:	4621      	mov	r1, r4
 8001062:	f7ff fdb1 	bl	8000bc8 <__aeabi_d2f>
 8001066:	4602      	mov	r2, r0
 8001068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001070:	440b      	add	r3, r1
 8001072:	3b40      	subs	r3, #64	; 0x40
 8001074:	601a      	str	r2, [r3, #0]
	for(int i=0; i<2; i++) {
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	3301      	adds	r3, #1
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800107c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800107e:	2b01      	cmp	r3, #1
 8001080:	ddb0      	ble.n	8000fe4 <main+0x19c>
	}

	// print results
	printf("\t- 3V3 channel: %f [mA]\n", CUR_vals[0]);
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa6f 	bl	8000568 <__aeabi_f2d>
 800108a:	4603      	mov	r3, r0
 800108c:	460c      	mov	r4, r1
 800108e:	461a      	mov	r2, r3
 8001090:	4623      	mov	r3, r4
 8001092:	4827      	ldr	r0, [pc, #156]	; (8001130 <main+0x2e8>)
 8001094:	f006 fe22 	bl	8007cdc <iprintf>
	printf("\t- 5V channel:  %f [mA]\n", CUR_vals[1]);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa64 	bl	8000568 <__aeabi_f2d>
 80010a0:	4603      	mov	r3, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	461a      	mov	r2, r3
 80010a6:	4623      	mov	r3, r4
 80010a8:	4822      	ldr	r0, [pc, #136]	; (8001134 <main+0x2ec>)
 80010aa:	f006 fe17 	bl	8007cdc <iprintf>

	//temperature reading testing #########################################################################################################
	printf("\n(4) Temperature sensors readings:\n");
 80010ae:	4822      	ldr	r0, [pc, #136]	; (8001138 <main+0x2f0>)
 80010b0:	f006 fe9c 	bl	8007dec <puts>

	//loop and read & process data from all sensors
	for(int i=0; i<sizeof MCP_add; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80010b8:	e0e5      	b.n	8001286 <main+0x43e>
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	eb851eb8 	.word	0xeb851eb8
 80010c4:	3faeb851 	.word	0x3faeb851
 80010c8:	33333333 	.word	0x33333333
 80010cc:	400f3333 	.word	0x400f3333
 80010d0:	08009be8 	.word	0x08009be8
 80010d4:	08009c04 	.word	0x08009c04
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48001800 	.word	0x48001800
 80010e0:	08009c30 	.word	0x08009c30
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	08009f8c 	.word	0x08009f8c
 80010ec:	20000270 	.word	0x20000270
 80010f0:	08009c54 	.word	0x08009c54
 80010f4:	08009c74 	.word	0x08009c74
 80010f8:	08009c8c 	.word	0x08009c8c
 80010fc:	08009cac 	.word	0x08009cac
 8001100:	48001400 	.word	0x48001400
 8001104:	08009cc4 	.word	0x08009cc4
 8001108:	08009cf0 	.word	0x08009cf0
 800110c:	08009d0c 	.word	0x08009d0c
 8001110:	08009d28 	.word	0x08009d28
 8001114:	08009d44 	.word	0x08009d44
 8001118:	08009d60 	.word	0x08009d60
 800111c:	200002bc 	.word	0x200002bc
 8001120:	20000208 	.word	0x20000208
 8001124:	1fff75aa 	.word	0x1fff75aa
 8001128:	453b8000 	.word	0x453b8000
 800112c:	447a0000 	.word	0x447a0000
 8001130:	08009d88 	.word	0x08009d88
 8001134:	08009da4 	.word	0x08009da4
 8001138:	08009dc0 	.word	0x08009dc0
		//request Ta data
		MCP_buff[0] = 0x00; MCP_buff[1] = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MCP_ret = HAL_I2C_Mem_Write(&hi2c2, MCP_add[i] << 1, MCP_REG_TEMP, 1, MCP_buff, 2, HAL_MAX_DELAY);
 8001148:	4aa2      	ldr	r2, [pc, #648]	; (80013d4 <main+0x58c>)
 800114a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	b299      	uxth	r1, r3
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2302      	movs	r3, #2
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	2205      	movs	r2, #5
 800116a:	489b      	ldr	r0, [pc, #620]	; (80013d8 <main+0x590>)
 800116c:	f002 fe56 	bl	8003e1c <HAL_I2C_Mem_Write>
 8001170:	4603      	mov	r3, r0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(MCP_ret != HAL_OK) printf("\t- device 0x%02X failed at writing\n", MCP_add[i]);
 8001176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <main+0x346>
 800117e:	4a95      	ldr	r2, [pc, #596]	; (80013d4 <main+0x58c>)
 8001180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	4894      	ldr	r0, [pc, #592]	; (80013dc <main+0x594>)
 800118a:	f006 fda7 	bl	8007cdc <iprintf>

		//read Ta data
		MCP_ret = HAL_I2C_Mem_Read(&hi2c2, MCP_add[i] << 1, MCP_REG_TEMP, 1, MCP_buff, 2, HAL_MAX_DELAY);
 800118e:	4a91      	ldr	r2, [pc, #580]	; (80013d4 <main+0x58c>)
 8001190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	b299      	uxth	r1, r3
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2302      	movs	r3, #2
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2205      	movs	r2, #5
 80011b0:	4889      	ldr	r0, [pc, #548]	; (80013d8 <main+0x590>)
 80011b2:	f002 ff47 	bl	8004044 <HAL_I2C_Mem_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(MCP_ret != HAL_OK) printf("\t- device 0x%02X failed at reading\n", MCP_add[i]);
 80011bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <main+0x38c>
 80011c4:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <main+0x58c>)
 80011c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4884      	ldr	r0, [pc, #528]	; (80013e0 <main+0x598>)
 80011d0:	f006 fd84 	bl	8007cdc <iprintf>

		//convert Ta value to Celsius temperature
		float MCP_temp;
		//clear flag bite
		if(MCP_buff[0] & 0xE0)
 80011d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <main+0x3a6>
			MCP_buff[0] = MCP_buff[0] & 0x1F;
 80011e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		if((MCP_buff[0] & 0x10) == 0x10){
 80011ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d018      	beq.n	800122c <main+0x3e4>
			MCP_buff[0] = MCP_buff[0] & 0x0F;
 80011fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			MCP_temp = (256 - (MCP_buff[0] << 4) + (MCP_buff[1] >> 4)) * -1;
 8001208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001212:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001216:	0912      	lsrs	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	4413      	add	r3, r2
 800121c:	425b      	negs	r3, r3
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001226:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800122a:	e017      	b.n	800125c <main+0x414>
		}
		else
			MCP_temp = (float)MCP_buff[0] * 16 + (float)MCP_buff[1] / 16;
 800122c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001238:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800123c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001240:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800124c:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8001250:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		//print results
		printf("\t- device 0x%02X temperature: %.3f [%cC]\n", MCP_add[i], MCP_temp, 176);
 800125c:	4a5d      	ldr	r2, [pc, #372]	; (80013d4 <main+0x58c>)
 800125e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461c      	mov	r4, r3
 8001266:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001268:	f7ff f97e 	bl	8000568 <__aeabi_f2d>
 800126c:	460a      	mov	r2, r1
 800126e:	4601      	mov	r1, r0
 8001270:	23b0      	movs	r3, #176	; 0xb0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	460a      	mov	r2, r1
 8001278:	4621      	mov	r1, r4
 800127a:	485a      	ldr	r0, [pc, #360]	; (80013e4 <main+0x59c>)
 800127c:	f006 fd2e 	bl	8007cdc <iprintf>
	for(int i=0; i<sizeof MCP_add; i++) {
 8001280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001282:	3301      	adds	r3, #1
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	2b06      	cmp	r3, #6
 800128a:	f67f af57 	bls.w	800113c <main+0x2f4>
	}

	//QSPI flash memories detection ##########################################################################################################
	printf("\n(5) NOR-Flash QSPI manufacturer data request:\n");
 800128e:	4856      	ldr	r0, [pc, #344]	; (80013e8 <main+0x5a0>)
 8001290:	f006 fdac 	bl	8007dec <puts>

	//prepare variables
	int QSPI_ret; uint8_t QSPI_buff[8];

	//loop thru memories
	for(int i=1; i<4; i++) {
 8001294:	2301      	movs	r3, #1
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
 8001298:	e02f      	b.n	80012fa <main+0x4b2>
		//request and read manufacturer device type
		QSPI_ret = QSPI_read_data(&hqspi, i, 0x9F, QSPI_buff, 3);
 800129a:	f107 0210 	add.w	r2, r7, #16
 800129e:	2303      	movs	r3, #3
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	229f      	movs	r2, #159	; 0x9f
 80012a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012a8:	4850      	ldr	r0, [pc, #320]	; (80013ec <main+0x5a4>)
 80012aa:	f7ff fd22 	bl	8000cf2 <QSPI_read_data>
 80012ae:	62b8      	str	r0, [r7, #40]	; 0x28
		if(QSPI_ret != 0) printf("\t- memory %d manufacturer type failed at %d\n", i, QSPI_ret);
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <main+0x47a>
 80012b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012ba:	484d      	ldr	r0, [pc, #308]	; (80013f0 <main+0x5a8>)
 80012bc:	f006 fd0e 	bl	8007cdc <iprintf>
 80012c0:	e018      	b.n	80012f4 <main+0x4ac>
		else {
			printf("\t- memory %d dev. type: ", i);
 80012c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012c4:	484b      	ldr	r0, [pc, #300]	; (80013f4 <main+0x5ac>)
 80012c6:	f006 fd09 	bl	8007cdc <iprintf>
			for(int j=0; j<3; j++) printf("0x%02X ", QSPI_buff[j]);
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ce:	e00b      	b.n	80012e8 <main+0x4a0>
 80012d0:	f107 0210 	add.w	r2, r7, #16
 80012d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	4846      	ldr	r0, [pc, #280]	; (80013f8 <main+0x5b0>)
 80012de:	f006 fcfd 	bl	8007cdc <iprintf>
 80012e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e4:	3301      	adds	r3, #1
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	ddf0      	ble.n	80012d0 <main+0x488>
			printf("\n");
 80012ee:	200a      	movs	r0, #10
 80012f0:	f006 fd0c 	bl	8007d0c <putchar>
	for(int i=1; i<4; i++) {
 80012f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f6:	3301      	adds	r3, #1
 80012f8:	643b      	str	r3, [r7, #64]	; 0x40
 80012fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	ddcc      	ble.n	800129a <main+0x452>
		}
	}

	//loop thru memories
	for(int i=1; i<4; i++) {
 8001300:	2301      	movs	r3, #1
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
 8001304:	e02f      	b.n	8001366 <main+0x51e>
		//request and read unique device ID
		QSPI_ret = QSPI_read_data(&hqspi, i, 0x4B, QSPI_buff, 8);
 8001306:	f107 0210 	add.w	r2, r7, #16
 800130a:	2308      	movs	r3, #8
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4613      	mov	r3, r2
 8001310:	224b      	movs	r2, #75	; 0x4b
 8001312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001314:	4835      	ldr	r0, [pc, #212]	; (80013ec <main+0x5a4>)
 8001316:	f7ff fcec 	bl	8000cf2 <QSPI_read_data>
 800131a:	62b8      	str	r0, [r7, #40]	; 0x28
		if(QSPI_ret != 0) printf("\t- memory %d unique ID failed at %d\n", i, QSPI_ret);
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <main+0x4e6>
 8001322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001326:	4835      	ldr	r0, [pc, #212]	; (80013fc <main+0x5b4>)
 8001328:	f006 fcd8 	bl	8007cdc <iprintf>
 800132c:	e018      	b.n	8001360 <main+0x518>
		else {
			printf("\t- memory %d unique ID: ", i);
 800132e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001330:	4833      	ldr	r0, [pc, #204]	; (8001400 <main+0x5b8>)
 8001332:	f006 fcd3 	bl	8007cdc <iprintf>
			for(int j=0; j<8; j++) printf("0x%02X ", QSPI_buff[j]);
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
 800133a:	e00b      	b.n	8001354 <main+0x50c>
 800133c:	f107 0210 	add.w	r2, r7, #16
 8001340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	482b      	ldr	r0, [pc, #172]	; (80013f8 <main+0x5b0>)
 800134a:	f006 fcc7 	bl	8007cdc <iprintf>
 800134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001350:	3301      	adds	r3, #1
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	2b07      	cmp	r3, #7
 8001358:	ddf0      	ble.n	800133c <main+0x4f4>
			printf("\n");
 800135a:	200a      	movs	r0, #10
 800135c:	f006 fcd6 	bl	8007d0c <putchar>
	for(int i=1; i<4; i++) {
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	3301      	adds	r3, #1
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
 8001366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001368:	2b03      	cmp	r3, #3
 800136a:	ddcc      	ble.n	8001306 <main+0x4be>
		}
	}

	//QSPI flash memories detection ##########################################################################################################
	printf("\n(6) F-RAM SPI manufacturer data request:\n");
 800136c:	4825      	ldr	r0, [pc, #148]	; (8001404 <main+0x5bc>)
 800136e:	f006 fd3d 	bl	8007dec <puts>

	//prepare variables
	int SPI_ret; uint8_t SPI_buff[9];

	//request and read device ID
	uint8_t SPI_command[] = {0x9F};
 8001372:	239f      	movs	r3, #159	; 0x9f
 8001374:	703b      	strb	r3, [r7, #0]
	SPI_ret = SPI_read_data(&hspi1, SPI_command, SPI_buff, 9);
 8001376:	1d3a      	adds	r2, r7, #4
 8001378:	4639      	mov	r1, r7
 800137a:	2309      	movs	r3, #9
 800137c:	4822      	ldr	r0, [pc, #136]	; (8001408 <main+0x5c0>)
 800137e:	f7ff fd25 	bl	8000dcc <SPI_read_data>
 8001382:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(SPI_ret != 0) printf("\t- memory ID failed at %d\n", SPI_ret);
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <main+0x54c>
 800138a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <main+0x5c4>)
 800138e:	f006 fca5 	bl	8007cdc <iprintf>
 8001392:	e016      	b.n	80013c2 <main+0x57a>
	else {
		printf("\t- memory dev. type and unique ID: ");
 8001394:	481e      	ldr	r0, [pc, #120]	; (8001410 <main+0x5c8>)
 8001396:	f006 fca1 	bl	8007cdc <iprintf>
		for(int j=0; j<9; j++) printf("0x%02X ", SPI_buff[j]);
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
 800139e:	e00a      	b.n	80013b6 <main+0x56e>
 80013a0:	1d3a      	adds	r2, r7, #4
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4813      	ldr	r0, [pc, #76]	; (80013f8 <main+0x5b0>)
 80013ac:	f006 fc96 	bl	8007cdc <iprintf>
 80013b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b2:	3301      	adds	r3, #1
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	ddf1      	ble.n	80013a0 <main+0x558>
		printf("\n");
 80013bc:	200a      	movs	r0, #10
 80013be:	f006 fca5 	bl	8007d0c <putchar>
	}

	//new line needed
	printf("\n");
 80013c2:	200a      	movs	r0, #10
 80013c4:	f006 fca2 	bl	8007d0c <putchar>

	//wait
	HAL_Delay(2000);
 80013c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013cc:	f000 feb8 	bl	8002140 <HAL_Delay>
  while (1) {
 80013d0:	e5ac      	b.n	8000f2c <main+0xe4>
 80013d2:	bf00      	nop
 80013d4:	08009f8c 	.word	0x08009f8c
 80013d8:	20000270 	.word	0x20000270
 80013dc:	08009de4 	.word	0x08009de4
 80013e0:	08009e08 	.word	0x08009e08
 80013e4:	08009e2c 	.word	0x08009e2c
 80013e8:	08009e58 	.word	0x08009e58
 80013ec:	20000388 	.word	0x20000388
 80013f0:	08009e88 	.word	0x08009e88
 80013f4:	08009eb8 	.word	0x08009eb8
 80013f8:	08009ed4 	.word	0x08009ed4
 80013fc:	08009edc 	.word	0x08009edc
 8001400:	08009f04 	.word	0x08009f04
 8001404:	08009f20 	.word	0x08009f20
 8001408:	20000324 	.word	0x20000324
 800140c:	08009f4c 	.word	0x08009f4c
 8001410:	08009f68 	.word	0x08009f68

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0c0      	sub	sp, #256	; 0x100
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800141e:	2244      	movs	r2, #68	; 0x44
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fff6 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	228c      	movs	r2, #140	; 0x8c
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f005 ffe7 	bl	8007414 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001456:	2301      	movs	r3, #1
 8001458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800145c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146a:	2303      	movs	r3, #3
 800146c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001476:	2310      	movs	r3, #16
 8001478:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fdc6 	bl	8005024 <HAL_RCC_OscConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800149e:	f000 fb15 	bl	8001acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a2:	230f      	movs	r3, #15
 80014a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014c4:	2103      	movs	r1, #3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 f9d2 	bl	8005870 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014d2:	f000 fafb 	bl	8001acc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC;
 80014d6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80014da:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014f0:	2308      	movs	r3, #8
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4618      	mov	r0, r3
 800150c:	f004 fbb4 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001516:	f000 fad9 	bl	8001acc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151e:	f003 f9dd 	bl	80048dc <HAL_PWREx_ControlVoltageScaling>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001528:	f000 fad0 	bl	8001acc <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <SystemClock_Config+0x164>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <SystemClock_Config+0x164>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <SystemClock_Config+0x164>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8001540:	463b      	mov	r3, r7
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	463b      	mov	r3, r7
 8001546:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800154c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001556:	f240 53b7 	movw	r3, #1463	; 0x5b7
 800155a:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800155c:	2322      	movs	r3, #34	; 0x22
 800155e:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001560:	2320      	movs	r3, #32
 8001562:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f004 fe7e 	bl	8006268 <HAL_RCCEx_CRSConfig>
}
 800156c:	bf00      	nop
 800156e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <MX_ADC1_Init+0xec>)
 80015a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b2:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_ADC1_Init+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_ADC1_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <MX_ADC1_Init+0xe8>)
 8001608:	f000 fff4 	bl	80025f4 <HAL_ADC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001612:	f000 fa5b 	bl	8001acc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_ADC1_Init+0xe8>)
 8001622:	f002 f817 	bl	8003654 <HAL_ADCEx_MultiModeConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800162c:	f000 fa4e 	bl	8001acc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_ADC1_Init+0xf0>)
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001634:	2306      	movs	r3, #6
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800163c:	237f      	movs	r3, #127	; 0x7f
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001640:	2304      	movs	r3, #4
 8001642:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_ADC1_Init+0xe8>)
 800164e:	f001 faf5 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001658:	f000 fa38 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002bc 	.word	0x200002bc
 8001668:	50040000 	.word	0x50040000
 800166c:	10c00010 	.word	0x10c00010

08001670 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <MX_ADC2_Init+0xc4>)
 8001688:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <MX_ADC2_Init+0xc8>)
 800168a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <MX_ADC2_Init+0xc4>)
 800168e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001692:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <MX_ADC2_Init+0xc4>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_ADC2_Init+0xc4>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016a8:	2204      	movs	r2, #4
 80016aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016ee:	4811      	ldr	r0, [pc, #68]	; (8001734 <MX_ADC2_Init+0xc4>)
 80016f0:	f000 ff80 	bl	80025f4 <HAL_ADC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80016fa:	f000 f9e7 	bl	8001acc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_ADC2_Init+0xcc>)
 8001700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001702:	2306      	movs	r3, #6
 8001704:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800170a:	237f      	movs	r3, #127	; 0x7f
 800170c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800170e:	2304      	movs	r3, #4
 8001710:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_ADC2_Init+0xc4>)
 800171c:	f001 fa8e 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001726:	f000 f9d1 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000208 	.word	0x20000208
 8001738:	50040100 	.word	0x50040100
 800173c:	0c900008 	.word	0x0c900008

08001740 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_I2C2_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0FEFF;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_I2C2_Init+0x74>)
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MX_I2C2_Init+0x7c>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001758:	2201      	movs	r2, #1
 800175a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_I2C2_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C2_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <MX_I2C2_Init+0x74>)
 800177c:	f002 fabf 	bl	8003cfe <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001786:	f000 f9a1 	bl	8001acc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <MX_I2C2_Init+0x74>)
 800178e:	f002 ff8f 	bl	80046b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001798:	f000 f998 	bl	8001acc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800179c:	2100      	movs	r1, #0
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_I2C2_Init+0x74>)
 80017a0:	f002 ffd1 	bl	8004746 <HAL_I2CEx_ConfigDigitalFilter>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 f98f 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000270 	.word	0x20000270
 80017b8:	40005800 	.word	0x40005800
 80017bc:	00c0feff 	.word	0x00c0feff

080017c0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <MX_QUADSPI_Init+0x54>)
 80017c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017d2:	2204      	movs	r2, #4
 80017d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 7;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017de:	2207      	movs	r2, #7
 80017e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_QUADSPI_Init+0x50>)
 80017fc:	f003 f8c4 	bl	8004988 <HAL_QSPI_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001806:	f000 f961 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000388 	.word	0x20000388
 8001814:	a0001000 	.word	0xa0001000

08001818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_SPI1_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_SPI1_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_SPI1_Init+0x74>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_SPI1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_SPI1_Init+0x74>)
 8001832:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001836:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_SPI1_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_SPI1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_SPI1_Init+0x74>)
 8001846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_SPI1_Init+0x74>)
 800184e:	2208      	movs	r2, #8
 8001850:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_SPI1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SPI1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_SPI1_Init+0x74>)
 8001866:	2207      	movs	r2, #7
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_SPI1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_SPI1_Init+0x74>)
 8001878:	f004 ff02 	bl	8006680 <HAL_SPI_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 f923 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000324 	.word	0x20000324
 8001890:	40013000 	.word	0x40013000

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a81      	ldr	r2, [pc, #516]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c2:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a7b      	ldr	r2, [pc, #492]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4b79      	ldr	r3, [pc, #484]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a6f      	ldr	r2, [pc, #444]	; (8001ab4 <MX_GPIO_Init+0x220>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <MX_GPIO_Init+0x220>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a69      	ldr	r2, [pc, #420]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <MX_GPIO_Init+0x220>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <MX_GPIO_Init+0x220>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	2102      	movs	r1, #2
 800196e:	4852      	ldr	r0, [pc, #328]	; (8001ab8 <MX_GPIO_Init+0x224>)
 8001970:	f002 f994 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HD_Pin|SPI1_WP_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	2103      	movs	r1, #3
 8001978:	4850      	ldr	r0, [pc, #320]	; (8001abc <MX_GPIO_Init+0x228>)
 800197a:	f002 f98f 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	2103      	movs	r1, #3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f002 f989 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS3_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	211c      	movs	r1, #28
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f002 f983 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin|USER1_EN_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 7188 	mov.w	r1, #272	; 0x110
 800199c:	4847      	ldr	r0, [pc, #284]	; (8001abc <MX_GPIO_Init+0x228>)
 800199e:	f002 f97d 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a8:	4845      	ldr	r0, [pc, #276]	; (8001ac0 <MX_GPIO_Init+0x22c>)
 80019aa:	f002 f977 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2101      	movs	r1, #1
 80019b2:	4844      	ldr	r0, [pc, #272]	; (8001ac4 <MX_GPIO_Init+0x230>)
 80019b4:	f002 f972 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	4842      	ldr	r0, [pc, #264]	; (8001ac8 <MX_GPIO_Init+0x234>)
 80019be:	f002 f96d 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 80019c2:	2302      	movs	r3, #2
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4837      	ldr	r0, [pc, #220]	; (8001ab8 <MX_GPIO_Init+0x224>)
 80019da:	f001 ffcd 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HD_Pin SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_HD_Pin|SPI1_WP_Pin;
 80019de:	2303      	movs	r3, #3
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ea:	2302      	movs	r3, #2
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4831      	ldr	r0, [pc, #196]	; (8001abc <MX_GPIO_Init+0x228>)
 80019f6:	f001 ffbf 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin;
 80019fa:	2303      	movs	r3, #3
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f001 ffb0 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS3_Pin SPI1_CS3_Pin SPI1_CS2_Pin */
  GPIO_InitStruct.Pin = QSPI_CS3_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin;
 8001a18:	231c      	movs	r3, #28
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f001 ffa1 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS1_Pin USER1_EN_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin|USER1_EN_Pin;
 8001a36:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481b      	ldr	r0, [pc, #108]	; (8001abc <MX_GPIO_Init+0x228>)
 8001a50:	f001 ff92 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_GPIO_Init+0x22c>)
 8001a6e:	f001 ff83 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <MX_GPIO_Init+0x230>)
 8001a8a:	f001 ff75 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_EN_Pin */
  GPIO_InitStruct.Pin = I2C2_EN_Pin;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(I2C2_EN_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <MX_GPIO_Init+0x234>)
 8001aa6:	f001 ff67 	bl	8003978 <HAL_GPIO_Init>

}
 8001aaa:	bf00      	nop
 8001aac:	3738      	adds	r7, #56	; 0x38
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	48001c00 	.word	0x48001c00
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48001400 	.word	0x48001400
 8001ac4:	48001800 	.word	0x48001800
 8001ac8:	48000c00 	.word	0x48000c00

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_MspInit+0x60>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_MspInit+0x60>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6613      	str	r3, [r2, #96]	; 0x60
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_MspInit+0x60>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_MspInit+0x60>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_MspInit+0x60>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_MspInit+0x60>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fe59 	bl	80047e0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001b2e:	f002 feb7 	bl	80048a0 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_ADC_MspInit+0xec>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12d      	bne.n	8001bbe <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10b      	bne.n	8001b8c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b74:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001b7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b80:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b98:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF1_CUR_Pin;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ba8:	230b      	movs	r3, #11
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF1_CUR_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4820      	ldr	r0, [pc, #128]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bb8:	f001 fede 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001bbc:	e031      	b.n	8001c22 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_ADC_MspInit+0xfc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d12c      	bne.n	8001c22 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001bd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001be0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EF2_CUR_Pin;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF2_CUR_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001c1e:	f001 feab 	bl	8003978 <HAL_GPIO_Init>
}
 8001c22:	bf00      	nop
 8001c24:	3730      	adds	r7, #48	; 0x30
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	50040000 	.word	0x50040000
 8001c30:	200001f8 	.word	0x200001f8
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	50040100 	.word	0x50040100

08001c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_I2C_MspInit+0x7c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d127      	bne.n	8001cb2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_I2C_MspInit+0x80>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_I2C_MspInit+0x80>)
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_I2C_MspInit+0x80>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7e:	2312      	movs	r3, #18
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_I2C_MspInit+0x84>)
 8001c96:	f001 fe6f 	bl	8003978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_I2C_MspInit+0x80>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_I2C_MspInit+0x80>)
 8001ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_I2C_MspInit+0x80>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48001400 	.word	0x48001400

08001cc8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	; (8001da0 <HAL_QSPI_MspInit+0xd8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d156      	bne.n	8001d98 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cee:	4a2d      	ldr	r2, [pc, #180]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6513      	str	r3, [r2, #80]	; 0x50
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_QSPI_MspInit+0xdc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001d32:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d44:	230a      	movs	r3, #10
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4816      	ldr	r0, [pc, #88]	; (8001da8 <HAL_QSPI_MspInit+0xe0>)
 8001d50:	f001 fe12 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 8001d66:	2303      	movs	r3, #3
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <HAL_QSPI_MspInit+0xe0>)
 8001d72:	f001 fe01 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <HAL_QSPI_MspInit+0xe4>)
 8001d94:	f001 fdf0 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	a0001000 	.word	0xa0001000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	48001400 	.word	0x48001400
 8001dac:	48001000 	.word	0x48001000

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_SPI_MspInit+0x7c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d128      	bne.n	8001e24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e02:	23e0      	movs	r3, #224	; 0xe0
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e12:	2305      	movs	r3, #5
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e20:	f001 fdaa 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013000 	.word	0x40013000
 8001e30:	40021000 	.word	0x40021000

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f93c 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e00a      	b.n	8001eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea2:	f3af 8000 	nop.w
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf0      	blt.n	8001ea2 <_read+0x12>
	}

return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_isatty>:

int _isatty(int file)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
	return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f005 fa2c 	bl	80073c0 <__errno>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20050000 	.word	0x20050000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	200001fc 	.word	0x200001fc
 8001f9c:	200003e0 	.word	0x200003e0

08001fa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <SystemInit+0x64>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <SystemInit+0x64>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <SystemInit+0x68>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <SystemInit+0x68>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <SystemInit+0x68>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <SystemInit+0x68>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <SystemInit+0x68>)
 8001fcc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fd0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <SystemInit+0x68>)
 8001fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fdc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <SystemInit+0x68>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <SystemInit+0x68>)
 8001fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <SystemInit+0x68>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SystemInit+0x64>)
 8001ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	40021000 	.word	0x40021000

0800200c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002044 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002010:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002012:	e003      	b.n	800201c <LoopCopyDataInit>

08002014 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002016:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002018:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800201a:	3104      	adds	r1, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <LoopForever+0xa>)
	ldr	r3, =_edata
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002020:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002022:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002024:	d3f6      	bcc.n	8002014 <CopyDataInit>
	ldr	r2, =_sbss
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002028:	e002      	b.n	8002030 <LoopFillZerobss>

0800202a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800202a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800202c:	f842 3b04 	str.w	r3, [r2], #4

08002030 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <LoopForever+0x16>)
	cmp	r2, r3
 8002032:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002034:	d3f9      	bcc.n	800202a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002036:	f7ff ffb3 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203a:	f005 f9c7 	bl	80073cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800203e:	f7fe ff03 	bl	8000e48 <main>

08002042 <LoopForever>:

LoopForever:
    b LoopForever
 8002042:	e7fe      	b.n	8002042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002044:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8002048:	0800a2a8 	.word	0x0800a2a8
	ldr	r0, =_sdata
 800204c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002050:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002054:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002058:	200003dc 	.word	0x200003dc

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>

0800205e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f001 fc51 	bl	8003910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f80e 	bl	8002090 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e001      	b.n	8002084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002080:	f7ff fd2c 	bl	8001adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002084:	79fb      	ldrb	r3, [r7, #7]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_InitTick+0x68>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d022      	beq.n	80020ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_InitTick+0x6c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_InitTick+0x68>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fc50 	bl	800395e <HAL_SYSTICK_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d809      	bhi.n	80020de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	2200      	movs	r2, #0
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	f001 fc28 	bl	8003926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_InitTick+0x70>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e007      	b.n	80020ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e004      	b.n	80020ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_IncTick+0x1c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_IncTick+0x20>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4a03      	ldr	r2, [pc, #12]	; (8002120 <HAL_IncTick+0x1c>)
 8002114:	6013      	str	r3, [r2, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	200003d4 	.word	0x200003d4
 8002124:	20000008 	.word	0x20000008

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200003d4 	.word	0x200003d4

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d004      	beq.n	8002164 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_Delay+0x40>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002164:	bf00      	nop
 8002166:	f7ff ffdf 	bl	8002128 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d8f7      	bhi.n	8002166 <HAL_Delay+0x26>
  {
  }
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000008 	.word	0x20000008

08002184 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	609a      	str	r2, [r3, #8]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021ec:	b490      	push	{r4, r7}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <LL_ADC_SetOffset+0x40>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	4313      	orrs	r3, r2
 800221a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800221e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bc90      	pop	{r4, r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	03fff000 	.word	0x03fff000

08002230 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002230:	b490      	push	{r4, r7}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bc90      	pop	{r4, r7}
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002258:	b490      	push	{r4, r7}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bc90      	pop	{r4, r7}
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	615a      	str	r2, [r3, #20]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d4:	b490      	push	{r4, r7}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3330      	adds	r3, #48	; 0x30
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	4413      	add	r3, r2
 80022f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	211f      	movs	r1, #31
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 011f 	and.w	r1, r3, #31
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bc90      	pop	{r4, r7}
 8002324:	4770      	bx	lr

08002326 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002326:	b490      	push	{r4, r7}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3314      	adds	r3, #20
 8002336:	461a      	mov	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	0e5b      	lsrs	r3, r3, #25
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0d1b      	lsrs	r3, r3, #20
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2107      	movs	r1, #7
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0d1b      	lsrs	r3, r3, #20
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bc90      	pop	{r4, r7}
 8002374:	4770      	bx	lr
	...

08002378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0318 	and.w	r3, r3, #24
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800239c:	40d9      	lsrs	r1, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	400b      	ands	r3, r1
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	0007ffff 	.word	0x0007ffff

080023c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 031f 	and.w	r3, r3, #31
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d101      	bne.n	8002436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	f043 0202 	orr.w	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <LL_ADC_IsEnabled+0x18>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <LL_ADC_IsEnabled+0x1a>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d101      	bne.n	8002522 <LL_ADC_IsDisableOngoing+0x18>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <LL_ADC_IsDisableOngoing+0x1a>
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d101      	bne.n	8002598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ba:	f043 0220 	orr.w	r2, r3, #32
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d101      	bne.n	80025e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e137      	b.n	800287e <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fa8f 	bl	8001b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fef1 	bl	800241c <LL_ADC_IsDeepPowerDownEnabled>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fed7 	bl	80023f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff0c 	bl	800246c <LL_ADC_IsInternalRegulatorEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d113      	bne.n	8002682 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fef0 	bl	8002444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002664:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_ADC_Init+0x294>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	4a88      	ldr	r2, [pc, #544]	; (800288c <HAL_ADC_Init+0x298>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002674:	e002      	b.n	800267c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fef0 	bl	800246c <LL_ADC_IsInternalRegulatorEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff64 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 80026b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 80d2 	bne.w	800286c <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80ce 	bne.w	800286c <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fefd 	bl	80024e4 <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d115      	bne.n	800271c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f0:	4867      	ldr	r0, [pc, #412]	; (8002890 <HAL_ADC_Init+0x29c>)
 80026f2:	f7ff fef7 	bl	80024e4 <LL_ADC_IsEnabled>
 80026f6:	4604      	mov	r4, r0
 80026f8:	4866      	ldr	r0, [pc, #408]	; (8002894 <HAL_ADC_Init+0x2a0>)
 80026fa:	f7ff fef3 	bl	80024e4 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	431c      	orrs	r4, r3
 8002702:	4865      	ldr	r0, [pc, #404]	; (8002898 <HAL_ADC_Init+0x2a4>)
 8002704:	f7ff feee 	bl	80024e4 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	4323      	orrs	r3, r4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4619      	mov	r1, r3
 8002716:	4861      	ldr	r0, [pc, #388]	; (800289c <HAL_ADC_Init+0x2a8>)
 8002718:	f7ff fd34 	bl	8002184 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e5b      	ldrb	r3, [r3, #25]
 8002720:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002726:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800272c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002732:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d106      	bne.n	8002758 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	3b01      	subs	r3, #1
 8002750:	045b      	lsls	r3, r3, #17
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <HAL_ADC_Init+0x2ac>)
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	430b      	orrs	r3, r1
 8002786:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fef7 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002792:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff18 	bl	80025ce <LL_ADC_INJ_IsConversionOngoing>
 800279e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d140      	bne.n	8002828 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d13d      	bne.n	8002828 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7e1b      	ldrb	r3, [r3, #24]
 80027b4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027b6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027be:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ce:	f023 0306 	bic.w	r3, r3, #6
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d118      	bne.n	8002818 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027fc:	4311      	orrs	r1, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002808:	430a      	orrs	r2, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	e007      	b.n	8002828 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10c      	bne.n	800284a <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f023 010f 	bic.w	r1, r3, #15
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
 8002848:	e007      	b.n	800285a <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 020f 	bic.w	r2, r2, #15
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	659a      	str	r2, [r3, #88]	; 0x58
 800286a:	e007      	b.n	800287c <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f043 0210 	orr.w	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800287c:	7ffb      	ldrb	r3, [r7, #31]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	20000000 	.word	0x20000000
 800288c:	053e2d63 	.word	0x053e2d63
 8002890:	50040000 	.word	0x50040000
 8002894:	50040100 	.word	0x50040100
 8002898:	50040200 	.word	0x50040200
 800289c:	50040300 	.word	0x50040300
 80028a0:	fff0c007 	.word	0xfff0c007

080028a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ac:	4857      	ldr	r0, [pc, #348]	; (8002a0c <HAL_ADC_Start+0x168>)
 80028ae:	f7ff fd87 	bl	80023c0 <LL_ADC_GetMultimode>
 80028b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fe61 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 809c 	bne.w	80029fe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_Start+0x30>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e097      	b.n	8002a04 <HAL_ADC_Start+0x160>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fde1 	bl	80034a4 <ADC_Enable>
 80028e2:	4603      	mov	r3, r0
 80028e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 8083 	bne.w	80029f4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_ADC_Start+0x16c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d002      	beq.n	8002912 <HAL_ADC_Start+0x6e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e000      	b.n	8002914 <HAL_ADC_Start+0x70>
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_ADC_Start+0x170>)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	4293      	cmp	r3, r2
 800291a:	d002      	beq.n	8002922 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293a:	d106      	bne.n	800294a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	f023 0206 	bic.w	r2, r3, #6
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	; 0x5c
 8002948:	e002      	b.n	8002950 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	221c      	movs	r2, #28
 8002956:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <HAL_ADC_Start+0x16c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d002      	beq.n	8002970 <HAL_ADC_Start+0xcc>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e000      	b.n	8002972 <HAL_ADC_Start+0xce>
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_ADC_Start+0x170>)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4293      	cmp	r3, r2
 8002978:	d008      	beq.n	800298c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b05      	cmp	r3, #5
 8002984:	d002      	beq.n	800298c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b09      	cmp	r3, #9
 800298a:	d114      	bne.n	80029b6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fdbe 	bl	8002530 <LL_ADC_REG_StartConversion>
 80029b4:	e025      	b.n	8002a02 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_ADC_Start+0x16c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d002      	beq.n	80029d2 <HAL_ADC_Start+0x12e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e000      	b.n	80029d4 <HAL_ADC_Start+0x130>
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_ADC_Start+0x170>)
 80029d4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00f      	beq.n	8002a02 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	659a      	str	r2, [r3, #88]	; 0x58
 80029f2:	e006      	b.n	8002a02 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80029fc:	e001      	b.n	8002a02 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
 8002a00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	50040300 	.word	0x50040300
 8002a10:	50040100 	.word	0x50040100
 8002a14:	50040000 	.word	0x50040000

08002a18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Stop+0x16>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e023      	b.n	8002a76 <HAL_ADC_Stop+0x5e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a36:	2103      	movs	r1, #3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fc7f 	bl	800333c <ADC_ConversionStop>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fd85 	bl	8003558 <ADC_Disable>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a8a:	4862      	ldr	r0, [pc, #392]	; (8002c14 <HAL_ADC_PollForConversion+0x194>)
 8002a8c:	f7ff fc98 	bl	80023c0 <LL_ADC_GetMultimode>
 8002a90:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d102      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e02a      	b.n	8002af6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	d111      	bne.n	8002ad6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e09d      	b.n	8002c0c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ad4:	e00f      	b.n	8002af6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ad6:	484f      	ldr	r0, [pc, #316]	; (8002c14 <HAL_ADC_PollForConversion+0x194>)
 8002ad8:	f7ff fc80 	bl	80023dc <LL_ADC_GetMultiDMATransfer>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e08c      	b.n	8002c0c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002af2:	2304      	movs	r3, #4
 8002af4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002af6:	f7ff fb17 	bl	8002128 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002afc:	e01a      	b.n	8002b34 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d016      	beq.n	8002b34 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b06:	f7ff fb0f 	bl	8002128 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <HAL_ADC_PollForConversion+0x9c>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e06b      	b.n	8002c0c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0dd      	beq.n	8002afe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fbab 	bl	80022ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01c      	beq.n	8002b98 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7e5b      	ldrb	r3, [r3, #25]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d111      	bne.n	8002b98 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_ADC_PollForConversion+0x198>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d002      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x128>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e000      	b.n	8002baa <HAL_ADC_PollForConversion+0x12a>
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_ADC_PollForConversion+0x19c>)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d008      	beq.n	8002bc4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d002      	beq.n	8002bc4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d104      	bne.n	8002bce <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	e00c      	b.n	8002be8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_ADC_PollForConversion+0x198>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d002      	beq.n	8002bde <HAL_ADC_PollForConversion+0x15e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_PollForConversion+0x160>
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_ADC_PollForConversion+0x19c>)
 8002be0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d104      	bne.n	8002bf8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e008      	b.n	8002c0a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	50040300 	.word	0x50040300
 8002c18:	50040100 	.word	0x50040100
 8002c1c:	50040000 	.word	0x50040000

08002c20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0a6      	sub	sp, #152	; 0x98
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x22>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e364      	b.n	8003328 <HAL_ADC_ConfigChannel+0x6ec>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc88 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 8345 	bne.w	8003302 <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d824      	bhi.n	8002cca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	3b02      	subs	r3, #2
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d81b      	bhi.n	8002cc2 <HAL_ADC_ConfigChannel+0x86>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <HAL_ADC_ConfigChannel+0x54>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002ca9 	.word	0x08002ca9
 8002c98:	08002cb1 	.word	0x08002cb1
 8002c9c:	08002cb9 	.word	0x08002cb9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	e011      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2212      	movs	r2, #18
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	e00d      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2218      	movs	r2, #24
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e009      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	e004      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2206      	movs	r2, #6
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002cca:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f7ff fafb 	bl	80022d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fc4c 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fc6c 	bl	80025ce <LL_ADC_INJ_IsConversionOngoing>
 8002cf6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8163 	bne.w	8002fca <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f040 815e 	bne.w	8002fca <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d16:	d10f      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7ff faff 	bl	8002326 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff faa9 	bl	8002288 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d36:	e00e      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f7ff faee 	bl	8002326 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fa99 	bl	8002288 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d00a      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6919      	ldr	r1, [r3, #16]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	f7ff fa30 	bl	80021ec <LL_ADC_SetOffset>
 8002d8c:	e11d      	b.n	8002fca <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fa4b 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x17e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa40 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	e012      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x1a4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fa35 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1bc>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	e00a      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1d2>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fa1c 	bl	8002258 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fa02 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x210>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f9f7 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e010      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x232>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f9ec 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x24a>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	e00a      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x260>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f9d5 	bl	8002258 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f9bb 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x29e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f9b0 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	e010      	b.n	8002efc <HAL_ADC_ConfigChannel+0x2c0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f9a5 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x2d8>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	e00a      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x2ee>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d106      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff f98e 	bl	8002258 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2103      	movs	r1, #3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f974 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x32c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2103      	movs	r1, #3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f969 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 021f 	and.w	r2, r3, #31
 8002f66:	e010      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x34e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f95e 	bl	8002230 <LL_ADC_GetOffsetChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x366>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	e00a      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x37c>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d106      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff f947 	bl	8002258 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fa88 	bl	80024e4 <LL_ADC_IsEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 810c 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f7ff f9c5 	bl	8002378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	4aae      	ldr	r2, [pc, #696]	; (80032ac <HAL_ADC_ConfigChannel+0x670>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	f040 80fd 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x3e6>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0e9b      	lsrs	r3, r3, #26
 8003010:	3301      	adds	r3, #1
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2b09      	cmp	r3, #9
 8003018:	bf94      	ite	ls
 800301a:	2301      	movls	r3, #1
 800301c:	2300      	movhi	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e012      	b.n	8003048 <HAL_ADC_ConfigChannel+0x40c>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2b09      	cmp	r3, #9
 8003040:	bf94      	ite	ls
 8003042:	2301      	movls	r3, #1
 8003044:	2300      	movhi	r3, #0
 8003046:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	2b00      	cmp	r3, #0
 800304a:	d064      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x42c>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	e00e      	b.n	8003086 <HAL_ADC_ConfigChannel+0x44a>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	069b      	lsls	r3, r3, #26
 8003082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x46a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	3301      	adds	r3, #1
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	e010      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x48c>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x4b2>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	051b      	lsls	r3, r3, #20
 80030ec:	e011      	b.n	8003112 <HAL_ADC_ConfigChannel+0x4d6>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003112:	430b      	orrs	r3, r1
 8003114:	e069      	b.n	80031ea <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x4f6>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003130:	e00e      	b.n	8003150 <HAL_ADC_ConfigChannel+0x514>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	61fb      	str	r3, [r7, #28]
  return result;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	3301      	adds	r3, #1
 800314a:	069b      	lsls	r3, r3, #26
 800314c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x534>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0e9b      	lsrs	r3, r3, #26
 8003162:	3301      	adds	r3, #1
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	e010      	b.n	8003192 <HAL_ADC_ConfigChannel+0x556>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	617b      	str	r3, [r7, #20]
  return result;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	ea42 0103 	orr.w	r1, r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_ADC_ConfigChannel+0x582>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0e9b      	lsrs	r3, r3, #26
 80031a8:	3301      	adds	r3, #1
 80031aa:	f003 021f 	and.w	r2, r3, #31
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	3b1e      	subs	r3, #30
 80031b6:	051b      	lsls	r3, r3, #20
 80031b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031bc:	e014      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x5ac>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	60fb      	str	r3, [r7, #12]
  return result;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f003 021f 	and.w	r2, r3, #31
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	3b1e      	subs	r3, #30
 80031e2:	051b      	lsls	r3, r3, #20
 80031e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e8:	430b      	orrs	r3, r1
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7ff f899 	bl	8002326 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_ADC_ConfigChannel+0x674>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 808d 	beq.w	800331c <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003202:	482c      	ldr	r0, [pc, #176]	; (80032b4 <HAL_ADC_ConfigChannel+0x678>)
 8003204:	f7fe ffe4 	bl	80021d0 <LL_ADC_GetCommonPathInternalCh>
 8003208:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_ADC_ConfigChannel+0x67c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d12b      	bne.n	800326e <HAL_ADC_ConfigChannel+0x632>
 8003216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d125      	bne.n	800326e <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_ADC_ConfigChannel+0x680>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x5fa>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_ADC_ConfigChannel+0x684>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d16f      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800323e:	4619      	mov	r1, r3
 8003240:	481c      	ldr	r0, [pc, #112]	; (80032b4 <HAL_ADC_ConfigChannel+0x678>)
 8003242:	f7fe ffb2 	bl	80021aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003246:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_ADC_ConfigChannel+0x688>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_ADC_ConfigChannel+0x68c>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	099a      	lsrs	r2, r3, #6
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800325e:	e002      	b.n	8003266 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3b01      	subs	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f9      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800326c:	e053      	b.n	8003316 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a16      	ldr	r2, [pc, #88]	; (80032cc <HAL_ADC_ConfigChannel+0x690>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d12b      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x694>
 8003278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d125      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <HAL_ADC_ConfigChannel+0x680>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x65c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_ADC_ConfigChannel+0x684>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d140      	bne.n	800331a <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800329c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a0:	4619      	mov	r1, r3
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <HAL_ADC_ConfigChannel+0x678>)
 80032a4:	f7fe ff81 	bl	80021aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a8:	e037      	b.n	800331a <HAL_ADC_ConfigChannel+0x6de>
 80032aa:	bf00      	nop
 80032ac:	407f0000 	.word	0x407f0000
 80032b0:	80080000 	.word	0x80080000
 80032b4:	50040300 	.word	0x50040300
 80032b8:	c7520000 	.word	0xc7520000
 80032bc:	50040000 	.word	0x50040000
 80032c0:	50040200 	.word	0x50040200
 80032c4:	20000000 	.word	0x20000000
 80032c8:	053e2d63 	.word	0x053e2d63
 80032cc:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_ADC_ConfigChannel+0x6f4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d120      	bne.n	800331c <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11a      	bne.n	800331c <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_ADC_ConfigChannel+0x6f8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d115      	bne.n	800331c <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032f8:	4619      	mov	r1, r3
 80032fa:	480f      	ldr	r0, [pc, #60]	; (8003338 <HAL_ADC_ConfigChannel+0x6fc>)
 80032fc:	f7fe ff55 	bl	80021aa <LL_ADC_SetCommonPathInternalCh>
 8003300:	e00c      	b.n	800331c <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003314:	e002      	b.n	800331c <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800331a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003324:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003328:	4618      	mov	r0, r3
 800332a:	3798      	adds	r7, #152	; 0x98
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	80000001 	.word	0x80000001
 8003334:	50040000 	.word	0x50040000
 8003338:	50040300 	.word	0x50040300

0800333c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f914 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8003358:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f935 	bl	80025ce <LL_ADC_INJ_IsConversionOngoing>
 8003364:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8090 	beq.w	8003494 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d02a      	beq.n	80033d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7e5b      	ldrb	r3, [r3, #25]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d126      	bne.n	80033d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e1b      	ldrb	r3, [r3, #24]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d122      	bne.n	80033d8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003392:	2301      	movs	r3, #1
 8003394:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003396:	e014      	b.n	80033c2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4a41      	ldr	r2, [pc, #260]	; (80034a0 <ADC_ConversionStop+0x164>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d90d      	bls.n	80033bc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f043 0210 	orr.w	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e06c      	b.n	8003496 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	3301      	adds	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d1e3      	bne.n	8003398 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2240      	movs	r2, #64	; 0x40
 80033d6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d014      	beq.n	8003408 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f8cc 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f889 	bl	800250a <LL_ADC_IsDisableOngoing>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f8a8 	bl	8002558 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d014      	beq.n	8003438 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f8db 	bl	80025ce <LL_ADC_INJ_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f871 	bl	800250a <LL_ADC_IsDisableOngoing>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f8b7 	bl	80025a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d004      	beq.n	8003448 <ADC_ConversionStop+0x10c>
 800343e:	2b03      	cmp	r3, #3
 8003440:	d105      	bne.n	800344e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003442:	230c      	movs	r3, #12
 8003444:	617b      	str	r3, [r7, #20]
        break;
 8003446:	e005      	b.n	8003454 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003448:	2308      	movs	r3, #8
 800344a:	617b      	str	r3, [r7, #20]
        break;
 800344c:	e002      	b.n	8003454 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800344e:	2304      	movs	r3, #4
 8003450:	617b      	str	r3, [r7, #20]
        break;
 8003452:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003454:	f7fe fe68 	bl	8002128 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800345a:	e014      	b.n	8003486 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800345c:	f7fe fe64 	bl	8002128 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b05      	cmp	r3, #5
 8003468:	d90d      	bls.n	8003486 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f043 0210 	orr.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e007      	b.n	8003496 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e3      	bne.n	800345c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	a33fffff 	.word	0xa33fffff

080034a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f817 	bl	80024e4 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d146      	bne.n	800354a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <ADC_Enable+0xb0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	f043 0210 	orr.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e032      	b.n	800354c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe ffd2 	bl	8002494 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034f0:	f7fe fe1a 	bl	8002128 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f6:	e021      	b.n	800353c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fff1 	bl	80024e4 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe ffc1 	bl	8002494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003512:	f7fe fe09 	bl	8002128 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d90d      	bls.n	800353c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d1d6      	bne.n	80034f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	8000003f 	.word	0x8000003f

08003558 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe ffd0 	bl	800250a <LL_ADC_IsDisableOngoing>
 800356a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ffb7 	bl	80024e4 <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d040      	beq.n	80035fe <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13d      	bne.n	80035fe <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030d 	and.w	r3, r3, #13
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10c      	bne.n	80035aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe ff91 	bl	80024bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2203      	movs	r2, #3
 80035a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035a2:	f7fe fdc1 	bl	8002128 <HAL_GetTick>
 80035a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a8:	e022      	b.n	80035f0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	f043 0210 	orr.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e01c      	b.n	8003600 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035c6:	f7fe fdaf 	bl	8002128 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d90d      	bls.n	80035f0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f043 0210 	orr.w	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <LL_ADC_IsEnabled>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <LL_ADC_IsEnabled+0x18>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <LL_ADC_IsEnabled+0x1a>
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_ADC_REG_IsConversionOngoing>:
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d101      	bne.n	8003646 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b0a1      	sub	sp, #132	; 0x84
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800366e:	2302      	movs	r3, #2
 8003670:	e08f      	b.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a47      	ldr	r2, [pc, #284]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d102      	bne.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e001      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e072      	b.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ffbd 	bl	800362e <LL_ADC_REG_IsConversionOngoing>
 80036b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ffb7 	bl	800362e <LL_ADC_REG_IsConversionOngoing>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d154      	bne.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d151      	bne.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02c      	beq.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ea:	035b      	lsls	r3, r3, #13
 80036ec:	430b      	orrs	r3, r1
 80036ee:	431a      	orrs	r2, r3
 80036f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f4:	4829      	ldr	r0, [pc, #164]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80036f6:	f7ff ff87 	bl	8003608 <LL_ADC_IsEnabled>
 80036fa:	4604      	mov	r4, r0
 80036fc:	4828      	ldr	r0, [pc, #160]	; (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80036fe:	f7ff ff83 	bl	8003608 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	431c      	orrs	r4, r3
 8003706:	4828      	ldr	r0, [pc, #160]	; (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003708:	f7ff ff7e 	bl	8003608 <LL_ADC_IsEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	4323      	orrs	r3, r4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d137      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800371c:	f023 030f 	bic.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	6811      	ldr	r1, [r2, #0]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	430a      	orrs	r2, r1
 800372a:	431a      	orrs	r2, r3
 800372c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003730:	e028      	b.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800373e:	4817      	ldr	r0, [pc, #92]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003740:	f7ff ff62 	bl	8003608 <LL_ADC_IsEnabled>
 8003744:	4604      	mov	r4, r0
 8003746:	4816      	ldr	r0, [pc, #88]	; (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003748:	f7ff ff5e 	bl	8003608 <LL_ADC_IsEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	431c      	orrs	r4, r3
 8003750:	4815      	ldr	r0, [pc, #84]	; (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003752:	f7ff ff59 	bl	8003608 <LL_ADC_IsEnabled>
 8003756:	4603      	mov	r3, r0
 8003758:	4323      	orrs	r3, r4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d112      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800375e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003766:	f023 030f 	bic.w	r3, r3, #15
 800376a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800376c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800376e:	e009      	b.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003782:	e000      	b.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003784:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800378e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003792:	4618      	mov	r0, r3
 8003794:	3784      	adds	r7, #132	; 0x84
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}
 800379a:	bf00      	nop
 800379c:	50040000 	.word	0x50040000
 80037a0:	50040100 	.word	0x50040100
 80037a4:	50040300 	.word	0x50040300
 80037a8:	50040200 	.word	0x50040200

080037ac <__NVIC_SetPriorityGrouping>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_SetPriority>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	; (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	; (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	; 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	; 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <SysTick_Config>:
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038dc:	d301      	bcc.n	80038e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038de:	2301      	movs	r3, #1
 80038e0:	e00f      	b.n	8003902 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <SysTick_Config+0x40>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ea:	210f      	movs	r1, #15
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f7ff ff8e 	bl	8003810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <SysTick_Config+0x40>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <SysTick_Config+0x40>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff47 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003938:	f7ff ff5c 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 800393c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff8e 	bl	8003864 <NVIC_EncodePriority>
 8003948:	4602      	mov	r2, r0
 800394a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff5d 	bl	8003810 <__NVIC_SetPriority>
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffb0 	bl	80038cc <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e166      	b.n	8003c56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8158 	beq.w	8003c50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d00b      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d007      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b4:	2b11      	cmp	r3, #17
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d130      	bne.n	8003a22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f6:	2201      	movs	r2, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0201 	and.w	r2, r3, #1
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0xea>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b12      	cmp	r3, #18
 8003a60:	d123      	bne.n	8003aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80b2 	beq.w	8003c50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_GPIO_Init+0x2fc>)
 8003aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af0:	4a60      	ldr	r2, [pc, #384]	; (8003c74 <HAL_GPIO_Init+0x2fc>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6613      	str	r3, [r2, #96]	; 0x60
 8003af8:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <HAL_GPIO_Init+0x2fc>)
 8003afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b04:	4a5c      	ldr	r2, [pc, #368]	; (8003c78 <HAL_GPIO_Init+0x300>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b2e:	d02b      	beq.n	8003b88 <HAL_GPIO_Init+0x210>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_GPIO_Init+0x304>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d025      	beq.n	8003b84 <HAL_GPIO_Init+0x20c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a51      	ldr	r2, [pc, #324]	; (8003c80 <HAL_GPIO_Init+0x308>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d01f      	beq.n	8003b80 <HAL_GPIO_Init+0x208>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a50      	ldr	r2, [pc, #320]	; (8003c84 <HAL_GPIO_Init+0x30c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d019      	beq.n	8003b7c <HAL_GPIO_Init+0x204>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a4f      	ldr	r2, [pc, #316]	; (8003c88 <HAL_GPIO_Init+0x310>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_GPIO_Init+0x200>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_GPIO_Init+0x314>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00d      	beq.n	8003b74 <HAL_GPIO_Init+0x1fc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_GPIO_Init+0x318>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <HAL_GPIO_Init+0x1f8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <HAL_GPIO_Init+0x31c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_GPIO_Init+0x1f4>
 8003b68:	2307      	movs	r3, #7
 8003b6a:	e00e      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	e00c      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b70:	2306      	movs	r3, #6
 8003b72:	e00a      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b74:	2305      	movs	r3, #5
 8003b76:	e008      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e006      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e004      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e002      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	f002 0203 	and.w	r2, r2, #3
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4093      	lsls	r3, r2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b9a:	4937      	ldr	r1, [pc, #220]	; (8003c78 <HAL_GPIO_Init+0x300>)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bcc:	4a32      	ldr	r2, [pc, #200]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bf6:	4a28      	ldr	r2, [pc, #160]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_GPIO_Init+0x320>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f ae91 	bne.w	8003988 <HAL_GPIO_Init+0x10>
  }
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	48000400 	.word	0x48000400
 8003c80:	48000800 	.word	0x48000800
 8003c84:	48000c00 	.word	0x48000c00
 8003c88:	48001000 	.word	0x48001000
 8003c8c:	48001400 	.word	0x48001400
 8003c90:	48001800 	.word	0x48001800
 8003c94:	48001c00 	.word	0x48001c00
 8003c98:	40010400 	.word	0x40010400

08003c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cac:	787b      	ldrb	r3, [r7, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce4:	887a      	ldrh	r2, [r7, #2]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003cea:	e002      	b.n	8003cf2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cec:	887a      	ldrh	r2, [r7, #2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e081      	b.n	8003e14 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fd ff8b 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2224      	movs	r2, #36	; 0x24
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	e006      	b.n	8003d86 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d104      	bne.n	8003d98 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003daa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69d9      	ldr	r1, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	813b      	strh	r3, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 80f9 	bne.w	8004036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x34>
 8003e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0ed      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Write+0x4e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0e6      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e72:	f7fe f959 	bl	8002128 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2319      	movs	r3, #25
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fac3 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0d1      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2221      	movs	r2, #33	; 0x21
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2240      	movs	r2, #64	; 0x40
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebc:	88f8      	ldrh	r0, [r7, #6]
 8003ebe:	893a      	ldrh	r2, [r7, #8]
 8003ec0:	8979      	ldrh	r1, [r7, #10]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	4603      	mov	r3, r0
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f9d3 	bl	8004278 <I2C_RequestMemoryWrite>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a9      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2bff      	cmp	r3, #255	; 0xff
 8003eec:	d90e      	bls.n	8003f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	22ff      	movs	r2, #255	; 0xff
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	2300      	movs	r3, #0
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fba5 	bl	8004654 <I2C_TransferConfig>
 8003f0a:	e00f      	b.n	8003f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	8979      	ldrh	r1, [r7, #10]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fb94 	bl	8004654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 faad 	bl	8004490 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e07b      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d034      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x1c8>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d130      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa3f 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04d      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2bff      	cmp	r3, #255	; 0xff
 8003fa4:	d90e      	bls.n	8003fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb49 	bl	8004654 <I2C_TransferConfig>
 8003fc2:	e00f      	b.n	8003fe4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	8979      	ldrh	r1, [r7, #10]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fb38 	bl	8004654 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d19e      	bne.n	8003f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa8c 	bl	8004510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e01a      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2220      	movs	r2, #32
 8004008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_I2C_Mem_Write+0x224>)
 8004016:	400b      	ands	r3, r1
 8004018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	fe00e800 	.word	0xfe00e800

08004044 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	f040 80fd 	bne.w	8004266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_I2C_Mem_Read+0x34>
 8004072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0f1      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Mem_Read+0x4e>
 800408e:	2302      	movs	r3, #2
 8004090:	e0ea      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800409a:	f7fe f845 	bl	8002128 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2319      	movs	r3, #25
 80040a6:	2201      	movs	r2, #1
 80040a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f9af 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d5      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2222      	movs	r2, #34	; 0x22
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	; 0x40
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e4:	88f8      	ldrh	r0, [r7, #6]
 80040e6:	893a      	ldrh	r2, [r7, #8]
 80040e8:	8979      	ldrh	r1, [r7, #10]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4603      	mov	r3, r0
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f913 	bl	8004320 <I2C_RequestMemoryRead>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0ad      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2bff      	cmp	r3, #255	; 0xff
 8004114:	d90e      	bls.n	8004134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	b2da      	uxtb	r2, r3
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	4b52      	ldr	r3, [pc, #328]	; (8004270 <HAL_I2C_Mem_Read+0x22c>)
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa91 	bl	8004654 <I2C_TransferConfig>
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	b2da      	uxtb	r2, r3
 8004144:	8979      	ldrh	r1, [r7, #10]
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <HAL_I2C_Mem_Read+0x22c>)
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fa80 	bl	8004654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	2200      	movs	r2, #0
 800415c:	2104      	movs	r1, #4
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f956 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07c      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d034      	beq.n	8004214 <HAL_I2C_Mem_Read+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d130      	bne.n	8004214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	; 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f927 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04d      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2bff      	cmp	r3, #255	; 0xff
 80041d4:	d90e      	bls.n	80041f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	22ff      	movs	r2, #255	; 0xff
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	8979      	ldrh	r1, [r7, #10]
 80041e4:	2300      	movs	r3, #0
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fa31 	bl	8004654 <I2C_TransferConfig>
 80041f2:	e00f      	b.n	8004214 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	b2da      	uxtb	r2, r3
 8004204:	8979      	ldrh	r1, [r7, #10]
 8004206:	2300      	movs	r3, #0
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fa20 	bl	8004654 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d19a      	bne.n	8004154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f974 	bl	8004510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e01a      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_I2C_Mem_Read+0x230>)
 8004246:	400b      	ands	r3, r1
 8004248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	80002400 	.word	0x80002400
 8004274:	fe00e800 	.word	0xfe00e800

08004278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4603      	mov	r3, r0
 8004288:	817b      	strh	r3, [r7, #10]
 800428a:	460b      	mov	r3, r1
 800428c:	813b      	strh	r3, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	8979      	ldrh	r1, [r7, #10]
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <I2C_RequestMemoryWrite+0xa4>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f9d7 	bl	8004654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f8f0 	bl	8004490 <I2C_WaitOnTXISFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e02c      	b.n	8004314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
 80042ca:	e015      	b.n	80042f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f8d6 	bl	8004490 <I2C_WaitOnTXISFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e012      	b.n	8004314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2200      	movs	r2, #0
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f884 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	80002000 	.word	0x80002000

08004320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4603      	mov	r3, r0
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	460b      	mov	r3, r1
 8004334:	813b      	strh	r3, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	8979      	ldrh	r1, [r7, #10]
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <I2C_RequestMemoryRead+0xa4>)
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f984 	bl	8004654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	69b9      	ldr	r1, [r7, #24]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f89d 	bl	8004490 <I2C_WaitOnTXISFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e02c      	b.n	80043ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
 8004370:	e015      	b.n	800439e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004372:	893b      	ldrh	r3, [r7, #8]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	b29b      	uxth	r3, r3
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	69b9      	ldr	r1, [r7, #24]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f883 	bl	8004490 <I2C_WaitOnTXISFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e012      	b.n	80043ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f831 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	80002000 	.word	0x80002000

080043c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d103      	bne.n	80043e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d007      	beq.n	8004404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	619a      	str	r2, [r3, #24]
  }
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004420:	e022      	b.n	8004468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d01e      	beq.n	8004468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fd fe7d 	bl	8002128 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e00f      	b.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d0cd      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800449c:	e02c      	b.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f870 	bl	8004588 <I2C_IsAcknowledgeFailed>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e02a      	b.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d01e      	beq.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd fe35 	bl	8002128 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d113      	bne.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e007      	b.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d1cb      	bne.n	800449e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451c:	e028      	b.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f830 	bl	8004588 <I2C_IsAcknowledgeFailed>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e026      	b.n	8004580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fd fdf9 	bl	8002128 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d113      	bne.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	f043 0220 	orr.w	r2, r3, #32
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e007      	b.n	8004580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b20      	cmp	r3, #32
 800457c:	d1cf      	bne.n	800451e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d151      	bne.n	8004646 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a2:	e022      	b.n	80045ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d01e      	beq.n	80045ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fd fdbc 	bl	8002128 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <I2C_IsAcknowledgeFailed+0x3a>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d113      	bne.n	80045ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e02e      	b.n	8004648 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d1d5      	bne.n	80045a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2210      	movs	r2, #16
 80045fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2220      	movs	r2, #32
 8004606:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fedd 	bl	80043c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <I2C_IsAcknowledgeFailed+0xc8>)
 800461a:	400b      	ands	r3, r1
 800461c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f043 0204 	orr.w	r2, r3, #4
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	fe00e800 	.word	0xfe00e800

08004654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	4613      	mov	r3, r2
 8004664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	0d5b      	lsrs	r3, r3, #21
 8004670:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004674:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <I2C_TransferConfig+0x58>)
 8004676:	430b      	orrs	r3, r1
 8004678:	43db      	mvns	r3, r3
 800467a:	ea02 0103 	and.w	r1, r2, r3
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004684:	7a7b      	ldrb	r3, [r7, #9]
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	431a      	orrs	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	03ff63ff 	.word	0x03ff63ff

080046b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d138      	bne.n	8004738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e032      	b.n	800473a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	; 0x24
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b20      	cmp	r3, #32
 800475a:	d139      	bne.n	80047d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004766:	2302      	movs	r3, #2
 8004768:	e033      	b.n	80047d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2224      	movs	r2, #36	; 0x24
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004798:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80047e8:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_PWR_ConfigPVD+0xb8>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 020e 	bic.w	r2, r3, #14
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4928      	ldr	r1, [pc, #160]	; (8004898 <HAL_PWR_ConfigPVD+0xb8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80047fa:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a27      	ldr	r2, [pc, #156]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004804:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004806:	4b25      	ldr	r3, [pc, #148]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a24      	ldr	r2, [pc, #144]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 800480c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004812:	4b22      	ldr	r3, [pc, #136]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	4a21      	ldr	r2, [pc, #132]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004828:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004836:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4a12      	ldr	r2, [pc, #72]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4a0c      	ldr	r2, [pc, #48]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a06      	ldr	r2, [pc, #24]	; (800489c <HAL_PWR_ConfigPVD+0xbc>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40007000 	.word	0x40007000
 800489c:	40010400 	.word	0x40010400

080048a0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_PWR_EnablePVD+0x1c>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <HAL_PWR_EnablePVD+0x1c>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6053      	str	r3, [r2, #4]
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40007000 	.word	0x40007000

080048c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40007000 	.word	0x40007000

080048dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d130      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f8:	d038      	beq.n	800496c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2232      	movs	r2, #50	; 0x32
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	0c9b      	lsrs	r3, r3, #18
 800491c:	3301      	adds	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004920:	e002      	b.n	8004928 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3b01      	subs	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004928:	4b14      	ldr	r3, [pc, #80]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d102      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f2      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d110      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e00f      	b.n	800496e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d007      	beq.n	800496c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004964:	4a05      	ldr	r2, [pc, #20]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800496a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40007000 	.word	0x40007000
 8004980:	20000000 	.word	0x20000000
 8004984:	431bde83 	.word	0x431bde83

08004988 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004990:	f7fd fbca 	bl	8002128 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e075      	b.n	8004a8c <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_QSPI_Init+0x28>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e06d      	b.n	8004a8c <HAL_QSPI_Init+0x104>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fd f97b 	bl	8001cc8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80049d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f959 	bl	8004c8e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2120      	movs	r1, #32
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f951 	bl	8004caa <QSPI_WaitFlagStateUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004a0c:	7afb      	ldrb	r3, [r7, #11]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d137      	bne.n	8004a82 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a1c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6852      	ldr	r2, [r2, #4]
 8004a24:	0611      	lsls	r1, r2, #24
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68d2      	ldr	r2, [r2, #12]
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	69d2      	ldr	r2, [r2, #28]
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a12      	ldr	r2, [r2, #32]
 8004a36:	4311      	orrs	r1, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_QSPI_Init+0x10c>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6912      	ldr	r2, [r2, #16]
 8004a4e:	0411      	lsls	r1, r2, #16
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6952      	ldr	r2, [r2, #20]
 8004a54:	4311      	orrs	r1, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6992      	ldr	r2, [r2, #24]
 8004a5a:	4311      	orrs	r1, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	ffe0f8fe 	.word	0xffe0f8fe

08004a98 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004aa4:	f7fd fb40 	bl	8002128 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_QSPI_Command+0x22>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e048      	b.n	8004b4c <HAL_QSPI_Command+0xb4>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d137      	bne.n	8004b3e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f8df 	bl	8004caa <QSPI_WaitFlagStateUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d125      	bne.n	8004b42 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004af6:	2200      	movs	r2, #0
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f90c 	bl	8004d18 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d115      	bne.n	8004b34 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2102      	movs	r1, #2
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f8c9 	bl	8004caa <QSPI_WaitFlagStateUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2202      	movs	r2, #2
 8004b28:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b32:	e006      	b.n	8004b42 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3c:	e001      	b.n	8004b42 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004b64:	f7fd fae0 	bl	8002128 <HAL_GetTick>
 8004b68:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3320      	adds	r3, #32
 8004b78:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_QSPI_Receive+0x36>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e07d      	b.n	8004c86 <HAL_QSPI_Receive+0x132>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d16c      	bne.n	8004c78 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d05d      	beq.n	8004c66 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2222      	movs	r2, #34	; 0x22
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004be2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004bec:	e01c      	b.n	8004c28 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2106      	movs	r1, #6
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f856 	bl	8004caa <QSPI_WaitFlagStateUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004c02:	7ffb      	ldrb	r3, [r7, #31]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d114      	bne.n	8004c32 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1de      	bne.n	8004bee <HAL_QSPI_Receive+0x9a>
 8004c30:	e000      	b.n	8004c34 <HAL_QSPI_Receive+0xe0>
          break;
 8004c32:	bf00      	nop
      }

      if (status == HAL_OK)
 8004c34:	7ffb      	ldrb	r3, [r7, #31]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d110      	bne.n	8004c5c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2201      	movs	r2, #1
 8004c42:	2102      	movs	r1, #2
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f830 	bl	8004caa <QSPI_WaitFlagStateUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004c4e:	7ffb      	ldrb	r3, [r7, #31]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c64:	e00a      	b.n	8004c7c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	f043 0208 	orr.w	r2, r3, #8
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e001      	b.n	8004c7c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004cba:	e01a      	b.n	8004cf2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d016      	beq.n	8004cf2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fd fa30 	bl	8002128 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e00e      	b.n	8004d10 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d1d6      	bne.n	8004cbc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <QSPI_Config+0x28>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d32:	d005      	beq.n	8004d40 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3a01      	subs	r2, #1
 8004d3e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80b9 	beq.w	8004ebc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d05f      	beq.n	8004e12 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d031      	beq.n	8004dc8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	049b      	lsls	r3, r3, #18
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	ea42 0103 	orr.w	r1, r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004db8:	f000 812e 	beq.w	8005018 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	6852      	ldr	r2, [r2, #4]
 8004dc4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004dc6:	e127      	b.n	8005018 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	049b      	lsls	r3, r3, #18
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	ea42 0103 	orr.w	r1, r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	615a      	str	r2, [r3, #20]
}
 8004e10:	e102      	b.n	8005018 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02e      	beq.n	8004e78 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	431a      	orrs	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	049b      	lsls	r3, r3, #18
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	ea42 0103 	orr.w	r1, r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e68:	f000 80d6 	beq.w	8005018 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	619a      	str	r2, [r3, #24]
}
 8004e76:	e0cf      	b.n	8005018 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	431a      	orrs	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	049b      	lsls	r3, r3, #18
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	ea42 0103 	orr.w	r1, r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	615a      	str	r2, [r3, #20]
}
 8004eba:	e0ad      	b.n	8005018 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d058      	beq.n	8004f76 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	6892      	ldr	r2, [r2, #8]
 8004ecc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02d      	beq.n	8004f32 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	431a      	orrs	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	049b      	lsls	r3, r3, #18
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f24:	d078      	beq.n	8005018 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	6852      	ldr	r2, [r2, #4]
 8004f2e:	619a      	str	r2, [r3, #24]
}
 8004f30:	e072      	b.n	8005018 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	049b      	lsls	r3, r3, #18
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	ea42 0103 	orr.w	r1, r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	615a      	str	r2, [r3, #20]
}
 8004f74:	e050      	b.n	8005018 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02a      	beq.n	8004fd4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	431a      	orrs	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	049b      	lsls	r3, r3, #18
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fc6:	d027      	beq.n	8005018 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	6852      	ldr	r2, [r2, #4]
 8004fd0:	619a      	str	r2, [r3, #24]
}
 8004fd2:	e021      	b.n	8005018 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01d      	beq.n	8005018 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fea:	431a      	orrs	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	049b      	lsls	r3, r3, #18
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	431a      	orrs	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	ea42 0103 	orr.w	r1, r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	430a      	orrs	r2, r1
 8005016:	615a      	str	r2, [r3, #20]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f000 bc16 	b.w	8005864 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005038:	4ba0      	ldr	r3, [pc, #640]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005042:	4b9e      	ldr	r3, [pc, #632]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80e4 	beq.w	8005222 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_RCC_OscConfig+0x4c>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	f040 808b 	bne.w	800517e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b01      	cmp	r3, #1
 800506c:	f040 8087 	bne.w	800517e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005070:	4b92      	ldr	r3, [pc, #584]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x64>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e3ed      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <HAL_RCC_OscConfig+0x7e>
 8005098:	4b88      	ldr	r3, [pc, #544]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a0:	e005      	b.n	80050ae <HAL_RCC_OscConfig+0x8a>
 80050a2:	4b86      	ldr	r3, [pc, #536]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d223      	bcs.n	80050fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fd7e 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e3ce      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050cc:	f043 0308 	orr.w	r3, r3, #8
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b7a      	ldr	r3, [pc, #488]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4977      	ldr	r1, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050e4:	4b75      	ldr	r3, [pc, #468]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	4972      	ldr	r1, [pc, #456]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]
 80050f8:	e025      	b.n	8005146 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050fa:	4b70      	ldr	r3, [pc, #448]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6f      	ldr	r2, [pc, #444]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005100:	f043 0308 	orr.w	r3, r3, #8
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4b6d      	ldr	r3, [pc, #436]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	496a      	ldr	r1, [pc, #424]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005118:	4b68      	ldr	r3, [pc, #416]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	4965      	ldr	r1, [pc, #404]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d109      	bne.n	8005146 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd3e 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e38e      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005146:	f000 fc75 	bl	8005a34 <HAL_RCC_GetSysClockFreq>
 800514a:	4601      	mov	r1, r0
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	4a5a      	ldr	r2, [pc, #360]	; (80052c0 <HAL_RCC_OscConfig+0x29c>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	fa21 f303 	lsr.w	r3, r1, r3
 8005162:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <HAL_RCC_OscConfig+0x2a0>)
 8005164:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005166:	4b58      	ldr	r3, [pc, #352]	; (80052c8 <HAL_RCC_OscConfig+0x2a4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fc ff90 	bl	8002090 <HAL_InitTick>
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d052      	beq.n	8005220 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	e372      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d032      	beq.n	80051ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005186:	4b4d      	ldr	r3, [pc, #308]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4c      	ldr	r2, [pc, #304]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005192:	f7fc ffc9 	bl	8002128 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800519a:	f7fc ffc5 	bl	8002128 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e35b      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b8:	4b40      	ldr	r3, [pc, #256]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3f      	ldr	r2, [pc, #252]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051be:	f043 0308 	orr.w	r3, r3, #8
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	493a      	ldr	r1, [pc, #232]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	4935      	ldr	r1, [pc, #212]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	604b      	str	r3, [r1, #4]
 80051ea:	e01a      	b.n	8005222 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051ec:	4b33      	ldr	r3, [pc, #204]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a32      	ldr	r2, [pc, #200]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051f8:	f7fc ff96 	bl	8002128 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005200:	f7fc ff92 	bl	8002128 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e328      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005212:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x1dc>
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d073      	beq.n	8005316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d005      	beq.n	8005240 <HAL_RCC_OscConfig+0x21c>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d10e      	bne.n	8005258 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d10b      	bne.n	8005258 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d063      	beq.n	8005314 <HAL_RCC_OscConfig+0x2f0>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d15f      	bne.n	8005314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e305      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d106      	bne.n	8005270 <HAL_RCC_OscConfig+0x24c>
 8005262:	4b16      	ldr	r3, [pc, #88]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e01d      	b.n	80052ac <HAL_RCC_OscConfig+0x288>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x270>
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a0c      	ldr	r2, [pc, #48]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0x288>
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a05      	ldr	r2, [pc, #20]	; (80052bc <HAL_RCC_OscConfig+0x298>)
 80052a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01b      	beq.n	80052ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc ff38 	bl	8002128 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ba:	e010      	b.n	80052de <HAL_RCC_OscConfig+0x2ba>
 80052bc:	40021000 	.word	0x40021000
 80052c0:	08009f94 	.word	0x08009f94
 80052c4:	20000000 	.word	0x20000000
 80052c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fc ff2c 	bl	8002128 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e2c2      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052de:	4baf      	ldr	r3, [pc, #700]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x2a8>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fc ff1c 	bl	8002128 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f4:	f7fc ff18 	bl	8002128 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e2ae      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005306:	4ba5      	ldr	r3, [pc, #660]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x2d0>
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d060      	beq.n	80053e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d005      	beq.n	8005334 <HAL_RCC_OscConfig+0x310>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d119      	bne.n	8005362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d116      	bne.n	8005362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_OscConfig+0x328>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e28b      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	4b93      	ldr	r3, [pc, #588]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	4990      	ldr	r1, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005360:	e040      	b.n	80053e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d023      	beq.n	80053b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536a:	4b8c      	ldr	r3, [pc, #560]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a8b      	ldr	r2, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fc fed7 	bl	8002128 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800537e:	f7fc fed3 	bl	8002128 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e269      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005390:	4b82      	ldr	r3, [pc, #520]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539c:	4b7f      	ldr	r3, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	061b      	lsls	r3, r3, #24
 80053aa:	497c      	ldr	r1, [pc, #496]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	604b      	str	r3, [r1, #4]
 80053b0:	e018      	b.n	80053e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b2:	4b7a      	ldr	r3, [pc, #488]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a79      	ldr	r2, [pc, #484]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80053b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fc feb3 	bl	8002128 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c6:	f7fc feaf 	bl	8002128 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e245      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d8:	4b70      	ldr	r3, [pc, #448]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d03c      	beq.n	800546a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01c      	beq.n	8005432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f8:	4b68      	ldr	r3, [pc, #416]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fe:	4a67      	ldr	r2, [pc, #412]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fc fe8e 	bl	8002128 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005410:	f7fc fe8a 	bl	8002128 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e220      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005422:	4b5e      	ldr	r3, [pc, #376]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ef      	beq.n	8005410 <HAL_RCC_OscConfig+0x3ec>
 8005430:	e01b      	b.n	800546a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005438:	4a58      	ldr	r2, [pc, #352]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fc fe71 	bl	8002128 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800544a:	f7fc fe6d 	bl	8002128 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e203      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800545c:	4b4f      	ldr	r3, [pc, #316]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800545e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1ef      	bne.n	800544a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a6 	beq.w	80055c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800547c:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10d      	bne.n	80054a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b44      	ldr	r3, [pc, #272]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	4a43      	ldr	r2, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a4:	4b3e      	ldr	r3, [pc, #248]	; (80055a0 <HAL_RCC_OscConfig+0x57c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d118      	bne.n	80054e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b0:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <HAL_RCC_OscConfig+0x57c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3a      	ldr	r2, [pc, #232]	; (80055a0 <HAL_RCC_OscConfig+0x57c>)
 80054b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054bc:	f7fc fe34 	bl	8002128 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c4:	f7fc fe30 	bl	8002128 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e1c6      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d6:	4b32      	ldr	r3, [pc, #200]	; (80055a0 <HAL_RCC_OscConfig+0x57c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d108      	bne.n	80054fc <HAL_RCC_OscConfig+0x4d8>
 80054ea:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	4a2a      	ldr	r2, [pc, #168]	; (800559c <HAL_RCC_OscConfig+0x578>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054fa:	e024      	b.n	8005546 <HAL_RCC_OscConfig+0x522>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b05      	cmp	r3, #5
 8005502:	d110      	bne.n	8005526 <HAL_RCC_OscConfig+0x502>
 8005504:	4b25      	ldr	r3, [pc, #148]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	4a24      	ldr	r2, [pc, #144]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005514:	4b21      	ldr	r3, [pc, #132]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	4a20      	ldr	r2, [pc, #128]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005524:	e00f      	b.n	8005546 <HAL_RCC_OscConfig+0x522>
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005536:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_RCC_OscConfig+0x578>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	4a17      	ldr	r2, [pc, #92]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800553e:	f023 0304 	bic.w	r3, r3, #4
 8005542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554e:	f7fc fdeb 	bl	8002128 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005554:	e00a      	b.n	800556c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005556:	f7fc fde7 	bl	8002128 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f241 3288 	movw	r2, #5000	; 0x1388
 8005564:	4293      	cmp	r3, r2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e17b      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_OscConfig+0x578>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ed      	beq.n	8005556 <HAL_RCC_OscConfig+0x532>
 800557a:	e01a      	b.n	80055b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fc fdd4 	bl	8002128 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005582:	e00f      	b.n	80055a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005584:	f7fc fdd0 	bl	8002128 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d906      	bls.n	80055a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e164      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
 80055a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a4:	4ba8      	ldr	r3, [pc, #672]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e8      	bne.n	8005584 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b2:	7ffb      	ldrb	r3, [r7, #31]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4ba3      	ldr	r3, [pc, #652]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	4aa2      	ldr	r2, [pc, #648]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d03c      	beq.n	800564a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01c      	beq.n	8005612 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d8:	4b9b      	ldr	r3, [pc, #620]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80055da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055de:	4a9a      	ldr	r2, [pc, #616]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fc fd9e 	bl	8002128 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f0:	f7fc fd9a 	bl	8002128 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e130      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005602:	4b91      	ldr	r3, [pc, #580]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ef      	beq.n	80055f0 <HAL_RCC_OscConfig+0x5cc>
 8005610:	e01b      	b.n	800564a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005612:	4b8d      	ldr	r3, [pc, #564]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005618:	4a8b      	ldr	r2, [pc, #556]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fc fd81 	bl	8002128 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800562a:	f7fc fd7d 	bl	8002128 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e113      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800563c:	4b82      	ldr	r3, [pc, #520]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 800563e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ef      	bne.n	800562a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8107 	beq.w	8005862 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	2b02      	cmp	r3, #2
 800565a:	f040 80cb 	bne.w	80057f4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800565e:	4b7a      	ldr	r3, [pc, #488]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f003 0203 	and.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	429a      	cmp	r2, r3
 8005670:	d12c      	bne.n	80056cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	3b01      	subs	r3, #1
 800567e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d123      	bne.n	80056cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d11b      	bne.n	80056cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d113      	bne.n	80056cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	3b01      	subs	r3, #1
 80056b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d109      	bne.n	80056cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	3b01      	subs	r3, #1
 80056c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d06d      	beq.n	80057a8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b0c      	cmp	r3, #12
 80056d0:	d068      	beq.n	80057a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056d2:	4b5d      	ldr	r3, [pc, #372]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0ba      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056ee:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a55      	ldr	r2, [pc, #340]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80056f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056fa:	f7fc fd15 	bl	8002128 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005702:	f7fc fd11 	bl	8002128 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e0a7      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005714:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005720:	4b49      	ldr	r3, [pc, #292]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	4b49      	ldr	r3, [pc, #292]	; (800584c <HAL_RCC_OscConfig+0x828>)
 8005726:	4013      	ands	r3, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005730:	3a01      	subs	r2, #1
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800573a:	0212      	lsls	r2, r2, #8
 800573c:	4311      	orrs	r1, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005742:	0852      	lsrs	r2, r2, #1
 8005744:	3a01      	subs	r2, #1
 8005746:	0552      	lsls	r2, r2, #21
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800574e:	0852      	lsrs	r2, r2, #1
 8005750:	3a01      	subs	r2, #1
 8005752:	0652      	lsls	r2, r2, #25
 8005754:	4311      	orrs	r1, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800575a:	06d2      	lsls	r2, r2, #27
 800575c:	430a      	orrs	r2, r1
 800575e:	493a      	ldr	r1, [pc, #232]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005760:	4313      	orrs	r3, r2
 8005762:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005764:	4b38      	ldr	r3, [pc, #224]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a37      	ldr	r2, [pc, #220]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005770:	4b35      	ldr	r3, [pc, #212]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a34      	ldr	r2, [pc, #208]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800577a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800577c:	f7fc fcd4 	bl	8002128 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fc fcd0 	bl	8002128 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e066      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005796:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057a2:	e05e      	b.n	8005862 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e05d      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d156      	bne.n	8005862 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a23      	ldr	r2, [pc, #140]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c0:	4b21      	ldr	r3, [pc, #132]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a20      	ldr	r2, [pc, #128]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057cc:	f7fc fcac 	bl	8002128 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fc fca8 	bl	8002128 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e03e      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x7b0>
 80057f2:	e036      	b.n	8005862 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d031      	beq.n	800585e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005804:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	4a0c      	ldr	r2, [pc, #48]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800581e:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <HAL_RCC_OscConfig+0x824>)
 8005824:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fc fc7b 	bl	8002128 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005834:	e00c      	b.n	8005850 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fc fc77 	bl	8002128 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d905      	bls.n	8005850 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e00d      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
 8005848:	40021000 	.word	0x40021000
 800584c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCC_OscConfig+0x848>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ec      	bne.n	8005836 <HAL_RCC_OscConfig+0x812>
 800585c:	e001      	b.n	8005862 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0c8      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b66      	ldr	r3, [pc, #408]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d910      	bls.n	80058b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 0207 	bic.w	r2, r3, #7
 800589a:	4961      	ldr	r1, [pc, #388]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a2:	4b5f      	ldr	r3, [pc, #380]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0b0      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d04c      	beq.n	800595a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058c8:	4b56      	ldr	r3, [pc, #344]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d121      	bne.n	8005918 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e09e      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058e0:	4b50      	ldr	r3, [pc, #320]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d115      	bne.n	8005918 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e092      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058f8:	4b4a      	ldr	r3, [pc, #296]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e086      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005908:	4b46      	ldr	r3, [pc, #280]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e07e      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 0203 	bic.w	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	493f      	ldr	r1, [pc, #252]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592a:	f7fc fbfd 	bl	8002128 <HAL_GetTick>
 800592e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005930:	e00a      	b.n	8005948 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005932:	f7fc fbf9 	bl	8002128 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e066      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005948:	4b36      	ldr	r3, [pc, #216]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 020c 	and.w	r2, r3, #12
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	429a      	cmp	r2, r3
 8005958:	d1eb      	bne.n	8005932 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	492c      	ldr	r1, [pc, #176]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005978:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d210      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 0207 	bic.w	r2, r3, #7
 800598e:	4924      	ldr	r1, [pc, #144]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <HAL_RCC_ClockConfig+0x1b0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e036      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4918      	ldr	r1, [pc, #96]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d2:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4910      	ldr	r1, [pc, #64]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059e6:	f000 f825 	bl	8005a34 <HAL_RCC_GetSysClockFreq>
 80059ea:	4601      	mov	r1, r0
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <HAL_RCC_ClockConfig+0x1b4>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	5cd3      	ldrb	r3, [r2, r3]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005a02:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fc fb40 	bl	8002090 <HAL_InitTick>
 8005a10:	4603      	mov	r3, r0
 8005a12:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40022000 	.word	0x40022000
 8005a24:	40021000 	.word	0x40021000
 8005a28:	08009f94 	.word	0x08009f94
 8005a2c:	20000000 	.word	0x20000000
 8005a30:	20000004 	.word	0x20000004

08005a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b089      	sub	sp, #36	; 0x24
 8005a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a42:	4b3d      	ldr	r3, [pc, #244]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a4c:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d121      	bne.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d11e      	bne.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a68:	4b33      	ldr	r3, [pc, #204]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a74:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e005      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a90:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa4:	e00a      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d102      	bne.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aac:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e004      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ab8:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d133      	bne.n	8005b2a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d002      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xa4>
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0xaa>
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ada:	617b      	str	r3, [r7, #20]
      break;
 8005adc:	e005      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ae0:	617b      	str	r3, [r7, #20]
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	617b      	str	r3, [r7, #20]
      break;
 8005ae8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	3301      	adds	r3, #1
 8005af6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	fb02 f203 	mul.w	r2, r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	0e5b      	lsrs	r3, r3, #25
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3724      	adds	r7, #36	; 0x24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	08009fac 	.word	0x08009fac
 8005b40:	00f42400 	.word	0x00f42400
 8005b44:	018cba80 	.word	0x018cba80

08005b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000000 	.word	0x20000000

08005b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b64:	f7ff fff0 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b76:	5cd3      	ldrb	r3, [r2, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	08009fa4 	.word	0x08009fa4

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b90:	f7ff ffda 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b94:	4601      	mov	r1, r0
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4a04      	ldr	r2, [pc, #16]	; (8005bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	08009fa4 	.word	0x08009fa4

08005bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bd0:	f7fe fe76 	bl	80048c0 <HAL_PWREx_GetVoltageRange>
 8005bd4:	6178      	str	r0, [r7, #20]
 8005bd6:	e014      	b.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	; 0x58
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bf0:	f7fe fe66 	bl	80048c0 <HAL_PWREx_GetVoltageRange>
 8005bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d10b      	bne.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b80      	cmp	r3, #128	; 0x80
 8005c0e:	d919      	bls.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2ba0      	cmp	r3, #160	; 0xa0
 8005c14:	d902      	bls.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c16:	2302      	movs	r3, #2
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e013      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e010      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d902      	bls.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c28:	2303      	movs	r3, #3
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	e00a      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d102      	bne.n	8005c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c34:	2302      	movs	r3, #2
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	e004      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d101      	bne.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c40:	2301      	movs	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 0207 	bic.w	r2, r3, #7
 8005c4c:	4909      	ldr	r1, [pc, #36]	; (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d001      	beq.n	8005c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40022000 	.word	0x40022000

08005c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c80:	2300      	movs	r3, #0
 8005c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c84:	2300      	movs	r3, #0
 8005c86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d03f      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9c:	d01c      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca2:	d802      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005ca8:	e01f      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cae:	d003      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005cb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cb4:	d01c      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005cb6:	e018      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cb8:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a84      	ldr	r2, [pc, #528]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cc4:	e015      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fb0d 	bl	80062ec <RCCEx_PLLSAI1_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cd6:	e00c      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3320      	adds	r3, #32
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fbf4 	bl	80064cc <RCCEx_PLLSAI2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	74fb      	strb	r3, [r7, #19]
      break;
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7cfb      	ldrb	r3, [r7, #19]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cf8:	4b75      	ldr	r3, [pc, #468]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d06:	4972      	ldr	r1, [pc, #456]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d0e:	e001      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d03f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d28:	d01c      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d2e:	d802      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005d34:	e01f      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005d3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d40:	d01c      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005d42:	e018      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d44:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4a61      	ldr	r2, [pc, #388]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d50:	e015      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fac7 	bl	80062ec <RCCEx_PLLSAI1_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d62:	e00c      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3320      	adds	r3, #32
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fbae 	bl	80064cc <RCCEx_PLLSAI2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	74fb      	strb	r3, [r7, #19]
      break;
 8005d7a:	e000      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d84:	4b52      	ldr	r3, [pc, #328]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d92:	494f      	ldr	r1, [pc, #316]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d9a:	e001      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a0 	beq.w	8005eee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dae:	2300      	movs	r3, #0
 8005db0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00d      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc8:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dcc:	4a40      	ldr	r2, [pc, #256]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd4:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de0:	2301      	movs	r3, #1
 8005de2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de4:	4b3b      	ldr	r3, [pc, #236]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3a      	ldr	r2, [pc, #232]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df0:	f7fc f99a 	bl	8002128 <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005df6:	e009      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df8:	f7fc f996 	bl	8002128 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d902      	bls.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	74fb      	strb	r3, [r7, #19]
        break;
 8005e0a:	e005      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e0c:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0ef      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d15c      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01f      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d019      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e48:	4b21      	ldr	r3, [pc, #132]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e58:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7fc f955 	bl	8002128 <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e80:	e00b      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fc f951 	bl	8002128 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d902      	bls.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	74fb      	strb	r3, [r7, #19]
            break;
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ec      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eae:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	4904      	ldr	r1, [pc, #16]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ec6:	e009      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	74bb      	strb	r3, [r7, #18]
 8005ecc:	e006      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005edc:	7c7b      	ldrb	r3, [r7, #17]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d105      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee2:	4ba6      	ldr	r3, [pc, #664]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	4aa5      	ldr	r2, [pc, #660]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005efa:	4ba0      	ldr	r3, [pc, #640]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f023 0203 	bic.w	r2, r3, #3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	499c      	ldr	r1, [pc, #624]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f1c:	4b97      	ldr	r3, [pc, #604]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f023 020c 	bic.w	r2, r3, #12
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	4994      	ldr	r1, [pc, #592]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f3e:	4b8f      	ldr	r3, [pc, #572]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	498b      	ldr	r1, [pc, #556]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f60:	4b86      	ldr	r3, [pc, #536]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	4983      	ldr	r1, [pc, #524]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f82:	4b7e      	ldr	r3, [pc, #504]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	497a      	ldr	r1, [pc, #488]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fa4:	4b75      	ldr	r3, [pc, #468]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	4972      	ldr	r1, [pc, #456]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fc6:	4b6d      	ldr	r3, [pc, #436]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	4969      	ldr	r1, [pc, #420]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fe8:	4b64      	ldr	r3, [pc, #400]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff6:	4961      	ldr	r1, [pc, #388]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800600a:	4b5c      	ldr	r3, [pc, #368]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006018:	4958      	ldr	r1, [pc, #352]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800602c:	4b53      	ldr	r3, [pc, #332]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	4950      	ldr	r1, [pc, #320]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800604e:	4b4b      	ldr	r3, [pc, #300]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605c:	4947      	ldr	r1, [pc, #284]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006070:	4b42      	ldr	r3, [pc, #264]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006076:	f023 0203 	bic.w	r2, r3, #3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	493f      	ldr	r1, [pc, #252]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d028      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006092:	4b3a      	ldr	r3, [pc, #232]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4936      	ldr	r1, [pc, #216]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b0:	d106      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b2:	4b32      	ldr	r3, [pc, #200]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4a31      	ldr	r2, [pc, #196]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060bc:	60d3      	str	r3, [r2, #12]
 80060be:	e011      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	2101      	movs	r1, #1
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 f90b 	bl	80062ec <RCCEx_PLLSAI1_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060da:	7cfb      	ldrb	r3, [r7, #19]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d028      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060f0:	4b22      	ldr	r3, [pc, #136]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	491f      	ldr	r1, [pc, #124]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610e:	d106      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006110:	4b1a      	ldr	r3, [pc, #104]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a19      	ldr	r2, [pc, #100]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611a:	60d3      	str	r3, [r2, #12]
 800611c:	e011      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006126:	d10c      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	2101      	movs	r1, #1
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f8dc 	bl	80062ec <RCCEx_PLLSAI1_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800613e:	7cfb      	ldrb	r3, [r7, #19]
 8006140:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d02a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800615c:	4907      	ldr	r1, [pc, #28]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616c:	d108      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4a02      	ldr	r2, [pc, #8]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006178:	60d3      	str	r3, [r2, #12]
 800617a:	e013      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800617c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006188:	d10c      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	2101      	movs	r1, #1
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f8ab 	bl	80062ec <RCCEx_PLLSAI1_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800619a:	7cfb      	ldrb	r3, [r7, #19]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d02f      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061b0:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061be:	4929      	ldr	r1, [pc, #164]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ce:	d10d      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f888 	bl	80062ec <RCCEx_PLLSAI1_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061e0:	7cfb      	ldrb	r3, [r7, #19]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d014      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80061e6:	7cfb      	ldrb	r3, [r7, #19]
 80061e8:	74bb      	strb	r3, [r7, #18]
 80061ea:	e011      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f4:	d10c      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3320      	adds	r3, #32
 80061fa:	2102      	movs	r1, #2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f965 	bl	80064cc <RCCEx_PLLSAI2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006206:	7cfb      	ldrb	r3, [r7, #19]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800622c:	490d      	ldr	r1, [pc, #52]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006240:	4b08      	ldr	r3, [pc, #32]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006250:	4904      	ldr	r1, [pc, #16]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006258:	7cbb      	ldrb	r3, [r7, #18]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40021000 	.word	0x40021000

08006268 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006270:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8006276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800627a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <HAL_RCCEx_CRSConfig+0x7c>)
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8006282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006286:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80062b0:	4a0d      	ldr	r2, [pc, #52]	; (80062e8 <HAL_RCCEx_CRSConfig+0x80>)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <HAL_RCCEx_CRSConfig+0x80>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	4908      	ldr	r1, [pc, #32]	; (80062e8 <HAL_RCCEx_CRSConfig+0x80>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <HAL_RCCEx_CRSConfig+0x80>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a06      	ldr	r2, [pc, #24]	; (80062e8 <HAL_RCCEx_CRSConfig+0x80>)
 80062d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062d4:	6013      	str	r3, [r2, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40006000 	.word	0x40006000

080062ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062fa:	4b73      	ldr	r3, [pc, #460]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d018      	beq.n	8006338 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006306:	4b70      	ldr	r3, [pc, #448]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0203 	and.w	r2, r3, #3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d10d      	bne.n	8006332 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
       ||
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800631e:	4b6a      	ldr	r3, [pc, #424]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
       ||
 800632e:	429a      	cmp	r2, r3
 8006330:	d044      	beq.n	80063bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
 8006336:	e041      	b.n	80063bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d00c      	beq.n	800635a <RCCEx_PLLSAI1_Config+0x6e>
 8006340:	2b03      	cmp	r3, #3
 8006342:	d013      	beq.n	800636c <RCCEx_PLLSAI1_Config+0x80>
 8006344:	2b01      	cmp	r3, #1
 8006346:	d120      	bne.n	800638a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006348:	4b5f      	ldr	r3, [pc, #380]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d11d      	bne.n	8006390 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006358:	e01a      	b.n	8006390 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800635a:	4b5b      	ldr	r3, [pc, #364]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006362:	2b00      	cmp	r3, #0
 8006364:	d116      	bne.n	8006394 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800636a:	e013      	b.n	8006394 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800636c:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10f      	bne.n	8006398 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006378:	4b53      	ldr	r3, [pc, #332]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006388:	e006      	b.n	8006398 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]
      break;
 800638e:	e004      	b.n	800639a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006390:	bf00      	nop
 8006392:	e002      	b.n	800639a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006398:	bf00      	nop
    }

    if(status == HAL_OK)
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10d      	bne.n	80063bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063a0:	4b49      	ldr	r3, [pc, #292]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6819      	ldr	r1, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	430b      	orrs	r3, r1
 80063b6:	4944      	ldr	r1, [pc, #272]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d17c      	bne.n	80064bc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063c2:	4b41      	ldr	r3, [pc, #260]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a40      	ldr	r2, [pc, #256]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ce:	f7fb feab 	bl	8002128 <HAL_GetTick>
 80063d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063d4:	e009      	b.n	80063ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063d6:	f7fb fea7 	bl	8002128 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d902      	bls.n	80063ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	73fb      	strb	r3, [r7, #15]
        break;
 80063e8:	e005      	b.n	80063f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063ea:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1ef      	bne.n	80063d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d15f      	bne.n	80064bc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d110      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006402:	4b31      	ldr	r3, [pc, #196]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800640a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6892      	ldr	r2, [r2, #8]
 8006412:	0211      	lsls	r1, r2, #8
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68d2      	ldr	r2, [r2, #12]
 8006418:	06d2      	lsls	r2, r2, #27
 800641a:	430a      	orrs	r2, r1
 800641c:	492a      	ldr	r1, [pc, #168]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800641e:	4313      	orrs	r3, r2
 8006420:	610b      	str	r3, [r1, #16]
 8006422:	e027      	b.n	8006474 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d112      	bne.n	8006450 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800642a:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006432:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6892      	ldr	r2, [r2, #8]
 800643a:	0211      	lsls	r1, r2, #8
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6912      	ldr	r2, [r2, #16]
 8006440:	0852      	lsrs	r2, r2, #1
 8006442:	3a01      	subs	r2, #1
 8006444:	0552      	lsls	r2, r2, #21
 8006446:	430a      	orrs	r2, r1
 8006448:	491f      	ldr	r1, [pc, #124]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	610b      	str	r3, [r1, #16]
 800644e:	e011      	b.n	8006474 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006450:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6892      	ldr	r2, [r2, #8]
 8006460:	0211      	lsls	r1, r2, #8
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6952      	ldr	r2, [r2, #20]
 8006466:	0852      	lsrs	r2, r2, #1
 8006468:	3a01      	subs	r2, #1
 800646a:	0652      	lsls	r2, r2, #25
 800646c:	430a      	orrs	r2, r1
 800646e:	4916      	ldr	r1, [pc, #88]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006470:	4313      	orrs	r3, r2
 8006472:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006474:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a13      	ldr	r2, [pc, #76]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800647a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800647e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fb fe52 	bl	8002128 <HAL_GetTick>
 8006484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006486:	e009      	b.n	800649c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006488:	f7fb fe4e 	bl	8002128 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d902      	bls.n	800649c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	73fb      	strb	r3, [r7, #15]
          break;
 800649a:	e005      	b.n	80064a8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0ef      	beq.n	8006488 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	4904      	ldr	r1, [pc, #16]	; (80064c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000

080064cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064da:	4b68      	ldr	r3, [pc, #416]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d018      	beq.n	8006518 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064e6:	4b65      	ldr	r3, [pc, #404]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0203 	and.w	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d10d      	bne.n	8006512 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
       ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80064fe:	4b5f      	ldr	r3, [pc, #380]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	091b      	lsrs	r3, r3, #4
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
       ||
 800650e:	429a      	cmp	r2, r3
 8006510:	d044      	beq.n	800659c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
 8006516:	e041      	b.n	800659c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d00c      	beq.n	800653a <RCCEx_PLLSAI2_Config+0x6e>
 8006520:	2b03      	cmp	r3, #3
 8006522:	d013      	beq.n	800654c <RCCEx_PLLSAI2_Config+0x80>
 8006524:	2b01      	cmp	r3, #1
 8006526:	d120      	bne.n	800656a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006528:	4b54      	ldr	r3, [pc, #336]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11d      	bne.n	8006570 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006538:	e01a      	b.n	8006570 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800653a:	4b50      	ldr	r3, [pc, #320]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006542:	2b00      	cmp	r3, #0
 8006544:	d116      	bne.n	8006574 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800654a:	e013      	b.n	8006574 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10f      	bne.n	8006578 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006558:	4b48      	ldr	r3, [pc, #288]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006568:	e006      	b.n	8006578 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
      break;
 800656e:	e004      	b.n	800657a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006570:	bf00      	nop
 8006572:	e002      	b.n	800657a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006578:	bf00      	nop
    }

    if(status == HAL_OK)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10d      	bne.n	800659c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006580:	4b3e      	ldr	r3, [pc, #248]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	3b01      	subs	r3, #1
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	430b      	orrs	r3, r1
 8006596:	4939      	ldr	r1, [pc, #228]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006598:	4313      	orrs	r3, r2
 800659a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d166      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065a2:	4b36      	ldr	r3, [pc, #216]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a35      	ldr	r2, [pc, #212]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80065a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ae:	f7fb fdbb 	bl	8002128 <HAL_GetTick>
 80065b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065b4:	e009      	b.n	80065ca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065b6:	f7fb fdb7 	bl	8002128 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d902      	bls.n	80065ca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	73fb      	strb	r3, [r7, #15]
        break;
 80065c8:	e005      	b.n	80065d6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ef      	bne.n	80065b6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d149      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d110      	bne.n	8006604 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6892      	ldr	r2, [r2, #8]
 80065f2:	0211      	lsls	r1, r2, #8
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	68d2      	ldr	r2, [r2, #12]
 80065f8:	06d2      	lsls	r2, r2, #27
 80065fa:	430a      	orrs	r2, r1
 80065fc:	491f      	ldr	r1, [pc, #124]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	614b      	str	r3, [r1, #20]
 8006602:	e011      	b.n	8006628 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800660c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6892      	ldr	r2, [r2, #8]
 8006614:	0211      	lsls	r1, r2, #8
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6912      	ldr	r2, [r2, #16]
 800661a:	0852      	lsrs	r2, r2, #1
 800661c:	3a01      	subs	r2, #1
 800661e:	0652      	lsls	r2, r2, #25
 8006620:	430a      	orrs	r2, r1
 8006622:	4916      	ldr	r1, [pc, #88]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006624:	4313      	orrs	r3, r2
 8006626:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006628:	4b14      	ldr	r3, [pc, #80]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a13      	ldr	r2, [pc, #76]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800662e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006634:	f7fb fd78 	bl	8002128 <HAL_GetTick>
 8006638:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800663a:	e009      	b.n	8006650 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800663c:	f7fb fd74 	bl	8002128 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d902      	bls.n	8006650 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	73fb      	strb	r3, [r7, #15]
          break;
 800664e:	e005      	b.n	800665c <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0ef      	beq.n	800663c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	4904      	ldr	r1, [pc, #16]	; (800667c <RCCEx_PLLSAI2_Config+0x1b0>)
 800666c:	4313      	orrs	r3, r2
 800666e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40021000 	.word	0x40021000

08006680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e07c      	b.n	800678c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fb fb7f 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d2:	d902      	bls.n	80066da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	e002      	b.n	80066e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066e8:	d007      	beq.n	80066fa <HAL_SPI_Init+0x7a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066f2:	d002      	beq.n	80066fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800670a:	d903      	bls.n	8006714 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
 8006712:	e002      	b.n	800671a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	ea42 0103 	orr.w	r1, r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	f003 0204 	and.w	r2, r3, #4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	ea42 0103 	orr.w	r1, r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_SPI_Transmit+0x22>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e150      	b.n	8006a58 <HAL_SPI_Transmit+0x2c4>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067be:	f7fb fcb3 	bl	8002128 <HAL_GetTick>
 80067c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d002      	beq.n	80067da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
 80067d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067d8:	e135      	b.n	8006a46 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x52>
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067ea:	e12c      	b.n	8006a46 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2203      	movs	r2, #3
 80067f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	88fa      	ldrh	r2, [r7, #6]
 800680a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006836:	d107      	bne.n	8006848 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006846:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d007      	beq.n	8006866 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006864:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800686e:	d94b      	bls.n	8006908 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_SPI_Transmit+0xea>
 8006878:	8afb      	ldrh	r3, [r7, #22]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d13e      	bne.n	80068fc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	881a      	ldrh	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	1c9a      	adds	r2, r3, #2
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068a2:	e02b      	b.n	80068fc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d112      	bne.n	80068d8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	1c9a      	adds	r2, r3, #2
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068d6:	e011      	b.n	80068fc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d8:	f7fb fc26 	bl	8002128 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d803      	bhi.n	80068f0 <HAL_SPI_Transmit+0x15c>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d102      	bne.n	80068f6 <HAL_SPI_Transmit+0x162>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068fa:	e0a4      	b.n	8006a46 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ce      	bne.n	80068a4 <HAL_SPI_Transmit+0x110>
 8006906:	e07c      	b.n	8006a02 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_SPI_Transmit+0x182>
 8006910:	8afb      	ldrh	r3, [r7, #22]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d170      	bne.n	80069f8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d912      	bls.n	8006946 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	1c9a      	adds	r2, r3, #2
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b02      	subs	r3, #2
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006944:	e058      	b.n	80069f8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	7812      	ldrb	r2, [r2, #0]
 8006952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800696c:	e044      	b.n	80069f8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b02      	cmp	r3, #2
 800697a:	d12b      	bne.n	80069d4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	d912      	bls.n	80069ac <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	1c9a      	adds	r2, r3, #2
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b02      	subs	r3, #2
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069aa:	e025      	b.n	80069f8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	7812      	ldrb	r2, [r2, #0]
 80069b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d2:	e011      	b.n	80069f8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d4:	f7fb fba8 	bl	8002128 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d803      	bhi.n	80069ec <HAL_SPI_Transmit+0x258>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Transmit+0x25e>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069f6:	e026      	b.n	8006a46 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1b5      	bne.n	800696e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fc94 	bl	8007334 <SPI_EndRxTxTransaction>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e000      	b.n	8006a46 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006a44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a7c:	d112      	bne.n	8006aa4 <HAL_SPI_Receive+0x44>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10e      	bne.n	8006aa4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2204      	movs	r2, #4
 8006a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f908 	bl	8006cb0 <HAL_SPI_TransmitReceive>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	e101      	b.n	8006ca8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_SPI_Receive+0x52>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e0fa      	b.n	8006ca8 <HAL_SPI_Receive+0x248>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aba:	f7fb fb35 	bl	8002128 <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d002      	beq.n	8006ad2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ad0:	e0e1      	b.n	8006c96 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_SPI_Receive+0x7e>
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ae2:	e0d8      	b.n	8006c96 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	88fa      	ldrh	r2, [r7, #6]
 8006afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b2e:	d908      	bls.n	8006b42 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	e007      	b.n	8006b52 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b50:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5a:	d107      	bne.n	8006b6c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d007      	beq.n	8006b8a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b92:	d867      	bhi.n	8006c64 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b94:	e030      	b.n	8006bf8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d117      	bne.n	8006bd4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f103 020c 	add.w	r2, r3, #12
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006bd2:	e011      	b.n	8006bf8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bd4:	f7fb faa8 	bl	8002128 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d803      	bhi.n	8006bec <HAL_SPI_Receive+0x18c>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d102      	bne.n	8006bf2 <HAL_SPI_Receive+0x192>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006bf6:	e04e      	b.n	8006c96 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1c8      	bne.n	8006b96 <HAL_SPI_Receive+0x136>
 8006c04:	e034      	b.n	8006c70 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d115      	bne.n	8006c40 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	b292      	uxth	r2, r2
 8006c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	1c9a      	adds	r2, r3, #2
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	3b01      	subs	r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c3e:	e011      	b.n	8006c64 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c40:	f7fb fa72 	bl	8002128 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d803      	bhi.n	8006c58 <HAL_SPI_Receive+0x1f8>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d102      	bne.n	8006c5e <HAL_SPI_Receive+0x1fe>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d102      	bne.n	8006c64 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c62:	e018      	b.n	8006c96 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1ca      	bne.n	8006c06 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fb05 	bl	8007284 <SPI_EndRxTransaction>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
 8006c92:	e000      	b.n	8006c96 <HAL_SPI_Receive+0x236>
  }

error :
 8006c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x26>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e1fb      	b.n	80070ce <HAL_SPI_TransmitReceive+0x41e>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cde:	f7fb fa23 	bl	8002128 <HAL_GetTick>
 8006ce2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006cf2:	887b      	ldrh	r3, [r7, #2]
 8006cf4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cfa:	7efb      	ldrb	r3, [r7, #27]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d00e      	beq.n	8006d1e <HAL_SPI_TransmitReceive+0x6e>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d06:	d106      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x66>
 8006d10:	7efb      	ldrb	r3, [r7, #27]
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d003      	beq.n	8006d1e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
 8006d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d1c:	e1cd      	b.n	80070ba <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x80>
 8006d2a:	887b      	ldrh	r3, [r7, #2]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d36:	e1c0      	b.n	80070ba <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d003      	beq.n	8006d4c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2205      	movs	r2, #5
 8006d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	887a      	ldrh	r2, [r7, #2]
 8006d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	887a      	ldrh	r2, [r7, #2]
 8006d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	887a      	ldrh	r2, [r7, #2]
 8006d72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	887a      	ldrh	r2, [r7, #2]
 8006d78:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d8e:	d802      	bhi.n	8006d96 <HAL_SPI_TransmitReceive+0xe6>
 8006d90:	8a3b      	ldrh	r3, [r7, #16]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d908      	bls.n	8006da8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	e007      	b.n	8006db8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006db6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc2:	2b40      	cmp	r3, #64	; 0x40
 8006dc4:	d007      	beq.n	8006dd6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dde:	d97c      	bls.n	8006eda <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HAL_SPI_TransmitReceive+0x13e>
 8006de8:	8a7b      	ldrh	r3, [r7, #18]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d169      	bne.n	8006ec2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	881a      	ldrh	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	1c9a      	adds	r2, r3, #2
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e12:	e056      	b.n	8006ec2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d11b      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x1aa>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d016      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x1aa>
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d113      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	881a      	ldrh	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	1c9a      	adds	r2, r3, #2
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d11c      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x1f2>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d016      	beq.n	8006ea2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	1c9a      	adds	r2, r3, #2
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ea2:	f7fb f941 	bl	8002128 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d807      	bhi.n	8006ec2 <HAL_SPI_TransmitReceive+0x212>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d003      	beq.n	8006ec2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ec0:	e0fb      	b.n	80070ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1a3      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x164>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d19d      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x164>
 8006ed8:	e0df      	b.n	800709a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x23a>
 8006ee2:	8a7b      	ldrh	r3, [r7, #18]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 80cb 	bne.w	8007080 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d912      	bls.n	8006f1a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b02      	subs	r3, #2
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f18:	e0b2      	b.n	8007080 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f40:	e09e      	b.n	8007080 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d134      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x30a>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d02f      	beq.n	8006fba <HAL_SPI_TransmitReceive+0x30a>
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d12c      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d912      	bls.n	8006f90 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	881a      	ldrh	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	1c9a      	adds	r2, r3, #2
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b02      	subs	r3, #2
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f8e:	e012      	b.n	8006fb6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d148      	bne.n	800705a <HAL_SPI_TransmitReceive+0x3aa>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d042      	beq.n	800705a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d923      	bls.n	8007028 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	b292      	uxth	r2, r2
 8006fec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	1c9a      	adds	r2, r3, #2
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b02      	subs	r3, #2
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d81f      	bhi.n	8007056 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e016      	b.n	8007056 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f103 020c 	add.w	r2, r3, #12
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007056:	2301      	movs	r3, #1
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800705a:	f7fb f865 	bl	8002128 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007066:	429a      	cmp	r2, r3
 8007068:	d803      	bhi.n	8007072 <HAL_SPI_TransmitReceive+0x3c2>
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d102      	bne.n	8007078 <HAL_SPI_TransmitReceive+0x3c8>
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800707e:	e01c      	b.n	80070ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	f47f af5b 	bne.w	8006f42 <HAL_SPI_TransmitReceive+0x292>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f af54 	bne.w	8006f42 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f948 	bl	8007334 <SPI_EndRxTxTransaction>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d006      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	661a      	str	r2, [r3, #96]	; 0x60
 80070b6:	e000      	b.n	80070ba <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80070b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3728      	adds	r7, #40	; 0x28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	4613      	mov	r3, r2
 80070e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070e6:	e04c      	b.n	8007182 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d048      	beq.n	8007182 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80070f0:	f7fb f81a 	bl	8002128 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d902      	bls.n	8007106 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d13d      	bne.n	8007182 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800711e:	d111      	bne.n	8007144 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007128:	d004      	beq.n	8007134 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007132:	d107      	bne.n	8007144 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714c:	d10f      	bne.n	800716e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800716c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e00f      	b.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4013      	ands	r3, r2
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	bf0c      	ite	eq
 8007192:	2301      	moveq	r3, #1
 8007194:	2300      	movne	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	429a      	cmp	r2, r3
 800719e:	d1a3      	bne.n	80070e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80071b8:	e057      	b.n	800726a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80071c0:	d106      	bne.n	80071d0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	330c      	adds	r3, #12
 80071ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d048      	beq.n	800726a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80071d8:	f7fa ffa6 	bl	8002128 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d902      	bls.n	80071ee <SPI_WaitFifoStateUntilTimeout+0x44>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d13d      	bne.n	800726a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007206:	d111      	bne.n	800722c <SPI_WaitFifoStateUntilTimeout+0x82>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007210:	d004      	beq.n	800721c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721a:	d107      	bne.n	800722c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800722a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007234:	d10f      	bne.n	8007256 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e008      	b.n	800727c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d19f      	bne.n	80071ba <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007298:	d111      	bne.n	80072be <SPI_EndRxTransaction+0x3a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	d004      	beq.n	80072ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ac:	d107      	bne.n	80072be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2200      	movs	r2, #0
 80072c6:	2180      	movs	r1, #128	; 0x80
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff ff04 	bl	80070d6 <SPI_WaitFlagStateUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e023      	b.n	800732c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ec:	d11d      	bne.n	800732a <SPI_EndRxTransaction+0xa6>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f6:	d004      	beq.n	8007302 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007300:	d113      	bne.n	800732a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff4b 	bl	80071aa <SPI_WaitFifoStateUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e000      	b.n	800732c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2200      	movs	r2, #0
 8007348:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff ff2c 	bl	80071aa <SPI_WaitFifoStateUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735c:	f043 0220 	orr.w	r2, r3, #32
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e027      	b.n	80073b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	2180      	movs	r1, #128	; 0x80
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff feaf 	bl	80070d6 <SPI_WaitFlagStateUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e014      	b.n	80073b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff ff05 	bl	80071aa <SPI_WaitFifoStateUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e000      	b.n	80073b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <__errno>:
 80073c0:	4b01      	ldr	r3, [pc, #4]	; (80073c8 <__errno+0x8>)
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	2000000c 	.word	0x2000000c

080073cc <__libc_init_array>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4e0d      	ldr	r6, [pc, #52]	; (8007404 <__libc_init_array+0x38>)
 80073d0:	4c0d      	ldr	r4, [pc, #52]	; (8007408 <__libc_init_array+0x3c>)
 80073d2:	1ba4      	subs	r4, r4, r6
 80073d4:	10a4      	asrs	r4, r4, #2
 80073d6:	2500      	movs	r5, #0
 80073d8:	42a5      	cmp	r5, r4
 80073da:	d109      	bne.n	80073f0 <__libc_init_array+0x24>
 80073dc:	4e0b      	ldr	r6, [pc, #44]	; (800740c <__libc_init_array+0x40>)
 80073de:	4c0c      	ldr	r4, [pc, #48]	; (8007410 <__libc_init_array+0x44>)
 80073e0:	f002 fbf6 	bl	8009bd0 <_init>
 80073e4:	1ba4      	subs	r4, r4, r6
 80073e6:	10a4      	asrs	r4, r4, #2
 80073e8:	2500      	movs	r5, #0
 80073ea:	42a5      	cmp	r5, r4
 80073ec:	d105      	bne.n	80073fa <__libc_init_array+0x2e>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f4:	4798      	blx	r3
 80073f6:	3501      	adds	r5, #1
 80073f8:	e7ee      	b.n	80073d8 <__libc_init_array+0xc>
 80073fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073fe:	4798      	blx	r3
 8007400:	3501      	adds	r5, #1
 8007402:	e7f2      	b.n	80073ea <__libc_init_array+0x1e>
 8007404:	0800a2a0 	.word	0x0800a2a0
 8007408:	0800a2a0 	.word	0x0800a2a0
 800740c:	0800a2a0 	.word	0x0800a2a0
 8007410:	0800a2a4 	.word	0x0800a2a4

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <__cvt>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	ec55 4b10 	vmov	r4, r5, d0
 800742c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800742e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007432:	2d00      	cmp	r5, #0
 8007434:	460e      	mov	r6, r1
 8007436:	4691      	mov	r9, r2
 8007438:	4619      	mov	r1, r3
 800743a:	bfb8      	it	lt
 800743c:	4622      	movlt	r2, r4
 800743e:	462b      	mov	r3, r5
 8007440:	f027 0720 	bic.w	r7, r7, #32
 8007444:	bfbb      	ittet	lt
 8007446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800744a:	461d      	movlt	r5, r3
 800744c:	2300      	movge	r3, #0
 800744e:	232d      	movlt	r3, #45	; 0x2d
 8007450:	bfb8      	it	lt
 8007452:	4614      	movlt	r4, r2
 8007454:	2f46      	cmp	r7, #70	; 0x46
 8007456:	700b      	strb	r3, [r1, #0]
 8007458:	d004      	beq.n	8007464 <__cvt+0x40>
 800745a:	2f45      	cmp	r7, #69	; 0x45
 800745c:	d100      	bne.n	8007460 <__cvt+0x3c>
 800745e:	3601      	adds	r6, #1
 8007460:	2102      	movs	r1, #2
 8007462:	e000      	b.n	8007466 <__cvt+0x42>
 8007464:	2103      	movs	r1, #3
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	ab02      	add	r3, sp, #8
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4632      	mov	r2, r6
 8007470:	4653      	mov	r3, sl
 8007472:	ec45 4b10 	vmov	d0, r4, r5
 8007476:	f000 fe0f 	bl	8008098 <_dtoa_r>
 800747a:	2f47      	cmp	r7, #71	; 0x47
 800747c:	4680      	mov	r8, r0
 800747e:	d102      	bne.n	8007486 <__cvt+0x62>
 8007480:	f019 0f01 	tst.w	r9, #1
 8007484:	d026      	beq.n	80074d4 <__cvt+0xb0>
 8007486:	2f46      	cmp	r7, #70	; 0x46
 8007488:	eb08 0906 	add.w	r9, r8, r6
 800748c:	d111      	bne.n	80074b2 <__cvt+0x8e>
 800748e:	f898 3000 	ldrb.w	r3, [r8]
 8007492:	2b30      	cmp	r3, #48	; 0x30
 8007494:	d10a      	bne.n	80074ac <__cvt+0x88>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	4620      	mov	r0, r4
 800749c:	4629      	mov	r1, r5
 800749e:	f7f9 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 80074a2:	b918      	cbnz	r0, 80074ac <__cvt+0x88>
 80074a4:	f1c6 0601 	rsb	r6, r6, #1
 80074a8:	f8ca 6000 	str.w	r6, [sl]
 80074ac:	f8da 3000 	ldr.w	r3, [sl]
 80074b0:	4499      	add	r9, r3
 80074b2:	2200      	movs	r2, #0
 80074b4:	2300      	movs	r3, #0
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 fb15 	bl	8000ae8 <__aeabi_dcmpeq>
 80074be:	b938      	cbnz	r0, 80074d0 <__cvt+0xac>
 80074c0:	2230      	movs	r2, #48	; 0x30
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	454b      	cmp	r3, r9
 80074c6:	d205      	bcs.n	80074d4 <__cvt+0xb0>
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	9103      	str	r1, [sp, #12]
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e7f8      	b.n	80074c2 <__cvt+0x9e>
 80074d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074d8:	eba3 0308 	sub.w	r3, r3, r8
 80074dc:	4640      	mov	r0, r8
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	b004      	add	sp, #16
 80074e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080074e6 <__exponent>:
 80074e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074e8:	2900      	cmp	r1, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	bfba      	itte	lt
 80074ee:	4249      	neglt	r1, r1
 80074f0:	232d      	movlt	r3, #45	; 0x2d
 80074f2:	232b      	movge	r3, #43	; 0x2b
 80074f4:	2909      	cmp	r1, #9
 80074f6:	f804 2b02 	strb.w	r2, [r4], #2
 80074fa:	7043      	strb	r3, [r0, #1]
 80074fc:	dd20      	ble.n	8007540 <__exponent+0x5a>
 80074fe:	f10d 0307 	add.w	r3, sp, #7
 8007502:	461f      	mov	r7, r3
 8007504:	260a      	movs	r6, #10
 8007506:	fb91 f5f6 	sdiv	r5, r1, r6
 800750a:	fb06 1115 	mls	r1, r6, r5, r1
 800750e:	3130      	adds	r1, #48	; 0x30
 8007510:	2d09      	cmp	r5, #9
 8007512:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007516:	f103 32ff 	add.w	r2, r3, #4294967295
 800751a:	4629      	mov	r1, r5
 800751c:	dc09      	bgt.n	8007532 <__exponent+0x4c>
 800751e:	3130      	adds	r1, #48	; 0x30
 8007520:	3b02      	subs	r3, #2
 8007522:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007526:	42bb      	cmp	r3, r7
 8007528:	4622      	mov	r2, r4
 800752a:	d304      	bcc.n	8007536 <__exponent+0x50>
 800752c:	1a10      	subs	r0, r2, r0
 800752e:	b003      	add	sp, #12
 8007530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007532:	4613      	mov	r3, r2
 8007534:	e7e7      	b.n	8007506 <__exponent+0x20>
 8007536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753a:	f804 2b01 	strb.w	r2, [r4], #1
 800753e:	e7f2      	b.n	8007526 <__exponent+0x40>
 8007540:	2330      	movs	r3, #48	; 0x30
 8007542:	4419      	add	r1, r3
 8007544:	7083      	strb	r3, [r0, #2]
 8007546:	1d02      	adds	r2, r0, #4
 8007548:	70c1      	strb	r1, [r0, #3]
 800754a:	e7ef      	b.n	800752c <__exponent+0x46>

0800754c <_printf_float>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	b08d      	sub	sp, #52	; 0x34
 8007552:	460c      	mov	r4, r1
 8007554:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007558:	4616      	mov	r6, r2
 800755a:	461f      	mov	r7, r3
 800755c:	4605      	mov	r5, r0
 800755e:	f001 fccd 	bl	8008efc <_localeconv_r>
 8007562:	6803      	ldr	r3, [r0, #0]
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	4618      	mov	r0, r3
 8007568:	f7f8 fe42 	bl	80001f0 <strlen>
 800756c:	2300      	movs	r3, #0
 800756e:	930a      	str	r3, [sp, #40]	; 0x28
 8007570:	f8d8 3000 	ldr.w	r3, [r8]
 8007574:	9005      	str	r0, [sp, #20]
 8007576:	3307      	adds	r3, #7
 8007578:	f023 0307 	bic.w	r3, r3, #7
 800757c:	f103 0208 	add.w	r2, r3, #8
 8007580:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007584:	f8d4 b000 	ldr.w	fp, [r4]
 8007588:	f8c8 2000 	str.w	r2, [r8]
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007594:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007598:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800759c:	9307      	str	r3, [sp, #28]
 800759e:	f8cd 8018 	str.w	r8, [sp, #24]
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295
 80075a6:	4ba7      	ldr	r3, [pc, #668]	; (8007844 <_printf_float+0x2f8>)
 80075a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ac:	f7f9 face 	bl	8000b4c <__aeabi_dcmpun>
 80075b0:	bb70      	cbnz	r0, 8007610 <_printf_float+0xc4>
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	4ba3      	ldr	r3, [pc, #652]	; (8007844 <_printf_float+0x2f8>)
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	f7f9 faa8 	bl	8000b10 <__aeabi_dcmple>
 80075c0:	bb30      	cbnz	r0, 8007610 <_printf_float+0xc4>
 80075c2:	2200      	movs	r2, #0
 80075c4:	2300      	movs	r3, #0
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7f9 fa97 	bl	8000afc <__aeabi_dcmplt>
 80075ce:	b110      	cbz	r0, 80075d6 <_printf_float+0x8a>
 80075d0:	232d      	movs	r3, #45	; 0x2d
 80075d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d6:	4a9c      	ldr	r2, [pc, #624]	; (8007848 <_printf_float+0x2fc>)
 80075d8:	4b9c      	ldr	r3, [pc, #624]	; (800784c <_printf_float+0x300>)
 80075da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075de:	bf8c      	ite	hi
 80075e0:	4690      	movhi	r8, r2
 80075e2:	4698      	movls	r8, r3
 80075e4:	2303      	movs	r3, #3
 80075e6:	f02b 0204 	bic.w	r2, fp, #4
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	f04f 0900 	mov.w	r9, #0
 80075f2:	9700      	str	r7, [sp, #0]
 80075f4:	4633      	mov	r3, r6
 80075f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80075f8:	4621      	mov	r1, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f9e6 	bl	80079cc <_printf_common>
 8007600:	3001      	adds	r0, #1
 8007602:	f040 808d 	bne.w	8007720 <_printf_float+0x1d4>
 8007606:	f04f 30ff 	mov.w	r0, #4294967295
 800760a:	b00d      	add	sp, #52	; 0x34
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 fa98 	bl	8000b4c <__aeabi_dcmpun>
 800761c:	b110      	cbz	r0, 8007624 <_printf_float+0xd8>
 800761e:	4a8c      	ldr	r2, [pc, #560]	; (8007850 <_printf_float+0x304>)
 8007620:	4b8c      	ldr	r3, [pc, #560]	; (8007854 <_printf_float+0x308>)
 8007622:	e7da      	b.n	80075da <_printf_float+0x8e>
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	1c4b      	adds	r3, r1, #1
 8007628:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800762c:	a80a      	add	r0, sp, #40	; 0x28
 800762e:	d13e      	bne.n	80076ae <_printf_float+0x162>
 8007630:	2306      	movs	r3, #6
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	2300      	movs	r3, #0
 8007636:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800763a:	ab09      	add	r3, sp, #36	; 0x24
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	ec49 8b10 	vmov	d0, r8, r9
 8007642:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007646:	6022      	str	r2, [r4, #0]
 8007648:	f8cd a004 	str.w	sl, [sp, #4]
 800764c:	6861      	ldr	r1, [r4, #4]
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff fee8 	bl	8007424 <__cvt>
 8007654:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007658:	2b47      	cmp	r3, #71	; 0x47
 800765a:	4680      	mov	r8, r0
 800765c:	d109      	bne.n	8007672 <_printf_float+0x126>
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	1cd8      	adds	r0, r3, #3
 8007662:	db02      	blt.n	800766a <_printf_float+0x11e>
 8007664:	6862      	ldr	r2, [r4, #4]
 8007666:	4293      	cmp	r3, r2
 8007668:	dd47      	ble.n	80076fa <_printf_float+0x1ae>
 800766a:	f1aa 0a02 	sub.w	sl, sl, #2
 800766e:	fa5f fa8a 	uxtb.w	sl, sl
 8007672:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007678:	d824      	bhi.n	80076c4 <_printf_float+0x178>
 800767a:	3901      	subs	r1, #1
 800767c:	4652      	mov	r2, sl
 800767e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007682:	9109      	str	r1, [sp, #36]	; 0x24
 8007684:	f7ff ff2f 	bl	80074e6 <__exponent>
 8007688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768a:	1813      	adds	r3, r2, r0
 800768c:	2a01      	cmp	r2, #1
 800768e:	4681      	mov	r9, r0
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	dc02      	bgt.n	800769a <_printf_float+0x14e>
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	07d1      	lsls	r1, r2, #31
 8007698:	d501      	bpl.n	800769e <_printf_float+0x152>
 800769a:	3301      	adds	r3, #1
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0a5      	beq.n	80075f2 <_printf_float+0xa6>
 80076a6:	232d      	movs	r3, #45	; 0x2d
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ac:	e7a1      	b.n	80075f2 <_printf_float+0xa6>
 80076ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80076b2:	f000 8177 	beq.w	80079a4 <_printf_float+0x458>
 80076b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80076ba:	d1bb      	bne.n	8007634 <_printf_float+0xe8>
 80076bc:	2900      	cmp	r1, #0
 80076be:	d1b9      	bne.n	8007634 <_printf_float+0xe8>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7b6      	b.n	8007632 <_printf_float+0xe6>
 80076c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80076c8:	d119      	bne.n	80076fe <_printf_float+0x1b2>
 80076ca:	2900      	cmp	r1, #0
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	dd0c      	ble.n	80076ea <_printf_float+0x19e>
 80076d0:	6121      	str	r1, [r4, #16]
 80076d2:	b913      	cbnz	r3, 80076da <_printf_float+0x18e>
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	07d2      	lsls	r2, r2, #31
 80076d8:	d502      	bpl.n	80076e0 <_printf_float+0x194>
 80076da:	3301      	adds	r3, #1
 80076dc:	440b      	add	r3, r1
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80076e4:	f04f 0900 	mov.w	r9, #0
 80076e8:	e7d9      	b.n	800769e <_printf_float+0x152>
 80076ea:	b913      	cbnz	r3, 80076f2 <_printf_float+0x1a6>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	07d0      	lsls	r0, r2, #31
 80076f0:	d501      	bpl.n	80076f6 <_printf_float+0x1aa>
 80076f2:	3302      	adds	r3, #2
 80076f4:	e7f3      	b.n	80076de <_printf_float+0x192>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e7f1      	b.n	80076de <_printf_float+0x192>
 80076fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80076fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007702:	4293      	cmp	r3, r2
 8007704:	db05      	blt.n	8007712 <_printf_float+0x1c6>
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	07d1      	lsls	r1, r2, #31
 800770c:	d5e8      	bpl.n	80076e0 <_printf_float+0x194>
 800770e:	3301      	adds	r3, #1
 8007710:	e7e5      	b.n	80076de <_printf_float+0x192>
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfd4      	ite	le
 8007716:	f1c3 0302 	rsble	r3, r3, #2
 800771a:	2301      	movgt	r3, #1
 800771c:	4413      	add	r3, r2
 800771e:	e7de      	b.n	80076de <_printf_float+0x192>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	055a      	lsls	r2, r3, #21
 8007724:	d407      	bmi.n	8007736 <_printf_float+0x1ea>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	4642      	mov	r2, r8
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	d12b      	bne.n	800778c <_printf_float+0x240>
 8007734:	e767      	b.n	8007606 <_printf_float+0xba>
 8007736:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800773a:	f240 80dc 	bls.w	80078f6 <_printf_float+0x3aa>
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007746:	f7f9 f9cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800774a:	2800      	cmp	r0, #0
 800774c:	d033      	beq.n	80077b6 <_printf_float+0x26a>
 800774e:	2301      	movs	r3, #1
 8007750:	4a41      	ldr	r2, [pc, #260]	; (8007858 <_printf_float+0x30c>)
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f af54 	beq.w	8007606 <_printf_float+0xba>
 800775e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007762:	429a      	cmp	r2, r3
 8007764:	db02      	blt.n	800776c <_printf_float+0x220>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	07d8      	lsls	r0, r3, #31
 800776a:	d50f      	bpl.n	800778c <_printf_float+0x240>
 800776c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f af45 	beq.w	8007606 <_printf_float+0xba>
 800777c:	f04f 0800 	mov.w	r8, #0
 8007780:	f104 091a 	add.w	r9, r4, #26
 8007784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007786:	3b01      	subs	r3, #1
 8007788:	4543      	cmp	r3, r8
 800778a:	dc09      	bgt.n	80077a0 <_printf_float+0x254>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	079b      	lsls	r3, r3, #30
 8007790:	f100 8103 	bmi.w	800799a <_printf_float+0x44e>
 8007794:	68e0      	ldr	r0, [r4, #12]
 8007796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007798:	4298      	cmp	r0, r3
 800779a:	bfb8      	it	lt
 800779c:	4618      	movlt	r0, r3
 800779e:	e734      	b.n	800760a <_printf_float+0xbe>
 80077a0:	2301      	movs	r3, #1
 80077a2:	464a      	mov	r2, r9
 80077a4:	4631      	mov	r1, r6
 80077a6:	4628      	mov	r0, r5
 80077a8:	47b8      	blx	r7
 80077aa:	3001      	adds	r0, #1
 80077ac:	f43f af2b 	beq.w	8007606 <_printf_float+0xba>
 80077b0:	f108 0801 	add.w	r8, r8, #1
 80077b4:	e7e6      	b.n	8007784 <_printf_float+0x238>
 80077b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc2b      	bgt.n	8007814 <_printf_float+0x2c8>
 80077bc:	2301      	movs	r3, #1
 80077be:	4a26      	ldr	r2, [pc, #152]	; (8007858 <_printf_float+0x30c>)
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f af1d 	beq.w	8007606 <_printf_float+0xba>
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	b923      	cbnz	r3, 80077da <_printf_float+0x28e>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	b913      	cbnz	r3, 80077da <_printf_float+0x28e>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	07d9      	lsls	r1, r3, #31
 80077d8:	d5d8      	bpl.n	800778c <_printf_float+0x240>
 80077da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f af0e 	beq.w	8007606 <_printf_float+0xba>
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	f104 0a1a 	add.w	sl, r4, #26
 80077f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f4:	425b      	negs	r3, r3
 80077f6:	454b      	cmp	r3, r9
 80077f8:	dc01      	bgt.n	80077fe <_printf_float+0x2b2>
 80077fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fc:	e794      	b.n	8007728 <_printf_float+0x1dc>
 80077fe:	2301      	movs	r3, #1
 8007800:	4652      	mov	r2, sl
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f aefc 	beq.w	8007606 <_printf_float+0xba>
 800780e:	f109 0901 	add.w	r9, r9, #1
 8007812:	e7ee      	b.n	80077f2 <_printf_float+0x2a6>
 8007814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007818:	429a      	cmp	r2, r3
 800781a:	bfa8      	it	ge
 800781c:	461a      	movge	r2, r3
 800781e:	2a00      	cmp	r2, #0
 8007820:	4691      	mov	r9, r2
 8007822:	dd07      	ble.n	8007834 <_printf_float+0x2e8>
 8007824:	4613      	mov	r3, r2
 8007826:	4631      	mov	r1, r6
 8007828:	4642      	mov	r2, r8
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f aee9 	beq.w	8007606 <_printf_float+0xba>
 8007834:	f104 031a 	add.w	r3, r4, #26
 8007838:	f04f 0b00 	mov.w	fp, #0
 800783c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007840:	9306      	str	r3, [sp, #24]
 8007842:	e015      	b.n	8007870 <_printf_float+0x324>
 8007844:	7fefffff 	.word	0x7fefffff
 8007848:	08009fe4 	.word	0x08009fe4
 800784c:	08009fe0 	.word	0x08009fe0
 8007850:	08009fec 	.word	0x08009fec
 8007854:	08009fe8 	.word	0x08009fe8
 8007858:	08009ff0 	.word	0x08009ff0
 800785c:	2301      	movs	r3, #1
 800785e:	9a06      	ldr	r2, [sp, #24]
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f aecd 	beq.w	8007606 <_printf_float+0xba>
 800786c:	f10b 0b01 	add.w	fp, fp, #1
 8007870:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007874:	ebaa 0309 	sub.w	r3, sl, r9
 8007878:	455b      	cmp	r3, fp
 800787a:	dcef      	bgt.n	800785c <_printf_float+0x310>
 800787c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007880:	429a      	cmp	r2, r3
 8007882:	44d0      	add	r8, sl
 8007884:	db15      	blt.n	80078b2 <_printf_float+0x366>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	07da      	lsls	r2, r3, #31
 800788a:	d412      	bmi.n	80078b2 <_printf_float+0x366>
 800788c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007890:	eba3 020a 	sub.w	r2, r3, sl
 8007894:	eba3 0a01 	sub.w	sl, r3, r1
 8007898:	4592      	cmp	sl, r2
 800789a:	bfa8      	it	ge
 800789c:	4692      	movge	sl, r2
 800789e:	f1ba 0f00 	cmp.w	sl, #0
 80078a2:	dc0e      	bgt.n	80078c2 <_printf_float+0x376>
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078ac:	f104 091a 	add.w	r9, r4, #26
 80078b0:	e019      	b.n	80078e6 <_printf_float+0x39a>
 80078b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	d1e5      	bne.n	800788c <_printf_float+0x340>
 80078c0:	e6a1      	b.n	8007606 <_printf_float+0xba>
 80078c2:	4653      	mov	r3, sl
 80078c4:	4642      	mov	r2, r8
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1e9      	bne.n	80078a4 <_printf_float+0x358>
 80078d0:	e699      	b.n	8007606 <_printf_float+0xba>
 80078d2:	2301      	movs	r3, #1
 80078d4:	464a      	mov	r2, r9
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae92 	beq.w	8007606 <_printf_float+0xba>
 80078e2:	f108 0801 	add.w	r8, r8, #1
 80078e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	eba3 030a 	sub.w	r3, r3, sl
 80078f0:	4543      	cmp	r3, r8
 80078f2:	dcee      	bgt.n	80078d2 <_printf_float+0x386>
 80078f4:	e74a      	b.n	800778c <_printf_float+0x240>
 80078f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f8:	2a01      	cmp	r2, #1
 80078fa:	dc01      	bgt.n	8007900 <_printf_float+0x3b4>
 80078fc:	07db      	lsls	r3, r3, #31
 80078fe:	d53a      	bpl.n	8007976 <_printf_float+0x42a>
 8007900:	2301      	movs	r3, #1
 8007902:	4642      	mov	r2, r8
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f ae7b 	beq.w	8007606 <_printf_float+0xba>
 8007910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f108 0801 	add.w	r8, r8, #1
 8007920:	f43f ae71 	beq.w	8007606 <_printf_float+0xba>
 8007924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007926:	2200      	movs	r2, #0
 8007928:	f103 3aff 	add.w	sl, r3, #4294967295
 800792c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007930:	2300      	movs	r3, #0
 8007932:	f7f9 f8d9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007936:	b9c8      	cbnz	r0, 800796c <_printf_float+0x420>
 8007938:	4653      	mov	r3, sl
 800793a:	4642      	mov	r2, r8
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	d10e      	bne.n	8007964 <_printf_float+0x418>
 8007946:	e65e      	b.n	8007606 <_printf_float+0xba>
 8007948:	2301      	movs	r3, #1
 800794a:	4652      	mov	r2, sl
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f ae57 	beq.w	8007606 <_printf_float+0xba>
 8007958:	f108 0801 	add.w	r8, r8, #1
 800795c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795e:	3b01      	subs	r3, #1
 8007960:	4543      	cmp	r3, r8
 8007962:	dcf1      	bgt.n	8007948 <_printf_float+0x3fc>
 8007964:	464b      	mov	r3, r9
 8007966:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800796a:	e6de      	b.n	800772a <_printf_float+0x1de>
 800796c:	f04f 0800 	mov.w	r8, #0
 8007970:	f104 0a1a 	add.w	sl, r4, #26
 8007974:	e7f2      	b.n	800795c <_printf_float+0x410>
 8007976:	2301      	movs	r3, #1
 8007978:	e7df      	b.n	800793a <_printf_float+0x3ee>
 800797a:	2301      	movs	r3, #1
 800797c:	464a      	mov	r2, r9
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	f43f ae3e 	beq.w	8007606 <_printf_float+0xba>
 800798a:	f108 0801 	add.w	r8, r8, #1
 800798e:	68e3      	ldr	r3, [r4, #12]
 8007990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	4543      	cmp	r3, r8
 8007996:	dcf0      	bgt.n	800797a <_printf_float+0x42e>
 8007998:	e6fc      	b.n	8007794 <_printf_float+0x248>
 800799a:	f04f 0800 	mov.w	r8, #0
 800799e:	f104 0919 	add.w	r9, r4, #25
 80079a2:	e7f4      	b.n	800798e <_printf_float+0x442>
 80079a4:	2900      	cmp	r1, #0
 80079a6:	f43f ae8b 	beq.w	80076c0 <_printf_float+0x174>
 80079aa:	2300      	movs	r3, #0
 80079ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80079b0:	ab09      	add	r3, sp, #36	; 0x24
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	ec49 8b10 	vmov	d0, r8, r9
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	f8cd a004 	str.w	sl, [sp, #4]
 80079be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079c2:	4628      	mov	r0, r5
 80079c4:	f7ff fd2e 	bl	8007424 <__cvt>
 80079c8:	4680      	mov	r8, r0
 80079ca:	e648      	b.n	800765e <_printf_float+0x112>

080079cc <_printf_common>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	4691      	mov	r9, r2
 80079d2:	461f      	mov	r7, r3
 80079d4:	688a      	ldr	r2, [r1, #8]
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfb8      	it	lt
 80079e0:	4613      	movlt	r3, r2
 80079e2:	f8c9 3000 	str.w	r3, [r9]
 80079e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	b112      	cbz	r2, 80079f6 <_printf_common+0x2a>
 80079f0:	3301      	adds	r3, #1
 80079f2:	f8c9 3000 	str.w	r3, [r9]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	0699      	lsls	r1, r3, #26
 80079fa:	bf42      	ittt	mi
 80079fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a00:	3302      	addmi	r3, #2
 8007a02:	f8c9 3000 	strmi.w	r3, [r9]
 8007a06:	6825      	ldr	r5, [r4, #0]
 8007a08:	f015 0506 	ands.w	r5, r5, #6
 8007a0c:	d107      	bne.n	8007a1e <_printf_common+0x52>
 8007a0e:	f104 0a19 	add.w	sl, r4, #25
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	f8d9 2000 	ldr.w	r2, [r9]
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	42ab      	cmp	r3, r5
 8007a1c:	dc28      	bgt.n	8007a70 <_printf_common+0xa4>
 8007a1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	3300      	adds	r3, #0
 8007a26:	bf18      	it	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	0692      	lsls	r2, r2, #26
 8007a2c:	d42d      	bmi.n	8007a8a <_printf_common+0xbe>
 8007a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a32:	4639      	mov	r1, r7
 8007a34:	4630      	mov	r0, r6
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d020      	beq.n	8007a7e <_printf_common+0xb2>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	68e5      	ldr	r5, [r4, #12]
 8007a40:	f8d9 2000 	ldr.w	r2, [r9]
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	bf08      	it	eq
 8007a4c:	1aad      	subeq	r5, r5, r2
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	bf0c      	ite	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	2500      	movne	r5, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	bfc4      	itt	gt
 8007a5e:	1a9b      	subgt	r3, r3, r2
 8007a60:	18ed      	addgt	r5, r5, r3
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	341a      	adds	r4, #26
 8007a68:	454d      	cmp	r5, r9
 8007a6a:	d11a      	bne.n	8007aa2 <_printf_common+0xd6>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	e008      	b.n	8007a82 <_printf_common+0xb6>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4652      	mov	r2, sl
 8007a74:	4639      	mov	r1, r7
 8007a76:	4630      	mov	r0, r6
 8007a78:	47c0      	blx	r8
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d103      	bne.n	8007a86 <_printf_common+0xba>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	3501      	adds	r5, #1
 8007a88:	e7c3      	b.n	8007a12 <_printf_common+0x46>
 8007a8a:	18e1      	adds	r1, r4, r3
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	2030      	movs	r0, #48	; 0x30
 8007a90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a94:	4422      	add	r2, r4
 8007a96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	e7c5      	b.n	8007a2e <_printf_common+0x62>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	47c0      	blx	r8
 8007aac:	3001      	adds	r0, #1
 8007aae:	d0e6      	beq.n	8007a7e <_printf_common+0xb2>
 8007ab0:	f109 0901 	add.w	r9, r9, #1
 8007ab4:	e7d8      	b.n	8007a68 <_printf_common+0x9c>
	...

08007ab8 <_printf_i>:
 8007ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007abc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	7e09      	ldrb	r1, [r1, #24]
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	296e      	cmp	r1, #110	; 0x6e
 8007ac8:	4617      	mov	r7, r2
 8007aca:	4606      	mov	r6, r0
 8007acc:	4698      	mov	r8, r3
 8007ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad0:	f000 80b3 	beq.w	8007c3a <_printf_i+0x182>
 8007ad4:	d822      	bhi.n	8007b1c <_printf_i+0x64>
 8007ad6:	2963      	cmp	r1, #99	; 0x63
 8007ad8:	d036      	beq.n	8007b48 <_printf_i+0x90>
 8007ada:	d80a      	bhi.n	8007af2 <_printf_i+0x3a>
 8007adc:	2900      	cmp	r1, #0
 8007ade:	f000 80b9 	beq.w	8007c54 <_printf_i+0x19c>
 8007ae2:	2958      	cmp	r1, #88	; 0x58
 8007ae4:	f000 8083 	beq.w	8007bee <_printf_i+0x136>
 8007ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007af0:	e032      	b.n	8007b58 <_printf_i+0xa0>
 8007af2:	2964      	cmp	r1, #100	; 0x64
 8007af4:	d001      	beq.n	8007afa <_printf_i+0x42>
 8007af6:	2969      	cmp	r1, #105	; 0x69
 8007af8:	d1f6      	bne.n	8007ae8 <_printf_i+0x30>
 8007afa:	6820      	ldr	r0, [r4, #0]
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	0605      	lsls	r5, r0, #24
 8007b00:	f103 0104 	add.w	r1, r3, #4
 8007b04:	d52a      	bpl.n	8007b5c <_printf_i+0xa4>
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da03      	bge.n	8007b16 <_printf_i+0x5e>
 8007b0e:	222d      	movs	r2, #45	; 0x2d
 8007b10:	425b      	negs	r3, r3
 8007b12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b16:	486f      	ldr	r0, [pc, #444]	; (8007cd4 <_printf_i+0x21c>)
 8007b18:	220a      	movs	r2, #10
 8007b1a:	e039      	b.n	8007b90 <_printf_i+0xd8>
 8007b1c:	2973      	cmp	r1, #115	; 0x73
 8007b1e:	f000 809d 	beq.w	8007c5c <_printf_i+0x1a4>
 8007b22:	d808      	bhi.n	8007b36 <_printf_i+0x7e>
 8007b24:	296f      	cmp	r1, #111	; 0x6f
 8007b26:	d020      	beq.n	8007b6a <_printf_i+0xb2>
 8007b28:	2970      	cmp	r1, #112	; 0x70
 8007b2a:	d1dd      	bne.n	8007ae8 <_printf_i+0x30>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f043 0320 	orr.w	r3, r3, #32
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	e003      	b.n	8007b3e <_printf_i+0x86>
 8007b36:	2975      	cmp	r1, #117	; 0x75
 8007b38:	d017      	beq.n	8007b6a <_printf_i+0xb2>
 8007b3a:	2978      	cmp	r1, #120	; 0x78
 8007b3c:	d1d4      	bne.n	8007ae8 <_printf_i+0x30>
 8007b3e:	2378      	movs	r3, #120	; 0x78
 8007b40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b44:	4864      	ldr	r0, [pc, #400]	; (8007cd8 <_printf_i+0x220>)
 8007b46:	e055      	b.n	8007bf4 <_printf_i+0x13c>
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6011      	str	r1, [r2, #0]
 8007b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e08c      	b.n	8007c76 <_printf_i+0x1be>
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b64:	bf18      	it	ne
 8007b66:	b21b      	sxthne	r3, r3
 8007b68:	e7cf      	b.n	8007b0a <_printf_i+0x52>
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	6825      	ldr	r5, [r4, #0]
 8007b6e:	1d18      	adds	r0, r3, #4
 8007b70:	6010      	str	r0, [r2, #0]
 8007b72:	0628      	lsls	r0, r5, #24
 8007b74:	d501      	bpl.n	8007b7a <_printf_i+0xc2>
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	e002      	b.n	8007b80 <_printf_i+0xc8>
 8007b7a:	0668      	lsls	r0, r5, #25
 8007b7c:	d5fb      	bpl.n	8007b76 <_printf_i+0xbe>
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	4854      	ldr	r0, [pc, #336]	; (8007cd4 <_printf_i+0x21c>)
 8007b82:	296f      	cmp	r1, #111	; 0x6f
 8007b84:	bf14      	ite	ne
 8007b86:	220a      	movne	r2, #10
 8007b88:	2208      	moveq	r2, #8
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b90:	6865      	ldr	r5, [r4, #4]
 8007b92:	60a5      	str	r5, [r4, #8]
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	f2c0 8095 	blt.w	8007cc4 <_printf_i+0x20c>
 8007b9a:	6821      	ldr	r1, [r4, #0]
 8007b9c:	f021 0104 	bic.w	r1, r1, #4
 8007ba0:	6021      	str	r1, [r4, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13d      	bne.n	8007c22 <_printf_i+0x16a>
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	f040 808e 	bne.w	8007cc8 <_printf_i+0x210>
 8007bac:	4665      	mov	r5, ip
 8007bae:	2a08      	cmp	r2, #8
 8007bb0:	d10b      	bne.n	8007bca <_printf_i+0x112>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	07db      	lsls	r3, r3, #31
 8007bb6:	d508      	bpl.n	8007bca <_printf_i+0x112>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	bfde      	ittt	le
 8007bc0:	2330      	movle	r3, #48	; 0x30
 8007bc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bca:	ebac 0305 	sub.w	r3, ip, r5
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	f8cd 8000 	str.w	r8, [sp]
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	aa03      	add	r2, sp, #12
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff fef6 	bl	80079cc <_printf_common>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d14d      	bne.n	8007c80 <_printf_i+0x1c8>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	b005      	add	sp, #20
 8007bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bee:	4839      	ldr	r0, [pc, #228]	; (8007cd4 <_printf_i+0x21c>)
 8007bf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bf4:	6813      	ldr	r3, [r2, #0]
 8007bf6:	6821      	ldr	r1, [r4, #0]
 8007bf8:	1d1d      	adds	r5, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6015      	str	r5, [r2, #0]
 8007bfe:	060a      	lsls	r2, r1, #24
 8007c00:	d50b      	bpl.n	8007c1a <_printf_i+0x162>
 8007c02:	07ca      	lsls	r2, r1, #31
 8007c04:	bf44      	itt	mi
 8007c06:	f041 0120 	orrmi.w	r1, r1, #32
 8007c0a:	6021      	strmi	r1, [r4, #0]
 8007c0c:	b91b      	cbnz	r3, 8007c16 <_printf_i+0x15e>
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	f022 0220 	bic.w	r2, r2, #32
 8007c14:	6022      	str	r2, [r4, #0]
 8007c16:	2210      	movs	r2, #16
 8007c18:	e7b7      	b.n	8007b8a <_printf_i+0xd2>
 8007c1a:	064d      	lsls	r5, r1, #25
 8007c1c:	bf48      	it	mi
 8007c1e:	b29b      	uxthmi	r3, r3
 8007c20:	e7ef      	b.n	8007c02 <_printf_i+0x14a>
 8007c22:	4665      	mov	r5, ip
 8007c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c28:	fb02 3311 	mls	r3, r2, r1, r3
 8007c2c:	5cc3      	ldrb	r3, [r0, r3]
 8007c2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c32:	460b      	mov	r3, r1
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d1f5      	bne.n	8007c24 <_printf_i+0x16c>
 8007c38:	e7b9      	b.n	8007bae <_printf_i+0xf6>
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	6961      	ldr	r1, [r4, #20]
 8007c40:	1d18      	adds	r0, r3, #4
 8007c42:	6010      	str	r0, [r2, #0]
 8007c44:	0628      	lsls	r0, r5, #24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	d501      	bpl.n	8007c4e <_printf_i+0x196>
 8007c4a:	6019      	str	r1, [r3, #0]
 8007c4c:	e002      	b.n	8007c54 <_printf_i+0x19c>
 8007c4e:	066a      	lsls	r2, r5, #25
 8007c50:	d5fb      	bpl.n	8007c4a <_printf_i+0x192>
 8007c52:	8019      	strh	r1, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	4665      	mov	r5, ip
 8007c5a:	e7b9      	b.n	8007bd0 <_printf_i+0x118>
 8007c5c:	6813      	ldr	r3, [r2, #0]
 8007c5e:	1d19      	adds	r1, r3, #4
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	681d      	ldr	r5, [r3, #0]
 8007c64:	6862      	ldr	r2, [r4, #4]
 8007c66:	2100      	movs	r1, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7f8 fac9 	bl	8000200 <memchr>
 8007c6e:	b108      	cbz	r0, 8007c74 <_printf_i+0x1bc>
 8007c70:	1b40      	subs	r0, r0, r5
 8007c72:	6060      	str	r0, [r4, #4]
 8007c74:	6863      	ldr	r3, [r4, #4]
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7e:	e7a7      	b.n	8007bd0 <_printf_i+0x118>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4639      	mov	r1, r7
 8007c86:	4630      	mov	r0, r6
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0aa      	beq.n	8007be4 <_printf_i+0x12c>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	079b      	lsls	r3, r3, #30
 8007c92:	d413      	bmi.n	8007cbc <_printf_i+0x204>
 8007c94:	68e0      	ldr	r0, [r4, #12]
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	bfb8      	it	lt
 8007c9c:	4618      	movlt	r0, r3
 8007c9e:	e7a3      	b.n	8007be8 <_printf_i+0x130>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	464a      	mov	r2, r9
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d09a      	beq.n	8007be4 <_printf_i+0x12c>
 8007cae:	3501      	adds	r5, #1
 8007cb0:	68e3      	ldr	r3, [r4, #12]
 8007cb2:	9a03      	ldr	r2, [sp, #12]
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	42ab      	cmp	r3, r5
 8007cb8:	dcf2      	bgt.n	8007ca0 <_printf_i+0x1e8>
 8007cba:	e7eb      	b.n	8007c94 <_printf_i+0x1dc>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	f104 0919 	add.w	r9, r4, #25
 8007cc2:	e7f5      	b.n	8007cb0 <_printf_i+0x1f8>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ac      	bne.n	8007c22 <_printf_i+0x16a>
 8007cc8:	7803      	ldrb	r3, [r0, #0]
 8007cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd2:	e76c      	b.n	8007bae <_printf_i+0xf6>
 8007cd4:	08009ff2 	.word	0x08009ff2
 8007cd8:	0800a003 	.word	0x0800a003

08007cdc <iprintf>:
 8007cdc:	b40f      	push	{r0, r1, r2, r3}
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <iprintf+0x2c>)
 8007ce0:	b513      	push	{r0, r1, r4, lr}
 8007ce2:	681c      	ldr	r4, [r3, #0]
 8007ce4:	b124      	cbz	r4, 8007cf0 <iprintf+0x14>
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	b913      	cbnz	r3, 8007cf0 <iprintf+0x14>
 8007cea:	4620      	mov	r0, r4
 8007cec:	f001 f87c 	bl	8008de8 <__sinit>
 8007cf0:	ab05      	add	r3, sp, #20
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	68a1      	ldr	r1, [r4, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f001 fd3f 	bl	800977c <_vfiprintf_r>
 8007cfe:	b002      	add	sp, #8
 8007d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d04:	b004      	add	sp, #16
 8007d06:	4770      	bx	lr
 8007d08:	2000000c 	.word	0x2000000c

08007d0c <putchar>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <putchar+0x24>)
 8007d10:	681c      	ldr	r4, [r3, #0]
 8007d12:	4605      	mov	r5, r0
 8007d14:	b124      	cbz	r4, 8007d20 <putchar+0x14>
 8007d16:	69a3      	ldr	r3, [r4, #24]
 8007d18:	b913      	cbnz	r3, 8007d20 <putchar+0x14>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 f864 	bl	8008de8 <__sinit>
 8007d20:	68a2      	ldr	r2, [r4, #8]
 8007d22:	4629      	mov	r1, r5
 8007d24:	4620      	mov	r0, r4
 8007d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2a:	f001 be3d 	b.w	80099a8 <_putc_r>
 8007d2e:	bf00      	nop
 8007d30:	2000000c 	.word	0x2000000c

08007d34 <_puts_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b118      	cbz	r0, 8007d44 <_puts_r+0x10>
 8007d3c:	6983      	ldr	r3, [r0, #24]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <_puts_r+0x10>
 8007d40:	f001 f852 	bl	8008de8 <__sinit>
 8007d44:	69ab      	ldr	r3, [r5, #24]
 8007d46:	68ac      	ldr	r4, [r5, #8]
 8007d48:	b913      	cbnz	r3, 8007d50 <_puts_r+0x1c>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f001 f84c 	bl	8008de8 <__sinit>
 8007d50:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <_puts_r+0xac>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d117      	bne.n	8007d86 <_puts_r+0x52>
 8007d56:	686c      	ldr	r4, [r5, #4]
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	071b      	lsls	r3, r3, #28
 8007d5c:	d51d      	bpl.n	8007d9a <_puts_r+0x66>
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	b1db      	cbz	r3, 8007d9a <_puts_r+0x66>
 8007d62:	3e01      	subs	r6, #1
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	b9e9      	cbnz	r1, 8007dac <_puts_r+0x78>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	da2e      	bge.n	8007dd2 <_puts_r+0x9e>
 8007d74:	4622      	mov	r2, r4
 8007d76:	210a      	movs	r1, #10
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f83f 	bl	8007dfc <__swbuf_r>
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d011      	beq.n	8007da6 <_puts_r+0x72>
 8007d82:	200a      	movs	r0, #10
 8007d84:	e011      	b.n	8007daa <_puts_r+0x76>
 8007d86:	4b17      	ldr	r3, [pc, #92]	; (8007de4 <_puts_r+0xb0>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d101      	bne.n	8007d90 <_puts_r+0x5c>
 8007d8c:	68ac      	ldr	r4, [r5, #8]
 8007d8e:	e7e3      	b.n	8007d58 <_puts_r+0x24>
 8007d90:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <_puts_r+0xb4>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	bf08      	it	eq
 8007d96:	68ec      	ldreq	r4, [r5, #12]
 8007d98:	e7de      	b.n	8007d58 <_puts_r+0x24>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 f87f 	bl	8007ea0 <__swsetup_r>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0dd      	beq.n	8007d62 <_puts_r+0x2e>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da04      	bge.n	8007dba <_puts_r+0x86>
 8007db0:	69a2      	ldr	r2, [r4, #24]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	dc06      	bgt.n	8007dc4 <_puts_r+0x90>
 8007db6:	290a      	cmp	r1, #10
 8007db8:	d004      	beq.n	8007dc4 <_puts_r+0x90>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	6022      	str	r2, [r4, #0]
 8007dc0:	7019      	strb	r1, [r3, #0]
 8007dc2:	e7cf      	b.n	8007d64 <_puts_r+0x30>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f818 	bl	8007dfc <__swbuf_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d1c9      	bne.n	8007d64 <_puts_r+0x30>
 8007dd0:	e7e9      	b.n	8007da6 <_puts_r+0x72>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	200a      	movs	r0, #10
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	6022      	str	r2, [r4, #0]
 8007dda:	7018      	strb	r0, [r3, #0]
 8007ddc:	e7e5      	b.n	8007daa <_puts_r+0x76>
 8007dde:	bf00      	nop
 8007de0:	0800a044 	.word	0x0800a044
 8007de4:	0800a064 	.word	0x0800a064
 8007de8:	0800a024 	.word	0x0800a024

08007dec <puts>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <puts+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f7ff bf9f 	b.w	8007d34 <_puts_r>
 8007df6:	bf00      	nop
 8007df8:	2000000c 	.word	0x2000000c

08007dfc <__swbuf_r>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	460e      	mov	r6, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	4605      	mov	r5, r0
 8007e04:	b118      	cbz	r0, 8007e0e <__swbuf_r+0x12>
 8007e06:	6983      	ldr	r3, [r0, #24]
 8007e08:	b90b      	cbnz	r3, 8007e0e <__swbuf_r+0x12>
 8007e0a:	f000 ffed 	bl	8008de8 <__sinit>
 8007e0e:	4b21      	ldr	r3, [pc, #132]	; (8007e94 <__swbuf_r+0x98>)
 8007e10:	429c      	cmp	r4, r3
 8007e12:	d12a      	bne.n	8007e6a <__swbuf_r+0x6e>
 8007e14:	686c      	ldr	r4, [r5, #4]
 8007e16:	69a3      	ldr	r3, [r4, #24]
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	071a      	lsls	r2, r3, #28
 8007e1e:	d52e      	bpl.n	8007e7e <__swbuf_r+0x82>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b363      	cbz	r3, 8007e7e <__swbuf_r+0x82>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	6820      	ldr	r0, [r4, #0]
 8007e28:	1ac0      	subs	r0, r0, r3
 8007e2a:	6963      	ldr	r3, [r4, #20]
 8007e2c:	b2f6      	uxtb	r6, r6
 8007e2e:	4283      	cmp	r3, r0
 8007e30:	4637      	mov	r7, r6
 8007e32:	dc04      	bgt.n	8007e3e <__swbuf_r+0x42>
 8007e34:	4621      	mov	r1, r4
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 ff6c 	bl	8008d14 <_fflush_r>
 8007e3c:	bb28      	cbnz	r0, 8007e8a <__swbuf_r+0x8e>
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	6022      	str	r2, [r4, #0]
 8007e4a:	701e      	strb	r6, [r3, #0]
 8007e4c:	6963      	ldr	r3, [r4, #20]
 8007e4e:	3001      	adds	r0, #1
 8007e50:	4283      	cmp	r3, r0
 8007e52:	d004      	beq.n	8007e5e <__swbuf_r+0x62>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	07db      	lsls	r3, r3, #31
 8007e58:	d519      	bpl.n	8007e8e <__swbuf_r+0x92>
 8007e5a:	2e0a      	cmp	r6, #10
 8007e5c:	d117      	bne.n	8007e8e <__swbuf_r+0x92>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 ff57 	bl	8008d14 <_fflush_r>
 8007e66:	b190      	cbz	r0, 8007e8e <__swbuf_r+0x92>
 8007e68:	e00f      	b.n	8007e8a <__swbuf_r+0x8e>
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <__swbuf_r+0x9c>)
 8007e6c:	429c      	cmp	r4, r3
 8007e6e:	d101      	bne.n	8007e74 <__swbuf_r+0x78>
 8007e70:	68ac      	ldr	r4, [r5, #8]
 8007e72:	e7d0      	b.n	8007e16 <__swbuf_r+0x1a>
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <__swbuf_r+0xa0>)
 8007e76:	429c      	cmp	r4, r3
 8007e78:	bf08      	it	eq
 8007e7a:	68ec      	ldreq	r4, [r5, #12]
 8007e7c:	e7cb      	b.n	8007e16 <__swbuf_r+0x1a>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 f80d 	bl	8007ea0 <__swsetup_r>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d0cc      	beq.n	8007e24 <__swbuf_r+0x28>
 8007e8a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e8e:	4638      	mov	r0, r7
 8007e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e92:	bf00      	nop
 8007e94:	0800a044 	.word	0x0800a044
 8007e98:	0800a064 	.word	0x0800a064
 8007e9c:	0800a024 	.word	0x0800a024

08007ea0 <__swsetup_r>:
 8007ea0:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <__swsetup_r+0xcc>)
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	681d      	ldr	r5, [r3, #0]
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	b125      	cbz	r5, 8007eb6 <__swsetup_r+0x16>
 8007eac:	69ab      	ldr	r3, [r5, #24]
 8007eae:	b913      	cbnz	r3, 8007eb6 <__swsetup_r+0x16>
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 ff99 	bl	8008de8 <__sinit>
 8007eb6:	4b2e      	ldr	r3, [pc, #184]	; (8007f70 <__swsetup_r+0xd0>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d10f      	bne.n	8007edc <__swsetup_r+0x3c>
 8007ebc:	686c      	ldr	r4, [r5, #4]
 8007ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	0715      	lsls	r5, r2, #28
 8007ec6:	d42c      	bmi.n	8007f22 <__swsetup_r+0x82>
 8007ec8:	06d0      	lsls	r0, r2, #27
 8007eca:	d411      	bmi.n	8007ef0 <__swsetup_r+0x50>
 8007ecc:	2209      	movs	r2, #9
 8007ece:	6032      	str	r2, [r6, #0]
 8007ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	e03e      	b.n	8007f5a <__swsetup_r+0xba>
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <__swsetup_r+0xd4>)
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	d101      	bne.n	8007ee6 <__swsetup_r+0x46>
 8007ee2:	68ac      	ldr	r4, [r5, #8]
 8007ee4:	e7eb      	b.n	8007ebe <__swsetup_r+0x1e>
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <__swsetup_r+0xd8>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	bf08      	it	eq
 8007eec:	68ec      	ldreq	r4, [r5, #12]
 8007eee:	e7e6      	b.n	8007ebe <__swsetup_r+0x1e>
 8007ef0:	0751      	lsls	r1, r2, #29
 8007ef2:	d512      	bpl.n	8007f1a <__swsetup_r+0x7a>
 8007ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef6:	b141      	cbz	r1, 8007f0a <__swsetup_r+0x6a>
 8007ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007efc:	4299      	cmp	r1, r3
 8007efe:	d002      	beq.n	8007f06 <__swsetup_r+0x66>
 8007f00:	4630      	mov	r0, r6
 8007f02:	f001 fb69 	bl	80095d8 <_free_r>
 8007f06:	2300      	movs	r3, #0
 8007f08:	6363      	str	r3, [r4, #52]	; 0x34
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	2300      	movs	r3, #0
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f043 0308 	orr.w	r3, r3, #8
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	b94b      	cbnz	r3, 8007f3a <__swsetup_r+0x9a>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f30:	d003      	beq.n	8007f3a <__swsetup_r+0x9a>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4630      	mov	r0, r6
 8007f36:	f001 f813 	bl	8008f60 <__smakebuf_r>
 8007f3a:	89a2      	ldrh	r2, [r4, #12]
 8007f3c:	f012 0301 	ands.w	r3, r2, #1
 8007f40:	d00c      	beq.n	8007f5c <__swsetup_r+0xbc>
 8007f42:	2300      	movs	r3, #0
 8007f44:	60a3      	str	r3, [r4, #8]
 8007f46:	6963      	ldr	r3, [r4, #20]
 8007f48:	425b      	negs	r3, r3
 8007f4a:	61a3      	str	r3, [r4, #24]
 8007f4c:	6923      	ldr	r3, [r4, #16]
 8007f4e:	b953      	cbnz	r3, 8007f66 <__swsetup_r+0xc6>
 8007f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007f58:	d1ba      	bne.n	8007ed0 <__swsetup_r+0x30>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	0792      	lsls	r2, r2, #30
 8007f5e:	bf58      	it	pl
 8007f60:	6963      	ldrpl	r3, [r4, #20]
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	e7f2      	b.n	8007f4c <__swsetup_r+0xac>
 8007f66:	2000      	movs	r0, #0
 8007f68:	e7f7      	b.n	8007f5a <__swsetup_r+0xba>
 8007f6a:	bf00      	nop
 8007f6c:	2000000c 	.word	0x2000000c
 8007f70:	0800a044 	.word	0x0800a044
 8007f74:	0800a064 	.word	0x0800a064
 8007f78:	0800a024 	.word	0x0800a024

08007f7c <quorem>:
 8007f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	6903      	ldr	r3, [r0, #16]
 8007f82:	690c      	ldr	r4, [r1, #16]
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	4680      	mov	r8, r0
 8007f88:	f2c0 8082 	blt.w	8008090 <quorem+0x114>
 8007f8c:	3c01      	subs	r4, #1
 8007f8e:	f101 0714 	add.w	r7, r1, #20
 8007f92:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007f96:	f100 0614 	add.w	r6, r0, #20
 8007f9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007f9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007fa2:	eb06 030c 	add.w	r3, r6, ip
 8007fa6:	3501      	adds	r5, #1
 8007fa8:	eb07 090c 	add.w	r9, r7, ip
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	fbb0 f5f5 	udiv	r5, r0, r5
 8007fb2:	b395      	cbz	r5, 800801a <quorem+0x9e>
 8007fb4:	f04f 0a00 	mov.w	sl, #0
 8007fb8:	4638      	mov	r0, r7
 8007fba:	46b6      	mov	lr, r6
 8007fbc:	46d3      	mov	fp, sl
 8007fbe:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fc2:	b293      	uxth	r3, r2
 8007fc4:	fb05 a303 	mla	r3, r5, r3, sl
 8007fc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	ebab 0303 	sub.w	r3, fp, r3
 8007fd2:	0c12      	lsrs	r2, r2, #16
 8007fd4:	f8de b000 	ldr.w	fp, [lr]
 8007fd8:	fb05 a202 	mla	r2, r5, r2, sl
 8007fdc:	fa13 f38b 	uxtah	r3, r3, fp
 8007fe0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007fe4:	fa1f fb82 	uxth.w	fp, r2
 8007fe8:	f8de 2000 	ldr.w	r2, [lr]
 8007fec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ffa:	4581      	cmp	r9, r0
 8007ffc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008000:	f84e 3b04 	str.w	r3, [lr], #4
 8008004:	d2db      	bcs.n	8007fbe <quorem+0x42>
 8008006:	f856 300c 	ldr.w	r3, [r6, ip]
 800800a:	b933      	cbnz	r3, 800801a <quorem+0x9e>
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	3b04      	subs	r3, #4
 8008010:	429e      	cmp	r6, r3
 8008012:	461a      	mov	r2, r3
 8008014:	d330      	bcc.n	8008078 <quorem+0xfc>
 8008016:	f8c8 4010 	str.w	r4, [r8, #16]
 800801a:	4640      	mov	r0, r8
 800801c:	f001 fa08 	bl	8009430 <__mcmp>
 8008020:	2800      	cmp	r0, #0
 8008022:	db25      	blt.n	8008070 <quorem+0xf4>
 8008024:	3501      	adds	r5, #1
 8008026:	4630      	mov	r0, r6
 8008028:	f04f 0c00 	mov.w	ip, #0
 800802c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008030:	f8d0 e000 	ldr.w	lr, [r0]
 8008034:	b293      	uxth	r3, r2
 8008036:	ebac 0303 	sub.w	r3, ip, r3
 800803a:	0c12      	lsrs	r2, r2, #16
 800803c:	fa13 f38e 	uxtah	r3, r3, lr
 8008040:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008048:	b29b      	uxth	r3, r3
 800804a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800804e:	45b9      	cmp	r9, r7
 8008050:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008054:	f840 3b04 	str.w	r3, [r0], #4
 8008058:	d2e8      	bcs.n	800802c <quorem+0xb0>
 800805a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800805e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008062:	b92a      	cbnz	r2, 8008070 <quorem+0xf4>
 8008064:	3b04      	subs	r3, #4
 8008066:	429e      	cmp	r6, r3
 8008068:	461a      	mov	r2, r3
 800806a:	d30b      	bcc.n	8008084 <quorem+0x108>
 800806c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008070:	4628      	mov	r0, r5
 8008072:	b003      	add	sp, #12
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	3b04      	subs	r3, #4
 800807c:	2a00      	cmp	r2, #0
 800807e:	d1ca      	bne.n	8008016 <quorem+0x9a>
 8008080:	3c01      	subs	r4, #1
 8008082:	e7c5      	b.n	8008010 <quorem+0x94>
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	3b04      	subs	r3, #4
 8008088:	2a00      	cmp	r2, #0
 800808a:	d1ef      	bne.n	800806c <quorem+0xf0>
 800808c:	3c01      	subs	r4, #1
 800808e:	e7ea      	b.n	8008066 <quorem+0xea>
 8008090:	2000      	movs	r0, #0
 8008092:	e7ee      	b.n	8008072 <quorem+0xf6>
 8008094:	0000      	movs	r0, r0
	...

08008098 <_dtoa_r>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	ec57 6b10 	vmov	r6, r7, d0
 80080a0:	b097      	sub	sp, #92	; 0x5c
 80080a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080a4:	9106      	str	r1, [sp, #24]
 80080a6:	4604      	mov	r4, r0
 80080a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80080aa:	9312      	str	r3, [sp, #72]	; 0x48
 80080ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080b0:	e9cd 6700 	strd	r6, r7, [sp]
 80080b4:	b93d      	cbnz	r5, 80080c6 <_dtoa_r+0x2e>
 80080b6:	2010      	movs	r0, #16
 80080b8:	f000 ff92 	bl	8008fe0 <malloc>
 80080bc:	6260      	str	r0, [r4, #36]	; 0x24
 80080be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080c2:	6005      	str	r5, [r0, #0]
 80080c4:	60c5      	str	r5, [r0, #12]
 80080c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	b151      	cbz	r1, 80080e2 <_dtoa_r+0x4a>
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	604a      	str	r2, [r1, #4]
 80080d0:	2301      	movs	r3, #1
 80080d2:	4093      	lsls	r3, r2
 80080d4:	608b      	str	r3, [r1, #8]
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 ffc9 	bl	800906e <_Bfree>
 80080dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	1e3b      	subs	r3, r7, #0
 80080e4:	bfbb      	ittet	lt
 80080e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080ea:	9301      	strlt	r3, [sp, #4]
 80080ec:	2300      	movge	r3, #0
 80080ee:	2201      	movlt	r2, #1
 80080f0:	bfac      	ite	ge
 80080f2:	f8c8 3000 	strge.w	r3, [r8]
 80080f6:	f8c8 2000 	strlt.w	r2, [r8]
 80080fa:	4baf      	ldr	r3, [pc, #700]	; (80083b8 <_dtoa_r+0x320>)
 80080fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008100:	ea33 0308 	bics.w	r3, r3, r8
 8008104:	d114      	bne.n	8008130 <_dtoa_r+0x98>
 8008106:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008108:	f242 730f 	movw	r3, #9999	; 0x270f
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	b923      	cbnz	r3, 800811c <_dtoa_r+0x84>
 8008112:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008116:	2800      	cmp	r0, #0
 8008118:	f000 8542 	beq.w	8008ba0 <_dtoa_r+0xb08>
 800811c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800811e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80083cc <_dtoa_r+0x334>
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8544 	beq.w	8008bb0 <_dtoa_r+0xb18>
 8008128:	f10b 0303 	add.w	r3, fp, #3
 800812c:	f000 bd3e 	b.w	8008bac <_dtoa_r+0xb14>
 8008130:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008134:	2200      	movs	r2, #0
 8008136:	2300      	movs	r3, #0
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fcd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008140:	4681      	mov	r9, r0
 8008142:	b168      	cbz	r0, 8008160 <_dtoa_r+0xc8>
 8008144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008146:	2301      	movs	r3, #1
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8524 	beq.w	8008b9a <_dtoa_r+0xb02>
 8008152:	4b9a      	ldr	r3, [pc, #616]	; (80083bc <_dtoa_r+0x324>)
 8008154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008156:	f103 3bff 	add.w	fp, r3, #4294967295
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	f000 bd28 	b.w	8008bb0 <_dtoa_r+0xb18>
 8008160:	aa14      	add	r2, sp, #80	; 0x50
 8008162:	a915      	add	r1, sp, #84	; 0x54
 8008164:	ec47 6b10 	vmov	d0, r6, r7
 8008168:	4620      	mov	r0, r4
 800816a:	f001 f9d8 	bl	800951e <__d2b>
 800816e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008172:	9004      	str	r0, [sp, #16]
 8008174:	2d00      	cmp	r5, #0
 8008176:	d07c      	beq.n	8008272 <_dtoa_r+0x1da>
 8008178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800817c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008180:	46b2      	mov	sl, r6
 8008182:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800818a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800818e:	2200      	movs	r2, #0
 8008190:	4b8b      	ldr	r3, [pc, #556]	; (80083c0 <_dtoa_r+0x328>)
 8008192:	4650      	mov	r0, sl
 8008194:	4659      	mov	r1, fp
 8008196:	f7f8 f887 	bl	80002a8 <__aeabi_dsub>
 800819a:	a381      	add	r3, pc, #516	; (adr r3, 80083a0 <_dtoa_r+0x308>)
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f7f8 fa3a 	bl	8000618 <__aeabi_dmul>
 80081a4:	a380      	add	r3, pc, #512	; (adr r3, 80083a8 <_dtoa_r+0x310>)
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f7f8 f87f 	bl	80002ac <__adddf3>
 80081ae:	4606      	mov	r6, r0
 80081b0:	4628      	mov	r0, r5
 80081b2:	460f      	mov	r7, r1
 80081b4:	f7f8 f9c6 	bl	8000544 <__aeabi_i2d>
 80081b8:	a37d      	add	r3, pc, #500	; (adr r3, 80083b0 <_dtoa_r+0x318>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 fa2b 	bl	8000618 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4630      	mov	r0, r6
 80081c8:	4639      	mov	r1, r7
 80081ca:	f7f8 f86f 	bl	80002ac <__adddf3>
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	f7f8 fcd1 	bl	8000b78 <__aeabi_d2iz>
 80081d6:	2200      	movs	r2, #0
 80081d8:	4682      	mov	sl, r0
 80081da:	2300      	movs	r3, #0
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fc8c 	bl	8000afc <__aeabi_dcmplt>
 80081e4:	b148      	cbz	r0, 80081fa <_dtoa_r+0x162>
 80081e6:	4650      	mov	r0, sl
 80081e8:	f7f8 f9ac 	bl	8000544 <__aeabi_i2d>
 80081ec:	4632      	mov	r2, r6
 80081ee:	463b      	mov	r3, r7
 80081f0:	f7f8 fc7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80081f4:	b908      	cbnz	r0, 80081fa <_dtoa_r+0x162>
 80081f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081fa:	f1ba 0f16 	cmp.w	sl, #22
 80081fe:	d859      	bhi.n	80082b4 <_dtoa_r+0x21c>
 8008200:	4970      	ldr	r1, [pc, #448]	; (80083c4 <_dtoa_r+0x32c>)
 8008202:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800820a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820e:	f7f8 fc93 	bl	8000b38 <__aeabi_dcmpgt>
 8008212:	2800      	cmp	r0, #0
 8008214:	d050      	beq.n	80082b8 <_dtoa_r+0x220>
 8008216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800821a:	2300      	movs	r3, #0
 800821c:	930f      	str	r3, [sp, #60]	; 0x3c
 800821e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008220:	1b5d      	subs	r5, r3, r5
 8008222:	f1b5 0801 	subs.w	r8, r5, #1
 8008226:	bf49      	itett	mi
 8008228:	f1c5 0301 	rsbmi	r3, r5, #1
 800822c:	2300      	movpl	r3, #0
 800822e:	9305      	strmi	r3, [sp, #20]
 8008230:	f04f 0800 	movmi.w	r8, #0
 8008234:	bf58      	it	pl
 8008236:	9305      	strpl	r3, [sp, #20]
 8008238:	f1ba 0f00 	cmp.w	sl, #0
 800823c:	db3e      	blt.n	80082bc <_dtoa_r+0x224>
 800823e:	2300      	movs	r3, #0
 8008240:	44d0      	add	r8, sl
 8008242:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	2b09      	cmp	r3, #9
 800824c:	f200 8090 	bhi.w	8008370 <_dtoa_r+0x2d8>
 8008250:	2b05      	cmp	r3, #5
 8008252:	bfc4      	itt	gt
 8008254:	3b04      	subgt	r3, #4
 8008256:	9306      	strgt	r3, [sp, #24]
 8008258:	9b06      	ldr	r3, [sp, #24]
 800825a:	f1a3 0302 	sub.w	r3, r3, #2
 800825e:	bfcc      	ite	gt
 8008260:	2500      	movgt	r5, #0
 8008262:	2501      	movle	r5, #1
 8008264:	2b03      	cmp	r3, #3
 8008266:	f200 808f 	bhi.w	8008388 <_dtoa_r+0x2f0>
 800826a:	e8df f003 	tbb	[pc, r3]
 800826e:	7f7d      	.short	0x7f7d
 8008270:	7131      	.short	0x7131
 8008272:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008276:	441d      	add	r5, r3
 8008278:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800827c:	2820      	cmp	r0, #32
 800827e:	dd13      	ble.n	80082a8 <_dtoa_r+0x210>
 8008280:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008284:	9b00      	ldr	r3, [sp, #0]
 8008286:	fa08 f800 	lsl.w	r8, r8, r0
 800828a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800828e:	fa23 f000 	lsr.w	r0, r3, r0
 8008292:	ea48 0000 	orr.w	r0, r8, r0
 8008296:	f7f8 f945 	bl	8000524 <__aeabi_ui2d>
 800829a:	2301      	movs	r3, #1
 800829c:	4682      	mov	sl, r0
 800829e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80082a2:	3d01      	subs	r5, #1
 80082a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80082a6:	e772      	b.n	800818e <_dtoa_r+0xf6>
 80082a8:	9b00      	ldr	r3, [sp, #0]
 80082aa:	f1c0 0020 	rsb	r0, r0, #32
 80082ae:	fa03 f000 	lsl.w	r0, r3, r0
 80082b2:	e7f0      	b.n	8008296 <_dtoa_r+0x1fe>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7b1      	b.n	800821c <_dtoa_r+0x184>
 80082b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082ba:	e7b0      	b.n	800821e <_dtoa_r+0x186>
 80082bc:	9b05      	ldr	r3, [sp, #20]
 80082be:	eba3 030a 	sub.w	r3, r3, sl
 80082c2:	9305      	str	r3, [sp, #20]
 80082c4:	f1ca 0300 	rsb	r3, sl, #0
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	2300      	movs	r3, #0
 80082cc:	930e      	str	r3, [sp, #56]	; 0x38
 80082ce:	e7bb      	b.n	8008248 <_dtoa_r+0x1b0>
 80082d0:	2301      	movs	r3, #1
 80082d2:	930a      	str	r3, [sp, #40]	; 0x28
 80082d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	dd59      	ble.n	800838e <_dtoa_r+0x2f6>
 80082da:	9302      	str	r3, [sp, #8]
 80082dc:	4699      	mov	r9, r3
 80082de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082e0:	2200      	movs	r2, #0
 80082e2:	6072      	str	r2, [r6, #4]
 80082e4:	2204      	movs	r2, #4
 80082e6:	f102 0014 	add.w	r0, r2, #20
 80082ea:	4298      	cmp	r0, r3
 80082ec:	6871      	ldr	r1, [r6, #4]
 80082ee:	d953      	bls.n	8008398 <_dtoa_r+0x300>
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 fe88 	bl	8009006 <_Balloc>
 80082f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f8:	6030      	str	r0, [r6, #0]
 80082fa:	f1b9 0f0e 	cmp.w	r9, #14
 80082fe:	f8d3 b000 	ldr.w	fp, [r3]
 8008302:	f200 80e6 	bhi.w	80084d2 <_dtoa_r+0x43a>
 8008306:	2d00      	cmp	r5, #0
 8008308:	f000 80e3 	beq.w	80084d2 <_dtoa_r+0x43a>
 800830c:	ed9d 7b00 	vldr	d7, [sp]
 8008310:	f1ba 0f00 	cmp.w	sl, #0
 8008314:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008318:	dd74      	ble.n	8008404 <_dtoa_r+0x36c>
 800831a:	4a2a      	ldr	r2, [pc, #168]	; (80083c4 <_dtoa_r+0x32c>)
 800831c:	f00a 030f 	and.w	r3, sl, #15
 8008320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008324:	ed93 7b00 	vldr	d7, [r3]
 8008328:	ea4f 162a 	mov.w	r6, sl, asr #4
 800832c:	06f0      	lsls	r0, r6, #27
 800832e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008332:	d565      	bpl.n	8008400 <_dtoa_r+0x368>
 8008334:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <_dtoa_r+0x330>)
 8008336:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800833a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800833e:	f7f8 fa95 	bl	800086c <__aeabi_ddiv>
 8008342:	e9cd 0100 	strd	r0, r1, [sp]
 8008346:	f006 060f 	and.w	r6, r6, #15
 800834a:	2503      	movs	r5, #3
 800834c:	4f1e      	ldr	r7, [pc, #120]	; (80083c8 <_dtoa_r+0x330>)
 800834e:	e04c      	b.n	80083ea <_dtoa_r+0x352>
 8008350:	2301      	movs	r3, #1
 8008352:	930a      	str	r3, [sp, #40]	; 0x28
 8008354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008356:	4453      	add	r3, sl
 8008358:	f103 0901 	add.w	r9, r3, #1
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	464b      	mov	r3, r9
 8008360:	2b01      	cmp	r3, #1
 8008362:	bfb8      	it	lt
 8008364:	2301      	movlt	r3, #1
 8008366:	e7ba      	b.n	80082de <_dtoa_r+0x246>
 8008368:	2300      	movs	r3, #0
 800836a:	e7b2      	b.n	80082d2 <_dtoa_r+0x23a>
 800836c:	2300      	movs	r3, #0
 800836e:	e7f0      	b.n	8008352 <_dtoa_r+0x2ba>
 8008370:	2501      	movs	r5, #1
 8008372:	2300      	movs	r3, #0
 8008374:	9306      	str	r3, [sp, #24]
 8008376:	950a      	str	r5, [sp, #40]	; 0x28
 8008378:	f04f 33ff 	mov.w	r3, #4294967295
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	4699      	mov	r9, r3
 8008380:	2200      	movs	r2, #0
 8008382:	2312      	movs	r3, #18
 8008384:	920b      	str	r2, [sp, #44]	; 0x2c
 8008386:	e7aa      	b.n	80082de <_dtoa_r+0x246>
 8008388:	2301      	movs	r3, #1
 800838a:	930a      	str	r3, [sp, #40]	; 0x28
 800838c:	e7f4      	b.n	8008378 <_dtoa_r+0x2e0>
 800838e:	2301      	movs	r3, #1
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	4699      	mov	r9, r3
 8008394:	461a      	mov	r2, r3
 8008396:	e7f5      	b.n	8008384 <_dtoa_r+0x2ec>
 8008398:	3101      	adds	r1, #1
 800839a:	6071      	str	r1, [r6, #4]
 800839c:	0052      	lsls	r2, r2, #1
 800839e:	e7a2      	b.n	80082e6 <_dtoa_r+0x24e>
 80083a0:	636f4361 	.word	0x636f4361
 80083a4:	3fd287a7 	.word	0x3fd287a7
 80083a8:	8b60c8b3 	.word	0x8b60c8b3
 80083ac:	3fc68a28 	.word	0x3fc68a28
 80083b0:	509f79fb 	.word	0x509f79fb
 80083b4:	3fd34413 	.word	0x3fd34413
 80083b8:	7ff00000 	.word	0x7ff00000
 80083bc:	08009ff1 	.word	0x08009ff1
 80083c0:	3ff80000 	.word	0x3ff80000
 80083c4:	0800a0b0 	.word	0x0800a0b0
 80083c8:	0800a088 	.word	0x0800a088
 80083cc:	0800a01d 	.word	0x0800a01d
 80083d0:	07f1      	lsls	r1, r6, #31
 80083d2:	d508      	bpl.n	80083e6 <_dtoa_r+0x34e>
 80083d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083dc:	f7f8 f91c 	bl	8000618 <__aeabi_dmul>
 80083e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083e4:	3501      	adds	r5, #1
 80083e6:	1076      	asrs	r6, r6, #1
 80083e8:	3708      	adds	r7, #8
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	d1f0      	bne.n	80083d0 <_dtoa_r+0x338>
 80083ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80083f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083f6:	f7f8 fa39 	bl	800086c <__aeabi_ddiv>
 80083fa:	e9cd 0100 	strd	r0, r1, [sp]
 80083fe:	e01a      	b.n	8008436 <_dtoa_r+0x39e>
 8008400:	2502      	movs	r5, #2
 8008402:	e7a3      	b.n	800834c <_dtoa_r+0x2b4>
 8008404:	f000 80a0 	beq.w	8008548 <_dtoa_r+0x4b0>
 8008408:	f1ca 0600 	rsb	r6, sl, #0
 800840c:	4b9f      	ldr	r3, [pc, #636]	; (800868c <_dtoa_r+0x5f4>)
 800840e:	4fa0      	ldr	r7, [pc, #640]	; (8008690 <_dtoa_r+0x5f8>)
 8008410:	f006 020f 	and.w	r2, r6, #15
 8008414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008420:	f7f8 f8fa 	bl	8000618 <__aeabi_dmul>
 8008424:	e9cd 0100 	strd	r0, r1, [sp]
 8008428:	1136      	asrs	r6, r6, #4
 800842a:	2300      	movs	r3, #0
 800842c:	2502      	movs	r5, #2
 800842e:	2e00      	cmp	r6, #0
 8008430:	d17f      	bne.n	8008532 <_dtoa_r+0x49a>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e1      	bne.n	80083fa <_dtoa_r+0x362>
 8008436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8087 	beq.w	800854c <_dtoa_r+0x4b4>
 800843e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008442:	2200      	movs	r2, #0
 8008444:	4b93      	ldr	r3, [pc, #588]	; (8008694 <_dtoa_r+0x5fc>)
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 fb57 	bl	8000afc <__aeabi_dcmplt>
 800844e:	2800      	cmp	r0, #0
 8008450:	d07c      	beq.n	800854c <_dtoa_r+0x4b4>
 8008452:	f1b9 0f00 	cmp.w	r9, #0
 8008456:	d079      	beq.n	800854c <_dtoa_r+0x4b4>
 8008458:	9b02      	ldr	r3, [sp, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	dd35      	ble.n	80084ca <_dtoa_r+0x432>
 800845e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	4639      	mov	r1, r7
 8008466:	2200      	movs	r2, #0
 8008468:	4b8b      	ldr	r3, [pc, #556]	; (8008698 <_dtoa_r+0x600>)
 800846a:	4630      	mov	r0, r6
 800846c:	f7f8 f8d4 	bl	8000618 <__aeabi_dmul>
 8008470:	e9cd 0100 	strd	r0, r1, [sp]
 8008474:	9f02      	ldr	r7, [sp, #8]
 8008476:	3501      	adds	r5, #1
 8008478:	4628      	mov	r0, r5
 800847a:	f7f8 f863 	bl	8000544 <__aeabi_i2d>
 800847e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008482:	f7f8 f8c9 	bl	8000618 <__aeabi_dmul>
 8008486:	2200      	movs	r2, #0
 8008488:	4b84      	ldr	r3, [pc, #528]	; (800869c <_dtoa_r+0x604>)
 800848a:	f7f7 ff0f 	bl	80002ac <__adddf3>
 800848e:	4605      	mov	r5, r0
 8008490:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008494:	2f00      	cmp	r7, #0
 8008496:	d15d      	bne.n	8008554 <_dtoa_r+0x4bc>
 8008498:	2200      	movs	r2, #0
 800849a:	4b81      	ldr	r3, [pc, #516]	; (80086a0 <_dtoa_r+0x608>)
 800849c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a0:	f7f7 ff02 	bl	80002a8 <__aeabi_dsub>
 80084a4:	462a      	mov	r2, r5
 80084a6:	4633      	mov	r3, r6
 80084a8:	e9cd 0100 	strd	r0, r1, [sp]
 80084ac:	f7f8 fb44 	bl	8000b38 <__aeabi_dcmpgt>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f040 8288 	bne.w	80089c6 <_dtoa_r+0x92e>
 80084b6:	462a      	mov	r2, r5
 80084b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084c0:	f7f8 fb1c 	bl	8000afc <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	f040 827c 	bne.w	80089c2 <_dtoa_r+0x92a>
 80084ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084ce:	e9cd 2300 	strd	r2, r3, [sp]
 80084d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f2c0 8150 	blt.w	800877a <_dtoa_r+0x6e2>
 80084da:	f1ba 0f0e 	cmp.w	sl, #14
 80084de:	f300 814c 	bgt.w	800877a <_dtoa_r+0x6e2>
 80084e2:	4b6a      	ldr	r3, [pc, #424]	; (800868c <_dtoa_r+0x5f4>)
 80084e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084e8:	ed93 7b00 	vldr	d7, [r3]
 80084ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084f4:	f280 80d8 	bge.w	80086a8 <_dtoa_r+0x610>
 80084f8:	f1b9 0f00 	cmp.w	r9, #0
 80084fc:	f300 80d4 	bgt.w	80086a8 <_dtoa_r+0x610>
 8008500:	f040 825e 	bne.w	80089c0 <_dtoa_r+0x928>
 8008504:	2200      	movs	r2, #0
 8008506:	4b66      	ldr	r3, [pc, #408]	; (80086a0 <_dtoa_r+0x608>)
 8008508:	ec51 0b17 	vmov	r0, r1, d7
 800850c:	f7f8 f884 	bl	8000618 <__aeabi_dmul>
 8008510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008514:	f7f8 fb06 	bl	8000b24 <__aeabi_dcmpge>
 8008518:	464f      	mov	r7, r9
 800851a:	464e      	mov	r6, r9
 800851c:	2800      	cmp	r0, #0
 800851e:	f040 8234 	bne.w	800898a <_dtoa_r+0x8f2>
 8008522:	2331      	movs	r3, #49	; 0x31
 8008524:	f10b 0501 	add.w	r5, fp, #1
 8008528:	f88b 3000 	strb.w	r3, [fp]
 800852c:	f10a 0a01 	add.w	sl, sl, #1
 8008530:	e22f      	b.n	8008992 <_dtoa_r+0x8fa>
 8008532:	07f2      	lsls	r2, r6, #31
 8008534:	d505      	bpl.n	8008542 <_dtoa_r+0x4aa>
 8008536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853a:	f7f8 f86d 	bl	8000618 <__aeabi_dmul>
 800853e:	3501      	adds	r5, #1
 8008540:	2301      	movs	r3, #1
 8008542:	1076      	asrs	r6, r6, #1
 8008544:	3708      	adds	r7, #8
 8008546:	e772      	b.n	800842e <_dtoa_r+0x396>
 8008548:	2502      	movs	r5, #2
 800854a:	e774      	b.n	8008436 <_dtoa_r+0x39e>
 800854c:	f8cd a020 	str.w	sl, [sp, #32]
 8008550:	464f      	mov	r7, r9
 8008552:	e791      	b.n	8008478 <_dtoa_r+0x3e0>
 8008554:	4b4d      	ldr	r3, [pc, #308]	; (800868c <_dtoa_r+0x5f4>)
 8008556:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800855a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800855e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008560:	2b00      	cmp	r3, #0
 8008562:	d047      	beq.n	80085f4 <_dtoa_r+0x55c>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	2000      	movs	r0, #0
 800856a:	494e      	ldr	r1, [pc, #312]	; (80086a4 <_dtoa_r+0x60c>)
 800856c:	f7f8 f97e 	bl	800086c <__aeabi_ddiv>
 8008570:	462a      	mov	r2, r5
 8008572:	4633      	mov	r3, r6
 8008574:	f7f7 fe98 	bl	80002a8 <__aeabi_dsub>
 8008578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800857c:	465d      	mov	r5, fp
 800857e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008582:	f7f8 faf9 	bl	8000b78 <__aeabi_d2iz>
 8008586:	4606      	mov	r6, r0
 8008588:	f7f7 ffdc 	bl	8000544 <__aeabi_i2d>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008594:	f7f7 fe88 	bl	80002a8 <__aeabi_dsub>
 8008598:	3630      	adds	r6, #48	; 0x30
 800859a:	f805 6b01 	strb.w	r6, [r5], #1
 800859e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085a2:	e9cd 0100 	strd	r0, r1, [sp]
 80085a6:	f7f8 faa9 	bl	8000afc <__aeabi_dcmplt>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d163      	bne.n	8008676 <_dtoa_r+0x5de>
 80085ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b2:	2000      	movs	r0, #0
 80085b4:	4937      	ldr	r1, [pc, #220]	; (8008694 <_dtoa_r+0x5fc>)
 80085b6:	f7f7 fe77 	bl	80002a8 <__aeabi_dsub>
 80085ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085be:	f7f8 fa9d 	bl	8000afc <__aeabi_dcmplt>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f040 80b7 	bne.w	8008736 <_dtoa_r+0x69e>
 80085c8:	eba5 030b 	sub.w	r3, r5, fp
 80085cc:	429f      	cmp	r7, r3
 80085ce:	f77f af7c 	ble.w	80084ca <_dtoa_r+0x432>
 80085d2:	2200      	movs	r2, #0
 80085d4:	4b30      	ldr	r3, [pc, #192]	; (8008698 <_dtoa_r+0x600>)
 80085d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085da:	f7f8 f81d 	bl	8000618 <__aeabi_dmul>
 80085de:	2200      	movs	r2, #0
 80085e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085e4:	4b2c      	ldr	r3, [pc, #176]	; (8008698 <_dtoa_r+0x600>)
 80085e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ea:	f7f8 f815 	bl	8000618 <__aeabi_dmul>
 80085ee:	e9cd 0100 	strd	r0, r1, [sp]
 80085f2:	e7c4      	b.n	800857e <_dtoa_r+0x4e6>
 80085f4:	462a      	mov	r2, r5
 80085f6:	4633      	mov	r3, r6
 80085f8:	f7f8 f80e 	bl	8000618 <__aeabi_dmul>
 80085fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008600:	eb0b 0507 	add.w	r5, fp, r7
 8008604:	465e      	mov	r6, fp
 8008606:	e9dd 0100 	ldrd	r0, r1, [sp]
 800860a:	f7f8 fab5 	bl	8000b78 <__aeabi_d2iz>
 800860e:	4607      	mov	r7, r0
 8008610:	f7f7 ff98 	bl	8000544 <__aeabi_i2d>
 8008614:	3730      	adds	r7, #48	; 0x30
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800861e:	f7f7 fe43 	bl	80002a8 <__aeabi_dsub>
 8008622:	f806 7b01 	strb.w	r7, [r6], #1
 8008626:	42ae      	cmp	r6, r5
 8008628:	e9cd 0100 	strd	r0, r1, [sp]
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	d126      	bne.n	8008680 <_dtoa_r+0x5e8>
 8008632:	4b1c      	ldr	r3, [pc, #112]	; (80086a4 <_dtoa_r+0x60c>)
 8008634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008638:	f7f7 fe38 	bl	80002ac <__adddf3>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008644:	f7f8 fa78 	bl	8000b38 <__aeabi_dcmpgt>
 8008648:	2800      	cmp	r0, #0
 800864a:	d174      	bne.n	8008736 <_dtoa_r+0x69e>
 800864c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008650:	2000      	movs	r0, #0
 8008652:	4914      	ldr	r1, [pc, #80]	; (80086a4 <_dtoa_r+0x60c>)
 8008654:	f7f7 fe28 	bl	80002a8 <__aeabi_dsub>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008660:	f7f8 fa4c 	bl	8000afc <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	f43f af30 	beq.w	80084ca <_dtoa_r+0x432>
 800866a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800866e:	2b30      	cmp	r3, #48	; 0x30
 8008670:	f105 32ff 	add.w	r2, r5, #4294967295
 8008674:	d002      	beq.n	800867c <_dtoa_r+0x5e4>
 8008676:	f8dd a020 	ldr.w	sl, [sp, #32]
 800867a:	e04a      	b.n	8008712 <_dtoa_r+0x67a>
 800867c:	4615      	mov	r5, r2
 800867e:	e7f4      	b.n	800866a <_dtoa_r+0x5d2>
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <_dtoa_r+0x600>)
 8008682:	f7f7 ffc9 	bl	8000618 <__aeabi_dmul>
 8008686:	e9cd 0100 	strd	r0, r1, [sp]
 800868a:	e7bc      	b.n	8008606 <_dtoa_r+0x56e>
 800868c:	0800a0b0 	.word	0x0800a0b0
 8008690:	0800a088 	.word	0x0800a088
 8008694:	3ff00000 	.word	0x3ff00000
 8008698:	40240000 	.word	0x40240000
 800869c:	401c0000 	.word	0x401c0000
 80086a0:	40140000 	.word	0x40140000
 80086a4:	3fe00000 	.word	0x3fe00000
 80086a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80086ac:	465d      	mov	r5, fp
 80086ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086b2:	4630      	mov	r0, r6
 80086b4:	4639      	mov	r1, r7
 80086b6:	f7f8 f8d9 	bl	800086c <__aeabi_ddiv>
 80086ba:	f7f8 fa5d 	bl	8000b78 <__aeabi_d2iz>
 80086be:	4680      	mov	r8, r0
 80086c0:	f7f7 ff40 	bl	8000544 <__aeabi_i2d>
 80086c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c8:	f7f7 ffa6 	bl	8000618 <__aeabi_dmul>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80086d8:	f7f7 fde6 	bl	80002a8 <__aeabi_dsub>
 80086dc:	f805 6b01 	strb.w	r6, [r5], #1
 80086e0:	eba5 060b 	sub.w	r6, r5, fp
 80086e4:	45b1      	cmp	r9, r6
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	d139      	bne.n	8008760 <_dtoa_r+0x6c8>
 80086ec:	f7f7 fdde 	bl	80002ac <__adddf3>
 80086f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	f7f8 fa1e 	bl	8000b38 <__aeabi_dcmpgt>
 80086fc:	b9c8      	cbnz	r0, 8008732 <_dtoa_r+0x69a>
 80086fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008702:	4630      	mov	r0, r6
 8008704:	4639      	mov	r1, r7
 8008706:	f7f8 f9ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800870a:	b110      	cbz	r0, 8008712 <_dtoa_r+0x67a>
 800870c:	f018 0f01 	tst.w	r8, #1
 8008710:	d10f      	bne.n	8008732 <_dtoa_r+0x69a>
 8008712:	9904      	ldr	r1, [sp, #16]
 8008714:	4620      	mov	r0, r4
 8008716:	f000 fcaa 	bl	800906e <_Bfree>
 800871a:	2300      	movs	r3, #0
 800871c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800871e:	702b      	strb	r3, [r5, #0]
 8008720:	f10a 0301 	add.w	r3, sl, #1
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 8241 	beq.w	8008bb0 <_dtoa_r+0xb18>
 800872e:	601d      	str	r5, [r3, #0]
 8008730:	e23e      	b.n	8008bb0 <_dtoa_r+0xb18>
 8008732:	f8cd a020 	str.w	sl, [sp, #32]
 8008736:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800873a:	2a39      	cmp	r2, #57	; 0x39
 800873c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008740:	d108      	bne.n	8008754 <_dtoa_r+0x6bc>
 8008742:	459b      	cmp	fp, r3
 8008744:	d10a      	bne.n	800875c <_dtoa_r+0x6c4>
 8008746:	9b08      	ldr	r3, [sp, #32]
 8008748:	3301      	adds	r3, #1
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	2330      	movs	r3, #48	; 0x30
 800874e:	f88b 3000 	strb.w	r3, [fp]
 8008752:	465b      	mov	r3, fp
 8008754:	781a      	ldrb	r2, [r3, #0]
 8008756:	3201      	adds	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e78c      	b.n	8008676 <_dtoa_r+0x5de>
 800875c:	461d      	mov	r5, r3
 800875e:	e7ea      	b.n	8008736 <_dtoa_r+0x69e>
 8008760:	2200      	movs	r2, #0
 8008762:	4b9b      	ldr	r3, [pc, #620]	; (80089d0 <_dtoa_r+0x938>)
 8008764:	f7f7 ff58 	bl	8000618 <__aeabi_dmul>
 8008768:	2200      	movs	r2, #0
 800876a:	2300      	movs	r3, #0
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	f7f8 f9ba 	bl	8000ae8 <__aeabi_dcmpeq>
 8008774:	2800      	cmp	r0, #0
 8008776:	d09a      	beq.n	80086ae <_dtoa_r+0x616>
 8008778:	e7cb      	b.n	8008712 <_dtoa_r+0x67a>
 800877a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800877c:	2a00      	cmp	r2, #0
 800877e:	f000 808b 	beq.w	8008898 <_dtoa_r+0x800>
 8008782:	9a06      	ldr	r2, [sp, #24]
 8008784:	2a01      	cmp	r2, #1
 8008786:	dc6e      	bgt.n	8008866 <_dtoa_r+0x7ce>
 8008788:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800878a:	2a00      	cmp	r2, #0
 800878c:	d067      	beq.n	800885e <_dtoa_r+0x7c6>
 800878e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008792:	9f07      	ldr	r7, [sp, #28]
 8008794:	9d05      	ldr	r5, [sp, #20]
 8008796:	9a05      	ldr	r2, [sp, #20]
 8008798:	2101      	movs	r1, #1
 800879a:	441a      	add	r2, r3
 800879c:	4620      	mov	r0, r4
 800879e:	9205      	str	r2, [sp, #20]
 80087a0:	4498      	add	r8, r3
 80087a2:	f000 fd04 	bl	80091ae <__i2b>
 80087a6:	4606      	mov	r6, r0
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	dd0c      	ble.n	80087c6 <_dtoa_r+0x72e>
 80087ac:	f1b8 0f00 	cmp.w	r8, #0
 80087b0:	dd09      	ble.n	80087c6 <_dtoa_r+0x72e>
 80087b2:	4545      	cmp	r5, r8
 80087b4:	9a05      	ldr	r2, [sp, #20]
 80087b6:	462b      	mov	r3, r5
 80087b8:	bfa8      	it	ge
 80087ba:	4643      	movge	r3, r8
 80087bc:	1ad2      	subs	r2, r2, r3
 80087be:	9205      	str	r2, [sp, #20]
 80087c0:	1aed      	subs	r5, r5, r3
 80087c2:	eba8 0803 	sub.w	r8, r8, r3
 80087c6:	9b07      	ldr	r3, [sp, #28]
 80087c8:	b1eb      	cbz	r3, 8008806 <_dtoa_r+0x76e>
 80087ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d067      	beq.n	80088a0 <_dtoa_r+0x808>
 80087d0:	b18f      	cbz	r7, 80087f6 <_dtoa_r+0x75e>
 80087d2:	4631      	mov	r1, r6
 80087d4:	463a      	mov	r2, r7
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fd88 	bl	80092ec <__pow5mult>
 80087dc:	9a04      	ldr	r2, [sp, #16]
 80087de:	4601      	mov	r1, r0
 80087e0:	4606      	mov	r6, r0
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fcec 	bl	80091c0 <__multiply>
 80087e8:	9904      	ldr	r1, [sp, #16]
 80087ea:	9008      	str	r0, [sp, #32]
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fc3e 	bl	800906e <_Bfree>
 80087f2:	9b08      	ldr	r3, [sp, #32]
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9b07      	ldr	r3, [sp, #28]
 80087f8:	1bda      	subs	r2, r3, r7
 80087fa:	d004      	beq.n	8008806 <_dtoa_r+0x76e>
 80087fc:	9904      	ldr	r1, [sp, #16]
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fd74 	bl	80092ec <__pow5mult>
 8008804:	9004      	str	r0, [sp, #16]
 8008806:	2101      	movs	r1, #1
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fcd0 	bl	80091ae <__i2b>
 800880e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008810:	4607      	mov	r7, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 81d0 	beq.w	8008bb8 <_dtoa_r+0xb20>
 8008818:	461a      	mov	r2, r3
 800881a:	4601      	mov	r1, r0
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fd65 	bl	80092ec <__pow5mult>
 8008822:	9b06      	ldr	r3, [sp, #24]
 8008824:	2b01      	cmp	r3, #1
 8008826:	4607      	mov	r7, r0
 8008828:	dc40      	bgt.n	80088ac <_dtoa_r+0x814>
 800882a:	9b00      	ldr	r3, [sp, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d139      	bne.n	80088a4 <_dtoa_r+0x80c>
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008836:	2b00      	cmp	r3, #0
 8008838:	d136      	bne.n	80088a8 <_dtoa_r+0x810>
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008840:	0d1b      	lsrs	r3, r3, #20
 8008842:	051b      	lsls	r3, r3, #20
 8008844:	b12b      	cbz	r3, 8008852 <_dtoa_r+0x7ba>
 8008846:	9b05      	ldr	r3, [sp, #20]
 8008848:	3301      	adds	r3, #1
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	f108 0801 	add.w	r8, r8, #1
 8008850:	2301      	movs	r3, #1
 8008852:	9307      	str	r3, [sp, #28]
 8008854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008856:	2b00      	cmp	r3, #0
 8008858:	d12a      	bne.n	80088b0 <_dtoa_r+0x818>
 800885a:	2001      	movs	r0, #1
 800885c:	e030      	b.n	80088c0 <_dtoa_r+0x828>
 800885e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008860:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008864:	e795      	b.n	8008792 <_dtoa_r+0x6fa>
 8008866:	9b07      	ldr	r3, [sp, #28]
 8008868:	f109 37ff 	add.w	r7, r9, #4294967295
 800886c:	42bb      	cmp	r3, r7
 800886e:	bfbf      	itttt	lt
 8008870:	9b07      	ldrlt	r3, [sp, #28]
 8008872:	9707      	strlt	r7, [sp, #28]
 8008874:	1afa      	sublt	r2, r7, r3
 8008876:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008878:	bfbb      	ittet	lt
 800887a:	189b      	addlt	r3, r3, r2
 800887c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800887e:	1bdf      	subge	r7, r3, r7
 8008880:	2700      	movlt	r7, #0
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	bfb5      	itete	lt
 8008888:	9b05      	ldrlt	r3, [sp, #20]
 800888a:	9d05      	ldrge	r5, [sp, #20]
 800888c:	eba3 0509 	sublt.w	r5, r3, r9
 8008890:	464b      	movge	r3, r9
 8008892:	bfb8      	it	lt
 8008894:	2300      	movlt	r3, #0
 8008896:	e77e      	b.n	8008796 <_dtoa_r+0x6fe>
 8008898:	9f07      	ldr	r7, [sp, #28]
 800889a:	9d05      	ldr	r5, [sp, #20]
 800889c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800889e:	e783      	b.n	80087a8 <_dtoa_r+0x710>
 80088a0:	9a07      	ldr	r2, [sp, #28]
 80088a2:	e7ab      	b.n	80087fc <_dtoa_r+0x764>
 80088a4:	2300      	movs	r3, #0
 80088a6:	e7d4      	b.n	8008852 <_dtoa_r+0x7ba>
 80088a8:	9b00      	ldr	r3, [sp, #0]
 80088aa:	e7d2      	b.n	8008852 <_dtoa_r+0x7ba>
 80088ac:	2300      	movs	r3, #0
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80088b6:	6918      	ldr	r0, [r3, #16]
 80088b8:	f000 fc2b 	bl	8009112 <__hi0bits>
 80088bc:	f1c0 0020 	rsb	r0, r0, #32
 80088c0:	4440      	add	r0, r8
 80088c2:	f010 001f 	ands.w	r0, r0, #31
 80088c6:	d047      	beq.n	8008958 <_dtoa_r+0x8c0>
 80088c8:	f1c0 0320 	rsb	r3, r0, #32
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	dd3b      	ble.n	8008948 <_dtoa_r+0x8b0>
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	f1c0 001c 	rsb	r0, r0, #28
 80088d6:	4403      	add	r3, r0
 80088d8:	9305      	str	r3, [sp, #20]
 80088da:	4405      	add	r5, r0
 80088dc:	4480      	add	r8, r0
 80088de:	9b05      	ldr	r3, [sp, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dd05      	ble.n	80088f0 <_dtoa_r+0x858>
 80088e4:	461a      	mov	r2, r3
 80088e6:	9904      	ldr	r1, [sp, #16]
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fd4d 	bl	8009388 <__lshift>
 80088ee:	9004      	str	r0, [sp, #16]
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	dd05      	ble.n	8008902 <_dtoa_r+0x86a>
 80088f6:	4639      	mov	r1, r7
 80088f8:	4642      	mov	r2, r8
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 fd44 	bl	8009388 <__lshift>
 8008900:	4607      	mov	r7, r0
 8008902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008904:	b353      	cbz	r3, 800895c <_dtoa_r+0x8c4>
 8008906:	4639      	mov	r1, r7
 8008908:	9804      	ldr	r0, [sp, #16]
 800890a:	f000 fd91 	bl	8009430 <__mcmp>
 800890e:	2800      	cmp	r0, #0
 8008910:	da24      	bge.n	800895c <_dtoa_r+0x8c4>
 8008912:	2300      	movs	r3, #0
 8008914:	220a      	movs	r2, #10
 8008916:	9904      	ldr	r1, [sp, #16]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fbbf 	bl	800909c <__multadd>
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	9004      	str	r0, [sp, #16]
 8008922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 814d 	beq.w	8008bc6 <_dtoa_r+0xb2e>
 800892c:	2300      	movs	r3, #0
 800892e:	4631      	mov	r1, r6
 8008930:	220a      	movs	r2, #10
 8008932:	4620      	mov	r0, r4
 8008934:	f000 fbb2 	bl	800909c <__multadd>
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	4606      	mov	r6, r0
 800893e:	dc4f      	bgt.n	80089e0 <_dtoa_r+0x948>
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	2b02      	cmp	r3, #2
 8008944:	dd4c      	ble.n	80089e0 <_dtoa_r+0x948>
 8008946:	e011      	b.n	800896c <_dtoa_r+0x8d4>
 8008948:	d0c9      	beq.n	80088de <_dtoa_r+0x846>
 800894a:	9a05      	ldr	r2, [sp, #20]
 800894c:	331c      	adds	r3, #28
 800894e:	441a      	add	r2, r3
 8008950:	9205      	str	r2, [sp, #20]
 8008952:	441d      	add	r5, r3
 8008954:	4498      	add	r8, r3
 8008956:	e7c2      	b.n	80088de <_dtoa_r+0x846>
 8008958:	4603      	mov	r3, r0
 800895a:	e7f6      	b.n	800894a <_dtoa_r+0x8b2>
 800895c:	f1b9 0f00 	cmp.w	r9, #0
 8008960:	dc38      	bgt.n	80089d4 <_dtoa_r+0x93c>
 8008962:	9b06      	ldr	r3, [sp, #24]
 8008964:	2b02      	cmp	r3, #2
 8008966:	dd35      	ble.n	80089d4 <_dtoa_r+0x93c>
 8008968:	f8cd 9008 	str.w	r9, [sp, #8]
 800896c:	9b02      	ldr	r3, [sp, #8]
 800896e:	b963      	cbnz	r3, 800898a <_dtoa_r+0x8f2>
 8008970:	4639      	mov	r1, r7
 8008972:	2205      	movs	r2, #5
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fb91 	bl	800909c <__multadd>
 800897a:	4601      	mov	r1, r0
 800897c:	4607      	mov	r7, r0
 800897e:	9804      	ldr	r0, [sp, #16]
 8008980:	f000 fd56 	bl	8009430 <__mcmp>
 8008984:	2800      	cmp	r0, #0
 8008986:	f73f adcc 	bgt.w	8008522 <_dtoa_r+0x48a>
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	465d      	mov	r5, fp
 800898e:	ea6f 0a03 	mvn.w	sl, r3
 8008992:	f04f 0900 	mov.w	r9, #0
 8008996:	4639      	mov	r1, r7
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fb68 	bl	800906e <_Bfree>
 800899e:	2e00      	cmp	r6, #0
 80089a0:	f43f aeb7 	beq.w	8008712 <_dtoa_r+0x67a>
 80089a4:	f1b9 0f00 	cmp.w	r9, #0
 80089a8:	d005      	beq.n	80089b6 <_dtoa_r+0x91e>
 80089aa:	45b1      	cmp	r9, r6
 80089ac:	d003      	beq.n	80089b6 <_dtoa_r+0x91e>
 80089ae:	4649      	mov	r1, r9
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fb5c 	bl	800906e <_Bfree>
 80089b6:	4631      	mov	r1, r6
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fb58 	bl	800906e <_Bfree>
 80089be:	e6a8      	b.n	8008712 <_dtoa_r+0x67a>
 80089c0:	2700      	movs	r7, #0
 80089c2:	463e      	mov	r6, r7
 80089c4:	e7e1      	b.n	800898a <_dtoa_r+0x8f2>
 80089c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80089ca:	463e      	mov	r6, r7
 80089cc:	e5a9      	b.n	8008522 <_dtoa_r+0x48a>
 80089ce:	bf00      	nop
 80089d0:	40240000 	.word	0x40240000
 80089d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80fa 	beq.w	8008bd4 <_dtoa_r+0xb3c>
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	dd05      	ble.n	80089f0 <_dtoa_r+0x958>
 80089e4:	4631      	mov	r1, r6
 80089e6:	462a      	mov	r2, r5
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fccd 	bl	8009388 <__lshift>
 80089ee:	4606      	mov	r6, r0
 80089f0:	9b07      	ldr	r3, [sp, #28]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d04c      	beq.n	8008a90 <_dtoa_r+0x9f8>
 80089f6:	6871      	ldr	r1, [r6, #4]
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fb04 	bl	8009006 <_Balloc>
 80089fe:	6932      	ldr	r2, [r6, #16]
 8008a00:	3202      	adds	r2, #2
 8008a02:	4605      	mov	r5, r0
 8008a04:	0092      	lsls	r2, r2, #2
 8008a06:	f106 010c 	add.w	r1, r6, #12
 8008a0a:	300c      	adds	r0, #12
 8008a0c:	f000 faf0 	bl	8008ff0 <memcpy>
 8008a10:	2201      	movs	r2, #1
 8008a12:	4629      	mov	r1, r5
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 fcb7 	bl	8009388 <__lshift>
 8008a1a:	9b00      	ldr	r3, [sp, #0]
 8008a1c:	f8cd b014 	str.w	fp, [sp, #20]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	46b1      	mov	r9, r6
 8008a26:	9307      	str	r3, [sp, #28]
 8008a28:	4606      	mov	r6, r0
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	9804      	ldr	r0, [sp, #16]
 8008a2e:	f7ff faa5 	bl	8007f7c <quorem>
 8008a32:	4649      	mov	r1, r9
 8008a34:	4605      	mov	r5, r0
 8008a36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a3a:	9804      	ldr	r0, [sp, #16]
 8008a3c:	f000 fcf8 	bl	8009430 <__mcmp>
 8008a40:	4632      	mov	r2, r6
 8008a42:	9000      	str	r0, [sp, #0]
 8008a44:	4639      	mov	r1, r7
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fd0c 	bl	8009464 <__mdiff>
 8008a4c:	68c3      	ldr	r3, [r0, #12]
 8008a4e:	4602      	mov	r2, r0
 8008a50:	bb03      	cbnz	r3, 8008a94 <_dtoa_r+0x9fc>
 8008a52:	4601      	mov	r1, r0
 8008a54:	9008      	str	r0, [sp, #32]
 8008a56:	9804      	ldr	r0, [sp, #16]
 8008a58:	f000 fcea 	bl	8009430 <__mcmp>
 8008a5c:	9a08      	ldr	r2, [sp, #32]
 8008a5e:	4603      	mov	r3, r0
 8008a60:	4611      	mov	r1, r2
 8008a62:	4620      	mov	r0, r4
 8008a64:	9308      	str	r3, [sp, #32]
 8008a66:	f000 fb02 	bl	800906e <_Bfree>
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	b9a3      	cbnz	r3, 8008a98 <_dtoa_r+0xa00>
 8008a6e:	9a06      	ldr	r2, [sp, #24]
 8008a70:	b992      	cbnz	r2, 8008a98 <_dtoa_r+0xa00>
 8008a72:	9a07      	ldr	r2, [sp, #28]
 8008a74:	b982      	cbnz	r2, 8008a98 <_dtoa_r+0xa00>
 8008a76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a7a:	d029      	beq.n	8008ad0 <_dtoa_r+0xa38>
 8008a7c:	9b00      	ldr	r3, [sp, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dd01      	ble.n	8008a86 <_dtoa_r+0x9ee>
 8008a82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008a86:	9b05      	ldr	r3, [sp, #20]
 8008a88:	1c5d      	adds	r5, r3, #1
 8008a8a:	f883 8000 	strb.w	r8, [r3]
 8008a8e:	e782      	b.n	8008996 <_dtoa_r+0x8fe>
 8008a90:	4630      	mov	r0, r6
 8008a92:	e7c2      	b.n	8008a1a <_dtoa_r+0x982>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e7e3      	b.n	8008a60 <_dtoa_r+0x9c8>
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	db04      	blt.n	8008aa8 <_dtoa_r+0xa10>
 8008a9e:	d125      	bne.n	8008aec <_dtoa_r+0xa54>
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	bb1a      	cbnz	r2, 8008aec <_dtoa_r+0xa54>
 8008aa4:	9a07      	ldr	r2, [sp, #28]
 8008aa6:	bb0a      	cbnz	r2, 8008aec <_dtoa_r+0xa54>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	ddec      	ble.n	8008a86 <_dtoa_r+0x9ee>
 8008aac:	2201      	movs	r2, #1
 8008aae:	9904      	ldr	r1, [sp, #16]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fc69 	bl	8009388 <__lshift>
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	9004      	str	r0, [sp, #16]
 8008aba:	f000 fcb9 	bl	8009430 <__mcmp>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	dc03      	bgt.n	8008aca <_dtoa_r+0xa32>
 8008ac2:	d1e0      	bne.n	8008a86 <_dtoa_r+0x9ee>
 8008ac4:	f018 0f01 	tst.w	r8, #1
 8008ac8:	d0dd      	beq.n	8008a86 <_dtoa_r+0x9ee>
 8008aca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ace:	d1d8      	bne.n	8008a82 <_dtoa_r+0x9ea>
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	9a05      	ldr	r2, [sp, #20]
 8008ad4:	1c5d      	adds	r5, r3, #1
 8008ad6:	2339      	movs	r3, #57	; 0x39
 8008ad8:	7013      	strb	r3, [r2, #0]
 8008ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ade:	2b39      	cmp	r3, #57	; 0x39
 8008ae0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ae4:	d04f      	beq.n	8008b86 <_dtoa_r+0xaee>
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	7013      	strb	r3, [r2, #0]
 8008aea:	e754      	b.n	8008996 <_dtoa_r+0x8fe>
 8008aec:	9a05      	ldr	r2, [sp, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f102 0501 	add.w	r5, r2, #1
 8008af4:	dd06      	ble.n	8008b04 <_dtoa_r+0xa6c>
 8008af6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008afa:	d0e9      	beq.n	8008ad0 <_dtoa_r+0xa38>
 8008afc:	f108 0801 	add.w	r8, r8, #1
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	e7c2      	b.n	8008a8a <_dtoa_r+0x9f2>
 8008b04:	9a02      	ldr	r2, [sp, #8]
 8008b06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b0a:	eba5 030b 	sub.w	r3, r5, fp
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d021      	beq.n	8008b56 <_dtoa_r+0xabe>
 8008b12:	2300      	movs	r3, #0
 8008b14:	220a      	movs	r2, #10
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fabf 	bl	800909c <__multadd>
 8008b1e:	45b1      	cmp	r9, r6
 8008b20:	9004      	str	r0, [sp, #16]
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	f04f 020a 	mov.w	r2, #10
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	d105      	bne.n	8008b3c <_dtoa_r+0xaa4>
 8008b30:	f000 fab4 	bl	800909c <__multadd>
 8008b34:	4681      	mov	r9, r0
 8008b36:	4606      	mov	r6, r0
 8008b38:	9505      	str	r5, [sp, #20]
 8008b3a:	e776      	b.n	8008a2a <_dtoa_r+0x992>
 8008b3c:	f000 faae 	bl	800909c <__multadd>
 8008b40:	4631      	mov	r1, r6
 8008b42:	4681      	mov	r9, r0
 8008b44:	2300      	movs	r3, #0
 8008b46:	220a      	movs	r2, #10
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 faa7 	bl	800909c <__multadd>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	e7f2      	b.n	8008b38 <_dtoa_r+0xaa0>
 8008b52:	f04f 0900 	mov.w	r9, #0
 8008b56:	2201      	movs	r2, #1
 8008b58:	9904      	ldr	r1, [sp, #16]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fc14 	bl	8009388 <__lshift>
 8008b60:	4639      	mov	r1, r7
 8008b62:	9004      	str	r0, [sp, #16]
 8008b64:	f000 fc64 	bl	8009430 <__mcmp>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	dcb6      	bgt.n	8008ada <_dtoa_r+0xa42>
 8008b6c:	d102      	bne.n	8008b74 <_dtoa_r+0xadc>
 8008b6e:	f018 0f01 	tst.w	r8, #1
 8008b72:	d1b2      	bne.n	8008ada <_dtoa_r+0xa42>
 8008b74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b7e:	f47f af0a 	bne.w	8008996 <_dtoa_r+0x8fe>
 8008b82:	4615      	mov	r5, r2
 8008b84:	e7f6      	b.n	8008b74 <_dtoa_r+0xadc>
 8008b86:	4593      	cmp	fp, r2
 8008b88:	d105      	bne.n	8008b96 <_dtoa_r+0xafe>
 8008b8a:	2331      	movs	r3, #49	; 0x31
 8008b8c:	f10a 0a01 	add.w	sl, sl, #1
 8008b90:	f88b 3000 	strb.w	r3, [fp]
 8008b94:	e6ff      	b.n	8008996 <_dtoa_r+0x8fe>
 8008b96:	4615      	mov	r5, r2
 8008b98:	e79f      	b.n	8008ada <_dtoa_r+0xa42>
 8008b9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c00 <_dtoa_r+0xb68>
 8008b9e:	e007      	b.n	8008bb0 <_dtoa_r+0xb18>
 8008ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ba2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c04 <_dtoa_r+0xb6c>
 8008ba6:	b11b      	cbz	r3, 8008bb0 <_dtoa_r+0xb18>
 8008ba8:	f10b 0308 	add.w	r3, fp, #8
 8008bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	4658      	mov	r0, fp
 8008bb2:	b017      	add	sp, #92	; 0x5c
 8008bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb8:	9b06      	ldr	r3, [sp, #24]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	f77f ae35 	ble.w	800882a <_dtoa_r+0x792>
 8008bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	e649      	b.n	800885a <_dtoa_r+0x7c2>
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc03      	bgt.n	8008bd4 <_dtoa_r+0xb3c>
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	f73f aecc 	bgt.w	800896c <_dtoa_r+0x8d4>
 8008bd4:	465d      	mov	r5, fp
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	9804      	ldr	r0, [sp, #16]
 8008bda:	f7ff f9cf 	bl	8007f7c <quorem>
 8008bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008be2:	f805 8b01 	strb.w	r8, [r5], #1
 8008be6:	9a02      	ldr	r2, [sp, #8]
 8008be8:	eba5 030b 	sub.w	r3, r5, fp
 8008bec:	429a      	cmp	r2, r3
 8008bee:	ddb0      	ble.n	8008b52 <_dtoa_r+0xaba>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	220a      	movs	r2, #10
 8008bf4:	9904      	ldr	r1, [sp, #16]
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 fa50 	bl	800909c <__multadd>
 8008bfc:	9004      	str	r0, [sp, #16]
 8008bfe:	e7ea      	b.n	8008bd6 <_dtoa_r+0xb3e>
 8008c00:	08009ff0 	.word	0x08009ff0
 8008c04:	0800a014 	.word	0x0800a014

08008c08 <__sflush_r>:
 8008c08:	898a      	ldrh	r2, [r1, #12]
 8008c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0e:	4605      	mov	r5, r0
 8008c10:	0710      	lsls	r0, r2, #28
 8008c12:	460c      	mov	r4, r1
 8008c14:	d458      	bmi.n	8008cc8 <__sflush_r+0xc0>
 8008c16:	684b      	ldr	r3, [r1, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dc05      	bgt.n	8008c28 <__sflush_r+0x20>
 8008c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc02      	bgt.n	8008c28 <__sflush_r+0x20>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	d0f9      	beq.n	8008c22 <__sflush_r+0x1a>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c34:	682f      	ldr	r7, [r5, #0]
 8008c36:	6a21      	ldr	r1, [r4, #32]
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	d032      	beq.n	8008ca2 <__sflush_r+0x9a>
 8008c3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	075a      	lsls	r2, r3, #29
 8008c42:	d505      	bpl.n	8008c50 <__sflush_r+0x48>
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	1ac0      	subs	r0, r0, r3
 8008c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c4a:	b10b      	cbz	r3, 8008c50 <__sflush_r+0x48>
 8008c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c4e:	1ac0      	subs	r0, r0, r3
 8008c50:	2300      	movs	r3, #0
 8008c52:	4602      	mov	r2, r0
 8008c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c56:	6a21      	ldr	r1, [r4, #32]
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b0      	blx	r6
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	d106      	bne.n	8008c70 <__sflush_r+0x68>
 8008c62:	6829      	ldr	r1, [r5, #0]
 8008c64:	291d      	cmp	r1, #29
 8008c66:	d848      	bhi.n	8008cfa <__sflush_r+0xf2>
 8008c68:	4a29      	ldr	r2, [pc, #164]	; (8008d10 <__sflush_r+0x108>)
 8008c6a:	40ca      	lsrs	r2, r1
 8008c6c:	07d6      	lsls	r6, r2, #31
 8008c6e:	d544      	bpl.n	8008cfa <__sflush_r+0xf2>
 8008c70:	2200      	movs	r2, #0
 8008c72:	6062      	str	r2, [r4, #4]
 8008c74:	04d9      	lsls	r1, r3, #19
 8008c76:	6922      	ldr	r2, [r4, #16]
 8008c78:	6022      	str	r2, [r4, #0]
 8008c7a:	d504      	bpl.n	8008c86 <__sflush_r+0x7e>
 8008c7c:	1c42      	adds	r2, r0, #1
 8008c7e:	d101      	bne.n	8008c84 <__sflush_r+0x7c>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b903      	cbnz	r3, 8008c86 <__sflush_r+0x7e>
 8008c84:	6560      	str	r0, [r4, #84]	; 0x54
 8008c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c88:	602f      	str	r7, [r5, #0]
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d0c9      	beq.n	8008c22 <__sflush_r+0x1a>
 8008c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c92:	4299      	cmp	r1, r3
 8008c94:	d002      	beq.n	8008c9c <__sflush_r+0x94>
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 fc9e 	bl	80095d8 <_free_r>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	6360      	str	r0, [r4, #52]	; 0x34
 8008ca0:	e7c0      	b.n	8008c24 <__sflush_r+0x1c>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b0      	blx	r6
 8008ca8:	1c41      	adds	r1, r0, #1
 8008caa:	d1c8      	bne.n	8008c3e <__sflush_r+0x36>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0c5      	beq.n	8008c3e <__sflush_r+0x36>
 8008cb2:	2b1d      	cmp	r3, #29
 8008cb4:	d001      	beq.n	8008cba <__sflush_r+0xb2>
 8008cb6:	2b16      	cmp	r3, #22
 8008cb8:	d101      	bne.n	8008cbe <__sflush_r+0xb6>
 8008cba:	602f      	str	r7, [r5, #0]
 8008cbc:	e7b1      	b.n	8008c22 <__sflush_r+0x1a>
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	e7ad      	b.n	8008c24 <__sflush_r+0x1c>
 8008cc8:	690f      	ldr	r7, [r1, #16]
 8008cca:	2f00      	cmp	r7, #0
 8008ccc:	d0a9      	beq.n	8008c22 <__sflush_r+0x1a>
 8008cce:	0793      	lsls	r3, r2, #30
 8008cd0:	680e      	ldr	r6, [r1, #0]
 8008cd2:	bf08      	it	eq
 8008cd4:	694b      	ldreq	r3, [r1, #20]
 8008cd6:	600f      	str	r7, [r1, #0]
 8008cd8:	bf18      	it	ne
 8008cda:	2300      	movne	r3, #0
 8008cdc:	eba6 0807 	sub.w	r8, r6, r7
 8008ce0:	608b      	str	r3, [r1, #8]
 8008ce2:	f1b8 0f00 	cmp.w	r8, #0
 8008ce6:	dd9c      	ble.n	8008c22 <__sflush_r+0x1a>
 8008ce8:	4643      	mov	r3, r8
 8008cea:	463a      	mov	r2, r7
 8008cec:	6a21      	ldr	r1, [r4, #32]
 8008cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b0      	blx	r6
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dc06      	bgt.n	8008d06 <__sflush_r+0xfe>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	e78e      	b.n	8008c24 <__sflush_r+0x1c>
 8008d06:	4407      	add	r7, r0
 8008d08:	eba8 0800 	sub.w	r8, r8, r0
 8008d0c:	e7e9      	b.n	8008ce2 <__sflush_r+0xda>
 8008d0e:	bf00      	nop
 8008d10:	20400001 	.word	0x20400001

08008d14 <_fflush_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	690b      	ldr	r3, [r1, #16]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b1db      	cbz	r3, 8008d56 <_fflush_r+0x42>
 8008d1e:	b118      	cbz	r0, 8008d28 <_fflush_r+0x14>
 8008d20:	6983      	ldr	r3, [r0, #24]
 8008d22:	b90b      	cbnz	r3, 8008d28 <_fflush_r+0x14>
 8008d24:	f000 f860 	bl	8008de8 <__sinit>
 8008d28:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <_fflush_r+0x48>)
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	d109      	bne.n	8008d42 <_fflush_r+0x2e>
 8008d2e:	686c      	ldr	r4, [r5, #4]
 8008d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d34:	b17b      	cbz	r3, 8008d56 <_fflush_r+0x42>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d3e:	f7ff bf63 	b.w	8008c08 <__sflush_r>
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <_fflush_r+0x4c>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d101      	bne.n	8008d4c <_fflush_r+0x38>
 8008d48:	68ac      	ldr	r4, [r5, #8]
 8008d4a:	e7f1      	b.n	8008d30 <_fflush_r+0x1c>
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <_fflush_r+0x50>)
 8008d4e:	429c      	cmp	r4, r3
 8008d50:	bf08      	it	eq
 8008d52:	68ec      	ldreq	r4, [r5, #12]
 8008d54:	e7ec      	b.n	8008d30 <_fflush_r+0x1c>
 8008d56:	2000      	movs	r0, #0
 8008d58:	bd38      	pop	{r3, r4, r5, pc}
 8008d5a:	bf00      	nop
 8008d5c:	0800a044 	.word	0x0800a044
 8008d60:	0800a064 	.word	0x0800a064
 8008d64:	0800a024 	.word	0x0800a024

08008d68 <std>:
 8008d68:	2300      	movs	r3, #0
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d72:	6083      	str	r3, [r0, #8]
 8008d74:	8181      	strh	r1, [r0, #12]
 8008d76:	6643      	str	r3, [r0, #100]	; 0x64
 8008d78:	81c2      	strh	r2, [r0, #14]
 8008d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d7e:	6183      	str	r3, [r0, #24]
 8008d80:	4619      	mov	r1, r3
 8008d82:	2208      	movs	r2, #8
 8008d84:	305c      	adds	r0, #92	; 0x5c
 8008d86:	f7fe fb45 	bl	8007414 <memset>
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <std+0x38>)
 8008d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d8e:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <std+0x3c>)
 8008d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d92:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <std+0x40>)
 8008d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <std+0x44>)
 8008d98:	6224      	str	r4, [r4, #32]
 8008d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	08009a35 	.word	0x08009a35
 8008da4:	08009a57 	.word	0x08009a57
 8008da8:	08009a8f 	.word	0x08009a8f
 8008dac:	08009ab3 	.word	0x08009ab3

08008db0 <_cleanup_r>:
 8008db0:	4901      	ldr	r1, [pc, #4]	; (8008db8 <_cleanup_r+0x8>)
 8008db2:	f000 b885 	b.w	8008ec0 <_fwalk_reent>
 8008db6:	bf00      	nop
 8008db8:	08008d15 	.word	0x08008d15

08008dbc <__sfmoreglue>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	1e4a      	subs	r2, r1, #1
 8008dc0:	2568      	movs	r5, #104	; 0x68
 8008dc2:	4355      	muls	r5, r2
 8008dc4:	460e      	mov	r6, r1
 8008dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dca:	f000 fc53 	bl	8009674 <_malloc_r>
 8008dce:	4604      	mov	r4, r0
 8008dd0:	b140      	cbz	r0, 8008de4 <__sfmoreglue+0x28>
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8008dd8:	300c      	adds	r0, #12
 8008dda:	60a0      	str	r0, [r4, #8]
 8008ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008de0:	f7fe fb18 	bl	8007414 <memset>
 8008de4:	4620      	mov	r0, r4
 8008de6:	bd70      	pop	{r4, r5, r6, pc}

08008de8 <__sinit>:
 8008de8:	6983      	ldr	r3, [r0, #24]
 8008dea:	b510      	push	{r4, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	bb33      	cbnz	r3, 8008e3e <__sinit+0x56>
 8008df0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008df4:	6503      	str	r3, [r0, #80]	; 0x50
 8008df6:	4b12      	ldr	r3, [pc, #72]	; (8008e40 <__sinit+0x58>)
 8008df8:	4a12      	ldr	r2, [pc, #72]	; (8008e44 <__sinit+0x5c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6282      	str	r2, [r0, #40]	; 0x28
 8008dfe:	4298      	cmp	r0, r3
 8008e00:	bf04      	itt	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	6183      	streq	r3, [r0, #24]
 8008e06:	f000 f81f 	bl	8008e48 <__sfp>
 8008e0a:	6060      	str	r0, [r4, #4]
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 f81b 	bl	8008e48 <__sfp>
 8008e12:	60a0      	str	r0, [r4, #8]
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f817 	bl	8008e48 <__sfp>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60e0      	str	r0, [r4, #12]
 8008e1e:	2104      	movs	r1, #4
 8008e20:	6860      	ldr	r0, [r4, #4]
 8008e22:	f7ff ffa1 	bl	8008d68 <std>
 8008e26:	2201      	movs	r2, #1
 8008e28:	2109      	movs	r1, #9
 8008e2a:	68a0      	ldr	r0, [r4, #8]
 8008e2c:	f7ff ff9c 	bl	8008d68 <std>
 8008e30:	2202      	movs	r2, #2
 8008e32:	2112      	movs	r1, #18
 8008e34:	68e0      	ldr	r0, [r4, #12]
 8008e36:	f7ff ff97 	bl	8008d68 <std>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	61a3      	str	r3, [r4, #24]
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	08009fdc 	.word	0x08009fdc
 8008e44:	08008db1 	.word	0x08008db1

08008e48 <__sfp>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <__sfp+0x70>)
 8008e4c:	681e      	ldr	r6, [r3, #0]
 8008e4e:	69b3      	ldr	r3, [r6, #24]
 8008e50:	4607      	mov	r7, r0
 8008e52:	b913      	cbnz	r3, 8008e5a <__sfp+0x12>
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7ff ffc7 	bl	8008de8 <__sinit>
 8008e5a:	3648      	adds	r6, #72	; 0x48
 8008e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	d503      	bpl.n	8008e6c <__sfp+0x24>
 8008e64:	6833      	ldr	r3, [r6, #0]
 8008e66:	b133      	cbz	r3, 8008e76 <__sfp+0x2e>
 8008e68:	6836      	ldr	r6, [r6, #0]
 8008e6a:	e7f7      	b.n	8008e5c <__sfp+0x14>
 8008e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e70:	b16d      	cbz	r5, 8008e8e <__sfp+0x46>
 8008e72:	3468      	adds	r4, #104	; 0x68
 8008e74:	e7f4      	b.n	8008e60 <__sfp+0x18>
 8008e76:	2104      	movs	r1, #4
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f7ff ff9f 	bl	8008dbc <__sfmoreglue>
 8008e7e:	6030      	str	r0, [r6, #0]
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1f1      	bne.n	8008e68 <__sfp+0x20>
 8008e84:	230c      	movs	r3, #12
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	4604      	mov	r4, r0
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8e:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <__sfp+0x74>)
 8008e90:	6665      	str	r5, [r4, #100]	; 0x64
 8008e92:	e9c4 5500 	strd	r5, r5, [r4]
 8008e96:	60a5      	str	r5, [r4, #8]
 8008e98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008e9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ea8:	f7fe fab4 	bl	8007414 <memset>
 8008eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008eb4:	e7e9      	b.n	8008e8a <__sfp+0x42>
 8008eb6:	bf00      	nop
 8008eb8:	08009fdc 	.word	0x08009fdc
 8008ebc:	ffff0001 	.word	0xffff0001

08008ec0 <_fwalk_reent>:
 8008ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	4689      	mov	r9, r1
 8008ec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ecc:	2600      	movs	r6, #0
 8008ece:	b914      	cbnz	r4, 8008ed6 <_fwalk_reent+0x16>
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008eda:	3f01      	subs	r7, #1
 8008edc:	d501      	bpl.n	8008ee2 <_fwalk_reent+0x22>
 8008ede:	6824      	ldr	r4, [r4, #0]
 8008ee0:	e7f5      	b.n	8008ece <_fwalk_reent+0xe>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d907      	bls.n	8008ef8 <_fwalk_reent+0x38>
 8008ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008eec:	3301      	adds	r3, #1
 8008eee:	d003      	beq.n	8008ef8 <_fwalk_reent+0x38>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	47c8      	blx	r9
 8008ef6:	4306      	orrs	r6, r0
 8008ef8:	3568      	adds	r5, #104	; 0x68
 8008efa:	e7ee      	b.n	8008eda <_fwalk_reent+0x1a>

08008efc <_localeconv_r>:
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <_localeconv_r+0x14>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a18      	ldr	r0, [r3, #32]
 8008f02:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <_localeconv_r+0x18>)
 8008f04:	2800      	cmp	r0, #0
 8008f06:	bf08      	it	eq
 8008f08:	4618      	moveq	r0, r3
 8008f0a:	30f0      	adds	r0, #240	; 0xf0
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	2000000c 	.word	0x2000000c
 8008f14:	20000070 	.word	0x20000070

08008f18 <__swhatbuf_r>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	460e      	mov	r6, r1
 8008f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f20:	2900      	cmp	r1, #0
 8008f22:	b096      	sub	sp, #88	; 0x58
 8008f24:	4614      	mov	r4, r2
 8008f26:	461d      	mov	r5, r3
 8008f28:	da07      	bge.n	8008f3a <__swhatbuf_r+0x22>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	89b3      	ldrh	r3, [r6, #12]
 8008f30:	061a      	lsls	r2, r3, #24
 8008f32:	d410      	bmi.n	8008f56 <__swhatbuf_r+0x3e>
 8008f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f38:	e00e      	b.n	8008f58 <__swhatbuf_r+0x40>
 8008f3a:	466a      	mov	r2, sp
 8008f3c:	f000 fde0 	bl	8009b00 <_fstat_r>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	dbf2      	blt.n	8008f2a <__swhatbuf_r+0x12>
 8008f44:	9a01      	ldr	r2, [sp, #4]
 8008f46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f4e:	425a      	negs	r2, r3
 8008f50:	415a      	adcs	r2, r3
 8008f52:	602a      	str	r2, [r5, #0]
 8008f54:	e7ee      	b.n	8008f34 <__swhatbuf_r+0x1c>
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	2000      	movs	r0, #0
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	b016      	add	sp, #88	; 0x58
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}

08008f60 <__smakebuf_r>:
 8008f60:	898b      	ldrh	r3, [r1, #12]
 8008f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f64:	079d      	lsls	r5, r3, #30
 8008f66:	4606      	mov	r6, r0
 8008f68:	460c      	mov	r4, r1
 8008f6a:	d507      	bpl.n	8008f7c <__smakebuf_r+0x1c>
 8008f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	2301      	movs	r3, #1
 8008f76:	6163      	str	r3, [r4, #20]
 8008f78:	b002      	add	sp, #8
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	ab01      	add	r3, sp, #4
 8008f7e:	466a      	mov	r2, sp
 8008f80:	f7ff ffca 	bl	8008f18 <__swhatbuf_r>
 8008f84:	9900      	ldr	r1, [sp, #0]
 8008f86:	4605      	mov	r5, r0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f000 fb73 	bl	8009674 <_malloc_r>
 8008f8e:	b948      	cbnz	r0, 8008fa4 <__smakebuf_r+0x44>
 8008f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f94:	059a      	lsls	r2, r3, #22
 8008f96:	d4ef      	bmi.n	8008f78 <__smakebuf_r+0x18>
 8008f98:	f023 0303 	bic.w	r3, r3, #3
 8008f9c:	f043 0302 	orr.w	r3, r3, #2
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	e7e3      	b.n	8008f6c <__smakebuf_r+0xc>
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <__smakebuf_r+0x7c>)
 8008fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	6020      	str	r0, [r4, #0]
 8008fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	9b00      	ldr	r3, [sp, #0]
 8008fb4:	6163      	str	r3, [r4, #20]
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	6120      	str	r0, [r4, #16]
 8008fba:	b15b      	cbz	r3, 8008fd4 <__smakebuf_r+0x74>
 8008fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 fdaf 	bl	8009b24 <_isatty_r>
 8008fc6:	b128      	cbz	r0, 8008fd4 <__smakebuf_r+0x74>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	431d      	orrs	r5, r3
 8008fd8:	81a5      	strh	r5, [r4, #12]
 8008fda:	e7cd      	b.n	8008f78 <__smakebuf_r+0x18>
 8008fdc:	08008db1 	.word	0x08008db1

08008fe0 <malloc>:
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <malloc+0xc>)
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f000 bb45 	b.w	8009674 <_malloc_r>
 8008fea:	bf00      	nop
 8008fec:	2000000c 	.word	0x2000000c

08008ff0 <memcpy>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	1e43      	subs	r3, r0, #1
 8008ff4:	440a      	add	r2, r1
 8008ff6:	4291      	cmp	r1, r2
 8008ff8:	d100      	bne.n	8008ffc <memcpy+0xc>
 8008ffa:	bd10      	pop	{r4, pc}
 8008ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009004:	e7f7      	b.n	8008ff6 <memcpy+0x6>

08009006 <_Balloc>:
 8009006:	b570      	push	{r4, r5, r6, lr}
 8009008:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800900a:	4604      	mov	r4, r0
 800900c:	460e      	mov	r6, r1
 800900e:	b93d      	cbnz	r5, 8009020 <_Balloc+0x1a>
 8009010:	2010      	movs	r0, #16
 8009012:	f7ff ffe5 	bl	8008fe0 <malloc>
 8009016:	6260      	str	r0, [r4, #36]	; 0x24
 8009018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800901c:	6005      	str	r5, [r0, #0]
 800901e:	60c5      	str	r5, [r0, #12]
 8009020:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009022:	68eb      	ldr	r3, [r5, #12]
 8009024:	b183      	cbz	r3, 8009048 <_Balloc+0x42>
 8009026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800902e:	b9b8      	cbnz	r0, 8009060 <_Balloc+0x5a>
 8009030:	2101      	movs	r1, #1
 8009032:	fa01 f506 	lsl.w	r5, r1, r6
 8009036:	1d6a      	adds	r2, r5, #5
 8009038:	0092      	lsls	r2, r2, #2
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fabe 	bl	80095bc <_calloc_r>
 8009040:	b160      	cbz	r0, 800905c <_Balloc+0x56>
 8009042:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009046:	e00e      	b.n	8009066 <_Balloc+0x60>
 8009048:	2221      	movs	r2, #33	; 0x21
 800904a:	2104      	movs	r1, #4
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fab5 	bl	80095bc <_calloc_r>
 8009052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009054:	60e8      	str	r0, [r5, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e4      	bne.n	8009026 <_Balloc+0x20>
 800905c:	2000      	movs	r0, #0
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	6802      	ldr	r2, [r0, #0]
 8009062:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009066:	2300      	movs	r3, #0
 8009068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800906c:	e7f7      	b.n	800905e <_Balloc+0x58>

0800906e <_Bfree>:
 800906e:	b570      	push	{r4, r5, r6, lr}
 8009070:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009072:	4606      	mov	r6, r0
 8009074:	460d      	mov	r5, r1
 8009076:	b93c      	cbnz	r4, 8009088 <_Bfree+0x1a>
 8009078:	2010      	movs	r0, #16
 800907a:	f7ff ffb1 	bl	8008fe0 <malloc>
 800907e:	6270      	str	r0, [r6, #36]	; 0x24
 8009080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009084:	6004      	str	r4, [r0, #0]
 8009086:	60c4      	str	r4, [r0, #12]
 8009088:	b13d      	cbz	r5, 800909a <_Bfree+0x2c>
 800908a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800908c:	686a      	ldr	r2, [r5, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009094:	6029      	str	r1, [r5, #0]
 8009096:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800909a:	bd70      	pop	{r4, r5, r6, pc}

0800909c <__multadd>:
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	690d      	ldr	r5, [r1, #16]
 80090a2:	461f      	mov	r7, r3
 80090a4:	4606      	mov	r6, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	f101 0c14 	add.w	ip, r1, #20
 80090ac:	2300      	movs	r3, #0
 80090ae:	f8dc 0000 	ldr.w	r0, [ip]
 80090b2:	b281      	uxth	r1, r0
 80090b4:	fb02 7101 	mla	r1, r2, r1, r7
 80090b8:	0c0f      	lsrs	r7, r1, #16
 80090ba:	0c00      	lsrs	r0, r0, #16
 80090bc:	fb02 7000 	mla	r0, r2, r0, r7
 80090c0:	b289      	uxth	r1, r1
 80090c2:	3301      	adds	r3, #1
 80090c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090c8:	429d      	cmp	r5, r3
 80090ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090ce:	f84c 1b04 	str.w	r1, [ip], #4
 80090d2:	dcec      	bgt.n	80090ae <__multadd+0x12>
 80090d4:	b1d7      	cbz	r7, 800910c <__multadd+0x70>
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	42ab      	cmp	r3, r5
 80090da:	dc12      	bgt.n	8009102 <__multadd+0x66>
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	4630      	mov	r0, r6
 80090e0:	3101      	adds	r1, #1
 80090e2:	f7ff ff90 	bl	8009006 <_Balloc>
 80090e6:	6922      	ldr	r2, [r4, #16]
 80090e8:	3202      	adds	r2, #2
 80090ea:	f104 010c 	add.w	r1, r4, #12
 80090ee:	4680      	mov	r8, r0
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	300c      	adds	r0, #12
 80090f4:	f7ff ff7c 	bl	8008ff0 <memcpy>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff ffb7 	bl	800906e <_Bfree>
 8009100:	4644      	mov	r4, r8
 8009102:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009106:	3501      	adds	r5, #1
 8009108:	615f      	str	r7, [r3, #20]
 800910a:	6125      	str	r5, [r4, #16]
 800910c:	4620      	mov	r0, r4
 800910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009112 <__hi0bits>:
 8009112:	0c02      	lsrs	r2, r0, #16
 8009114:	0412      	lsls	r2, r2, #16
 8009116:	4603      	mov	r3, r0
 8009118:	b9b2      	cbnz	r2, 8009148 <__hi0bits+0x36>
 800911a:	0403      	lsls	r3, r0, #16
 800911c:	2010      	movs	r0, #16
 800911e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009122:	bf04      	itt	eq
 8009124:	021b      	lsleq	r3, r3, #8
 8009126:	3008      	addeq	r0, #8
 8009128:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800912c:	bf04      	itt	eq
 800912e:	011b      	lsleq	r3, r3, #4
 8009130:	3004      	addeq	r0, #4
 8009132:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009136:	bf04      	itt	eq
 8009138:	009b      	lsleq	r3, r3, #2
 800913a:	3002      	addeq	r0, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	db06      	blt.n	800914e <__hi0bits+0x3c>
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	d503      	bpl.n	800914c <__hi0bits+0x3a>
 8009144:	3001      	adds	r0, #1
 8009146:	4770      	bx	lr
 8009148:	2000      	movs	r0, #0
 800914a:	e7e8      	b.n	800911e <__hi0bits+0xc>
 800914c:	2020      	movs	r0, #32
 800914e:	4770      	bx	lr

08009150 <__lo0bits>:
 8009150:	6803      	ldr	r3, [r0, #0]
 8009152:	f013 0207 	ands.w	r2, r3, #7
 8009156:	4601      	mov	r1, r0
 8009158:	d00b      	beq.n	8009172 <__lo0bits+0x22>
 800915a:	07da      	lsls	r2, r3, #31
 800915c:	d423      	bmi.n	80091a6 <__lo0bits+0x56>
 800915e:	0798      	lsls	r0, r3, #30
 8009160:	bf49      	itett	mi
 8009162:	085b      	lsrmi	r3, r3, #1
 8009164:	089b      	lsrpl	r3, r3, #2
 8009166:	2001      	movmi	r0, #1
 8009168:	600b      	strmi	r3, [r1, #0]
 800916a:	bf5c      	itt	pl
 800916c:	600b      	strpl	r3, [r1, #0]
 800916e:	2002      	movpl	r0, #2
 8009170:	4770      	bx	lr
 8009172:	b298      	uxth	r0, r3
 8009174:	b9a8      	cbnz	r0, 80091a2 <__lo0bits+0x52>
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	2010      	movs	r0, #16
 800917a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800917e:	bf04      	itt	eq
 8009180:	0a1b      	lsreq	r3, r3, #8
 8009182:	3008      	addeq	r0, #8
 8009184:	071a      	lsls	r2, r3, #28
 8009186:	bf04      	itt	eq
 8009188:	091b      	lsreq	r3, r3, #4
 800918a:	3004      	addeq	r0, #4
 800918c:	079a      	lsls	r2, r3, #30
 800918e:	bf04      	itt	eq
 8009190:	089b      	lsreq	r3, r3, #2
 8009192:	3002      	addeq	r0, #2
 8009194:	07da      	lsls	r2, r3, #31
 8009196:	d402      	bmi.n	800919e <__lo0bits+0x4e>
 8009198:	085b      	lsrs	r3, r3, #1
 800919a:	d006      	beq.n	80091aa <__lo0bits+0x5a>
 800919c:	3001      	adds	r0, #1
 800919e:	600b      	str	r3, [r1, #0]
 80091a0:	4770      	bx	lr
 80091a2:	4610      	mov	r0, r2
 80091a4:	e7e9      	b.n	800917a <__lo0bits+0x2a>
 80091a6:	2000      	movs	r0, #0
 80091a8:	4770      	bx	lr
 80091aa:	2020      	movs	r0, #32
 80091ac:	4770      	bx	lr

080091ae <__i2b>:
 80091ae:	b510      	push	{r4, lr}
 80091b0:	460c      	mov	r4, r1
 80091b2:	2101      	movs	r1, #1
 80091b4:	f7ff ff27 	bl	8009006 <_Balloc>
 80091b8:	2201      	movs	r2, #1
 80091ba:	6144      	str	r4, [r0, #20]
 80091bc:	6102      	str	r2, [r0, #16]
 80091be:	bd10      	pop	{r4, pc}

080091c0 <__multiply>:
 80091c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	4614      	mov	r4, r2
 80091c6:	690a      	ldr	r2, [r1, #16]
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	bfb8      	it	lt
 80091ce:	460b      	movlt	r3, r1
 80091d0:	4688      	mov	r8, r1
 80091d2:	bfbc      	itt	lt
 80091d4:	46a0      	movlt	r8, r4
 80091d6:	461c      	movlt	r4, r3
 80091d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091e8:	eb07 0609 	add.w	r6, r7, r9
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	bfb8      	it	lt
 80091f0:	3101      	addlt	r1, #1
 80091f2:	f7ff ff08 	bl	8009006 <_Balloc>
 80091f6:	f100 0514 	add.w	r5, r0, #20
 80091fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80091fe:	462b      	mov	r3, r5
 8009200:	2200      	movs	r2, #0
 8009202:	4573      	cmp	r3, lr
 8009204:	d316      	bcc.n	8009234 <__multiply+0x74>
 8009206:	f104 0214 	add.w	r2, r4, #20
 800920a:	f108 0114 	add.w	r1, r8, #20
 800920e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009212:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	9b00      	ldr	r3, [sp, #0]
 800921a:	9201      	str	r2, [sp, #4]
 800921c:	4293      	cmp	r3, r2
 800921e:	d80c      	bhi.n	800923a <__multiply+0x7a>
 8009220:	2e00      	cmp	r6, #0
 8009222:	dd03      	ble.n	800922c <__multiply+0x6c>
 8009224:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009228:	2b00      	cmp	r3, #0
 800922a:	d05d      	beq.n	80092e8 <__multiply+0x128>
 800922c:	6106      	str	r6, [r0, #16]
 800922e:	b003      	add	sp, #12
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	f843 2b04 	str.w	r2, [r3], #4
 8009238:	e7e3      	b.n	8009202 <__multiply+0x42>
 800923a:	f8b2 b000 	ldrh.w	fp, [r2]
 800923e:	f1bb 0f00 	cmp.w	fp, #0
 8009242:	d023      	beq.n	800928c <__multiply+0xcc>
 8009244:	4689      	mov	r9, r1
 8009246:	46ac      	mov	ip, r5
 8009248:	f04f 0800 	mov.w	r8, #0
 800924c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009250:	f8dc a000 	ldr.w	sl, [ip]
 8009254:	b2a3      	uxth	r3, r4
 8009256:	fa1f fa8a 	uxth.w	sl, sl
 800925a:	fb0b a303 	mla	r3, fp, r3, sl
 800925e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009262:	f8dc 4000 	ldr.w	r4, [ip]
 8009266:	4443      	add	r3, r8
 8009268:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800926c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009270:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009274:	46e2      	mov	sl, ip
 8009276:	b29b      	uxth	r3, r3
 8009278:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800927c:	454f      	cmp	r7, r9
 800927e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009282:	f84a 3b04 	str.w	r3, [sl], #4
 8009286:	d82b      	bhi.n	80092e0 <__multiply+0x120>
 8009288:	f8cc 8004 	str.w	r8, [ip, #4]
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009292:	3204      	adds	r2, #4
 8009294:	f1ba 0f00 	cmp.w	sl, #0
 8009298:	d020      	beq.n	80092dc <__multiply+0x11c>
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	4689      	mov	r9, r1
 800929e:	46a8      	mov	r8, r5
 80092a0:	f04f 0b00 	mov.w	fp, #0
 80092a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80092a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80092ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80092b0:	445c      	add	r4, fp
 80092b2:	46c4      	mov	ip, r8
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092ba:	f84c 3b04 	str.w	r3, [ip], #4
 80092be:	f859 3b04 	ldr.w	r3, [r9], #4
 80092c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80092c6:	0c1b      	lsrs	r3, r3, #16
 80092c8:	fb0a b303 	mla	r3, sl, r3, fp
 80092cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80092d0:	454f      	cmp	r7, r9
 80092d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80092d6:	d805      	bhi.n	80092e4 <__multiply+0x124>
 80092d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80092dc:	3504      	adds	r5, #4
 80092de:	e79b      	b.n	8009218 <__multiply+0x58>
 80092e0:	46d4      	mov	ip, sl
 80092e2:	e7b3      	b.n	800924c <__multiply+0x8c>
 80092e4:	46e0      	mov	r8, ip
 80092e6:	e7dd      	b.n	80092a4 <__multiply+0xe4>
 80092e8:	3e01      	subs	r6, #1
 80092ea:	e799      	b.n	8009220 <__multiply+0x60>

080092ec <__pow5mult>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	4615      	mov	r5, r2
 80092f2:	f012 0203 	ands.w	r2, r2, #3
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	d007      	beq.n	800930c <__pow5mult+0x20>
 80092fc:	3a01      	subs	r2, #1
 80092fe:	4c21      	ldr	r4, [pc, #132]	; (8009384 <__pow5mult+0x98>)
 8009300:	2300      	movs	r3, #0
 8009302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009306:	f7ff fec9 	bl	800909c <__multadd>
 800930a:	4607      	mov	r7, r0
 800930c:	10ad      	asrs	r5, r5, #2
 800930e:	d035      	beq.n	800937c <__pow5mult+0x90>
 8009310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009312:	b93c      	cbnz	r4, 8009324 <__pow5mult+0x38>
 8009314:	2010      	movs	r0, #16
 8009316:	f7ff fe63 	bl	8008fe0 <malloc>
 800931a:	6270      	str	r0, [r6, #36]	; 0x24
 800931c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009320:	6004      	str	r4, [r0, #0]
 8009322:	60c4      	str	r4, [r0, #12]
 8009324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800932c:	b94c      	cbnz	r4, 8009342 <__pow5mult+0x56>
 800932e:	f240 2171 	movw	r1, #625	; 0x271
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff ff3b 	bl	80091ae <__i2b>
 8009338:	2300      	movs	r3, #0
 800933a:	f8c8 0008 	str.w	r0, [r8, #8]
 800933e:	4604      	mov	r4, r0
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	07eb      	lsls	r3, r5, #31
 8009348:	d50a      	bpl.n	8009360 <__pow5mult+0x74>
 800934a:	4639      	mov	r1, r7
 800934c:	4622      	mov	r2, r4
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff ff36 	bl	80091c0 <__multiply>
 8009354:	4639      	mov	r1, r7
 8009356:	4681      	mov	r9, r0
 8009358:	4630      	mov	r0, r6
 800935a:	f7ff fe88 	bl	800906e <_Bfree>
 800935e:	464f      	mov	r7, r9
 8009360:	106d      	asrs	r5, r5, #1
 8009362:	d00b      	beq.n	800937c <__pow5mult+0x90>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	b938      	cbnz	r0, 8009378 <__pow5mult+0x8c>
 8009368:	4622      	mov	r2, r4
 800936a:	4621      	mov	r1, r4
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff ff27 	bl	80091c0 <__multiply>
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	f8c0 8000 	str.w	r8, [r0]
 8009378:	4604      	mov	r4, r0
 800937a:	e7e4      	b.n	8009346 <__pow5mult+0x5a>
 800937c:	4638      	mov	r0, r7
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	bf00      	nop
 8009384:	0800a178 	.word	0x0800a178

08009388 <__lshift>:
 8009388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	6849      	ldr	r1, [r1, #4]
 8009396:	eb0a 0903 	add.w	r9, sl, r3
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	4607      	mov	r7, r0
 800939e:	4616      	mov	r6, r2
 80093a0:	f109 0501 	add.w	r5, r9, #1
 80093a4:	42ab      	cmp	r3, r5
 80093a6:	db32      	blt.n	800940e <__lshift+0x86>
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff fe2c 	bl	8009006 <_Balloc>
 80093ae:	2300      	movs	r3, #0
 80093b0:	4680      	mov	r8, r0
 80093b2:	f100 0114 	add.w	r1, r0, #20
 80093b6:	461a      	mov	r2, r3
 80093b8:	4553      	cmp	r3, sl
 80093ba:	db2b      	blt.n	8009414 <__lshift+0x8c>
 80093bc:	6920      	ldr	r0, [r4, #16]
 80093be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c2:	f104 0314 	add.w	r3, r4, #20
 80093c6:	f016 021f 	ands.w	r2, r6, #31
 80093ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093d2:	d025      	beq.n	8009420 <__lshift+0x98>
 80093d4:	f1c2 0e20 	rsb	lr, r2, #32
 80093d8:	2000      	movs	r0, #0
 80093da:	681e      	ldr	r6, [r3, #0]
 80093dc:	468a      	mov	sl, r1
 80093de:	4096      	lsls	r6, r2
 80093e0:	4330      	orrs	r0, r6
 80093e2:	f84a 0b04 	str.w	r0, [sl], #4
 80093e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80093ea:	459c      	cmp	ip, r3
 80093ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80093f0:	d814      	bhi.n	800941c <__lshift+0x94>
 80093f2:	6048      	str	r0, [r1, #4]
 80093f4:	b108      	cbz	r0, 80093fa <__lshift+0x72>
 80093f6:	f109 0502 	add.w	r5, r9, #2
 80093fa:	3d01      	subs	r5, #1
 80093fc:	4638      	mov	r0, r7
 80093fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8009402:	4621      	mov	r1, r4
 8009404:	f7ff fe33 	bl	800906e <_Bfree>
 8009408:	4640      	mov	r0, r8
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	3101      	adds	r1, #1
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	e7c7      	b.n	80093a4 <__lshift+0x1c>
 8009414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009418:	3301      	adds	r3, #1
 800941a:	e7cd      	b.n	80093b8 <__lshift+0x30>
 800941c:	4651      	mov	r1, sl
 800941e:	e7dc      	b.n	80093da <__lshift+0x52>
 8009420:	3904      	subs	r1, #4
 8009422:	f853 2b04 	ldr.w	r2, [r3], #4
 8009426:	f841 2f04 	str.w	r2, [r1, #4]!
 800942a:	459c      	cmp	ip, r3
 800942c:	d8f9      	bhi.n	8009422 <__lshift+0x9a>
 800942e:	e7e4      	b.n	80093fa <__lshift+0x72>

08009430 <__mcmp>:
 8009430:	6903      	ldr	r3, [r0, #16]
 8009432:	690a      	ldr	r2, [r1, #16]
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	b530      	push	{r4, r5, lr}
 8009438:	d10c      	bne.n	8009454 <__mcmp+0x24>
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	3014      	adds	r0, #20
 800943e:	3114      	adds	r1, #20
 8009440:	1884      	adds	r4, r0, r2
 8009442:	4411      	add	r1, r2
 8009444:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800944c:	4295      	cmp	r5, r2
 800944e:	d003      	beq.n	8009458 <__mcmp+0x28>
 8009450:	d305      	bcc.n	800945e <__mcmp+0x2e>
 8009452:	2301      	movs	r3, #1
 8009454:	4618      	mov	r0, r3
 8009456:	bd30      	pop	{r4, r5, pc}
 8009458:	42a0      	cmp	r0, r4
 800945a:	d3f3      	bcc.n	8009444 <__mcmp+0x14>
 800945c:	e7fa      	b.n	8009454 <__mcmp+0x24>
 800945e:	f04f 33ff 	mov.w	r3, #4294967295
 8009462:	e7f7      	b.n	8009454 <__mcmp+0x24>

08009464 <__mdiff>:
 8009464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	460d      	mov	r5, r1
 800946a:	4607      	mov	r7, r0
 800946c:	4611      	mov	r1, r2
 800946e:	4628      	mov	r0, r5
 8009470:	4614      	mov	r4, r2
 8009472:	f7ff ffdd 	bl	8009430 <__mcmp>
 8009476:	1e06      	subs	r6, r0, #0
 8009478:	d108      	bne.n	800948c <__mdiff+0x28>
 800947a:	4631      	mov	r1, r6
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff fdc2 	bl	8009006 <_Balloc>
 8009482:	2301      	movs	r3, #1
 8009484:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948c:	bfa4      	itt	ge
 800948e:	4623      	movge	r3, r4
 8009490:	462c      	movge	r4, r5
 8009492:	4638      	mov	r0, r7
 8009494:	6861      	ldr	r1, [r4, #4]
 8009496:	bfa6      	itte	ge
 8009498:	461d      	movge	r5, r3
 800949a:	2600      	movge	r6, #0
 800949c:	2601      	movlt	r6, #1
 800949e:	f7ff fdb2 	bl	8009006 <_Balloc>
 80094a2:	692b      	ldr	r3, [r5, #16]
 80094a4:	60c6      	str	r6, [r0, #12]
 80094a6:	6926      	ldr	r6, [r4, #16]
 80094a8:	f105 0914 	add.w	r9, r5, #20
 80094ac:	f104 0214 	add.w	r2, r4, #20
 80094b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80094b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80094b8:	f100 0514 	add.w	r5, r0, #20
 80094bc:	f04f 0e00 	mov.w	lr, #0
 80094c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80094c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80094c8:	fa1e f18a 	uxtah	r1, lr, sl
 80094cc:	b2a3      	uxth	r3, r4
 80094ce:	1ac9      	subs	r1, r1, r3
 80094d0:	0c23      	lsrs	r3, r4, #16
 80094d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80094d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094da:	b289      	uxth	r1, r1
 80094dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80094e0:	45c8      	cmp	r8, r9
 80094e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094e6:	4694      	mov	ip, r2
 80094e8:	f845 3b04 	str.w	r3, [r5], #4
 80094ec:	d8e8      	bhi.n	80094c0 <__mdiff+0x5c>
 80094ee:	45bc      	cmp	ip, r7
 80094f0:	d304      	bcc.n	80094fc <__mdiff+0x98>
 80094f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80094f6:	b183      	cbz	r3, 800951a <__mdiff+0xb6>
 80094f8:	6106      	str	r6, [r0, #16]
 80094fa:	e7c5      	b.n	8009488 <__mdiff+0x24>
 80094fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009500:	fa1e f381 	uxtah	r3, lr, r1
 8009504:	141a      	asrs	r2, r3, #16
 8009506:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800950a:	b29b      	uxth	r3, r3
 800950c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009510:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009514:	f845 3b04 	str.w	r3, [r5], #4
 8009518:	e7e9      	b.n	80094ee <__mdiff+0x8a>
 800951a:	3e01      	subs	r6, #1
 800951c:	e7e9      	b.n	80094f2 <__mdiff+0x8e>

0800951e <__d2b>:
 800951e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009522:	460e      	mov	r6, r1
 8009524:	2101      	movs	r1, #1
 8009526:	ec59 8b10 	vmov	r8, r9, d0
 800952a:	4615      	mov	r5, r2
 800952c:	f7ff fd6b 	bl	8009006 <_Balloc>
 8009530:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009534:	4607      	mov	r7, r0
 8009536:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800953a:	bb34      	cbnz	r4, 800958a <__d2b+0x6c>
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	f1b8 0300 	subs.w	r3, r8, #0
 8009542:	d027      	beq.n	8009594 <__d2b+0x76>
 8009544:	a802      	add	r0, sp, #8
 8009546:	f840 3d08 	str.w	r3, [r0, #-8]!
 800954a:	f7ff fe01 	bl	8009150 <__lo0bits>
 800954e:	9900      	ldr	r1, [sp, #0]
 8009550:	b1f0      	cbz	r0, 8009590 <__d2b+0x72>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	f1c0 0320 	rsb	r3, r0, #32
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	430b      	orrs	r3, r1
 800955e:	40c2      	lsrs	r2, r0
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	9201      	str	r2, [sp, #4]
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf14      	ite	ne
 800956c:	2102      	movne	r1, #2
 800956e:	2101      	moveq	r1, #1
 8009570:	6139      	str	r1, [r7, #16]
 8009572:	b1c4      	cbz	r4, 80095a6 <__d2b+0x88>
 8009574:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009578:	4404      	add	r4, r0
 800957a:	6034      	str	r4, [r6, #0]
 800957c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009580:	6028      	str	r0, [r5, #0]
 8009582:	4638      	mov	r0, r7
 8009584:	b003      	add	sp, #12
 8009586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800958a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800958e:	e7d5      	b.n	800953c <__d2b+0x1e>
 8009590:	6179      	str	r1, [r7, #20]
 8009592:	e7e7      	b.n	8009564 <__d2b+0x46>
 8009594:	a801      	add	r0, sp, #4
 8009596:	f7ff fddb 	bl	8009150 <__lo0bits>
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	2101      	movs	r1, #1
 80095a0:	6139      	str	r1, [r7, #16]
 80095a2:	3020      	adds	r0, #32
 80095a4:	e7e5      	b.n	8009572 <__d2b+0x54>
 80095a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80095aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095ae:	6030      	str	r0, [r6, #0]
 80095b0:	6918      	ldr	r0, [r3, #16]
 80095b2:	f7ff fdae 	bl	8009112 <__hi0bits>
 80095b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80095ba:	e7e1      	b.n	8009580 <__d2b+0x62>

080095bc <_calloc_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	fb02 f401 	mul.w	r4, r2, r1
 80095c2:	4621      	mov	r1, r4
 80095c4:	f000 f856 	bl	8009674 <_malloc_r>
 80095c8:	4605      	mov	r5, r0
 80095ca:	b118      	cbz	r0, 80095d4 <_calloc_r+0x18>
 80095cc:	4622      	mov	r2, r4
 80095ce:	2100      	movs	r1, #0
 80095d0:	f7fd ff20 	bl	8007414 <memset>
 80095d4:	4628      	mov	r0, r5
 80095d6:	bd38      	pop	{r3, r4, r5, pc}

080095d8 <_free_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4605      	mov	r5, r0
 80095dc:	2900      	cmp	r1, #0
 80095de:	d045      	beq.n	800966c <_free_r+0x94>
 80095e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095e4:	1f0c      	subs	r4, r1, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bfb8      	it	lt
 80095ea:	18e4      	addlt	r4, r4, r3
 80095ec:	f000 face 	bl	8009b8c <__malloc_lock>
 80095f0:	4a1f      	ldr	r2, [pc, #124]	; (8009670 <_free_r+0x98>)
 80095f2:	6813      	ldr	r3, [r2, #0]
 80095f4:	4610      	mov	r0, r2
 80095f6:	b933      	cbnz	r3, 8009606 <_free_r+0x2e>
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	6014      	str	r4, [r2, #0]
 80095fc:	4628      	mov	r0, r5
 80095fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009602:	f000 bac4 	b.w	8009b8e <__malloc_unlock>
 8009606:	42a3      	cmp	r3, r4
 8009608:	d90c      	bls.n	8009624 <_free_r+0x4c>
 800960a:	6821      	ldr	r1, [r4, #0]
 800960c:	1862      	adds	r2, r4, r1
 800960e:	4293      	cmp	r3, r2
 8009610:	bf04      	itt	eq
 8009612:	681a      	ldreq	r2, [r3, #0]
 8009614:	685b      	ldreq	r3, [r3, #4]
 8009616:	6063      	str	r3, [r4, #4]
 8009618:	bf04      	itt	eq
 800961a:	1852      	addeq	r2, r2, r1
 800961c:	6022      	streq	r2, [r4, #0]
 800961e:	6004      	str	r4, [r0, #0]
 8009620:	e7ec      	b.n	80095fc <_free_r+0x24>
 8009622:	4613      	mov	r3, r2
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	b10a      	cbz	r2, 800962c <_free_r+0x54>
 8009628:	42a2      	cmp	r2, r4
 800962a:	d9fa      	bls.n	8009622 <_free_r+0x4a>
 800962c:	6819      	ldr	r1, [r3, #0]
 800962e:	1858      	adds	r0, r3, r1
 8009630:	42a0      	cmp	r0, r4
 8009632:	d10b      	bne.n	800964c <_free_r+0x74>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	4401      	add	r1, r0
 8009638:	1858      	adds	r0, r3, r1
 800963a:	4282      	cmp	r2, r0
 800963c:	6019      	str	r1, [r3, #0]
 800963e:	d1dd      	bne.n	80095fc <_free_r+0x24>
 8009640:	6810      	ldr	r0, [r2, #0]
 8009642:	6852      	ldr	r2, [r2, #4]
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	4401      	add	r1, r0
 8009648:	6019      	str	r1, [r3, #0]
 800964a:	e7d7      	b.n	80095fc <_free_r+0x24>
 800964c:	d902      	bls.n	8009654 <_free_r+0x7c>
 800964e:	230c      	movs	r3, #12
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	e7d3      	b.n	80095fc <_free_r+0x24>
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	1821      	adds	r1, r4, r0
 8009658:	428a      	cmp	r2, r1
 800965a:	bf04      	itt	eq
 800965c:	6811      	ldreq	r1, [r2, #0]
 800965e:	6852      	ldreq	r2, [r2, #4]
 8009660:	6062      	str	r2, [r4, #4]
 8009662:	bf04      	itt	eq
 8009664:	1809      	addeq	r1, r1, r0
 8009666:	6021      	streq	r1, [r4, #0]
 8009668:	605c      	str	r4, [r3, #4]
 800966a:	e7c7      	b.n	80095fc <_free_r+0x24>
 800966c:	bd38      	pop	{r3, r4, r5, pc}
 800966e:	bf00      	nop
 8009670:	20000200 	.word	0x20000200

08009674 <_malloc_r>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	1ccd      	adds	r5, r1, #3
 8009678:	f025 0503 	bic.w	r5, r5, #3
 800967c:	3508      	adds	r5, #8
 800967e:	2d0c      	cmp	r5, #12
 8009680:	bf38      	it	cc
 8009682:	250c      	movcc	r5, #12
 8009684:	2d00      	cmp	r5, #0
 8009686:	4606      	mov	r6, r0
 8009688:	db01      	blt.n	800968e <_malloc_r+0x1a>
 800968a:	42a9      	cmp	r1, r5
 800968c:	d903      	bls.n	8009696 <_malloc_r+0x22>
 800968e:	230c      	movs	r3, #12
 8009690:	6033      	str	r3, [r6, #0]
 8009692:	2000      	movs	r0, #0
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	f000 fa79 	bl	8009b8c <__malloc_lock>
 800969a:	4a21      	ldr	r2, [pc, #132]	; (8009720 <_malloc_r+0xac>)
 800969c:	6814      	ldr	r4, [r2, #0]
 800969e:	4621      	mov	r1, r4
 80096a0:	b991      	cbnz	r1, 80096c8 <_malloc_r+0x54>
 80096a2:	4c20      	ldr	r4, [pc, #128]	; (8009724 <_malloc_r+0xb0>)
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	b91b      	cbnz	r3, 80096b0 <_malloc_r+0x3c>
 80096a8:	4630      	mov	r0, r6
 80096aa:	f000 f9b3 	bl	8009a14 <_sbrk_r>
 80096ae:	6020      	str	r0, [r4, #0]
 80096b0:	4629      	mov	r1, r5
 80096b2:	4630      	mov	r0, r6
 80096b4:	f000 f9ae 	bl	8009a14 <_sbrk_r>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d124      	bne.n	8009706 <_malloc_r+0x92>
 80096bc:	230c      	movs	r3, #12
 80096be:	6033      	str	r3, [r6, #0]
 80096c0:	4630      	mov	r0, r6
 80096c2:	f000 fa64 	bl	8009b8e <__malloc_unlock>
 80096c6:	e7e4      	b.n	8009692 <_malloc_r+0x1e>
 80096c8:	680b      	ldr	r3, [r1, #0]
 80096ca:	1b5b      	subs	r3, r3, r5
 80096cc:	d418      	bmi.n	8009700 <_malloc_r+0x8c>
 80096ce:	2b0b      	cmp	r3, #11
 80096d0:	d90f      	bls.n	80096f2 <_malloc_r+0x7e>
 80096d2:	600b      	str	r3, [r1, #0]
 80096d4:	50cd      	str	r5, [r1, r3]
 80096d6:	18cc      	adds	r4, r1, r3
 80096d8:	4630      	mov	r0, r6
 80096da:	f000 fa58 	bl	8009b8e <__malloc_unlock>
 80096de:	f104 000b 	add.w	r0, r4, #11
 80096e2:	1d23      	adds	r3, r4, #4
 80096e4:	f020 0007 	bic.w	r0, r0, #7
 80096e8:	1ac3      	subs	r3, r0, r3
 80096ea:	d0d3      	beq.n	8009694 <_malloc_r+0x20>
 80096ec:	425a      	negs	r2, r3
 80096ee:	50e2      	str	r2, [r4, r3]
 80096f0:	e7d0      	b.n	8009694 <_malloc_r+0x20>
 80096f2:	428c      	cmp	r4, r1
 80096f4:	684b      	ldr	r3, [r1, #4]
 80096f6:	bf16      	itet	ne
 80096f8:	6063      	strne	r3, [r4, #4]
 80096fa:	6013      	streq	r3, [r2, #0]
 80096fc:	460c      	movne	r4, r1
 80096fe:	e7eb      	b.n	80096d8 <_malloc_r+0x64>
 8009700:	460c      	mov	r4, r1
 8009702:	6849      	ldr	r1, [r1, #4]
 8009704:	e7cc      	b.n	80096a0 <_malloc_r+0x2c>
 8009706:	1cc4      	adds	r4, r0, #3
 8009708:	f024 0403 	bic.w	r4, r4, #3
 800970c:	42a0      	cmp	r0, r4
 800970e:	d005      	beq.n	800971c <_malloc_r+0xa8>
 8009710:	1a21      	subs	r1, r4, r0
 8009712:	4630      	mov	r0, r6
 8009714:	f000 f97e 	bl	8009a14 <_sbrk_r>
 8009718:	3001      	adds	r0, #1
 800971a:	d0cf      	beq.n	80096bc <_malloc_r+0x48>
 800971c:	6025      	str	r5, [r4, #0]
 800971e:	e7db      	b.n	80096d8 <_malloc_r+0x64>
 8009720:	20000200 	.word	0x20000200
 8009724:	20000204 	.word	0x20000204

08009728 <__sfputc_r>:
 8009728:	6893      	ldr	r3, [r2, #8]
 800972a:	3b01      	subs	r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	b410      	push	{r4}
 8009730:	6093      	str	r3, [r2, #8]
 8009732:	da08      	bge.n	8009746 <__sfputc_r+0x1e>
 8009734:	6994      	ldr	r4, [r2, #24]
 8009736:	42a3      	cmp	r3, r4
 8009738:	db01      	blt.n	800973e <__sfputc_r+0x16>
 800973a:	290a      	cmp	r1, #10
 800973c:	d103      	bne.n	8009746 <__sfputc_r+0x1e>
 800973e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009742:	f7fe bb5b 	b.w	8007dfc <__swbuf_r>
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	1c58      	adds	r0, r3, #1
 800974a:	6010      	str	r0, [r2, #0]
 800974c:	7019      	strb	r1, [r3, #0]
 800974e:	4608      	mov	r0, r1
 8009750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009754:	4770      	bx	lr

08009756 <__sfputs_r>:
 8009756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009758:	4606      	mov	r6, r0
 800975a:	460f      	mov	r7, r1
 800975c:	4614      	mov	r4, r2
 800975e:	18d5      	adds	r5, r2, r3
 8009760:	42ac      	cmp	r4, r5
 8009762:	d101      	bne.n	8009768 <__sfputs_r+0x12>
 8009764:	2000      	movs	r0, #0
 8009766:	e007      	b.n	8009778 <__sfputs_r+0x22>
 8009768:	463a      	mov	r2, r7
 800976a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ffda 	bl	8009728 <__sfputc_r>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d1f3      	bne.n	8009760 <__sfputs_r+0xa>
 8009778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800977c <_vfiprintf_r>:
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	460c      	mov	r4, r1
 8009782:	b09d      	sub	sp, #116	; 0x74
 8009784:	4617      	mov	r7, r2
 8009786:	461d      	mov	r5, r3
 8009788:	4606      	mov	r6, r0
 800978a:	b118      	cbz	r0, 8009794 <_vfiprintf_r+0x18>
 800978c:	6983      	ldr	r3, [r0, #24]
 800978e:	b90b      	cbnz	r3, 8009794 <_vfiprintf_r+0x18>
 8009790:	f7ff fb2a 	bl	8008de8 <__sinit>
 8009794:	4b7c      	ldr	r3, [pc, #496]	; (8009988 <_vfiprintf_r+0x20c>)
 8009796:	429c      	cmp	r4, r3
 8009798:	d158      	bne.n	800984c <_vfiprintf_r+0xd0>
 800979a:	6874      	ldr	r4, [r6, #4]
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	0718      	lsls	r0, r3, #28
 80097a0:	d55e      	bpl.n	8009860 <_vfiprintf_r+0xe4>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d05b      	beq.n	8009860 <_vfiprintf_r+0xe4>
 80097a8:	2300      	movs	r3, #0
 80097aa:	9309      	str	r3, [sp, #36]	; 0x24
 80097ac:	2320      	movs	r3, #32
 80097ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b2:	2330      	movs	r3, #48	; 0x30
 80097b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b8:	9503      	str	r5, [sp, #12]
 80097ba:	f04f 0b01 	mov.w	fp, #1
 80097be:	46b8      	mov	r8, r7
 80097c0:	4645      	mov	r5, r8
 80097c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097c6:	b10b      	cbz	r3, 80097cc <_vfiprintf_r+0x50>
 80097c8:	2b25      	cmp	r3, #37	; 0x25
 80097ca:	d154      	bne.n	8009876 <_vfiprintf_r+0xfa>
 80097cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80097d0:	d00b      	beq.n	80097ea <_vfiprintf_r+0x6e>
 80097d2:	4653      	mov	r3, sl
 80097d4:	463a      	mov	r2, r7
 80097d6:	4621      	mov	r1, r4
 80097d8:	4630      	mov	r0, r6
 80097da:	f7ff ffbc 	bl	8009756 <__sfputs_r>
 80097de:	3001      	adds	r0, #1
 80097e0:	f000 80c2 	beq.w	8009968 <_vfiprintf_r+0x1ec>
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	4453      	add	r3, sl
 80097e8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ea:	f898 3000 	ldrb.w	r3, [r8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 80ba 	beq.w	8009968 <_vfiprintf_r+0x1ec>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009806:	931a      	str	r3, [sp, #104]	; 0x68
 8009808:	46a8      	mov	r8, r5
 800980a:	2205      	movs	r2, #5
 800980c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009810:	485e      	ldr	r0, [pc, #376]	; (800998c <_vfiprintf_r+0x210>)
 8009812:	f7f6 fcf5 	bl	8000200 <memchr>
 8009816:	9b04      	ldr	r3, [sp, #16]
 8009818:	bb78      	cbnz	r0, 800987a <_vfiprintf_r+0xfe>
 800981a:	06d9      	lsls	r1, r3, #27
 800981c:	bf44      	itt	mi
 800981e:	2220      	movmi	r2, #32
 8009820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009824:	071a      	lsls	r2, r3, #28
 8009826:	bf44      	itt	mi
 8009828:	222b      	movmi	r2, #43	; 0x2b
 800982a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800982e:	782a      	ldrb	r2, [r5, #0]
 8009830:	2a2a      	cmp	r2, #42	; 0x2a
 8009832:	d02a      	beq.n	800988a <_vfiprintf_r+0x10e>
 8009834:	9a07      	ldr	r2, [sp, #28]
 8009836:	46a8      	mov	r8, r5
 8009838:	2000      	movs	r0, #0
 800983a:	250a      	movs	r5, #10
 800983c:	4641      	mov	r1, r8
 800983e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009842:	3b30      	subs	r3, #48	; 0x30
 8009844:	2b09      	cmp	r3, #9
 8009846:	d969      	bls.n	800991c <_vfiprintf_r+0x1a0>
 8009848:	b360      	cbz	r0, 80098a4 <_vfiprintf_r+0x128>
 800984a:	e024      	b.n	8009896 <_vfiprintf_r+0x11a>
 800984c:	4b50      	ldr	r3, [pc, #320]	; (8009990 <_vfiprintf_r+0x214>)
 800984e:	429c      	cmp	r4, r3
 8009850:	d101      	bne.n	8009856 <_vfiprintf_r+0xda>
 8009852:	68b4      	ldr	r4, [r6, #8]
 8009854:	e7a2      	b.n	800979c <_vfiprintf_r+0x20>
 8009856:	4b4f      	ldr	r3, [pc, #316]	; (8009994 <_vfiprintf_r+0x218>)
 8009858:	429c      	cmp	r4, r3
 800985a:	bf08      	it	eq
 800985c:	68f4      	ldreq	r4, [r6, #12]
 800985e:	e79d      	b.n	800979c <_vfiprintf_r+0x20>
 8009860:	4621      	mov	r1, r4
 8009862:	4630      	mov	r0, r6
 8009864:	f7fe fb1c 	bl	8007ea0 <__swsetup_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	d09d      	beq.n	80097a8 <_vfiprintf_r+0x2c>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b01d      	add	sp, #116	; 0x74
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	46a8      	mov	r8, r5
 8009878:	e7a2      	b.n	80097c0 <_vfiprintf_r+0x44>
 800987a:	4a44      	ldr	r2, [pc, #272]	; (800998c <_vfiprintf_r+0x210>)
 800987c:	1a80      	subs	r0, r0, r2
 800987e:	fa0b f000 	lsl.w	r0, fp, r0
 8009882:	4318      	orrs	r0, r3
 8009884:	9004      	str	r0, [sp, #16]
 8009886:	4645      	mov	r5, r8
 8009888:	e7be      	b.n	8009808 <_vfiprintf_r+0x8c>
 800988a:	9a03      	ldr	r2, [sp, #12]
 800988c:	1d11      	adds	r1, r2, #4
 800988e:	6812      	ldr	r2, [r2, #0]
 8009890:	9103      	str	r1, [sp, #12]
 8009892:	2a00      	cmp	r2, #0
 8009894:	db01      	blt.n	800989a <_vfiprintf_r+0x11e>
 8009896:	9207      	str	r2, [sp, #28]
 8009898:	e004      	b.n	80098a4 <_vfiprintf_r+0x128>
 800989a:	4252      	negs	r2, r2
 800989c:	f043 0302 	orr.w	r3, r3, #2
 80098a0:	9207      	str	r2, [sp, #28]
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	f898 3000 	ldrb.w	r3, [r8]
 80098a8:	2b2e      	cmp	r3, #46	; 0x2e
 80098aa:	d10e      	bne.n	80098ca <_vfiprintf_r+0x14e>
 80098ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80098b0:	2b2a      	cmp	r3, #42	; 0x2a
 80098b2:	d138      	bne.n	8009926 <_vfiprintf_r+0x1aa>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	1d1a      	adds	r2, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	9203      	str	r2, [sp, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfb8      	it	lt
 80098c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098c4:	f108 0802 	add.w	r8, r8, #2
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	4d33      	ldr	r5, [pc, #204]	; (8009998 <_vfiprintf_r+0x21c>)
 80098cc:	f898 1000 	ldrb.w	r1, [r8]
 80098d0:	2203      	movs	r2, #3
 80098d2:	4628      	mov	r0, r5
 80098d4:	f7f6 fc94 	bl	8000200 <memchr>
 80098d8:	b140      	cbz	r0, 80098ec <_vfiprintf_r+0x170>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	1b40      	subs	r0, r0, r5
 80098de:	fa03 f000 	lsl.w	r0, r3, r0
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	4303      	orrs	r3, r0
 80098e6:	f108 0801 	add.w	r8, r8, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f898 1000 	ldrb.w	r1, [r8]
 80098f0:	482a      	ldr	r0, [pc, #168]	; (800999c <_vfiprintf_r+0x220>)
 80098f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098f6:	2206      	movs	r2, #6
 80098f8:	f108 0701 	add.w	r7, r8, #1
 80098fc:	f7f6 fc80 	bl	8000200 <memchr>
 8009900:	2800      	cmp	r0, #0
 8009902:	d037      	beq.n	8009974 <_vfiprintf_r+0x1f8>
 8009904:	4b26      	ldr	r3, [pc, #152]	; (80099a0 <_vfiprintf_r+0x224>)
 8009906:	bb1b      	cbnz	r3, 8009950 <_vfiprintf_r+0x1d4>
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	3307      	adds	r3, #7
 800990c:	f023 0307 	bic.w	r3, r3, #7
 8009910:	3308      	adds	r3, #8
 8009912:	9303      	str	r3, [sp, #12]
 8009914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009916:	444b      	add	r3, r9
 8009918:	9309      	str	r3, [sp, #36]	; 0x24
 800991a:	e750      	b.n	80097be <_vfiprintf_r+0x42>
 800991c:	fb05 3202 	mla	r2, r5, r2, r3
 8009920:	2001      	movs	r0, #1
 8009922:	4688      	mov	r8, r1
 8009924:	e78a      	b.n	800983c <_vfiprintf_r+0xc0>
 8009926:	2300      	movs	r3, #0
 8009928:	f108 0801 	add.w	r8, r8, #1
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	4619      	mov	r1, r3
 8009930:	250a      	movs	r5, #10
 8009932:	4640      	mov	r0, r8
 8009934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009938:	3a30      	subs	r2, #48	; 0x30
 800993a:	2a09      	cmp	r2, #9
 800993c:	d903      	bls.n	8009946 <_vfiprintf_r+0x1ca>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0c3      	beq.n	80098ca <_vfiprintf_r+0x14e>
 8009942:	9105      	str	r1, [sp, #20]
 8009944:	e7c1      	b.n	80098ca <_vfiprintf_r+0x14e>
 8009946:	fb05 2101 	mla	r1, r5, r1, r2
 800994a:	2301      	movs	r3, #1
 800994c:	4680      	mov	r8, r0
 800994e:	e7f0      	b.n	8009932 <_vfiprintf_r+0x1b6>
 8009950:	ab03      	add	r3, sp, #12
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4622      	mov	r2, r4
 8009956:	4b13      	ldr	r3, [pc, #76]	; (80099a4 <_vfiprintf_r+0x228>)
 8009958:	a904      	add	r1, sp, #16
 800995a:	4630      	mov	r0, r6
 800995c:	f7fd fdf6 	bl	800754c <_printf_float>
 8009960:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009964:	4681      	mov	r9, r0
 8009966:	d1d5      	bne.n	8009914 <_vfiprintf_r+0x198>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	065b      	lsls	r3, r3, #25
 800996c:	f53f af7e 	bmi.w	800986c <_vfiprintf_r+0xf0>
 8009970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009972:	e77d      	b.n	8009870 <_vfiprintf_r+0xf4>
 8009974:	ab03      	add	r3, sp, #12
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4622      	mov	r2, r4
 800997a:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <_vfiprintf_r+0x228>)
 800997c:	a904      	add	r1, sp, #16
 800997e:	4630      	mov	r0, r6
 8009980:	f7fe f89a 	bl	8007ab8 <_printf_i>
 8009984:	e7ec      	b.n	8009960 <_vfiprintf_r+0x1e4>
 8009986:	bf00      	nop
 8009988:	0800a044 	.word	0x0800a044
 800998c:	0800a184 	.word	0x0800a184
 8009990:	0800a064 	.word	0x0800a064
 8009994:	0800a024 	.word	0x0800a024
 8009998:	0800a18a 	.word	0x0800a18a
 800999c:	0800a18e 	.word	0x0800a18e
 80099a0:	0800754d 	.word	0x0800754d
 80099a4:	08009757 	.word	0x08009757

080099a8 <_putc_r>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	460d      	mov	r5, r1
 80099ac:	4614      	mov	r4, r2
 80099ae:	4606      	mov	r6, r0
 80099b0:	b118      	cbz	r0, 80099ba <_putc_r+0x12>
 80099b2:	6983      	ldr	r3, [r0, #24]
 80099b4:	b90b      	cbnz	r3, 80099ba <_putc_r+0x12>
 80099b6:	f7ff fa17 	bl	8008de8 <__sinit>
 80099ba:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <_putc_r+0x60>)
 80099bc:	429c      	cmp	r4, r3
 80099be:	d112      	bne.n	80099e6 <_putc_r+0x3e>
 80099c0:	6874      	ldr	r4, [r6, #4]
 80099c2:	68a3      	ldr	r3, [r4, #8]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	da16      	bge.n	80099fa <_putc_r+0x52>
 80099cc:	69a2      	ldr	r2, [r4, #24]
 80099ce:	4293      	cmp	r3, r2
 80099d0:	db02      	blt.n	80099d8 <_putc_r+0x30>
 80099d2:	b2eb      	uxtb	r3, r5
 80099d4:	2b0a      	cmp	r3, #10
 80099d6:	d110      	bne.n	80099fa <_putc_r+0x52>
 80099d8:	4622      	mov	r2, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	4630      	mov	r0, r6
 80099de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099e2:	f7fe ba0b 	b.w	8007dfc <__swbuf_r>
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <_putc_r+0x64>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	d101      	bne.n	80099f0 <_putc_r+0x48>
 80099ec:	68b4      	ldr	r4, [r6, #8]
 80099ee:	e7e8      	b.n	80099c2 <_putc_r+0x1a>
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <_putc_r+0x68>)
 80099f2:	429c      	cmp	r4, r3
 80099f4:	bf08      	it	eq
 80099f6:	68f4      	ldreq	r4, [r6, #12]
 80099f8:	e7e3      	b.n	80099c2 <_putc_r+0x1a>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	6022      	str	r2, [r4, #0]
 8009a00:	701d      	strb	r5, [r3, #0]
 8009a02:	b2e8      	uxtb	r0, r5
 8009a04:	bd70      	pop	{r4, r5, r6, pc}
 8009a06:	bf00      	nop
 8009a08:	0800a044 	.word	0x0800a044
 8009a0c:	0800a064 	.word	0x0800a064
 8009a10:	0800a024 	.word	0x0800a024

08009a14 <_sbrk_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4c06      	ldr	r4, [pc, #24]	; (8009a30 <_sbrk_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	f7f8 fa88 	bl	8001f34 <_sbrk>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_sbrk_r+0x1a>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_sbrk_r+0x1a>
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	200003d8 	.word	0x200003d8

08009a34 <__sread>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	460c      	mov	r4, r1
 8009a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3c:	f000 f8a8 	bl	8009b90 <_read_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	bfab      	itete	ge
 8009a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a46:	89a3      	ldrhlt	r3, [r4, #12]
 8009a48:	181b      	addge	r3, r3, r0
 8009a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a4e:	bfac      	ite	ge
 8009a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a52:	81a3      	strhlt	r3, [r4, #12]
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <__swrite>:
 8009a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5a:	461f      	mov	r7, r3
 8009a5c:	898b      	ldrh	r3, [r1, #12]
 8009a5e:	05db      	lsls	r3, r3, #23
 8009a60:	4605      	mov	r5, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4616      	mov	r6, r2
 8009a66:	d505      	bpl.n	8009a74 <__swrite+0x1e>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a70:	f000 f868 	bl	8009b44 <_lseek_r>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	4628      	mov	r0, r5
 8009a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8a:	f000 b817 	b.w	8009abc <_write_r>

08009a8e <__sseek>:
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a96:	f000 f855 	bl	8009b44 <_lseek_r>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	bf15      	itete	ne
 8009aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aaa:	81a3      	strheq	r3, [r4, #12]
 8009aac:	bf18      	it	ne
 8009aae:	81a3      	strhne	r3, [r4, #12]
 8009ab0:	bd10      	pop	{r4, pc}

08009ab2 <__sclose>:
 8009ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab6:	f000 b813 	b.w	8009ae0 <_close_r>
	...

08009abc <_write_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4c07      	ldr	r4, [pc, #28]	; (8009adc <_write_r+0x20>)
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f7f7 f8f3 	bl	8000cb6 <_write>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_write_r+0x1e>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_write_r+0x1e>
 8009ad8:	602b      	str	r3, [r5, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	200003d8 	.word	0x200003d8

08009ae0 <_close_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4c06      	ldr	r4, [pc, #24]	; (8009afc <_close_r+0x1c>)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	f7f8 f9ed 	bl	8001eca <_close>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_close_r+0x1a>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_close_r+0x1a>
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	200003d8 	.word	0x200003d8

08009b00 <_fstat_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4c07      	ldr	r4, [pc, #28]	; (8009b20 <_fstat_r+0x20>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4605      	mov	r5, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	f7f8 f9e8 	bl	8001ee2 <_fstat>
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	d102      	bne.n	8009b1c <_fstat_r+0x1c>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	b103      	cbz	r3, 8009b1c <_fstat_r+0x1c>
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	bf00      	nop
 8009b20:	200003d8 	.word	0x200003d8

08009b24 <_isatty_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4c06      	ldr	r4, [pc, #24]	; (8009b40 <_isatty_r+0x1c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	f7f8 f9e7 	bl	8001f02 <_isatty>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_isatty_r+0x1a>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_isatty_r+0x1a>
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	200003d8 	.word	0x200003d8

08009b44 <_lseek_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4c07      	ldr	r4, [pc, #28]	; (8009b64 <_lseek_r+0x20>)
 8009b48:	4605      	mov	r5, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6022      	str	r2, [r4, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f8 f9e0 	bl	8001f18 <_lseek>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_lseek_r+0x1e>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_lseek_r+0x1e>
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	200003d8 	.word	0x200003d8

08009b68 <__ascii_mbtowc>:
 8009b68:	b082      	sub	sp, #8
 8009b6a:	b901      	cbnz	r1, 8009b6e <__ascii_mbtowc+0x6>
 8009b6c:	a901      	add	r1, sp, #4
 8009b6e:	b142      	cbz	r2, 8009b82 <__ascii_mbtowc+0x1a>
 8009b70:	b14b      	cbz	r3, 8009b86 <__ascii_mbtowc+0x1e>
 8009b72:	7813      	ldrb	r3, [r2, #0]
 8009b74:	600b      	str	r3, [r1, #0]
 8009b76:	7812      	ldrb	r2, [r2, #0]
 8009b78:	1c10      	adds	r0, r2, #0
 8009b7a:	bf18      	it	ne
 8009b7c:	2001      	movne	r0, #1
 8009b7e:	b002      	add	sp, #8
 8009b80:	4770      	bx	lr
 8009b82:	4610      	mov	r0, r2
 8009b84:	e7fb      	b.n	8009b7e <__ascii_mbtowc+0x16>
 8009b86:	f06f 0001 	mvn.w	r0, #1
 8009b8a:	e7f8      	b.n	8009b7e <__ascii_mbtowc+0x16>

08009b8c <__malloc_lock>:
 8009b8c:	4770      	bx	lr

08009b8e <__malloc_unlock>:
 8009b8e:	4770      	bx	lr

08009b90 <_read_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4c07      	ldr	r4, [pc, #28]	; (8009bb0 <_read_r+0x20>)
 8009b94:	4605      	mov	r5, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	6022      	str	r2, [r4, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f8 f976 	bl	8001e90 <_read>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_read_r+0x1e>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_read_r+0x1e>
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	200003d8 	.word	0x200003d8

08009bb4 <__ascii_wctomb>:
 8009bb4:	b149      	cbz	r1, 8009bca <__ascii_wctomb+0x16>
 8009bb6:	2aff      	cmp	r2, #255	; 0xff
 8009bb8:	bf85      	ittet	hi
 8009bba:	238a      	movhi	r3, #138	; 0x8a
 8009bbc:	6003      	strhi	r3, [r0, #0]
 8009bbe:	700a      	strbls	r2, [r1, #0]
 8009bc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bc4:	bf98      	it	ls
 8009bc6:	2001      	movls	r0, #1
 8009bc8:	4770      	bx	lr
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4770      	bx	lr
	...

08009bd0 <_init>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr

08009bdc <_fini>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr
