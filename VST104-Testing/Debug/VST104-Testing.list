
VST104-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d244  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800d3f8  0800d3f8  0001d3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd2c  0800dd2c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd2c  0800dd2c  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd34  0800dd34  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd34  0800dd34  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd38  0800dd38  0001dd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800dd3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e8  0800df24  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800df24  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e99  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2c  00000000  00000000  000410b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00044be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  000462f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000136fa  00000000  00000000  00047898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007088  00000000  00000000  0005af92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006201a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000782c  00000000  00000000  00062070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d3dc 	.word	0x0800d3dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800d3dc 	.word	0x0800d3dc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001034:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001038:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d013      	beq.n	800106c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001044:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001048:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800104c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001054:	e000      	b.n	8001058 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001056:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001058:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f9      	beq.n	8001056 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001062:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_write>:
static void MX_USART3_UART_Init(void);
static void MX_I2C4_Init(void);
/* USER CODE BEGIN PFP */

// SWD printf() replacement
int _write(int file, char *ptr, int len) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e009      	b.n	80010a0 <_write+0x26>
		ITM_SendChar((*ptr++));
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffc9 	bl	800102c <ITM_SendChar>
	for(int i=0; i<len; i++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf1      	blt.n	800108c <_write+0x12>
	return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f001 f99c 	bl	80023f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 f8bd 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 fc4d 	bl	8001960 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010c6:	f000 f979 	bl	80013bc <MX_ADC1_Init>
  MX_CAN1_Init();
 80010ca:	f000 fa53 	bl	8001574 <MX_CAN1_Init>
  MX_CAN2_Init();
 80010ce:	f000 fa87 	bl	80015e0 <MX_CAN2_Init>
  MX_I2C2_Init();
 80010d2:	f000 fabb 	bl	800164c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80010d6:	f000 fb79 	bl	80017cc <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80010da:	f000 fba3 	bl	8001824 <MX_SPI1_Init>
  MX_ADC2_Init();
 80010de:	f000 f9e5 	bl	80014ac <MX_ADC2_Init>
  MX_I2C3_Init();
 80010e2:	f000 faf3 	bl	80016cc <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80010e6:	f000 fbdb 	bl	80018a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010ea:	f000 fc09 	bl	8001900 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 80010ee:	f000 fb2d 	bl	800174c <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

	//test SDW printf()
  	HAL_Delay(1500);
 80010f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f6:	f001 f9f3 	bl	80024e0 <HAL_Delay>
	printf("\nProgramm initialized\n\n");
 80010fa:	4848      	ldr	r0, [pc, #288]	; (800121c <main+0x168>)
 80010fc:	f008 fbbc 	bl	8009878 <puts>

	// assign UART pointers
	log_assignHuart(&huart2, &huart3);
 8001100:	4947      	ldr	r1, [pc, #284]	; (8001220 <main+0x16c>)
 8001102:	4848      	ldr	r0, [pc, #288]	; (8001224 <main+0x170>)
 8001104:	f007 fb62 	bl	80087cc <log_assignHuart>

	// open log isolators
	log_enable();
 8001108:	f007 fb76 	bl	80087f8 <log_enable>

	// MCP reset power
	mcp9804_powerReset();
 800110c:	f006 fbe4 	bl	80078d8 <mcp9804_powerReset>

	// MCP configure
	for(int i=0; i<7; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e006      	b.n	8001124 <main+0x70>
		mcp9804_configure(&hi2c2, i);
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	4843      	ldr	r0, [pc, #268]	; (8001228 <main+0x174>)
 800111a:	f006 fbfb 	bl	8007914 <mcp9804_configure>
	for(int i=0; i<7; i++)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b06      	cmp	r3, #6
 8001128:	ddf5      	ble.n	8001116 <main+0x62>

	// MCP read manufacturer
	for(int i=0; i<7; i++)
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	e006      	b.n	800113e <main+0x8a>
		mcp9884_readManufac(&hi2c2, i);
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	483d      	ldr	r0, [pc, #244]	; (8001228 <main+0x174>)
 8001134:	f006 fbfe 	bl	8007934 <mcp9884_readManufac>
	for(int i=0; i<7; i++)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b06      	cmp	r3, #6
 8001142:	ddf5      	ble.n	8001130 <main+0x7c>

	// MMC reset power
	mmc5883_powerReset();
 8001144:	f006 fcf2 	bl	8007b2c <mmc5883_powerReset>

	// MMC configure
	mmc5883_configure(&hi2c3, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	4838      	ldr	r0, [pc, #224]	; (800122c <main+0x178>)
 800114c:	f006 fd8c 	bl	8007c68 <mmc5883_configure>
	mmc5883_configure(&hi2c4, 1);
 8001150:	2101      	movs	r1, #1
 8001152:	4837      	ldr	r0, [pc, #220]	; (8001230 <main+0x17c>)
 8001154:	f006 fd88 	bl	8007c68 <mmc5883_configure>

	// MMC read manufacturer
	mmc5883_readManufac(&hi2c3, 0);
 8001158:	2100      	movs	r1, #0
 800115a:	4834      	ldr	r0, [pc, #208]	; (800122c <main+0x178>)
 800115c:	f006 fdb8 	bl	8007cd0 <mmc5883_readManufac>
	mmc5883_readManufac(&hi2c4, 1);
 8001160:	2101      	movs	r1, #1
 8001162:	4833      	ldr	r0, [pc, #204]	; (8001230 <main+0x17c>)
 8001164:	f006 fdb4 	bl	8007cd0 <mmc5883_readManufac>

	// LSM reset power
	lsm6ds3_powerReset();
 8001168:	f006 f8fa 	bl	8007360 <lsm6ds3_powerReset>

	// LSM configure
	lsm6ds3_configure(&hi2c4, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	4830      	ldr	r0, [pc, #192]	; (8001230 <main+0x17c>)
 8001170:	f006 f98a 	bl	8007488 <lsm6ds3_configure>

	// LSM read manufacturer
	lsm6ds3_readManufac(&hi2c4, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	482e      	ldr	r0, [pc, #184]	; (8001230 <main+0x17c>)
 8001178:	f006 f9ec 	bl	8007554 <lsm6ds3_readManufac>

	// MPU reset power
	mpu6050_powerReset();
 800117c:	f007 f83c 	bl	80081f8 <mpu6050_powerReset>

	// MPU configure
	mpu6050_configure(&hi2c3, 0);
 8001180:	2100      	movs	r1, #0
 8001182:	482a      	ldr	r0, [pc, #168]	; (800122c <main+0x178>)
 8001184:	f007 f8b6 	bl	80082f4 <mpu6050_configure>

	// MPU read manufacturer
	mpu6050_readManufac(&hi2c3, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	4828      	ldr	r0, [pc, #160]	; (800122c <main+0x178>)
 800118c:	f007 f93e 	bl	800840c <mpu6050_readManufac>

	HAL_Delay(500);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f001 f9a4 	bl	80024e0 <HAL_Delay>

	// development loop
	while(1) {

		// current consumption
		curr_readData(&hadc1, 0);
 8001198:	2100      	movs	r1, #0
 800119a:	4826      	ldr	r0, [pc, #152]	; (8001234 <main+0x180>)
 800119c:	f006 f87c 	bl	8007298 <curr_readData>
		curr_readData(&hadc2, 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	4825      	ldr	r0, [pc, #148]	; (8001238 <main+0x184>)
 80011a4:	f006 f878 	bl	8007298 <curr_readData>

		// MCP9884
		for(int i=0; i<7; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	e006      	b.n	80011bc <main+0x108>
			mcp9884_readData(&hi2c2, i);
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481d      	ldr	r0, [pc, #116]	; (8001228 <main+0x174>)
 80011b2:	f006 fc47 	bl	8007a44 <mcp9884_readData>
		for(int i=0; i<7; i++)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3301      	adds	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b06      	cmp	r3, #6
 80011c0:	ddf5      	ble.n	80011ae <main+0xfa>

		// MMC5883
		mmc5883_readTempData(&hi2c3, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	4819      	ldr	r0, [pc, #100]	; (800122c <main+0x178>)
 80011c6:	f006 ff87 	bl	80080d8 <mmc5883_readTempData>
		mmc5883_readTempData(&hi2c4, 1);
 80011ca:	2101      	movs	r1, #1
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <main+0x17c>)
 80011ce:	f006 ff83 	bl	80080d8 <mmc5883_readTempData>
		mmc5883_readMagData(&hi2c3, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	4815      	ldr	r0, [pc, #84]	; (800122c <main+0x178>)
 80011d6:	f006 fdbf 	bl	8007d58 <mmc5883_readMagData>
		mmc5883_readMagData(&hi2c4, 1);
 80011da:	2101      	movs	r1, #1
 80011dc:	4814      	ldr	r0, [pc, #80]	; (8001230 <main+0x17c>)
 80011de:	f006 fdbb 	bl	8007d58 <mmc5883_readMagData>

		// LSM6DS3
		lsm6ds3_readAccData(&hi2c4, 0);
 80011e2:	2100      	movs	r1, #0
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <main+0x17c>)
 80011e6:	f006 f9f3 	bl	80075d0 <lsm6ds3_readAccData>
		lsm6ds3_readGyroData(&hi2c4, 0);
 80011ea:	2100      	movs	r1, #0
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <main+0x17c>)
 80011ee:	f006 fa7b 	bl	80076e8 <lsm6ds3_readGyroData>
		lsm6ds3_readTempData(&hi2c4, 0);
 80011f2:	2100      	movs	r1, #0
 80011f4:	480e      	ldr	r0, [pc, #56]	; (8001230 <main+0x17c>)
 80011f6:	f006 fb03 	bl	8007800 <lsm6ds3_readTempData>

		// MPU6050
		mpu6050_readAccData(&hi2c3, 0);
 80011fa:	2100      	movs	r1, #0
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <main+0x178>)
 80011fe:	f007 f943 	bl	8008488 <mpu6050_readAccData>
		mpu6050_readGyroData(&hi2c3, 0);
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <main+0x178>)
 8001206:	f007 f9bf 	bl	8008588 <mpu6050_readGyroData>
		mpu6050_readTempData(&hi2c3, 0);
 800120a:	2100      	movs	r1, #0
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <main+0x178>)
 800120e:	f007 fa47 	bl	80086a0 <mpu6050_readTempData>

		HAL_Delay(5000);
 8001212:	f241 3088 	movw	r0, #5000	; 0x1388
 8001216:	f001 f963 	bl	80024e0 <HAL_Delay>
		curr_readData(&hadc1, 0);
 800121a:	e7bd      	b.n	8001198 <main+0xe4>
 800121c:	0800d3f8 	.word	0x0800d3f8
 8001220:	200002b4 	.word	0x200002b4
 8001224:	200004e0 	.word	0x200004e0
 8001228:	200003a0 	.word	0x200003a0
 800122c:	2000021c 	.word	0x2000021c
 8001230:	20000268 	.word	0x20000268
 8001234:	200003ec 	.word	0x200003ec
 8001238:	20000338 	.word	0x20000338

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0c0      	sub	sp, #256	; 0x100
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001246:	2244      	movs	r2, #68	; 0x44
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 fc0c 	bl	8008a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	228c      	movs	r2, #140	; 0x8c
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f007 fbfd 	bl	8008a68 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128c:	2340      	movs	r3, #64	; 0x40
 800128e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLN = 8;
 80012a4:	2308      	movs	r3, #8
 80012a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 ff37 	bl	8005134 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012cc:	f000 fc42 	bl	8001b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012f2:	2103      	movs	r1, #3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fb43 	bl	8005980 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001300:	f000 fc28 	bl	8001b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <SystemClock_Config+0x178>)
 8001306:	61fb      	str	r3, [r7, #28]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800131c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800132c:	2308      	movs	r3, #8
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800133c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4618      	mov	r0, r3
 8001348:	f004 fd20 	bl	8005d8c <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001352:	f000 fbff 	bl	8001b54 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135a:	f003 fdc3 	bl	8004ee4 <HAL_PWREx_ControlVoltageScaling>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001364:	f000 fbf6 	bl	8001b54 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <SystemClock_Config+0x17c>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <SystemClock_Config+0x17c>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <SystemClock_Config+0x17c>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800137c:	463b      	mov	r3, r7
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	463b      	mov	r3, r7
 8001382:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800138c:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001392:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001396:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001398:	2322      	movs	r3, #34	; 0x22
 800139a:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800139c:	2320      	movs	r3, #32
 800139e:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 ffee 	bl	8006384 <HAL_RCCEx_CRSConfig>
}
 80013a8:	bf00      	nop
 80013aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	00104186 	.word	0x00104186
 80013b8:	40021000 	.word	0x40021000

080013bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_ADC1_Init+0xe4>)
 80013e0:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <MX_ADC1_Init+0xe8>)
 80013e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <MX_ADC1_Init+0xe4>)
 80013e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_ADC1_Init+0xe4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_ADC1_Init+0xe4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_ADC1_Init+0xe4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001400:	2204      	movs	r2, #4
 8001402:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <MX_ADC1_Init+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001412:	2201      	movs	r2, #1
 8001414:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_ADC1_Init+0xe4>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_ADC1_Init+0xe4>)
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001442:	f001 fab5 	bl	80029b0 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800144c:	f000 fb82 	bl	8001b54 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <MX_ADC1_Init+0xe4>)
 800145c:	f002 fb86 	bl	8003b6c <HAL_ADCEx_MultiModeConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001466:	f000 fb75 	bl	8001b54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_ADC1_Init+0xec>)
 800146c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800146e:	2306      	movs	r3, #6
 8001470:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001476:	237f      	movs	r3, #127	; 0x7f
 8001478:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147a:	2304      	movs	r3, #4
 800147c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_ADC1_Init+0xe4>)
 8001488:	f001 fdc0 	bl	800300c <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001492:	f000 fb5f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200003ec 	.word	0x200003ec
 80014a4:	50040000 	.word	0x50040000
 80014a8:	10c00010 	.word	0x10c00010

080014ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014c4:	4a29      	ldr	r2, [pc, #164]	; (800156c <MX_ADC2_Init+0xc0>)
 80014c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_ADC2_Init+0xbc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_ADC2_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_ADC2_Init+0xbc>)
 800150a:	2200      	movs	r2, #0
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_ADC2_Init+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_ADC2_Init+0xbc>)
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_ADC2_Init+0xbc>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <MX_ADC2_Init+0xbc>)
 8001526:	f001 fa43 	bl	80029b0 <HAL_ADC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001530:	f000 fb10 	bl	8001b54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_ADC2_Init+0xc4>)
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001538:	2306      	movs	r3, #6
 800153a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001540:	237f      	movs	r3, #127	; 0x7f
 8001542:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001544:	2304      	movs	r3, #4
 8001546:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_ADC2_Init+0xbc>)
 8001552:	f001 fd5b 	bl	800300c <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800155c:	f000 fafa 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000338 	.word	0x20000338
 800156c:	50040100 	.word	0x50040100
 8001570:	0c900008 	.word	0x0c900008

08001574 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_CAN1_Init+0x64>)
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_CAN1_Init+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_CAN1_Init+0x64>)
 8001580:	2210      	movs	r2, #16
 8001582:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_CAN1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_CAN1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_CAN1_Init+0x64>)
 8001592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001596:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_CAN1_Init+0x64>)
 800159a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800159e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_CAN1_Init+0x64>)
 80015c6:	f002 fb81 	bl	8003ccc <HAL_CAN_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 fac0 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000564 	.word	0x20000564
 80015dc:	40006400 	.word	0x40006400

080015e0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_CAN2_Init+0x64>)
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <MX_CAN2_Init+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_CAN2_Init+0x64>)
 80015ec:	2210      	movs	r2, #16
 80015ee:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_CAN2_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_CAN2_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_CAN2_Init+0x64>)
 80015fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001602:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_CAN2_Init+0x64>)
 8001606:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800160a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <MX_CAN2_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_CAN2_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_CAN2_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_CAN2_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_CAN2_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_CAN2_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_CAN2_Init+0x64>)
 8001632:	f002 fb4b 	bl	8003ccc <HAL_CAN_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800163c:	f000 fa8a 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000454 	.word	0x20000454
 8001648:	40006800 	.word	0x40006800

0800164c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <MX_I2C2_Init+0x78>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <MX_I2C2_Init+0x7c>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C2_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001664:	2201      	movs	r2, #1
 8001666:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C2_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C2_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <MX_I2C2_Init+0x74>)
 8001688:	f002 feac 	bl	80043e4 <HAL_I2C_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001692:	f000 fa5f 	bl	8001b54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <MX_I2C2_Init+0x74>)
 800169a:	f003 fb7d 	bl	8004d98 <HAL_I2CEx_ConfigAnalogFilter>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016a4:	f000 fa56 	bl	8001b54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016a8:	2100      	movs	r1, #0
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_I2C2_Init+0x74>)
 80016ac:	f003 fbbf 	bl	8004e2e <HAL_I2CEx_ConfigDigitalFilter>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016b6:	f000 fa4d 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003a0 	.word	0x200003a0
 80016c4:	40005800 	.word	0x40005800
 80016c8:	10707dbc 	.word	0x10707dbc

080016cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_I2C3_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <MX_I2C3_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_I2C3_Init+0x74>)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <MX_I2C3_Init+0x7c>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_I2C3_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_I2C3_Init+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_I2C3_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_I2C3_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_I2C3_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_I2C3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_I2C3_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <MX_I2C3_Init+0x74>)
 8001708:	f002 fe6c 	bl	80043e4 <HAL_I2C_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001712:	f000 fa1f 	bl	8001b54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_I2C3_Init+0x74>)
 800171a:	f003 fb3d 	bl	8004d98 <HAL_I2CEx_ConfigAnalogFilter>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001724:	f000 fa16 	bl	8001b54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_I2C3_Init+0x74>)
 800172c:	f003 fb7f 	bl	8004e2e <HAL_I2CEx_ConfigDigitalFilter>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 fa0d 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000021c 	.word	0x2000021c
 8001744:	40005c00 	.word	0x40005c00
 8001748:	10707dbc 	.word	0x10707dbc

0800174c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <MX_I2C4_Init+0x78>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <MX_I2C4_Init+0x7c>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_I2C4_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001764:	2201      	movs	r2, #1
 8001766:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_I2C4_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_I2C4_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001786:	480e      	ldr	r0, [pc, #56]	; (80017c0 <MX_I2C4_Init+0x74>)
 8001788:	f002 fe2c 	bl	80043e4 <HAL_I2C_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001792:	f000 f9df 	bl	8001b54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_I2C4_Init+0x74>)
 800179a:	f003 fafd 	bl	8004d98 <HAL_I2CEx_ConfigAnalogFilter>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80017a4:	f000 f9d6 	bl	8001b54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_I2C4_Init+0x74>)
 80017ac:	f003 fb3f 	bl	8004e2e <HAL_I2CEx_ConfigDigitalFilter>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80017b6:	f000 f9cd 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000268 	.word	0x20000268
 80017c4:	40008400 	.word	0x40008400
 80017c8:	10707dbc 	.word	0x10707dbc

080017cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <MX_QUADSPI_Init+0x54>)
 80017d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017d8:	22ff      	movs	r2, #255	; 0xff
 80017da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017de:	2201      	movs	r2, #1
 80017e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017ea:	221f      	movs	r2, #31
 80017ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_QUADSPI_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_QUADSPI_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_QUADSPI_Init+0x50>)
 8001808:	f003 fbd2 	bl	8004fb0 <HAL_QSPI_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001812:	f000 f99f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000058c 	.word	0x2000058c
 8001820:	a0001000 	.word	0xa0001000

08001824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_SPI1_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <MX_SPI1_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_SPI1_Init+0x74>)
 8001830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_SPI1_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_SPI1_Init+0x74>)
 800183e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_SPI1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_SPI1_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_SPI1_Init+0x74>)
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_SPI1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_SPI1_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_SPI1_Init+0x74>)
 8001872:	2207      	movs	r2, #7
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_SPI1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_SPI1_Init+0x74>)
 800187e:	2208      	movs	r2, #8
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_SPI1_Init+0x74>)
 8001884:	f004 ff8e 	bl	80067a4 <HAL_SPI_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f961 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000047c 	.word	0x2000047c
 800189c:	40013000 	.word	0x40013000

080018a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <MX_USART2_UART_Init+0x5c>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c8:	2208      	movs	r2, #8
 80018ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018e6:	f005 f800 	bl	80068ea <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80018f0:	f000 f930 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200004e0 	.word	0x200004e0
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <MX_USART3_UART_Init+0x5c>)
 8001908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001924:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001928:	2208      	movs	r2, #8
 800192a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001946:	f004 ffd0 	bl	80068ea <HAL_UART_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8001950:	f000 f900 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200002b4 	.word	0x200002b4
 800195c:	40004800 	.word	0x40004800

08001960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a70      	ldr	r2, [pc, #448]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a64      	ldr	r2, [pc, #400]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a06:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <MX_GPIO_Init+0x1dc>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001a1e:	f003 fab7 	bl	8004f90 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2102      	movs	r1, #2
 8001a26:	4846      	ldr	r0, [pc, #280]	; (8001b40 <MX_GPIO_Init+0x1e0>)
 8001a28:	f002 fcc4 	bl	80043b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HOLD_Pin|SP1_WP_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2113      	movs	r1, #19
 8001a30:	4844      	ldr	r0, [pc, #272]	; (8001b44 <MX_GPIO_Init+0x1e4>)
 8001a32:	f002 fcbf 	bl	80043b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8001a36:	2200      	movs	r2, #0
 8001a38:	f240 611b 	movw	r1, #1563	; 0x61b
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f002 fcb8 	bl	80043b4 <HAL_GPIO_WritePin>
                          |TEST2_Pin|TEST1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4a:	483f      	ldr	r0, [pc, #252]	; (8001b48 <MX_GPIO_Init+0x1e8>)
 8001a4c:	f002 fcb2 	bl	80043b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin|I2C3_EN_Pin|I2C2_EN_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 4189 	mov.w	r1, #17536	; 0x4480
 8001a56:	483d      	ldr	r0, [pc, #244]	; (8001b4c <MX_GPIO_Init+0x1ec>)
 8001a58:	f002 fcac 	bl	80043b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_EN_GPIO_Port, UART2_EN_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2104      	movs	r1, #4
 8001a60:	483b      	ldr	r0, [pc, #236]	; (8001b50 <MX_GPIO_Init+0x1f0>)
 8001a62:	f002 fca7 	bl	80043b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4830      	ldr	r0, [pc, #192]	; (8001b40 <MX_GPIO_Init+0x1e0>)
 8001a7e:	f002 fb07 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HOLD_Pin SP1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_HOLD_Pin|SP1_WP_Pin;
 8001a82:	2303      	movs	r3, #3
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	482a      	ldr	r0, [pc, #168]	; (8001b44 <MX_GPIO_Init+0x1e4>)
 8001a9a:	f002 faf9 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin SPI1_CS3_Pin SPI1_CS2_Pin
                           TEST2_Pin TEST1_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8001a9e:	f240 631b 	movw	r3, #1563	; 0x61b
 8001aa2:	61fb      	str	r3, [r7, #28]
                          |TEST2_Pin|TEST1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aba:	f002 fae9 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481b      	ldr	r0, [pc, #108]	; (8001b44 <MX_GPIO_Init+0x1e4>)
 8001ad6:	f002 fadb 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C4_EN_Pin */
  GPIO_InitStruct.Pin = I2C4_EN_Pin;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(I2C4_EN_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <MX_GPIO_Init+0x1e8>)
 8001af4:	f002 facc 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART3_EN_Pin I2C3_EN_Pin I2C2_EN_Pin */
  GPIO_InitStruct.Pin = UART3_EN_Pin|I2C3_EN_Pin|I2C2_EN_Pin;
 8001af8:	f44f 4389 	mov.w	r3, #17536	; 0x4480
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_GPIO_Init+0x1ec>)
 8001b12:	f002 fabd 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin;
 8001b16:	2304      	movs	r3, #4
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART2_EN_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <MX_GPIO_Init+0x1f0>)
 8001b2e:	f002 faaf 	bl	8004090 <HAL_GPIO_Init>

}
 8001b32:	bf00      	nop
 8001b34:	3730      	adds	r7, #48	; 0x30
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48001c00 	.word	0x48001c00
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000c00 	.word	0x48000c00
 8001b50:	48001800 	.word	0x48001800

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6613      	str	r3, [r2, #96]	; 0x60
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <HAL_ADC_MspInit+0xec>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12d      	bne.n	8001c26 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_ADC_MspInit+0xf0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <HAL_ADC_MspInit+0xf0>)
 8001bd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_ADC_MspInit+0xf0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10b      	bne.n	8001bf4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001be2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF1_CUR_Pin;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c10:	230b      	movs	r3, #11
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF1_CUR_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4820      	ldr	r0, [pc, #128]	; (8001ca0 <HAL_ADC_MspInit+0xf8>)
 8001c20:	f002 fa36 	bl	8004090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c24:	e031      	b.n	8001c8a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_ADC_MspInit+0xfc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d12c      	bne.n	8001c8a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_ADC_MspInit+0xf0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <HAL_ADC_MspInit+0xf0>)
 8001c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_ADC_MspInit+0xf0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10b      	bne.n	8001c5a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_ADC_MspInit+0xf4>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EF2_CUR_Pin|EF1_CUR_Pin;
 8001c72:	230c      	movs	r3, #12
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c76:	230b      	movs	r3, #11
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <HAL_ADC_MspInit+0xf8>)
 8001c86:	f002 fa03 	bl	8004090 <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	50040000 	.word	0x50040000
 8001c98:	20000204 	.word	0x20000204
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	50040100 	.word	0x50040100

08001ca8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a45      	ldr	r2, [pc, #276]	; (8001ddc <HAL_CAN_MspInit+0x134>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d132      	bne.n	8001d30 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_CAN_MspInit+0x138>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <HAL_CAN_MspInit+0x138>)
 8001cd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_CAN_MspInit+0x138>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10b      	bne.n	8001cf4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d1e:	2309      	movs	r3, #9
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	482f      	ldr	r0, [pc, #188]	; (8001de8 <HAL_CAN_MspInit+0x140>)
 8001d2a:	f002 f9b1 	bl	8004090 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d2e:	e051      	b.n	8001dd4 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_CAN_MspInit+0x144>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d14c      	bne.n	8001dd4 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_CAN_MspInit+0x138>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <HAL_CAN_MspInit+0x138>)
 8001d5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_CAN_MspInit+0x138>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d10b      	bne.n	8001d7c <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_CAN_MspInit+0x13c>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d94:	2320      	movs	r3, #32
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001da4:	2303      	movs	r3, #3
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <HAL_CAN_MspInit+0x140>)
 8001db0:	f002 f96e 	bl	8004090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <HAL_CAN_MspInit+0x140>)
 8001dd0:	f002 f95e 	bl	8004090 <HAL_GPIO_Init>
}
 8001dd4:	bf00      	nop
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40006400 	.word	0x40006400
 8001de0:	20000208 	.word	0x20000208
 8001de4:	40021000 	.word	0x40021000
 8001de8:	48000400 	.word	0x48000400
 8001dec:	40006800 	.word	0x40006800

08001df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	; 0x38
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a47      	ldr	r2, [pc, #284]	; (8001f2c <HAL_I2C_MspInit+0x13c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d128      	bne.n	8001e64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a46      	ldr	r2, [pc, #280]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	6a3b      	ldr	r3, [r7, #32]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	483b      	ldr	r0, [pc, #236]	; (8001f34 <HAL_I2C_MspInit+0x144>)
 8001e46:	f002 f923 	bl	8004090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a38      	ldr	r2, [pc, #224]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e62:	e05e      	b.n	8001f22 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a33      	ldr	r2, [pc, #204]	; (8001f38 <HAL_I2C_MspInit+0x148>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12b      	bne.n	8001ec6 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001e86:	f003 f883 	bl	8004f90 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e90:	2312      	movs	r3, #18
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4825      	ldr	r0, [pc, #148]	; (8001f3c <HAL_I2C_MspInit+0x14c>)
 8001ea8:	f002 f8f2 	bl	8004090 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
}
 8001ec4:	e02d      	b.n	8001f22 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_I2C_MspInit+0x150>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d128      	bne.n	8001f22 <HAL_I2C_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eee:	2312      	movs	r3, #18
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001efa:	2303      	movs	r3, #3
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4619      	mov	r1, r3
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <HAL_I2C_MspInit+0x154>)
 8001f06:	f002 f8c3 	bl	8004090 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_I2C_MspInit+0x140>)
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	3738      	adds	r7, #56	; 0x38
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40005800 	.word	0x40005800
 8001f30:	40021000 	.word	0x40021000
 8001f34:	48001400 	.word	0x48001400
 8001f38:	40005c00 	.word	0x40005c00
 8001f3c:	48001800 	.word	0x48001800
 8001f40:	40008400 	.word	0x40008400
 8001f44:	48000400 	.word	0x48000400

08001f48 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_QSPI_MspInit+0xd8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d156      	bne.n	8002018 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6513      	str	r3, [r2, #80]	; 0x50
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f88:	f043 0320 	orr.w	r3, r3, #32
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_QSPI_MspInit+0xdc>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001fb2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fc4:	230a      	movs	r3, #10
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4816      	ldr	r0, [pc, #88]	; (8002028 <HAL_QSPI_MspInit+0xe0>)
 8001fd0:	f002 f85e 	bl	8004090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <HAL_QSPI_MspInit+0xe0>)
 8001ff2:	f002 f84d 	bl	8004090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CS3_Pin;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002006:	230a      	movs	r3, #10
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CS3_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f002 f83c 	bl	8004090 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	a0001000 	.word	0xa0001000
 8002024:	40021000 	.word	0x40021000
 8002028:	48001400 	.word	0x48001400

0800202c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_SPI_MspInit+0x7c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d128      	bne.n	80020a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002058:	6613      	str	r3, [r2, #96]	; 0x60
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_SPI_MspInit+0x80>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_SPI_MspInit+0x80>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800207e:	23e0      	movs	r3, #224	; 0xe0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208e:	2305      	movs	r3, #5
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f001 fff8 	bl	8004090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40013000 	.word	0x40013000
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2e      	ldr	r2, [pc, #184]	; (8002188 <HAL_UART_MspInit+0xd8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d128      	bne.n	8002124 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d2:	4b2e      	ldr	r3, [pc, #184]	; (800218c <HAL_UART_MspInit+0xdc>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <HAL_UART_MspInit+0xdc>)
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_UART_MspInit+0xdc>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_UART_MspInit+0xdc>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4a27      	ldr	r2, [pc, #156]	; (800218c <HAL_UART_MspInit+0xdc>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_UART_MspInit+0xdc>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 8002102:	2360      	movs	r3, #96	; 0x60
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002112:	2307      	movs	r3, #7
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002116:	f107 031c 	add.w	r3, r7, #28
 800211a:	4619      	mov	r1, r3
 800211c:	481c      	ldr	r0, [pc, #112]	; (8002190 <HAL_UART_MspInit+0xe0>)
 800211e:	f001 ffb7 	bl	8004090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002122:	e02d      	b.n	8002180 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_UART_MspInit+0xe4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d128      	bne.n	8002180 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_UART_MspInit+0xdc>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_UART_MspInit+0xdc>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_UART_MspInit+0xdc>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_UART_MspInit+0xdc>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_UART_MspInit+0xdc>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_UART_MspInit+0xdc>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 800215e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002170:	2307      	movs	r3, #7
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <HAL_UART_MspInit+0xe0>)
 800217c:	f001 ff88 	bl	8004090 <HAL_GPIO_Init>
}
 8002180:	bf00      	nop
 8002182:	3730      	adds	r7, #48	; 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40004400 	.word	0x40004400
 800218c:	40021000 	.word	0x40021000
 8002190:	48000c00 	.word	0x48000c00
 8002194:	40004800 	.word	0x40004800

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e4:	f000 f95c 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
	return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_kill>:

int _kill(int pid, int sig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002206:	f006 fc05 	bl	8008a14 <__errno>
 800220a:	4603      	mov	r3, r0
 800220c:	2216      	movs	r2, #22
 800220e:	601a      	str	r2, [r3, #0]
	return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_exit>:

void _exit (int status)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffe7 	bl	80021fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800222e:	e7fe      	b.n	800222e <_exit+0x12>

08002230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e00a      	b.n	8002258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002242:	f3af 8000 	nop.w
 8002246:	4601      	mov	r1, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	b2ca      	uxtb	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf0      	blt.n	8002242 <_read+0x12>
	}

return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_close>:
	}
	return len;
}

int _close(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002292:	605a      	str	r2, [r3, #4]
	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_isatty>:

int _isatty(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	return 1;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f006 fb86 	bl	8008a14 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20050000 	.word	0x20050000
 8002334:	00000400 	.word	0x00000400
 8002338:	2000020c 	.word	0x2000020c
 800233c:	200005f8 	.word	0x200005f8

08002340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <SystemInit+0x5c>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a14      	ldr	r2, [pc, #80]	; (800239c <SystemInit+0x5c>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <SystemInit+0x60>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <SystemInit+0x60>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <SystemInit+0x60>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <SystemInit+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <SystemInit+0x60>)
 800236c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002370:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <SystemInit+0x60>)
 8002378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <SystemInit+0x60>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <SystemInit+0x60>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SystemInit+0x60>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00
 80023a0:	40021000 	.word	0x40021000

080023a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a8:	f7ff ffca 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023b8:	480a      	ldr	r0, [pc, #40]	; (80023e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
	ldr	r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <LoopForever+0x16>)
	cmp	r2, r3
 80023ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d2:	f006 fb25 	bl	8008a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023d6:	f7fe fe6d 	bl	80010b4 <main>

080023da <LoopForever>:

LoopForever:
    b LoopForever
 80023da:	e7fe      	b.n	80023da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023dc:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80023e0:	0800dd3c 	.word	0x0800dd3c
	ldr	r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023e8:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80023ec:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80023f0:	200005f4 	.word	0x200005f4

080023f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>

080023f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f001 fe11 	bl	8004028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f80e 	bl	8002428 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	e001      	b.n	800241c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002418:	f7ff fba2 	bl	8001b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800241c:	79fb      	ldrb	r3, [r7, #7]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_InitTick+0x6c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_InitTick+0x70>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_InitTick+0x6c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fe0f 	bl	8004076 <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d809      	bhi.n	8002478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800246c:	f001 fde7 	bl	800403e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_InitTick+0x74>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e007      	b.n	8002488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e004      	b.n	8002488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e001      	b.n	8002488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000008 	.word	0x20000008
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000008 	.word	0x20000008
 80024c4:	200005d8 	.word	0x200005d8

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200005d8 	.word	0x200005d8

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008

08002528 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3360      	adds	r3, #96	; 0x60
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <LL_ADC_SetOffset+0x44>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	4313      	orrs	r3, r2
 80025c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	03fff000 	.word	0x03fff000

080025d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3360      	adds	r3, #96	; 0x60
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3360      	adds	r3, #96	; 0x60
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	615a      	str	r2, [r3, #20]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3330      	adds	r3, #48	; 0x30
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	211f      	movs	r1, #31
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	401a      	ands	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 011f 	and.w	r1, r3, #31
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	431a      	orrs	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026de:	b480      	push	{r7}
 80026e0:	b087      	sub	sp, #28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3314      	adds	r3, #20
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	0e5b      	lsrs	r3, r3, #25
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	4413      	add	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	0d1b      	lsrs	r3, r3, #20
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2107      	movs	r1, #7
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	0d1b      	lsrs	r3, r3, #20
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	431a      	orrs	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0318 	and.w	r3, r3, #24
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002758:	40d9      	lsrs	r1, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	400b      	ands	r3, r1
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	0007ffff 	.word	0x0007ffff

0800277c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 031f 	and.w	r3, r3, #31
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6093      	str	r3, [r2, #8]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ec:	d101      	bne.n	80027f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283c:	d101      	bne.n	8002842 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288c:	f043 0202 	orr.w	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_IsEnabled+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_IsEnabled+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsDisableOngoing+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsDisableOngoing+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002928:	f043 0210 	orr.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d101      	bne.n	8002954 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002972:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d101      	bne.n	80029a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e139      	b.n	8002c3e <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff f8e5 	bl	8001ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fef1 	bl	80027d8 <LL_ADC_IsDeepPowerDownEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fed7 	bl	80027b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff0c 	bl	8002828 <LL_ADC_IsInternalRegulatorEnabled>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d115      	bne.n	8002a42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fef0 	bl	8002800 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a20:	4b89      	ldr	r3, [pc, #548]	; (8002c48 <HAL_ADC_Init+0x298>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	4a89      	ldr	r2, [pc, #548]	; (8002c4c <HAL_ADC_Init+0x29c>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a34:	e002      	b.n	8002a3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff feee 	bl	8002828 <LL_ADC_IsInternalRegulatorEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f043 0210 	orr.w	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff62 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 8002a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 80d2 	bne.w	8002c2c <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 80ce 	bne.w	8002c2c <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a98:	f043 0202 	orr.w	r2, r3, #2
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fefb 	bl	80028a0 <LL_ADC_IsEnabled>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d115      	bne.n	8002adc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab0:	4867      	ldr	r0, [pc, #412]	; (8002c50 <HAL_ADC_Init+0x2a0>)
 8002ab2:	f7ff fef5 	bl	80028a0 <LL_ADC_IsEnabled>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4866      	ldr	r0, [pc, #408]	; (8002c54 <HAL_ADC_Init+0x2a4>)
 8002aba:	f7ff fef1 	bl	80028a0 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	431c      	orrs	r4, r3
 8002ac2:	4865      	ldr	r0, [pc, #404]	; (8002c58 <HAL_ADC_Init+0x2a8>)
 8002ac4:	f7ff feec 	bl	80028a0 <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4323      	orrs	r3, r4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4861      	ldr	r0, [pc, #388]	; (8002c5c <HAL_ADC_Init+0x2ac>)
 8002ad8:	f7ff fd26 	bl	8002528 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7e5b      	ldrb	r3, [r3, #25]
 8002ae0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002aec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002af2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d106      	bne.n	8002b18 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	045b      	lsls	r3, r3, #17
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_ADC_Init+0x2b0>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fef5 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 8002b52:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff16 	bl	800298a <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d140      	bne.n	8002be8 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d13d      	bne.n	8002be8 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
 8002b74:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b76:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b8e:	f023 0306 	bic.w	r3, r3, #6
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d118      	bne.n	8002bd8 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	e007      	b.n	8002be8 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f023 010f 	bic.w	r1, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
 8002c08:	e007      	b.n	8002c1a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020f 	bic.w	r2, r2, #15
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	659a      	str	r2, [r3, #88]	; 0x58
 8002c2a:	e007      	b.n	8002c3c <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f043 0210 	orr.w	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	053e2d63 	.word	0x053e2d63
 8002c50:	50040000 	.word	0x50040000
 8002c54:	50040100 	.word	0x50040100
 8002c58:	50040200 	.word	0x50040200
 8002c5c:	50040300 	.word	0x50040300
 8002c60:	fff0c007 	.word	0xfff0c007

08002c64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c6c:	4857      	ldr	r0, [pc, #348]	; (8002dcc <HAL_ADC_Start+0x168>)
 8002c6e:	f7ff fd85 	bl	800277c <LL_ADC_GetMultimode>
 8002c72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fe5f 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 809c 	bne.w	8002dbe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_Start+0x30>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e097      	b.n	8002dc4 <HAL_ADC_Start+0x160>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fe7d 	bl	800399c <ADC_Enable>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8083 	bne.w	8002db4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_ADC_Start+0x16c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d002      	beq.n	8002cd2 <HAL_ADC_Start+0x6e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	e000      	b.n	8002cd4 <HAL_ADC_Start+0x70>
 8002cd2:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <HAL_ADC_Start+0x170>)
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d002      	beq.n	8002ce2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfa:	d106      	bne.n	8002d0a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f023 0206 	bic.w	r2, r3, #6
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d08:	e002      	b.n	8002d10 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	221c      	movs	r2, #28
 8002d16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_ADC_Start+0x16c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d002      	beq.n	8002d30 <HAL_ADC_Start+0xcc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_Start+0xce>
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_ADC_Start+0x170>)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d008      	beq.n	8002d4c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d002      	beq.n	8002d4c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	d114      	bne.n	8002d76 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fdbc 	bl	80028ec <LL_ADC_REG_StartConversion>
 8002d74:	e025      	b.n	8002dc2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <HAL_ADC_Start+0x16c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d002      	beq.n	8002d92 <HAL_ADC_Start+0x12e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	e000      	b.n	8002d94 <HAL_ADC_Start+0x130>
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_ADC_Start+0x170>)
 8002d94:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00f      	beq.n	8002dc2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58
 8002db2:	e006      	b.n	8002dc2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002dbc:	e001      	b.n	8002dc2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	50040300 	.word	0x50040300
 8002dd0:	50040100 	.word	0x50040100
 8002dd4:	50040000 	.word	0x50040000

08002dd8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Stop+0x16>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e023      	b.n	8002e36 <HAL_ADC_Stop+0x5e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002df6:	2103      	movs	r1, #3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fd13 	bl	8003824 <ADC_ConversionStop>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fe29 	bl	8003a60 <ADC_Disable>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e4a:	4866      	ldr	r0, [pc, #408]	; (8002fe4 <HAL_ADC_PollForConversion+0x1a4>)
 8002e4c:	f7ff fc96 	bl	800277c <LL_ADC_GetMultimode>
 8002e50:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d102      	bne.n	8002e60 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	e02a      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d002      	beq.n	8002e72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	d111      	bne.n	8002e96 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0a4      	b.n	8002fda <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e90:	2304      	movs	r3, #4
 8002e92:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e94:	e00f      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e96:	4853      	ldr	r0, [pc, #332]	; (8002fe4 <HAL_ADC_PollForConversion+0x1a4>)
 8002e98:	f7ff fc7e 	bl	8002798 <LL_ADC_GetMultiDMATransfer>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e093      	b.n	8002fda <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002eb6:	f7ff fb07 	bl	80024c8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ebc:	e021      	b.n	8002f02 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec4:	d01d      	beq.n	8002f02 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ec6:	f7ff faff 	bl	80024c8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <HAL_ADC_PollForConversion+0x9c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e06b      	b.n	8002fda <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0d6      	beq.n	8002ebe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fb9d 	bl	8002660 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e5b      	ldrb	r3, [r3, #25]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d118      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d111      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_ADC_PollForConversion+0x1a8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d002      	beq.n	8002f76 <HAL_ADC_PollForConversion+0x136>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	e000      	b.n	8002f78 <HAL_ADC_PollForConversion+0x138>
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_ADC_PollForConversion+0x1ac>)
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d008      	beq.n	8002f92 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d002      	beq.n	8002f92 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d104      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e00c      	b.n	8002fb6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_ADC_PollForConversion+0x1a8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d002      	beq.n	8002fac <HAL_ADC_PollForConversion+0x16c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e000      	b.n	8002fae <HAL_ADC_PollForConversion+0x16e>
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_ADC_PollForConversion+0x1ac>)
 8002fae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e008      	b.n	8002fd8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	220c      	movs	r2, #12
 8002fd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	50040300 	.word	0x50040300
 8002fe8:	50040100 	.word	0x50040100
 8002fec:	50040000 	.word	0x50040000

08002ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0b6      	sub	sp, #216	; 0xd8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x22>
 800302a:	2302      	movs	r3, #2
 800302c:	e3e3      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x7ea>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fc7e 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 83c4 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d824      	bhi.n	800309a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	3b02      	subs	r3, #2
 8003056:	2b03      	cmp	r3, #3
 8003058:	d81b      	bhi.n	8003092 <HAL_ADC_ConfigChannel+0x86>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_ADC_ConfigChannel+0x54>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003079 	.word	0x08003079
 8003068:	08003081 	.word	0x08003081
 800306c:	08003089 	.word	0x08003089
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	220c      	movs	r2, #12
 8003074:	605a      	str	r2, [r3, #4]
          break;
 8003076:	e011      	b.n	800309c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2212      	movs	r2, #18
 800307c:	605a      	str	r2, [r3, #4]
          break;
 800307e:	e00d      	b.n	800309c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2218      	movs	r2, #24
 8003084:	605a      	str	r2, [r3, #4]
          break;
 8003086:	e009      	b.n	800309c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308e:	605a      	str	r2, [r3, #4]
          break;
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2206      	movs	r2, #6
 8003096:	605a      	str	r2, [r3, #4]
          break;
 8003098:	e000      	b.n	800309c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800309a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f7ff faec 	bl	8002686 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fc42 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 80030b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fc62 	bl	800298a <LL_ADC_INJ_IsConversionOngoing>
 80030c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 81c1 	bne.w	8003456 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 81bc 	bne.w	8003456 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030e6:	d10f      	bne.n	8003108 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7ff faf3 	bl	80026de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fa9a 	bl	800263a <LL_ADC_SetSamplingTimeCommonConfig>
 8003106:	e00e      	b.n	8003126 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	461a      	mov	r2, r3
 8003116:	f7ff fae2 	bl	80026de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fa8a 	bl	800263a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	08db      	lsrs	r3, r3, #3
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00a      	beq.n	800315e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003158:	f7ff fa1a 	bl	8002590 <LL_ADC_SetOffset>
 800315c:	e17b      	b.n	8003456 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fa37 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_ADC_ConfigChannel+0x17e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fa2c 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	e01e      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x1bc>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fa21 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e004      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80031bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1d4>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	e018      	b.n	8003212 <HAL_ADC_ConfigChannel+0x206>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003204:	2320      	movs	r3, #32
 8003206:	e004      	b.n	8003212 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003212:	429a      	cmp	r2, r3
 8003214:	d106      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f9f0 	bl	8002604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f9d4 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8003230:	4603      	mov	r3, r0
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x244>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f9c9 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	0e9b      	lsrs	r3, r3, #26
 800324a:	f003 021f 	and.w	r2, r3, #31
 800324e:	e01e      	b.n	800328e <HAL_ADC_ConfigChannel+0x282>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f9be 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800326e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e004      	b.n	800328c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x29a>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	e018      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x2cc>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80032ca:	2320      	movs	r3, #32
 80032cc:	e004      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80032ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032d8:	429a      	cmp	r2, r3
 80032da:	d106      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f98d 	bl	8002604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2102      	movs	r1, #2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f971 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x30a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2102      	movs	r1, #2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff f966 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	e01e      	b.n	8003354 <HAL_ADC_ConfigChannel+0x348>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f95b 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800333c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e004      	b.n	8003352 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_ConfigChannel+0x360>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	e016      	b.n	800339a <HAL_ADC_ConfigChannel+0x38e>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800337e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e004      	b.n	800339a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800339a:	429a      	cmp	r2, r3
 800339c:	d106      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2102      	movs	r1, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f92c 	bl	8002604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2103      	movs	r1, #3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f910 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x3cc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2103      	movs	r1, #3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f905 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	f003 021f 	and.w	r2, r3, #31
 80033d6:	e017      	b.n	8003408 <HAL_ADC_ConfigChannel+0x3fc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2103      	movs	r1, #3
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f8fa 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80033fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x414>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	e011      	b.n	8003444 <HAL_ADC_ConfigChannel+0x438>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800342e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003430:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e003      	b.n	8003444 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003444:	429a      	cmp	r2, r3
 8003446:	d106      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	2103      	movs	r1, #3
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f8d7 	bl	8002604 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fa20 	bl	80028a0 <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 8140 	bne.w	80036e8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	461a      	mov	r2, r3
 8003476:	f7ff f95d 	bl	8002734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a8f      	ldr	r2, [pc, #572]	; (80036bc <HAL_ADC_ConfigChannel+0x6b0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	f040 8131 	bne.w	80036e8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x4a2>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2b09      	cmp	r3, #9
 80034a4:	bf94      	ite	ls
 80034a6:	2301      	movls	r3, #1
 80034a8:	2300      	movhi	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e019      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x4d6>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034be:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e003      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80034ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2b09      	cmp	r3, #9
 80034da:	bf94      	ite	ls
 80034dc:	2301      	movls	r3, #1
 80034de:	2300      	movhi	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d079      	beq.n	80035da <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x4f6>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	3301      	adds	r3, #1
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003500:	e015      	b.n	800352e <HAL_ADC_ConfigChannel+0x522>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003512:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e003      	b.n	8003526 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800351e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3301      	adds	r3, #1
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_ADC_ConfigChannel+0x542>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	3301      	adds	r3, #1
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	e017      	b.n	800357e <HAL_ADC_ConfigChannel+0x572>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e003      	b.n	8003572 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	ea42 0103 	orr.w	r1, r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x598>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	0e9b      	lsrs	r3, r3, #26
 8003594:	3301      	adds	r3, #1
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	e018      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x5ca>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80035c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 021f 	and.w	r2, r3, #31
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	430b      	orrs	r3, r1
 80035d8:	e081      	b.n	80036de <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x5ea>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	069b      	lsls	r3, r3, #26
 80035f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f4:	e015      	b.n	8003622 <HAL_ADC_ConfigChannel+0x616>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	069b      	lsls	r3, r3, #26
 800361e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x636>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	3301      	adds	r3, #1
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	e017      	b.n	8003672 <HAL_ADC_ConfigChannel+0x666>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	61fb      	str	r3, [r7, #28]
  return result;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	ea42 0103 	orr.w	r1, r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_ADC_ConfigChannel+0x692>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	0e9b      	lsrs	r3, r3, #26
 8003688:	3301      	adds	r3, #1
 800368a:	f003 021f 	and.w	r2, r3, #31
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	3b1e      	subs	r3, #30
 8003696:	051b      	lsls	r3, r3, #20
 8003698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800369c:	e01e      	b.n	80036dc <HAL_ADC_ConfigChannel+0x6d0>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	613b      	str	r3, [r7, #16]
  return result;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e006      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x6bc>
 80036ba:	bf00      	nop
 80036bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 021f 	and.w	r2, r3, #31
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	3b1e      	subs	r3, #30
 80036d6:	051b      	lsls	r3, r3, #20
 80036d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036dc:	430b      	orrs	r3, r1
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fe fffb 	bl	80026de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_ADC_ConfigChannel+0x7f4>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d07a      	beq.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036f4:	4843      	ldr	r0, [pc, #268]	; (8003804 <HAL_ADC_ConfigChannel+0x7f8>)
 80036f6:	f7fe ff3d 	bl	8002574 <LL_ADC_GetCommonPathInternalCh>
 80036fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a41      	ldr	r2, [pc, #260]	; (8003808 <HAL_ADC_ConfigChannel+0x7fc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d12c      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800370c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d126      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3c      	ldr	r2, [pc, #240]	; (800380c <HAL_ADC_ConfigChannel+0x800>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x71c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <HAL_ADC_ConfigChannel+0x804>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d15d      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800372c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003730:	4619      	mov	r1, r3
 8003732:	4834      	ldr	r0, [pc, #208]	; (8003804 <HAL_ADC_ConfigChannel+0x7f8>)
 8003734:	f7fe ff0b 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_ADC_ConfigChannel+0x808>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	4a36      	ldr	r2, [pc, #216]	; (8003818 <HAL_ADC_ConfigChannel+0x80c>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003752:	e002      	b.n	800375a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3b01      	subs	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003760:	e040      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2d      	ldr	r2, [pc, #180]	; (800381c <HAL_ADC_ConfigChannel+0x810>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d118      	bne.n	800379e <HAL_ADC_ConfigChannel+0x792>
 800376c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d112      	bne.n	800379e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a23      	ldr	r2, [pc, #140]	; (800380c <HAL_ADC_ConfigChannel+0x800>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_ADC_ConfigChannel+0x780>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_ADC_ConfigChannel+0x804>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d12d      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003794:	4619      	mov	r1, r3
 8003796:	481b      	ldr	r0, [pc, #108]	; (8003804 <HAL_ADC_ConfigChannel+0x7f8>)
 8003798:	f7fe fed9 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379c:	e024      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <HAL_ADC_ConfigChannel+0x814>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d120      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <HAL_ADC_ConfigChannel+0x800>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d115      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c6:	4619      	mov	r1, r3
 80037c8:	480e      	ldr	r0, [pc, #56]	; (8003804 <HAL_ADC_ConfigChannel+0x7f8>)
 80037ca:	f7fe fec0 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
 80037ce:	e00c      	b.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037e2:	e002      	b.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80037f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	37d8      	adds	r7, #216	; 0xd8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	80080000 	.word	0x80080000
 8003804:	50040300 	.word	0x50040300
 8003808:	c7520000 	.word	0xc7520000
 800380c:	50040000 	.word	0x50040000
 8003810:	50040200 	.word	0x50040200
 8003814:	20000000 	.word	0x20000000
 8003818:	053e2d63 	.word	0x053e2d63
 800381c:	cb840000 	.word	0xcb840000
 8003820:	80000001 	.word	0x80000001

08003824 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f87e 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 8003840:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f89f 	bl	800298a <LL_ADC_INJ_IsConversionOngoing>
 800384c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8098 	beq.w	800398c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02a      	beq.n	80038c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7e5b      	ldrb	r3, [r3, #25]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d126      	bne.n	80038c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7e1b      	ldrb	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d122      	bne.n	80038c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800387a:	2301      	movs	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800387e:	e014      	b.n	80038aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4a45      	ldr	r2, [pc, #276]	; (8003998 <ADC_ConversionStop+0x174>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d90d      	bls.n	80038a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e074      	b.n	800398e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d1e3      	bne.n	8003880 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d014      	beq.n	80038f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f836 	bl	800293c <LL_ADC_REG_IsConversionOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fff3 	bl	80028c6 <LL_ADC_IsDisableOngoing>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f812 	bl	8002914 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d014      	beq.n	8003920 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f845 	bl	800298a <LL_ADC_INJ_IsConversionOngoing>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe ffdb 	bl	80028c6 <LL_ADC_IsDisableOngoing>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f821 	bl	8002962 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d005      	beq.n	8003932 <ADC_ConversionStop+0x10e>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d105      	bne.n	8003938 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800392c:	230c      	movs	r3, #12
 800392e:	617b      	str	r3, [r7, #20]
        break;
 8003930:	e005      	b.n	800393e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003932:	2308      	movs	r3, #8
 8003934:	617b      	str	r3, [r7, #20]
        break;
 8003936:	e002      	b.n	800393e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003938:	2304      	movs	r3, #4
 800393a:	617b      	str	r3, [r7, #20]
        break;
 800393c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800393e:	f7fe fdc3 	bl	80024c8 <HAL_GetTick>
 8003942:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003944:	e01b      	b.n	800397e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003946:	f7fe fdbf 	bl	80024c8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b05      	cmp	r3, #5
 8003952:	d914      	bls.n	800397e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e007      	b.n	800398e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1dc      	bne.n	8003946 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	a33fffff 	.word	0xa33fffff

0800399c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe ff79 	bl	80028a0 <LL_ADC_IsEnabled>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d14d      	bne.n	8003a50 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <ADC_Enable+0xc0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e039      	b.n	8003a52 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe ff34 	bl	8002850 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039e8:	f7fe fd6e 	bl	80024c8 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ee:	e028      	b.n	8003a42 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe ff53 	bl	80028a0 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff23 	bl	8002850 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0a:	f7fe fd5d 	bl	80024c8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d914      	bls.n	8003a42 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d00d      	beq.n	8003a42 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f043 0210 	orr.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d1cf      	bne.n	80039f0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	8000003f 	.word	0x8000003f

08003a60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe ff2a 	bl	80028c6 <LL_ADC_IsDisableOngoing>
 8003a72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe ff11 	bl	80028a0 <LL_ADC_IsEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d047      	beq.n	8003b14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d144      	bne.n	8003b14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030d 	and.w	r3, r3, #13
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10c      	bne.n	8003ab2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe feeb 	bl	8002878 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aaa:	f7fe fd0d 	bl	80024c8 <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ab0:	e029      	b.n	8003b06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f043 0210 	orr.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e023      	b.n	8003b16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ace:	f7fe fcfb 	bl	80024c8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d914      	bls.n	8003b06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f043 0210 	orr.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f043 0201 	orr.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e007      	b.n	8003b16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1dc      	bne.n	8003ace <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <LL_ADC_IsEnabled>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <LL_ADC_IsEnabled+0x18>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <LL_ADC_IsEnabled+0x1a>
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d101      	bne.n	8003b5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b0a1      	sub	sp, #132	; 0x84
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e093      	b.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003b92:	2300      	movs	r3, #0
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003b96:	2300      	movs	r3, #0
 8003b98:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a47      	ldr	r2, [pc, #284]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d102      	bne.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e001      	b.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e072      	b.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ffb8 	bl	8003b44 <LL_ADC_REG_IsConversionOngoing>
 8003bd4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ffb2 	bl	8003b44 <LL_ADC_REG_IsConversionOngoing>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d154      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d151      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bec:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003bee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02c      	beq.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c0a:	035b      	lsls	r3, r3, #13
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c14:	4829      	ldr	r0, [pc, #164]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c16:	f7ff ff82 	bl	8003b1e <LL_ADC_IsEnabled>
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4828      	ldr	r0, [pc, #160]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c1e:	f7ff ff7e 	bl	8003b1e <LL_ADC_IsEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	431c      	orrs	r4, r3
 8003c26:	4828      	ldr	r0, [pc, #160]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c28:	f7ff ff79 	bl	8003b1e <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4323      	orrs	r3, r4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d137      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c3c:	f023 030f 	bic.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	6811      	ldr	r1, [r2, #0]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c50:	e028      	b.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c5e:	4817      	ldr	r0, [pc, #92]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c60:	f7ff ff5d 	bl	8003b1e <LL_ADC_IsEnabled>
 8003c64:	4604      	mov	r4, r0
 8003c66:	4816      	ldr	r0, [pc, #88]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c68:	f7ff ff59 	bl	8003b1e <LL_ADC_IsEnabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	431c      	orrs	r4, r3
 8003c70:	4815      	ldr	r0, [pc, #84]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c72:	f7ff ff54 	bl	8003b1e <LL_ADC_IsEnabled>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4323      	orrs	r3, r4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d112      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c86:	f023 030f 	bic.w	r3, r3, #15
 8003c8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c8c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c8e:	e009      	b.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ca2:	e000      	b.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003cae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3784      	adds	r7, #132	; 0x84
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	50040000 	.word	0x50040000
 8003cc0:	50040100 	.word	0x50040100
 8003cc4:	50040300 	.word	0x50040300
 8003cc8:	50040200 	.word	0x50040200

08003ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e0ed      	b.n	8003eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd ffdc 	bl	8001ca8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0202 	bic.w	r2, r2, #2
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fe fbe2 	bl	80024c8 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d06:	e012      	b.n	8003d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d08:	f7fe fbde 	bl	80024c8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d90b      	bls.n	8003d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2205      	movs	r2, #5
 8003d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0c5      	b.n	8003eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4c:	f7fe fbbc 	bl	80024c8 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d52:	e012      	b.n	8003d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d54:	f7fe fbb8 	bl	80024c8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b0a      	cmp	r3, #10
 8003d60:	d90b      	bls.n	8003d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2205      	movs	r2, #5
 8003d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e09f      	b.n	8003eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0e5      	beq.n	8003d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	7e1b      	ldrb	r3, [r3, #24]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d108      	bne.n	8003da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e007      	b.n	8003db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e5b      	ldrb	r3, [r3, #25]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e007      	b.n	8003ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7e9b      	ldrb	r3, [r3, #26]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d108      	bne.n	8003df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0220 	orr.w	r2, r2, #32
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e007      	b.n	8003e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0220 	bic.w	r2, r2, #32
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7edb      	ldrb	r3, [r3, #27]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d108      	bne.n	8003e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0210 	bic.w	r2, r2, #16
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e007      	b.n	8003e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0210 	orr.w	r2, r2, #16
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7f1b      	ldrb	r3, [r3, #28]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e007      	b.n	8003e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7f5b      	ldrb	r3, [r3, #29]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d108      	bne.n	8003e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0204 	orr.w	r2, r2, #4
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0204 	bic.w	r2, r2, #4
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	ea42 0103 	orr.w	r1, r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <__NVIC_SetPriorityGrouping>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_GetPriorityGrouping>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <__NVIC_GetPriorityGrouping+0x18>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	f003 0307 	and.w	r3, r3, #7
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_SetPriority>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db0a      	blt.n	8003f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	490c      	ldr	r1, [pc, #48]	; (8003f74 <__NVIC_SetPriority+0x4c>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f50:	e00a      	b.n	8003f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <__NVIC_SetPriority+0x50>)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	440b      	add	r3, r1
 8003f66:	761a      	strb	r2, [r3, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <NVIC_EncodePriority>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf28      	it	cs
 8003f9a:	2304      	movcs	r3, #4
 8003f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d902      	bls.n	8003fac <NVIC_EncodePriority+0x30>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	e000      	b.n	8003fae <NVIC_EncodePriority+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	4313      	orrs	r3, r2
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <SysTick_Config>:
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff4:	d301      	bcc.n	8003ffa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00f      	b.n	800401a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <SysTick_Config+0x40>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004002:	210f      	movs	r1, #15
 8004004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004008:	f7ff ff8e 	bl	8003f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <SysTick_Config+0x40>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SysTick_Config+0x40>)
 8004014:	2207      	movs	r2, #7
 8004016:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff47 	bl	8003ec4 <__NVIC_SetPriorityGrouping>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004050:	f7ff ff5c 	bl	8003f0c <__NVIC_GetPriorityGrouping>
 8004054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	6978      	ldr	r0, [r7, #20]
 800405c:	f7ff ff8e 	bl	8003f7c <NVIC_EncodePriority>
 8004060:	4602      	mov	r2, r0
 8004062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff5d 	bl	8003f28 <__NVIC_SetPriority>
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff ffb0 	bl	8003fe4 <SysTick_Config>
 8004084:	4603      	mov	r3, r0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800409e:	e166      	b.n	800436e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8158 	beq.w	8004368 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d00b      	beq.n	80040d8 <HAL_GPIO_Init+0x48>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d007      	beq.n	80040d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040cc:	2b11      	cmp	r3, #17
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b12      	cmp	r3, #18
 80040d6:	d130      	bne.n	800413a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	2203      	movs	r2, #3
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800410e:	2201      	movs	r2, #1
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0201 	and.w	r2, r3, #1
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	2203      	movs	r2, #3
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0xea>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b12      	cmp	r3, #18
 8004178:	d123      	bne.n	80041c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	08da      	lsrs	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3208      	adds	r2, #8
 8004182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	220f      	movs	r2, #15
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4013      	ands	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	6939      	ldr	r1, [r7, #16]
 80041be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	2203      	movs	r2, #3
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0203 	and.w	r2, r3, #3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80b2 	beq.w	8004368 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004204:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_GPIO_Init+0x2fc>)
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_GPIO_Init+0x2fc>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6613      	str	r3, [r2, #96]	; 0x60
 8004210:	4b5e      	ldr	r3, [pc, #376]	; (800438c <HAL_GPIO_Init+0x2fc>)
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800421c:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <HAL_GPIO_Init+0x300>)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	3302      	adds	r3, #2
 8004224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004246:	d02b      	beq.n	80042a0 <HAL_GPIO_Init+0x210>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_GPIO_Init+0x304>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d025      	beq.n	800429c <HAL_GPIO_Init+0x20c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a51      	ldr	r2, [pc, #324]	; (8004398 <HAL_GPIO_Init+0x308>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d01f      	beq.n	8004298 <HAL_GPIO_Init+0x208>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a50      	ldr	r2, [pc, #320]	; (800439c <HAL_GPIO_Init+0x30c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d019      	beq.n	8004294 <HAL_GPIO_Init+0x204>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a4f      	ldr	r2, [pc, #316]	; (80043a0 <HAL_GPIO_Init+0x310>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_GPIO_Init+0x200>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a4e      	ldr	r2, [pc, #312]	; (80043a4 <HAL_GPIO_Init+0x314>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00d      	beq.n	800428c <HAL_GPIO_Init+0x1fc>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a4d      	ldr	r2, [pc, #308]	; (80043a8 <HAL_GPIO_Init+0x318>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <HAL_GPIO_Init+0x1f8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a4c      	ldr	r2, [pc, #304]	; (80043ac <HAL_GPIO_Init+0x31c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_GPIO_Init+0x1f4>
 8004280:	2307      	movs	r3, #7
 8004282:	e00e      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 8004284:	2308      	movs	r3, #8
 8004286:	e00c      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 8004288:	2306      	movs	r3, #6
 800428a:	e00a      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 800428c:	2305      	movs	r3, #5
 800428e:	e008      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 8004290:	2304      	movs	r3, #4
 8004292:	e006      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 8004294:	2303      	movs	r3, #3
 8004296:	e004      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 8004298:	2302      	movs	r3, #2
 800429a:	e002      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_GPIO_Init+0x212>
 80042a0:	2300      	movs	r3, #0
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	f002 0203 	and.w	r2, r2, #3
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	4093      	lsls	r3, r2
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042b2:	4937      	ldr	r1, [pc, #220]	; (8004390 <HAL_GPIO_Init+0x300>)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_GPIO_Init+0x320>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042e4:	4a32      	ldr	r2, [pc, #200]	; (80043b0 <HAL_GPIO_Init+0x320>)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80042ea:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_GPIO_Init+0x320>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800430e:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <HAL_GPIO_Init+0x320>)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004314:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_GPIO_Init+0x320>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_GPIO_Init+0x320>)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800433e:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <HAL_GPIO_Init+0x320>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43db      	mvns	r3, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004362:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <HAL_GPIO_Init+0x320>)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3301      	adds	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f ae91 	bne.w	80040a0 <HAL_GPIO_Init+0x10>
  }
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40021000 	.word	0x40021000
 8004390:	40010000 	.word	0x40010000
 8004394:	48000400 	.word	0x48000400
 8004398:	48000800 	.word	0x48000800
 800439c:	48000c00 	.word	0x48000c00
 80043a0:	48001000 	.word	0x48001000
 80043a4:	48001400 	.word	0x48001400
 80043a8:	48001800 	.word	0x48001800
 80043ac:	48001c00 	.word	0x48001c00
 80043b0:	40010400 	.word	0x40010400

080043b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	807b      	strh	r3, [r7, #2]
 80043c0:	4613      	mov	r3, r2
 80043c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c4:	787b      	ldrb	r3, [r7, #1]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d0:	e002      	b.n	80043d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e081      	b.n	80044fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd fcf0 	bl	8001df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004434:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004444:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d107      	bne.n	800445e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	e006      	b.n	800446c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800446a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d104      	bne.n	800447e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800448c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	ea42 0103 	orr.w	r1, r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69d9      	ldr	r1, [r3, #28]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	461a      	mov	r2, r3
 8004512:	4603      	mov	r3, r0
 8004514:	817b      	strh	r3, [r7, #10]
 8004516:	460b      	mov	r3, r1
 8004518:	813b      	strh	r3, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	f040 80f9 	bne.w	800471e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_I2C_Mem_Write+0x34>
 8004532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0ed      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Mem_Write+0x4e>
 800454e:	2302      	movs	r3, #2
 8004550:	e0e6      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800455a:	f7fd ffb5 	bl	80024c8 <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2319      	movs	r3, #25
 8004566:	2201      	movs	r2, #1
 8004568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fac3 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0d1      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2221      	movs	r2, #33	; 0x21
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a4:	88f8      	ldrh	r0, [r7, #6]
 80045a6:	893a      	ldrh	r2, [r7, #8]
 80045a8:	8979      	ldrh	r1, [r7, #10]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4603      	mov	r3, r0
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f9d3 	bl	8004960 <I2C_RequestMemoryWrite>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0a9      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2bff      	cmp	r3, #255	; 0xff
 80045d4:	d90e      	bls.n	80045f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	8979      	ldrh	r1, [r7, #10]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fba5 	bl	8004d3c <I2C_TransferConfig>
 80045f2:	e00f      	b.n	8004614 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	b2da      	uxtb	r2, r3
 8004604:	8979      	ldrh	r1, [r7, #10]
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fb94 	bl	8004d3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 faad 	bl	8004b78 <I2C_WaitOnTXISFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e07b      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d034      	beq.n	80046cc <HAL_I2C_Mem_Write+0x1c8>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d130      	bne.n	80046cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	2200      	movs	r2, #0
 8004672:	2180      	movs	r1, #128	; 0x80
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fa3f 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e04d      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2bff      	cmp	r3, #255	; 0xff
 800468c:	d90e      	bls.n	80046ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	b2da      	uxtb	r2, r3
 800469a:	8979      	ldrh	r1, [r7, #10]
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fb49 	bl	8004d3c <I2C_TransferConfig>
 80046aa:	e00f      	b.n	80046cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	8979      	ldrh	r1, [r7, #10]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fb38 	bl	8004d3c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d19e      	bne.n	8004614 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fa8c 	bl	8004bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e01a      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2220      	movs	r2, #32
 80046f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_I2C_Mem_Write+0x224>)
 80046fe:	400b      	ands	r3, r1
 8004700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	fe00e800 	.word	0xfe00e800

0800472c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b20      	cmp	r3, #32
 8004750:	f040 80fd 	bne.w	800494e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_I2C_Mem_Read+0x34>
 800475a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004766:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0f1      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_I2C_Mem_Read+0x4e>
 8004776:	2302      	movs	r3, #2
 8004778:	e0ea      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004782:	f7fd fea1 	bl	80024c8 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2319      	movs	r3, #25
 800478e:	2201      	movs	r2, #1
 8004790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f9af 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0d5      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2222      	movs	r2, #34	; 0x22
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2240      	movs	r2, #64	; 0x40
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a3a      	ldr	r2, [r7, #32]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047cc:	88f8      	ldrh	r0, [r7, #6]
 80047ce:	893a      	ldrh	r2, [r7, #8]
 80047d0:	8979      	ldrh	r1, [r7, #10]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	4603      	mov	r3, r0
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f913 	bl	8004a08 <I2C_RequestMemoryRead>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0ad      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2bff      	cmp	r3, #255	; 0xff
 80047fc:	d90e      	bls.n	800481c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	b2da      	uxtb	r2, r3
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	4b52      	ldr	r3, [pc, #328]	; (8004958 <HAL_I2C_Mem_Read+0x22c>)
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fa91 	bl	8004d3c <I2C_TransferConfig>
 800481a:	e00f      	b.n	800483c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	b2da      	uxtb	r2, r3
 800482c:	8979      	ldrh	r1, [r7, #10]
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_I2C_Mem_Read+0x22c>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa80 	bl	8004d3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2200      	movs	r2, #0
 8004844:	2104      	movs	r1, #4
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f956 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07c      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d034      	beq.n	80048fc <HAL_I2C_Mem_Read+0x1d0>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d130      	bne.n	80048fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	2200      	movs	r2, #0
 80048a2:	2180      	movs	r1, #128	; 0x80
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f927 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e04d      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2bff      	cmp	r3, #255	; 0xff
 80048bc:	d90e      	bls.n	80048dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	8979      	ldrh	r1, [r7, #10]
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fa31 	bl	8004d3c <I2C_TransferConfig>
 80048da:	e00f      	b.n	80048fc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	8979      	ldrh	r1, [r7, #10]
 80048ee:	2300      	movs	r3, #0
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fa20 	bl	8004d3c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d19a      	bne.n	800483c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f974 	bl	8004bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e01a      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2220      	movs	r2, #32
 8004920:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_I2C_Mem_Read+0x230>)
 800492e:	400b      	ands	r3, r1
 8004930:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	80002400 	.word	0x80002400
 800495c:	fe00e800 	.word	0xfe00e800

08004960 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	4608      	mov	r0, r1
 800496a:	4611      	mov	r1, r2
 800496c:	461a      	mov	r2, r3
 800496e:	4603      	mov	r3, r0
 8004970:	817b      	strh	r3, [r7, #10]
 8004972:	460b      	mov	r3, r1
 8004974:	813b      	strh	r3, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	8979      	ldrh	r1, [r7, #10]
 8004980:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <I2C_RequestMemoryWrite+0xa4>)
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f9d7 	bl	8004d3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f8f0 	bl	8004b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e02c      	b.n	80049fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a8:	893b      	ldrh	r3, [r7, #8]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
 80049b2:	e015      	b.n	80049e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049b4:	893b      	ldrh	r3, [r7, #8]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f8d6 	bl	8004b78 <I2C_WaitOnTXISFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e012      	b.n	80049fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049d6:	893b      	ldrh	r3, [r7, #8]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2200      	movs	r2, #0
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f884 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	80002000 	.word	0x80002000

08004a08 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	4608      	mov	r0, r1
 8004a12:	4611      	mov	r1, r2
 8004a14:	461a      	mov	r2, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	813b      	strh	r3, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	8979      	ldrh	r1, [r7, #10]
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <I2C_RequestMemoryRead+0xa4>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f984 	bl	8004d3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	69b9      	ldr	r1, [r7, #24]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f89d 	bl	8004b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e02c      	b.n	8004aa2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4e:	893b      	ldrh	r3, [r7, #8]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
 8004a58:	e015      	b.n	8004a86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a5a:	893b      	ldrh	r3, [r7, #8]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	69b9      	ldr	r1, [r7, #24]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f883 	bl	8004b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e012      	b.n	8004aa2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7c:	893b      	ldrh	r3, [r7, #8]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2140      	movs	r1, #64	; 0x40
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f831 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	80002000 	.word	0x80002000

08004ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d103      	bne.n	8004ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d007      	beq.n	8004aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	619a      	str	r2, [r3, #24]
  }
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b08:	e022      	b.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b10:	d01e      	beq.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fd fcd9 	bl	80024c8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d113      	bne.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e00f      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d0cd      	beq.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b84:	e02c      	b.n	8004be0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f870 	bl	8004c70 <I2C_IsAcknowledgeFailed>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e02a      	b.n	8004bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba0:	d01e      	beq.n	8004be0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba2:	f7fd fc91 	bl	80024c8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d113      	bne.n	8004be0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e007      	b.n	8004bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d1cb      	bne.n	8004b86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c04:	e028      	b.n	8004c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f830 	bl	8004c70 <I2C_IsAcknowledgeFailed>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e026      	b.n	8004c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fd fc55 	bl	80024c8 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d113      	bne.n	8004c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e007      	b.n	8004c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d1cf      	bne.n	8004c06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d151      	bne.n	8004d2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c8a:	e022      	b.n	8004cd2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c92:	d01e      	beq.n	8004cd2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fd fc18 	bl	80024c8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <I2C_IsAcknowledgeFailed+0x3a>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d113      	bne.n	8004cd2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e02e      	b.n	8004d30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d1d5      	bne.n	8004c8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2210      	movs	r2, #16
 8004ce6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2220      	movs	r2, #32
 8004cee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fedd 	bl	8004ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <I2C_IsAcknowledgeFailed+0xc8>)
 8004d02:	400b      	ands	r3, r1
 8004d04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	fe00e800 	.word	0xfe00e800

08004d3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	0d5b      	lsrs	r3, r3, #21
 8004d58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <I2C_TransferConfig+0x58>)
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	43db      	mvns	r3, r3
 8004d62:	ea02 0103 	and.w	r1, r2, r3
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d6c:	7a7b      	ldrb	r3, [r7, #9]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	03ff63ff 	.word	0x03ff63ff

08004d98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d138      	bne.n	8004e20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e032      	b.n	8004e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d139      	bne.n	8004eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e033      	b.n	8004eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2224      	movs	r2, #36	; 0x24
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40007000 	.word	0x40007000

08004ee4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef2:	d130      	bne.n	8004f56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f00:	d038      	beq.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f02:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2232      	movs	r2, #50	; 0x32
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0c9b      	lsrs	r3, r3, #18
 8004f24:	3301      	adds	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f28:	e002      	b.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f30:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d102      	bne.n	8004f44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f2      	bne.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d110      	bne.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e00f      	b.n	8004f76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f62:	d007      	beq.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f6c:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40007000 	.word	0x40007000
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	431bde83 	.word	0x431bde83

08004f90 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <HAL_PWREx_EnableVddIO2+0x1c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a04      	ldr	r2, [pc, #16]	; (8004fac <HAL_PWREx_EnableVddIO2+0x1c>)
 8004f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9e:	6053      	str	r3, [r2, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40007000 	.word	0x40007000

08004fb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004fb8:	f7fd fa86 	bl	80024c8 <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e069      	b.n	800509c <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fc ffb3 	bl	8001f48 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004fe2:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f85e 	bl	80050a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	021a      	lsls	r2, r3, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	2120      	movs	r1, #32
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f856 	bl	80050c4 <QSPI_WaitFlagStateUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800501c:	7afb      	ldrb	r3, [r7, #11]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d137      	bne.n	8005092 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6852      	ldr	r2, [r2, #4]
 8005034:	0611      	lsls	r1, r2, #24
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68d2      	ldr	r2, [r2, #12]
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	69d2      	ldr	r2, [r2, #28]
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a12      	ldr	r2, [r2, #32]
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	430b      	orrs	r3, r1
 800504e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_QSPI_Init+0xf4>)
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6912      	ldr	r2, [r2, #16]
 800505e:	0411      	lsls	r1, r2, #16
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6952      	ldr	r2, [r2, #20]
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6992      	ldr	r2, [r2, #24]
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	430b      	orrs	r3, r1
 8005072:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800509a:	7afb      	ldrb	r3, [r7, #11]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	ffe0f8fe 	.word	0xffe0f8fe

080050a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050d4:	e01a      	b.n	800510c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050dc:	d016      	beq.n	800510c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fd f9f3 	bl	80024c8 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2204      	movs	r2, #4
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f043 0201 	orr.w	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e00e      	b.n	800512a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf14      	ite	ne
 800511a:	2301      	movne	r3, #1
 800511c:	2300      	moveq	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d1d6      	bne.n	80050d6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f000 bc16 	b.w	8005974 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005148:	4ba0      	ldr	r3, [pc, #640]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005152:	4b9e      	ldr	r3, [pc, #632]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80e4 	beq.w	8005332 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_RCC_OscConfig+0x4c>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b0c      	cmp	r3, #12
 8005174:	f040 808b 	bne.w	800528e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b01      	cmp	r3, #1
 800517c:	f040 8087 	bne.w	800528e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005180:	4b92      	ldr	r3, [pc, #584]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_OscConfig+0x64>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e3ed      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	4b8b      	ldr	r3, [pc, #556]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <HAL_RCC_OscConfig+0x7e>
 80051a8:	4b88      	ldr	r3, [pc, #544]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b0:	e005      	b.n	80051be <HAL_RCC_OscConfig+0x8a>
 80051b2:	4b86      	ldr	r3, [pc, #536]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051be:	4293      	cmp	r3, r2
 80051c0:	d223      	bcs.n	800520a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fd80 	bl	8005ccc <RCC_SetFlashLatencyFromMSIRange>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e3ce      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051d6:	4b7d      	ldr	r3, [pc, #500]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a7c      	ldr	r2, [pc, #496]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051dc:	f043 0308 	orr.w	r3, r3, #8
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	4b7a      	ldr	r3, [pc, #488]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	4977      	ldr	r1, [pc, #476]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051f4:	4b75      	ldr	r3, [pc, #468]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4972      	ldr	r1, [pc, #456]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
 8005208:	e025      	b.n	8005256 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520a:	4b70      	ldr	r3, [pc, #448]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6f      	ldr	r2, [pc, #444]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b6d      	ldr	r3, [pc, #436]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	496a      	ldr	r1, [pc, #424]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005228:	4b68      	ldr	r3, [pc, #416]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	4965      	ldr	r1, [pc, #404]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fd40 	bl	8005ccc <RCC_SetFlashLatencyFromMSIRange>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e38e      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005256:	f000 fc75 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 800525a:	4602      	mov	r2, r0
 800525c:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	495a      	ldr	r1, [pc, #360]	; (80053d0 <HAL_RCC_OscConfig+0x29c>)
 8005268:	5ccb      	ldrb	r3, [r1, r3]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	4a58      	ldr	r2, [pc, #352]	; (80053d4 <HAL_RCC_OscConfig+0x2a0>)
 8005274:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005276:	4b58      	ldr	r3, [pc, #352]	; (80053d8 <HAL_RCC_OscConfig+0x2a4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd f8d4 	bl	8002428 <HAL_InitTick>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d052      	beq.n	8005330 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	e372      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d032      	beq.n	80052fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005296:	4b4d      	ldr	r3, [pc, #308]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4c      	ldr	r2, [pc, #304]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052a2:	f7fd f911 	bl	80024c8 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052aa:	f7fd f90d 	bl	80024c8 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e35b      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052bc:	4b43      	ldr	r3, [pc, #268]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c8:	4b40      	ldr	r3, [pc, #256]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3f      	ldr	r2, [pc, #252]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052ce:	f043 0308 	orr.w	r3, r3, #8
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	493a      	ldr	r1, [pc, #232]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	4935      	ldr	r1, [pc, #212]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
 80052fa:	e01a      	b.n	8005332 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052fc:	4b33      	ldr	r3, [pc, #204]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a32      	ldr	r2, [pc, #200]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005308:	f7fd f8de 	bl	80024c8 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005310:	f7fd f8da 	bl	80024c8 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e328      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x1dc>
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005330:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d073      	beq.n	8005426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d005      	beq.n	8005350 <HAL_RCC_OscConfig+0x21c>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d10e      	bne.n	8005368 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d10b      	bne.n	8005368 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005350:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d063      	beq.n	8005424 <HAL_RCC_OscConfig+0x2f0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d15f      	bne.n	8005424 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e305      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d106      	bne.n	8005380 <HAL_RCC_OscConfig+0x24c>
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a15      	ldr	r2, [pc, #84]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e01d      	b.n	80053bc <HAL_RCC_OscConfig+0x288>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005388:	d10c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x270>
 800538a:	4b10      	ldr	r3, [pc, #64]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0f      	ldr	r2, [pc, #60]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a0c      	ldr	r2, [pc, #48]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e00b      	b.n	80053bc <HAL_RCC_OscConfig+0x288>
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a08      	ldr	r2, [pc, #32]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80053aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a05      	ldr	r2, [pc, #20]	; (80053cc <HAL_RCC_OscConfig+0x298>)
 80053b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fd f880 	bl	80024c8 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ca:	e010      	b.n	80053ee <HAL_RCC_OscConfig+0x2ba>
 80053cc:	40021000 	.word	0x40021000
 80053d0:	0800d7e8 	.word	0x0800d7e8
 80053d4:	20000000 	.word	0x20000000
 80053d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fd f874 	bl	80024c8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e2c2      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ee:	4baf      	ldr	r3, [pc, #700]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x2a8>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fd f864 	bl	80024c8 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005404:	f7fd f860 	bl	80024c8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e2ae      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005416:	4ba5      	ldr	r3, [pc, #660]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x2d0>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d060      	beq.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d005      	beq.n	8005444 <HAL_RCC_OscConfig+0x310>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d119      	bne.n	8005472 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d116      	bne.n	8005472 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005444:	4b99      	ldr	r3, [pc, #612]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_OscConfig+0x328>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e28b      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545c:	4b93      	ldr	r3, [pc, #588]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	4990      	ldr	r1, [pc, #576]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005470:	e040      	b.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d023      	beq.n	80054c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800547a:	4b8c      	ldr	r3, [pc, #560]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a8b      	ldr	r2, [pc, #556]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fd f81f 	bl	80024c8 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548e:	f7fd f81b 	bl	80024c8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e269      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a0:	4b82      	ldr	r3, [pc, #520]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b7f      	ldr	r3, [pc, #508]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	497c      	ldr	r1, [pc, #496]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	e018      	b.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c2:	4b7a      	ldr	r3, [pc, #488]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a79      	ldr	r2, [pc, #484]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80054c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc fffb 	bl	80024c8 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d6:	f7fc fff7 	bl	80024c8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e245      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e8:	4b70      	ldr	r3, [pc, #448]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d03c      	beq.n	800557a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01c      	beq.n	8005542 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005508:	4b68      	ldr	r3, [pc, #416]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550e:	4a67      	ldr	r2, [pc, #412]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fc ffd6 	bl	80024c8 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005520:	f7fc ffd2 	bl	80024c8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e220      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005532:	4b5e      	ldr	r3, [pc, #376]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ef      	beq.n	8005520 <HAL_RCC_OscConfig+0x3ec>
 8005540:	e01b      	b.n	800557a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005542:	4b5a      	ldr	r3, [pc, #360]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005548:	4a58      	ldr	r2, [pc, #352]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fc ffb9 	bl	80024c8 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fc ffb5 	bl	80024c8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e203      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800556c:	4b4f      	ldr	r3, [pc, #316]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ef      	bne.n	800555a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80a6 	beq.w	80056d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005588:	2300      	movs	r3, #0
 800558a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800558c:	4b47      	ldr	r3, [pc, #284]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10d      	bne.n	80055b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005598:	4b44      	ldr	r3, [pc, #272]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a43      	ldr	r2, [pc, #268]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
 80055a4:	4b41      	ldr	r3, [pc, #260]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055b4:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <HAL_RCC_OscConfig+0x57c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d118      	bne.n	80055f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c0:	4b3b      	ldr	r3, [pc, #236]	; (80056b0 <HAL_RCC_OscConfig+0x57c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <HAL_RCC_OscConfig+0x57c>)
 80055c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055cc:	f7fc ff7c 	bl	80024c8 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d4:	f7fc ff78 	bl	80024c8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e1c6      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e6:	4b32      	ldr	r3, [pc, #200]	; (80056b0 <HAL_RCC_OscConfig+0x57c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d108      	bne.n	800560c <HAL_RCC_OscConfig+0x4d8>
 80055fa:	4b2c      	ldr	r3, [pc, #176]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800560a:	e024      	b.n	8005656 <HAL_RCC_OscConfig+0x522>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d110      	bne.n	8005636 <HAL_RCC_OscConfig+0x502>
 8005614:	4b25      	ldr	r3, [pc, #148]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	4a24      	ldr	r2, [pc, #144]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800561c:	f043 0304 	orr.w	r3, r3, #4
 8005620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005624:	4b21      	ldr	r3, [pc, #132]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	4a20      	ldr	r2, [pc, #128]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005634:	e00f      	b.n	8005656 <HAL_RCC_OscConfig+0x522>
 8005636:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800564e:	f023 0304 	bic.w	r3, r3, #4
 8005652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565e:	f7fc ff33 	bl	80024c8 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005664:	e00a      	b.n	800567c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005666:	f7fc ff2f 	bl	80024c8 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	f241 3288 	movw	r2, #5000	; 0x1388
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e17b      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_OscConfig+0x578>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ed      	beq.n	8005666 <HAL_RCC_OscConfig+0x532>
 800568a:	e01a      	b.n	80056c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568c:	f7fc ff1c 	bl	80024c8 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005692:	e00f      	b.n	80056b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fc ff18 	bl	80024c8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d906      	bls.n	80056b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e164      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
 80056aa:	bf00      	nop
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056b4:	4ba8      	ldr	r3, [pc, #672]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e8      	bne.n	8005694 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c8:	4ba3      	ldr	r3, [pc, #652]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	4aa2      	ldr	r2, [pc, #648]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80056ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d03c      	beq.n	800575a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01c      	beq.n	8005722 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e8:	4b9b      	ldr	r3, [pc, #620]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80056ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ee:	4a9a      	ldr	r2, [pc, #616]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fc fee6 	bl	80024c8 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005700:	f7fc fee2 	bl	80024c8 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e130      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005712:	4b91      	ldr	r3, [pc, #580]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ef      	beq.n	8005700 <HAL_RCC_OscConfig+0x5cc>
 8005720:	e01b      	b.n	800575a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005722:	4b8d      	ldr	r3, [pc, #564]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005728:	4a8b      	ldr	r2, [pc, #556]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005732:	f7fc fec9 	bl	80024c8 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800573a:	f7fc fec5 	bl	80024c8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e113      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800574c:	4b82      	ldr	r3, [pc, #520]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 800574e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ef      	bne.n	800573a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8107 	beq.w	8005972 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	2b02      	cmp	r3, #2
 800576a:	f040 80cb 	bne.w	8005904 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800576e:	4b7a      	ldr	r3, [pc, #488]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 0203 	and.w	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	429a      	cmp	r2, r3
 8005780:	d12c      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	3b01      	subs	r3, #1
 800578e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d123      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d11b      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d113      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	3b01      	subs	r3, #1
 80057c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d109      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	3b01      	subs	r3, #1
 80057d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d06d      	beq.n	80058b8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d068      	beq.n	80058b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057e2:	4b5d      	ldr	r3, [pc, #372]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057ee:	4b5a      	ldr	r3, [pc, #360]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e0ba      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057fe:	4b56      	ldr	r3, [pc, #344]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a55      	ldr	r2, [pc, #340]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005808:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800580a:	f7fc fe5d 	bl	80024c8 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005812:	f7fc fe59 	bl	80024c8 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0a7      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005824:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005830:	4b49      	ldr	r3, [pc, #292]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_RCC_OscConfig+0x828>)
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005840:	3a01      	subs	r2, #1
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	4311      	orrs	r1, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800584a:	0212      	lsls	r2, r2, #8
 800584c:	4311      	orrs	r1, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005852:	0852      	lsrs	r2, r2, #1
 8005854:	3a01      	subs	r2, #1
 8005856:	0552      	lsls	r2, r2, #21
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800585e:	0852      	lsrs	r2, r2, #1
 8005860:	3a01      	subs	r2, #1
 8005862:	0652      	lsls	r2, r2, #25
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800586a:	06d2      	lsls	r2, r2, #27
 800586c:	430a      	orrs	r2, r1
 800586e:	493a      	ldr	r1, [pc, #232]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005870:	4313      	orrs	r3, r2
 8005872:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005874:	4b38      	ldr	r3, [pc, #224]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a37      	ldr	r2, [pc, #220]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005880:	4b35      	ldr	r3, [pc, #212]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a34      	ldr	r2, [pc, #208]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800588c:	f7fc fe1c 	bl	80024c8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fc fe18 	bl	80024c8 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e066      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	4b2c      	ldr	r3, [pc, #176]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058b2:	e05e      	b.n	8005972 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e05d      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b8:	4b27      	ldr	r3, [pc, #156]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d156      	bne.n	8005972 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a23      	ldr	r2, [pc, #140]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058d0:	4b21      	ldr	r3, [pc, #132]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a20      	ldr	r2, [pc, #128]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058dc:	f7fc fdf4 	bl	80024c8 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e4:	f7fc fdf0 	bl	80024c8 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e03e      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x7b0>
 8005902:	e036      	b.n	8005972 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d031      	beq.n	800596e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005914:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005916:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d105      	bne.n	800592e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005928:	f023 0303 	bic.w	r3, r3, #3
 800592c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <HAL_RCC_OscConfig+0x824>)
 8005934:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593e:	f7fc fdc3 	bl	80024c8 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005944:	e00c      	b.n	8005960 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005946:	f7fc fdbf 	bl	80024c8 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d905      	bls.n	8005960 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e00d      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
 8005958:	40021000 	.word	0x40021000
 800595c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005960:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_OscConfig+0x848>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ec      	bne.n	8005946 <HAL_RCC_OscConfig+0x812>
 800596c:	e001      	b.n	8005972 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40021000 	.word	0x40021000

08005980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0c8      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005994:	4b66      	ldr	r3, [pc, #408]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d910      	bls.n	80059c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b63      	ldr	r3, [pc, #396]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 0207 	bic.w	r2, r3, #7
 80059aa:	4961      	ldr	r1, [pc, #388]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0b0      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d04c      	beq.n	8005a6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d8:	4b56      	ldr	r3, [pc, #344]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d121      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e09e      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f0:	4b50      	ldr	r3, [pc, #320]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d115      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e092      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a08:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e086      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a18:	4b46      	ldr	r3, [pc, #280]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e07e      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a28:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 0203 	bic.w	r2, r3, #3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	493f      	ldr	r1, [pc, #252]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3a:	f7fc fd45 	bl	80024c8 <HAL_GetTick>
 8005a3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a40:	e00a      	b.n	8005a58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a42:	f7fc fd41 	bl	80024c8 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e066      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 020c 	and.w	r2, r3, #12
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d1eb      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a76:	4b2f      	ldr	r3, [pc, #188]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	492c      	ldr	r1, [pc, #176]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a88:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d210      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a96:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 0207 	bic.w	r2, r3, #7
 8005a9e:	4924      	ldr	r1, [pc, #144]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa6:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <HAL_RCC_ClockConfig+0x1b0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e036      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4918      	ldr	r1, [pc, #96]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4910      	ldr	r1, [pc, #64]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af6:	f000 f825 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RCC_ClockConfig+0x1b4>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	490c      	ldr	r1, [pc, #48]	; (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc fc84 	bl	8002428 <HAL_InitTick>
 8005b20:	4603      	mov	r3, r0
 8005b22:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40021000 	.word	0x40021000
 8005b38:	0800d7e8 	.word	0x0800d7e8
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	20000004 	.word	0x20000004

08005b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b52:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x34>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d121      	bne.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d11e      	bne.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b78:	4b34      	ldr	r3, [pc, #208]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b84:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e005      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b94:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d102      	bne.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e004      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bc8:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d134      	bne.n	8005c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0xa6>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d003      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8005be8:	e005      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005bea:	4b1a      	ldr	r3, [pc, #104]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bec:	617b      	str	r3, [r7, #20]
      break;
 8005bee:	e005      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bf2:	617b      	str	r3, [r7, #20]
      break;
 8005bf4:	e002      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	617b      	str	r3, [r7, #20]
      break;
 8005bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	3301      	adds	r3, #1
 8005c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	fb02 f203 	mul.w	r2, r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	0e5b      	lsrs	r3, r3, #25
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3724      	adds	r7, #36	; 0x24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	0800d800 	.word	0x0800d800
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	018cba80 	.word	0x018cba80

08005c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000000 	.word	0x20000000

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4904      	ldr	r1, [pc, #16]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	0800d7f8 	.word	0x0800d7f8

08005ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ca4:	f7ff ffda 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0adb      	lsrs	r3, r3, #11
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4904      	ldr	r1, [pc, #16]	; (8005cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	0800d7f8 	.word	0x0800d7f8

08005ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ce4:	f7ff f8f0 	bl	8004ec8 <HAL_PWREx_GetVoltageRange>
 8005ce8:	6178      	str	r0, [r7, #20]
 8005cea:	e014      	b.n	8005d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf8:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d04:	f7ff f8e0 	bl	8004ec8 <HAL_PWREx_GetVoltageRange>
 8005d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d10b      	bne.n	8005d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b80      	cmp	r3, #128	; 0x80
 8005d22:	d919      	bls.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2ba0      	cmp	r3, #160	; 0xa0
 8005d28:	d902      	bls.n	8005d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e013      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d30:	2301      	movs	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	e010      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b80      	cmp	r3, #128	; 0x80
 8005d3a:	d902      	bls.n	8005d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e00a      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d102      	bne.n	8005d4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d48:	2302      	movs	r3, #2
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	e004      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b70      	cmp	r3, #112	; 0x70
 8005d52:	d101      	bne.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d54:	2301      	movs	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 0207 	bic.w	r2, r3, #7
 8005d60:	4909      	ldr	r1, [pc, #36]	; (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40022000 	.word	0x40022000

08005d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d94:	2300      	movs	r3, #0
 8005d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d041      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005db0:	d02a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005db2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005db6:	d824      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dbc:	d008      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dc2:	d81e      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dce:	e018      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dd0:	4b86      	ldr	r3, [pc, #536]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a85      	ldr	r2, [pc, #532]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ddc:	e015      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fb0f 	bl	8006408 <RCCEx_PLLSAI1_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dee:	e00c      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3320      	adds	r3, #32
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fbf8 	bl	80065ec <RCCEx_PLLSAI2_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	74fb      	strb	r3, [r7, #19]
      break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0a:	7cfb      	ldrb	r3, [r7, #19]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e10:	4b76      	ldr	r3, [pc, #472]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1e:	4973      	ldr	r1, [pc, #460]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e26:	e001      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d041      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e40:	d02a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e46:	d824      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e4c:	d008      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e52:	d81e      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e5c:	d010      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e5e:	e018      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e60:	4b62      	ldr	r3, [pc, #392]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a61      	ldr	r2, [pc, #388]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e6c:	e015      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fac7 	bl	8006408 <RCCEx_PLLSAI1_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e7e:	e00c      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3320      	adds	r3, #32
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fbb0 	bl	80065ec <RCCEx_PLLSAI2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e90:	e003      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	74fb      	strb	r3, [r7, #19]
      break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ea0:	4b52      	ldr	r3, [pc, #328]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eae:	494f      	ldr	r1, [pc, #316]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eb6:	e001      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7cfb      	ldrb	r3, [r7, #19]
 8005eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a0 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee4:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee8:	4a40      	ldr	r2, [pc, #256]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef0:	4b3e      	ldr	r3, [pc, #248]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efc:	2301      	movs	r3, #1
 8005efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f00:	4b3b      	ldr	r3, [pc, #236]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f0c:	f7fc fadc 	bl	80024c8 <HAL_GetTick>
 8005f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f12:	e009      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f14:	f7fc fad8 	bl	80024c8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d902      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	74fb      	strb	r3, [r7, #19]
        break;
 8005f26:	e005      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f28:	4b31      	ldr	r3, [pc, #196]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ef      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d15c      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01f      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d019      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f58:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f64:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f74:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f84:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fc fa97 	bl	80024c8 <HAL_GetTick>
 8005f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9c:	e00b      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7fc fa93 	bl	80024c8 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d902      	bls.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005fb4:	e006      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ec      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	4904      	ldr	r1, [pc, #16]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fe2:	e009      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	74bb      	strb	r3, [r7, #18]
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff8:	7c7b      	ldrb	r3, [r7, #17]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffe:	4ba6      	ldr	r3, [pc, #664]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	4aa5      	ldr	r2, [pc, #660]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006016:	4ba0      	ldr	r3, [pc, #640]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0203 	bic.w	r2, r3, #3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	499c      	ldr	r1, [pc, #624]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006038:	4b97      	ldr	r3, [pc, #604]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 020c 	bic.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	4994      	ldr	r1, [pc, #592]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800605a:	4b8f      	ldr	r3, [pc, #572]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	498b      	ldr	r1, [pc, #556]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800607c:	4b86      	ldr	r3, [pc, #536]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	4983      	ldr	r1, [pc, #524]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800609e:	4b7e      	ldr	r3, [pc, #504]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ac:	497a      	ldr	r1, [pc, #488]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060c0:	4b75      	ldr	r3, [pc, #468]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	4972      	ldr	r1, [pc, #456]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e2:	4b6d      	ldr	r3, [pc, #436]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	4969      	ldr	r1, [pc, #420]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006104:	4b64      	ldr	r3, [pc, #400]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006112:	4961      	ldr	r1, [pc, #388]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006126:	4b5c      	ldr	r3, [pc, #368]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	4958      	ldr	r1, [pc, #352]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006148:	4b53      	ldr	r3, [pc, #332]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	4950      	ldr	r1, [pc, #320]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800616a:	4b4b      	ldr	r3, [pc, #300]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	4947      	ldr	r1, [pc, #284]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800618c:	4b42      	ldr	r3, [pc, #264]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800618e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006192:	f023 0203 	bic.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	493f      	ldr	r1, [pc, #252]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d028      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061ae:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	4936      	ldr	r1, [pc, #216]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061cc:	d106      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ce:	4b32      	ldr	r3, [pc, #200]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4a31      	ldr	r2, [pc, #196]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d8:	60d3      	str	r3, [r2, #12]
 80061da:	e011      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e4:	d10c      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	2101      	movs	r1, #1
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f90b 	bl	8006408 <RCCEx_PLLSAI1_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d028      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800620c:	4b22      	ldr	r3, [pc, #136]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006212:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	491f      	ldr	r1, [pc, #124]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800622a:	d106      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006236:	60d3      	str	r3, [r2, #12]
 8006238:	e011      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006242:	d10c      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f8dc 	bl	8006408 <RCCEx_PLLSAI1_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006254:	7cfb      	ldrb	r3, [r7, #19]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800625a:	7cfb      	ldrb	r3, [r7, #19]
 800625c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006278:	4907      	ldr	r1, [pc, #28]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006288:	d108      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800628a:	4b03      	ldr	r3, [pc, #12]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4a02      	ldr	r2, [pc, #8]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006294:	60d3      	str	r3, [r2, #12]
 8006296:	e013      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006298:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	2101      	movs	r1, #1
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f8ab 	bl	8006408 <RCCEx_PLLSAI1_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062b6:	7cfb      	ldrb	r3, [r7, #19]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80062bc:	7cfb      	ldrb	r3, [r7, #19]
 80062be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02f      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062cc:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062da:	4929      	ldr	r1, [pc, #164]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ea:	d10d      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f888 	bl	8006408 <RCCEx_PLLSAI1_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d014      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	74bb      	strb	r3, [r7, #18]
 8006306:	e011      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006310:	d10c      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3320      	adds	r3, #32
 8006316:	2102      	movs	r1, #2
 8006318:	4618      	mov	r0, r3
 800631a:	f000 f967 	bl	80065ec <RCCEx_PLLSAI2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006338:	4b11      	ldr	r3, [pc, #68]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006348:	490d      	ldr	r1, [pc, #52]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800635c:	4b08      	ldr	r3, [pc, #32]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800636c:	4904      	ldr	r1, [pc, #16]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006374:	7cbb      	ldrb	r3, [r7, #18]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40021000 	.word	0x40021000

08006384 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800638c:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <HAL_RCCEx_CRSConfig+0x7c>)
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <HAL_RCCEx_CRSConfig+0x7c>)
 8006392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006396:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_RCCEx_CRSConfig+0x7c>)
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_RCCEx_CRSConfig+0x7c>)
 800639e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063a2:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80063cc:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <HAL_RCCEx_CRSConfig+0x80>)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <HAL_RCCEx_CRSConfig+0x80>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	4908      	ldr	r1, [pc, #32]	; (8006404 <HAL_RCCEx_CRSConfig+0x80>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <HAL_RCCEx_CRSConfig+0x80>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a06      	ldr	r2, [pc, #24]	; (8006404 <HAL_RCCEx_CRSConfig+0x80>)
 80063ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063f0:	6013      	str	r3, [r2, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	40006000 	.word	0x40006000

08006408 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006416:	4b74      	ldr	r3, [pc, #464]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006422:	4b71      	ldr	r3, [pc, #452]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0203 	and.w	r2, r3, #3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d10d      	bne.n	800644e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
       ||
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800643a:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
       ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d047      	beq.n	80064de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	73fb      	strb	r3, [r7, #15]
 8006452:	e044      	b.n	80064de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d018      	beq.n	800648e <RCCEx_PLLSAI1_Config+0x86>
 800645c:	2b03      	cmp	r3, #3
 800645e:	d825      	bhi.n	80064ac <RCCEx_PLLSAI1_Config+0xa4>
 8006460:	2b01      	cmp	r3, #1
 8006462:	d002      	beq.n	800646a <RCCEx_PLLSAI1_Config+0x62>
 8006464:	2b02      	cmp	r3, #2
 8006466:	d009      	beq.n	800647c <RCCEx_PLLSAI1_Config+0x74>
 8006468:	e020      	b.n	80064ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800646a:	4b5f      	ldr	r3, [pc, #380]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d11d      	bne.n	80064b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800647a:	e01a      	b.n	80064b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800647c:	4b5a      	ldr	r3, [pc, #360]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006484:	2b00      	cmp	r3, #0
 8006486:	d116      	bne.n	80064b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800648c:	e013      	b.n	80064b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800648e:	4b56      	ldr	r3, [pc, #344]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10f      	bne.n	80064ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064aa:	e006      	b.n	80064ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	e004      	b.n	80064bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064b2:	bf00      	nop
 80064b4:	e002      	b.n	80064bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10d      	bne.n	80064de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	430b      	orrs	r3, r1
 80064d8:	4943      	ldr	r1, [pc, #268]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d17c      	bne.n	80065de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064e4:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a3f      	ldr	r2, [pc, #252]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f0:	f7fb ffea 	bl	80024c8 <HAL_GetTick>
 80064f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064f6:	e009      	b.n	800650c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064f8:	f7fb ffe6 	bl	80024c8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d902      	bls.n	800650c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	73fb      	strb	r3, [r7, #15]
        break;
 800650a:	e005      	b.n	8006518 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ef      	bne.n	80064f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d15f      	bne.n	80065de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d110      	bne.n	8006546 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006524:	4b30      	ldr	r3, [pc, #192]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800652c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6892      	ldr	r2, [r2, #8]
 8006534:	0211      	lsls	r1, r2, #8
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	68d2      	ldr	r2, [r2, #12]
 800653a:	06d2      	lsls	r2, r2, #27
 800653c:	430a      	orrs	r2, r1
 800653e:	492a      	ldr	r1, [pc, #168]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006540:	4313      	orrs	r3, r2
 8006542:	610b      	str	r3, [r1, #16]
 8006544:	e027      	b.n	8006596 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d112      	bne.n	8006572 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800654c:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6892      	ldr	r2, [r2, #8]
 800655c:	0211      	lsls	r1, r2, #8
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6912      	ldr	r2, [r2, #16]
 8006562:	0852      	lsrs	r2, r2, #1
 8006564:	3a01      	subs	r2, #1
 8006566:	0552      	lsls	r2, r2, #21
 8006568:	430a      	orrs	r2, r1
 800656a:	491f      	ldr	r1, [pc, #124]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800656c:	4313      	orrs	r3, r2
 800656e:	610b      	str	r3, [r1, #16]
 8006570:	e011      	b.n	8006596 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800657a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6892      	ldr	r2, [r2, #8]
 8006582:	0211      	lsls	r1, r2, #8
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6952      	ldr	r2, [r2, #20]
 8006588:	0852      	lsrs	r2, r2, #1
 800658a:	3a01      	subs	r2, #1
 800658c:	0652      	lsls	r2, r2, #25
 800658e:	430a      	orrs	r2, r1
 8006590:	4915      	ldr	r1, [pc, #84]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006592:	4313      	orrs	r3, r2
 8006594:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800659c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a2:	f7fb ff91 	bl	80024c8 <HAL_GetTick>
 80065a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065a8:	e009      	b.n	80065be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065aa:	f7fb ff8d 	bl	80024c8 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d902      	bls.n	80065be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	73fb      	strb	r3, [r7, #15]
          break;
 80065bc:	e005      	b.n	80065ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0ef      	beq.n	80065aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	4903      	ldr	r1, [pc, #12]	; (80065e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40021000 	.word	0x40021000

080065ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065fa:	4b69      	ldr	r3, [pc, #420]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006606:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0203 	and.w	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d10d      	bne.n	8006632 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
       ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800661e:	4b60      	ldr	r3, [pc, #384]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
       ||
 800662e:	429a      	cmp	r2, r3
 8006630:	d047      	beq.n	80066c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e044      	b.n	80066c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d018      	beq.n	8006672 <RCCEx_PLLSAI2_Config+0x86>
 8006640:	2b03      	cmp	r3, #3
 8006642:	d825      	bhi.n	8006690 <RCCEx_PLLSAI2_Config+0xa4>
 8006644:	2b01      	cmp	r3, #1
 8006646:	d002      	beq.n	800664e <RCCEx_PLLSAI2_Config+0x62>
 8006648:	2b02      	cmp	r3, #2
 800664a:	d009      	beq.n	8006660 <RCCEx_PLLSAI2_Config+0x74>
 800664c:	e020      	b.n	8006690 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800664e:	4b54      	ldr	r3, [pc, #336]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d11d      	bne.n	8006696 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800665e:	e01a      	b.n	8006696 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006660:	4b4f      	ldr	r3, [pc, #316]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d116      	bne.n	800669a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006670:	e013      	b.n	800669a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006672:	4b4b      	ldr	r3, [pc, #300]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800667e:	4b48      	ldr	r3, [pc, #288]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800668e:	e006      	b.n	800669e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e004      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800669e:	bf00      	nop
    }

    if(status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066a6:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	430b      	orrs	r3, r1
 80066bc:	4938      	ldr	r1, [pc, #224]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d166      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066c8:	4b35      	ldr	r3, [pc, #212]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a34      	ldr	r2, [pc, #208]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d4:	f7fb fef8 	bl	80024c8 <HAL_GetTick>
 80066d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066da:	e009      	b.n	80066f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066dc:	f7fb fef4 	bl	80024c8 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d902      	bls.n	80066f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	73fb      	strb	r3, [r7, #15]
        break;
 80066ee:	e005      	b.n	80066fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066f0:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1ef      	bne.n	80066dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d149      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006708:	4b25      	ldr	r3, [pc, #148]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6892      	ldr	r2, [r2, #8]
 8006718:	0211      	lsls	r1, r2, #8
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68d2      	ldr	r2, [r2, #12]
 800671e:	06d2      	lsls	r2, r2, #27
 8006720:	430a      	orrs	r2, r1
 8006722:	491f      	ldr	r1, [pc, #124]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006724:	4313      	orrs	r3, r2
 8006726:	614b      	str	r3, [r1, #20]
 8006728:	e011      	b.n	800674e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800672a:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6892      	ldr	r2, [r2, #8]
 800673a:	0211      	lsls	r1, r2, #8
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6912      	ldr	r2, [r2, #16]
 8006740:	0852      	lsrs	r2, r2, #1
 8006742:	3a01      	subs	r2, #1
 8006744:	0652      	lsls	r2, r2, #25
 8006746:	430a      	orrs	r2, r1
 8006748:	4915      	ldr	r1, [pc, #84]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800674a:	4313      	orrs	r3, r2
 800674c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675a:	f7fb feb5 	bl	80024c8 <HAL_GetTick>
 800675e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006760:	e009      	b.n	8006776 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006762:	f7fb feb1 	bl	80024c8 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d902      	bls.n	8006776 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	73fb      	strb	r3, [r7, #15]
          break;
 8006774:	e005      	b.n	8006782 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0ef      	beq.n	8006762 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	4903      	ldr	r1, [pc, #12]	; (80067a0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006792:	4313      	orrs	r3, r2
 8006794:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40021000 	.word	0x40021000

080067a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e095      	b.n	80068e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d108      	bne.n	80067d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c6:	d009      	beq.n	80067dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	61da      	str	r2, [r3, #28]
 80067ce:	e005      	b.n	80067dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fc18 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800681c:	d902      	bls.n	8006824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e002      	b.n	800682a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006832:	d007      	beq.n	8006844 <HAL_SPI_Init+0xa0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683c:	d002      	beq.n	8006844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006886:	ea42 0103 	orr.w	r1, r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	f003 0204 	and.w	r2, r3, #4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068c0:	ea42 0103 	orr.w	r1, r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e040      	b.n	800697e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fb fbcf 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2224      	movs	r2, #36	; 0x24
 8006916:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0201 	bic.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f8c1 	bl	8006ab0 <UART_SetConfig>
 800692e:	4603      	mov	r3, r0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e022      	b.n	800697e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb3f 	bl	8006fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006954:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006964:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0201 	orr.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fbc6 	bl	8007108 <UART_CheckIdleState>
 800697c:	4603      	mov	r3, r0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b08a      	sub	sp, #40	; 0x28
 800698a:	af02      	add	r7, sp, #8
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699a:	2b20      	cmp	r3, #32
 800699c:	f040 8082 	bne.w	8006aa4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_UART_Transmit+0x26>
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e07a      	b.n	8006aa6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_UART_Transmit+0x38>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e073      	b.n	8006aa6 <HAL_UART_Transmit+0x120>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2221      	movs	r2, #33	; 0x21
 80069d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069d4:	f7fb fd78 	bl	80024c8 <HAL_GetTick>
 80069d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	88fa      	ldrh	r2, [r7, #6]
 80069de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f2:	d108      	bne.n	8006a06 <HAL_UART_Transmit+0x80>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	e003      	b.n	8006a0e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a16:	e02d      	b.n	8006a74 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fbb9 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e039      	b.n	8006aa6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	b292      	uxth	r2, r2
 8006a46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e008      	b.n	8006a62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1cb      	bne.n	8006a18 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2140      	movs	r1, #64	; 0x40
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fb85 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e005      	b.n	8006aa6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b5b0      	push	{r4, r5, r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4bad      	ldr	r3, [pc, #692]	; (8006d90 <UART_SetConfig+0x2e0>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	69f9      	ldr	r1, [r7, #28]
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4aa2      	ldr	r2, [pc, #648]	; (8006d94 <UART_SetConfig+0x2e4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a99      	ldr	r2, [pc, #612]	; (8006d98 <UART_SetConfig+0x2e8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d121      	bne.n	8006b7a <UART_SetConfig+0xca>
 8006b36:	4b99      	ldr	r3, [pc, #612]	; (8006d9c <UART_SetConfig+0x2ec>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d817      	bhi.n	8006b74 <UART_SetConfig+0xc4>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x9c>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b5d 	.word	0x08006b5d
 8006b50:	08006b69 	.word	0x08006b69
 8006b54:	08006b63 	.word	0x08006b63
 8006b58:	08006b6f 	.word	0x08006b6f
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	76fb      	strb	r3, [r7, #27]
 8006b60:	e0e7      	b.n	8006d32 <UART_SetConfig+0x282>
 8006b62:	2302      	movs	r3, #2
 8006b64:	76fb      	strb	r3, [r7, #27]
 8006b66:	e0e4      	b.n	8006d32 <UART_SetConfig+0x282>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	76fb      	strb	r3, [r7, #27]
 8006b6c:	e0e1      	b.n	8006d32 <UART_SetConfig+0x282>
 8006b6e:	2308      	movs	r3, #8
 8006b70:	76fb      	strb	r3, [r7, #27]
 8006b72:	e0de      	b.n	8006d32 <UART_SetConfig+0x282>
 8006b74:	2310      	movs	r3, #16
 8006b76:	76fb      	strb	r3, [r7, #27]
 8006b78:	e0db      	b.n	8006d32 <UART_SetConfig+0x282>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a88      	ldr	r2, [pc, #544]	; (8006da0 <UART_SetConfig+0x2f0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d132      	bne.n	8006bea <UART_SetConfig+0x13a>
 8006b84:	4b85      	ldr	r3, [pc, #532]	; (8006d9c <UART_SetConfig+0x2ec>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	f003 030c 	and.w	r3, r3, #12
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d828      	bhi.n	8006be4 <UART_SetConfig+0x134>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0xe8>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006be5 	.word	0x08006be5
 8006ba4:	08006be5 	.word	0x08006be5
 8006ba8:	08006bd9 	.word	0x08006bd9
 8006bac:	08006be5 	.word	0x08006be5
 8006bb0:	08006be5 	.word	0x08006be5
 8006bb4:	08006be5 	.word	0x08006be5
 8006bb8:	08006bd3 	.word	0x08006bd3
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006be5 	.word	0x08006be5
 8006bc8:	08006bdf 	.word	0x08006bdf
 8006bcc:	2300      	movs	r3, #0
 8006bce:	76fb      	strb	r3, [r7, #27]
 8006bd0:	e0af      	b.n	8006d32 <UART_SetConfig+0x282>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	76fb      	strb	r3, [r7, #27]
 8006bd6:	e0ac      	b.n	8006d32 <UART_SetConfig+0x282>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	76fb      	strb	r3, [r7, #27]
 8006bdc:	e0a9      	b.n	8006d32 <UART_SetConfig+0x282>
 8006bde:	2308      	movs	r3, #8
 8006be0:	76fb      	strb	r3, [r7, #27]
 8006be2:	e0a6      	b.n	8006d32 <UART_SetConfig+0x282>
 8006be4:	2310      	movs	r3, #16
 8006be6:	76fb      	strb	r3, [r7, #27]
 8006be8:	e0a3      	b.n	8006d32 <UART_SetConfig+0x282>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6d      	ldr	r2, [pc, #436]	; (8006da4 <UART_SetConfig+0x2f4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d120      	bne.n	8006c36 <UART_SetConfig+0x186>
 8006bf4:	4b69      	ldr	r3, [pc, #420]	; (8006d9c <UART_SetConfig+0x2ec>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bfe:	2b30      	cmp	r3, #48	; 0x30
 8006c00:	d013      	beq.n	8006c2a <UART_SetConfig+0x17a>
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	d814      	bhi.n	8006c30 <UART_SetConfig+0x180>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d009      	beq.n	8006c1e <UART_SetConfig+0x16e>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d810      	bhi.n	8006c30 <UART_SetConfig+0x180>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <UART_SetConfig+0x168>
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d006      	beq.n	8006c24 <UART_SetConfig+0x174>
 8006c16:	e00b      	b.n	8006c30 <UART_SetConfig+0x180>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	76fb      	strb	r3, [r7, #27]
 8006c1c:	e089      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	76fb      	strb	r3, [r7, #27]
 8006c22:	e086      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c24:	2304      	movs	r3, #4
 8006c26:	76fb      	strb	r3, [r7, #27]
 8006c28:	e083      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	76fb      	strb	r3, [r7, #27]
 8006c2e:	e080      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c30:	2310      	movs	r3, #16
 8006c32:	76fb      	strb	r3, [r7, #27]
 8006c34:	e07d      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5b      	ldr	r2, [pc, #364]	; (8006da8 <UART_SetConfig+0x2f8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d120      	bne.n	8006c82 <UART_SetConfig+0x1d2>
 8006c40:	4b56      	ldr	r3, [pc, #344]	; (8006d9c <UART_SetConfig+0x2ec>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c4c:	d013      	beq.n	8006c76 <UART_SetConfig+0x1c6>
 8006c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c50:	d814      	bhi.n	8006c7c <UART_SetConfig+0x1cc>
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d009      	beq.n	8006c6a <UART_SetConfig+0x1ba>
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d810      	bhi.n	8006c7c <UART_SetConfig+0x1cc>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <UART_SetConfig+0x1b4>
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d006      	beq.n	8006c70 <UART_SetConfig+0x1c0>
 8006c62:	e00b      	b.n	8006c7c <UART_SetConfig+0x1cc>
 8006c64:	2300      	movs	r3, #0
 8006c66:	76fb      	strb	r3, [r7, #27]
 8006c68:	e063      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	76fb      	strb	r3, [r7, #27]
 8006c6e:	e060      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c70:	2304      	movs	r3, #4
 8006c72:	76fb      	strb	r3, [r7, #27]
 8006c74:	e05d      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c76:	2308      	movs	r3, #8
 8006c78:	76fb      	strb	r3, [r7, #27]
 8006c7a:	e05a      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	76fb      	strb	r3, [r7, #27]
 8006c80:	e057      	b.n	8006d32 <UART_SetConfig+0x282>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a49      	ldr	r2, [pc, #292]	; (8006dac <UART_SetConfig+0x2fc>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d125      	bne.n	8006cd8 <UART_SetConfig+0x228>
 8006c8c:	4b43      	ldr	r3, [pc, #268]	; (8006d9c <UART_SetConfig+0x2ec>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9a:	d017      	beq.n	8006ccc <UART_SetConfig+0x21c>
 8006c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca0:	d817      	bhi.n	8006cd2 <UART_SetConfig+0x222>
 8006ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca6:	d00b      	beq.n	8006cc0 <UART_SetConfig+0x210>
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d811      	bhi.n	8006cd2 <UART_SetConfig+0x222>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <UART_SetConfig+0x20a>
 8006cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb6:	d006      	beq.n	8006cc6 <UART_SetConfig+0x216>
 8006cb8:	e00b      	b.n	8006cd2 <UART_SetConfig+0x222>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	76fb      	strb	r3, [r7, #27]
 8006cbe:	e038      	b.n	8006d32 <UART_SetConfig+0x282>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	76fb      	strb	r3, [r7, #27]
 8006cc4:	e035      	b.n	8006d32 <UART_SetConfig+0x282>
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	76fb      	strb	r3, [r7, #27]
 8006cca:	e032      	b.n	8006d32 <UART_SetConfig+0x282>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	76fb      	strb	r3, [r7, #27]
 8006cd0:	e02f      	b.n	8006d32 <UART_SetConfig+0x282>
 8006cd2:	2310      	movs	r3, #16
 8006cd4:	76fb      	strb	r3, [r7, #27]
 8006cd6:	e02c      	b.n	8006d32 <UART_SetConfig+0x282>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	; (8006d94 <UART_SetConfig+0x2e4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d125      	bne.n	8006d2e <UART_SetConfig+0x27e>
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <UART_SetConfig+0x2ec>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf0:	d017      	beq.n	8006d22 <UART_SetConfig+0x272>
 8006cf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf6:	d817      	bhi.n	8006d28 <UART_SetConfig+0x278>
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d00b      	beq.n	8006d16 <UART_SetConfig+0x266>
 8006cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d02:	d811      	bhi.n	8006d28 <UART_SetConfig+0x278>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <UART_SetConfig+0x260>
 8006d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0c:	d006      	beq.n	8006d1c <UART_SetConfig+0x26c>
 8006d0e:	e00b      	b.n	8006d28 <UART_SetConfig+0x278>
 8006d10:	2300      	movs	r3, #0
 8006d12:	76fb      	strb	r3, [r7, #27]
 8006d14:	e00d      	b.n	8006d32 <UART_SetConfig+0x282>
 8006d16:	2302      	movs	r3, #2
 8006d18:	76fb      	strb	r3, [r7, #27]
 8006d1a:	e00a      	b.n	8006d32 <UART_SetConfig+0x282>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e007      	b.n	8006d32 <UART_SetConfig+0x282>
 8006d22:	2308      	movs	r3, #8
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e004      	b.n	8006d32 <UART_SetConfig+0x282>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	76fb      	strb	r3, [r7, #27]
 8006d2c:	e001      	b.n	8006d32 <UART_SetConfig+0x282>
 8006d2e:	2310      	movs	r3, #16
 8006d30:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <UART_SetConfig+0x2e4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	f040 8087 	bne.w	8006e4c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d3e:	7efb      	ldrb	r3, [r7, #27]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d837      	bhi.n	8006db4 <UART_SetConfig+0x304>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <UART_SetConfig+0x29c>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006db5 	.word	0x08006db5
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006db5 	.word	0x08006db5
 8006d5c:	08006d7f 	.word	0x08006d7f
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006db5 	.word	0x08006db5
 8006d68:	08006db5 	.word	0x08006db5
 8006d6c:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fe ff80 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8006d74:	6178      	str	r0, [r7, #20]
        break;
 8006d76:	e022      	b.n	8006dbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <UART_SetConfig+0x300>)
 8006d7a:	617b      	str	r3, [r7, #20]
        break;
 8006d7c:	e01f      	b.n	8006dbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fe fee1 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8006d82:	6178      	str	r0, [r7, #20]
        break;
 8006d84:	e01b      	b.n	8006dbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8a:	617b      	str	r3, [r7, #20]
        break;
 8006d8c:	e017      	b.n	8006dbe <UART_SetConfig+0x30e>
 8006d8e:	bf00      	nop
 8006d90:	efff69f3 	.word	0xefff69f3
 8006d94:	40008000 	.word	0x40008000
 8006d98:	40013800 	.word	0x40013800
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40004400 	.word	0x40004400
 8006da4:	40004800 	.word	0x40004800
 8006da8:	40004c00 	.word	0x40004c00
 8006dac:	40005000 	.word	0x40005000
 8006db0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	76bb      	strb	r3, [r7, #26]
        break;
 8006dbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80f1 	beq.w	8006fa8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d305      	bcc.n	8006de2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d902      	bls.n	8006de8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	76bb      	strb	r3, [r7, #26]
 8006de6:	e0df      	b.n	8006fa8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	020b      	lsls	r3, r1, #8
 8006dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dfe:	0202      	lsls	r2, r0, #8
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	6849      	ldr	r1, [r1, #4]
 8006e04:	0849      	lsrs	r1, r1, #1
 8006e06:	4608      	mov	r0, r1
 8006e08:	f04f 0100 	mov.w	r1, #0
 8006e0c:	1814      	adds	r4, r2, r0
 8006e0e:	eb43 0501 	adc.w	r5, r3, r1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 ff52 	bl	8000cc8 <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4613      	mov	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e32:	d308      	bcc.n	8006e46 <UART_SetConfig+0x396>
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3a:	d204      	bcs.n	8006e46 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	60da      	str	r2, [r3, #12]
 8006e44:	e0b0      	b.n	8006fa8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	76bb      	strb	r3, [r7, #26]
 8006e4a:	e0ad      	b.n	8006fa8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e54:	d15c      	bne.n	8006f10 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006e56:	7efb      	ldrb	r3, [r7, #27]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d828      	bhi.n	8006eae <UART_SetConfig+0x3fe>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x3b4>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e91 	.word	0x08006e91
 8006e6c:	08006e99 	.word	0x08006e99
 8006e70:	08006eaf 	.word	0x08006eaf
 8006e74:	08006e9f 	.word	0x08006e9f
 8006e78:	08006eaf 	.word	0x08006eaf
 8006e7c:	08006eaf 	.word	0x08006eaf
 8006e80:	08006eaf 	.word	0x08006eaf
 8006e84:	08006ea7 	.word	0x08006ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fe fef4 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	6178      	str	r0, [r7, #20]
        break;
 8006e8e:	e013      	b.n	8006eb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e90:	f7fe ff06 	bl	8005ca0 <HAL_RCC_GetPCLK2Freq>
 8006e94:	6178      	str	r0, [r7, #20]
        break;
 8006e96:	e00f      	b.n	8006eb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e98:	4b49      	ldr	r3, [pc, #292]	; (8006fc0 <UART_SetConfig+0x510>)
 8006e9a:	617b      	str	r3, [r7, #20]
        break;
 8006e9c:	e00c      	b.n	8006eb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9e:	f7fe fe51 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8006ea2:	6178      	str	r0, [r7, #20]
        break;
 8006ea4:	e008      	b.n	8006eb8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eaa:	617b      	str	r3, [r7, #20]
        break;
 8006eac:	e004      	b.n	8006eb8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	76bb      	strb	r3, [r7, #26]
        break;
 8006eb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d074      	beq.n	8006fa8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	005a      	lsls	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	441a      	add	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b0f      	cmp	r3, #15
 8006eda:	d916      	bls.n	8006f0a <UART_SetConfig+0x45a>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee2:	d212      	bcs.n	8006f0a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f023 030f 	bic.w	r3, r3, #15
 8006eec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	89fb      	ldrh	r3, [r7, #14]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	89fa      	ldrh	r2, [r7, #14]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e04e      	b.n	8006fa8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	76bb      	strb	r3, [r7, #26]
 8006f0e:	e04b      	b.n	8006fa8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f10:	7efb      	ldrb	r3, [r7, #27]
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d827      	bhi.n	8006f66 <UART_SetConfig+0x4b6>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x46c>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f49 	.word	0x08006f49
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f67 	.word	0x08006f67
 8006f2c:	08006f57 	.word	0x08006f57
 8006f30:	08006f67 	.word	0x08006f67
 8006f34:	08006f67 	.word	0x08006f67
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f5f 	.word	0x08006f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f40:	f7fe fe98 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8006f44:	6178      	str	r0, [r7, #20]
        break;
 8006f46:	e013      	b.n	8006f70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f48:	f7fe feaa 	bl	8005ca0 <HAL_RCC_GetPCLK2Freq>
 8006f4c:	6178      	str	r0, [r7, #20]
        break;
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f50:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <UART_SetConfig+0x510>)
 8006f52:	617b      	str	r3, [r7, #20]
        break;
 8006f54:	e00c      	b.n	8006f70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f56:	f7fe fdf5 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8006f5a:	6178      	str	r0, [r7, #20]
        break;
 8006f5c:	e008      	b.n	8006f70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f62:	617b      	str	r3, [r7, #20]
        break;
 8006f64:	e004      	b.n	8006f70 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	76bb      	strb	r3, [r7, #26]
        break;
 8006f6e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d018      	beq.n	8006fa8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	085a      	lsrs	r2, r3, #1
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	441a      	add	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d908      	bls.n	8006fa4 <UART_SetConfig+0x4f4>
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d204      	bcs.n	8006fa4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e001      	b.n	8006fa8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006fb4:	7ebb      	ldrb	r3, [r7, #26]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	00f42400 	.word	0x00f42400

08006fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01a      	beq.n	80070da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c2:	d10a      	bne.n	80070da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af02      	add	r7, sp, #8
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007118:	f7fb f9d6 	bl	80024c8 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b08      	cmp	r3, #8
 800712a:	d10e      	bne.n	800714a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800712c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f82d 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e023      	b.n	8007192 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b04      	cmp	r3, #4
 8007156:	d10e      	bne.n	8007176 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f817 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e00d      	b.n	8007192 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071aa:	e05e      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b2:	d05a      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b4:	f7fb f988 	bl	80024c8 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <UART_WaitOnFlagUntilTimeout+0x30>
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11b      	bne.n	8007202 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e043      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02c      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721e:	d124      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007228:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007238:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0201 	bic.w	r2, r2, #1
 8007248:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e00f      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d091      	beq.n	80071ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	0000      	movs	r0, r0
 8007294:	0000      	movs	r0, r0
	...

08007298 <curr_readData>:
#define CUR_RMON	75000.0


/* FUNCTIONS */

void curr_readData(ADC_HandleTypeDef *hand, int dev) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	//start ADC conversion
	HAL_ADC_Start(hand);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb fcde 	bl	8002c64 <HAL_ADC_Start>

	//poll ADC peripheral
	HAL_ADC_PollForConversion(hand, 1);
 80072a8:	2101      	movs	r1, #1
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fb fdc8 	bl	8002e40 <HAL_ADC_PollForConversion>

	//read ADC conversion result
	uint16_t raw_val = HAL_ADC_GetValue(hand);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fb fe9d 	bl	8002ff0 <HAL_ADC_GetValue>
 80072b6:	4603      	mov	r3, r0
 80072b8:	81fb      	strh	r3, [r7, #14]

	//stop ADC conversion
	HAL_ADC_Stop(hand);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fb fd8c 	bl	8002dd8 <HAL_ADC_Stop>

	//compute current consumption from ADC vals in [mA]
	float val = (3000 * (float)VREFINT_CAL / (float)raw_val) / 1000;
 80072c0:	4b21      	ldr	r3, [pc, #132]	; (8007348 <curr_readData+0xb0>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072cc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800734c <curr_readData+0xb4>
 80072d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80072d4:	89fb      	ldrh	r3, [r7, #14]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8007350 <curr_readData+0xb8>
 80072e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072ea:	edc7 7a02 	vstr	s15, [r7, #8]
	val = (val - CUR_IOS * CUR_RMON) / (CUR_GAIN * CUR_RMON);
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7f9 f94a 	bl	8000588 <__aeabi_f2d>
 80072f4:	a310      	add	r3, pc, #64	; (adr r3, 8007338 <curr_readData+0xa0>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ffe5 	bl	80002c8 <__aeabi_dsub>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	a30e      	add	r3, pc, #56	; (adr r3, 8007340 <curr_readData+0xa8>)
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f7f9 fabe 	bl	800088c <__aeabi_ddiv>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4610      	mov	r0, r2
 8007316:	4619      	mov	r1, r3
 8007318:	f7f9 fc86 	bl	8000c28 <__aeabi_d2f>
 800731c:	4603      	mov	r3, r0
 800731e:	60bb      	str	r3, [r7, #8]

	log_data("adc", dev, "curr", "NA", val);
 8007320:	ed97 0a02 	vldr	s0, [r7, #8]
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <curr_readData+0xbc>)
 8007326:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <curr_readData+0xc0>)
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	480c      	ldr	r0, [pc, #48]	; (800735c <curr_readData+0xc4>)
 800732c:	f001 fb14 	bl	8008958 <log_data>
}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	eb851eb8 	.word	0xeb851eb8
 800733c:	3faeb851 	.word	0x3faeb851
 8007340:	33333333 	.word	0x33333333
 8007344:	400f3333 	.word	0x400f3333
 8007348:	1fff75aa 	.word	0x1fff75aa
 800734c:	453b8000 	.word	0x453b8000
 8007350:	447a0000 	.word	0x447a0000
 8007354:	0800d410 	.word	0x0800d410
 8007358:	0800d414 	.word	0x0800d414
 800735c:	0800d41c 	.word	0x0800d41c

08007360 <lsm6ds3_powerReset>:
#define T_Off		25.0	// degC


/* SUPPORT FUNCTIONS */

void lsm6ds3_powerReset() {
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8007364:	2200      	movs	r2, #0
 8007366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800736a:	480b      	ldr	r0, [pc, #44]	; (8007398 <lsm6ds3_powerReset+0x38>)
 800736c:	f7fd f822 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8007370:	20c8      	movs	r0, #200	; 0xc8
 8007372:	f7fb f8b5 	bl	80024e0 <HAL_Delay>

	// connect I2C bus
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_SET);
 8007376:	2201      	movs	r2, #1
 8007378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800737c:	4806      	ldr	r0, [pc, #24]	; (8007398 <lsm6ds3_powerReset+0x38>)
 800737e:	f7fd f819 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007382:	2064      	movs	r0, #100	; 0x64
 8007384:	f7fb f8ac 	bl	80024e0 <HAL_Delay>

	log_info("lsm6ds3_powerReset", -1);
 8007388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800738c:	4803      	ldr	r0, [pc, #12]	; (800739c <lsm6ds3_powerReset+0x3c>)
 800738e:	f001 fa8b 	bl	80088a8 <log_info>
}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	48000400 	.word	0x48000400
 800739c:	0800d420 	.word	0x0800d420

080073a0 <lsm6ds3_waitMeasure>:


int lsm6ds3_waitMeasure(I2C_HandleTypeDef *hand, int type, int dev) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af04      	add	r7, sp, #16
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]

	// periodically check status register
	while(cnt*5 < TIMEOUT) {
 80073b0:	e03e      	b.n	8007430 <lsm6ds3_waitMeasure+0x90>
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
 80073b2:	236a      	movs	r3, #106	; 0x6a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	b299      	uxth	r1, r3
 80073ba:	2364      	movs	r3, #100	; 0x64
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	2301      	movs	r3, #1
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	f107 0312 	add.w	r3, r7, #18
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2301      	movs	r3, #1
 80073ca:	221e      	movs	r2, #30
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7fd f9ad 	bl	800472c <HAL_I2C_Mem_Read>
 80073d2:	4603      	mov	r3, r0
 80073d4:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK) log_error("lsm6ds3_waitMeasure", dev, 0, ret);
 80073d6:	7cfb      	ldrb	r3, [r7, #19]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <lsm6ds3_waitMeasure+0x48>
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	2200      	movs	r2, #0
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4819      	ldr	r0, [pc, #100]	; (8007448 <lsm6ds3_waitMeasure+0xa8>)
 80073e4:	f001 fa80 	bl	80088e8 <log_error>

		// check buffer (0:acc, 1:gyro, 2:temp)
		if(type == 0 && (buff & (1 << RDY_XLDA))) return 0;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <lsm6ds3_waitMeasure+0x5c>
 80073ee:	7cbb      	ldrb	r3, [r7, #18]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <lsm6ds3_waitMeasure+0x5c>
 80073f8:	2300      	movs	r3, #0
 80073fa:	e021      	b.n	8007440 <lsm6ds3_waitMeasure+0xa0>
		else if(type == 1 && (buff & (1 << RDY_GDA))) return 0;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d106      	bne.n	8007410 <lsm6ds3_waitMeasure+0x70>
 8007402:	7cbb      	ldrb	r3, [r7, #18]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <lsm6ds3_waitMeasure+0x70>
 800740c:	2300      	movs	r3, #0
 800740e:	e017      	b.n	8007440 <lsm6ds3_waitMeasure+0xa0>
		else if(type == 2 && (buff & (1 << RDY_TDA))) return 0;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d106      	bne.n	8007424 <lsm6ds3_waitMeasure+0x84>
 8007416:	7cbb      	ldrb	r3, [r7, #18]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <lsm6ds3_waitMeasure+0x84>
 8007420:	2300      	movs	r3, #0
 8007422:	e00d      	b.n	8007440 <lsm6ds3_waitMeasure+0xa0>

		// wait 5ms and increase counter
		HAL_Delay(5);
 8007424:	2005      	movs	r0, #5
 8007426:	f7fb f85b 	bl	80024e0 <HAL_Delay>
		cnt++;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	3301      	adds	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
	while(cnt*5 < TIMEOUT) {
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	2b4f      	cmp	r3, #79	; 0x4f
 800743a:	ddba      	ble.n	80073b2 <lsm6ds3_waitMeasure+0x12>
	}

	// timeout error
	return -1;
 800743c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	0800d434 	.word	0x0800d434

0800744c <lsm6ds3_processBuff>:


int16_t lsm6ds3_processBuff(uint8_t *buff, int data) {
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	return (int16_t)buff[0 + 2*data] | (int16_t)(buff[1 + 2*data] << 8);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	b21a      	sxth	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	3301      	adds	r3, #1
 800746a:	4619      	mov	r1, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	440b      	add	r3, r1
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	b21b      	sxth	r3, r3
 8007476:	4313      	orrs	r3, r2
 8007478:	b21b      	sxth	r3, r3
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <lsm6ds3_configure>:


/* MAIN FUNCTIONS */

void lsm6ds3_configure(I2C_HandleTypeDef *hand, int dev) {
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af04      	add	r7, sp, #16
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	// reset device
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL3, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
 8007492:	236a      	movs	r3, #106	; 0x6a
 8007494:	b29b      	uxth	r3, r3
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	b299      	uxth	r1, r3
 800749a:	2364      	movs	r3, #100	; 0x64
 800749c:	9302      	str	r3, [sp, #8]
 800749e:	2301      	movs	r3, #1
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	4b28      	ldr	r3, [pc, #160]	; (8007544 <lsm6ds3_configure+0xbc>)
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	2301      	movs	r3, #1
 80074a8:	2212      	movs	r2, #18
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fd f82a 	bl	8004504 <HAL_I2C_Mem_Write>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("lsm6ds3_configure", dev, 0, ret);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <lsm6ds3_configure+0x3e>
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2200      	movs	r2, #0
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	4821      	ldr	r0, [pc, #132]	; (8007548 <lsm6ds3_configure+0xc0>)
 80074c2:	f001 fa11 	bl	80088e8 <log_error>
	HAL_Delay(100);
 80074c6:	2064      	movs	r0, #100	; 0x64
 80074c8:	f7fb f80a 	bl	80024e0 <HAL_Delay>

	// enable accelerometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_ODR_XL, 1, I2C_TIMEOUT);
 80074cc:	236a      	movs	r3, #106	; 0x6a
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	b299      	uxth	r1, r3
 80074d4:	2364      	movs	r3, #100	; 0x64
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	2301      	movs	r3, #1
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	4b1b      	ldr	r3, [pc, #108]	; (800754c <lsm6ds3_configure+0xc4>)
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2301      	movs	r3, #1
 80074e2:	2210      	movs	r2, #16
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fd f80d 	bl	8004504 <HAL_I2C_Mem_Write>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("lsm6ds3_configure", dev, 1, ret);
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <lsm6ds3_configure+0x78>
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2201      	movs	r2, #1
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	4813      	ldr	r0, [pc, #76]	; (8007548 <lsm6ds3_configure+0xc0>)
 80074fc:	f001 f9f4 	bl	80088e8 <log_error>

	// enable gyroscope
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL2, 1, &CMD_ODR_G, 1, I2C_TIMEOUT);
 8007500:	236a      	movs	r3, #106	; 0x6a
 8007502:	b29b      	uxth	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b299      	uxth	r1, r3
 8007508:	2364      	movs	r3, #100	; 0x64
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	2301      	movs	r3, #1
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <lsm6ds3_configure+0xc8>)
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	2301      	movs	r3, #1
 8007516:	2211      	movs	r2, #17
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fc fff3 	bl	8004504 <HAL_I2C_Mem_Write>
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("lsm6ds3_configure", dev, 2, ret);
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <lsm6ds3_configure+0xac>
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	2202      	movs	r2, #2
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	4806      	ldr	r0, [pc, #24]	; (8007548 <lsm6ds3_configure+0xc0>)
 8007530:	f001 f9da 	bl	80088e8 <log_error>

	log_info("lsm6ds3_configure", dev);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	4804      	ldr	r0, [pc, #16]	; (8007548 <lsm6ds3_configure+0xc0>)
 8007538:	f001 f9b6 	bl	80088a8 <log_info>
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000009 	.word	0x20000009
 8007548:	0800d448 	.word	0x0800d448
 800754c:	2000000b 	.word	0x2000000b
 8007550:	2000000a 	.word	0x2000000a

08007554 <lsm6ds3_readManufac>:


void lsm6ds3_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
 800755e:	236a      	movs	r3, #106	; 0x6a
 8007560:	b29b      	uxth	r3, r3
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	b299      	uxth	r1, r3
 8007566:	2364      	movs	r3, #100	; 0x64
 8007568:	9302      	str	r3, [sp, #8]
 800756a:	2301      	movs	r3, #1
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	f107 030e 	add.w	r3, r7, #14
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	2301      	movs	r3, #1
 8007576:	220f      	movs	r2, #15
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fd f8d7 	bl	800472c <HAL_I2C_Mem_Read>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("lsm6ds3_readManufac", dev, 0, ret);
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <lsm6ds3_readManufac+0x40>
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2200      	movs	r2, #0
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	480c      	ldr	r0, [pc, #48]	; (80075c0 <lsm6ds3_readManufac+0x6c>)
 8007590:	f001 f9aa 	bl	80088e8 <log_error>

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
 8007594:	f107 0208 	add.w	r2, r7, #8
 8007598:	f107 030e 	add.w	r3, r7, #14
 800759c:	2101      	movs	r1, #1
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 f8ec 	bl	800877c <addr2str>
	log_data("lsm6ds3", dev, "dev_id", tmp, NAN);
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80075c4 <lsm6ds3_readManufac+0x70>
 80075ac:	4a06      	ldr	r2, [pc, #24]	; (80075c8 <lsm6ds3_readManufac+0x74>)
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	4806      	ldr	r0, [pc, #24]	; (80075cc <lsm6ds3_readManufac+0x78>)
 80075b2:	f001 f9d1 	bl	8008958 <log_data>
}
 80075b6:	bf00      	nop
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	0800d45c 	.word	0x0800d45c
 80075c4:	7fc00000 	.word	0x7fc00000
 80075c8:	0800d470 	.word	0x0800d470
 80075cc:	0800d478 	.word	0x0800d478

080075d0 <lsm6ds3_readAccData>:


void lsm6ds3_readAccData(I2C_HandleTypeDef *hand, int dev) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08e      	sub	sp, #56	; 0x38
 80075d4:	af04      	add	r7, sp, #16
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 0, dev);
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	2100      	movs	r1, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fede 	bl	80073a0 <lsm6ds3_waitMeasure>
 80075e4:	6238      	str	r0, [r7, #32]
	if(waitRet != 0) log_error("lsm6ds3_readAccData", dev, 0, 4);
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <lsm6ds3_readAccData+0x28>
 80075ec:	2304      	movs	r3, #4
 80075ee:	2200      	movs	r2, #0
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	4837      	ldr	r0, [pc, #220]	; (80076d0 <lsm6ds3_readAccData+0x100>)
 80075f4:	f001 f978 	bl	80088e8 <log_error>

	// read accelerometer register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ACC, 1, buff, 6, I2C_TIMEOUT);
 80075f8:	236a      	movs	r3, #106	; 0x6a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	b299      	uxth	r1, r3
 8007600:	2364      	movs	r3, #100	; 0x64
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	2306      	movs	r3, #6
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	2301      	movs	r3, #1
 8007610:	2228      	movs	r2, #40	; 0x28
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fd f88a 	bl	800472c <HAL_I2C_Mem_Read>
 8007618:	4603      	mov	r3, r0
 800761a:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) log_error("lsm6ds3_readAccData", dev, 1, ret);
 800761c:	7ffb      	ldrb	r3, [r7, #31]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <lsm6ds3_readAccData+0x5e>
 8007622:	7ffb      	ldrb	r3, [r7, #31]
 8007624:	2201      	movs	r2, #1
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	4829      	ldr	r0, [pc, #164]	; (80076d0 <lsm6ds3_readAccData+0x100>)
 800762a:	f001 f95d 	bl	80088e8 <log_error>

	// process accelerometer data
	float val[3];
	for(int i=0; i<3; i++) {
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
 8007632:	e024      	b.n	800767e <lsm6ds3_readAccData+0xae>
		val[i] = (float)lsm6ds3_processBuff(buff, i) * (LA_So / 1000) * (LA_FS / 2);
 8007634:	f107 0318 	add.w	r3, r7, #24
 8007638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff ff06 	bl	800744c <lsm6ds3_processBuff>
 8007640:	4603      	mov	r3, r0
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800764a:	ee17 0a90 	vmov	r0, s15
 800764e:	f7f8 ff9b 	bl	8000588 <__aeabi_f2d>
 8007652:	a31d      	add	r3, pc, #116	; (adr r3, 80076c8 <lsm6ds3_readAccData+0xf8>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f7f8 ffee 	bl	8000638 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	f7f9 fae0 	bl	8000c28 <__aeabi_d2f>
 8007668:	4602      	mov	r2, r0
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007672:	440b      	add	r3, r1
 8007674:	3b1c      	subs	r3, #28
 8007676:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	3301      	adds	r3, #1
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	2b02      	cmp	r3, #2
 8007682:	ddd7      	ble.n	8007634 <lsm6ds3_readAccData+0x64>
	}

	log_data("lsm6ds3", dev, "acc_x", "NA", val[0]);
 8007684:	edd7 7a03 	vldr	s15, [r7, #12]
 8007688:	eeb0 0a67 	vmov.f32	s0, s15
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <lsm6ds3_readAccData+0x104>)
 800768e:	4a12      	ldr	r2, [pc, #72]	; (80076d8 <lsm6ds3_readAccData+0x108>)
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	4812      	ldr	r0, [pc, #72]	; (80076dc <lsm6ds3_readAccData+0x10c>)
 8007694:	f001 f960 	bl	8008958 <log_data>
	log_data("lsm6ds3", dev, "acc_y", "NA", val[1]);
 8007698:	edd7 7a04 	vldr	s15, [r7, #16]
 800769c:	eeb0 0a67 	vmov.f32	s0, s15
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <lsm6ds3_readAccData+0x104>)
 80076a2:	4a0f      	ldr	r2, [pc, #60]	; (80076e0 <lsm6ds3_readAccData+0x110>)
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	480d      	ldr	r0, [pc, #52]	; (80076dc <lsm6ds3_readAccData+0x10c>)
 80076a8:	f001 f956 	bl	8008958 <log_data>
	log_data("lsm6ds3", dev, "acc_z", "NA", val[2]);
 80076ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80076b0:	eeb0 0a67 	vmov.f32	s0, s15
 80076b4:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <lsm6ds3_readAccData+0x104>)
 80076b6:	4a0b      	ldr	r2, [pc, #44]	; (80076e4 <lsm6ds3_readAccData+0x114>)
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <lsm6ds3_readAccData+0x10c>)
 80076bc:	f001 f94c 	bl	8008958 <log_data>
}
 80076c0:	bf00      	nop
 80076c2:	3728      	adds	r7, #40	; 0x28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	0a5accd5 	.word	0x0a5accd5
 80076cc:	3f0ffb48 	.word	0x3f0ffb48
 80076d0:	0800d480 	.word	0x0800d480
 80076d4:	0800d494 	.word	0x0800d494
 80076d8:	0800d498 	.word	0x0800d498
 80076dc:	0800d478 	.word	0x0800d478
 80076e0:	0800d4a0 	.word	0x0800d4a0
 80076e4:	0800d4a8 	.word	0x0800d4a8

080076e8 <lsm6ds3_readGyroData>:


void lsm6ds3_readGyroData(I2C_HandleTypeDef *hand, int dev) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08e      	sub	sp, #56	; 0x38
 80076ec:	af04      	add	r7, sp, #16
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 1, dev);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	2101      	movs	r1, #1
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff fe52 	bl	80073a0 <lsm6ds3_waitMeasure>
 80076fc:	6238      	str	r0, [r7, #32]
	if(waitRet != 0) log_error("lsm6ds3_readGyroData", dev, 0, 4);
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <lsm6ds3_readGyroData+0x28>
 8007704:	2304      	movs	r3, #4
 8007706:	2200      	movs	r2, #0
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	4837      	ldr	r0, [pc, #220]	; (80077e8 <lsm6ds3_readGyroData+0x100>)
 800770c:	f001 f8ec 	bl	80088e8 <log_error>

	// read gyroscope register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_GYRO, 1, buff, 6, I2C_TIMEOUT);
 8007710:	236a      	movs	r3, #106	; 0x6a
 8007712:	b29b      	uxth	r3, r3
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	b299      	uxth	r1, r3
 8007718:	2364      	movs	r3, #100	; 0x64
 800771a:	9302      	str	r3, [sp, #8]
 800771c:	2306      	movs	r3, #6
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f107 0318 	add.w	r3, r7, #24
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2301      	movs	r3, #1
 8007728:	2222      	movs	r2, #34	; 0x22
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fc fffe 	bl	800472c <HAL_I2C_Mem_Read>
 8007730:	4603      	mov	r3, r0
 8007732:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) log_error("lsm6ds3_readGyroData", dev, 1, ret);
 8007734:	7ffb      	ldrb	r3, [r7, #31]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <lsm6ds3_readGyroData+0x5e>
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	2201      	movs	r2, #1
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	4829      	ldr	r0, [pc, #164]	; (80077e8 <lsm6ds3_readGyroData+0x100>)
 8007742:	f001 f8d1 	bl	80088e8 <log_error>

	// process gyroscope data
	float val[3];
	for(int i=0; i<3; i++) {
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
 800774a:	e024      	b.n	8007796 <lsm6ds3_readGyroData+0xae>
		val[i] = (float)lsm6ds3_processBuff(buff, i) * (G_So / 1000) * (G_FS / 125);
 800774c:	f107 0318 	add.w	r3, r7, #24
 8007750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fe7a 	bl	800744c <lsm6ds3_processBuff>
 8007758:	4603      	mov	r3, r0
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007762:	ee17 0a90 	vmov	r0, s15
 8007766:	f7f8 ff0f 	bl	8000588 <__aeabi_f2d>
 800776a:	a31d      	add	r3, pc, #116	; (adr r3, 80077e0 <lsm6ds3_readGyroData+0xf8>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 ff62 	bl	8000638 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4610      	mov	r0, r2
 800777a:	4619      	mov	r1, r3
 800777c:	f7f9 fa54 	bl	8000c28 <__aeabi_d2f>
 8007780:	4602      	mov	r2, r0
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800778a:	440b      	add	r3, r1
 800778c:	3b1c      	subs	r3, #28
 800778e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	3301      	adds	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	2b02      	cmp	r3, #2
 800779a:	ddd7      	ble.n	800774c <lsm6ds3_readGyroData+0x64>
	}

	log_data("lsm6ds3", dev, "gyro_x", "NA", val[0]);
 800779c:	edd7 7a03 	vldr	s15, [r7, #12]
 80077a0:	eeb0 0a67 	vmov.f32	s0, s15
 80077a4:	4b11      	ldr	r3, [pc, #68]	; (80077ec <lsm6ds3_readGyroData+0x104>)
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <lsm6ds3_readGyroData+0x108>)
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	4812      	ldr	r0, [pc, #72]	; (80077f4 <lsm6ds3_readGyroData+0x10c>)
 80077ac:	f001 f8d4 	bl	8008958 <log_data>
	log_data("lsm6ds3", dev, "gyro_y", "NA", val[1]);
 80077b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80077b4:	eeb0 0a67 	vmov.f32	s0, s15
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <lsm6ds3_readGyroData+0x104>)
 80077ba:	4a0f      	ldr	r2, [pc, #60]	; (80077f8 <lsm6ds3_readGyroData+0x110>)
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	480d      	ldr	r0, [pc, #52]	; (80077f4 <lsm6ds3_readGyroData+0x10c>)
 80077c0:	f001 f8ca 	bl	8008958 <log_data>
	log_data("lsm6ds3", dev, "gyro_z", "NA", val[2]);
 80077c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80077c8:	eeb0 0a67 	vmov.f32	s0, s15
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <lsm6ds3_readGyroData+0x104>)
 80077ce:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <lsm6ds3_readGyroData+0x114>)
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	4808      	ldr	r0, [pc, #32]	; (80077f4 <lsm6ds3_readGyroData+0x10c>)
 80077d4:	f001 f8c0 	bl	8008958 <log_data>
}
 80077d8:	bf00      	nop
 80077da:	3728      	adds	r7, #40	; 0x28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	1eb851ec 	.word	0x1eb851ec
 80077e4:	3f71eb85 	.word	0x3f71eb85
 80077e8:	0800d4b0 	.word	0x0800d4b0
 80077ec:	0800d494 	.word	0x0800d494
 80077f0:	0800d4c8 	.word	0x0800d4c8
 80077f4:	0800d478 	.word	0x0800d478
 80077f8:	0800d4d0 	.word	0x0800d4d0
 80077fc:	0800d4d8 	.word	0x0800d4d8

08007800 <lsm6ds3_readTempData>:


void lsm6ds3_readTempData(I2C_HandleTypeDef *hand, int dev) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af04      	add	r7, sp, #16
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 2, dev);
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	2102      	movs	r1, #2
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fdc6 	bl	80073a0 <lsm6ds3_waitMeasure>
 8007814:	6178      	str	r0, [r7, #20]
	if(waitRet != 0) log_error("lsm6ds3_readTempData", dev, 0, 4);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <lsm6ds3_readTempData+0x28>
 800781c:	2304      	movs	r3, #4
 800781e:	2200      	movs	r2, #0
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	4827      	ldr	r0, [pc, #156]	; (80078c0 <lsm6ds3_readTempData+0xc0>)
 8007824:	f001 f860 	bl	80088e8 <log_error>

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
 8007828:	236a      	movs	r3, #106	; 0x6a
 800782a:	b29b      	uxth	r3, r3
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	b299      	uxth	r1, r3
 8007830:	2364      	movs	r3, #100	; 0x64
 8007832:	9302      	str	r3, [sp, #8]
 8007834:	2302      	movs	r3, #2
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	f107 0308 	add.w	r3, r7, #8
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2301      	movs	r3, #1
 8007840:	2220      	movs	r2, #32
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fc ff72 	bl	800472c <HAL_I2C_Mem_Read>
 8007848:	4603      	mov	r3, r0
 800784a:	74fb      	strb	r3, [r7, #19]
	if(ret != HAL_OK) log_error("lsm6ds3_readTempData", dev, 1, ret);
 800784c:	7cfb      	ldrb	r3, [r7, #19]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <lsm6ds3_readTempData+0x5e>
 8007852:	7cfb      	ldrb	r3, [r7, #19]
 8007854:	2201      	movs	r2, #1
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	4819      	ldr	r0, [pc, #100]	; (80078c0 <lsm6ds3_readTempData+0xc0>)
 800785a:	f001 f845 	bl	80088e8 <log_error>

	// process temperature value
	float val = T_Off + (float)lsm6ds3_processBuff(buff,0) / T_So;
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fdf1 	bl	800744c <lsm6ds3_processBuff>
 800786a:	4603      	mov	r3, r0
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007874:	ee17 0a90 	vmov	r0, s15
 8007878:	f7f8 fe86 	bl	8000588 <__aeabi_f2d>
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <lsm6ds3_readTempData+0xc4>)
 8007882:	f7f9 f803 	bl	800088c <__aeabi_ddiv>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <lsm6ds3_readTempData+0xc8>)
 8007894:	f7f8 fd1a 	bl	80002cc <__adddf3>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4610      	mov	r0, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	f7f9 f9c2 	bl	8000c28 <__aeabi_d2f>
 80078a4:	4603      	mov	r3, r0
 80078a6:	60fb      	str	r3, [r7, #12]

	log_data("lsm6ds3", dev, "temp", "NA", val);
 80078a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80078ac:	4b07      	ldr	r3, [pc, #28]	; (80078cc <lsm6ds3_readTempData+0xcc>)
 80078ae:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <lsm6ds3_readTempData+0xd0>)
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	4808      	ldr	r0, [pc, #32]	; (80078d4 <lsm6ds3_readTempData+0xd4>)
 80078b4:	f001 f850 	bl	8008958 <log_data>
}
 80078b8:	bf00      	nop
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	0800d4e0 	.word	0x0800d4e0
 80078c4:	40300000 	.word	0x40300000
 80078c8:	40390000 	.word	0x40390000
 80078cc:	0800d494 	.word	0x0800d494
 80078d0:	0800d4f8 	.word	0x0800d4f8
 80078d4:	0800d478 	.word	0x0800d478

080078d8 <mcp9804_powerReset>:
#define REG_RES		0x08


/* SUPPORT FUNCTIONS */

void mcp9804_powerReset() {
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_RESET);
 80078dc:	2200      	movs	r2, #0
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	480a      	ldr	r0, [pc, #40]	; (800790c <mcp9804_powerReset+0x34>)
 80078e2:	f7fc fd67 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80078e6:	20c8      	movs	r0, #200	; 0xc8
 80078e8:	f7fa fdfa 	bl	80024e0 <HAL_Delay>

	// connect I2C bus
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_SET);
 80078ec:	2201      	movs	r2, #1
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	4806      	ldr	r0, [pc, #24]	; (800790c <mcp9804_powerReset+0x34>)
 80078f2:	f7fc fd5f 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80078f6:	2064      	movs	r0, #100	; 0x64
 80078f8:	f7fa fdf2 	bl	80024e0 <HAL_Delay>

	log_info("mcp9804_powerReset", -1);
 80078fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007900:	4803      	ldr	r0, [pc, #12]	; (8007910 <mcp9804_powerReset+0x38>)
 8007902:	f000 ffd1 	bl	80088a8 <log_info>
}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	48000c00 	.word	0x48000c00
 8007910:	0800d500 	.word	0x0800d500

08007914 <mcp9804_configure>:


/* MAIN FUNCTIONS */

void mcp9804_configure(I2C_HandleTypeDef *hand, int dev) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]

	// right now nothing to do

	log_info("mcp9804_configure", dev);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	4803      	ldr	r0, [pc, #12]	; (8007930 <mcp9804_configure+0x1c>)
 8007922:	f000 ffc1 	bl	80088a8 <log_info>
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	0800d514 	.word	0x0800d514

08007934 <mcp9884_readManufac>:


void mcp9884_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af04      	add	r7, sp, #16
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2];

	// read manufacturer ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, buff, 2, I2C_TIMEOUT);
 800793e:	4a3a      	ldr	r2, [pc, #232]	; (8007a28 <mcp9884_readManufac+0xf4>)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	4413      	add	r3, r2
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	b299      	uxth	r1, r3
 800794c:	2364      	movs	r3, #100	; 0x64
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	2302      	movs	r3, #2
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	2301      	movs	r3, #1
 800795c:	2206      	movs	r2, #6
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fc fee4 	bl	800472c <HAL_I2C_Mem_Read>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_error("mcp9884_readManufac", dev, 0, ret);
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <mcp9884_readManufac+0x46>
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2200      	movs	r2, #0
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	482d      	ldr	r0, [pc, #180]	; (8007a2c <mcp9884_readManufac+0xf8>)
 8007976:	f000 ffb7 	bl	80088e8 <log_error>

	// convert address to string
	char tmp[5];
	addr2str(buff, 2, tmp);
 800797a:	f107 020c 	add.w	r2, r7, #12
 800797e:	f107 0314 	add.w	r3, r7, #20
 8007982:	2102      	movs	r1, #2
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fef9 	bl	800877c <addr2str>
	log_data("mcp9884", dev, "manu_id", tmp, NAN);
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8007a30 <mcp9884_readManufac+0xfc>
 8007992:	4a28      	ldr	r2, [pc, #160]	; (8007a34 <mcp9884_readManufac+0x100>)
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	4828      	ldr	r0, [pc, #160]	; (8007a38 <mcp9884_readManufac+0x104>)
 8007998:	f000 ffde 	bl	8008958 <log_data>

	// read dev ID and revision register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_DEV, 1, buff, 2, I2C_TIMEOUT);
 800799c:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <mcp9884_readManufac+0xf4>)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	4413      	add	r3, r2
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	b299      	uxth	r1, r3
 80079aa:	2364      	movs	r3, #100	; 0x64
 80079ac:	9302      	str	r3, [sp, #8]
 80079ae:	2302      	movs	r3, #2
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	f107 0314 	add.w	r3, r7, #20
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	2301      	movs	r3, #1
 80079ba:	2207      	movs	r2, #7
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7fc feb5 	bl	800472c <HAL_I2C_Mem_Read>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_error("mcp9884_readManufac", dev, 1, ret);
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <mcp9884_readManufac+0xa4>
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2201      	movs	r2, #1
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	4816      	ldr	r0, [pc, #88]	; (8007a2c <mcp9884_readManufac+0xf8>)
 80079d4:	f000 ff88 	bl	80088e8 <log_error>

	// convert address to string
	addr2str(&buff[0], 1, tmp);
 80079d8:	f107 020c 	add.w	r2, r7, #12
 80079dc:	f107 0314 	add.w	r3, r7, #20
 80079e0:	2101      	movs	r1, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 feca 	bl	800877c <addr2str>
	log_data("mcp9884", dev, "dev_id", tmp, NAN);
 80079e8:	f107 030c 	add.w	r3, r7, #12
 80079ec:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007a30 <mcp9884_readManufac+0xfc>
 80079f0:	4a12      	ldr	r2, [pc, #72]	; (8007a3c <mcp9884_readManufac+0x108>)
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	4810      	ldr	r0, [pc, #64]	; (8007a38 <mcp9884_readManufac+0x104>)
 80079f6:	f000 ffaf 	bl	8008958 <log_data>

	// convert address to string
	addr2str(&buff[1], 1, tmp);
 80079fa:	f107 020c 	add.w	r2, r7, #12
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	3301      	adds	r3, #1
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 feb8 	bl	800877c <addr2str>
	log_data("mcp9884", dev, "rev_id", tmp, NAN);
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8007a30 <mcp9884_readManufac+0xfc>
 8007a14:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <mcp9884_readManufac+0x10c>)
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	4807      	ldr	r0, [pc, #28]	; (8007a38 <mcp9884_readManufac+0x104>)
 8007a1a:	f000 ff9d 	bl	8008958 <log_data>
}
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	0800d830 	.word	0x0800d830
 8007a2c:	0800d528 	.word	0x0800d528
 8007a30:	7fc00000 	.word	0x7fc00000
 8007a34:	0800d53c 	.word	0x0800d53c
 8007a38:	0800d544 	.word	0x0800d544
 8007a3c:	0800d54c 	.word	0x0800d54c
 8007a40:	0800d554 	.word	0x0800d554

08007a44 <mcp9884_readData>:


void mcp9884_readData(I2C_HandleTypeDef *hand, int dev) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af04      	add	r7, sp, #16
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2];

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
 8007a4e:	4a32      	ldr	r2, [pc, #200]	; (8007b18 <mcp9884_readData+0xd4>)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	4413      	add	r3, r2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	2364      	movs	r3, #100	; 0x64
 8007a5e:	9302      	str	r3, [sp, #8]
 8007a60:	2302      	movs	r3, #2
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	f107 0308 	add.w	r3, r7, #8
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	2205      	movs	r2, #5
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fc fe5c 	bl	800472c <HAL_I2C_Mem_Read>
 8007a74:	4603      	mov	r3, r0
 8007a76:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK) log_error("mcp9884_readData", dev, 0, ret);
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <mcp9884_readData+0x46>
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	2200      	movs	r2, #0
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	4825      	ldr	r0, [pc, #148]	; (8007b1c <mcp9884_readData+0xd8>)
 8007a86:	f000 ff2f 	bl	80088e8 <log_error>

	// clear flag byte
	if(buff[0] & 0xE0)
 8007a8a:	7a3b      	ldrb	r3, [r7, #8]
 8007a8c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <mcp9884_readData+0x5a>
		buff[0] = buff[0] & 0x1F;
 8007a94:	7a3b      	ldrb	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	723b      	strb	r3, [r7, #8]

	// convert Ta val to degC temperature
	float val;
	if((buff[0] & 0x10) == 0x10){
 8007a9e:	7a3b      	ldrb	r3, [r7, #8]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d014      	beq.n	8007ad2 <mcp9884_readData+0x8e>
		buff[0] = buff[0] & 0x0F;
 8007aa8:	7a3b      	ldrb	r3, [r7, #8]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	723b      	strb	r3, [r7, #8]
		val = (256 - (buff[0] << 4) + (buff[1] >> 4)) * -1;
 8007ab2:	7a3b      	ldrb	r3, [r7, #8]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007aba:	7a7a      	ldrb	r2, [r7, #9]
 8007abc:	0912      	lsrs	r2, r2, #4
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	425b      	negs	r3, r3
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007acc:	edc7 7a03 	vstr	s15, [r7, #12]
 8007ad0:	e015      	b.n	8007afe <mcp9884_readData+0xba>
	}
	else
		val = (float)buff[0] * 16 + (float)buff[1] / 16;
 8007ad2:	7a3b      	ldrb	r3, [r7, #8]
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007adc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007ae0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ae4:	7a7b      	ldrb	r3, [r7, #9]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aee:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8007af2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007afa:	edc7 7a03 	vstr	s15, [r7, #12]

	log_data("mcp9884", dev, "temp", "NA", val);
 8007afe:	ed97 0a03 	vldr	s0, [r7, #12]
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <mcp9884_readData+0xdc>)
 8007b04:	4a07      	ldr	r2, [pc, #28]	; (8007b24 <mcp9884_readData+0xe0>)
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	4807      	ldr	r0, [pc, #28]	; (8007b28 <mcp9884_readData+0xe4>)
 8007b0a:	f000 ff25 	bl	8008958 <log_data>
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	0800d830 	.word	0x0800d830
 8007b1c:	0800d55c 	.word	0x0800d55c
 8007b20:	0800d570 	.word	0x0800d570
 8007b24:	0800d574 	.word	0x0800d574
 8007b28:	0800d544 	.word	0x0800d544

08007b2c <mmc5883_powerReset>:
#define T_Off		-75.0	// degC


/* SUPPORT FUNCTIONS */

void mmc5883_powerReset() {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
	// isolate both I2C busses
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_RESET);
 8007b30:	2200      	movs	r2, #0
 8007b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b36:	4811      	ldr	r0, [pc, #68]	; (8007b7c <mmc5883_powerReset+0x50>)
 8007b38:	f7fc fc3c 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b42:	480f      	ldr	r0, [pc, #60]	; (8007b80 <mmc5883_powerReset+0x54>)
 8007b44:	f7fc fc36 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8007b48:	20c8      	movs	r0, #200	; 0xc8
 8007b4a:	f7fa fcc9 	bl	80024e0 <HAL_Delay>

	// connect both I2C busses
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_SET);
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b54:	4809      	ldr	r0, [pc, #36]	; (8007b7c <mmc5883_powerReset+0x50>)
 8007b56:	f7fc fc2d 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_SET);
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b60:	4807      	ldr	r0, [pc, #28]	; (8007b80 <mmc5883_powerReset+0x54>)
 8007b62:	f7fc fc27 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007b66:	2064      	movs	r0, #100	; 0x64
 8007b68:	f7fa fcba 	bl	80024e0 <HAL_Delay>

	log_info("mmc5883_powerReset", -1);
 8007b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b70:	4804      	ldr	r0, [pc, #16]	; (8007b84 <mmc5883_powerReset+0x58>)
 8007b72:	f000 fe99 	bl	80088a8 <log_info>
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	48000c00 	.word	0x48000c00
 8007b80:	48000400 	.word	0x48000400
 8007b84:	0800d57c 	.word	0x0800d57c

08007b88 <mmc5883_waitMeasure>:


int mmc5883_waitMeasure(I2C_HandleTypeDef *hand, int type, int dev) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af04      	add	r7, sp, #16
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	617b      	str	r3, [r7, #20]

	// periodically check status register
	while(cnt*5 < TIMEOUT) {
 8007b98:	e037      	b.n	8007c0a <mmc5883_waitMeasure+0x82>
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
 8007b9a:	4a22      	ldr	r2, [pc, #136]	; (8007c24 <mmc5883_waitMeasure+0x9c>)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	b299      	uxth	r1, r3
 8007ba8:	2364      	movs	r3, #100	; 0x64
 8007baa:	9302      	str	r3, [sp, #8]
 8007bac:	2301      	movs	r3, #1
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	f107 0312 	add.w	r3, r7, #18
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	2207      	movs	r2, #7
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7fc fdb6 	bl	800472c <HAL_I2C_Mem_Read>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK) log_error("mmc5883_waitMeasure", dev, 0, ret);
 8007bc4:	7cfb      	ldrb	r3, [r7, #19]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <mmc5883_waitMeasure+0x4e>
 8007bca:	7cfb      	ldrb	r3, [r7, #19]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4815      	ldr	r0, [pc, #84]	; (8007c28 <mmc5883_waitMeasure+0xa0>)
 8007bd2:	f000 fe89 	bl	80088e8 <log_error>

		// check buffer (0:mag, 1:temp)
		if(!type && (buff & (1 << RDY_TM_M))) return 0;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <mmc5883_waitMeasure+0x62>
 8007bdc:	7cbb      	ldrb	r3, [r7, #18]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <mmc5883_waitMeasure+0x62>
 8007be6:	2300      	movs	r3, #0
 8007be8:	e017      	b.n	8007c1a <mmc5883_waitMeasure+0x92>
		else if(type && (buff & (1 << RDY_TM_T))) return 0;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d006      	beq.n	8007bfe <mmc5883_waitMeasure+0x76>
 8007bf0:	7cbb      	ldrb	r3, [r7, #18]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <mmc5883_waitMeasure+0x76>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e00d      	b.n	8007c1a <mmc5883_waitMeasure+0x92>

		// wait 5ms and increase counter
		HAL_Delay(5);
 8007bfe:	2005      	movs	r0, #5
 8007c00:	f7fa fc6e 	bl	80024e0 <HAL_Delay>
		cnt++;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	3301      	adds	r3, #1
 8007c08:	617b      	str	r3, [r7, #20]
	while(cnt*5 < TIMEOUT) {
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	2b1d      	cmp	r3, #29
 8007c14:	ddc1      	ble.n	8007b9a <mmc5883_waitMeasure+0x12>
	}

	// timeout error
	return -1;
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	0800d838 	.word	0x0800d838
 8007c28:	0800d590 	.word	0x0800d590

08007c2c <mmc5883_processBuff>:


uint16_t mmc5883_processBuff(uint8_t *buff, int data) {
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
	return (uint16_t)buff[0 + 2*data] | (uint16_t)(buff[1 + 2*data] << 8);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	3301      	adds	r3, #1
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	440b      	add	r3, r1
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b29b      	uxth	r3, r3
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <mmc5883_configure>:


/* MAIN FUNCTIONS */

void mmc5883_configure(I2C_HandleTypeDef *hand, int dev) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af04      	add	r7, sp, #16
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	// reset device - clear registers (5ms power on)
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
 8007c72:	4a14      	ldr	r2, [pc, #80]	; (8007cc4 <mmc5883_configure+0x5c>)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	4413      	add	r3, r2
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	b299      	uxth	r1, r3
 8007c80:	2364      	movs	r3, #100	; 0x64
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	2301      	movs	r3, #1
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <mmc5883_configure+0x60>)
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	2209      	movs	r2, #9
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fc fc37 	bl	8004504 <HAL_I2C_Mem_Write>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mmc5883_configure", dev, 0, ret);
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <mmc5883_configure+0x44>
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	4809      	ldr	r0, [pc, #36]	; (8007ccc <mmc5883_configure+0x64>)
 8007ca8:	f000 fe1e 	bl	80088e8 <log_error>
	HAL_Delay(100);
 8007cac:	2064      	movs	r0, #100	; 0x64
 8007cae:	f7fa fc17 	bl	80024e0 <HAL_Delay>

	log_info("mmc5883_configure", dev);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	4805      	ldr	r0, [pc, #20]	; (8007ccc <mmc5883_configure+0x64>)
 8007cb6:	f000 fdf7 	bl	80088a8 <log_info>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800d838 	.word	0x0800d838
 8007cc8:	20000010 	.word	0x20000010
 8007ccc:	0800d5a4 	.word	0x0800d5a4

08007cd0 <mmc5883_readManufac>:


void mmc5883_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
 8007cda:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <mmc5883_readManufac+0x70>)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	4413      	add	r3, r2
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b299      	uxth	r1, r3
 8007ce8:	2364      	movs	r3, #100	; 0x64
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	2301      	movs	r3, #1
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	f107 030e 	add.w	r3, r7, #14
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	222f      	movs	r2, #47	; 0x2f
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7fc fd16 	bl	800472c <HAL_I2C_Mem_Read>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mmc5883_readManufac", dev, 0, ret);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <mmc5883_readManufac+0x46>
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	480c      	ldr	r0, [pc, #48]	; (8007d44 <mmc5883_readManufac+0x74>)
 8007d12:	f000 fde9 	bl	80088e8 <log_error>

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
 8007d16:	f107 0208 	add.w	r2, r7, #8
 8007d1a:	f107 030e 	add.w	r3, r7, #14
 8007d1e:	2101      	movs	r1, #1
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fd2b 	bl	800877c <addr2str>
	log_data("mmc5883", dev, "dev_id", tmp, NAN);
 8007d26:	f107 0308 	add.w	r3, r7, #8
 8007d2a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8007d48 <mmc5883_readManufac+0x78>
 8007d2e:	4a07      	ldr	r2, [pc, #28]	; (8007d4c <mmc5883_readManufac+0x7c>)
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	4807      	ldr	r0, [pc, #28]	; (8007d50 <mmc5883_readManufac+0x80>)
 8007d34:	f000 fe10 	bl	8008958 <log_data>
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	0800d838 	.word	0x0800d838
 8007d44:	0800d5b8 	.word	0x0800d5b8
 8007d48:	7fc00000 	.word	0x7fc00000
 8007d4c:	0800d5cc 	.word	0x0800d5cc
 8007d50:	0800d5d4 	.word	0x0800d5d4
 8007d54:	00000000 	.word	0x00000000

08007d58 <mmc5883_readMagData>:


void mmc5883_readMagData(I2C_HandleTypeDef *hand, int dev) {
 8007d58:	b590      	push	{r4, r7, lr}
 8007d5a:	b099      	sub	sp, #100	; 0x64
 8007d5c:	af04      	add	r7, sp, #16
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// set magnetometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_SET, 1, I2C_TIMEOUT);
 8007d62:	4a9f      	ldr	r2, [pc, #636]	; (8007fe0 <mmc5883_readMagData+0x288>)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	4413      	add	r3, r2
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	b299      	uxth	r1, r3
 8007d70:	2364      	movs	r3, #100	; 0x64
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	2301      	movs	r3, #1
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	4b9a      	ldr	r3, [pc, #616]	; (8007fe4 <mmc5883_readMagData+0x28c>)
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	2208      	movs	r2, #8
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fc fbbf 	bl	8004504 <HAL_I2C_Mem_Write>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_error("mmc5883_readMagData", dev, 0, ret);
 8007d8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d006      	beq.n	8007da2 <mmc5883_readMagData+0x4a>
 8007d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d98:	2200      	movs	r2, #0
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	4892      	ldr	r0, [pc, #584]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007d9e:	f000 fda3 	bl	80088e8 <log_error>

	// initiate magnetic measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_M, 1, I2C_TIMEOUT);
 8007da2:	4a8f      	ldr	r2, [pc, #572]	; (8007fe0 <mmc5883_readMagData+0x288>)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	4413      	add	r3, r2
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	b299      	uxth	r1, r3
 8007db0:	2364      	movs	r3, #100	; 0x64
 8007db2:	9302      	str	r3, [sp, #8]
 8007db4:	2301      	movs	r3, #1
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	4b8c      	ldr	r3, [pc, #560]	; (8007fec <mmc5883_readMagData+0x294>)
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7fc fb9f 	bl	8004504 <HAL_I2C_Mem_Write>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_error("mmc5883_readMagData", dev, 1, ret);
 8007dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <mmc5883_readMagData+0x8a>
 8007dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dd8:	2201      	movs	r2, #1
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	4882      	ldr	r0, [pc, #520]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007dde:	f000 fd83 	bl	80088e8 <log_error>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 0, dev);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	2100      	movs	r1, #0
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff fece 	bl	8007b88 <mmc5883_waitMeasure>
 8007dec:	63b8      	str	r0, [r7, #56]	; 0x38
	if(waitRet != 0) log_error("mmc5883_readMagData", dev, 2, 4);
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <mmc5883_readMagData+0xa8>
 8007df4:	2304      	movs	r3, #4
 8007df6:	2202      	movs	r2, #2
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	487b      	ldr	r0, [pc, #492]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007dfc:	f000 fd74 	bl	80088e8 <log_error>

	// read magnetic register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_MAG, 1, buff, 6, I2C_TIMEOUT);
 8007e00:	4a77      	ldr	r2, [pc, #476]	; (8007fe0 <mmc5883_readMagData+0x288>)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	4413      	add	r3, r2
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	b299      	uxth	r1, r3
 8007e0e:	2364      	movs	r3, #100	; 0x64
 8007e10:	9302      	str	r3, [sp, #8]
 8007e12:	2306      	movs	r3, #6
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	2200      	movs	r2, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fc fc83 	bl	800472c <HAL_I2C_Mem_Read>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_error("mmc5883_readMagData", dev, 3, ret);
 8007e2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d006      	beq.n	8007e42 <mmc5883_readMagData+0xea>
 8007e34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e38:	2203      	movs	r2, #3
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	486a      	ldr	r0, [pc, #424]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007e3e:	f000 fd53 	bl	80088e8 <log_error>

	// process measurement 1
	uint16_t valTmp[6];
	for(int i=0; i<3; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e46:	e011      	b.n	8007e6c <mmc5883_readMagData+0x114>
		valTmp[i] = mmc5883_processBuff(buff, i);
 8007e48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff feec 	bl	8007c2c <mmc5883_processBuff>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007e60:	440b      	add	r3, r1
 8007e62:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for(int i=0; i<3; i++)
 8007e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e68:	3301      	adds	r3, #1
 8007e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	ddea      	ble.n	8007e48 <mmc5883_readMagData+0xf0>

	// reset magnetometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_RST, 1, I2C_TIMEOUT);
 8007e72:	4a5b      	ldr	r2, [pc, #364]	; (8007fe0 <mmc5883_readMagData+0x288>)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	4413      	add	r3, r2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	b299      	uxth	r1, r3
 8007e80:	2364      	movs	r3, #100	; 0x64
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	2301      	movs	r3, #1
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	4b59      	ldr	r3, [pc, #356]	; (8007ff0 <mmc5883_readMagData+0x298>)
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	2208      	movs	r2, #8
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fc fb37 	bl	8004504 <HAL_I2C_Mem_Write>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_error("mmc5883_readMagData", dev, 4, ret);
 8007e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d006      	beq.n	8007eb2 <mmc5883_readMagData+0x15a>
 8007ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	484e      	ldr	r0, [pc, #312]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007eae:	f000 fd1b 	bl	80088e8 <log_error>

	// initiate magnetic measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_M, 1, I2C_TIMEOUT);
 8007eb2:	4a4b      	ldr	r2, [pc, #300]	; (8007fe0 <mmc5883_readMagData+0x288>)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	b299      	uxth	r1, r3
 8007ec0:	2364      	movs	r3, #100	; 0x64
 8007ec2:	9302      	str	r3, [sp, #8]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	4b48      	ldr	r3, [pc, #288]	; (8007fec <mmc5883_readMagData+0x294>)
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2301      	movs	r3, #1
 8007ece:	2208      	movs	r2, #8
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fc fb17 	bl	8004504 <HAL_I2C_Mem_Write>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_error("mmc5883_readMagData", dev, 5, ret);
 8007edc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d006      	beq.n	8007ef2 <mmc5883_readMagData+0x19a>
 8007ee4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ee8:	2205      	movs	r2, #5
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	483e      	ldr	r0, [pc, #248]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007eee:	f000 fcfb 	bl	80088e8 <log_error>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 0, dev);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fe46 	bl	8007b88 <mmc5883_waitMeasure>
 8007efc:	63b8      	str	r0, [r7, #56]	; 0x38
	if(waitRet != 0) log_error("mmc5883_readMagData", dev, 6, 4);
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <mmc5883_readMagData+0x1b8>
 8007f04:	2304      	movs	r3, #4
 8007f06:	2206      	movs	r2, #6
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	4837      	ldr	r0, [pc, #220]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007f0c:	f000 fcec 	bl	80088e8 <log_error>

	// read magnetic register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_MAG, 1, buff, 6, I2C_TIMEOUT);
 8007f10:	4a33      	ldr	r2, [pc, #204]	; (8007fe0 <mmc5883_readMagData+0x288>)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	4413      	add	r3, r2
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	b299      	uxth	r1, r3
 8007f1e:	2364      	movs	r3, #100	; 0x64
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	2306      	movs	r3, #6
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fc fbfb 	bl	800472c <HAL_I2C_Mem_Read>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_error("mmc5883_readMagData", dev, 7, ret);
 8007f3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <mmc5883_readMagData+0x1fa>
 8007f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f48:	2207      	movs	r2, #7
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	4826      	ldr	r0, [pc, #152]	; (8007fe8 <mmc5883_readMagData+0x290>)
 8007f4e:	f000 fccb 	bl	80088e8 <log_error>

	// process measurement 2
	for(int i=0; i<3; i++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f56:	e012      	b.n	8007f7e <mmc5883_readMagData+0x226>
		valTmp[i+3] = mmc5883_processBuff(buff, i);
 8007f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f5a:	1cdc      	adds	r4, r3, #3
 8007f5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fe62 	bl	8007c2c <mmc5883_processBuff>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	0063      	lsls	r3, r4, #1
 8007f6e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007f72:	440b      	add	r3, r1
 8007f74:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for(int i=0; i<3; i++)
 8007f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	dde9      	ble.n	8007f58 <mmc5883_readMagData+0x200>

	// find data offset
	float valOffset[3];
	for(int i=0; i<3; i++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	647b      	str	r3, [r7, #68]	; 0x44
 8007f88:	e023      	b.n	8007fd2 <mmc5883_readMagData+0x27a>
		valOffset[i] = (float)(valTmp[i] + valTmp[i+3]) / 2;
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f92:	4413      	add	r3, r2
 8007f94:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9c:	3303      	adds	r3, #3
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007fa4:	440b      	add	r3, r1
 8007fa6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007faa:	4413      	add	r3, r2
 8007fac:	ee07 3a90 	vmov	s15, r3
 8007fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3b38      	subs	r3, #56	; 0x38
 8007fc8:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++)
 8007fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fce:	3301      	adds	r3, #1
 8007fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	ddd8      	ble.n	8007f8a <mmc5883_readMagData+0x232>

	// process final data
	float val[3];
	for(int i=0; i<3; i++) {
 8007fd8:	2300      	movs	r3, #0
 8007fda:	643b      	str	r3, [r7, #64]	; 0x40
 8007fdc:	e047      	b.n	800806e <mmc5883_readMagData+0x316>
 8007fde:	bf00      	nop
 8007fe0:	0800d838 	.word	0x0800d838
 8007fe4:	2000000e 	.word	0x2000000e
 8007fe8:	0800d5dc 	.word	0x0800d5dc
 8007fec:	2000000c 	.word	0x2000000c
 8007ff0:	2000000f 	.word	0x2000000f
		val[i] = (float)valTmp[i] - valOffset[i];
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800800a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008012:	4413      	add	r3, r2
 8008014:	3b38      	subs	r3, #56	; 0x38
 8008016:	edd3 7a00 	vldr	s15, [r3]
 800801a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800801e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008026:	4413      	add	r3, r2
 8008028:	3b44      	subs	r3, #68	; 0x44
 800802a:	edc3 7a00 	vstr	s15, [r3]
		val[i] = val[i] * (MAG_So / 1000) * (MAG_FS / 8);
 800802e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008036:	4413      	add	r3, r2
 8008038:	3b44      	subs	r3, #68	; 0x44
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4618      	mov	r0, r3
 800803e:	f7f8 faa3 	bl	8000588 <__aeabi_f2d>
 8008042:	a322      	add	r3, pc, #136	; (adr r3, 80080cc <mmc5883_readMagData+0x374>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f7f8 faf6 	bl	8000638 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4610      	mov	r0, r2
 8008052:	4619      	mov	r1, r3
 8008054:	f7f8 fde8 	bl	8000c28 <__aeabi_d2f>
 8008058:	4602      	mov	r2, r0
 800805a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008062:	440b      	add	r3, r1
 8008064:	3b44      	subs	r3, #68	; 0x44
 8008066:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 8008068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806a:	3301      	adds	r3, #1
 800806c:	643b      	str	r3, [r7, #64]	; 0x40
 800806e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008070:	2b02      	cmp	r3, #2
 8008072:	ddbf      	ble.n	8007ff4 <mmc5883_readMagData+0x29c>
	}

	log_data("mmc5883", dev, "mag_x", "NA", val[0]);
 8008074:	edd7 7a03 	vldr	s15, [r7, #12]
 8008078:	eeb0 0a67 	vmov.f32	s0, s15
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <mmc5883_readMagData+0x360>)
 800807e:	4a0f      	ldr	r2, [pc, #60]	; (80080bc <mmc5883_readMagData+0x364>)
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	480f      	ldr	r0, [pc, #60]	; (80080c0 <mmc5883_readMagData+0x368>)
 8008084:	f000 fc68 	bl	8008958 <log_data>
	log_data("mmc5883", dev, "mag_y", "NA", val[1]);
 8008088:	edd7 7a04 	vldr	s15, [r7, #16]
 800808c:	eeb0 0a67 	vmov.f32	s0, s15
 8008090:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <mmc5883_readMagData+0x360>)
 8008092:	4a0c      	ldr	r2, [pc, #48]	; (80080c4 <mmc5883_readMagData+0x36c>)
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	480a      	ldr	r0, [pc, #40]	; (80080c0 <mmc5883_readMagData+0x368>)
 8008098:	f000 fc5e 	bl	8008958 <log_data>
	log_data("mmc5883", dev, "mag_z", "NA", val[2]);
 800809c:	edd7 7a05 	vldr	s15, [r7, #20]
 80080a0:	eeb0 0a67 	vmov.f32	s0, s15
 80080a4:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <mmc5883_readMagData+0x360>)
 80080a6:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <mmc5883_readMagData+0x370>)
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <mmc5883_readMagData+0x368>)
 80080ac:	f000 fc54 	bl	8008958 <log_data>
}
 80080b0:	bf00      	nop
 80080b2:	3754      	adds	r7, #84	; 0x54
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd90      	pop	{r4, r7, pc}
 80080b8:	0800d5f0 	.word	0x0800d5f0
 80080bc:	0800d5f4 	.word	0x0800d5f4
 80080c0:	0800d5d4 	.word	0x0800d5d4
 80080c4:	0800d5fc 	.word	0x0800d5fc
 80080c8:	0800d604 	.word	0x0800d604
 80080cc:	d2f1a9fc 	.word	0xd2f1a9fc
 80080d0:	3f30624d 	.word	0x3f30624d
 80080d4:	00000000 	.word	0x00000000

080080d8 <mmc5883_readTempData>:


void mmc5883_readTempData(I2C_HandleTypeDef *hand, int dev) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	; 0x28
 80080dc:	af04      	add	r7, sp, #16
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff; int waitRet;

	// initiate temperature measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_T, 1, I2C_TIMEOUT);
 80080e2:	4a3f      	ldr	r2, [pc, #252]	; (80081e0 <mmc5883_readTempData+0x108>)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	4413      	add	r3, r2
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	b299      	uxth	r1, r3
 80080f0:	2364      	movs	r3, #100	; 0x64
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	2301      	movs	r3, #1
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	4b3a      	ldr	r3, [pc, #232]	; (80081e4 <mmc5883_readTempData+0x10c>)
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	2301      	movs	r3, #1
 80080fe:	2208      	movs	r2, #8
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7fc f9ff 	bl	8004504 <HAL_I2C_Mem_Write>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_error("mmc5883_readTempData", dev, 0, ret);
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <mmc5883_readTempData+0x44>
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2200      	movs	r2, #0
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	4834      	ldr	r0, [pc, #208]	; (80081e8 <mmc5883_readTempData+0x110>)
 8008118:	f000 fbe6 	bl	80088e8 <log_error>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 1, dev);
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	2101      	movs	r1, #1
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff fd31 	bl	8007b88 <mmc5883_waitMeasure>
 8008126:	6138      	str	r0, [r7, #16]
	if(waitRet != 0) log_error("mmc5883_readTempData", dev, 1, 4);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <mmc5883_readTempData+0x62>
 800812e:	2304      	movs	r3, #4
 8008130:	2201      	movs	r2, #1
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	482c      	ldr	r0, [pc, #176]	; (80081e8 <mmc5883_readTempData+0x110>)
 8008136:	f000 fbd7 	bl	80088e8 <log_error>

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, &buff, 1, I2C_TIMEOUT);
 800813a:	4a29      	ldr	r2, [pc, #164]	; (80081e0 <mmc5883_readTempData+0x108>)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	4413      	add	r3, r2
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	b299      	uxth	r1, r3
 8008148:	2364      	movs	r3, #100	; 0x64
 800814a:	9302      	str	r3, [sp, #8]
 800814c:	2301      	movs	r3, #1
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	f107 030b 	add.w	r3, r7, #11
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	2301      	movs	r3, #1
 8008158:	2206      	movs	r2, #6
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fc fae6 	bl	800472c <HAL_I2C_Mem_Read>
 8008160:	4603      	mov	r3, r0
 8008162:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_error("mmc5883_readTempData", dev, 2, ret);
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <mmc5883_readTempData+0x9e>
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	2202      	movs	r2, #2
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	481d      	ldr	r0, [pc, #116]	; (80081e8 <mmc5883_readTempData+0x110>)
 8008172:	f000 fbb9 	bl	80088e8 <log_error>

	// process temperature value (formula from data-sheet)
	float val = T_Off + T_So*(float)buff;
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008180:	ee17 0a90 	vmov	r0, s15
 8008184:	f7f8 fa00 	bl	8000588 <__aeabi_f2d>
 8008188:	a311      	add	r3, pc, #68	; (adr r3, 80081d0 <mmc5883_readTempData+0xf8>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 fa53 	bl	8000638 <__aeabi_dmul>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4610      	mov	r0, r2
 8008198:	4619      	mov	r1, r3
 800819a:	a30f      	add	r3, pc, #60	; (adr r3, 80081d8 <mmc5883_readTempData+0x100>)
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f7f8 f892 	bl	80002c8 <__aeabi_dsub>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4610      	mov	r0, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7f8 fd3c 	bl	8000c28 <__aeabi_d2f>
 80081b0:	4603      	mov	r3, r0
 80081b2:	60fb      	str	r3, [r7, #12]

	log_data("mmc5883", dev, "temp", "NA", val);
 80081b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <mmc5883_readTempData+0x114>)
 80081ba:	4a0d      	ldr	r2, [pc, #52]	; (80081f0 <mmc5883_readTempData+0x118>)
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	480d      	ldr	r0, [pc, #52]	; (80081f4 <mmc5883_readTempData+0x11c>)
 80081c0:	f000 fbca 	bl	8008958 <log_data>
}
 80081c4:	bf00      	nop
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	f3af 8000 	nop.w
 80081d0:	66666666 	.word	0x66666666
 80081d4:	3fe66666 	.word	0x3fe66666
 80081d8:	00000000 	.word	0x00000000
 80081dc:	4052c000 	.word	0x4052c000
 80081e0:	0800d838 	.word	0x0800d838
 80081e4:	2000000d 	.word	0x2000000d
 80081e8:	0800d60c 	.word	0x0800d60c
 80081ec:	0800d5f0 	.word	0x0800d5f0
 80081f0:	0800d624 	.word	0x0800d624
 80081f4:	0800d5d4 	.word	0x0800d5d4

080081f8 <mpu6050_powerReset>:
#define	T_So		340.0	// LSB/degC
#define	T_Off		36.53	// degC


/* SUPPORT FUNCTIONS */
void mpu6050_powerReset() {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_RESET);
 80081fc:	2200      	movs	r2, #0
 80081fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008202:	480b      	ldr	r0, [pc, #44]	; (8008230 <mpu6050_powerReset+0x38>)
 8008204:	f7fc f8d6 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8008208:	20c8      	movs	r0, #200	; 0xc8
 800820a:	f7fa f969 	bl	80024e0 <HAL_Delay>

	// connect I2C bus
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_SET);
 800820e:	2201      	movs	r2, #1
 8008210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008214:	4806      	ldr	r0, [pc, #24]	; (8008230 <mpu6050_powerReset+0x38>)
 8008216:	f7fc f8cd 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800821a:	2064      	movs	r0, #100	; 0x64
 800821c:	f7fa f960 	bl	80024e0 <HAL_Delay>

	log_info("mpu6050_powerReset", -1);
 8008220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <mpu6050_powerReset+0x3c>)
 8008226:	f000 fb3f 	bl	80088a8 <log_info>
}
 800822a:	bf00      	nop
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	48000c00 	.word	0x48000c00
 8008234:	0800d62c 	.word	0x0800d62c

08008238 <mpu6050_waitMeasure>:


int mpu6050_waitMeasure(I2C_HandleTypeDef *hand, int dev) {
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af04      	add	r7, sp, #16
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]

	// periodically check status register
	while(cnt*5 < TIMEOUT) {
 8008246:	e027      	b.n	8008298 <mpu6050_waitMeasure+0x60>
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
 8008248:	2368      	movs	r3, #104	; 0x68
 800824a:	b29b      	uxth	r3, r3
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	b299      	uxth	r1, r3
 8008250:	2364      	movs	r3, #100	; 0x64
 8008252:	9302      	str	r3, [sp, #8]
 8008254:	2301      	movs	r3, #1
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	f107 030a 	add.w	r3, r7, #10
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	2301      	movs	r3, #1
 8008260:	223a      	movs	r2, #58	; 0x3a
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7fc fa62 	bl	800472c <HAL_I2C_Mem_Read>
 8008268:	4603      	mov	r3, r0
 800826a:	72fb      	strb	r3, [r7, #11]
		if(ret != HAL_OK) log_error("mpu6050_waitMeasure", dev, 0, ret);
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <mpu6050_waitMeasure+0x46>
 8008272:	7afb      	ldrb	r3, [r7, #11]
 8008274:	2200      	movs	r2, #0
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	480e      	ldr	r0, [pc, #56]	; (80082b4 <mpu6050_waitMeasure+0x7c>)
 800827a:	f000 fb35 	bl	80088e8 <log_error>

		// check buffer
		if(buff & (1 << RDY_INT)) return 0;
 800827e:	7abb      	ldrb	r3, [r7, #10]
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <mpu6050_waitMeasure+0x54>
 8008288:	2300      	movs	r3, #0
 800828a:	e00e      	b.n	80082aa <mpu6050_waitMeasure+0x72>

		// wait 5ms and increase counter
		HAL_Delay(5);
 800828c:	2005      	movs	r0, #5
 800828e:	f7fa f927 	bl	80024e0 <HAL_Delay>
		cnt++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
	while(cnt*5 < TIMEOUT) {
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80082a4:	dbd0      	blt.n	8008248 <mpu6050_waitMeasure+0x10>
	}

	// timeout error
	return -1;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	0800d640 	.word	0x0800d640

080082b8 <mpu6050_processBuff>:


int16_t mpu6050_processBuff(uint8_t *buff, int data) {
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	return (int16_t)buff[0 + 2*data] << 8 | (int16_t)(buff[1 + 2*data]);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	b21a      	sxth	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	3301      	adds	r3, #1
 80082d8:	4619      	mov	r1, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	440b      	add	r3, r1
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	b21b      	sxth	r3, r3
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <mpu6050_configure>:


/* MAIN FUNCTIONS */

void mpu6050_configure(I2C_HandleTypeDef *hand, int dev) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	// reset device - clear registers
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_PWR1, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
 80082fe:	2368      	movs	r3, #104	; 0x68
 8008300:	b29b      	uxth	r3, r3
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	b299      	uxth	r1, r3
 8008306:	2364      	movs	r3, #100	; 0x64
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	2301      	movs	r3, #1
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	4b39      	ldr	r3, [pc, #228]	; (80083f4 <mpu6050_configure+0x100>)
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2301      	movs	r3, #1
 8008314:	226b      	movs	r2, #107	; 0x6b
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fc f8f4 	bl	8004504 <HAL_I2C_Mem_Write>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mpu6050_configure", dev, 0, ret);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <mpu6050_configure+0x3e>
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2200      	movs	r2, #0
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	4832      	ldr	r0, [pc, #200]	; (80083f8 <mpu6050_configure+0x104>)
 800832e:	f000 fadb 	bl	80088e8 <log_error>
	HAL_Delay(100);
 8008332:	2064      	movs	r0, #100	; 0x64
 8008334:	f7fa f8d4 	bl	80024e0 <HAL_Delay>

	// reset signal paths - clear registers
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_RST, 1, &CMD_SP_RST, 1, I2C_TIMEOUT);
 8008338:	2368      	movs	r3, #104	; 0x68
 800833a:	b29b      	uxth	r3, r3
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	b299      	uxth	r1, r3
 8008340:	2364      	movs	r3, #100	; 0x64
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	2301      	movs	r3, #1
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	4b2c      	ldr	r3, [pc, #176]	; (80083fc <mpu6050_configure+0x108>)
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	2301      	movs	r3, #1
 800834e:	2268      	movs	r2, #104	; 0x68
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fc f8d7 	bl	8004504 <HAL_I2C_Mem_Write>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mpu6050_configure", dev, 1, ret);
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <mpu6050_configure+0x78>
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2201      	movs	r2, #1
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	4824      	ldr	r0, [pc, #144]	; (80083f8 <mpu6050_configure+0x104>)
 8008368:	f000 fabe 	bl	80088e8 <log_error>
	HAL_Delay(100);
 800836c:	2064      	movs	r0, #100	; 0x64
 800836e:	f7fa f8b7 	bl	80024e0 <HAL_Delay>

	// wake from sleep
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_PWR1, 1, &CMD_WAKE, 1, I2C_TIMEOUT);
 8008372:	2368      	movs	r3, #104	; 0x68
 8008374:	b29b      	uxth	r3, r3
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	b299      	uxth	r1, r3
 800837a:	2364      	movs	r3, #100	; 0x64
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	2301      	movs	r3, #1
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <mpu6050_configure+0x10c>)
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	2301      	movs	r3, #1
 8008388:	226b      	movs	r2, #107	; 0x6b
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fc f8ba 	bl	8004504 <HAL_I2C_Mem_Write>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mpu6050_configure", dev, 2, ret);
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <mpu6050_configure+0xb2>
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	2202      	movs	r2, #2
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	4815      	ldr	r0, [pc, #84]	; (80083f8 <mpu6050_configure+0x104>)
 80083a2:	f000 faa1 	bl	80088e8 <log_error>
	printf("%d\n", ret);
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	4619      	mov	r1, r3
 80083aa:	4816      	ldr	r0, [pc, #88]	; (8008404 <mpu6050_configure+0x110>)
 80083ac:	f001 f9de 	bl	800976c <iprintf>

	// enable data ready interrupt
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_ENBL, 1, &CMD_RDY_EN, 1, I2C_TIMEOUT);
 80083b0:	2368      	movs	r3, #104	; 0x68
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	b299      	uxth	r1, r3
 80083b8:	2364      	movs	r3, #100	; 0x64
 80083ba:	9302      	str	r3, [sp, #8]
 80083bc:	2301      	movs	r3, #1
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	4b11      	ldr	r3, [pc, #68]	; (8008408 <mpu6050_configure+0x114>)
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	2301      	movs	r3, #1
 80083c6:	2238      	movs	r2, #56	; 0x38
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fc f89b 	bl	8004504 <HAL_I2C_Mem_Write>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mpu6050_configure", dev, 3, ret);
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <mpu6050_configure+0xf0>
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	2203      	movs	r2, #3
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	4806      	ldr	r0, [pc, #24]	; (80083f8 <mpu6050_configure+0x104>)
 80083e0:	f000 fa82 	bl	80088e8 <log_error>

	log_info("mpu6050_configure", dev);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	4804      	ldr	r0, [pc, #16]	; (80083f8 <mpu6050_configure+0x104>)
 80083e8:	f000 fa5e 	bl	80088a8 <log_info>
}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20000011 	.word	0x20000011
 80083f8:	0800d654 	.word	0x0800d654
 80083fc:	20000012 	.word	0x20000012
 8008400:	20000210 	.word	0x20000210
 8008404:	0800d668 	.word	0x0800d668
 8008408:	20000013 	.word	0x20000013

0800840c <mpu6050_readManufac>:


void mpu6050_readManufac(I2C_HandleTypeDef *hand, int dev) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af04      	add	r7, sp, #16
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
 8008416:	2368      	movs	r3, #104	; 0x68
 8008418:	b29b      	uxth	r3, r3
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	b299      	uxth	r1, r3
 800841e:	2364      	movs	r3, #100	; 0x64
 8008420:	9302      	str	r3, [sp, #8]
 8008422:	2301      	movs	r3, #1
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	f107 030e 	add.w	r3, r7, #14
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2301      	movs	r3, #1
 800842e:	2275      	movs	r2, #117	; 0x75
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fc f97b 	bl	800472c <HAL_I2C_Mem_Read>
 8008436:	4603      	mov	r3, r0
 8008438:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_error("mpu6050_readManufac", dev, 0, ret);
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <mpu6050_readManufac+0x40>
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2200      	movs	r2, #0
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	480c      	ldr	r0, [pc, #48]	; (8008478 <mpu6050_readManufac+0x6c>)
 8008448:	f000 fa4e 	bl	80088e8 <log_error>

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
 800844c:	f107 0208 	add.w	r2, r7, #8
 8008450:	f107 030e 	add.w	r3, r7, #14
 8008454:	2101      	movs	r1, #1
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f990 	bl	800877c <addr2str>
	log_data("mpu6050", dev, "dev_id", tmp, NAN);
 800845c:	f107 0308 	add.w	r3, r7, #8
 8008460:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800847c <mpu6050_readManufac+0x70>
 8008464:	4a06      	ldr	r2, [pc, #24]	; (8008480 <mpu6050_readManufac+0x74>)
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	4806      	ldr	r0, [pc, #24]	; (8008484 <mpu6050_readManufac+0x78>)
 800846a:	f000 fa75 	bl	8008958 <log_data>
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	0800d66c 	.word	0x0800d66c
 800847c:	7fc00000 	.word	0x7fc00000
 8008480:	0800d680 	.word	0x0800d680
 8008484:	0800d688 	.word	0x0800d688

08008488 <mpu6050_readAccData>:


void mpu6050_readAccData(I2C_HandleTypeDef *hand, int dev) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	; 0x38
 800848c:	af04      	add	r7, sp, #16
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = mpu6050_waitMeasure(hand, dev);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff fecf 	bl	8008238 <mpu6050_waitMeasure>
 800849a:	6238      	str	r0, [r7, #32]
	if(waitRet != 0) log_error("mpu6050_readAccData", dev, 0, 4);
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <mpu6050_readAccData+0x26>
 80084a2:	2304      	movs	r3, #4
 80084a4:	2200      	movs	r2, #0
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	482f      	ldr	r0, [pc, #188]	; (8008568 <mpu6050_readAccData+0xe0>)
 80084aa:	f000 fa1d 	bl	80088e8 <log_error>

	// read accelerometer register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ACC, 1, buff, 6, I2C_TIMEOUT);
 80084ae:	2368      	movs	r3, #104	; 0x68
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	b299      	uxth	r1, r3
 80084b6:	2364      	movs	r3, #100	; 0x64
 80084b8:	9302      	str	r3, [sp, #8]
 80084ba:	2306      	movs	r3, #6
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	f107 0318 	add.w	r3, r7, #24
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2301      	movs	r3, #1
 80084c6:	223b      	movs	r2, #59	; 0x3b
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7fc f92f 	bl	800472c <HAL_I2C_Mem_Read>
 80084ce:	4603      	mov	r3, r0
 80084d0:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) log_error("mpu6050_readAccData", dev, 1, ret);
 80084d2:	7ffb      	ldrb	r3, [r7, #31]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <mpu6050_readAccData+0x5c>
 80084d8:	7ffb      	ldrb	r3, [r7, #31]
 80084da:	2201      	movs	r2, #1
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4822      	ldr	r0, [pc, #136]	; (8008568 <mpu6050_readAccData+0xe0>)
 80084e0:	f000 fa02 	bl	80088e8 <log_error>

	// process accelerometer data
	float val[3];
	for(int i=0; i<3; i++) {
 80084e4:	2300      	movs	r3, #0
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
 80084e8:	e019      	b.n	800851e <mpu6050_readAccData+0x96>
		val[i] = (float)mpu6050_processBuff(buff, i) * (1 / ACC_So) * (ACC_FS / 2);
 80084ea:	f107 0318 	add.w	r3, r7, #24
 80084ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff fee1 	bl	80082b8 <mpu6050_processBuff>
 80084f6:	4603      	mov	r3, r0
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008500:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800856c <mpu6050_readAccData+0xe4>
 8008504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008510:	4413      	add	r3, r2
 8008512:	3b1c      	subs	r3, #28
 8008514:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	3301      	adds	r3, #1
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	2b02      	cmp	r3, #2
 8008522:	dde2      	ble.n	80084ea <mpu6050_readAccData+0x62>
	}

	log_data("mpu6050", dev, "acc_x", "NA", val[0]);
 8008524:	edd7 7a03 	vldr	s15, [r7, #12]
 8008528:	eeb0 0a67 	vmov.f32	s0, s15
 800852c:	4b10      	ldr	r3, [pc, #64]	; (8008570 <mpu6050_readAccData+0xe8>)
 800852e:	4a11      	ldr	r2, [pc, #68]	; (8008574 <mpu6050_readAccData+0xec>)
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	4811      	ldr	r0, [pc, #68]	; (8008578 <mpu6050_readAccData+0xf0>)
 8008534:	f000 fa10 	bl	8008958 <log_data>
	log_data("mpu6050", dev, "acc_y", "NA", val[1]);
 8008538:	edd7 7a04 	vldr	s15, [r7, #16]
 800853c:	eeb0 0a67 	vmov.f32	s0, s15
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <mpu6050_readAccData+0xe8>)
 8008542:	4a0e      	ldr	r2, [pc, #56]	; (800857c <mpu6050_readAccData+0xf4>)
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	480c      	ldr	r0, [pc, #48]	; (8008578 <mpu6050_readAccData+0xf0>)
 8008548:	f000 fa06 	bl	8008958 <log_data>
	log_data("mpu6050", dev, "acc_z", "NA", val[2]);
 800854c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008550:	eeb0 0a67 	vmov.f32	s0, s15
 8008554:	4b06      	ldr	r3, [pc, #24]	; (8008570 <mpu6050_readAccData+0xe8>)
 8008556:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <mpu6050_readAccData+0xf8>)
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	4807      	ldr	r0, [pc, #28]	; (8008578 <mpu6050_readAccData+0xf0>)
 800855c:	f000 f9fc 	bl	8008958 <log_data>
}
 8008560:	bf00      	nop
 8008562:	3728      	adds	r7, #40	; 0x28
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	0800d690 	.word	0x0800d690
 800856c:	38800000 	.word	0x38800000
 8008570:	0800d6a4 	.word	0x0800d6a4
 8008574:	0800d6a8 	.word	0x0800d6a8
 8008578:	0800d688 	.word	0x0800d688
 800857c:	0800d6b0 	.word	0x0800d6b0
 8008580:	0800d6b8 	.word	0x0800d6b8
 8008584:	00000000 	.word	0x00000000

08008588 <mpu6050_readGyroData>:


void mpu6050_readGyroData(I2C_HandleTypeDef *hand, int dev) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b08e      	sub	sp, #56	; 0x38
 800858c:	af04      	add	r7, sp, #16
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = mpu6050_waitMeasure(hand, dev);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff fe4f 	bl	8008238 <mpu6050_waitMeasure>
 800859a:	6238      	str	r0, [r7, #32]
	if(waitRet != 0) log_error("mpu6050_readGyroData", dev, 0, 4);
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <mpu6050_readGyroData+0x26>
 80085a2:	2304      	movs	r3, #4
 80085a4:	2200      	movs	r2, #0
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	4837      	ldr	r0, [pc, #220]	; (8008688 <mpu6050_readGyroData+0x100>)
 80085aa:	f000 f99d 	bl	80088e8 <log_error>

	// read gyroscope register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_GYRO, 1, buff, 6, I2C_TIMEOUT);
 80085ae:	2368      	movs	r3, #104	; 0x68
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	b299      	uxth	r1, r3
 80085b6:	2364      	movs	r3, #100	; 0x64
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	2306      	movs	r3, #6
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	f107 0318 	add.w	r3, r7, #24
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	2301      	movs	r3, #1
 80085c6:	2243      	movs	r2, #67	; 0x43
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fc f8af 	bl	800472c <HAL_I2C_Mem_Read>
 80085ce:	4603      	mov	r3, r0
 80085d0:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) log_error("mpu6050_readGyroData", dev, 1, ret);
 80085d2:	7ffb      	ldrb	r3, [r7, #31]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <mpu6050_readGyroData+0x5c>
 80085d8:	7ffb      	ldrb	r3, [r7, #31]
 80085da:	2201      	movs	r2, #1
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	482a      	ldr	r0, [pc, #168]	; (8008688 <mpu6050_readGyroData+0x100>)
 80085e0:	f000 f982 	bl	80088e8 <log_error>

	// process gyroscope data
	float val[3];
	for(int i=0; i<3; i++) {
 80085e4:	2300      	movs	r3, #0
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	e024      	b.n	8008634 <mpu6050_readGyroData+0xac>
		val[i] = (float)mpu6050_processBuff(buff, i) * (1 / GYRO_So) * (GYRO_FS / 250);
 80085ea:	f107 0318 	add.w	r3, r7, #24
 80085ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fe61 	bl	80082b8 <mpu6050_processBuff>
 80085f6:	4603      	mov	r3, r0
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008600:	ee17 0a90 	vmov	r0, s15
 8008604:	f7f7 ffc0 	bl	8000588 <__aeabi_f2d>
 8008608:	a31d      	add	r3, pc, #116	; (adr r3, 8008680 <mpu6050_readGyroData+0xf8>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f8 f813 	bl	8000638 <__aeabi_dmul>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f7f8 fb05 	bl	8000c28 <__aeabi_d2f>
 800861e:	4602      	mov	r2, r0
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008628:	440b      	add	r3, r1
 800862a:	3b1c      	subs	r3, #28
 800862c:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	3301      	adds	r3, #1
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	2b02      	cmp	r3, #2
 8008638:	ddd7      	ble.n	80085ea <mpu6050_readGyroData+0x62>
	}

	log_data("mpu6050", dev, "gyro_x", "NA", val[0]);
 800863a:	edd7 7a03 	vldr	s15, [r7, #12]
 800863e:	eeb0 0a67 	vmov.f32	s0, s15
 8008642:	4b12      	ldr	r3, [pc, #72]	; (800868c <mpu6050_readGyroData+0x104>)
 8008644:	4a12      	ldr	r2, [pc, #72]	; (8008690 <mpu6050_readGyroData+0x108>)
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	4812      	ldr	r0, [pc, #72]	; (8008694 <mpu6050_readGyroData+0x10c>)
 800864a:	f000 f985 	bl	8008958 <log_data>
	log_data("mpu6050", dev, "gyro_y", "NA", val[1]);
 800864e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008652:	eeb0 0a67 	vmov.f32	s0, s15
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <mpu6050_readGyroData+0x104>)
 8008658:	4a0f      	ldr	r2, [pc, #60]	; (8008698 <mpu6050_readGyroData+0x110>)
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	480d      	ldr	r0, [pc, #52]	; (8008694 <mpu6050_readGyroData+0x10c>)
 800865e:	f000 f97b 	bl	8008958 <log_data>
	log_data("mpu6050", dev, "gyro_z", "NA", val[2]);
 8008662:	edd7 7a05 	vldr	s15, [r7, #20]
 8008666:	eeb0 0a67 	vmov.f32	s0, s15
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <mpu6050_readGyroData+0x104>)
 800866c:	4a0b      	ldr	r2, [pc, #44]	; (800869c <mpu6050_readGyroData+0x114>)
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	4808      	ldr	r0, [pc, #32]	; (8008694 <mpu6050_readGyroData+0x10c>)
 8008672:	f000 f971 	bl	8008958 <log_data>
}
 8008676:	bf00      	nop
 8008678:	3728      	adds	r7, #40	; 0x28
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	9e4a4271 	.word	0x9e4a4271
 8008684:	3f7f4465 	.word	0x3f7f4465
 8008688:	0800d6c0 	.word	0x0800d6c0
 800868c:	0800d6a4 	.word	0x0800d6a4
 8008690:	0800d6d8 	.word	0x0800d6d8
 8008694:	0800d688 	.word	0x0800d688
 8008698:	0800d6e0 	.word	0x0800d6e0
 800869c:	0800d6e8 	.word	0x0800d6e8

080086a0 <mpu6050_readTempData>:


void mpu6050_readTempData(I2C_HandleTypeDef *hand, int dev) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	; 0x28
 80086a4:	af04      	add	r7, sp, #16
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2]; int waitRet;

	// wait for measurement to complete
	waitRet = mpu6050_waitMeasure(hand, dev);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fdc3 	bl	8008238 <mpu6050_waitMeasure>
 80086b2:	6178      	str	r0, [r7, #20]
	if(waitRet != 0) log_error("mpu6050_readTempData", dev, 0, 4);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <mpu6050_readTempData+0x26>
 80086ba:	2304      	movs	r3, #4
 80086bc:	2200      	movs	r2, #0
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	4829      	ldr	r0, [pc, #164]	; (8008768 <mpu6050_readTempData+0xc8>)
 80086c2:	f000 f911 	bl	80088e8 <log_error>

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
 80086c6:	2368      	movs	r3, #104	; 0x68
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	b299      	uxth	r1, r3
 80086ce:	2364      	movs	r3, #100	; 0x64
 80086d0:	9302      	str	r3, [sp, #8]
 80086d2:	2302      	movs	r3, #2
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	f107 0308 	add.w	r3, r7, #8
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	2301      	movs	r3, #1
 80086de:	2241      	movs	r2, #65	; 0x41
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fc f823 	bl	800472c <HAL_I2C_Mem_Read>
 80086e6:	4603      	mov	r3, r0
 80086e8:	74fb      	strb	r3, [r7, #19]
	if(ret != HAL_OK) log_error("mpu6050_readTempData", dev, 1, ret);
 80086ea:	7cfb      	ldrb	r3, [r7, #19]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <mpu6050_readTempData+0x5c>
 80086f0:	7cfb      	ldrb	r3, [r7, #19]
 80086f2:	2201      	movs	r2, #1
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	481c      	ldr	r0, [pc, #112]	; (8008768 <mpu6050_readTempData+0xc8>)
 80086f8:	f000 f8f6 	bl	80088e8 <log_error>

	// process temperature value
	float val = T_Off + (float)mpu6050_processBuff(buff,0) / T_So;
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fdd8 	bl	80082b8 <mpu6050_processBuff>
 8008708:	4603      	mov	r3, r0
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008712:	ee17 0a90 	vmov	r0, s15
 8008716:	f7f7 ff37 	bl	8000588 <__aeabi_f2d>
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <mpu6050_readTempData+0xcc>)
 8008720:	f7f8 f8b4 	bl	800088c <__aeabi_ddiv>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4610      	mov	r0, r2
 800872a:	4619      	mov	r1, r3
 800872c:	a30c      	add	r3, pc, #48	; (adr r3, 8008760 <mpu6050_readTempData+0xc0>)
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f7f7 fdcb 	bl	80002cc <__adddf3>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4610      	mov	r0, r2
 800873c:	4619      	mov	r1, r3
 800873e:	f7f8 fa73 	bl	8000c28 <__aeabi_d2f>
 8008742:	4603      	mov	r3, r0
 8008744:	60fb      	str	r3, [r7, #12]

	log_data("mpu6050", dev, "temp", "NA", val);
 8008746:	ed97 0a03 	vldr	s0, [r7, #12]
 800874a:	4b09      	ldr	r3, [pc, #36]	; (8008770 <mpu6050_readTempData+0xd0>)
 800874c:	4a09      	ldr	r2, [pc, #36]	; (8008774 <mpu6050_readTempData+0xd4>)
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	4809      	ldr	r0, [pc, #36]	; (8008778 <mpu6050_readTempData+0xd8>)
 8008752:	f000 f901 	bl	8008958 <log_data>
}
 8008756:	bf00      	nop
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	0a3d70a4 	.word	0x0a3d70a4
 8008764:	404243d7 	.word	0x404243d7
 8008768:	0800d6f0 	.word	0x0800d6f0
 800876c:	40754000 	.word	0x40754000
 8008770:	0800d6a4 	.word	0x0800d6a4
 8008774:	0800d708 	.word	0x0800d708
 8008778:	0800d688 	.word	0x0800d688

0800877c <addr2str>:
	}
	printf("Scanning completed\n");
}


void addr2str(uint8_t *addr, int addr_len, char *str) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
	int index = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 800878c:	2300      	movs	r3, #0
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	e011      	b.n	80087b6 <addr2str+0x3a>
	   index += sprintf(&str[index], "%02X", addr[i]);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	18d0      	adds	r0, r2, r3
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	4909      	ldr	r1, [pc, #36]	; (80087c8 <addr2str+0x4c>)
 80087a4:	f001 f876 	bl	8009894 <siprintf>
 80087a8:	4602      	mov	r2, r0
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	4413      	add	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3301      	adds	r3, #1
 80087b4:	613b      	str	r3, [r7, #16]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	dbe9      	blt.n	8008792 <addr2str+0x16>
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	0800d740 	.word	0x0800d740

080087cc <log_assignHuart>:


/* LOG FUNCTIONS */

void log_assignHuart(UART_HandleTypeDef* hand1, UART_HandleTypeDef* hand2) {
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	huart_A = hand1;
 80087d6:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <log_assignHuart+0x24>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6013      	str	r3, [r2, #0]
	huart_B = hand2;
 80087dc:	4a05      	ldr	r2, [pc, #20]	; (80087f4 <log_assignHuart+0x28>)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6013      	str	r3, [r2, #0]
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	200005dc 	.word	0x200005dc
 80087f4:	200005e0 	.word	0x200005e0

080087f8 <log_enable>:


void log_enable() {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, UART2_EN_Pin, GPIO_PIN_SET);
 80087fc:	2201      	movs	r2, #1
 80087fe:	2104      	movs	r1, #4
 8008800:	4805      	ldr	r0, [pc, #20]	; (8008818 <log_enable+0x20>)
 8008802:	f7fb fdd7 	bl	80043b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin, GPIO_PIN_SET);
 8008806:	2201      	movs	r2, #1
 8008808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800880c:	4803      	ldr	r0, [pc, #12]	; (800881c <log_enable+0x24>)
 800880e:	f7fb fdd1 	bl	80043b4 <HAL_GPIO_WritePin>
}
 8008812:	bf00      	nop
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	48001800 	.word	0x48001800
 800881c:	48000c00 	.word	0x48000c00

08008820 <log_send>:


void log_send(char *buff, int lenght) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_UART_Transmit(huart_A, (uint8_t *)buff, lenght, UART_TIMEOUT);
 800882a:	4b1a      	ldr	r3, [pc, #104]	; (8008894 <log_send+0x74>)
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	b29a      	uxth	r2, r3
 8008832:	2332      	movs	r3, #50	; 0x32
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	f7fe f8a6 	bl	8006986 <HAL_UART_Transmit>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) printf("ERROR: UART-A %s\n", STATUS[ret]);
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <log_send+0x3a>
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	4613      	mov	r3, r2
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4a12      	ldr	r2, [pc, #72]	; (8008898 <log_send+0x78>)
 8008850:	4413      	add	r3, r2
 8008852:	4619      	mov	r1, r3
 8008854:	4811      	ldr	r0, [pc, #68]	; (800889c <log_send+0x7c>)
 8008856:	f000 ff89 	bl	800976c <iprintf>

	ret = HAL_UART_Transmit(huart_B, (uint8_t *)buff, lenght, UART_TIMEOUT);
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <log_send+0x80>)
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	b29a      	uxth	r2, r3
 8008862:	2332      	movs	r3, #50	; 0x32
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	f7fe f88e 	bl	8006986 <HAL_UART_Transmit>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) printf("ERROR: UART-B %s\n", STATUS[ret]);
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <log_send+0x6a>
 8008874:	7bfa      	ldrb	r2, [r7, #15]
 8008876:	4613      	mov	r3, r2
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4a06      	ldr	r2, [pc, #24]	; (8008898 <log_send+0x78>)
 8008880:	4413      	add	r3, r2
 8008882:	4619      	mov	r1, r3
 8008884:	4807      	ldr	r0, [pc, #28]	; (80088a4 <log_send+0x84>)
 8008886:	f000 ff71 	bl	800976c <iprintf>
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	200005dc 	.word	0x200005dc
 8008898:	0800d83c 	.word	0x0800d83c
 800889c:	0800d748 	.word	0x0800d748
 80088a0:	200005e0 	.word	0x200005e0
 80088a4:	0800d75c 	.word	0x0800d75c

080088a8 <log_info>:


void log_info(char *identity, int device) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b0c4      	sub	sp, #272	; 0x110
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	6018      	str	r0, [r3, #0]
 80088b2:	463b      	mov	r3, r7
 80088b4:	6019      	str	r1, [r3, #0]
	char buff[256];
	int lenght = sprintf(buff, "INF -i %s -d %d\n", identity, device);
 80088b6:	463b      	mov	r3, r7
 80088b8:	1d3a      	adds	r2, r7, #4
 80088ba:	f107 000c 	add.w	r0, r7, #12
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	4908      	ldr	r1, [pc, #32]	; (80088e4 <log_info+0x3c>)
 80088c4:	f000 ffe6 	bl	8009894 <siprintf>
 80088c8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	log_send(buff, lenght);
 80088cc:	f107 030c 	add.w	r3, r7, #12
 80088d0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff ffa3 	bl	8008820 <log_send>
}
 80088da:	bf00      	nop
 80088dc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	0800d770 	.word	0x0800d770

080088e8 <log_error>:


void log_error(char *identity, int device, int fcnId, HAL_StatusTypeDef errId) {
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b0c9      	sub	sp, #292	; 0x124
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	f107 040c 	add.w	r4, r7, #12
 80088f2:	6020      	str	r0, [r4, #0]
 80088f4:	f107 0008 	add.w	r0, r7, #8
 80088f8:	6001      	str	r1, [r0, #0]
 80088fa:	1d39      	adds	r1, r7, #4
 80088fc:	600a      	str	r2, [r1, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	1cfb      	adds	r3, r7, #3
 8008902:	701a      	strb	r2, [r3, #0]
	char buff[256];
	int lenght = sprintf(buff, "ERR -i %s -d %d -f %d -h %s\n", identity, device, fcnId, STATUS[errId]);
 8008904:	1cfb      	adds	r3, r7, #3
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <log_error+0x68>)
 8008912:	1899      	adds	r1, r3, r2
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	f107 020c 	add.w	r2, r7, #12
 800891c:	f107 0014 	add.w	r0, r7, #20
 8008920:	9101      	str	r1, [sp, #4]
 8008922:	1d39      	adds	r1, r7, #4
 8008924:	6809      	ldr	r1, [r1, #0]
 8008926:	9100      	str	r1, [sp, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	4909      	ldr	r1, [pc, #36]	; (8008954 <log_error+0x6c>)
 800892e:	f000 ffb1 	bl	8009894 <siprintf>
 8008932:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
	log_send(buff, lenght);
 8008936:	f107 0314 	add.w	r3, r7, #20
 800893a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff ff6e 	bl	8008820 <log_send>
}
 8008944:	bf00      	nop
 8008946:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800894a:	46bd      	mov	sp, r7
 800894c:	bd90      	pop	{r4, r7, pc}
 800894e:	bf00      	nop
 8008950:	0800d83c 	.word	0x0800d83c
 8008954:	0800d784 	.word	0x0800d784

08008958 <log_data>:


void log_data(char *identity, int device, char *valType, char *valStr, float valFlt) {
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b0cd      	sub	sp, #308	; 0x134
 800895c:	af04      	add	r7, sp, #16
 800895e:	f107 0414 	add.w	r4, r7, #20
 8008962:	6020      	str	r0, [r4, #0]
 8008964:	f107 0010 	add.w	r0, r7, #16
 8008968:	6001      	str	r1, [r0, #0]
 800896a:	f107 010c 	add.w	r1, r7, #12
 800896e:	600a      	str	r2, [r1, #0]
 8008970:	f107 0208 	add.w	r2, r7, #8
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	1d3b      	adds	r3, r7, #4
 8008978:	ed83 0a00 	vstr	s0, [r3]
	char buff[256]; int lenght;

	// print string or float value
	if(strcmp(valStr, "NA"))
 800897c:	f107 0308 	add.w	r3, r7, #8
 8008980:	4921      	ldr	r1, [pc, #132]	; (8008a08 <log_data+0xb0>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	f7f7 fc34 	bl	80001f0 <strcmp>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d015      	beq.n	80089ba <log_data+0x62>
		lenght = sprintf(buff, "DAT -i %s -d %d -t %s -s %s\n", identity, device, valType, valStr);
 800898e:	f107 0310 	add.w	r3, r7, #16
 8008992:	f107 0214 	add.w	r2, r7, #20
 8008996:	f107 001c 	add.w	r0, r7, #28
 800899a:	f107 0108 	add.w	r1, r7, #8
 800899e:	6809      	ldr	r1, [r1, #0]
 80089a0:	9101      	str	r1, [sp, #4]
 80089a2:	f107 010c 	add.w	r1, r7, #12
 80089a6:	6809      	ldr	r1, [r1, #0]
 80089a8:	9100      	str	r1, [sp, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	4917      	ldr	r1, [pc, #92]	; (8008a0c <log_data+0xb4>)
 80089b0:	f000 ff70 	bl	8009894 <siprintf>
 80089b4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80089b8:	e019      	b.n	80089ee <log_data+0x96>
	else
		lenght = sprintf(buff, "DAT -i %s -d %d -t %s -f %f\n", identity, device, valType, valFlt);
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f7f7 fde3 	bl	8000588 <__aeabi_f2d>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	f107 0010 	add.w	r0, r7, #16
 80089ca:	f107 0114 	add.w	r1, r7, #20
 80089ce:	f107 041c 	add.w	r4, r7, #28
 80089d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089d6:	f107 030c 	add.w	r3, r7, #12
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	6803      	ldr	r3, [r0, #0]
 80089e0:	680a      	ldr	r2, [r1, #0]
 80089e2:	490b      	ldr	r1, [pc, #44]	; (8008a10 <log_data+0xb8>)
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 ff55 	bl	8009894 <siprintf>
 80089ea:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	// send to UART
	log_send(buff, lenght);
 80089ee:	f107 031c 	add.w	r3, r7, #28
 80089f2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff ff12 	bl	8008820 <log_send>
}
 80089fc:	bf00      	nop
 80089fe:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}
 8008a06:	bf00      	nop
 8008a08:	0800d7a4 	.word	0x0800d7a4
 8008a0c:	0800d7a8 	.word	0x0800d7a8
 8008a10:	0800d7c8 	.word	0x0800d7c8

08008a14 <__errno>:
 8008a14:	4b01      	ldr	r3, [pc, #4]	; (8008a1c <__errno+0x8>)
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	20000014 	.word	0x20000014

08008a20 <__libc_init_array>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4d0d      	ldr	r5, [pc, #52]	; (8008a58 <__libc_init_array+0x38>)
 8008a24:	4c0d      	ldr	r4, [pc, #52]	; (8008a5c <__libc_init_array+0x3c>)
 8008a26:	1b64      	subs	r4, r4, r5
 8008a28:	10a4      	asrs	r4, r4, #2
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	42a6      	cmp	r6, r4
 8008a2e:	d109      	bne.n	8008a44 <__libc_init_array+0x24>
 8008a30:	4d0b      	ldr	r5, [pc, #44]	; (8008a60 <__libc_init_array+0x40>)
 8008a32:	4c0c      	ldr	r4, [pc, #48]	; (8008a64 <__libc_init_array+0x44>)
 8008a34:	f004 fcd2 	bl	800d3dc <_init>
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	d105      	bne.n	8008a4e <__libc_init_array+0x2e>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	4798      	blx	r3
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7ee      	b.n	8008a2c <__libc_init_array+0xc>
 8008a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a52:	4798      	blx	r3
 8008a54:	3601      	adds	r6, #1
 8008a56:	e7f2      	b.n	8008a3e <__libc_init_array+0x1e>
 8008a58:	0800dd34 	.word	0x0800dd34
 8008a5c:	0800dd34 	.word	0x0800dd34
 8008a60:	0800dd34 	.word	0x0800dd34
 8008a64:	0800dd38 	.word	0x0800dd38

08008a68 <memset>:
 8008a68:	4402      	add	r2, r0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <memset+0xa>
 8008a70:	4770      	bx	lr
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <memset+0x4>

08008a78 <__cvt>:
 8008a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	ec55 4b10 	vmov	r4, r5, d0
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	460e      	mov	r6, r1
 8008a84:	4619      	mov	r1, r3
 8008a86:	462b      	mov	r3, r5
 8008a88:	bfbb      	ittet	lt
 8008a8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a8e:	461d      	movlt	r5, r3
 8008a90:	2300      	movge	r3, #0
 8008a92:	232d      	movlt	r3, #45	; 0x2d
 8008a94:	700b      	strb	r3, [r1, #0]
 8008a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a9c:	4691      	mov	r9, r2
 8008a9e:	f023 0820 	bic.w	r8, r3, #32
 8008aa2:	bfbc      	itt	lt
 8008aa4:	4622      	movlt	r2, r4
 8008aa6:	4614      	movlt	r4, r2
 8008aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008aac:	d005      	beq.n	8008aba <__cvt+0x42>
 8008aae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ab2:	d100      	bne.n	8008ab6 <__cvt+0x3e>
 8008ab4:	3601      	adds	r6, #1
 8008ab6:	2102      	movs	r1, #2
 8008ab8:	e000      	b.n	8008abc <__cvt+0x44>
 8008aba:	2103      	movs	r1, #3
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	ab02      	add	r3, sp, #8
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	ec45 4b10 	vmov	d0, r4, r5
 8008ac8:	4653      	mov	r3, sl
 8008aca:	4632      	mov	r2, r6
 8008acc:	f001 ff04 	bl	800a8d8 <_dtoa_r>
 8008ad0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	d102      	bne.n	8008ade <__cvt+0x66>
 8008ad8:	f019 0f01 	tst.w	r9, #1
 8008adc:	d022      	beq.n	8008b24 <__cvt+0xac>
 8008ade:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ae2:	eb07 0906 	add.w	r9, r7, r6
 8008ae6:	d110      	bne.n	8008b0a <__cvt+0x92>
 8008ae8:	783b      	ldrb	r3, [r7, #0]
 8008aea:	2b30      	cmp	r3, #48	; 0x30
 8008aec:	d10a      	bne.n	8008b04 <__cvt+0x8c>
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f8 f807 	bl	8000b08 <__aeabi_dcmpeq>
 8008afa:	b918      	cbnz	r0, 8008b04 <__cvt+0x8c>
 8008afc:	f1c6 0601 	rsb	r6, r6, #1
 8008b00:	f8ca 6000 	str.w	r6, [sl]
 8008b04:	f8da 3000 	ldr.w	r3, [sl]
 8008b08:	4499      	add	r9, r3
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 fff9 	bl	8000b08 <__aeabi_dcmpeq>
 8008b16:	b108      	cbz	r0, 8008b1c <__cvt+0xa4>
 8008b18:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b1c:	2230      	movs	r2, #48	; 0x30
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	454b      	cmp	r3, r9
 8008b22:	d307      	bcc.n	8008b34 <__cvt+0xbc>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b28:	1bdb      	subs	r3, r3, r7
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	b004      	add	sp, #16
 8008b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b34:	1c59      	adds	r1, r3, #1
 8008b36:	9103      	str	r1, [sp, #12]
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	e7f0      	b.n	8008b1e <__cvt+0xa6>

08008b3c <__exponent>:
 8008b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2900      	cmp	r1, #0
 8008b42:	bfb8      	it	lt
 8008b44:	4249      	neglt	r1, r1
 8008b46:	f803 2b02 	strb.w	r2, [r3], #2
 8008b4a:	bfb4      	ite	lt
 8008b4c:	222d      	movlt	r2, #45	; 0x2d
 8008b4e:	222b      	movge	r2, #43	; 0x2b
 8008b50:	2909      	cmp	r1, #9
 8008b52:	7042      	strb	r2, [r0, #1]
 8008b54:	dd2a      	ble.n	8008bac <__exponent+0x70>
 8008b56:	f10d 0407 	add.w	r4, sp, #7
 8008b5a:	46a4      	mov	ip, r4
 8008b5c:	270a      	movs	r7, #10
 8008b5e:	46a6      	mov	lr, r4
 8008b60:	460a      	mov	r2, r1
 8008b62:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b66:	fb07 1516 	mls	r5, r7, r6, r1
 8008b6a:	3530      	adds	r5, #48	; 0x30
 8008b6c:	2a63      	cmp	r2, #99	; 0x63
 8008b6e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b76:	4631      	mov	r1, r6
 8008b78:	dcf1      	bgt.n	8008b5e <__exponent+0x22>
 8008b7a:	3130      	adds	r1, #48	; 0x30
 8008b7c:	f1ae 0502 	sub.w	r5, lr, #2
 8008b80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b84:	1c44      	adds	r4, r0, #1
 8008b86:	4629      	mov	r1, r5
 8008b88:	4561      	cmp	r1, ip
 8008b8a:	d30a      	bcc.n	8008ba2 <__exponent+0x66>
 8008b8c:	f10d 0209 	add.w	r2, sp, #9
 8008b90:	eba2 020e 	sub.w	r2, r2, lr
 8008b94:	4565      	cmp	r5, ip
 8008b96:	bf88      	it	hi
 8008b98:	2200      	movhi	r2, #0
 8008b9a:	4413      	add	r3, r2
 8008b9c:	1a18      	subs	r0, r3, r0
 8008b9e:	b003      	add	sp, #12
 8008ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ba6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008baa:	e7ed      	b.n	8008b88 <__exponent+0x4c>
 8008bac:	2330      	movs	r3, #48	; 0x30
 8008bae:	3130      	adds	r1, #48	; 0x30
 8008bb0:	7083      	strb	r3, [r0, #2]
 8008bb2:	70c1      	strb	r1, [r0, #3]
 8008bb4:	1d03      	adds	r3, r0, #4
 8008bb6:	e7f1      	b.n	8008b9c <__exponent+0x60>

08008bb8 <_printf_float>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b02 	vpush	{d8}
 8008bc0:	b08d      	sub	sp, #52	; 0x34
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bc8:	4616      	mov	r6, r2
 8008bca:	461f      	mov	r7, r3
 8008bcc:	4605      	mov	r5, r0
 8008bce:	f003 f995 	bl	800befc <_localeconv_r>
 8008bd2:	f8d0 a000 	ldr.w	sl, [r0]
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	f7f7 fb14 	bl	8000204 <strlen>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	930a      	str	r3, [sp, #40]	; 0x28
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	f8d8 3000 	ldr.w	r3, [r8]
 8008be8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	f103 0208 	add.w	r2, r3, #8
 8008bf6:	f8c8 2000 	str.w	r2, [r8]
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c0a:	9307      	str	r3, [sp, #28]
 8008c0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c10:	ee08 0a10 	vmov	s16, r0
 8008c14:	4b9f      	ldr	r3, [pc, #636]	; (8008e94 <_printf_float+0x2dc>)
 8008c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c1e:	f7f7 ffa5 	bl	8000b6c <__aeabi_dcmpun>
 8008c22:	bb88      	cbnz	r0, 8008c88 <_printf_float+0xd0>
 8008c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c28:	4b9a      	ldr	r3, [pc, #616]	; (8008e94 <_printf_float+0x2dc>)
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c2e:	f7f7 ff7f 	bl	8000b30 <__aeabi_dcmple>
 8008c32:	bb48      	cbnz	r0, 8008c88 <_printf_float+0xd0>
 8008c34:	2200      	movs	r2, #0
 8008c36:	2300      	movs	r3, #0
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 ff6e 	bl	8000b1c <__aeabi_dcmplt>
 8008c40:	b110      	cbz	r0, 8008c48 <_printf_float+0x90>
 8008c42:	232d      	movs	r3, #45	; 0x2d
 8008c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c48:	4b93      	ldr	r3, [pc, #588]	; (8008e98 <_printf_float+0x2e0>)
 8008c4a:	4894      	ldr	r0, [pc, #592]	; (8008e9c <_printf_float+0x2e4>)
 8008c4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c50:	bf94      	ite	ls
 8008c52:	4698      	movls	r8, r3
 8008c54:	4680      	movhi	r8, r0
 8008c56:	2303      	movs	r3, #3
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	9b05      	ldr	r3, [sp, #20]
 8008c5c:	f023 0204 	bic.w	r2, r3, #4
 8008c60:	6022      	str	r2, [r4, #0]
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	9700      	str	r7, [sp, #0]
 8008c68:	4633      	mov	r3, r6
 8008c6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f000 f9d8 	bl	8009024 <_printf_common>
 8008c74:	3001      	adds	r0, #1
 8008c76:	f040 8090 	bne.w	8008d9a <_printf_float+0x1e2>
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7e:	b00d      	add	sp, #52	; 0x34
 8008c80:	ecbd 8b02 	vpop	{d8}
 8008c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	4642      	mov	r2, r8
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	4649      	mov	r1, r9
 8008c90:	f7f7 ff6c 	bl	8000b6c <__aeabi_dcmpun>
 8008c94:	b140      	cbz	r0, 8008ca8 <_printf_float+0xf0>
 8008c96:	464b      	mov	r3, r9
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfbc      	itt	lt
 8008c9c:	232d      	movlt	r3, #45	; 0x2d
 8008c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ca2:	487f      	ldr	r0, [pc, #508]	; (8008ea0 <_printf_float+0x2e8>)
 8008ca4:	4b7f      	ldr	r3, [pc, #508]	; (8008ea4 <_printf_float+0x2ec>)
 8008ca6:	e7d1      	b.n	8008c4c <_printf_float+0x94>
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cae:	9206      	str	r2, [sp, #24]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	d13f      	bne.n	8008d34 <_printf_float+0x17c>
 8008cb4:	2306      	movs	r3, #6
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	9b05      	ldr	r3, [sp, #20]
 8008cba:	6861      	ldr	r1, [r4, #4]
 8008cbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	ab0a      	add	r3, sp, #40	; 0x28
 8008cc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cca:	ab09      	add	r3, sp, #36	; 0x24
 8008ccc:	ec49 8b10 	vmov	d0, r8, r9
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	6022      	str	r2, [r4, #0]
 8008cd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f7ff fecd 	bl	8008a78 <__cvt>
 8008cde:	9b06      	ldr	r3, [sp, #24]
 8008ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ce2:	2b47      	cmp	r3, #71	; 0x47
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	d108      	bne.n	8008cfa <_printf_float+0x142>
 8008ce8:	1cc8      	adds	r0, r1, #3
 8008cea:	db02      	blt.n	8008cf2 <_printf_float+0x13a>
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	dd41      	ble.n	8008d76 <_printf_float+0x1be>
 8008cf2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008cf6:	fa5f fb8b 	uxtb.w	fp, fp
 8008cfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cfe:	d820      	bhi.n	8008d42 <_printf_float+0x18a>
 8008d00:	3901      	subs	r1, #1
 8008d02:	465a      	mov	r2, fp
 8008d04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d08:	9109      	str	r1, [sp, #36]	; 0x24
 8008d0a:	f7ff ff17 	bl	8008b3c <__exponent>
 8008d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d10:	1813      	adds	r3, r2, r0
 8008d12:	2a01      	cmp	r2, #1
 8008d14:	4681      	mov	r9, r0
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	dc02      	bgt.n	8008d20 <_printf_float+0x168>
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	07d2      	lsls	r2, r2, #31
 8008d1e:	d501      	bpl.n	8008d24 <_printf_float+0x16c>
 8008d20:	3301      	adds	r3, #1
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d09c      	beq.n	8008c66 <_printf_float+0xae>
 8008d2c:	232d      	movs	r3, #45	; 0x2d
 8008d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d32:	e798      	b.n	8008c66 <_printf_float+0xae>
 8008d34:	9a06      	ldr	r2, [sp, #24]
 8008d36:	2a47      	cmp	r2, #71	; 0x47
 8008d38:	d1be      	bne.n	8008cb8 <_printf_float+0x100>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1bc      	bne.n	8008cb8 <_printf_float+0x100>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e7b9      	b.n	8008cb6 <_printf_float+0xfe>
 8008d42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d46:	d118      	bne.n	8008d7a <_printf_float+0x1c2>
 8008d48:	2900      	cmp	r1, #0
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	dd0b      	ble.n	8008d66 <_printf_float+0x1ae>
 8008d4e:	6121      	str	r1, [r4, #16]
 8008d50:	b913      	cbnz	r3, 8008d58 <_printf_float+0x1a0>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	07d0      	lsls	r0, r2, #31
 8008d56:	d502      	bpl.n	8008d5e <_printf_float+0x1a6>
 8008d58:	3301      	adds	r3, #1
 8008d5a:	440b      	add	r3, r1
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d60:	f04f 0900 	mov.w	r9, #0
 8008d64:	e7de      	b.n	8008d24 <_printf_float+0x16c>
 8008d66:	b913      	cbnz	r3, 8008d6e <_printf_float+0x1b6>
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	07d2      	lsls	r2, r2, #31
 8008d6c:	d501      	bpl.n	8008d72 <_printf_float+0x1ba>
 8008d6e:	3302      	adds	r3, #2
 8008d70:	e7f4      	b.n	8008d5c <_printf_float+0x1a4>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7f2      	b.n	8008d5c <_printf_float+0x1a4>
 8008d76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	db05      	blt.n	8008d8c <_printf_float+0x1d4>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	6121      	str	r1, [r4, #16]
 8008d84:	07d8      	lsls	r0, r3, #31
 8008d86:	d5ea      	bpl.n	8008d5e <_printf_float+0x1a6>
 8008d88:	1c4b      	adds	r3, r1, #1
 8008d8a:	e7e7      	b.n	8008d5c <_printf_float+0x1a4>
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	bfd4      	ite	le
 8008d90:	f1c1 0202 	rsble	r2, r1, #2
 8008d94:	2201      	movgt	r2, #1
 8008d96:	4413      	add	r3, r2
 8008d98:	e7e0      	b.n	8008d5c <_printf_float+0x1a4>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	055a      	lsls	r2, r3, #21
 8008d9e:	d407      	bmi.n	8008db0 <_printf_float+0x1f8>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	4642      	mov	r2, r8
 8008da4:	4631      	mov	r1, r6
 8008da6:	4628      	mov	r0, r5
 8008da8:	47b8      	blx	r7
 8008daa:	3001      	adds	r0, #1
 8008dac:	d12c      	bne.n	8008e08 <_printf_float+0x250>
 8008dae:	e764      	b.n	8008c7a <_printf_float+0xc2>
 8008db0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008db4:	f240 80e0 	bls.w	8008f78 <_printf_float+0x3c0>
 8008db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f7f7 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d034      	beq.n	8008e32 <_printf_float+0x27a>
 8008dc8:	4a37      	ldr	r2, [pc, #220]	; (8008ea8 <_printf_float+0x2f0>)
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4628      	mov	r0, r5
 8008dd0:	47b8      	blx	r7
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	f43f af51 	beq.w	8008c7a <_printf_float+0xc2>
 8008dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	db02      	blt.n	8008de6 <_printf_float+0x22e>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	07d8      	lsls	r0, r3, #31
 8008de4:	d510      	bpl.n	8008e08 <_printf_float+0x250>
 8008de6:	ee18 3a10 	vmov	r3, s16
 8008dea:	4652      	mov	r2, sl
 8008dec:	4631      	mov	r1, r6
 8008dee:	4628      	mov	r0, r5
 8008df0:	47b8      	blx	r7
 8008df2:	3001      	adds	r0, #1
 8008df4:	f43f af41 	beq.w	8008c7a <_printf_float+0xc2>
 8008df8:	f04f 0800 	mov.w	r8, #0
 8008dfc:	f104 091a 	add.w	r9, r4, #26
 8008e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e02:	3b01      	subs	r3, #1
 8008e04:	4543      	cmp	r3, r8
 8008e06:	dc09      	bgt.n	8008e1c <_printf_float+0x264>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	079b      	lsls	r3, r3, #30
 8008e0c:	f100 8105 	bmi.w	800901a <_printf_float+0x462>
 8008e10:	68e0      	ldr	r0, [r4, #12]
 8008e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e14:	4298      	cmp	r0, r3
 8008e16:	bfb8      	it	lt
 8008e18:	4618      	movlt	r0, r3
 8008e1a:	e730      	b.n	8008c7e <_printf_float+0xc6>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	464a      	mov	r2, r9
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f af27 	beq.w	8008c7a <_printf_float+0xc2>
 8008e2c:	f108 0801 	add.w	r8, r8, #1
 8008e30:	e7e6      	b.n	8008e00 <_printf_float+0x248>
 8008e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dc39      	bgt.n	8008eac <_printf_float+0x2f4>
 8008e38:	4a1b      	ldr	r2, [pc, #108]	; (8008ea8 <_printf_float+0x2f0>)
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	47b8      	blx	r7
 8008e42:	3001      	adds	r0, #1
 8008e44:	f43f af19 	beq.w	8008c7a <_printf_float+0xc2>
 8008e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	d102      	bne.n	8008e56 <_printf_float+0x29e>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	07d9      	lsls	r1, r3, #31
 8008e54:	d5d8      	bpl.n	8008e08 <_printf_float+0x250>
 8008e56:	ee18 3a10 	vmov	r3, s16
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f af09 	beq.w	8008c7a <_printf_float+0xc2>
 8008e68:	f04f 0900 	mov.w	r9, #0
 8008e6c:	f104 0a1a 	add.w	sl, r4, #26
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	425b      	negs	r3, r3
 8008e74:	454b      	cmp	r3, r9
 8008e76:	dc01      	bgt.n	8008e7c <_printf_float+0x2c4>
 8008e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7a:	e792      	b.n	8008da2 <_printf_float+0x1ea>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	4652      	mov	r2, sl
 8008e80:	4631      	mov	r1, r6
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b8      	blx	r7
 8008e86:	3001      	adds	r0, #1
 8008e88:	f43f aef7 	beq.w	8008c7a <_printf_float+0xc2>
 8008e8c:	f109 0901 	add.w	r9, r9, #1
 8008e90:	e7ee      	b.n	8008e70 <_printf_float+0x2b8>
 8008e92:	bf00      	nop
 8008e94:	7fefffff 	.word	0x7fefffff
 8008e98:	0800d87c 	.word	0x0800d87c
 8008e9c:	0800d880 	.word	0x0800d880
 8008ea0:	0800d888 	.word	0x0800d888
 8008ea4:	0800d884 	.word	0x0800d884
 8008ea8:	0800d88c 	.word	0x0800d88c
 8008eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	bfa8      	it	ge
 8008eb4:	461a      	movge	r2, r3
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	4691      	mov	r9, r2
 8008eba:	dc37      	bgt.n	8008f2c <_printf_float+0x374>
 8008ebc:	f04f 0b00 	mov.w	fp, #0
 8008ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ec4:	f104 021a 	add.w	r2, r4, #26
 8008ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	eba3 0309 	sub.w	r3, r3, r9
 8008ed0:	455b      	cmp	r3, fp
 8008ed2:	dc33      	bgt.n	8008f3c <_printf_float+0x384>
 8008ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	db3b      	blt.n	8008f54 <_printf_float+0x39c>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	07da      	lsls	r2, r3, #31
 8008ee0:	d438      	bmi.n	8008f54 <_printf_float+0x39c>
 8008ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	eba2 0901 	sub.w	r9, r2, r1
 8008eee:	4599      	cmp	r9, r3
 8008ef0:	bfa8      	it	ge
 8008ef2:	4699      	movge	r9, r3
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	dc35      	bgt.n	8008f66 <_printf_float+0x3ae>
 8008efa:	f04f 0800 	mov.w	r8, #0
 8008efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f02:	f104 0a1a 	add.w	sl, r4, #26
 8008f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	eba3 0309 	sub.w	r3, r3, r9
 8008f10:	4543      	cmp	r3, r8
 8008f12:	f77f af79 	ble.w	8008e08 <_printf_float+0x250>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4652      	mov	r2, sl
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b8      	blx	r7
 8008f20:	3001      	adds	r0, #1
 8008f22:	f43f aeaa 	beq.w	8008c7a <_printf_float+0xc2>
 8008f26:	f108 0801 	add.w	r8, r8, #1
 8008f2a:	e7ec      	b.n	8008f06 <_printf_float+0x34e>
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4642      	mov	r2, r8
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	d1c0      	bne.n	8008ebc <_printf_float+0x304>
 8008f3a:	e69e      	b.n	8008c7a <_printf_float+0xc2>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4628      	mov	r0, r5
 8008f42:	9205      	str	r2, [sp, #20]
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f ae97 	beq.w	8008c7a <_printf_float+0xc2>
 8008f4c:	9a05      	ldr	r2, [sp, #20]
 8008f4e:	f10b 0b01 	add.w	fp, fp, #1
 8008f52:	e7b9      	b.n	8008ec8 <_printf_float+0x310>
 8008f54:	ee18 3a10 	vmov	r3, s16
 8008f58:	4652      	mov	r2, sl
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	d1be      	bne.n	8008ee2 <_printf_float+0x32a>
 8008f64:	e689      	b.n	8008c7a <_printf_float+0xc2>
 8008f66:	9a05      	ldr	r2, [sp, #20]
 8008f68:	464b      	mov	r3, r9
 8008f6a:	4442      	add	r2, r8
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	d1c1      	bne.n	8008efa <_printf_float+0x342>
 8008f76:	e680      	b.n	8008c7a <_printf_float+0xc2>
 8008f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f7a:	2a01      	cmp	r2, #1
 8008f7c:	dc01      	bgt.n	8008f82 <_printf_float+0x3ca>
 8008f7e:	07db      	lsls	r3, r3, #31
 8008f80:	d538      	bpl.n	8008ff4 <_printf_float+0x43c>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4642      	mov	r2, r8
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f ae74 	beq.w	8008c7a <_printf_float+0xc2>
 8008f92:	ee18 3a10 	vmov	r3, s16
 8008f96:	4652      	mov	r2, sl
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f43f ae6b 	beq.w	8008c7a <_printf_float+0xc2>
 8008fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2300      	movs	r3, #0
 8008fac:	f7f7 fdac 	bl	8000b08 <__aeabi_dcmpeq>
 8008fb0:	b9d8      	cbnz	r0, 8008fea <_printf_float+0x432>
 8008fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb4:	f108 0201 	add.w	r2, r8, #1
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d10e      	bne.n	8008fe2 <_printf_float+0x42a>
 8008fc4:	e659      	b.n	8008c7a <_printf_float+0xc2>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4652      	mov	r2, sl
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b8      	blx	r7
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f43f ae52 	beq.w	8008c7a <_printf_float+0xc2>
 8008fd6:	f108 0801 	add.w	r8, r8, #1
 8008fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	4543      	cmp	r3, r8
 8008fe0:	dcf1      	bgt.n	8008fc6 <_printf_float+0x40e>
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fe8:	e6dc      	b.n	8008da4 <_printf_float+0x1ec>
 8008fea:	f04f 0800 	mov.w	r8, #0
 8008fee:	f104 0a1a 	add.w	sl, r4, #26
 8008ff2:	e7f2      	b.n	8008fda <_printf_float+0x422>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4642      	mov	r2, r8
 8008ff8:	e7df      	b.n	8008fba <_printf_float+0x402>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	464a      	mov	r2, r9
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f ae38 	beq.w	8008c7a <_printf_float+0xc2>
 800900a:	f108 0801 	add.w	r8, r8, #1
 800900e:	68e3      	ldr	r3, [r4, #12]
 8009010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009012:	1a5b      	subs	r3, r3, r1
 8009014:	4543      	cmp	r3, r8
 8009016:	dcf0      	bgt.n	8008ffa <_printf_float+0x442>
 8009018:	e6fa      	b.n	8008e10 <_printf_float+0x258>
 800901a:	f04f 0800 	mov.w	r8, #0
 800901e:	f104 0919 	add.w	r9, r4, #25
 8009022:	e7f4      	b.n	800900e <_printf_float+0x456>

08009024 <_printf_common>:
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	4616      	mov	r6, r2
 800902a:	4699      	mov	r9, r3
 800902c:	688a      	ldr	r2, [r1, #8]
 800902e:	690b      	ldr	r3, [r1, #16]
 8009030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009034:	4293      	cmp	r3, r2
 8009036:	bfb8      	it	lt
 8009038:	4613      	movlt	r3, r2
 800903a:	6033      	str	r3, [r6, #0]
 800903c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009040:	4607      	mov	r7, r0
 8009042:	460c      	mov	r4, r1
 8009044:	b10a      	cbz	r2, 800904a <_printf_common+0x26>
 8009046:	3301      	adds	r3, #1
 8009048:	6033      	str	r3, [r6, #0]
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	0699      	lsls	r1, r3, #26
 800904e:	bf42      	ittt	mi
 8009050:	6833      	ldrmi	r3, [r6, #0]
 8009052:	3302      	addmi	r3, #2
 8009054:	6033      	strmi	r3, [r6, #0]
 8009056:	6825      	ldr	r5, [r4, #0]
 8009058:	f015 0506 	ands.w	r5, r5, #6
 800905c:	d106      	bne.n	800906c <_printf_common+0x48>
 800905e:	f104 0a19 	add.w	sl, r4, #25
 8009062:	68e3      	ldr	r3, [r4, #12]
 8009064:	6832      	ldr	r2, [r6, #0]
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	42ab      	cmp	r3, r5
 800906a:	dc26      	bgt.n	80090ba <_printf_common+0x96>
 800906c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009070:	1e13      	subs	r3, r2, #0
 8009072:	6822      	ldr	r2, [r4, #0]
 8009074:	bf18      	it	ne
 8009076:	2301      	movne	r3, #1
 8009078:	0692      	lsls	r2, r2, #26
 800907a:	d42b      	bmi.n	80090d4 <_printf_common+0xb0>
 800907c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009080:	4649      	mov	r1, r9
 8009082:	4638      	mov	r0, r7
 8009084:	47c0      	blx	r8
 8009086:	3001      	adds	r0, #1
 8009088:	d01e      	beq.n	80090c8 <_printf_common+0xa4>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	68e5      	ldr	r5, [r4, #12]
 800908e:	6832      	ldr	r2, [r6, #0]
 8009090:	f003 0306 	and.w	r3, r3, #6
 8009094:	2b04      	cmp	r3, #4
 8009096:	bf08      	it	eq
 8009098:	1aad      	subeq	r5, r5, r2
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	6922      	ldr	r2, [r4, #16]
 800909e:	bf0c      	ite	eq
 80090a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090a4:	2500      	movne	r5, #0
 80090a6:	4293      	cmp	r3, r2
 80090a8:	bfc4      	itt	gt
 80090aa:	1a9b      	subgt	r3, r3, r2
 80090ac:	18ed      	addgt	r5, r5, r3
 80090ae:	2600      	movs	r6, #0
 80090b0:	341a      	adds	r4, #26
 80090b2:	42b5      	cmp	r5, r6
 80090b4:	d11a      	bne.n	80090ec <_printf_common+0xc8>
 80090b6:	2000      	movs	r0, #0
 80090b8:	e008      	b.n	80090cc <_printf_common+0xa8>
 80090ba:	2301      	movs	r3, #1
 80090bc:	4652      	mov	r2, sl
 80090be:	4649      	mov	r1, r9
 80090c0:	4638      	mov	r0, r7
 80090c2:	47c0      	blx	r8
 80090c4:	3001      	adds	r0, #1
 80090c6:	d103      	bne.n	80090d0 <_printf_common+0xac>
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d0:	3501      	adds	r5, #1
 80090d2:	e7c6      	b.n	8009062 <_printf_common+0x3e>
 80090d4:	18e1      	adds	r1, r4, r3
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	2030      	movs	r0, #48	; 0x30
 80090da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090de:	4422      	add	r2, r4
 80090e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090e8:	3302      	adds	r3, #2
 80090ea:	e7c7      	b.n	800907c <_printf_common+0x58>
 80090ec:	2301      	movs	r3, #1
 80090ee:	4622      	mov	r2, r4
 80090f0:	4649      	mov	r1, r9
 80090f2:	4638      	mov	r0, r7
 80090f4:	47c0      	blx	r8
 80090f6:	3001      	adds	r0, #1
 80090f8:	d0e6      	beq.n	80090c8 <_printf_common+0xa4>
 80090fa:	3601      	adds	r6, #1
 80090fc:	e7d9      	b.n	80090b2 <_printf_common+0x8e>
	...

08009100 <_printf_i>:
 8009100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	4691      	mov	r9, r2
 8009108:	7e27      	ldrb	r7, [r4, #24]
 800910a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800910c:	2f78      	cmp	r7, #120	; 0x78
 800910e:	4680      	mov	r8, r0
 8009110:	469a      	mov	sl, r3
 8009112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009116:	d807      	bhi.n	8009128 <_printf_i+0x28>
 8009118:	2f62      	cmp	r7, #98	; 0x62
 800911a:	d80a      	bhi.n	8009132 <_printf_i+0x32>
 800911c:	2f00      	cmp	r7, #0
 800911e:	f000 80d8 	beq.w	80092d2 <_printf_i+0x1d2>
 8009122:	2f58      	cmp	r7, #88	; 0x58
 8009124:	f000 80a3 	beq.w	800926e <_printf_i+0x16e>
 8009128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800912c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009130:	e03a      	b.n	80091a8 <_printf_i+0xa8>
 8009132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009136:	2b15      	cmp	r3, #21
 8009138:	d8f6      	bhi.n	8009128 <_printf_i+0x28>
 800913a:	a001      	add	r0, pc, #4	; (adr r0, 8009140 <_printf_i+0x40>)
 800913c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009140:	08009199 	.word	0x08009199
 8009144:	080091ad 	.word	0x080091ad
 8009148:	08009129 	.word	0x08009129
 800914c:	08009129 	.word	0x08009129
 8009150:	08009129 	.word	0x08009129
 8009154:	08009129 	.word	0x08009129
 8009158:	080091ad 	.word	0x080091ad
 800915c:	08009129 	.word	0x08009129
 8009160:	08009129 	.word	0x08009129
 8009164:	08009129 	.word	0x08009129
 8009168:	08009129 	.word	0x08009129
 800916c:	080092b9 	.word	0x080092b9
 8009170:	080091dd 	.word	0x080091dd
 8009174:	0800929b 	.word	0x0800929b
 8009178:	08009129 	.word	0x08009129
 800917c:	08009129 	.word	0x08009129
 8009180:	080092db 	.word	0x080092db
 8009184:	08009129 	.word	0x08009129
 8009188:	080091dd 	.word	0x080091dd
 800918c:	08009129 	.word	0x08009129
 8009190:	08009129 	.word	0x08009129
 8009194:	080092a3 	.word	0x080092a3
 8009198:	680b      	ldr	r3, [r1, #0]
 800919a:	1d1a      	adds	r2, r3, #4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	600a      	str	r2, [r1, #0]
 80091a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0a3      	b.n	80092f4 <_printf_i+0x1f4>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	6808      	ldr	r0, [r1, #0]
 80091b0:	062e      	lsls	r6, r5, #24
 80091b2:	f100 0304 	add.w	r3, r0, #4
 80091b6:	d50a      	bpl.n	80091ce <_printf_i+0xce>
 80091b8:	6805      	ldr	r5, [r0, #0]
 80091ba:	600b      	str	r3, [r1, #0]
 80091bc:	2d00      	cmp	r5, #0
 80091be:	da03      	bge.n	80091c8 <_printf_i+0xc8>
 80091c0:	232d      	movs	r3, #45	; 0x2d
 80091c2:	426d      	negs	r5, r5
 80091c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c8:	485e      	ldr	r0, [pc, #376]	; (8009344 <_printf_i+0x244>)
 80091ca:	230a      	movs	r3, #10
 80091cc:	e019      	b.n	8009202 <_printf_i+0x102>
 80091ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091d2:	6805      	ldr	r5, [r0, #0]
 80091d4:	600b      	str	r3, [r1, #0]
 80091d6:	bf18      	it	ne
 80091d8:	b22d      	sxthne	r5, r5
 80091da:	e7ef      	b.n	80091bc <_printf_i+0xbc>
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	6825      	ldr	r5, [r4, #0]
 80091e0:	1d18      	adds	r0, r3, #4
 80091e2:	6008      	str	r0, [r1, #0]
 80091e4:	0628      	lsls	r0, r5, #24
 80091e6:	d501      	bpl.n	80091ec <_printf_i+0xec>
 80091e8:	681d      	ldr	r5, [r3, #0]
 80091ea:	e002      	b.n	80091f2 <_printf_i+0xf2>
 80091ec:	0669      	lsls	r1, r5, #25
 80091ee:	d5fb      	bpl.n	80091e8 <_printf_i+0xe8>
 80091f0:	881d      	ldrh	r5, [r3, #0]
 80091f2:	4854      	ldr	r0, [pc, #336]	; (8009344 <_printf_i+0x244>)
 80091f4:	2f6f      	cmp	r7, #111	; 0x6f
 80091f6:	bf0c      	ite	eq
 80091f8:	2308      	moveq	r3, #8
 80091fa:	230a      	movne	r3, #10
 80091fc:	2100      	movs	r1, #0
 80091fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009202:	6866      	ldr	r6, [r4, #4]
 8009204:	60a6      	str	r6, [r4, #8]
 8009206:	2e00      	cmp	r6, #0
 8009208:	bfa2      	ittt	ge
 800920a:	6821      	ldrge	r1, [r4, #0]
 800920c:	f021 0104 	bicge.w	r1, r1, #4
 8009210:	6021      	strge	r1, [r4, #0]
 8009212:	b90d      	cbnz	r5, 8009218 <_printf_i+0x118>
 8009214:	2e00      	cmp	r6, #0
 8009216:	d04d      	beq.n	80092b4 <_printf_i+0x1b4>
 8009218:	4616      	mov	r6, r2
 800921a:	fbb5 f1f3 	udiv	r1, r5, r3
 800921e:	fb03 5711 	mls	r7, r3, r1, r5
 8009222:	5dc7      	ldrb	r7, [r0, r7]
 8009224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009228:	462f      	mov	r7, r5
 800922a:	42bb      	cmp	r3, r7
 800922c:	460d      	mov	r5, r1
 800922e:	d9f4      	bls.n	800921a <_printf_i+0x11a>
 8009230:	2b08      	cmp	r3, #8
 8009232:	d10b      	bne.n	800924c <_printf_i+0x14c>
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	07df      	lsls	r7, r3, #31
 8009238:	d508      	bpl.n	800924c <_printf_i+0x14c>
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	6861      	ldr	r1, [r4, #4]
 800923e:	4299      	cmp	r1, r3
 8009240:	bfde      	ittt	le
 8009242:	2330      	movle	r3, #48	; 0x30
 8009244:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009248:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800924c:	1b92      	subs	r2, r2, r6
 800924e:	6122      	str	r2, [r4, #16]
 8009250:	f8cd a000 	str.w	sl, [sp]
 8009254:	464b      	mov	r3, r9
 8009256:	aa03      	add	r2, sp, #12
 8009258:	4621      	mov	r1, r4
 800925a:	4640      	mov	r0, r8
 800925c:	f7ff fee2 	bl	8009024 <_printf_common>
 8009260:	3001      	adds	r0, #1
 8009262:	d14c      	bne.n	80092fe <_printf_i+0x1fe>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009268:	b004      	add	sp, #16
 800926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926e:	4835      	ldr	r0, [pc, #212]	; (8009344 <_printf_i+0x244>)
 8009270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	680e      	ldr	r6, [r1, #0]
 8009278:	061f      	lsls	r7, r3, #24
 800927a:	f856 5b04 	ldr.w	r5, [r6], #4
 800927e:	600e      	str	r6, [r1, #0]
 8009280:	d514      	bpl.n	80092ac <_printf_i+0x1ac>
 8009282:	07d9      	lsls	r1, r3, #31
 8009284:	bf44      	itt	mi
 8009286:	f043 0320 	orrmi.w	r3, r3, #32
 800928a:	6023      	strmi	r3, [r4, #0]
 800928c:	b91d      	cbnz	r5, 8009296 <_printf_i+0x196>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	f023 0320 	bic.w	r3, r3, #32
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	2310      	movs	r3, #16
 8009298:	e7b0      	b.n	80091fc <_printf_i+0xfc>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	f043 0320 	orr.w	r3, r3, #32
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	2378      	movs	r3, #120	; 0x78
 80092a4:	4828      	ldr	r0, [pc, #160]	; (8009348 <_printf_i+0x248>)
 80092a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092aa:	e7e3      	b.n	8009274 <_printf_i+0x174>
 80092ac:	065e      	lsls	r6, r3, #25
 80092ae:	bf48      	it	mi
 80092b0:	b2ad      	uxthmi	r5, r5
 80092b2:	e7e6      	b.n	8009282 <_printf_i+0x182>
 80092b4:	4616      	mov	r6, r2
 80092b6:	e7bb      	b.n	8009230 <_printf_i+0x130>
 80092b8:	680b      	ldr	r3, [r1, #0]
 80092ba:	6826      	ldr	r6, [r4, #0]
 80092bc:	6960      	ldr	r0, [r4, #20]
 80092be:	1d1d      	adds	r5, r3, #4
 80092c0:	600d      	str	r5, [r1, #0]
 80092c2:	0635      	lsls	r5, r6, #24
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	d501      	bpl.n	80092cc <_printf_i+0x1cc>
 80092c8:	6018      	str	r0, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <_printf_i+0x1d2>
 80092cc:	0671      	lsls	r1, r6, #25
 80092ce:	d5fb      	bpl.n	80092c8 <_printf_i+0x1c8>
 80092d0:	8018      	strh	r0, [r3, #0]
 80092d2:	2300      	movs	r3, #0
 80092d4:	6123      	str	r3, [r4, #16]
 80092d6:	4616      	mov	r6, r2
 80092d8:	e7ba      	b.n	8009250 <_printf_i+0x150>
 80092da:	680b      	ldr	r3, [r1, #0]
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	600a      	str	r2, [r1, #0]
 80092e0:	681e      	ldr	r6, [r3, #0]
 80092e2:	6862      	ldr	r2, [r4, #4]
 80092e4:	2100      	movs	r1, #0
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7f6 ff9a 	bl	8000220 <memchr>
 80092ec:	b108      	cbz	r0, 80092f2 <_printf_i+0x1f2>
 80092ee:	1b80      	subs	r0, r0, r6
 80092f0:	6060      	str	r0, [r4, #4]
 80092f2:	6863      	ldr	r3, [r4, #4]
 80092f4:	6123      	str	r3, [r4, #16]
 80092f6:	2300      	movs	r3, #0
 80092f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092fc:	e7a8      	b.n	8009250 <_printf_i+0x150>
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	4632      	mov	r2, r6
 8009302:	4649      	mov	r1, r9
 8009304:	4640      	mov	r0, r8
 8009306:	47d0      	blx	sl
 8009308:	3001      	adds	r0, #1
 800930a:	d0ab      	beq.n	8009264 <_printf_i+0x164>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	079b      	lsls	r3, r3, #30
 8009310:	d413      	bmi.n	800933a <_printf_i+0x23a>
 8009312:	68e0      	ldr	r0, [r4, #12]
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	4298      	cmp	r0, r3
 8009318:	bfb8      	it	lt
 800931a:	4618      	movlt	r0, r3
 800931c:	e7a4      	b.n	8009268 <_printf_i+0x168>
 800931e:	2301      	movs	r3, #1
 8009320:	4632      	mov	r2, r6
 8009322:	4649      	mov	r1, r9
 8009324:	4640      	mov	r0, r8
 8009326:	47d0      	blx	sl
 8009328:	3001      	adds	r0, #1
 800932a:	d09b      	beq.n	8009264 <_printf_i+0x164>
 800932c:	3501      	adds	r5, #1
 800932e:	68e3      	ldr	r3, [r4, #12]
 8009330:	9903      	ldr	r1, [sp, #12]
 8009332:	1a5b      	subs	r3, r3, r1
 8009334:	42ab      	cmp	r3, r5
 8009336:	dcf2      	bgt.n	800931e <_printf_i+0x21e>
 8009338:	e7eb      	b.n	8009312 <_printf_i+0x212>
 800933a:	2500      	movs	r5, #0
 800933c:	f104 0619 	add.w	r6, r4, #25
 8009340:	e7f5      	b.n	800932e <_printf_i+0x22e>
 8009342:	bf00      	nop
 8009344:	0800d88e 	.word	0x0800d88e
 8009348:	0800d89f 	.word	0x0800d89f

0800934c <_scanf_float>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	b087      	sub	sp, #28
 8009352:	4617      	mov	r7, r2
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	688b      	ldr	r3, [r1, #8]
 8009358:	1e5a      	subs	r2, r3, #1
 800935a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800935e:	bf83      	ittte	hi
 8009360:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009364:	195b      	addhi	r3, r3, r5
 8009366:	9302      	strhi	r3, [sp, #8]
 8009368:	2300      	movls	r3, #0
 800936a:	bf86      	itte	hi
 800936c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009370:	608b      	strhi	r3, [r1, #8]
 8009372:	9302      	strls	r3, [sp, #8]
 8009374:	680b      	ldr	r3, [r1, #0]
 8009376:	468b      	mov	fp, r1
 8009378:	2500      	movs	r5, #0
 800937a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800937e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009382:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009386:	4680      	mov	r8, r0
 8009388:	460c      	mov	r4, r1
 800938a:	465e      	mov	r6, fp
 800938c:	46aa      	mov	sl, r5
 800938e:	46a9      	mov	r9, r5
 8009390:	9501      	str	r5, [sp, #4]
 8009392:	68a2      	ldr	r2, [r4, #8]
 8009394:	b152      	cbz	r2, 80093ac <_scanf_float+0x60>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b4e      	cmp	r3, #78	; 0x4e
 800939c:	d864      	bhi.n	8009468 <_scanf_float+0x11c>
 800939e:	2b40      	cmp	r3, #64	; 0x40
 80093a0:	d83c      	bhi.n	800941c <_scanf_float+0xd0>
 80093a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80093a6:	b2c8      	uxtb	r0, r1
 80093a8:	280e      	cmp	r0, #14
 80093aa:	d93a      	bls.n	8009422 <_scanf_float+0xd6>
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	d003      	beq.n	80093ba <_scanf_float+0x6e>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80093be:	f1ba 0f01 	cmp.w	sl, #1
 80093c2:	f200 8113 	bhi.w	80095ec <_scanf_float+0x2a0>
 80093c6:	455e      	cmp	r6, fp
 80093c8:	f200 8105 	bhi.w	80095d6 <_scanf_float+0x28a>
 80093cc:	2501      	movs	r5, #1
 80093ce:	4628      	mov	r0, r5
 80093d0:	b007      	add	sp, #28
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80093da:	2a0d      	cmp	r2, #13
 80093dc:	d8e6      	bhi.n	80093ac <_scanf_float+0x60>
 80093de:	a101      	add	r1, pc, #4	; (adr r1, 80093e4 <_scanf_float+0x98>)
 80093e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093e4:	08009523 	.word	0x08009523
 80093e8:	080093ad 	.word	0x080093ad
 80093ec:	080093ad 	.word	0x080093ad
 80093f0:	080093ad 	.word	0x080093ad
 80093f4:	08009583 	.word	0x08009583
 80093f8:	0800955b 	.word	0x0800955b
 80093fc:	080093ad 	.word	0x080093ad
 8009400:	080093ad 	.word	0x080093ad
 8009404:	08009531 	.word	0x08009531
 8009408:	080093ad 	.word	0x080093ad
 800940c:	080093ad 	.word	0x080093ad
 8009410:	080093ad 	.word	0x080093ad
 8009414:	080093ad 	.word	0x080093ad
 8009418:	080094e9 	.word	0x080094e9
 800941c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009420:	e7db      	b.n	80093da <_scanf_float+0x8e>
 8009422:	290e      	cmp	r1, #14
 8009424:	d8c2      	bhi.n	80093ac <_scanf_float+0x60>
 8009426:	a001      	add	r0, pc, #4	; (adr r0, 800942c <_scanf_float+0xe0>)
 8009428:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800942c:	080094db 	.word	0x080094db
 8009430:	080093ad 	.word	0x080093ad
 8009434:	080094db 	.word	0x080094db
 8009438:	0800956f 	.word	0x0800956f
 800943c:	080093ad 	.word	0x080093ad
 8009440:	08009489 	.word	0x08009489
 8009444:	080094c5 	.word	0x080094c5
 8009448:	080094c5 	.word	0x080094c5
 800944c:	080094c5 	.word	0x080094c5
 8009450:	080094c5 	.word	0x080094c5
 8009454:	080094c5 	.word	0x080094c5
 8009458:	080094c5 	.word	0x080094c5
 800945c:	080094c5 	.word	0x080094c5
 8009460:	080094c5 	.word	0x080094c5
 8009464:	080094c5 	.word	0x080094c5
 8009468:	2b6e      	cmp	r3, #110	; 0x6e
 800946a:	d809      	bhi.n	8009480 <_scanf_float+0x134>
 800946c:	2b60      	cmp	r3, #96	; 0x60
 800946e:	d8b2      	bhi.n	80093d6 <_scanf_float+0x8a>
 8009470:	2b54      	cmp	r3, #84	; 0x54
 8009472:	d077      	beq.n	8009564 <_scanf_float+0x218>
 8009474:	2b59      	cmp	r3, #89	; 0x59
 8009476:	d199      	bne.n	80093ac <_scanf_float+0x60>
 8009478:	2d07      	cmp	r5, #7
 800947a:	d197      	bne.n	80093ac <_scanf_float+0x60>
 800947c:	2508      	movs	r5, #8
 800947e:	e029      	b.n	80094d4 <_scanf_float+0x188>
 8009480:	2b74      	cmp	r3, #116	; 0x74
 8009482:	d06f      	beq.n	8009564 <_scanf_float+0x218>
 8009484:	2b79      	cmp	r3, #121	; 0x79
 8009486:	e7f6      	b.n	8009476 <_scanf_float+0x12a>
 8009488:	6821      	ldr	r1, [r4, #0]
 800948a:	05c8      	lsls	r0, r1, #23
 800948c:	d51a      	bpl.n	80094c4 <_scanf_float+0x178>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009494:	6021      	str	r1, [r4, #0]
 8009496:	f109 0901 	add.w	r9, r9, #1
 800949a:	b11b      	cbz	r3, 80094a4 <_scanf_float+0x158>
 800949c:	3b01      	subs	r3, #1
 800949e:	3201      	adds	r2, #1
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	60a2      	str	r2, [r4, #8]
 80094a4:	68a3      	ldr	r3, [r4, #8]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	60a3      	str	r3, [r4, #8]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	3301      	adds	r3, #1
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	607b      	str	r3, [r7, #4]
 80094b8:	f340 8084 	ble.w	80095c4 <_scanf_float+0x278>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	3301      	adds	r3, #1
 80094c0:	603b      	str	r3, [r7, #0]
 80094c2:	e766      	b.n	8009392 <_scanf_float+0x46>
 80094c4:	eb1a 0f05 	cmn.w	sl, r5
 80094c8:	f47f af70 	bne.w	80093ac <_scanf_float+0x60>
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80094d2:	6022      	str	r2, [r4, #0]
 80094d4:	f806 3b01 	strb.w	r3, [r6], #1
 80094d8:	e7e4      	b.n	80094a4 <_scanf_float+0x158>
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	0610      	lsls	r0, r2, #24
 80094de:	f57f af65 	bpl.w	80093ac <_scanf_float+0x60>
 80094e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094e6:	e7f4      	b.n	80094d2 <_scanf_float+0x186>
 80094e8:	f1ba 0f00 	cmp.w	sl, #0
 80094ec:	d10e      	bne.n	800950c <_scanf_float+0x1c0>
 80094ee:	f1b9 0f00 	cmp.w	r9, #0
 80094f2:	d10e      	bne.n	8009512 <_scanf_float+0x1c6>
 80094f4:	6822      	ldr	r2, [r4, #0]
 80094f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094fe:	d108      	bne.n	8009512 <_scanf_float+0x1c6>
 8009500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	f04f 0a01 	mov.w	sl, #1
 800950a:	e7e3      	b.n	80094d4 <_scanf_float+0x188>
 800950c:	f1ba 0f02 	cmp.w	sl, #2
 8009510:	d055      	beq.n	80095be <_scanf_float+0x272>
 8009512:	2d01      	cmp	r5, #1
 8009514:	d002      	beq.n	800951c <_scanf_float+0x1d0>
 8009516:	2d04      	cmp	r5, #4
 8009518:	f47f af48 	bne.w	80093ac <_scanf_float+0x60>
 800951c:	3501      	adds	r5, #1
 800951e:	b2ed      	uxtb	r5, r5
 8009520:	e7d8      	b.n	80094d4 <_scanf_float+0x188>
 8009522:	f1ba 0f01 	cmp.w	sl, #1
 8009526:	f47f af41 	bne.w	80093ac <_scanf_float+0x60>
 800952a:	f04f 0a02 	mov.w	sl, #2
 800952e:	e7d1      	b.n	80094d4 <_scanf_float+0x188>
 8009530:	b97d      	cbnz	r5, 8009552 <_scanf_float+0x206>
 8009532:	f1b9 0f00 	cmp.w	r9, #0
 8009536:	f47f af3c 	bne.w	80093b2 <_scanf_float+0x66>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009540:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009544:	f47f af39 	bne.w	80093ba <_scanf_float+0x6e>
 8009548:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800954c:	6022      	str	r2, [r4, #0]
 800954e:	2501      	movs	r5, #1
 8009550:	e7c0      	b.n	80094d4 <_scanf_float+0x188>
 8009552:	2d03      	cmp	r5, #3
 8009554:	d0e2      	beq.n	800951c <_scanf_float+0x1d0>
 8009556:	2d05      	cmp	r5, #5
 8009558:	e7de      	b.n	8009518 <_scanf_float+0x1cc>
 800955a:	2d02      	cmp	r5, #2
 800955c:	f47f af26 	bne.w	80093ac <_scanf_float+0x60>
 8009560:	2503      	movs	r5, #3
 8009562:	e7b7      	b.n	80094d4 <_scanf_float+0x188>
 8009564:	2d06      	cmp	r5, #6
 8009566:	f47f af21 	bne.w	80093ac <_scanf_float+0x60>
 800956a:	2507      	movs	r5, #7
 800956c:	e7b2      	b.n	80094d4 <_scanf_float+0x188>
 800956e:	6822      	ldr	r2, [r4, #0]
 8009570:	0591      	lsls	r1, r2, #22
 8009572:	f57f af1b 	bpl.w	80093ac <_scanf_float+0x60>
 8009576:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800957a:	6022      	str	r2, [r4, #0]
 800957c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009580:	e7a8      	b.n	80094d4 <_scanf_float+0x188>
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009588:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800958c:	d006      	beq.n	800959c <_scanf_float+0x250>
 800958e:	0550      	lsls	r0, r2, #21
 8009590:	f57f af0c 	bpl.w	80093ac <_scanf_float+0x60>
 8009594:	f1b9 0f00 	cmp.w	r9, #0
 8009598:	f43f af0f 	beq.w	80093ba <_scanf_float+0x6e>
 800959c:	0591      	lsls	r1, r2, #22
 800959e:	bf58      	it	pl
 80095a0:	9901      	ldrpl	r1, [sp, #4]
 80095a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095a6:	bf58      	it	pl
 80095a8:	eba9 0101 	subpl.w	r1, r9, r1
 80095ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80095b0:	bf58      	it	pl
 80095b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	f04f 0900 	mov.w	r9, #0
 80095bc:	e78a      	b.n	80094d4 <_scanf_float+0x188>
 80095be:	f04f 0a03 	mov.w	sl, #3
 80095c2:	e787      	b.n	80094d4 <_scanf_float+0x188>
 80095c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095c8:	4639      	mov	r1, r7
 80095ca:	4640      	mov	r0, r8
 80095cc:	4798      	blx	r3
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f43f aedf 	beq.w	8009392 <_scanf_float+0x46>
 80095d4:	e6ea      	b.n	80093ac <_scanf_float+0x60>
 80095d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095de:	463a      	mov	r2, r7
 80095e0:	4640      	mov	r0, r8
 80095e2:	4798      	blx	r3
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	6123      	str	r3, [r4, #16]
 80095ea:	e6ec      	b.n	80093c6 <_scanf_float+0x7a>
 80095ec:	1e6b      	subs	r3, r5, #1
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	d825      	bhi.n	800963e <_scanf_float+0x2f2>
 80095f2:	2d02      	cmp	r5, #2
 80095f4:	d836      	bhi.n	8009664 <_scanf_float+0x318>
 80095f6:	455e      	cmp	r6, fp
 80095f8:	f67f aee8 	bls.w	80093cc <_scanf_float+0x80>
 80095fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009600:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009604:	463a      	mov	r2, r7
 8009606:	4640      	mov	r0, r8
 8009608:	4798      	blx	r3
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	3b01      	subs	r3, #1
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	e7f1      	b.n	80095f6 <_scanf_float+0x2aa>
 8009612:	9802      	ldr	r0, [sp, #8]
 8009614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009618:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800961c:	9002      	str	r0, [sp, #8]
 800961e:	463a      	mov	r2, r7
 8009620:	4640      	mov	r0, r8
 8009622:	4798      	blx	r3
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	3b01      	subs	r3, #1
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800962e:	fa5f fa8a 	uxtb.w	sl, sl
 8009632:	f1ba 0f02 	cmp.w	sl, #2
 8009636:	d1ec      	bne.n	8009612 <_scanf_float+0x2c6>
 8009638:	3d03      	subs	r5, #3
 800963a:	b2ed      	uxtb	r5, r5
 800963c:	1b76      	subs	r6, r6, r5
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	05da      	lsls	r2, r3, #23
 8009642:	d52f      	bpl.n	80096a4 <_scanf_float+0x358>
 8009644:	055b      	lsls	r3, r3, #21
 8009646:	d510      	bpl.n	800966a <_scanf_float+0x31e>
 8009648:	455e      	cmp	r6, fp
 800964a:	f67f aebf 	bls.w	80093cc <_scanf_float+0x80>
 800964e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009656:	463a      	mov	r2, r7
 8009658:	4640      	mov	r0, r8
 800965a:	4798      	blx	r3
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	3b01      	subs	r3, #1
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	e7f1      	b.n	8009648 <_scanf_float+0x2fc>
 8009664:	46aa      	mov	sl, r5
 8009666:	9602      	str	r6, [sp, #8]
 8009668:	e7df      	b.n	800962a <_scanf_float+0x2de>
 800966a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	2965      	cmp	r1, #101	; 0x65
 8009672:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009676:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	d00c      	beq.n	8009698 <_scanf_float+0x34c>
 800967e:	2945      	cmp	r1, #69	; 0x45
 8009680:	d00a      	beq.n	8009698 <_scanf_float+0x34c>
 8009682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009686:	463a      	mov	r2, r7
 8009688:	4640      	mov	r0, r8
 800968a:	4798      	blx	r3
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009692:	3b01      	subs	r3, #1
 8009694:	1eb5      	subs	r5, r6, #2
 8009696:	6123      	str	r3, [r4, #16]
 8009698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800969c:	463a      	mov	r2, r7
 800969e:	4640      	mov	r0, r8
 80096a0:	4798      	blx	r3
 80096a2:	462e      	mov	r6, r5
 80096a4:	6825      	ldr	r5, [r4, #0]
 80096a6:	f015 0510 	ands.w	r5, r5, #16
 80096aa:	d158      	bne.n	800975e <_scanf_float+0x412>
 80096ac:	7035      	strb	r5, [r6, #0]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096b8:	d11c      	bne.n	80096f4 <_scanf_float+0x3a8>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	454b      	cmp	r3, r9
 80096be:	eba3 0209 	sub.w	r2, r3, r9
 80096c2:	d124      	bne.n	800970e <_scanf_float+0x3c2>
 80096c4:	2200      	movs	r2, #0
 80096c6:	4659      	mov	r1, fp
 80096c8:	4640      	mov	r0, r8
 80096ca:	f000 ff2b 	bl	800a524 <_strtod_r>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	6821      	ldr	r1, [r4, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f011 0f02 	tst.w	r1, #2
 80096d8:	ec57 6b10 	vmov	r6, r7, d0
 80096dc:	f103 0204 	add.w	r2, r3, #4
 80096e0:	d020      	beq.n	8009724 <_scanf_float+0x3d8>
 80096e2:	9903      	ldr	r1, [sp, #12]
 80096e4:	600a      	str	r2, [r1, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	e9c3 6700 	strd	r6, r7, [r3]
 80096ec:	68e3      	ldr	r3, [r4, #12]
 80096ee:	3301      	adds	r3, #1
 80096f0:	60e3      	str	r3, [r4, #12]
 80096f2:	e66c      	b.n	80093ce <_scanf_float+0x82>
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0e4      	beq.n	80096c4 <_scanf_float+0x378>
 80096fa:	9905      	ldr	r1, [sp, #20]
 80096fc:	230a      	movs	r3, #10
 80096fe:	462a      	mov	r2, r5
 8009700:	3101      	adds	r1, #1
 8009702:	4640      	mov	r0, r8
 8009704:	f000 ff98 	bl	800a638 <_strtol_r>
 8009708:	9b04      	ldr	r3, [sp, #16]
 800970a:	9e05      	ldr	r6, [sp, #20]
 800970c:	1ac2      	subs	r2, r0, r3
 800970e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009712:	429e      	cmp	r6, r3
 8009714:	bf28      	it	cs
 8009716:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800971a:	4912      	ldr	r1, [pc, #72]	; (8009764 <_scanf_float+0x418>)
 800971c:	4630      	mov	r0, r6
 800971e:	f000 f8b9 	bl	8009894 <siprintf>
 8009722:	e7cf      	b.n	80096c4 <_scanf_float+0x378>
 8009724:	f011 0f04 	tst.w	r1, #4
 8009728:	9903      	ldr	r1, [sp, #12]
 800972a:	600a      	str	r2, [r1, #0]
 800972c:	d1db      	bne.n	80096e6 <_scanf_float+0x39a>
 800972e:	f8d3 8000 	ldr.w	r8, [r3]
 8009732:	ee10 2a10 	vmov	r2, s0
 8009736:	ee10 0a10 	vmov	r0, s0
 800973a:	463b      	mov	r3, r7
 800973c:	4639      	mov	r1, r7
 800973e:	f7f7 fa15 	bl	8000b6c <__aeabi_dcmpun>
 8009742:	b128      	cbz	r0, 8009750 <_scanf_float+0x404>
 8009744:	4808      	ldr	r0, [pc, #32]	; (8009768 <_scanf_float+0x41c>)
 8009746:	f000 f89f 	bl	8009888 <nanf>
 800974a:	ed88 0a00 	vstr	s0, [r8]
 800974e:	e7cd      	b.n	80096ec <_scanf_float+0x3a0>
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f7 fa68 	bl	8000c28 <__aeabi_d2f>
 8009758:	f8c8 0000 	str.w	r0, [r8]
 800975c:	e7c6      	b.n	80096ec <_scanf_float+0x3a0>
 800975e:	2500      	movs	r5, #0
 8009760:	e635      	b.n	80093ce <_scanf_float+0x82>
 8009762:	bf00      	nop
 8009764:	0800d8b0 	.word	0x0800d8b0
 8009768:	0800dd28 	.word	0x0800dd28

0800976c <iprintf>:
 800976c:	b40f      	push	{r0, r1, r2, r3}
 800976e:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <iprintf+0x2c>)
 8009770:	b513      	push	{r0, r1, r4, lr}
 8009772:	681c      	ldr	r4, [r3, #0]
 8009774:	b124      	cbz	r4, 8009780 <iprintf+0x14>
 8009776:	69a3      	ldr	r3, [r4, #24]
 8009778:	b913      	cbnz	r3, 8009780 <iprintf+0x14>
 800977a:	4620      	mov	r0, r4
 800977c:	f001 ffb2 	bl	800b6e4 <__sinit>
 8009780:	ab05      	add	r3, sp, #20
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	68a1      	ldr	r1, [r4, #8]
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	4620      	mov	r0, r4
 800978a:	f003 fb45 	bl	800ce18 <_vfiprintf_r>
 800978e:	b002      	add	sp, #8
 8009790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009794:	b004      	add	sp, #16
 8009796:	4770      	bx	lr
 8009798:	20000014 	.word	0x20000014

0800979c <_puts_r>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	460e      	mov	r6, r1
 80097a0:	4605      	mov	r5, r0
 80097a2:	b118      	cbz	r0, 80097ac <_puts_r+0x10>
 80097a4:	6983      	ldr	r3, [r0, #24]
 80097a6:	b90b      	cbnz	r3, 80097ac <_puts_r+0x10>
 80097a8:	f001 ff9c 	bl	800b6e4 <__sinit>
 80097ac:	69ab      	ldr	r3, [r5, #24]
 80097ae:	68ac      	ldr	r4, [r5, #8]
 80097b0:	b913      	cbnz	r3, 80097b8 <_puts_r+0x1c>
 80097b2:	4628      	mov	r0, r5
 80097b4:	f001 ff96 	bl	800b6e4 <__sinit>
 80097b8:	4b2c      	ldr	r3, [pc, #176]	; (800986c <_puts_r+0xd0>)
 80097ba:	429c      	cmp	r4, r3
 80097bc:	d120      	bne.n	8009800 <_puts_r+0x64>
 80097be:	686c      	ldr	r4, [r5, #4]
 80097c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097c2:	07db      	lsls	r3, r3, #31
 80097c4:	d405      	bmi.n	80097d2 <_puts_r+0x36>
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	0598      	lsls	r0, r3, #22
 80097ca:	d402      	bmi.n	80097d2 <_puts_r+0x36>
 80097cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ce:	f002 fb9a 	bl	800bf06 <__retarget_lock_acquire_recursive>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	0719      	lsls	r1, r3, #28
 80097d6:	d51d      	bpl.n	8009814 <_puts_r+0x78>
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b1db      	cbz	r3, 8009814 <_puts_r+0x78>
 80097dc:	3e01      	subs	r6, #1
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097e4:	3b01      	subs	r3, #1
 80097e6:	60a3      	str	r3, [r4, #8]
 80097e8:	bb39      	cbnz	r1, 800983a <_puts_r+0x9e>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	da38      	bge.n	8009860 <_puts_r+0xc4>
 80097ee:	4622      	mov	r2, r4
 80097f0:	210a      	movs	r1, #10
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 ff22 	bl	800a63c <__swbuf_r>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d011      	beq.n	8009820 <_puts_r+0x84>
 80097fc:	250a      	movs	r5, #10
 80097fe:	e011      	b.n	8009824 <_puts_r+0x88>
 8009800:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <_puts_r+0xd4>)
 8009802:	429c      	cmp	r4, r3
 8009804:	d101      	bne.n	800980a <_puts_r+0x6e>
 8009806:	68ac      	ldr	r4, [r5, #8]
 8009808:	e7da      	b.n	80097c0 <_puts_r+0x24>
 800980a:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <_puts_r+0xd8>)
 800980c:	429c      	cmp	r4, r3
 800980e:	bf08      	it	eq
 8009810:	68ec      	ldreq	r4, [r5, #12]
 8009812:	e7d5      	b.n	80097c0 <_puts_r+0x24>
 8009814:	4621      	mov	r1, r4
 8009816:	4628      	mov	r0, r5
 8009818:	f000 ff62 	bl	800a6e0 <__swsetup_r>
 800981c:	2800      	cmp	r0, #0
 800981e:	d0dd      	beq.n	80097dc <_puts_r+0x40>
 8009820:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009826:	07da      	lsls	r2, r3, #31
 8009828:	d405      	bmi.n	8009836 <_puts_r+0x9a>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	059b      	lsls	r3, r3, #22
 800982e:	d402      	bmi.n	8009836 <_puts_r+0x9a>
 8009830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009832:	f002 fb69 	bl	800bf08 <__retarget_lock_release_recursive>
 8009836:	4628      	mov	r0, r5
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	2b00      	cmp	r3, #0
 800983c:	da04      	bge.n	8009848 <_puts_r+0xac>
 800983e:	69a2      	ldr	r2, [r4, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	dc06      	bgt.n	8009852 <_puts_r+0xb6>
 8009844:	290a      	cmp	r1, #10
 8009846:	d004      	beq.n	8009852 <_puts_r+0xb6>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	7019      	strb	r1, [r3, #0]
 8009850:	e7c5      	b.n	80097de <_puts_r+0x42>
 8009852:	4622      	mov	r2, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 fef1 	bl	800a63c <__swbuf_r>
 800985a:	3001      	adds	r0, #1
 800985c:	d1bf      	bne.n	80097de <_puts_r+0x42>
 800985e:	e7df      	b.n	8009820 <_puts_r+0x84>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	250a      	movs	r5, #10
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	6022      	str	r2, [r4, #0]
 8009868:	701d      	strb	r5, [r3, #0]
 800986a:	e7db      	b.n	8009824 <_puts_r+0x88>
 800986c:	0800dac0 	.word	0x0800dac0
 8009870:	0800dae0 	.word	0x0800dae0
 8009874:	0800daa0 	.word	0x0800daa0

08009878 <puts>:
 8009878:	4b02      	ldr	r3, [pc, #8]	; (8009884 <puts+0xc>)
 800987a:	4601      	mov	r1, r0
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	f7ff bf8d 	b.w	800979c <_puts_r>
 8009882:	bf00      	nop
 8009884:	20000014 	.word	0x20000014

08009888 <nanf>:
 8009888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009890 <nanf+0x8>
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	7fc00000 	.word	0x7fc00000

08009894 <siprintf>:
 8009894:	b40e      	push	{r1, r2, r3}
 8009896:	b500      	push	{lr}
 8009898:	b09c      	sub	sp, #112	; 0x70
 800989a:	ab1d      	add	r3, sp, #116	; 0x74
 800989c:	9002      	str	r0, [sp, #8]
 800989e:	9006      	str	r0, [sp, #24]
 80098a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098a4:	4809      	ldr	r0, [pc, #36]	; (80098cc <siprintf+0x38>)
 80098a6:	9107      	str	r1, [sp, #28]
 80098a8:	9104      	str	r1, [sp, #16]
 80098aa:	4909      	ldr	r1, [pc, #36]	; (80098d0 <siprintf+0x3c>)
 80098ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b0:	9105      	str	r1, [sp, #20]
 80098b2:	6800      	ldr	r0, [r0, #0]
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	a902      	add	r1, sp, #8
 80098b8:	f003 f984 	bl	800cbc4 <_svfiprintf_r>
 80098bc:	9b02      	ldr	r3, [sp, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	701a      	strb	r2, [r3, #0]
 80098c2:	b01c      	add	sp, #112	; 0x70
 80098c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c8:	b003      	add	sp, #12
 80098ca:	4770      	bx	lr
 80098cc:	20000014 	.word	0x20000014
 80098d0:	ffff0208 	.word	0xffff0208

080098d4 <sulp>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	460d      	mov	r5, r1
 80098da:	ec45 4b10 	vmov	d0, r4, r5
 80098de:	4616      	mov	r6, r2
 80098e0:	f002 ff0c 	bl	800c6fc <__ulp>
 80098e4:	ec51 0b10 	vmov	r0, r1, d0
 80098e8:	b17e      	cbz	r6, 800990a <sulp+0x36>
 80098ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd09      	ble.n	800990a <sulp+0x36>
 80098f6:	051b      	lsls	r3, r3, #20
 80098f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80098fc:	2400      	movs	r4, #0
 80098fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009902:	4622      	mov	r2, r4
 8009904:	462b      	mov	r3, r5
 8009906:	f7f6 fe97 	bl	8000638 <__aeabi_dmul>
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	0000      	movs	r0, r0
	...

08009910 <_strtod_l>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	b0a3      	sub	sp, #140	; 0x8c
 8009916:	461f      	mov	r7, r3
 8009918:	2300      	movs	r3, #0
 800991a:	931e      	str	r3, [sp, #120]	; 0x78
 800991c:	4ba4      	ldr	r3, [pc, #656]	; (8009bb0 <_strtod_l+0x2a0>)
 800991e:	9219      	str	r2, [sp, #100]	; 0x64
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	4604      	mov	r4, r0
 8009926:	4618      	mov	r0, r3
 8009928:	4688      	mov	r8, r1
 800992a:	f7f6 fc6b 	bl	8000204 <strlen>
 800992e:	f04f 0a00 	mov.w	sl, #0
 8009932:	4605      	mov	r5, r0
 8009934:	f04f 0b00 	mov.w	fp, #0
 8009938:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800993c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	2a2b      	cmp	r2, #43	; 0x2b
 8009942:	d04c      	beq.n	80099de <_strtod_l+0xce>
 8009944:	d839      	bhi.n	80099ba <_strtod_l+0xaa>
 8009946:	2a0d      	cmp	r2, #13
 8009948:	d832      	bhi.n	80099b0 <_strtod_l+0xa0>
 800994a:	2a08      	cmp	r2, #8
 800994c:	d832      	bhi.n	80099b4 <_strtod_l+0xa4>
 800994e:	2a00      	cmp	r2, #0
 8009950:	d03c      	beq.n	80099cc <_strtod_l+0xbc>
 8009952:	2300      	movs	r3, #0
 8009954:	930e      	str	r3, [sp, #56]	; 0x38
 8009956:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009958:	7833      	ldrb	r3, [r6, #0]
 800995a:	2b30      	cmp	r3, #48	; 0x30
 800995c:	f040 80b4 	bne.w	8009ac8 <_strtod_l+0x1b8>
 8009960:	7873      	ldrb	r3, [r6, #1]
 8009962:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009966:	2b58      	cmp	r3, #88	; 0x58
 8009968:	d16c      	bne.n	8009a44 <_strtod_l+0x134>
 800996a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	ab1e      	add	r3, sp, #120	; 0x78
 8009970:	9702      	str	r7, [sp, #8]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	4a8f      	ldr	r2, [pc, #572]	; (8009bb4 <_strtod_l+0x2a4>)
 8009976:	ab1f      	add	r3, sp, #124	; 0x7c
 8009978:	a91d      	add	r1, sp, #116	; 0x74
 800997a:	4620      	mov	r0, r4
 800997c:	f001 ffb6 	bl	800b8ec <__gethex>
 8009980:	f010 0707 	ands.w	r7, r0, #7
 8009984:	4605      	mov	r5, r0
 8009986:	d005      	beq.n	8009994 <_strtod_l+0x84>
 8009988:	2f06      	cmp	r7, #6
 800998a:	d12a      	bne.n	80099e2 <_strtod_l+0xd2>
 800998c:	3601      	adds	r6, #1
 800998e:	2300      	movs	r3, #0
 8009990:	961d      	str	r6, [sp, #116]	; 0x74
 8009992:	930e      	str	r3, [sp, #56]	; 0x38
 8009994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009996:	2b00      	cmp	r3, #0
 8009998:	f040 8596 	bne.w	800a4c8 <_strtod_l+0xbb8>
 800999c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999e:	b1db      	cbz	r3, 80099d8 <_strtod_l+0xc8>
 80099a0:	4652      	mov	r2, sl
 80099a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099a6:	ec43 2b10 	vmov	d0, r2, r3
 80099aa:	b023      	add	sp, #140	; 0x8c
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	2a20      	cmp	r2, #32
 80099b2:	d1ce      	bne.n	8009952 <_strtod_l+0x42>
 80099b4:	3301      	adds	r3, #1
 80099b6:	931d      	str	r3, [sp, #116]	; 0x74
 80099b8:	e7c0      	b.n	800993c <_strtod_l+0x2c>
 80099ba:	2a2d      	cmp	r2, #45	; 0x2d
 80099bc:	d1c9      	bne.n	8009952 <_strtod_l+0x42>
 80099be:	2201      	movs	r2, #1
 80099c0:	920e      	str	r2, [sp, #56]	; 0x38
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	921d      	str	r2, [sp, #116]	; 0x74
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1c4      	bne.n	8009956 <_strtod_l+0x46>
 80099cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 8576 	bne.w	800a4c4 <_strtod_l+0xbb4>
 80099d8:	4652      	mov	r2, sl
 80099da:	465b      	mov	r3, fp
 80099dc:	e7e3      	b.n	80099a6 <_strtod_l+0x96>
 80099de:	2200      	movs	r2, #0
 80099e0:	e7ee      	b.n	80099c0 <_strtod_l+0xb0>
 80099e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099e4:	b13a      	cbz	r2, 80099f6 <_strtod_l+0xe6>
 80099e6:	2135      	movs	r1, #53	; 0x35
 80099e8:	a820      	add	r0, sp, #128	; 0x80
 80099ea:	f002 ff92 	bl	800c912 <__copybits>
 80099ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099f0:	4620      	mov	r0, r4
 80099f2:	f002 fb57 	bl	800c0a4 <_Bfree>
 80099f6:	3f01      	subs	r7, #1
 80099f8:	2f05      	cmp	r7, #5
 80099fa:	d807      	bhi.n	8009a0c <_strtod_l+0xfc>
 80099fc:	e8df f007 	tbb	[pc, r7]
 8009a00:	1d180b0e 	.word	0x1d180b0e
 8009a04:	030e      	.short	0x030e
 8009a06:	f04f 0b00 	mov.w	fp, #0
 8009a0a:	46da      	mov	sl, fp
 8009a0c:	0728      	lsls	r0, r5, #28
 8009a0e:	d5c1      	bpl.n	8009994 <_strtod_l+0x84>
 8009a10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009a14:	e7be      	b.n	8009994 <_strtod_l+0x84>
 8009a16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009a1a:	e7f7      	b.n	8009a0c <_strtod_l+0xfc>
 8009a1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009a20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009a22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a2e:	e7ed      	b.n	8009a0c <_strtod_l+0xfc>
 8009a30:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009bb8 <_strtod_l+0x2a8>
 8009a34:	f04f 0a00 	mov.w	sl, #0
 8009a38:	e7e8      	b.n	8009a0c <_strtod_l+0xfc>
 8009a3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009a3e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009a42:	e7e3      	b.n	8009a0c <_strtod_l+0xfc>
 8009a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	921d      	str	r2, [sp, #116]	; 0x74
 8009a4a:	785b      	ldrb	r3, [r3, #1]
 8009a4c:	2b30      	cmp	r3, #48	; 0x30
 8009a4e:	d0f9      	beq.n	8009a44 <_strtod_l+0x134>
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d09f      	beq.n	8009994 <_strtod_l+0x84>
 8009a54:	2301      	movs	r3, #1
 8009a56:	f04f 0900 	mov.w	r9, #0
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a64:	464f      	mov	r7, r9
 8009a66:	220a      	movs	r2, #10
 8009a68:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a6a:	7806      	ldrb	r6, [r0, #0]
 8009a6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a70:	b2d9      	uxtb	r1, r3
 8009a72:	2909      	cmp	r1, #9
 8009a74:	d92a      	bls.n	8009acc <_strtod_l+0x1bc>
 8009a76:	9907      	ldr	r1, [sp, #28]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	f003 fb58 	bl	800d12e <strncmp>
 8009a7e:	b398      	cbz	r0, 8009ae8 <_strtod_l+0x1d8>
 8009a80:	2000      	movs	r0, #0
 8009a82:	4633      	mov	r3, r6
 8009a84:	463d      	mov	r5, r7
 8009a86:	9007      	str	r0, [sp, #28]
 8009a88:	4602      	mov	r2, r0
 8009a8a:	2b65      	cmp	r3, #101	; 0x65
 8009a8c:	d001      	beq.n	8009a92 <_strtod_l+0x182>
 8009a8e:	2b45      	cmp	r3, #69	; 0x45
 8009a90:	d118      	bne.n	8009ac4 <_strtod_l+0x1b4>
 8009a92:	b91d      	cbnz	r5, 8009a9c <_strtod_l+0x18c>
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	4303      	orrs	r3, r0
 8009a98:	d098      	beq.n	80099cc <_strtod_l+0xbc>
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009aa0:	f108 0301 	add.w	r3, r8, #1
 8009aa4:	931d      	str	r3, [sp, #116]	; 0x74
 8009aa6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009aaa:	2b2b      	cmp	r3, #43	; 0x2b
 8009aac:	d075      	beq.n	8009b9a <_strtod_l+0x28a>
 8009aae:	2b2d      	cmp	r3, #45	; 0x2d
 8009ab0:	d07b      	beq.n	8009baa <_strtod_l+0x29a>
 8009ab2:	f04f 0c00 	mov.w	ip, #0
 8009ab6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009aba:	2909      	cmp	r1, #9
 8009abc:	f240 8082 	bls.w	8009bc4 <_strtod_l+0x2b4>
 8009ac0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	e09d      	b.n	8009c04 <_strtod_l+0x2f4>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e7c4      	b.n	8009a56 <_strtod_l+0x146>
 8009acc:	2f08      	cmp	r7, #8
 8009ace:	bfd8      	it	le
 8009ad0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009ad2:	f100 0001 	add.w	r0, r0, #1
 8009ad6:	bfda      	itte	le
 8009ad8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009adc:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ade:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009ae2:	3701      	adds	r7, #1
 8009ae4:	901d      	str	r0, [sp, #116]	; 0x74
 8009ae6:	e7bf      	b.n	8009a68 <_strtod_l+0x158>
 8009ae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009aea:	195a      	adds	r2, r3, r5
 8009aec:	921d      	str	r2, [sp, #116]	; 0x74
 8009aee:	5d5b      	ldrb	r3, [r3, r5]
 8009af0:	2f00      	cmp	r7, #0
 8009af2:	d037      	beq.n	8009b64 <_strtod_l+0x254>
 8009af4:	9007      	str	r0, [sp, #28]
 8009af6:	463d      	mov	r5, r7
 8009af8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009afc:	2a09      	cmp	r2, #9
 8009afe:	d912      	bls.n	8009b26 <_strtod_l+0x216>
 8009b00:	2201      	movs	r2, #1
 8009b02:	e7c2      	b.n	8009a8a <_strtod_l+0x17a>
 8009b04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	921d      	str	r2, [sp, #116]	; 0x74
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	2b30      	cmp	r3, #48	; 0x30
 8009b10:	d0f8      	beq.n	8009b04 <_strtod_l+0x1f4>
 8009b12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009b16:	2a08      	cmp	r2, #8
 8009b18:	f200 84db 	bhi.w	800a4d2 <_strtod_l+0xbc2>
 8009b1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b1e:	9007      	str	r0, [sp, #28]
 8009b20:	2000      	movs	r0, #0
 8009b22:	920a      	str	r2, [sp, #40]	; 0x28
 8009b24:	4605      	mov	r5, r0
 8009b26:	3b30      	subs	r3, #48	; 0x30
 8009b28:	f100 0201 	add.w	r2, r0, #1
 8009b2c:	d014      	beq.n	8009b58 <_strtod_l+0x248>
 8009b2e:	9907      	ldr	r1, [sp, #28]
 8009b30:	4411      	add	r1, r2
 8009b32:	9107      	str	r1, [sp, #28]
 8009b34:	462a      	mov	r2, r5
 8009b36:	eb00 0e05 	add.w	lr, r0, r5
 8009b3a:	210a      	movs	r1, #10
 8009b3c:	4572      	cmp	r2, lr
 8009b3e:	d113      	bne.n	8009b68 <_strtod_l+0x258>
 8009b40:	182a      	adds	r2, r5, r0
 8009b42:	2a08      	cmp	r2, #8
 8009b44:	f105 0501 	add.w	r5, r5, #1
 8009b48:	4405      	add	r5, r0
 8009b4a:	dc1c      	bgt.n	8009b86 <_strtod_l+0x276>
 8009b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b4e:	220a      	movs	r2, #10
 8009b50:	fb02 3301 	mla	r3, r2, r1, r3
 8009b54:	9309      	str	r3, [sp, #36]	; 0x24
 8009b56:	2200      	movs	r2, #0
 8009b58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b5a:	1c59      	adds	r1, r3, #1
 8009b5c:	911d      	str	r1, [sp, #116]	; 0x74
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	4610      	mov	r0, r2
 8009b62:	e7c9      	b.n	8009af8 <_strtod_l+0x1e8>
 8009b64:	4638      	mov	r0, r7
 8009b66:	e7d2      	b.n	8009b0e <_strtod_l+0x1fe>
 8009b68:	2a08      	cmp	r2, #8
 8009b6a:	dc04      	bgt.n	8009b76 <_strtod_l+0x266>
 8009b6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b6e:	434e      	muls	r6, r1
 8009b70:	9609      	str	r6, [sp, #36]	; 0x24
 8009b72:	3201      	adds	r2, #1
 8009b74:	e7e2      	b.n	8009b3c <_strtod_l+0x22c>
 8009b76:	f102 0c01 	add.w	ip, r2, #1
 8009b7a:	f1bc 0f10 	cmp.w	ip, #16
 8009b7e:	bfd8      	it	le
 8009b80:	fb01 f909 	mulle.w	r9, r1, r9
 8009b84:	e7f5      	b.n	8009b72 <_strtod_l+0x262>
 8009b86:	2d10      	cmp	r5, #16
 8009b88:	bfdc      	itt	le
 8009b8a:	220a      	movle	r2, #10
 8009b8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009b90:	e7e1      	b.n	8009b56 <_strtod_l+0x246>
 8009b92:	2300      	movs	r3, #0
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	2201      	movs	r2, #1
 8009b98:	e77c      	b.n	8009a94 <_strtod_l+0x184>
 8009b9a:	f04f 0c00 	mov.w	ip, #0
 8009b9e:	f108 0302 	add.w	r3, r8, #2
 8009ba2:	931d      	str	r3, [sp, #116]	; 0x74
 8009ba4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009ba8:	e785      	b.n	8009ab6 <_strtod_l+0x1a6>
 8009baa:	f04f 0c01 	mov.w	ip, #1
 8009bae:	e7f6      	b.n	8009b9e <_strtod_l+0x28e>
 8009bb0:	0800db6c 	.word	0x0800db6c
 8009bb4:	0800d8b8 	.word	0x0800d8b8
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	911d      	str	r1, [sp, #116]	; 0x74
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	2b30      	cmp	r3, #48	; 0x30
 8009bc6:	d0f9      	beq.n	8009bbc <_strtod_l+0x2ac>
 8009bc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009bcc:	2908      	cmp	r1, #8
 8009bce:	f63f af79 	bhi.w	8009ac4 <_strtod_l+0x1b4>
 8009bd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009bd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bdc:	1c59      	adds	r1, r3, #1
 8009bde:	911d      	str	r1, [sp, #116]	; 0x74
 8009be0:	785b      	ldrb	r3, [r3, #1]
 8009be2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009be6:	2e09      	cmp	r6, #9
 8009be8:	d937      	bls.n	8009c5a <_strtod_l+0x34a>
 8009bea:	9e08      	ldr	r6, [sp, #32]
 8009bec:	1b89      	subs	r1, r1, r6
 8009bee:	2908      	cmp	r1, #8
 8009bf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009bf4:	dc02      	bgt.n	8009bfc <_strtod_l+0x2ec>
 8009bf6:	4576      	cmp	r6, lr
 8009bf8:	bfa8      	it	ge
 8009bfa:	4676      	movge	r6, lr
 8009bfc:	f1bc 0f00 	cmp.w	ip, #0
 8009c00:	d000      	beq.n	8009c04 <_strtod_l+0x2f4>
 8009c02:	4276      	negs	r6, r6
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	d14f      	bne.n	8009ca8 <_strtod_l+0x398>
 8009c08:	9904      	ldr	r1, [sp, #16]
 8009c0a:	4301      	orrs	r1, r0
 8009c0c:	f47f aec2 	bne.w	8009994 <_strtod_l+0x84>
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	f47f aedb 	bne.w	80099cc <_strtod_l+0xbc>
 8009c16:	2b69      	cmp	r3, #105	; 0x69
 8009c18:	d027      	beq.n	8009c6a <_strtod_l+0x35a>
 8009c1a:	dc24      	bgt.n	8009c66 <_strtod_l+0x356>
 8009c1c:	2b49      	cmp	r3, #73	; 0x49
 8009c1e:	d024      	beq.n	8009c6a <_strtod_l+0x35a>
 8009c20:	2b4e      	cmp	r3, #78	; 0x4e
 8009c22:	f47f aed3 	bne.w	80099cc <_strtod_l+0xbc>
 8009c26:	499e      	ldr	r1, [pc, #632]	; (8009ea0 <_strtod_l+0x590>)
 8009c28:	a81d      	add	r0, sp, #116	; 0x74
 8009c2a:	f002 f8b7 	bl	800bd9c <__match>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f43f aecc 	beq.w	80099cc <_strtod_l+0xbc>
 8009c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b28      	cmp	r3, #40	; 0x28
 8009c3a:	d12d      	bne.n	8009c98 <_strtod_l+0x388>
 8009c3c:	4999      	ldr	r1, [pc, #612]	; (8009ea4 <_strtod_l+0x594>)
 8009c3e:	aa20      	add	r2, sp, #128	; 0x80
 8009c40:	a81d      	add	r0, sp, #116	; 0x74
 8009c42:	f002 f8bf 	bl	800bdc4 <__hexnan>
 8009c46:	2805      	cmp	r0, #5
 8009c48:	d126      	bne.n	8009c98 <_strtod_l+0x388>
 8009c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009c50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c58:	e69c      	b.n	8009994 <_strtod_l+0x84>
 8009c5a:	210a      	movs	r1, #10
 8009c5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009c60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c64:	e7b9      	b.n	8009bda <_strtod_l+0x2ca>
 8009c66:	2b6e      	cmp	r3, #110	; 0x6e
 8009c68:	e7db      	b.n	8009c22 <_strtod_l+0x312>
 8009c6a:	498f      	ldr	r1, [pc, #572]	; (8009ea8 <_strtod_l+0x598>)
 8009c6c:	a81d      	add	r0, sp, #116	; 0x74
 8009c6e:	f002 f895 	bl	800bd9c <__match>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	f43f aeaa 	beq.w	80099cc <_strtod_l+0xbc>
 8009c78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c7a:	498c      	ldr	r1, [pc, #560]	; (8009eac <_strtod_l+0x59c>)
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	a81d      	add	r0, sp, #116	; 0x74
 8009c80:	931d      	str	r3, [sp, #116]	; 0x74
 8009c82:	f002 f88b 	bl	800bd9c <__match>
 8009c86:	b910      	cbnz	r0, 8009c8e <_strtod_l+0x37e>
 8009c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	931d      	str	r3, [sp, #116]	; 0x74
 8009c8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009ebc <_strtod_l+0x5ac>
 8009c92:	f04f 0a00 	mov.w	sl, #0
 8009c96:	e67d      	b.n	8009994 <_strtod_l+0x84>
 8009c98:	4885      	ldr	r0, [pc, #532]	; (8009eb0 <_strtod_l+0x5a0>)
 8009c9a:	f003 f9ed 	bl	800d078 <nan>
 8009c9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009ca2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009ca6:	e675      	b.n	8009994 <_strtod_l+0x84>
 8009ca8:	9b07      	ldr	r3, [sp, #28]
 8009caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cac:	1af3      	subs	r3, r6, r3
 8009cae:	2f00      	cmp	r7, #0
 8009cb0:	bf08      	it	eq
 8009cb2:	462f      	moveq	r7, r5
 8009cb4:	2d10      	cmp	r5, #16
 8009cb6:	9308      	str	r3, [sp, #32]
 8009cb8:	46a8      	mov	r8, r5
 8009cba:	bfa8      	it	ge
 8009cbc:	f04f 0810 	movge.w	r8, #16
 8009cc0:	f7f6 fc40 	bl	8000544 <__aeabi_ui2d>
 8009cc4:	2d09      	cmp	r5, #9
 8009cc6:	4682      	mov	sl, r0
 8009cc8:	468b      	mov	fp, r1
 8009cca:	dd13      	ble.n	8009cf4 <_strtod_l+0x3e4>
 8009ccc:	4b79      	ldr	r3, [pc, #484]	; (8009eb4 <_strtod_l+0x5a4>)
 8009cce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009cd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009cd6:	f7f6 fcaf 	bl	8000638 <__aeabi_dmul>
 8009cda:	4682      	mov	sl, r0
 8009cdc:	4648      	mov	r0, r9
 8009cde:	468b      	mov	fp, r1
 8009ce0:	f7f6 fc30 	bl	8000544 <__aeabi_ui2d>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4650      	mov	r0, sl
 8009cea:	4659      	mov	r1, fp
 8009cec:	f7f6 faee 	bl	80002cc <__adddf3>
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	468b      	mov	fp, r1
 8009cf4:	2d0f      	cmp	r5, #15
 8009cf6:	dc38      	bgt.n	8009d6a <_strtod_l+0x45a>
 8009cf8:	9b08      	ldr	r3, [sp, #32]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f43f ae4a 	beq.w	8009994 <_strtod_l+0x84>
 8009d00:	dd24      	ble.n	8009d4c <_strtod_l+0x43c>
 8009d02:	2b16      	cmp	r3, #22
 8009d04:	dc0b      	bgt.n	8009d1e <_strtod_l+0x40e>
 8009d06:	4d6b      	ldr	r5, [pc, #428]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009d0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	f7f6 fc90 	bl	8000638 <__aeabi_dmul>
 8009d18:	4682      	mov	sl, r0
 8009d1a:	468b      	mov	fp, r1
 8009d1c:	e63a      	b.n	8009994 <_strtod_l+0x84>
 8009d1e:	9a08      	ldr	r2, [sp, #32]
 8009d20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009d24:	4293      	cmp	r3, r2
 8009d26:	db20      	blt.n	8009d6a <_strtod_l+0x45a>
 8009d28:	4c62      	ldr	r4, [pc, #392]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d2a:	f1c5 050f 	rsb	r5, r5, #15
 8009d2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d32:	4652      	mov	r2, sl
 8009d34:	465b      	mov	r3, fp
 8009d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d3a:	f7f6 fc7d 	bl	8000638 <__aeabi_dmul>
 8009d3e:	9b08      	ldr	r3, [sp, #32]
 8009d40:	1b5d      	subs	r5, r3, r5
 8009d42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d4a:	e7e3      	b.n	8009d14 <_strtod_l+0x404>
 8009d4c:	9b08      	ldr	r3, [sp, #32]
 8009d4e:	3316      	adds	r3, #22
 8009d50:	db0b      	blt.n	8009d6a <_strtod_l+0x45a>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	4a57      	ldr	r2, [pc, #348]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d56:	1b9e      	subs	r6, r3, r6
 8009d58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009d5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d60:	4650      	mov	r0, sl
 8009d62:	4659      	mov	r1, fp
 8009d64:	f7f6 fd92 	bl	800088c <__aeabi_ddiv>
 8009d68:	e7d6      	b.n	8009d18 <_strtod_l+0x408>
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	eba5 0808 	sub.w	r8, r5, r8
 8009d70:	4498      	add	r8, r3
 8009d72:	f1b8 0f00 	cmp.w	r8, #0
 8009d76:	dd71      	ble.n	8009e5c <_strtod_l+0x54c>
 8009d78:	f018 030f 	ands.w	r3, r8, #15
 8009d7c:	d00a      	beq.n	8009d94 <_strtod_l+0x484>
 8009d7e:	494d      	ldr	r1, [pc, #308]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d84:	4652      	mov	r2, sl
 8009d86:	465b      	mov	r3, fp
 8009d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d8c:	f7f6 fc54 	bl	8000638 <__aeabi_dmul>
 8009d90:	4682      	mov	sl, r0
 8009d92:	468b      	mov	fp, r1
 8009d94:	f038 080f 	bics.w	r8, r8, #15
 8009d98:	d04d      	beq.n	8009e36 <_strtod_l+0x526>
 8009d9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009d9e:	dd22      	ble.n	8009de6 <_strtod_l+0x4d6>
 8009da0:	2500      	movs	r5, #0
 8009da2:	462e      	mov	r6, r5
 8009da4:	9509      	str	r5, [sp, #36]	; 0x24
 8009da6:	9507      	str	r5, [sp, #28]
 8009da8:	2322      	movs	r3, #34	; 0x22
 8009daa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009ebc <_strtod_l+0x5ac>
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	f04f 0a00 	mov.w	sl, #0
 8009db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f43f adec 	beq.w	8009994 <_strtod_l+0x84>
 8009dbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f002 f970 	bl	800c0a4 <_Bfree>
 8009dc4:	9907      	ldr	r1, [sp, #28]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f002 f96c 	bl	800c0a4 <_Bfree>
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f002 f968 	bl	800c0a4 <_Bfree>
 8009dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f002 f964 	bl	800c0a4 <_Bfree>
 8009ddc:	4629      	mov	r1, r5
 8009dde:	4620      	mov	r0, r4
 8009de0:	f002 f960 	bl	800c0a4 <_Bfree>
 8009de4:	e5d6      	b.n	8009994 <_strtod_l+0x84>
 8009de6:	2300      	movs	r3, #0
 8009de8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009dec:	4650      	mov	r0, sl
 8009dee:	4659      	mov	r1, fp
 8009df0:	4699      	mov	r9, r3
 8009df2:	f1b8 0f01 	cmp.w	r8, #1
 8009df6:	dc21      	bgt.n	8009e3c <_strtod_l+0x52c>
 8009df8:	b10b      	cbz	r3, 8009dfe <_strtod_l+0x4ee>
 8009dfa:	4682      	mov	sl, r0
 8009dfc:	468b      	mov	fp, r1
 8009dfe:	4b2e      	ldr	r3, [pc, #184]	; (8009eb8 <_strtod_l+0x5a8>)
 8009e00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009e08:	4652      	mov	r2, sl
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009e10:	f7f6 fc12 	bl	8000638 <__aeabi_dmul>
 8009e14:	4b29      	ldr	r3, [pc, #164]	; (8009ebc <_strtod_l+0x5ac>)
 8009e16:	460a      	mov	r2, r1
 8009e18:	400b      	ands	r3, r1
 8009e1a:	4929      	ldr	r1, [pc, #164]	; (8009ec0 <_strtod_l+0x5b0>)
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	4682      	mov	sl, r0
 8009e20:	d8be      	bhi.n	8009da0 <_strtod_l+0x490>
 8009e22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e26:	428b      	cmp	r3, r1
 8009e28:	bf86      	itte	hi
 8009e2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009ec4 <_strtod_l+0x5b4>
 8009e2e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009e32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009e36:	2300      	movs	r3, #0
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	e081      	b.n	8009f40 <_strtod_l+0x630>
 8009e3c:	f018 0f01 	tst.w	r8, #1
 8009e40:	d007      	beq.n	8009e52 <_strtod_l+0x542>
 8009e42:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <_strtod_l+0x5a8>)
 8009e44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f7f6 fbf4 	bl	8000638 <__aeabi_dmul>
 8009e50:	2301      	movs	r3, #1
 8009e52:	f109 0901 	add.w	r9, r9, #1
 8009e56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e5a:	e7ca      	b.n	8009df2 <_strtod_l+0x4e2>
 8009e5c:	d0eb      	beq.n	8009e36 <_strtod_l+0x526>
 8009e5e:	f1c8 0800 	rsb	r8, r8, #0
 8009e62:	f018 020f 	ands.w	r2, r8, #15
 8009e66:	d00a      	beq.n	8009e7e <_strtod_l+0x56e>
 8009e68:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <_strtod_l+0x5a4>)
 8009e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e6e:	4650      	mov	r0, sl
 8009e70:	4659      	mov	r1, fp
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f7f6 fd09 	bl	800088c <__aeabi_ddiv>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	468b      	mov	fp, r1
 8009e7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009e82:	d0d8      	beq.n	8009e36 <_strtod_l+0x526>
 8009e84:	f1b8 0f1f 	cmp.w	r8, #31
 8009e88:	dd1e      	ble.n	8009ec8 <_strtod_l+0x5b8>
 8009e8a:	2500      	movs	r5, #0
 8009e8c:	462e      	mov	r6, r5
 8009e8e:	9509      	str	r5, [sp, #36]	; 0x24
 8009e90:	9507      	str	r5, [sp, #28]
 8009e92:	2322      	movs	r3, #34	; 0x22
 8009e94:	f04f 0a00 	mov.w	sl, #0
 8009e98:	f04f 0b00 	mov.w	fp, #0
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	e789      	b.n	8009db4 <_strtod_l+0x4a4>
 8009ea0:	0800d889 	.word	0x0800d889
 8009ea4:	0800d8cc 	.word	0x0800d8cc
 8009ea8:	0800d881 	.word	0x0800d881
 8009eac:	0800da0c 	.word	0x0800da0c
 8009eb0:	0800dd28 	.word	0x0800dd28
 8009eb4:	0800dc08 	.word	0x0800dc08
 8009eb8:	0800dbe0 	.word	0x0800dbe0
 8009ebc:	7ff00000 	.word	0x7ff00000
 8009ec0:	7ca00000 	.word	0x7ca00000
 8009ec4:	7fefffff 	.word	0x7fefffff
 8009ec8:	f018 0310 	ands.w	r3, r8, #16
 8009ecc:	bf18      	it	ne
 8009ece:	236a      	movne	r3, #106	; 0x6a
 8009ed0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a288 <_strtod_l+0x978>
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	4659      	mov	r1, fp
 8009eda:	2300      	movs	r3, #0
 8009edc:	f018 0f01 	tst.w	r8, #1
 8009ee0:	d004      	beq.n	8009eec <_strtod_l+0x5dc>
 8009ee2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ee6:	f7f6 fba7 	bl	8000638 <__aeabi_dmul>
 8009eea:	2301      	movs	r3, #1
 8009eec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009ef0:	f109 0908 	add.w	r9, r9, #8
 8009ef4:	d1f2      	bne.n	8009edc <_strtod_l+0x5cc>
 8009ef6:	b10b      	cbz	r3, 8009efc <_strtod_l+0x5ec>
 8009ef8:	4682      	mov	sl, r0
 8009efa:	468b      	mov	fp, r1
 8009efc:	9b04      	ldr	r3, [sp, #16]
 8009efe:	b1bb      	cbz	r3, 8009f30 <_strtod_l+0x620>
 8009f00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009f04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	dd10      	ble.n	8009f30 <_strtod_l+0x620>
 8009f0e:	2b1f      	cmp	r3, #31
 8009f10:	f340 8128 	ble.w	800a164 <_strtod_l+0x854>
 8009f14:	2b34      	cmp	r3, #52	; 0x34
 8009f16:	bfde      	ittt	le
 8009f18:	3b20      	suble	r3, #32
 8009f1a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009f1e:	fa02 f303 	lslle.w	r3, r2, r3
 8009f22:	f04f 0a00 	mov.w	sl, #0
 8009f26:	bfcc      	ite	gt
 8009f28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f2c:	ea03 0b01 	andle.w	fp, r3, r1
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	4650      	mov	r0, sl
 8009f36:	4659      	mov	r1, fp
 8009f38:	f7f6 fde6 	bl	8000b08 <__aeabi_dcmpeq>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d1a4      	bne.n	8009e8a <_strtod_l+0x57a>
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f46:	462b      	mov	r3, r5
 8009f48:	463a      	mov	r2, r7
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f002 f916 	bl	800c17c <__s2b>
 8009f50:	9009      	str	r0, [sp, #36]	; 0x24
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f43f af24 	beq.w	8009da0 <_strtod_l+0x490>
 8009f58:	9b07      	ldr	r3, [sp, #28]
 8009f5a:	1b9e      	subs	r6, r3, r6
 8009f5c:	9b08      	ldr	r3, [sp, #32]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfb4      	ite	lt
 8009f62:	4633      	movlt	r3, r6
 8009f64:	2300      	movge	r3, #0
 8009f66:	9310      	str	r3, [sp, #64]	; 0x40
 8009f68:	9b08      	ldr	r3, [sp, #32]
 8009f6a:	2500      	movs	r5, #0
 8009f6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f70:	9318      	str	r3, [sp, #96]	; 0x60
 8009f72:	462e      	mov	r6, r5
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	4620      	mov	r0, r4
 8009f78:	6859      	ldr	r1, [r3, #4]
 8009f7a:	f002 f853 	bl	800c024 <_Balloc>
 8009f7e:	9007      	str	r0, [sp, #28]
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f43f af11 	beq.w	8009da8 <_strtod_l+0x498>
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	3202      	adds	r2, #2
 8009f8c:	f103 010c 	add.w	r1, r3, #12
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	300c      	adds	r0, #12
 8009f94:	f002 f838 	bl	800c008 <memcpy>
 8009f98:	ec4b ab10 	vmov	d0, sl, fp
 8009f9c:	aa20      	add	r2, sp, #128	; 0x80
 8009f9e:	a91f      	add	r1, sp, #124	; 0x7c
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009fa6:	f002 fc25 	bl	800c7f4 <__d2b>
 8009faa:	901e      	str	r0, [sp, #120]	; 0x78
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f43f aefb 	beq.w	8009da8 <_strtod_l+0x498>
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f002 f97b 	bl	800c2b0 <__i2b>
 8009fba:	4606      	mov	r6, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f43f aef3 	beq.w	8009da8 <_strtod_l+0x498>
 8009fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fc4:	9904      	ldr	r1, [sp, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bfab      	itete	ge
 8009fca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009fcc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009fce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009fd0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009fd4:	bfac      	ite	ge
 8009fd6:	eb03 0902 	addge.w	r9, r3, r2
 8009fda:	1ad7      	sublt	r7, r2, r3
 8009fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fde:	eba3 0801 	sub.w	r8, r3, r1
 8009fe2:	4490      	add	r8, r2
 8009fe4:	4ba3      	ldr	r3, [pc, #652]	; (800a274 <_strtod_l+0x964>)
 8009fe6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009fea:	4598      	cmp	r8, r3
 8009fec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ff0:	f280 80cc 	bge.w	800a18c <_strtod_l+0x87c>
 8009ff4:	eba3 0308 	sub.w	r3, r3, r8
 8009ff8:	2b1f      	cmp	r3, #31
 8009ffa:	eba2 0203 	sub.w	r2, r2, r3
 8009ffe:	f04f 0101 	mov.w	r1, #1
 800a002:	f300 80b6 	bgt.w	800a172 <_strtod_l+0x862>
 800a006:	fa01 f303 	lsl.w	r3, r1, r3
 800a00a:	9311      	str	r3, [sp, #68]	; 0x44
 800a00c:	2300      	movs	r3, #0
 800a00e:	930c      	str	r3, [sp, #48]	; 0x30
 800a010:	eb09 0802 	add.w	r8, r9, r2
 800a014:	9b04      	ldr	r3, [sp, #16]
 800a016:	45c1      	cmp	r9, r8
 800a018:	4417      	add	r7, r2
 800a01a:	441f      	add	r7, r3
 800a01c:	464b      	mov	r3, r9
 800a01e:	bfa8      	it	ge
 800a020:	4643      	movge	r3, r8
 800a022:	42bb      	cmp	r3, r7
 800a024:	bfa8      	it	ge
 800a026:	463b      	movge	r3, r7
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfc2      	ittt	gt
 800a02c:	eba8 0803 	subgt.w	r8, r8, r3
 800a030:	1aff      	subgt	r7, r7, r3
 800a032:	eba9 0903 	subgt.w	r9, r9, r3
 800a036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dd17      	ble.n	800a06c <_strtod_l+0x75c>
 800a03c:	4631      	mov	r1, r6
 800a03e:	461a      	mov	r2, r3
 800a040:	4620      	mov	r0, r4
 800a042:	f002 f9f1 	bl	800c428 <__pow5mult>
 800a046:	4606      	mov	r6, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	f43f aead 	beq.w	8009da8 <_strtod_l+0x498>
 800a04e:	4601      	mov	r1, r0
 800a050:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a052:	4620      	mov	r0, r4
 800a054:	f002 f942 	bl	800c2dc <__multiply>
 800a058:	900f      	str	r0, [sp, #60]	; 0x3c
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f43f aea4 	beq.w	8009da8 <_strtod_l+0x498>
 800a060:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a062:	4620      	mov	r0, r4
 800a064:	f002 f81e 	bl	800c0a4 <_Bfree>
 800a068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a06a:	931e      	str	r3, [sp, #120]	; 0x78
 800a06c:	f1b8 0f00 	cmp.w	r8, #0
 800a070:	f300 8091 	bgt.w	800a196 <_strtod_l+0x886>
 800a074:	9b08      	ldr	r3, [sp, #32]
 800a076:	2b00      	cmp	r3, #0
 800a078:	dd08      	ble.n	800a08c <_strtod_l+0x77c>
 800a07a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a07c:	9907      	ldr	r1, [sp, #28]
 800a07e:	4620      	mov	r0, r4
 800a080:	f002 f9d2 	bl	800c428 <__pow5mult>
 800a084:	9007      	str	r0, [sp, #28]
 800a086:	2800      	cmp	r0, #0
 800a088:	f43f ae8e 	beq.w	8009da8 <_strtod_l+0x498>
 800a08c:	2f00      	cmp	r7, #0
 800a08e:	dd08      	ble.n	800a0a2 <_strtod_l+0x792>
 800a090:	9907      	ldr	r1, [sp, #28]
 800a092:	463a      	mov	r2, r7
 800a094:	4620      	mov	r0, r4
 800a096:	f002 fa21 	bl	800c4dc <__lshift>
 800a09a:	9007      	str	r0, [sp, #28]
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f43f ae83 	beq.w	8009da8 <_strtod_l+0x498>
 800a0a2:	f1b9 0f00 	cmp.w	r9, #0
 800a0a6:	dd08      	ble.n	800a0ba <_strtod_l+0x7aa>
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	464a      	mov	r2, r9
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f002 fa15 	bl	800c4dc <__lshift>
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f43f ae77 	beq.w	8009da8 <_strtod_l+0x498>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f002 fa94 	bl	800c5ec <__mdiff>
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f43f ae6e 	beq.w	8009da8 <_strtod_l+0x498>
 800a0cc:	68c3      	ldr	r3, [r0, #12]
 800a0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60c3      	str	r3, [r0, #12]
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	f002 fa6d 	bl	800c5b4 <__mcmp>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	da65      	bge.n	800a1aa <_strtod_l+0x89a>
 800a0de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0e0:	ea53 030a 	orrs.w	r3, r3, sl
 800a0e4:	f040 8087 	bne.w	800a1f6 <_strtod_l+0x8e6>
 800a0e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f040 8082 	bne.w	800a1f6 <_strtod_l+0x8e6>
 800a0f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0f6:	0d1b      	lsrs	r3, r3, #20
 800a0f8:	051b      	lsls	r3, r3, #20
 800a0fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a0fe:	d97a      	bls.n	800a1f6 <_strtod_l+0x8e6>
 800a100:	696b      	ldr	r3, [r5, #20]
 800a102:	b913      	cbnz	r3, 800a10a <_strtod_l+0x7fa>
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	2b01      	cmp	r3, #1
 800a108:	dd75      	ble.n	800a1f6 <_strtod_l+0x8e6>
 800a10a:	4629      	mov	r1, r5
 800a10c:	2201      	movs	r2, #1
 800a10e:	4620      	mov	r0, r4
 800a110:	f002 f9e4 	bl	800c4dc <__lshift>
 800a114:	4631      	mov	r1, r6
 800a116:	4605      	mov	r5, r0
 800a118:	f002 fa4c 	bl	800c5b4 <__mcmp>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	dd6a      	ble.n	800a1f6 <_strtod_l+0x8e6>
 800a120:	9904      	ldr	r1, [sp, #16]
 800a122:	4a55      	ldr	r2, [pc, #340]	; (800a278 <_strtod_l+0x968>)
 800a124:	465b      	mov	r3, fp
 800a126:	2900      	cmp	r1, #0
 800a128:	f000 8085 	beq.w	800a236 <_strtod_l+0x926>
 800a12c:	ea02 010b 	and.w	r1, r2, fp
 800a130:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a134:	dc7f      	bgt.n	800a236 <_strtod_l+0x926>
 800a136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a13a:	f77f aeaa 	ble.w	8009e92 <_strtod_l+0x582>
 800a13e:	4a4f      	ldr	r2, [pc, #316]	; (800a27c <_strtod_l+0x96c>)
 800a140:	2300      	movs	r3, #0
 800a142:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a146:	4650      	mov	r0, sl
 800a148:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a14c:	4659      	mov	r1, fp
 800a14e:	f7f6 fa73 	bl	8000638 <__aeabi_dmul>
 800a152:	460b      	mov	r3, r1
 800a154:	4303      	orrs	r3, r0
 800a156:	bf08      	it	eq
 800a158:	2322      	moveq	r3, #34	; 0x22
 800a15a:	4682      	mov	sl, r0
 800a15c:	468b      	mov	fp, r1
 800a15e:	bf08      	it	eq
 800a160:	6023      	streq	r3, [r4, #0]
 800a162:	e62b      	b.n	8009dbc <_strtod_l+0x4ac>
 800a164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	ea03 0a0a 	and.w	sl, r3, sl
 800a170:	e6de      	b.n	8009f30 <_strtod_l+0x620>
 800a172:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a176:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a17a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a17e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a182:	fa01 f308 	lsl.w	r3, r1, r8
 800a186:	930c      	str	r3, [sp, #48]	; 0x30
 800a188:	9111      	str	r1, [sp, #68]	; 0x44
 800a18a:	e741      	b.n	800a010 <_strtod_l+0x700>
 800a18c:	2300      	movs	r3, #0
 800a18e:	930c      	str	r3, [sp, #48]	; 0x30
 800a190:	2301      	movs	r3, #1
 800a192:	9311      	str	r3, [sp, #68]	; 0x44
 800a194:	e73c      	b.n	800a010 <_strtod_l+0x700>
 800a196:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a198:	4642      	mov	r2, r8
 800a19a:	4620      	mov	r0, r4
 800a19c:	f002 f99e 	bl	800c4dc <__lshift>
 800a1a0:	901e      	str	r0, [sp, #120]	; 0x78
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f47f af66 	bne.w	800a074 <_strtod_l+0x764>
 800a1a8:	e5fe      	b.n	8009da8 <_strtod_l+0x498>
 800a1aa:	465f      	mov	r7, fp
 800a1ac:	d16e      	bne.n	800a28c <_strtod_l+0x97c>
 800a1ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1b4:	b342      	cbz	r2, 800a208 <_strtod_l+0x8f8>
 800a1b6:	4a32      	ldr	r2, [pc, #200]	; (800a280 <_strtod_l+0x970>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d128      	bne.n	800a20e <_strtod_l+0x8fe>
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	4650      	mov	r0, sl
 800a1c0:	b1eb      	cbz	r3, 800a1fe <_strtod_l+0x8ee>
 800a1c2:	4a2d      	ldr	r2, [pc, #180]	; (800a278 <_strtod_l+0x968>)
 800a1c4:	403a      	ands	r2, r7
 800a1c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a1ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a1ce:	d819      	bhi.n	800a204 <_strtod_l+0x8f4>
 800a1d0:	0d12      	lsrs	r2, r2, #20
 800a1d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1da:	4298      	cmp	r0, r3
 800a1dc:	d117      	bne.n	800a20e <_strtod_l+0x8fe>
 800a1de:	4b29      	ldr	r3, [pc, #164]	; (800a284 <_strtod_l+0x974>)
 800a1e0:	429f      	cmp	r7, r3
 800a1e2:	d102      	bne.n	800a1ea <_strtod_l+0x8da>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f43f addf 	beq.w	8009da8 <_strtod_l+0x498>
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <_strtod_l+0x968>)
 800a1ec:	403b      	ands	r3, r7
 800a1ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a1f2:	f04f 0a00 	mov.w	sl, #0
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1a0      	bne.n	800a13e <_strtod_l+0x82e>
 800a1fc:	e5de      	b.n	8009dbc <_strtod_l+0x4ac>
 800a1fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a202:	e7ea      	b.n	800a1da <_strtod_l+0x8ca>
 800a204:	460b      	mov	r3, r1
 800a206:	e7e8      	b.n	800a1da <_strtod_l+0x8ca>
 800a208:	ea53 030a 	orrs.w	r3, r3, sl
 800a20c:	d088      	beq.n	800a120 <_strtod_l+0x810>
 800a20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a210:	b1db      	cbz	r3, 800a24a <_strtod_l+0x93a>
 800a212:	423b      	tst	r3, r7
 800a214:	d0ef      	beq.n	800a1f6 <_strtod_l+0x8e6>
 800a216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a218:	9a04      	ldr	r2, [sp, #16]
 800a21a:	4650      	mov	r0, sl
 800a21c:	4659      	mov	r1, fp
 800a21e:	b1c3      	cbz	r3, 800a252 <_strtod_l+0x942>
 800a220:	f7ff fb58 	bl	80098d4 <sulp>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a22c:	f7f6 f84e 	bl	80002cc <__adddf3>
 800a230:	4682      	mov	sl, r0
 800a232:	468b      	mov	fp, r1
 800a234:	e7df      	b.n	800a1f6 <_strtod_l+0x8e6>
 800a236:	4013      	ands	r3, r2
 800a238:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a23c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a240:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a244:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a248:	e7d5      	b.n	800a1f6 <_strtod_l+0x8e6>
 800a24a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a24c:	ea13 0f0a 	tst.w	r3, sl
 800a250:	e7e0      	b.n	800a214 <_strtod_l+0x904>
 800a252:	f7ff fb3f 	bl	80098d4 <sulp>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a25e:	f7f6 f833 	bl	80002c8 <__aeabi_dsub>
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	4682      	mov	sl, r0
 800a268:	468b      	mov	fp, r1
 800a26a:	f7f6 fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d0c1      	beq.n	800a1f6 <_strtod_l+0x8e6>
 800a272:	e60e      	b.n	8009e92 <_strtod_l+0x582>
 800a274:	fffffc02 	.word	0xfffffc02
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	39500000 	.word	0x39500000
 800a280:	000fffff 	.word	0x000fffff
 800a284:	7fefffff 	.word	0x7fefffff
 800a288:	0800d8e0 	.word	0x0800d8e0
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	f002 fb0c 	bl	800c8ac <__ratio>
 800a294:	ec59 8b10 	vmov	r8, r9, d0
 800a298:	ee10 0a10 	vmov	r0, s0
 800a29c:	2200      	movs	r2, #0
 800a29e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	f7f6 fc44 	bl	8000b30 <__aeabi_dcmple>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d07c      	beq.n	800a3a6 <_strtod_l+0xa96>
 800a2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d04c      	beq.n	800a34c <_strtod_l+0xa3c>
 800a2b2:	4b95      	ldr	r3, [pc, #596]	; (800a508 <_strtod_l+0xbf8>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a2ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a508 <_strtod_l+0xbf8>
 800a2be:	f04f 0800 	mov.w	r8, #0
 800a2c2:	4b92      	ldr	r3, [pc, #584]	; (800a50c <_strtod_l+0xbfc>)
 800a2c4:	403b      	ands	r3, r7
 800a2c6:	9311      	str	r3, [sp, #68]	; 0x44
 800a2c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2ca:	4b91      	ldr	r3, [pc, #580]	; (800a510 <_strtod_l+0xc00>)
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	f040 80b2 	bne.w	800a436 <_strtod_l+0xb26>
 800a2d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a2de:	ec4b ab10 	vmov	d0, sl, fp
 800a2e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a2e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2ea:	f002 fa07 	bl	800c6fc <__ulp>
 800a2ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2f2:	ec53 2b10 	vmov	r2, r3, d0
 800a2f6:	f7f6 f99f 	bl	8000638 <__aeabi_dmul>
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	465b      	mov	r3, fp
 800a2fe:	f7f5 ffe5 	bl	80002cc <__adddf3>
 800a302:	460b      	mov	r3, r1
 800a304:	4981      	ldr	r1, [pc, #516]	; (800a50c <_strtod_l+0xbfc>)
 800a306:	4a83      	ldr	r2, [pc, #524]	; (800a514 <_strtod_l+0xc04>)
 800a308:	4019      	ands	r1, r3
 800a30a:	4291      	cmp	r1, r2
 800a30c:	4682      	mov	sl, r0
 800a30e:	d95e      	bls.n	800a3ce <_strtod_l+0xabe>
 800a310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a312:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a316:	4293      	cmp	r3, r2
 800a318:	d103      	bne.n	800a322 <_strtod_l+0xa12>
 800a31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31c:	3301      	adds	r3, #1
 800a31e:	f43f ad43 	beq.w	8009da8 <_strtod_l+0x498>
 800a322:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a520 <_strtod_l+0xc10>
 800a326:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a32a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a32c:	4620      	mov	r0, r4
 800a32e:	f001 feb9 	bl	800c0a4 <_Bfree>
 800a332:	9907      	ldr	r1, [sp, #28]
 800a334:	4620      	mov	r0, r4
 800a336:	f001 feb5 	bl	800c0a4 <_Bfree>
 800a33a:	4631      	mov	r1, r6
 800a33c:	4620      	mov	r0, r4
 800a33e:	f001 feb1 	bl	800c0a4 <_Bfree>
 800a342:	4629      	mov	r1, r5
 800a344:	4620      	mov	r0, r4
 800a346:	f001 fead 	bl	800c0a4 <_Bfree>
 800a34a:	e613      	b.n	8009f74 <_strtod_l+0x664>
 800a34c:	f1ba 0f00 	cmp.w	sl, #0
 800a350:	d11b      	bne.n	800a38a <_strtod_l+0xa7a>
 800a352:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a356:	b9f3      	cbnz	r3, 800a396 <_strtod_l+0xa86>
 800a358:	4b6b      	ldr	r3, [pc, #428]	; (800a508 <_strtod_l+0xbf8>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	4640      	mov	r0, r8
 800a35e:	4649      	mov	r1, r9
 800a360:	f7f6 fbdc 	bl	8000b1c <__aeabi_dcmplt>
 800a364:	b9d0      	cbnz	r0, 800a39c <_strtod_l+0xa8c>
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	4b6b      	ldr	r3, [pc, #428]	; (800a518 <_strtod_l+0xc08>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	f7f6 f963 	bl	8000638 <__aeabi_dmul>
 800a372:	4680      	mov	r8, r0
 800a374:	4689      	mov	r9, r1
 800a376:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a37a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a37e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a380:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a384:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a388:	e79b      	b.n	800a2c2 <_strtod_l+0x9b2>
 800a38a:	f1ba 0f01 	cmp.w	sl, #1
 800a38e:	d102      	bne.n	800a396 <_strtod_l+0xa86>
 800a390:	2f00      	cmp	r7, #0
 800a392:	f43f ad7e 	beq.w	8009e92 <_strtod_l+0x582>
 800a396:	4b61      	ldr	r3, [pc, #388]	; (800a51c <_strtod_l+0xc0c>)
 800a398:	2200      	movs	r2, #0
 800a39a:	e78c      	b.n	800a2b6 <_strtod_l+0x9a6>
 800a39c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a518 <_strtod_l+0xc08>
 800a3a0:	f04f 0800 	mov.w	r8, #0
 800a3a4:	e7e7      	b.n	800a376 <_strtod_l+0xa66>
 800a3a6:	4b5c      	ldr	r3, [pc, #368]	; (800a518 <_strtod_l+0xc08>)
 800a3a8:	4640      	mov	r0, r8
 800a3aa:	4649      	mov	r1, r9
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f7f6 f943 	bl	8000638 <__aeabi_dmul>
 800a3b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3b4:	4680      	mov	r8, r0
 800a3b6:	4689      	mov	r9, r1
 800a3b8:	b933      	cbnz	r3, 800a3c8 <_strtod_l+0xab8>
 800a3ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3be:	9012      	str	r0, [sp, #72]	; 0x48
 800a3c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a3c6:	e7dd      	b.n	800a384 <_strtod_l+0xa74>
 800a3c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a3cc:	e7f9      	b.n	800a3c2 <_strtod_l+0xab2>
 800a3ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a3d2:	9b04      	ldr	r3, [sp, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1a8      	bne.n	800a32a <_strtod_l+0xa1a>
 800a3d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3de:	0d1b      	lsrs	r3, r3, #20
 800a3e0:	051b      	lsls	r3, r3, #20
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d1a1      	bne.n	800a32a <_strtod_l+0xa1a>
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f6 fc85 	bl	8000cf8 <__aeabi_d2lz>
 800a3ee:	f7f6 f8f5 	bl	80005dc <__aeabi_l2d>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f5 ff65 	bl	80002c8 <__aeabi_dsub>
 800a3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a404:	ea43 030a 	orr.w	r3, r3, sl
 800a408:	4313      	orrs	r3, r2
 800a40a:	4680      	mov	r8, r0
 800a40c:	4689      	mov	r9, r1
 800a40e:	d053      	beq.n	800a4b8 <_strtod_l+0xba8>
 800a410:	a335      	add	r3, pc, #212	; (adr r3, 800a4e8 <_strtod_l+0xbd8>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f7f6 fb81 	bl	8000b1c <__aeabi_dcmplt>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	f47f acce 	bne.w	8009dbc <_strtod_l+0x4ac>
 800a420:	a333      	add	r3, pc, #204	; (adr r3, 800a4f0 <_strtod_l+0xbe0>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	4640      	mov	r0, r8
 800a428:	4649      	mov	r1, r9
 800a42a:	f7f6 fb95 	bl	8000b58 <__aeabi_dcmpgt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f af7b 	beq.w	800a32a <_strtod_l+0xa1a>
 800a434:	e4c2      	b.n	8009dbc <_strtod_l+0x4ac>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	b333      	cbz	r3, 800a488 <_strtod_l+0xb78>
 800a43a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a43c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a440:	d822      	bhi.n	800a488 <_strtod_l+0xb78>
 800a442:	a32d      	add	r3, pc, #180	; (adr r3, 800a4f8 <_strtod_l+0xbe8>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	4640      	mov	r0, r8
 800a44a:	4649      	mov	r1, r9
 800a44c:	f7f6 fb70 	bl	8000b30 <__aeabi_dcmple>
 800a450:	b1a0      	cbz	r0, 800a47c <_strtod_l+0xb6c>
 800a452:	4649      	mov	r1, r9
 800a454:	4640      	mov	r0, r8
 800a456:	f7f6 fbc7 	bl	8000be8 <__aeabi_d2uiz>
 800a45a:	2801      	cmp	r0, #1
 800a45c:	bf38      	it	cc
 800a45e:	2001      	movcc	r0, #1
 800a460:	f7f6 f870 	bl	8000544 <__aeabi_ui2d>
 800a464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a466:	4680      	mov	r8, r0
 800a468:	4689      	mov	r9, r1
 800a46a:	bb13      	cbnz	r3, 800a4b2 <_strtod_l+0xba2>
 800a46c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a470:	9014      	str	r0, [sp, #80]	; 0x50
 800a472:	9315      	str	r3, [sp, #84]	; 0x54
 800a474:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a478:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a47e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a480:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	930d      	str	r3, [sp, #52]	; 0x34
 800a488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a48c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a490:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a494:	f002 f932 	bl	800c6fc <__ulp>
 800a498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a49c:	ec53 2b10 	vmov	r2, r3, d0
 800a4a0:	f7f6 f8ca 	bl	8000638 <__aeabi_dmul>
 800a4a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4a8:	f7f5 ff10 	bl	80002cc <__adddf3>
 800a4ac:	4682      	mov	sl, r0
 800a4ae:	468b      	mov	fp, r1
 800a4b0:	e78f      	b.n	800a3d2 <_strtod_l+0xac2>
 800a4b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a4b6:	e7dd      	b.n	800a474 <_strtod_l+0xb64>
 800a4b8:	a311      	add	r3, pc, #68	; (adr r3, 800a500 <_strtod_l+0xbf0>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f6 fb2d 	bl	8000b1c <__aeabi_dcmplt>
 800a4c2:	e7b4      	b.n	800a42e <_strtod_l+0xb1e>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	930e      	str	r3, [sp, #56]	; 0x38
 800a4c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a4ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	f7ff ba65 	b.w	800999c <_strtod_l+0x8c>
 800a4d2:	2b65      	cmp	r3, #101	; 0x65
 800a4d4:	f43f ab5d 	beq.w	8009b92 <_strtod_l+0x282>
 800a4d8:	2b45      	cmp	r3, #69	; 0x45
 800a4da:	f43f ab5a 	beq.w	8009b92 <_strtod_l+0x282>
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f7ff bb92 	b.w	8009c08 <_strtod_l+0x2f8>
 800a4e4:	f3af 8000 	nop.w
 800a4e8:	94a03595 	.word	0x94a03595
 800a4ec:	3fdfffff 	.word	0x3fdfffff
 800a4f0:	35afe535 	.word	0x35afe535
 800a4f4:	3fe00000 	.word	0x3fe00000
 800a4f8:	ffc00000 	.word	0xffc00000
 800a4fc:	41dfffff 	.word	0x41dfffff
 800a500:	94a03595 	.word	0x94a03595
 800a504:	3fcfffff 	.word	0x3fcfffff
 800a508:	3ff00000 	.word	0x3ff00000
 800a50c:	7ff00000 	.word	0x7ff00000
 800a510:	7fe00000 	.word	0x7fe00000
 800a514:	7c9fffff 	.word	0x7c9fffff
 800a518:	3fe00000 	.word	0x3fe00000
 800a51c:	bff00000 	.word	0xbff00000
 800a520:	7fefffff 	.word	0x7fefffff

0800a524 <_strtod_r>:
 800a524:	4b01      	ldr	r3, [pc, #4]	; (800a52c <_strtod_r+0x8>)
 800a526:	f7ff b9f3 	b.w	8009910 <_strtod_l>
 800a52a:	bf00      	nop
 800a52c:	2000007c 	.word	0x2000007c

0800a530 <_strtol_l.isra.0>:
 800a530:	2b01      	cmp	r3, #1
 800a532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a536:	d001      	beq.n	800a53c <_strtol_l.isra.0+0xc>
 800a538:	2b24      	cmp	r3, #36	; 0x24
 800a53a:	d906      	bls.n	800a54a <_strtol_l.isra.0+0x1a>
 800a53c:	f7fe fa6a 	bl	8008a14 <__errno>
 800a540:	2316      	movs	r3, #22
 800a542:	6003      	str	r3, [r0, #0]
 800a544:	2000      	movs	r0, #0
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	4f3a      	ldr	r7, [pc, #232]	; (800a634 <_strtol_l.isra.0+0x104>)
 800a54c:	468e      	mov	lr, r1
 800a54e:	4676      	mov	r6, lr
 800a550:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a554:	5de5      	ldrb	r5, [r4, r7]
 800a556:	f015 0508 	ands.w	r5, r5, #8
 800a55a:	d1f8      	bne.n	800a54e <_strtol_l.isra.0+0x1e>
 800a55c:	2c2d      	cmp	r4, #45	; 0x2d
 800a55e:	d134      	bne.n	800a5ca <_strtol_l.isra.0+0x9a>
 800a560:	f89e 4000 	ldrb.w	r4, [lr]
 800a564:	f04f 0801 	mov.w	r8, #1
 800a568:	f106 0e02 	add.w	lr, r6, #2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05c      	beq.n	800a62a <_strtol_l.isra.0+0xfa>
 800a570:	2b10      	cmp	r3, #16
 800a572:	d10c      	bne.n	800a58e <_strtol_l.isra.0+0x5e>
 800a574:	2c30      	cmp	r4, #48	; 0x30
 800a576:	d10a      	bne.n	800a58e <_strtol_l.isra.0+0x5e>
 800a578:	f89e 4000 	ldrb.w	r4, [lr]
 800a57c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a580:	2c58      	cmp	r4, #88	; 0x58
 800a582:	d14d      	bne.n	800a620 <_strtol_l.isra.0+0xf0>
 800a584:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a588:	2310      	movs	r3, #16
 800a58a:	f10e 0e02 	add.w	lr, lr, #2
 800a58e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a592:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a596:	2600      	movs	r6, #0
 800a598:	fbbc f9f3 	udiv	r9, ip, r3
 800a59c:	4635      	mov	r5, r6
 800a59e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a5a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a5a6:	2f09      	cmp	r7, #9
 800a5a8:	d818      	bhi.n	800a5dc <_strtol_l.isra.0+0xac>
 800a5aa:	463c      	mov	r4, r7
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	dd24      	ble.n	800a5fa <_strtol_l.isra.0+0xca>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	db1f      	blt.n	800a5f4 <_strtol_l.isra.0+0xc4>
 800a5b4:	45a9      	cmp	r9, r5
 800a5b6:	d31d      	bcc.n	800a5f4 <_strtol_l.isra.0+0xc4>
 800a5b8:	d101      	bne.n	800a5be <_strtol_l.isra.0+0x8e>
 800a5ba:	45a2      	cmp	sl, r4
 800a5bc:	db1a      	blt.n	800a5f4 <_strtol_l.isra.0+0xc4>
 800a5be:	fb05 4503 	mla	r5, r5, r3, r4
 800a5c2:	2601      	movs	r6, #1
 800a5c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a5c8:	e7eb      	b.n	800a5a2 <_strtol_l.isra.0+0x72>
 800a5ca:	2c2b      	cmp	r4, #43	; 0x2b
 800a5cc:	bf08      	it	eq
 800a5ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a5d2:	46a8      	mov	r8, r5
 800a5d4:	bf08      	it	eq
 800a5d6:	f106 0e02 	addeq.w	lr, r6, #2
 800a5da:	e7c7      	b.n	800a56c <_strtol_l.isra.0+0x3c>
 800a5dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a5e0:	2f19      	cmp	r7, #25
 800a5e2:	d801      	bhi.n	800a5e8 <_strtol_l.isra.0+0xb8>
 800a5e4:	3c37      	subs	r4, #55	; 0x37
 800a5e6:	e7e1      	b.n	800a5ac <_strtol_l.isra.0+0x7c>
 800a5e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a5ec:	2f19      	cmp	r7, #25
 800a5ee:	d804      	bhi.n	800a5fa <_strtol_l.isra.0+0xca>
 800a5f0:	3c57      	subs	r4, #87	; 0x57
 800a5f2:	e7db      	b.n	800a5ac <_strtol_l.isra.0+0x7c>
 800a5f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a5f8:	e7e4      	b.n	800a5c4 <_strtol_l.isra.0+0x94>
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	da05      	bge.n	800a60a <_strtol_l.isra.0+0xda>
 800a5fe:	2322      	movs	r3, #34	; 0x22
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	4665      	mov	r5, ip
 800a604:	b942      	cbnz	r2, 800a618 <_strtol_l.isra.0+0xe8>
 800a606:	4628      	mov	r0, r5
 800a608:	e79d      	b.n	800a546 <_strtol_l.isra.0+0x16>
 800a60a:	f1b8 0f00 	cmp.w	r8, #0
 800a60e:	d000      	beq.n	800a612 <_strtol_l.isra.0+0xe2>
 800a610:	426d      	negs	r5, r5
 800a612:	2a00      	cmp	r2, #0
 800a614:	d0f7      	beq.n	800a606 <_strtol_l.isra.0+0xd6>
 800a616:	b10e      	cbz	r6, 800a61c <_strtol_l.isra.0+0xec>
 800a618:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a61c:	6011      	str	r1, [r2, #0]
 800a61e:	e7f2      	b.n	800a606 <_strtol_l.isra.0+0xd6>
 800a620:	2430      	movs	r4, #48	; 0x30
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1b3      	bne.n	800a58e <_strtol_l.isra.0+0x5e>
 800a626:	2308      	movs	r3, #8
 800a628:	e7b1      	b.n	800a58e <_strtol_l.isra.0+0x5e>
 800a62a:	2c30      	cmp	r4, #48	; 0x30
 800a62c:	d0a4      	beq.n	800a578 <_strtol_l.isra.0+0x48>
 800a62e:	230a      	movs	r3, #10
 800a630:	e7ad      	b.n	800a58e <_strtol_l.isra.0+0x5e>
 800a632:	bf00      	nop
 800a634:	0800d909 	.word	0x0800d909

0800a638 <_strtol_r>:
 800a638:	f7ff bf7a 	b.w	800a530 <_strtol_l.isra.0>

0800a63c <__swbuf_r>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	460e      	mov	r6, r1
 800a640:	4614      	mov	r4, r2
 800a642:	4605      	mov	r5, r0
 800a644:	b118      	cbz	r0, 800a64e <__swbuf_r+0x12>
 800a646:	6983      	ldr	r3, [r0, #24]
 800a648:	b90b      	cbnz	r3, 800a64e <__swbuf_r+0x12>
 800a64a:	f001 f84b 	bl	800b6e4 <__sinit>
 800a64e:	4b21      	ldr	r3, [pc, #132]	; (800a6d4 <__swbuf_r+0x98>)
 800a650:	429c      	cmp	r4, r3
 800a652:	d12b      	bne.n	800a6ac <__swbuf_r+0x70>
 800a654:	686c      	ldr	r4, [r5, #4]
 800a656:	69a3      	ldr	r3, [r4, #24]
 800a658:	60a3      	str	r3, [r4, #8]
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	071a      	lsls	r2, r3, #28
 800a65e:	d52f      	bpl.n	800a6c0 <__swbuf_r+0x84>
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	b36b      	cbz	r3, 800a6c0 <__swbuf_r+0x84>
 800a664:	6923      	ldr	r3, [r4, #16]
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	1ac0      	subs	r0, r0, r3
 800a66a:	6963      	ldr	r3, [r4, #20]
 800a66c:	b2f6      	uxtb	r6, r6
 800a66e:	4283      	cmp	r3, r0
 800a670:	4637      	mov	r7, r6
 800a672:	dc04      	bgt.n	800a67e <__swbuf_r+0x42>
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 ffa0 	bl	800b5bc <_fflush_r>
 800a67c:	bb30      	cbnz	r0, 800a6cc <__swbuf_r+0x90>
 800a67e:	68a3      	ldr	r3, [r4, #8]
 800a680:	3b01      	subs	r3, #1
 800a682:	60a3      	str	r3, [r4, #8]
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	701e      	strb	r6, [r3, #0]
 800a68c:	6963      	ldr	r3, [r4, #20]
 800a68e:	3001      	adds	r0, #1
 800a690:	4283      	cmp	r3, r0
 800a692:	d004      	beq.n	800a69e <__swbuf_r+0x62>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	07db      	lsls	r3, r3, #31
 800a698:	d506      	bpl.n	800a6a8 <__swbuf_r+0x6c>
 800a69a:	2e0a      	cmp	r6, #10
 800a69c:	d104      	bne.n	800a6a8 <__swbuf_r+0x6c>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 ff8b 	bl	800b5bc <_fflush_r>
 800a6a6:	b988      	cbnz	r0, 800a6cc <__swbuf_r+0x90>
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <__swbuf_r+0x9c>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d101      	bne.n	800a6b6 <__swbuf_r+0x7a>
 800a6b2:	68ac      	ldr	r4, [r5, #8]
 800a6b4:	e7cf      	b.n	800a656 <__swbuf_r+0x1a>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <__swbuf_r+0xa0>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	bf08      	it	eq
 800a6bc:	68ec      	ldreq	r4, [r5, #12]
 800a6be:	e7ca      	b.n	800a656 <__swbuf_r+0x1a>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f80c 	bl	800a6e0 <__swsetup_r>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d0cb      	beq.n	800a664 <__swbuf_r+0x28>
 800a6cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a6d0:	e7ea      	b.n	800a6a8 <__swbuf_r+0x6c>
 800a6d2:	bf00      	nop
 800a6d4:	0800dac0 	.word	0x0800dac0
 800a6d8:	0800dae0 	.word	0x0800dae0
 800a6dc:	0800daa0 	.word	0x0800daa0

0800a6e0 <__swsetup_r>:
 800a6e0:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__swsetup_r+0xcc>)
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	681d      	ldr	r5, [r3, #0]
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	b125      	cbz	r5, 800a6f6 <__swsetup_r+0x16>
 800a6ec:	69ab      	ldr	r3, [r5, #24]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <__swsetup_r+0x16>
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 fff7 	bl	800b6e4 <__sinit>
 800a6f6:	4b2e      	ldr	r3, [pc, #184]	; (800a7b0 <__swsetup_r+0xd0>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d10f      	bne.n	800a71c <__swsetup_r+0x3c>
 800a6fc:	686c      	ldr	r4, [r5, #4]
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	d42c      	bmi.n	800a762 <__swsetup_r+0x82>
 800a708:	06dd      	lsls	r5, r3, #27
 800a70a:	d411      	bmi.n	800a730 <__swsetup_r+0x50>
 800a70c:	2309      	movs	r3, #9
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a71a:	e03e      	b.n	800a79a <__swsetup_r+0xba>
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__swsetup_r+0xd4>)
 800a71e:	429c      	cmp	r4, r3
 800a720:	d101      	bne.n	800a726 <__swsetup_r+0x46>
 800a722:	68ac      	ldr	r4, [r5, #8]
 800a724:	e7eb      	b.n	800a6fe <__swsetup_r+0x1e>
 800a726:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <__swsetup_r+0xd8>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	bf08      	it	eq
 800a72c:	68ec      	ldreq	r4, [r5, #12]
 800a72e:	e7e6      	b.n	800a6fe <__swsetup_r+0x1e>
 800a730:	0758      	lsls	r0, r3, #29
 800a732:	d512      	bpl.n	800a75a <__swsetup_r+0x7a>
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	b141      	cbz	r1, 800a74a <__swsetup_r+0x6a>
 800a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d002      	beq.n	800a746 <__swsetup_r+0x66>
 800a740:	4630      	mov	r0, r6
 800a742:	f002 f939 	bl	800c9b8 <_free_r>
 800a746:	2300      	movs	r3, #0
 800a748:	6363      	str	r3, [r4, #52]	; 0x34
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	b94b      	cbnz	r3, 800a77a <__swsetup_r+0x9a>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a770:	d003      	beq.n	800a77a <__swsetup_r+0x9a>
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f001 fbed 	bl	800bf54 <__smakebuf_r>
 800a77a:	89a0      	ldrh	r0, [r4, #12]
 800a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a780:	f010 0301 	ands.w	r3, r0, #1
 800a784:	d00a      	beq.n	800a79c <__swsetup_r+0xbc>
 800a786:	2300      	movs	r3, #0
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	6963      	ldr	r3, [r4, #20]
 800a78c:	425b      	negs	r3, r3
 800a78e:	61a3      	str	r3, [r4, #24]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b943      	cbnz	r3, 800a7a6 <__swsetup_r+0xc6>
 800a794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a798:	d1ba      	bne.n	800a710 <__swsetup_r+0x30>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0781      	lsls	r1, r0, #30
 800a79e:	bf58      	it	pl
 800a7a0:	6963      	ldrpl	r3, [r4, #20]
 800a7a2:	60a3      	str	r3, [r4, #8]
 800a7a4:	e7f4      	b.n	800a790 <__swsetup_r+0xb0>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7f7      	b.n	800a79a <__swsetup_r+0xba>
 800a7aa:	bf00      	nop
 800a7ac:	20000014 	.word	0x20000014
 800a7b0:	0800dac0 	.word	0x0800dac0
 800a7b4:	0800dae0 	.word	0x0800dae0
 800a7b8:	0800daa0 	.word	0x0800daa0

0800a7bc <quorem>:
 800a7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	6903      	ldr	r3, [r0, #16]
 800a7c2:	690c      	ldr	r4, [r1, #16]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	f2c0 8081 	blt.w	800a8ce <quorem+0x112>
 800a7cc:	3c01      	subs	r4, #1
 800a7ce:	f101 0814 	add.w	r8, r1, #20
 800a7d2:	f100 0514 	add.w	r5, r0, #20
 800a7d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7f4:	d331      	bcc.n	800a85a <quorem+0x9e>
 800a7f6:	f04f 0e00 	mov.w	lr, #0
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	46ac      	mov	ip, r5
 800a7fe:	46f2      	mov	sl, lr
 800a800:	f850 2b04 	ldr.w	r2, [r0], #4
 800a804:	b293      	uxth	r3, r2
 800a806:	fb06 e303 	mla	r3, r6, r3, lr
 800a80a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a80e:	b29b      	uxth	r3, r3
 800a810:	ebaa 0303 	sub.w	r3, sl, r3
 800a814:	0c12      	lsrs	r2, r2, #16
 800a816:	f8dc a000 	ldr.w	sl, [ip]
 800a81a:	fb06 e202 	mla	r2, r6, r2, lr
 800a81e:	fa13 f38a 	uxtah	r3, r3, sl
 800a822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a826:	fa1f fa82 	uxth.w	sl, r2
 800a82a:	f8dc 2000 	ldr.w	r2, [ip]
 800a82e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a832:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a836:	b29b      	uxth	r3, r3
 800a838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a83c:	4581      	cmp	r9, r0
 800a83e:	f84c 3b04 	str.w	r3, [ip], #4
 800a842:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a846:	d2db      	bcs.n	800a800 <quorem+0x44>
 800a848:	f855 300b 	ldr.w	r3, [r5, fp]
 800a84c:	b92b      	cbnz	r3, 800a85a <quorem+0x9e>
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	3b04      	subs	r3, #4
 800a852:	429d      	cmp	r5, r3
 800a854:	461a      	mov	r2, r3
 800a856:	d32e      	bcc.n	800a8b6 <quorem+0xfa>
 800a858:	613c      	str	r4, [r7, #16]
 800a85a:	4638      	mov	r0, r7
 800a85c:	f001 feaa 	bl	800c5b4 <__mcmp>
 800a860:	2800      	cmp	r0, #0
 800a862:	db24      	blt.n	800a8ae <quorem+0xf2>
 800a864:	3601      	adds	r6, #1
 800a866:	4628      	mov	r0, r5
 800a868:	f04f 0c00 	mov.w	ip, #0
 800a86c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a870:	f8d0 e000 	ldr.w	lr, [r0]
 800a874:	b293      	uxth	r3, r2
 800a876:	ebac 0303 	sub.w	r3, ip, r3
 800a87a:	0c12      	lsrs	r2, r2, #16
 800a87c:	fa13 f38e 	uxtah	r3, r3, lr
 800a880:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a888:	b29b      	uxth	r3, r3
 800a88a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a88e:	45c1      	cmp	r9, r8
 800a890:	f840 3b04 	str.w	r3, [r0], #4
 800a894:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a898:	d2e8      	bcs.n	800a86c <quorem+0xb0>
 800a89a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a89e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8a2:	b922      	cbnz	r2, 800a8ae <quorem+0xf2>
 800a8a4:	3b04      	subs	r3, #4
 800a8a6:	429d      	cmp	r5, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	d30a      	bcc.n	800a8c2 <quorem+0x106>
 800a8ac:	613c      	str	r4, [r7, #16]
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	b003      	add	sp, #12
 800a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b6:	6812      	ldr	r2, [r2, #0]
 800a8b8:	3b04      	subs	r3, #4
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d1cc      	bne.n	800a858 <quorem+0x9c>
 800a8be:	3c01      	subs	r4, #1
 800a8c0:	e7c7      	b.n	800a852 <quorem+0x96>
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	3b04      	subs	r3, #4
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	d1f0      	bne.n	800a8ac <quorem+0xf0>
 800a8ca:	3c01      	subs	r4, #1
 800a8cc:	e7eb      	b.n	800a8a6 <quorem+0xea>
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e7ee      	b.n	800a8b0 <quorem+0xf4>
 800a8d2:	0000      	movs	r0, r0
 800a8d4:	0000      	movs	r0, r0
	...

0800a8d8 <_dtoa_r>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	ed2d 8b02 	vpush	{d8}
 800a8e0:	ec57 6b10 	vmov	r6, r7, d0
 800a8e4:	b095      	sub	sp, #84	; 0x54
 800a8e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8ec:	9105      	str	r1, [sp, #20]
 800a8ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8f8:	b975      	cbnz	r5, 800a918 <_dtoa_r+0x40>
 800a8fa:	2010      	movs	r0, #16
 800a8fc:	f001 fb6a 	bl	800bfd4 <malloc>
 800a900:	4602      	mov	r2, r0
 800a902:	6260      	str	r0, [r4, #36]	; 0x24
 800a904:	b920      	cbnz	r0, 800a910 <_dtoa_r+0x38>
 800a906:	4bb2      	ldr	r3, [pc, #712]	; (800abd0 <_dtoa_r+0x2f8>)
 800a908:	21ea      	movs	r1, #234	; 0xea
 800a90a:	48b2      	ldr	r0, [pc, #712]	; (800abd4 <_dtoa_r+0x2fc>)
 800a90c:	f002 fc40 	bl	800d190 <__assert_func>
 800a910:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a914:	6005      	str	r5, [r0, #0]
 800a916:	60c5      	str	r5, [r0, #12]
 800a918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	b151      	cbz	r1, 800a934 <_dtoa_r+0x5c>
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	604a      	str	r2, [r1, #4]
 800a922:	2301      	movs	r3, #1
 800a924:	4093      	lsls	r3, r2
 800a926:	608b      	str	r3, [r1, #8]
 800a928:	4620      	mov	r0, r4
 800a92a:	f001 fbbb 	bl	800c0a4 <_Bfree>
 800a92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	1e3b      	subs	r3, r7, #0
 800a936:	bfb9      	ittee	lt
 800a938:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a93c:	9303      	strlt	r3, [sp, #12]
 800a93e:	2300      	movge	r3, #0
 800a940:	f8c8 3000 	strge.w	r3, [r8]
 800a944:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a948:	4ba3      	ldr	r3, [pc, #652]	; (800abd8 <_dtoa_r+0x300>)
 800a94a:	bfbc      	itt	lt
 800a94c:	2201      	movlt	r2, #1
 800a94e:	f8c8 2000 	strlt.w	r2, [r8]
 800a952:	ea33 0309 	bics.w	r3, r3, r9
 800a956:	d11b      	bne.n	800a990 <_dtoa_r+0xb8>
 800a958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a95a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a964:	4333      	orrs	r3, r6
 800a966:	f000 857a 	beq.w	800b45e <_dtoa_r+0xb86>
 800a96a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a96c:	b963      	cbnz	r3, 800a988 <_dtoa_r+0xb0>
 800a96e:	4b9b      	ldr	r3, [pc, #620]	; (800abdc <_dtoa_r+0x304>)
 800a970:	e024      	b.n	800a9bc <_dtoa_r+0xe4>
 800a972:	4b9b      	ldr	r3, [pc, #620]	; (800abe0 <_dtoa_r+0x308>)
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	3308      	adds	r3, #8
 800a978:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	9800      	ldr	r0, [sp, #0]
 800a97e:	b015      	add	sp, #84	; 0x54
 800a980:	ecbd 8b02 	vpop	{d8}
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	4b94      	ldr	r3, [pc, #592]	; (800abdc <_dtoa_r+0x304>)
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	3303      	adds	r3, #3
 800a98e:	e7f3      	b.n	800a978 <_dtoa_r+0xa0>
 800a990:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	ec51 0b17 	vmov	r0, r1, d7
 800a99a:	2300      	movs	r3, #0
 800a99c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a9a0:	f7f6 f8b2 	bl	8000b08 <__aeabi_dcmpeq>
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	b158      	cbz	r0, 800a9c0 <_dtoa_r+0xe8>
 800a9a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 8551 	beq.w	800b458 <_dtoa_r+0xb80>
 800a9b6:	488b      	ldr	r0, [pc, #556]	; (800abe4 <_dtoa_r+0x30c>)
 800a9b8:	6018      	str	r0, [r3, #0]
 800a9ba:	1e43      	subs	r3, r0, #1
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	e7dd      	b.n	800a97c <_dtoa_r+0xa4>
 800a9c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a9c4:	aa12      	add	r2, sp, #72	; 0x48
 800a9c6:	a913      	add	r1, sp, #76	; 0x4c
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f001 ff13 	bl	800c7f4 <__d2b>
 800a9ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9d2:	4683      	mov	fp, r0
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	d07c      	beq.n	800aad2 <_dtoa_r+0x1fa>
 800a9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a9de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a9e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9f2:	4b7d      	ldr	r3, [pc, #500]	; (800abe8 <_dtoa_r+0x310>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	f7f5 fc65 	bl	80002c8 <__aeabi_dsub>
 800a9fe:	a36e      	add	r3, pc, #440	; (adr r3, 800abb8 <_dtoa_r+0x2e0>)
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 fe18 	bl	8000638 <__aeabi_dmul>
 800aa08:	a36d      	add	r3, pc, #436	; (adr r3, 800abc0 <_dtoa_r+0x2e8>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fc5d 	bl	80002cc <__adddf3>
 800aa12:	4606      	mov	r6, r0
 800aa14:	4628      	mov	r0, r5
 800aa16:	460f      	mov	r7, r1
 800aa18:	f7f5 fda4 	bl	8000564 <__aeabi_i2d>
 800aa1c:	a36a      	add	r3, pc, #424	; (adr r3, 800abc8 <_dtoa_r+0x2f0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fe09 	bl	8000638 <__aeabi_dmul>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f5 fc4d 	bl	80002cc <__adddf3>
 800aa32:	4606      	mov	r6, r0
 800aa34:	460f      	mov	r7, r1
 800aa36:	f7f6 f8af 	bl	8000b98 <__aeabi_d2iz>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	2300      	movs	r3, #0
 800aa40:	4630      	mov	r0, r6
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f6 f86a 	bl	8000b1c <__aeabi_dcmplt>
 800aa48:	b148      	cbz	r0, 800aa5e <_dtoa_r+0x186>
 800aa4a:	4650      	mov	r0, sl
 800aa4c:	f7f5 fd8a 	bl	8000564 <__aeabi_i2d>
 800aa50:	4632      	mov	r2, r6
 800aa52:	463b      	mov	r3, r7
 800aa54:	f7f6 f858 	bl	8000b08 <__aeabi_dcmpeq>
 800aa58:	b908      	cbnz	r0, 800aa5e <_dtoa_r+0x186>
 800aa5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa5e:	f1ba 0f16 	cmp.w	sl, #22
 800aa62:	d854      	bhi.n	800ab0e <_dtoa_r+0x236>
 800aa64:	4b61      	ldr	r3, [pc, #388]	; (800abec <_dtoa_r+0x314>)
 800aa66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa72:	f7f6 f853 	bl	8000b1c <__aeabi_dcmplt>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d04b      	beq.n	800ab12 <_dtoa_r+0x23a>
 800aa7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa7e:	2300      	movs	r3, #0
 800aa80:	930e      	str	r3, [sp, #56]	; 0x38
 800aa82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa84:	1b5d      	subs	r5, r3, r5
 800aa86:	1e6b      	subs	r3, r5, #1
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	bf43      	ittte	mi
 800aa8c:	2300      	movmi	r3, #0
 800aa8e:	f1c5 0801 	rsbmi	r8, r5, #1
 800aa92:	9304      	strmi	r3, [sp, #16]
 800aa94:	f04f 0800 	movpl.w	r8, #0
 800aa98:	f1ba 0f00 	cmp.w	sl, #0
 800aa9c:	db3b      	blt.n	800ab16 <_dtoa_r+0x23e>
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800aaa4:	4453      	add	r3, sl
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9306      	str	r3, [sp, #24]
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	d869      	bhi.n	800ab86 <_dtoa_r+0x2ae>
 800aab2:	2b05      	cmp	r3, #5
 800aab4:	bfc4      	itt	gt
 800aab6:	3b04      	subgt	r3, #4
 800aab8:	9305      	strgt	r3, [sp, #20]
 800aaba:	9b05      	ldr	r3, [sp, #20]
 800aabc:	f1a3 0302 	sub.w	r3, r3, #2
 800aac0:	bfcc      	ite	gt
 800aac2:	2500      	movgt	r5, #0
 800aac4:	2501      	movle	r5, #1
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d869      	bhi.n	800ab9e <_dtoa_r+0x2c6>
 800aaca:	e8df f003 	tbb	[pc, r3]
 800aace:	4e2c      	.short	0x4e2c
 800aad0:	5a4c      	.short	0x5a4c
 800aad2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aad6:	441d      	add	r5, r3
 800aad8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aadc:	2b20      	cmp	r3, #32
 800aade:	bfc1      	itttt	gt
 800aae0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aae4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aae8:	fa09 f303 	lslgt.w	r3, r9, r3
 800aaec:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aaf0:	bfda      	itte	le
 800aaf2:	f1c3 0320 	rsble	r3, r3, #32
 800aaf6:	fa06 f003 	lslle.w	r0, r6, r3
 800aafa:	4318      	orrgt	r0, r3
 800aafc:	f7f5 fd22 	bl	8000544 <__aeabi_ui2d>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4606      	mov	r6, r0
 800ab04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab08:	3d01      	subs	r5, #1
 800ab0a:	9310      	str	r3, [sp, #64]	; 0x40
 800ab0c:	e771      	b.n	800a9f2 <_dtoa_r+0x11a>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e7b6      	b.n	800aa80 <_dtoa_r+0x1a8>
 800ab12:	900e      	str	r0, [sp, #56]	; 0x38
 800ab14:	e7b5      	b.n	800aa82 <_dtoa_r+0x1aa>
 800ab16:	f1ca 0300 	rsb	r3, sl, #0
 800ab1a:	9306      	str	r3, [sp, #24]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	eba8 080a 	sub.w	r8, r8, sl
 800ab22:	930d      	str	r3, [sp, #52]	; 0x34
 800ab24:	e7c2      	b.n	800aaac <_dtoa_r+0x1d4>
 800ab26:	2300      	movs	r3, #0
 800ab28:	9308      	str	r3, [sp, #32]
 800ab2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dc39      	bgt.n	800aba4 <_dtoa_r+0x2cc>
 800ab30:	f04f 0901 	mov.w	r9, #1
 800ab34:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab38:	464b      	mov	r3, r9
 800ab3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ab3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab40:	2200      	movs	r2, #0
 800ab42:	6042      	str	r2, [r0, #4]
 800ab44:	2204      	movs	r2, #4
 800ab46:	f102 0614 	add.w	r6, r2, #20
 800ab4a:	429e      	cmp	r6, r3
 800ab4c:	6841      	ldr	r1, [r0, #4]
 800ab4e:	d92f      	bls.n	800abb0 <_dtoa_r+0x2d8>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f001 fa67 	bl	800c024 <_Balloc>
 800ab56:	9000      	str	r0, [sp, #0]
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d14b      	bne.n	800abf4 <_dtoa_r+0x31c>
 800ab5c:	4b24      	ldr	r3, [pc, #144]	; (800abf0 <_dtoa_r+0x318>)
 800ab5e:	4602      	mov	r2, r0
 800ab60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab64:	e6d1      	b.n	800a90a <_dtoa_r+0x32>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e7de      	b.n	800ab28 <_dtoa_r+0x250>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9308      	str	r3, [sp, #32]
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	eb0a 0903 	add.w	r9, sl, r3
 800ab74:	f109 0301 	add.w	r3, r9, #1
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	bfb8      	it	lt
 800ab7e:	2301      	movlt	r3, #1
 800ab80:	e7dd      	b.n	800ab3e <_dtoa_r+0x266>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7f2      	b.n	800ab6c <_dtoa_r+0x294>
 800ab86:	2501      	movs	r5, #1
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9305      	str	r3, [sp, #20]
 800ab8c:	9508      	str	r5, [sp, #32]
 800ab8e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab98:	2312      	movs	r3, #18
 800ab9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab9c:	e7cf      	b.n	800ab3e <_dtoa_r+0x266>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	9308      	str	r3, [sp, #32]
 800aba2:	e7f4      	b.n	800ab8e <_dtoa_r+0x2b6>
 800aba4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aba8:	f8cd 9004 	str.w	r9, [sp, #4]
 800abac:	464b      	mov	r3, r9
 800abae:	e7c6      	b.n	800ab3e <_dtoa_r+0x266>
 800abb0:	3101      	adds	r1, #1
 800abb2:	6041      	str	r1, [r0, #4]
 800abb4:	0052      	lsls	r2, r2, #1
 800abb6:	e7c6      	b.n	800ab46 <_dtoa_r+0x26e>
 800abb8:	636f4361 	.word	0x636f4361
 800abbc:	3fd287a7 	.word	0x3fd287a7
 800abc0:	8b60c8b3 	.word	0x8b60c8b3
 800abc4:	3fc68a28 	.word	0x3fc68a28
 800abc8:	509f79fb 	.word	0x509f79fb
 800abcc:	3fd34413 	.word	0x3fd34413
 800abd0:	0800da16 	.word	0x0800da16
 800abd4:	0800da2d 	.word	0x0800da2d
 800abd8:	7ff00000 	.word	0x7ff00000
 800abdc:	0800da12 	.word	0x0800da12
 800abe0:	0800da09 	.word	0x0800da09
 800abe4:	0800d88d 	.word	0x0800d88d
 800abe8:	3ff80000 	.word	0x3ff80000
 800abec:	0800dc08 	.word	0x0800dc08
 800abf0:	0800da8c 	.word	0x0800da8c
 800abf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf6:	9a00      	ldr	r2, [sp, #0]
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	2b0e      	cmp	r3, #14
 800abfe:	f200 80ad 	bhi.w	800ad5c <_dtoa_r+0x484>
 800ac02:	2d00      	cmp	r5, #0
 800ac04:	f000 80aa 	beq.w	800ad5c <_dtoa_r+0x484>
 800ac08:	f1ba 0f00 	cmp.w	sl, #0
 800ac0c:	dd36      	ble.n	800ac7c <_dtoa_r+0x3a4>
 800ac0e:	4ac3      	ldr	r2, [pc, #780]	; (800af1c <_dtoa_r+0x644>)
 800ac10:	f00a 030f 	and.w	r3, sl, #15
 800ac14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac18:	ed93 7b00 	vldr	d7, [r3]
 800ac1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ac20:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ac24:	eeb0 8a47 	vmov.f32	s16, s14
 800ac28:	eef0 8a67 	vmov.f32	s17, s15
 800ac2c:	d016      	beq.n	800ac5c <_dtoa_r+0x384>
 800ac2e:	4bbc      	ldr	r3, [pc, #752]	; (800af20 <_dtoa_r+0x648>)
 800ac30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac38:	f7f5 fe28 	bl	800088c <__aeabi_ddiv>
 800ac3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac40:	f007 070f 	and.w	r7, r7, #15
 800ac44:	2503      	movs	r5, #3
 800ac46:	4eb6      	ldr	r6, [pc, #728]	; (800af20 <_dtoa_r+0x648>)
 800ac48:	b957      	cbnz	r7, 800ac60 <_dtoa_r+0x388>
 800ac4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac4e:	ec53 2b18 	vmov	r2, r3, d8
 800ac52:	f7f5 fe1b 	bl	800088c <__aeabi_ddiv>
 800ac56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac5a:	e029      	b.n	800acb0 <_dtoa_r+0x3d8>
 800ac5c:	2502      	movs	r5, #2
 800ac5e:	e7f2      	b.n	800ac46 <_dtoa_r+0x36e>
 800ac60:	07f9      	lsls	r1, r7, #31
 800ac62:	d508      	bpl.n	800ac76 <_dtoa_r+0x39e>
 800ac64:	ec51 0b18 	vmov	r0, r1, d8
 800ac68:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac6c:	f7f5 fce4 	bl	8000638 <__aeabi_dmul>
 800ac70:	ec41 0b18 	vmov	d8, r0, r1
 800ac74:	3501      	adds	r5, #1
 800ac76:	107f      	asrs	r7, r7, #1
 800ac78:	3608      	adds	r6, #8
 800ac7a:	e7e5      	b.n	800ac48 <_dtoa_r+0x370>
 800ac7c:	f000 80a6 	beq.w	800adcc <_dtoa_r+0x4f4>
 800ac80:	f1ca 0600 	rsb	r6, sl, #0
 800ac84:	4ba5      	ldr	r3, [pc, #660]	; (800af1c <_dtoa_r+0x644>)
 800ac86:	4fa6      	ldr	r7, [pc, #664]	; (800af20 <_dtoa_r+0x648>)
 800ac88:	f006 020f 	and.w	r2, r6, #15
 800ac8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac98:	f7f5 fcce 	bl	8000638 <__aeabi_dmul>
 800ac9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca0:	1136      	asrs	r6, r6, #4
 800aca2:	2300      	movs	r3, #0
 800aca4:	2502      	movs	r5, #2
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	f040 8085 	bne.w	800adb6 <_dtoa_r+0x4de>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1d2      	bne.n	800ac56 <_dtoa_r+0x37e>
 800acb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 808c 	beq.w	800add0 <_dtoa_r+0x4f8>
 800acb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acbc:	4b99      	ldr	r3, [pc, #612]	; (800af24 <_dtoa_r+0x64c>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 ff2a 	bl	8000b1c <__aeabi_dcmplt>
 800acc8:	2800      	cmp	r0, #0
 800acca:	f000 8081 	beq.w	800add0 <_dtoa_r+0x4f8>
 800acce:	9b01      	ldr	r3, [sp, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d07d      	beq.n	800add0 <_dtoa_r+0x4f8>
 800acd4:	f1b9 0f00 	cmp.w	r9, #0
 800acd8:	dd3c      	ble.n	800ad54 <_dtoa_r+0x47c>
 800acda:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800acde:	9307      	str	r3, [sp, #28]
 800ace0:	2200      	movs	r2, #0
 800ace2:	4b91      	ldr	r3, [pc, #580]	; (800af28 <_dtoa_r+0x650>)
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 fca6 	bl	8000638 <__aeabi_dmul>
 800acec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf0:	3501      	adds	r5, #1
 800acf2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800acf6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acfa:	4628      	mov	r0, r5
 800acfc:	f7f5 fc32 	bl	8000564 <__aeabi_i2d>
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	f7f5 fc98 	bl	8000638 <__aeabi_dmul>
 800ad08:	4b88      	ldr	r3, [pc, #544]	; (800af2c <_dtoa_r+0x654>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f7f5 fade 	bl	80002cc <__adddf3>
 800ad10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ad14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad18:	9303      	str	r3, [sp, #12]
 800ad1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d15c      	bne.n	800adda <_dtoa_r+0x502>
 800ad20:	4b83      	ldr	r3, [pc, #524]	; (800af30 <_dtoa_r+0x658>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f7f5 face 	bl	80002c8 <__aeabi_dsub>
 800ad2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad30:	4606      	mov	r6, r0
 800ad32:	460f      	mov	r7, r1
 800ad34:	f7f5 ff10 	bl	8000b58 <__aeabi_dcmpgt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f040 8296 	bne.w	800b26a <_dtoa_r+0x992>
 800ad3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad42:	4630      	mov	r0, r6
 800ad44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad48:	4639      	mov	r1, r7
 800ad4a:	f7f5 fee7 	bl	8000b1c <__aeabi_dcmplt>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f040 8288 	bne.w	800b264 <_dtoa_r+0x98c>
 800ad54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f2c0 8158 	blt.w	800b014 <_dtoa_r+0x73c>
 800ad64:	f1ba 0f0e 	cmp.w	sl, #14
 800ad68:	f300 8154 	bgt.w	800b014 <_dtoa_r+0x73c>
 800ad6c:	4b6b      	ldr	r3, [pc, #428]	; (800af1c <_dtoa_r+0x644>)
 800ad6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad72:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f280 80e3 	bge.w	800af44 <_dtoa_r+0x66c>
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f300 80df 	bgt.w	800af44 <_dtoa_r+0x66c>
 800ad86:	f040 826d 	bne.w	800b264 <_dtoa_r+0x98c>
 800ad8a:	4b69      	ldr	r3, [pc, #420]	; (800af30 <_dtoa_r+0x658>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4640      	mov	r0, r8
 800ad90:	4649      	mov	r1, r9
 800ad92:	f7f5 fc51 	bl	8000638 <__aeabi_dmul>
 800ad96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad9a:	f7f5 fed3 	bl	8000b44 <__aeabi_dcmpge>
 800ad9e:	9e01      	ldr	r6, [sp, #4]
 800ada0:	4637      	mov	r7, r6
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f040 8243 	bne.w	800b22e <_dtoa_r+0x956>
 800ada8:	9d00      	ldr	r5, [sp, #0]
 800adaa:	2331      	movs	r3, #49	; 0x31
 800adac:	f805 3b01 	strb.w	r3, [r5], #1
 800adb0:	f10a 0a01 	add.w	sl, sl, #1
 800adb4:	e23f      	b.n	800b236 <_dtoa_r+0x95e>
 800adb6:	07f2      	lsls	r2, r6, #31
 800adb8:	d505      	bpl.n	800adc6 <_dtoa_r+0x4ee>
 800adba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adbe:	f7f5 fc3b 	bl	8000638 <__aeabi_dmul>
 800adc2:	3501      	adds	r5, #1
 800adc4:	2301      	movs	r3, #1
 800adc6:	1076      	asrs	r6, r6, #1
 800adc8:	3708      	adds	r7, #8
 800adca:	e76c      	b.n	800aca6 <_dtoa_r+0x3ce>
 800adcc:	2502      	movs	r5, #2
 800adce:	e76f      	b.n	800acb0 <_dtoa_r+0x3d8>
 800add0:	9b01      	ldr	r3, [sp, #4]
 800add2:	f8cd a01c 	str.w	sl, [sp, #28]
 800add6:	930c      	str	r3, [sp, #48]	; 0x30
 800add8:	e78d      	b.n	800acf6 <_dtoa_r+0x41e>
 800adda:	9900      	ldr	r1, [sp, #0]
 800addc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800adde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ade0:	4b4e      	ldr	r3, [pc, #312]	; (800af1c <_dtoa_r+0x644>)
 800ade2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade6:	4401      	add	r1, r0
 800ade8:	9102      	str	r1, [sp, #8]
 800adea:	9908      	ldr	r1, [sp, #32]
 800adec:	eeb0 8a47 	vmov.f32	s16, s14
 800adf0:	eef0 8a67 	vmov.f32	s17, s15
 800adf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d045      	beq.n	800ae8c <_dtoa_r+0x5b4>
 800ae00:	494c      	ldr	r1, [pc, #304]	; (800af34 <_dtoa_r+0x65c>)
 800ae02:	2000      	movs	r0, #0
 800ae04:	f7f5 fd42 	bl	800088c <__aeabi_ddiv>
 800ae08:	ec53 2b18 	vmov	r2, r3, d8
 800ae0c:	f7f5 fa5c 	bl	80002c8 <__aeabi_dsub>
 800ae10:	9d00      	ldr	r5, [sp, #0]
 800ae12:	ec41 0b18 	vmov	d8, r0, r1
 800ae16:	4639      	mov	r1, r7
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7f5 febd 	bl	8000b98 <__aeabi_d2iz>
 800ae1e:	900c      	str	r0, [sp, #48]	; 0x30
 800ae20:	f7f5 fba0 	bl	8000564 <__aeabi_i2d>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	f7f5 fa4c 	bl	80002c8 <__aeabi_dsub>
 800ae30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae32:	3330      	adds	r3, #48	; 0x30
 800ae34:	f805 3b01 	strb.w	r3, [r5], #1
 800ae38:	ec53 2b18 	vmov	r2, r3, d8
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	460f      	mov	r7, r1
 800ae40:	f7f5 fe6c 	bl	8000b1c <__aeabi_dcmplt>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d165      	bne.n	800af14 <_dtoa_r+0x63c>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	4935      	ldr	r1, [pc, #212]	; (800af24 <_dtoa_r+0x64c>)
 800ae4e:	2000      	movs	r0, #0
 800ae50:	f7f5 fa3a 	bl	80002c8 <__aeabi_dsub>
 800ae54:	ec53 2b18 	vmov	r2, r3, d8
 800ae58:	f7f5 fe60 	bl	8000b1c <__aeabi_dcmplt>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f040 80b9 	bne.w	800afd4 <_dtoa_r+0x6fc>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	429d      	cmp	r5, r3
 800ae66:	f43f af75 	beq.w	800ad54 <_dtoa_r+0x47c>
 800ae6a:	4b2f      	ldr	r3, [pc, #188]	; (800af28 <_dtoa_r+0x650>)
 800ae6c:	ec51 0b18 	vmov	r0, r1, d8
 800ae70:	2200      	movs	r2, #0
 800ae72:	f7f5 fbe1 	bl	8000638 <__aeabi_dmul>
 800ae76:	4b2c      	ldr	r3, [pc, #176]	; (800af28 <_dtoa_r+0x650>)
 800ae78:	ec41 0b18 	vmov	d8, r0, r1
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7f5 fbd9 	bl	8000638 <__aeabi_dmul>
 800ae86:	4606      	mov	r6, r0
 800ae88:	460f      	mov	r7, r1
 800ae8a:	e7c4      	b.n	800ae16 <_dtoa_r+0x53e>
 800ae8c:	ec51 0b17 	vmov	r0, r1, d7
 800ae90:	f7f5 fbd2 	bl	8000638 <__aeabi_dmul>
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	9d00      	ldr	r5, [sp, #0]
 800ae98:	930c      	str	r3, [sp, #48]	; 0x30
 800ae9a:	ec41 0b18 	vmov	d8, r0, r1
 800ae9e:	4639      	mov	r1, r7
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7f5 fe79 	bl	8000b98 <__aeabi_d2iz>
 800aea6:	9011      	str	r0, [sp, #68]	; 0x44
 800aea8:	f7f5 fb5c 	bl	8000564 <__aeabi_i2d>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 fa08 	bl	80002c8 <__aeabi_dsub>
 800aeb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeba:	3330      	adds	r3, #48	; 0x30
 800aebc:	f805 3b01 	strb.w	r3, [r5], #1
 800aec0:	9b02      	ldr	r3, [sp, #8]
 800aec2:	429d      	cmp	r5, r3
 800aec4:	4606      	mov	r6, r0
 800aec6:	460f      	mov	r7, r1
 800aec8:	f04f 0200 	mov.w	r2, #0
 800aecc:	d134      	bne.n	800af38 <_dtoa_r+0x660>
 800aece:	4b19      	ldr	r3, [pc, #100]	; (800af34 <_dtoa_r+0x65c>)
 800aed0:	ec51 0b18 	vmov	r0, r1, d8
 800aed4:	f7f5 f9fa 	bl	80002cc <__adddf3>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4630      	mov	r0, r6
 800aede:	4639      	mov	r1, r7
 800aee0:	f7f5 fe3a 	bl	8000b58 <__aeabi_dcmpgt>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d175      	bne.n	800afd4 <_dtoa_r+0x6fc>
 800aee8:	ec53 2b18 	vmov	r2, r3, d8
 800aeec:	4911      	ldr	r1, [pc, #68]	; (800af34 <_dtoa_r+0x65c>)
 800aeee:	2000      	movs	r0, #0
 800aef0:	f7f5 f9ea 	bl	80002c8 <__aeabi_dsub>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fe0e 	bl	8000b1c <__aeabi_dcmplt>
 800af00:	2800      	cmp	r0, #0
 800af02:	f43f af27 	beq.w	800ad54 <_dtoa_r+0x47c>
 800af06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af08:	1e6b      	subs	r3, r5, #1
 800af0a:	930c      	str	r3, [sp, #48]	; 0x30
 800af0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af10:	2b30      	cmp	r3, #48	; 0x30
 800af12:	d0f8      	beq.n	800af06 <_dtoa_r+0x62e>
 800af14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800af18:	e04a      	b.n	800afb0 <_dtoa_r+0x6d8>
 800af1a:	bf00      	nop
 800af1c:	0800dc08 	.word	0x0800dc08
 800af20:	0800dbe0 	.word	0x0800dbe0
 800af24:	3ff00000 	.word	0x3ff00000
 800af28:	40240000 	.word	0x40240000
 800af2c:	401c0000 	.word	0x401c0000
 800af30:	40140000 	.word	0x40140000
 800af34:	3fe00000 	.word	0x3fe00000
 800af38:	4baf      	ldr	r3, [pc, #700]	; (800b1f8 <_dtoa_r+0x920>)
 800af3a:	f7f5 fb7d 	bl	8000638 <__aeabi_dmul>
 800af3e:	4606      	mov	r6, r0
 800af40:	460f      	mov	r7, r1
 800af42:	e7ac      	b.n	800ae9e <_dtoa_r+0x5c6>
 800af44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af48:	9d00      	ldr	r5, [sp, #0]
 800af4a:	4642      	mov	r2, r8
 800af4c:	464b      	mov	r3, r9
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 fc9b 	bl	800088c <__aeabi_ddiv>
 800af56:	f7f5 fe1f 	bl	8000b98 <__aeabi_d2iz>
 800af5a:	9002      	str	r0, [sp, #8]
 800af5c:	f7f5 fb02 	bl	8000564 <__aeabi_i2d>
 800af60:	4642      	mov	r2, r8
 800af62:	464b      	mov	r3, r9
 800af64:	f7f5 fb68 	bl	8000638 <__aeabi_dmul>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f9aa 	bl	80002c8 <__aeabi_dsub>
 800af74:	9e02      	ldr	r6, [sp, #8]
 800af76:	9f01      	ldr	r7, [sp, #4]
 800af78:	3630      	adds	r6, #48	; 0x30
 800af7a:	f805 6b01 	strb.w	r6, [r5], #1
 800af7e:	9e00      	ldr	r6, [sp, #0]
 800af80:	1bae      	subs	r6, r5, r6
 800af82:	42b7      	cmp	r7, r6
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	d137      	bne.n	800affa <_dtoa_r+0x722>
 800af8a:	f7f5 f99f 	bl	80002cc <__adddf3>
 800af8e:	4642      	mov	r2, r8
 800af90:	464b      	mov	r3, r9
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	f7f5 fddf 	bl	8000b58 <__aeabi_dcmpgt>
 800af9a:	b9c8      	cbnz	r0, 800afd0 <_dtoa_r+0x6f8>
 800af9c:	4642      	mov	r2, r8
 800af9e:	464b      	mov	r3, r9
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 800afa8:	b110      	cbz	r0, 800afb0 <_dtoa_r+0x6d8>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	07d9      	lsls	r1, r3, #31
 800afae:	d40f      	bmi.n	800afd0 <_dtoa_r+0x6f8>
 800afb0:	4620      	mov	r0, r4
 800afb2:	4659      	mov	r1, fp
 800afb4:	f001 f876 	bl	800c0a4 <_Bfree>
 800afb8:	2300      	movs	r3, #0
 800afba:	702b      	strb	r3, [r5, #0]
 800afbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afbe:	f10a 0001 	add.w	r0, sl, #1
 800afc2:	6018      	str	r0, [r3, #0]
 800afc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f43f acd8 	beq.w	800a97c <_dtoa_r+0xa4>
 800afcc:	601d      	str	r5, [r3, #0]
 800afce:	e4d5      	b.n	800a97c <_dtoa_r+0xa4>
 800afd0:	f8cd a01c 	str.w	sl, [sp, #28]
 800afd4:	462b      	mov	r3, r5
 800afd6:	461d      	mov	r5, r3
 800afd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afdc:	2a39      	cmp	r2, #57	; 0x39
 800afde:	d108      	bne.n	800aff2 <_dtoa_r+0x71a>
 800afe0:	9a00      	ldr	r2, [sp, #0]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d1f7      	bne.n	800afd6 <_dtoa_r+0x6fe>
 800afe6:	9a07      	ldr	r2, [sp, #28]
 800afe8:	9900      	ldr	r1, [sp, #0]
 800afea:	3201      	adds	r2, #1
 800afec:	9207      	str	r2, [sp, #28]
 800afee:	2230      	movs	r2, #48	; 0x30
 800aff0:	700a      	strb	r2, [r1, #0]
 800aff2:	781a      	ldrb	r2, [r3, #0]
 800aff4:	3201      	adds	r2, #1
 800aff6:	701a      	strb	r2, [r3, #0]
 800aff8:	e78c      	b.n	800af14 <_dtoa_r+0x63c>
 800affa:	4b7f      	ldr	r3, [pc, #508]	; (800b1f8 <_dtoa_r+0x920>)
 800affc:	2200      	movs	r2, #0
 800affe:	f7f5 fb1b 	bl	8000638 <__aeabi_dmul>
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	f7f5 fd7d 	bl	8000b08 <__aeabi_dcmpeq>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d09b      	beq.n	800af4a <_dtoa_r+0x672>
 800b012:	e7cd      	b.n	800afb0 <_dtoa_r+0x6d8>
 800b014:	9a08      	ldr	r2, [sp, #32]
 800b016:	2a00      	cmp	r2, #0
 800b018:	f000 80c4 	beq.w	800b1a4 <_dtoa_r+0x8cc>
 800b01c:	9a05      	ldr	r2, [sp, #20]
 800b01e:	2a01      	cmp	r2, #1
 800b020:	f300 80a8 	bgt.w	800b174 <_dtoa_r+0x89c>
 800b024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b026:	2a00      	cmp	r2, #0
 800b028:	f000 80a0 	beq.w	800b16c <_dtoa_r+0x894>
 800b02c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b030:	9e06      	ldr	r6, [sp, #24]
 800b032:	4645      	mov	r5, r8
 800b034:	9a04      	ldr	r2, [sp, #16]
 800b036:	2101      	movs	r1, #1
 800b038:	441a      	add	r2, r3
 800b03a:	4620      	mov	r0, r4
 800b03c:	4498      	add	r8, r3
 800b03e:	9204      	str	r2, [sp, #16]
 800b040:	f001 f936 	bl	800c2b0 <__i2b>
 800b044:	4607      	mov	r7, r0
 800b046:	2d00      	cmp	r5, #0
 800b048:	dd0b      	ble.n	800b062 <_dtoa_r+0x78a>
 800b04a:	9b04      	ldr	r3, [sp, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd08      	ble.n	800b062 <_dtoa_r+0x78a>
 800b050:	42ab      	cmp	r3, r5
 800b052:	9a04      	ldr	r2, [sp, #16]
 800b054:	bfa8      	it	ge
 800b056:	462b      	movge	r3, r5
 800b058:	eba8 0803 	sub.w	r8, r8, r3
 800b05c:	1aed      	subs	r5, r5, r3
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	9b06      	ldr	r3, [sp, #24]
 800b064:	b1fb      	cbz	r3, 800b0a6 <_dtoa_r+0x7ce>
 800b066:	9b08      	ldr	r3, [sp, #32]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 809f 	beq.w	800b1ac <_dtoa_r+0x8d4>
 800b06e:	2e00      	cmp	r6, #0
 800b070:	dd11      	ble.n	800b096 <_dtoa_r+0x7be>
 800b072:	4639      	mov	r1, r7
 800b074:	4632      	mov	r2, r6
 800b076:	4620      	mov	r0, r4
 800b078:	f001 f9d6 	bl	800c428 <__pow5mult>
 800b07c:	465a      	mov	r2, fp
 800b07e:	4601      	mov	r1, r0
 800b080:	4607      	mov	r7, r0
 800b082:	4620      	mov	r0, r4
 800b084:	f001 f92a 	bl	800c2dc <__multiply>
 800b088:	4659      	mov	r1, fp
 800b08a:	9007      	str	r0, [sp, #28]
 800b08c:	4620      	mov	r0, r4
 800b08e:	f001 f809 	bl	800c0a4 <_Bfree>
 800b092:	9b07      	ldr	r3, [sp, #28]
 800b094:	469b      	mov	fp, r3
 800b096:	9b06      	ldr	r3, [sp, #24]
 800b098:	1b9a      	subs	r2, r3, r6
 800b09a:	d004      	beq.n	800b0a6 <_dtoa_r+0x7ce>
 800b09c:	4659      	mov	r1, fp
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f001 f9c2 	bl	800c428 <__pow5mult>
 800b0a4:	4683      	mov	fp, r0
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f001 f901 	bl	800c2b0 <__i2b>
 800b0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	dd7c      	ble.n	800b1b0 <_dtoa_r+0x8d8>
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f001 f9b4 	bl	800c428 <__pow5mult>
 800b0c0:	9b05      	ldr	r3, [sp, #20]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	4606      	mov	r6, r0
 800b0c6:	dd76      	ble.n	800b1b6 <_dtoa_r+0x8de>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9306      	str	r3, [sp, #24]
 800b0cc:	6933      	ldr	r3, [r6, #16]
 800b0ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0d2:	6918      	ldr	r0, [r3, #16]
 800b0d4:	f001 f89c 	bl	800c210 <__hi0bits>
 800b0d8:	f1c0 0020 	rsb	r0, r0, #32
 800b0dc:	9b04      	ldr	r3, [sp, #16]
 800b0de:	4418      	add	r0, r3
 800b0e0:	f010 001f 	ands.w	r0, r0, #31
 800b0e4:	f000 8086 	beq.w	800b1f4 <_dtoa_r+0x91c>
 800b0e8:	f1c0 0320 	rsb	r3, r0, #32
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	dd7f      	ble.n	800b1f0 <_dtoa_r+0x918>
 800b0f0:	f1c0 001c 	rsb	r0, r0, #28
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	4403      	add	r3, r0
 800b0f8:	4480      	add	r8, r0
 800b0fa:	4405      	add	r5, r0
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	f1b8 0f00 	cmp.w	r8, #0
 800b102:	dd05      	ble.n	800b110 <_dtoa_r+0x838>
 800b104:	4659      	mov	r1, fp
 800b106:	4642      	mov	r2, r8
 800b108:	4620      	mov	r0, r4
 800b10a:	f001 f9e7 	bl	800c4dc <__lshift>
 800b10e:	4683      	mov	fp, r0
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	dd05      	ble.n	800b122 <_dtoa_r+0x84a>
 800b116:	4631      	mov	r1, r6
 800b118:	461a      	mov	r2, r3
 800b11a:	4620      	mov	r0, r4
 800b11c:	f001 f9de 	bl	800c4dc <__lshift>
 800b120:	4606      	mov	r6, r0
 800b122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b124:	2b00      	cmp	r3, #0
 800b126:	d069      	beq.n	800b1fc <_dtoa_r+0x924>
 800b128:	4631      	mov	r1, r6
 800b12a:	4658      	mov	r0, fp
 800b12c:	f001 fa42 	bl	800c5b4 <__mcmp>
 800b130:	2800      	cmp	r0, #0
 800b132:	da63      	bge.n	800b1fc <_dtoa_r+0x924>
 800b134:	2300      	movs	r3, #0
 800b136:	4659      	mov	r1, fp
 800b138:	220a      	movs	r2, #10
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 ffd4 	bl	800c0e8 <__multadd>
 800b140:	9b08      	ldr	r3, [sp, #32]
 800b142:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b146:	4683      	mov	fp, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 818f 	beq.w	800b46c <_dtoa_r+0xb94>
 800b14e:	4639      	mov	r1, r7
 800b150:	2300      	movs	r3, #0
 800b152:	220a      	movs	r2, #10
 800b154:	4620      	mov	r0, r4
 800b156:	f000 ffc7 	bl	800c0e8 <__multadd>
 800b15a:	f1b9 0f00 	cmp.w	r9, #0
 800b15e:	4607      	mov	r7, r0
 800b160:	f300 808e 	bgt.w	800b280 <_dtoa_r+0x9a8>
 800b164:	9b05      	ldr	r3, [sp, #20]
 800b166:	2b02      	cmp	r3, #2
 800b168:	dc50      	bgt.n	800b20c <_dtoa_r+0x934>
 800b16a:	e089      	b.n	800b280 <_dtoa_r+0x9a8>
 800b16c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b16e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b172:	e75d      	b.n	800b030 <_dtoa_r+0x758>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	1e5e      	subs	r6, r3, #1
 800b178:	9b06      	ldr	r3, [sp, #24]
 800b17a:	42b3      	cmp	r3, r6
 800b17c:	bfbf      	itttt	lt
 800b17e:	9b06      	ldrlt	r3, [sp, #24]
 800b180:	9606      	strlt	r6, [sp, #24]
 800b182:	1af2      	sublt	r2, r6, r3
 800b184:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b186:	bfb6      	itet	lt
 800b188:	189b      	addlt	r3, r3, r2
 800b18a:	1b9e      	subge	r6, r3, r6
 800b18c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	bfb8      	it	lt
 800b192:	2600      	movlt	r6, #0
 800b194:	2b00      	cmp	r3, #0
 800b196:	bfb5      	itete	lt
 800b198:	eba8 0503 	sublt.w	r5, r8, r3
 800b19c:	9b01      	ldrge	r3, [sp, #4]
 800b19e:	2300      	movlt	r3, #0
 800b1a0:	4645      	movge	r5, r8
 800b1a2:	e747      	b.n	800b034 <_dtoa_r+0x75c>
 800b1a4:	9e06      	ldr	r6, [sp, #24]
 800b1a6:	9f08      	ldr	r7, [sp, #32]
 800b1a8:	4645      	mov	r5, r8
 800b1aa:	e74c      	b.n	800b046 <_dtoa_r+0x76e>
 800b1ac:	9a06      	ldr	r2, [sp, #24]
 800b1ae:	e775      	b.n	800b09c <_dtoa_r+0x7c4>
 800b1b0:	9b05      	ldr	r3, [sp, #20]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	dc18      	bgt.n	800b1e8 <_dtoa_r+0x910>
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	b9b3      	cbnz	r3, 800b1e8 <_dtoa_r+0x910>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1c0:	b9a3      	cbnz	r3, 800b1ec <_dtoa_r+0x914>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1c8:	0d1b      	lsrs	r3, r3, #20
 800b1ca:	051b      	lsls	r3, r3, #20
 800b1cc:	b12b      	cbz	r3, 800b1da <_dtoa_r+0x902>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	f108 0801 	add.w	r8, r8, #1
 800b1d8:	2301      	movs	r3, #1
 800b1da:	9306      	str	r3, [sp, #24]
 800b1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f47f af74 	bne.w	800b0cc <_dtoa_r+0x7f4>
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	e779      	b.n	800b0dc <_dtoa_r+0x804>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e7f6      	b.n	800b1da <_dtoa_r+0x902>
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	e7f4      	b.n	800b1da <_dtoa_r+0x902>
 800b1f0:	d085      	beq.n	800b0fe <_dtoa_r+0x826>
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	301c      	adds	r0, #28
 800b1f6:	e77d      	b.n	800b0f4 <_dtoa_r+0x81c>
 800b1f8:	40240000 	.word	0x40240000
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	dc38      	bgt.n	800b274 <_dtoa_r+0x99c>
 800b202:	9b05      	ldr	r3, [sp, #20]
 800b204:	2b02      	cmp	r3, #2
 800b206:	dd35      	ble.n	800b274 <_dtoa_r+0x99c>
 800b208:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b20c:	f1b9 0f00 	cmp.w	r9, #0
 800b210:	d10d      	bne.n	800b22e <_dtoa_r+0x956>
 800b212:	4631      	mov	r1, r6
 800b214:	464b      	mov	r3, r9
 800b216:	2205      	movs	r2, #5
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 ff65 	bl	800c0e8 <__multadd>
 800b21e:	4601      	mov	r1, r0
 800b220:	4606      	mov	r6, r0
 800b222:	4658      	mov	r0, fp
 800b224:	f001 f9c6 	bl	800c5b4 <__mcmp>
 800b228:	2800      	cmp	r0, #0
 800b22a:	f73f adbd 	bgt.w	800ada8 <_dtoa_r+0x4d0>
 800b22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b230:	9d00      	ldr	r5, [sp, #0]
 800b232:	ea6f 0a03 	mvn.w	sl, r3
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	4631      	mov	r1, r6
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 ff31 	bl	800c0a4 <_Bfree>
 800b242:	2f00      	cmp	r7, #0
 800b244:	f43f aeb4 	beq.w	800afb0 <_dtoa_r+0x6d8>
 800b248:	f1b8 0f00 	cmp.w	r8, #0
 800b24c:	d005      	beq.n	800b25a <_dtoa_r+0x982>
 800b24e:	45b8      	cmp	r8, r7
 800b250:	d003      	beq.n	800b25a <_dtoa_r+0x982>
 800b252:	4641      	mov	r1, r8
 800b254:	4620      	mov	r0, r4
 800b256:	f000 ff25 	bl	800c0a4 <_Bfree>
 800b25a:	4639      	mov	r1, r7
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 ff21 	bl	800c0a4 <_Bfree>
 800b262:	e6a5      	b.n	800afb0 <_dtoa_r+0x6d8>
 800b264:	2600      	movs	r6, #0
 800b266:	4637      	mov	r7, r6
 800b268:	e7e1      	b.n	800b22e <_dtoa_r+0x956>
 800b26a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b26c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b270:	4637      	mov	r7, r6
 800b272:	e599      	b.n	800ada8 <_dtoa_r+0x4d0>
 800b274:	9b08      	ldr	r3, [sp, #32]
 800b276:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 80fd 	beq.w	800b47a <_dtoa_r+0xba2>
 800b280:	2d00      	cmp	r5, #0
 800b282:	dd05      	ble.n	800b290 <_dtoa_r+0x9b8>
 800b284:	4639      	mov	r1, r7
 800b286:	462a      	mov	r2, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	f001 f927 	bl	800c4dc <__lshift>
 800b28e:	4607      	mov	r7, r0
 800b290:	9b06      	ldr	r3, [sp, #24]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d05c      	beq.n	800b350 <_dtoa_r+0xa78>
 800b296:	6879      	ldr	r1, [r7, #4]
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fec3 	bl	800c024 <_Balloc>
 800b29e:	4605      	mov	r5, r0
 800b2a0:	b928      	cbnz	r0, 800b2ae <_dtoa_r+0x9d6>
 800b2a2:	4b80      	ldr	r3, [pc, #512]	; (800b4a4 <_dtoa_r+0xbcc>)
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b2aa:	f7ff bb2e 	b.w	800a90a <_dtoa_r+0x32>
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	3202      	adds	r2, #2
 800b2b2:	0092      	lsls	r2, r2, #2
 800b2b4:	f107 010c 	add.w	r1, r7, #12
 800b2b8:	300c      	adds	r0, #12
 800b2ba:	f000 fea5 	bl	800c008 <memcpy>
 800b2be:	2201      	movs	r2, #1
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f001 f90a 	bl	800c4dc <__lshift>
 800b2c8:	9b00      	ldr	r3, [sp, #0]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	444b      	add	r3, r9
 800b2d2:	9307      	str	r3, [sp, #28]
 800b2d4:	9b02      	ldr	r3, [sp, #8]
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	46b8      	mov	r8, r7
 800b2dc:	9306      	str	r3, [sp, #24]
 800b2de:	4607      	mov	r7, r0
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	4658      	mov	r0, fp
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	f7ff fa67 	bl	800a7bc <quorem>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	3330      	adds	r3, #48	; 0x30
 800b2f2:	9004      	str	r0, [sp, #16]
 800b2f4:	4641      	mov	r1, r8
 800b2f6:	4658      	mov	r0, fp
 800b2f8:	9308      	str	r3, [sp, #32]
 800b2fa:	f001 f95b 	bl	800c5b4 <__mcmp>
 800b2fe:	463a      	mov	r2, r7
 800b300:	4681      	mov	r9, r0
 800b302:	4631      	mov	r1, r6
 800b304:	4620      	mov	r0, r4
 800b306:	f001 f971 	bl	800c5ec <__mdiff>
 800b30a:	68c2      	ldr	r2, [r0, #12]
 800b30c:	9b08      	ldr	r3, [sp, #32]
 800b30e:	4605      	mov	r5, r0
 800b310:	bb02      	cbnz	r2, 800b354 <_dtoa_r+0xa7c>
 800b312:	4601      	mov	r1, r0
 800b314:	4658      	mov	r0, fp
 800b316:	f001 f94d 	bl	800c5b4 <__mcmp>
 800b31a:	9b08      	ldr	r3, [sp, #32]
 800b31c:	4602      	mov	r2, r0
 800b31e:	4629      	mov	r1, r5
 800b320:	4620      	mov	r0, r4
 800b322:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b326:	f000 febd 	bl	800c0a4 <_Bfree>
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b32e:	9d01      	ldr	r5, [sp, #4]
 800b330:	ea43 0102 	orr.w	r1, r3, r2
 800b334:	9b06      	ldr	r3, [sp, #24]
 800b336:	430b      	orrs	r3, r1
 800b338:	9b08      	ldr	r3, [sp, #32]
 800b33a:	d10d      	bne.n	800b358 <_dtoa_r+0xa80>
 800b33c:	2b39      	cmp	r3, #57	; 0x39
 800b33e:	d029      	beq.n	800b394 <_dtoa_r+0xabc>
 800b340:	f1b9 0f00 	cmp.w	r9, #0
 800b344:	dd01      	ble.n	800b34a <_dtoa_r+0xa72>
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	3331      	adds	r3, #49	; 0x31
 800b34a:	9a02      	ldr	r2, [sp, #8]
 800b34c:	7013      	strb	r3, [r2, #0]
 800b34e:	e774      	b.n	800b23a <_dtoa_r+0x962>
 800b350:	4638      	mov	r0, r7
 800b352:	e7b9      	b.n	800b2c8 <_dtoa_r+0x9f0>
 800b354:	2201      	movs	r2, #1
 800b356:	e7e2      	b.n	800b31e <_dtoa_r+0xa46>
 800b358:	f1b9 0f00 	cmp.w	r9, #0
 800b35c:	db06      	blt.n	800b36c <_dtoa_r+0xa94>
 800b35e:	9905      	ldr	r1, [sp, #20]
 800b360:	ea41 0909 	orr.w	r9, r1, r9
 800b364:	9906      	ldr	r1, [sp, #24]
 800b366:	ea59 0101 	orrs.w	r1, r9, r1
 800b36a:	d120      	bne.n	800b3ae <_dtoa_r+0xad6>
 800b36c:	2a00      	cmp	r2, #0
 800b36e:	ddec      	ble.n	800b34a <_dtoa_r+0xa72>
 800b370:	4659      	mov	r1, fp
 800b372:	2201      	movs	r2, #1
 800b374:	4620      	mov	r0, r4
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	f001 f8b0 	bl	800c4dc <__lshift>
 800b37c:	4631      	mov	r1, r6
 800b37e:	4683      	mov	fp, r0
 800b380:	f001 f918 	bl	800c5b4 <__mcmp>
 800b384:	2800      	cmp	r0, #0
 800b386:	9b01      	ldr	r3, [sp, #4]
 800b388:	dc02      	bgt.n	800b390 <_dtoa_r+0xab8>
 800b38a:	d1de      	bne.n	800b34a <_dtoa_r+0xa72>
 800b38c:	07da      	lsls	r2, r3, #31
 800b38e:	d5dc      	bpl.n	800b34a <_dtoa_r+0xa72>
 800b390:	2b39      	cmp	r3, #57	; 0x39
 800b392:	d1d8      	bne.n	800b346 <_dtoa_r+0xa6e>
 800b394:	9a02      	ldr	r2, [sp, #8]
 800b396:	2339      	movs	r3, #57	; 0x39
 800b398:	7013      	strb	r3, [r2, #0]
 800b39a:	462b      	mov	r3, r5
 800b39c:	461d      	mov	r5, r3
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3a4:	2a39      	cmp	r2, #57	; 0x39
 800b3a6:	d050      	beq.n	800b44a <_dtoa_r+0xb72>
 800b3a8:	3201      	adds	r2, #1
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e745      	b.n	800b23a <_dtoa_r+0x962>
 800b3ae:	2a00      	cmp	r2, #0
 800b3b0:	dd03      	ble.n	800b3ba <_dtoa_r+0xae2>
 800b3b2:	2b39      	cmp	r3, #57	; 0x39
 800b3b4:	d0ee      	beq.n	800b394 <_dtoa_r+0xabc>
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	e7c7      	b.n	800b34a <_dtoa_r+0xa72>
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	9907      	ldr	r1, [sp, #28]
 800b3be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b3c2:	428a      	cmp	r2, r1
 800b3c4:	d02a      	beq.n	800b41c <_dtoa_r+0xb44>
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	220a      	movs	r2, #10
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 fe8b 	bl	800c0e8 <__multadd>
 800b3d2:	45b8      	cmp	r8, r7
 800b3d4:	4683      	mov	fp, r0
 800b3d6:	f04f 0300 	mov.w	r3, #0
 800b3da:	f04f 020a 	mov.w	r2, #10
 800b3de:	4641      	mov	r1, r8
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	d107      	bne.n	800b3f4 <_dtoa_r+0xb1c>
 800b3e4:	f000 fe80 	bl	800c0e8 <__multadd>
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	4607      	mov	r7, r0
 800b3ec:	9b01      	ldr	r3, [sp, #4]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	e775      	b.n	800b2e0 <_dtoa_r+0xa08>
 800b3f4:	f000 fe78 	bl	800c0e8 <__multadd>
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4680      	mov	r8, r0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	220a      	movs	r2, #10
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fe71 	bl	800c0e8 <__multadd>
 800b406:	4607      	mov	r7, r0
 800b408:	e7f0      	b.n	800b3ec <_dtoa_r+0xb14>
 800b40a:	f1b9 0f00 	cmp.w	r9, #0
 800b40e:	9a00      	ldr	r2, [sp, #0]
 800b410:	bfcc      	ite	gt
 800b412:	464d      	movgt	r5, r9
 800b414:	2501      	movle	r5, #1
 800b416:	4415      	add	r5, r2
 800b418:	f04f 0800 	mov.w	r8, #0
 800b41c:	4659      	mov	r1, fp
 800b41e:	2201      	movs	r2, #1
 800b420:	4620      	mov	r0, r4
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	f001 f85a 	bl	800c4dc <__lshift>
 800b428:	4631      	mov	r1, r6
 800b42a:	4683      	mov	fp, r0
 800b42c:	f001 f8c2 	bl	800c5b4 <__mcmp>
 800b430:	2800      	cmp	r0, #0
 800b432:	dcb2      	bgt.n	800b39a <_dtoa_r+0xac2>
 800b434:	d102      	bne.n	800b43c <_dtoa_r+0xb64>
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	07db      	lsls	r3, r3, #31
 800b43a:	d4ae      	bmi.n	800b39a <_dtoa_r+0xac2>
 800b43c:	462b      	mov	r3, r5
 800b43e:	461d      	mov	r5, r3
 800b440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b444:	2a30      	cmp	r2, #48	; 0x30
 800b446:	d0fa      	beq.n	800b43e <_dtoa_r+0xb66>
 800b448:	e6f7      	b.n	800b23a <_dtoa_r+0x962>
 800b44a:	9a00      	ldr	r2, [sp, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d1a5      	bne.n	800b39c <_dtoa_r+0xac4>
 800b450:	f10a 0a01 	add.w	sl, sl, #1
 800b454:	2331      	movs	r3, #49	; 0x31
 800b456:	e779      	b.n	800b34c <_dtoa_r+0xa74>
 800b458:	4b13      	ldr	r3, [pc, #76]	; (800b4a8 <_dtoa_r+0xbd0>)
 800b45a:	f7ff baaf 	b.w	800a9bc <_dtoa_r+0xe4>
 800b45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b460:	2b00      	cmp	r3, #0
 800b462:	f47f aa86 	bne.w	800a972 <_dtoa_r+0x9a>
 800b466:	4b11      	ldr	r3, [pc, #68]	; (800b4ac <_dtoa_r+0xbd4>)
 800b468:	f7ff baa8 	b.w	800a9bc <_dtoa_r+0xe4>
 800b46c:	f1b9 0f00 	cmp.w	r9, #0
 800b470:	dc03      	bgt.n	800b47a <_dtoa_r+0xba2>
 800b472:	9b05      	ldr	r3, [sp, #20]
 800b474:	2b02      	cmp	r3, #2
 800b476:	f73f aec9 	bgt.w	800b20c <_dtoa_r+0x934>
 800b47a:	9d00      	ldr	r5, [sp, #0]
 800b47c:	4631      	mov	r1, r6
 800b47e:	4658      	mov	r0, fp
 800b480:	f7ff f99c 	bl	800a7bc <quorem>
 800b484:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b488:	f805 3b01 	strb.w	r3, [r5], #1
 800b48c:	9a00      	ldr	r2, [sp, #0]
 800b48e:	1aaa      	subs	r2, r5, r2
 800b490:	4591      	cmp	r9, r2
 800b492:	ddba      	ble.n	800b40a <_dtoa_r+0xb32>
 800b494:	4659      	mov	r1, fp
 800b496:	2300      	movs	r3, #0
 800b498:	220a      	movs	r2, #10
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 fe24 	bl	800c0e8 <__multadd>
 800b4a0:	4683      	mov	fp, r0
 800b4a2:	e7eb      	b.n	800b47c <_dtoa_r+0xba4>
 800b4a4:	0800da8c 	.word	0x0800da8c
 800b4a8:	0800d88c 	.word	0x0800d88c
 800b4ac:	0800da09 	.word	0x0800da09

0800b4b0 <__sflush_r>:
 800b4b0:	898a      	ldrh	r2, [r1, #12]
 800b4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	0710      	lsls	r0, r2, #28
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	d458      	bmi.n	800b570 <__sflush_r+0xc0>
 800b4be:	684b      	ldr	r3, [r1, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dc05      	bgt.n	800b4d0 <__sflush_r+0x20>
 800b4c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	dc02      	bgt.n	800b4d0 <__sflush_r+0x20>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	d0f9      	beq.n	800b4ca <__sflush_r+0x1a>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4dc:	682f      	ldr	r7, [r5, #0]
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	d032      	beq.n	800b548 <__sflush_r+0x98>
 800b4e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	075a      	lsls	r2, r3, #29
 800b4e8:	d505      	bpl.n	800b4f6 <__sflush_r+0x46>
 800b4ea:	6863      	ldr	r3, [r4, #4]
 800b4ec:	1ac0      	subs	r0, r0, r3
 800b4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4f0:	b10b      	cbz	r3, 800b4f6 <__sflush_r+0x46>
 800b4f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4f4:	1ac0      	subs	r0, r0, r3
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4fc:	6a21      	ldr	r1, [r4, #32]
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b0      	blx	r6
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	d106      	bne.n	800b516 <__sflush_r+0x66>
 800b508:	6829      	ldr	r1, [r5, #0]
 800b50a:	291d      	cmp	r1, #29
 800b50c:	d82c      	bhi.n	800b568 <__sflush_r+0xb8>
 800b50e:	4a2a      	ldr	r2, [pc, #168]	; (800b5b8 <__sflush_r+0x108>)
 800b510:	40ca      	lsrs	r2, r1
 800b512:	07d6      	lsls	r6, r2, #31
 800b514:	d528      	bpl.n	800b568 <__sflush_r+0xb8>
 800b516:	2200      	movs	r2, #0
 800b518:	6062      	str	r2, [r4, #4]
 800b51a:	04d9      	lsls	r1, r3, #19
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	d504      	bpl.n	800b52c <__sflush_r+0x7c>
 800b522:	1c42      	adds	r2, r0, #1
 800b524:	d101      	bne.n	800b52a <__sflush_r+0x7a>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b903      	cbnz	r3, 800b52c <__sflush_r+0x7c>
 800b52a:	6560      	str	r0, [r4, #84]	; 0x54
 800b52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b52e:	602f      	str	r7, [r5, #0]
 800b530:	2900      	cmp	r1, #0
 800b532:	d0ca      	beq.n	800b4ca <__sflush_r+0x1a>
 800b534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b538:	4299      	cmp	r1, r3
 800b53a:	d002      	beq.n	800b542 <__sflush_r+0x92>
 800b53c:	4628      	mov	r0, r5
 800b53e:	f001 fa3b 	bl	800c9b8 <_free_r>
 800b542:	2000      	movs	r0, #0
 800b544:	6360      	str	r0, [r4, #52]	; 0x34
 800b546:	e7c1      	b.n	800b4cc <__sflush_r+0x1c>
 800b548:	6a21      	ldr	r1, [r4, #32]
 800b54a:	2301      	movs	r3, #1
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b0      	blx	r6
 800b550:	1c41      	adds	r1, r0, #1
 800b552:	d1c7      	bne.n	800b4e4 <__sflush_r+0x34>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0c4      	beq.n	800b4e4 <__sflush_r+0x34>
 800b55a:	2b1d      	cmp	r3, #29
 800b55c:	d001      	beq.n	800b562 <__sflush_r+0xb2>
 800b55e:	2b16      	cmp	r3, #22
 800b560:	d101      	bne.n	800b566 <__sflush_r+0xb6>
 800b562:	602f      	str	r7, [r5, #0]
 800b564:	e7b1      	b.n	800b4ca <__sflush_r+0x1a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56c:	81a3      	strh	r3, [r4, #12]
 800b56e:	e7ad      	b.n	800b4cc <__sflush_r+0x1c>
 800b570:	690f      	ldr	r7, [r1, #16]
 800b572:	2f00      	cmp	r7, #0
 800b574:	d0a9      	beq.n	800b4ca <__sflush_r+0x1a>
 800b576:	0793      	lsls	r3, r2, #30
 800b578:	680e      	ldr	r6, [r1, #0]
 800b57a:	bf08      	it	eq
 800b57c:	694b      	ldreq	r3, [r1, #20]
 800b57e:	600f      	str	r7, [r1, #0]
 800b580:	bf18      	it	ne
 800b582:	2300      	movne	r3, #0
 800b584:	eba6 0807 	sub.w	r8, r6, r7
 800b588:	608b      	str	r3, [r1, #8]
 800b58a:	f1b8 0f00 	cmp.w	r8, #0
 800b58e:	dd9c      	ble.n	800b4ca <__sflush_r+0x1a>
 800b590:	6a21      	ldr	r1, [r4, #32]
 800b592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b594:	4643      	mov	r3, r8
 800b596:	463a      	mov	r2, r7
 800b598:	4628      	mov	r0, r5
 800b59a:	47b0      	blx	r6
 800b59c:	2800      	cmp	r0, #0
 800b59e:	dc06      	bgt.n	800b5ae <__sflush_r+0xfe>
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ac:	e78e      	b.n	800b4cc <__sflush_r+0x1c>
 800b5ae:	4407      	add	r7, r0
 800b5b0:	eba8 0800 	sub.w	r8, r8, r0
 800b5b4:	e7e9      	b.n	800b58a <__sflush_r+0xda>
 800b5b6:	bf00      	nop
 800b5b8:	20400001 	.word	0x20400001

0800b5bc <_fflush_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	690b      	ldr	r3, [r1, #16]
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	b913      	cbnz	r3, 800b5cc <_fflush_r+0x10>
 800b5c6:	2500      	movs	r5, #0
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	b118      	cbz	r0, 800b5d6 <_fflush_r+0x1a>
 800b5ce:	6983      	ldr	r3, [r0, #24]
 800b5d0:	b90b      	cbnz	r3, 800b5d6 <_fflush_r+0x1a>
 800b5d2:	f000 f887 	bl	800b6e4 <__sinit>
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <_fflush_r+0x6c>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d11b      	bne.n	800b614 <_fflush_r+0x58>
 800b5dc:	686c      	ldr	r4, [r5, #4]
 800b5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0ef      	beq.n	800b5c6 <_fflush_r+0xa>
 800b5e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5e8:	07d0      	lsls	r0, r2, #31
 800b5ea:	d404      	bmi.n	800b5f6 <_fflush_r+0x3a>
 800b5ec:	0599      	lsls	r1, r3, #22
 800b5ee:	d402      	bmi.n	800b5f6 <_fflush_r+0x3a>
 800b5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5f2:	f000 fc88 	bl	800bf06 <__retarget_lock_acquire_recursive>
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f7ff ff59 	bl	800b4b0 <__sflush_r>
 800b5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b600:	07da      	lsls	r2, r3, #31
 800b602:	4605      	mov	r5, r0
 800b604:	d4e0      	bmi.n	800b5c8 <_fflush_r+0xc>
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	059b      	lsls	r3, r3, #22
 800b60a:	d4dd      	bmi.n	800b5c8 <_fflush_r+0xc>
 800b60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b60e:	f000 fc7b 	bl	800bf08 <__retarget_lock_release_recursive>
 800b612:	e7d9      	b.n	800b5c8 <_fflush_r+0xc>
 800b614:	4b05      	ldr	r3, [pc, #20]	; (800b62c <_fflush_r+0x70>)
 800b616:	429c      	cmp	r4, r3
 800b618:	d101      	bne.n	800b61e <_fflush_r+0x62>
 800b61a:	68ac      	ldr	r4, [r5, #8]
 800b61c:	e7df      	b.n	800b5de <_fflush_r+0x22>
 800b61e:	4b04      	ldr	r3, [pc, #16]	; (800b630 <_fflush_r+0x74>)
 800b620:	429c      	cmp	r4, r3
 800b622:	bf08      	it	eq
 800b624:	68ec      	ldreq	r4, [r5, #12]
 800b626:	e7da      	b.n	800b5de <_fflush_r+0x22>
 800b628:	0800dac0 	.word	0x0800dac0
 800b62c:	0800dae0 	.word	0x0800dae0
 800b630:	0800daa0 	.word	0x0800daa0

0800b634 <std>:
 800b634:	2300      	movs	r3, #0
 800b636:	b510      	push	{r4, lr}
 800b638:	4604      	mov	r4, r0
 800b63a:	e9c0 3300 	strd	r3, r3, [r0]
 800b63e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b642:	6083      	str	r3, [r0, #8]
 800b644:	8181      	strh	r1, [r0, #12]
 800b646:	6643      	str	r3, [r0, #100]	; 0x64
 800b648:	81c2      	strh	r2, [r0, #14]
 800b64a:	6183      	str	r3, [r0, #24]
 800b64c:	4619      	mov	r1, r3
 800b64e:	2208      	movs	r2, #8
 800b650:	305c      	adds	r0, #92	; 0x5c
 800b652:	f7fd fa09 	bl	8008a68 <memset>
 800b656:	4b05      	ldr	r3, [pc, #20]	; (800b66c <std+0x38>)
 800b658:	6263      	str	r3, [r4, #36]	; 0x24
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <std+0x3c>)
 800b65c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <std+0x40>)
 800b660:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <std+0x44>)
 800b664:	6224      	str	r4, [r4, #32]
 800b666:	6323      	str	r3, [r4, #48]	; 0x30
 800b668:	bd10      	pop	{r4, pc}
 800b66a:	bf00      	nop
 800b66c:	0800d0a9 	.word	0x0800d0a9
 800b670:	0800d0cb 	.word	0x0800d0cb
 800b674:	0800d103 	.word	0x0800d103
 800b678:	0800d127 	.word	0x0800d127

0800b67c <_cleanup_r>:
 800b67c:	4901      	ldr	r1, [pc, #4]	; (800b684 <_cleanup_r+0x8>)
 800b67e:	f000 b8af 	b.w	800b7e0 <_fwalk_reent>
 800b682:	bf00      	nop
 800b684:	0800b5bd 	.word	0x0800b5bd

0800b688 <__sfmoreglue>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	1e4a      	subs	r2, r1, #1
 800b68c:	2568      	movs	r5, #104	; 0x68
 800b68e:	4355      	muls	r5, r2
 800b690:	460e      	mov	r6, r1
 800b692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b696:	f001 f9df 	bl	800ca58 <_malloc_r>
 800b69a:	4604      	mov	r4, r0
 800b69c:	b140      	cbz	r0, 800b6b0 <__sfmoreglue+0x28>
 800b69e:	2100      	movs	r1, #0
 800b6a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b6a4:	300c      	adds	r0, #12
 800b6a6:	60a0      	str	r0, [r4, #8]
 800b6a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6ac:	f7fd f9dc 	bl	8008a68 <memset>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}

0800b6b4 <__sfp_lock_acquire>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__sfp_lock_acquire+0x8>)
 800b6b6:	f000 bc26 	b.w	800bf06 <__retarget_lock_acquire_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	200005ec 	.word	0x200005ec

0800b6c0 <__sfp_lock_release>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	; (800b6c8 <__sfp_lock_release+0x8>)
 800b6c2:	f000 bc21 	b.w	800bf08 <__retarget_lock_release_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	200005ec 	.word	0x200005ec

0800b6cc <__sinit_lock_acquire>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	; (800b6d4 <__sinit_lock_acquire+0x8>)
 800b6ce:	f000 bc1a 	b.w	800bf06 <__retarget_lock_acquire_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	200005e7 	.word	0x200005e7

0800b6d8 <__sinit_lock_release>:
 800b6d8:	4801      	ldr	r0, [pc, #4]	; (800b6e0 <__sinit_lock_release+0x8>)
 800b6da:	f000 bc15 	b.w	800bf08 <__retarget_lock_release_recursive>
 800b6de:	bf00      	nop
 800b6e0:	200005e7 	.word	0x200005e7

0800b6e4 <__sinit>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	f7ff fff0 	bl	800b6cc <__sinit_lock_acquire>
 800b6ec:	69a3      	ldr	r3, [r4, #24]
 800b6ee:	b11b      	cbz	r3, 800b6f8 <__sinit+0x14>
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	f7ff bff0 	b.w	800b6d8 <__sinit_lock_release>
 800b6f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <__sinit+0x68>)
 800b700:	4a13      	ldr	r2, [pc, #76]	; (800b750 <__sinit+0x6c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	62a2      	str	r2, [r4, #40]	; 0x28
 800b706:	42a3      	cmp	r3, r4
 800b708:	bf04      	itt	eq
 800b70a:	2301      	moveq	r3, #1
 800b70c:	61a3      	streq	r3, [r4, #24]
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 f820 	bl	800b754 <__sfp>
 800b714:	6060      	str	r0, [r4, #4]
 800b716:	4620      	mov	r0, r4
 800b718:	f000 f81c 	bl	800b754 <__sfp>
 800b71c:	60a0      	str	r0, [r4, #8]
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 f818 	bl	800b754 <__sfp>
 800b724:	2200      	movs	r2, #0
 800b726:	60e0      	str	r0, [r4, #12]
 800b728:	2104      	movs	r1, #4
 800b72a:	6860      	ldr	r0, [r4, #4]
 800b72c:	f7ff ff82 	bl	800b634 <std>
 800b730:	68a0      	ldr	r0, [r4, #8]
 800b732:	2201      	movs	r2, #1
 800b734:	2109      	movs	r1, #9
 800b736:	f7ff ff7d 	bl	800b634 <std>
 800b73a:	68e0      	ldr	r0, [r4, #12]
 800b73c:	2202      	movs	r2, #2
 800b73e:	2112      	movs	r1, #18
 800b740:	f7ff ff78 	bl	800b634 <std>
 800b744:	2301      	movs	r3, #1
 800b746:	61a3      	str	r3, [r4, #24]
 800b748:	e7d2      	b.n	800b6f0 <__sinit+0xc>
 800b74a:	bf00      	nop
 800b74c:	0800d878 	.word	0x0800d878
 800b750:	0800b67d 	.word	0x0800b67d

0800b754 <__sfp>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	4607      	mov	r7, r0
 800b758:	f7ff ffac 	bl	800b6b4 <__sfp_lock_acquire>
 800b75c:	4b1e      	ldr	r3, [pc, #120]	; (800b7d8 <__sfp+0x84>)
 800b75e:	681e      	ldr	r6, [r3, #0]
 800b760:	69b3      	ldr	r3, [r6, #24]
 800b762:	b913      	cbnz	r3, 800b76a <__sfp+0x16>
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ffbd 	bl	800b6e4 <__sinit>
 800b76a:	3648      	adds	r6, #72	; 0x48
 800b76c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b770:	3b01      	subs	r3, #1
 800b772:	d503      	bpl.n	800b77c <__sfp+0x28>
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	b30b      	cbz	r3, 800b7bc <__sfp+0x68>
 800b778:	6836      	ldr	r6, [r6, #0]
 800b77a:	e7f7      	b.n	800b76c <__sfp+0x18>
 800b77c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b780:	b9d5      	cbnz	r5, 800b7b8 <__sfp+0x64>
 800b782:	4b16      	ldr	r3, [pc, #88]	; (800b7dc <__sfp+0x88>)
 800b784:	60e3      	str	r3, [r4, #12]
 800b786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b78a:	6665      	str	r5, [r4, #100]	; 0x64
 800b78c:	f000 fbba 	bl	800bf04 <__retarget_lock_init_recursive>
 800b790:	f7ff ff96 	bl	800b6c0 <__sfp_lock_release>
 800b794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b79c:	6025      	str	r5, [r4, #0]
 800b79e:	61a5      	str	r5, [r4, #24]
 800b7a0:	2208      	movs	r2, #8
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7a8:	f7fd f95e 	bl	8008a68 <memset>
 800b7ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b8:	3468      	adds	r4, #104	; 0x68
 800b7ba:	e7d9      	b.n	800b770 <__sfp+0x1c>
 800b7bc:	2104      	movs	r1, #4
 800b7be:	4638      	mov	r0, r7
 800b7c0:	f7ff ff62 	bl	800b688 <__sfmoreglue>
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	6030      	str	r0, [r6, #0]
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d1d5      	bne.n	800b778 <__sfp+0x24>
 800b7cc:	f7ff ff78 	bl	800b6c0 <__sfp_lock_release>
 800b7d0:	230c      	movs	r3, #12
 800b7d2:	603b      	str	r3, [r7, #0]
 800b7d4:	e7ee      	b.n	800b7b4 <__sfp+0x60>
 800b7d6:	bf00      	nop
 800b7d8:	0800d878 	.word	0x0800d878
 800b7dc:	ffff0001 	.word	0xffff0001

0800b7e0 <_fwalk_reent>:
 800b7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	4688      	mov	r8, r1
 800b7e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7ec:	2700      	movs	r7, #0
 800b7ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b7f6:	d505      	bpl.n	800b804 <_fwalk_reent+0x24>
 800b7f8:	6824      	ldr	r4, [r4, #0]
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	d1f7      	bne.n	800b7ee <_fwalk_reent+0xe>
 800b7fe:	4638      	mov	r0, r7
 800b800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b804:	89ab      	ldrh	r3, [r5, #12]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d907      	bls.n	800b81a <_fwalk_reent+0x3a>
 800b80a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b80e:	3301      	adds	r3, #1
 800b810:	d003      	beq.n	800b81a <_fwalk_reent+0x3a>
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	47c0      	blx	r8
 800b818:	4307      	orrs	r7, r0
 800b81a:	3568      	adds	r5, #104	; 0x68
 800b81c:	e7e9      	b.n	800b7f2 <_fwalk_reent+0x12>

0800b81e <rshift>:
 800b81e:	6903      	ldr	r3, [r0, #16]
 800b820:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b828:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b82c:	f100 0414 	add.w	r4, r0, #20
 800b830:	dd45      	ble.n	800b8be <rshift+0xa0>
 800b832:	f011 011f 	ands.w	r1, r1, #31
 800b836:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b83a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b83e:	d10c      	bne.n	800b85a <rshift+0x3c>
 800b840:	f100 0710 	add.w	r7, r0, #16
 800b844:	4629      	mov	r1, r5
 800b846:	42b1      	cmp	r1, r6
 800b848:	d334      	bcc.n	800b8b4 <rshift+0x96>
 800b84a:	1a9b      	subs	r3, r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	1eea      	subs	r2, r5, #3
 800b850:	4296      	cmp	r6, r2
 800b852:	bf38      	it	cc
 800b854:	2300      	movcc	r3, #0
 800b856:	4423      	add	r3, r4
 800b858:	e015      	b.n	800b886 <rshift+0x68>
 800b85a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b85e:	f1c1 0820 	rsb	r8, r1, #32
 800b862:	40cf      	lsrs	r7, r1
 800b864:	f105 0e04 	add.w	lr, r5, #4
 800b868:	46a1      	mov	r9, r4
 800b86a:	4576      	cmp	r6, lr
 800b86c:	46f4      	mov	ip, lr
 800b86e:	d815      	bhi.n	800b89c <rshift+0x7e>
 800b870:	1a9b      	subs	r3, r3, r2
 800b872:	009a      	lsls	r2, r3, #2
 800b874:	3a04      	subs	r2, #4
 800b876:	3501      	adds	r5, #1
 800b878:	42ae      	cmp	r6, r5
 800b87a:	bf38      	it	cc
 800b87c:	2200      	movcc	r2, #0
 800b87e:	18a3      	adds	r3, r4, r2
 800b880:	50a7      	str	r7, [r4, r2]
 800b882:	b107      	cbz	r7, 800b886 <rshift+0x68>
 800b884:	3304      	adds	r3, #4
 800b886:	1b1a      	subs	r2, r3, r4
 800b888:	42a3      	cmp	r3, r4
 800b88a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b88e:	bf08      	it	eq
 800b890:	2300      	moveq	r3, #0
 800b892:	6102      	str	r2, [r0, #16]
 800b894:	bf08      	it	eq
 800b896:	6143      	streq	r3, [r0, #20]
 800b898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b89c:	f8dc c000 	ldr.w	ip, [ip]
 800b8a0:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8a4:	ea4c 0707 	orr.w	r7, ip, r7
 800b8a8:	f849 7b04 	str.w	r7, [r9], #4
 800b8ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8b0:	40cf      	lsrs	r7, r1
 800b8b2:	e7da      	b.n	800b86a <rshift+0x4c>
 800b8b4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b8b8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b8bc:	e7c3      	b.n	800b846 <rshift+0x28>
 800b8be:	4623      	mov	r3, r4
 800b8c0:	e7e1      	b.n	800b886 <rshift+0x68>

0800b8c2 <__hexdig_fun>:
 800b8c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b8c6:	2b09      	cmp	r3, #9
 800b8c8:	d802      	bhi.n	800b8d0 <__hexdig_fun+0xe>
 800b8ca:	3820      	subs	r0, #32
 800b8cc:	b2c0      	uxtb	r0, r0
 800b8ce:	4770      	bx	lr
 800b8d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b8d4:	2b05      	cmp	r3, #5
 800b8d6:	d801      	bhi.n	800b8dc <__hexdig_fun+0x1a>
 800b8d8:	3847      	subs	r0, #71	; 0x47
 800b8da:	e7f7      	b.n	800b8cc <__hexdig_fun+0xa>
 800b8dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b8e0:	2b05      	cmp	r3, #5
 800b8e2:	d801      	bhi.n	800b8e8 <__hexdig_fun+0x26>
 800b8e4:	3827      	subs	r0, #39	; 0x27
 800b8e6:	e7f1      	b.n	800b8cc <__hexdig_fun+0xa>
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	4770      	bx	lr

0800b8ec <__gethex>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	ed2d 8b02 	vpush	{d8}
 800b8f4:	b089      	sub	sp, #36	; 0x24
 800b8f6:	ee08 0a10 	vmov	s16, r0
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	4bbc      	ldr	r3, [pc, #752]	; (800bbf0 <__gethex+0x304>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	4618      	mov	r0, r3
 800b904:	468b      	mov	fp, r1
 800b906:	4690      	mov	r8, r2
 800b908:	f7f4 fc7c 	bl	8000204 <strlen>
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	f8db 2000 	ldr.w	r2, [fp]
 800b912:	4403      	add	r3, r0
 800b914:	4682      	mov	sl, r0
 800b916:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	1c93      	adds	r3, r2, #2
 800b91e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b926:	32fe      	adds	r2, #254	; 0xfe
 800b928:	18d1      	adds	r1, r2, r3
 800b92a:	461f      	mov	r7, r3
 800b92c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b930:	9100      	str	r1, [sp, #0]
 800b932:	2830      	cmp	r0, #48	; 0x30
 800b934:	d0f8      	beq.n	800b928 <__gethex+0x3c>
 800b936:	f7ff ffc4 	bl	800b8c2 <__hexdig_fun>
 800b93a:	4604      	mov	r4, r0
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d13a      	bne.n	800b9b6 <__gethex+0xca>
 800b940:	9901      	ldr	r1, [sp, #4]
 800b942:	4652      	mov	r2, sl
 800b944:	4638      	mov	r0, r7
 800b946:	f001 fbf2 	bl	800d12e <strncmp>
 800b94a:	4605      	mov	r5, r0
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d168      	bne.n	800ba22 <__gethex+0x136>
 800b950:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b954:	eb07 060a 	add.w	r6, r7, sl
 800b958:	f7ff ffb3 	bl	800b8c2 <__hexdig_fun>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d062      	beq.n	800ba26 <__gethex+0x13a>
 800b960:	4633      	mov	r3, r6
 800b962:	7818      	ldrb	r0, [r3, #0]
 800b964:	2830      	cmp	r0, #48	; 0x30
 800b966:	461f      	mov	r7, r3
 800b968:	f103 0301 	add.w	r3, r3, #1
 800b96c:	d0f9      	beq.n	800b962 <__gethex+0x76>
 800b96e:	f7ff ffa8 	bl	800b8c2 <__hexdig_fun>
 800b972:	2301      	movs	r3, #1
 800b974:	fab0 f480 	clz	r4, r0
 800b978:	0964      	lsrs	r4, r4, #5
 800b97a:	4635      	mov	r5, r6
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	463a      	mov	r2, r7
 800b980:	4616      	mov	r6, r2
 800b982:	3201      	adds	r2, #1
 800b984:	7830      	ldrb	r0, [r6, #0]
 800b986:	f7ff ff9c 	bl	800b8c2 <__hexdig_fun>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d1f8      	bne.n	800b980 <__gethex+0x94>
 800b98e:	9901      	ldr	r1, [sp, #4]
 800b990:	4652      	mov	r2, sl
 800b992:	4630      	mov	r0, r6
 800b994:	f001 fbcb 	bl	800d12e <strncmp>
 800b998:	b980      	cbnz	r0, 800b9bc <__gethex+0xd0>
 800b99a:	b94d      	cbnz	r5, 800b9b0 <__gethex+0xc4>
 800b99c:	eb06 050a 	add.w	r5, r6, sl
 800b9a0:	462a      	mov	r2, r5
 800b9a2:	4616      	mov	r6, r2
 800b9a4:	3201      	adds	r2, #1
 800b9a6:	7830      	ldrb	r0, [r6, #0]
 800b9a8:	f7ff ff8b 	bl	800b8c2 <__hexdig_fun>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d1f8      	bne.n	800b9a2 <__gethex+0xb6>
 800b9b0:	1bad      	subs	r5, r5, r6
 800b9b2:	00ad      	lsls	r5, r5, #2
 800b9b4:	e004      	b.n	800b9c0 <__gethex+0xd4>
 800b9b6:	2400      	movs	r4, #0
 800b9b8:	4625      	mov	r5, r4
 800b9ba:	e7e0      	b.n	800b97e <__gethex+0x92>
 800b9bc:	2d00      	cmp	r5, #0
 800b9be:	d1f7      	bne.n	800b9b0 <__gethex+0xc4>
 800b9c0:	7833      	ldrb	r3, [r6, #0]
 800b9c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9c6:	2b50      	cmp	r3, #80	; 0x50
 800b9c8:	d13b      	bne.n	800ba42 <__gethex+0x156>
 800b9ca:	7873      	ldrb	r3, [r6, #1]
 800b9cc:	2b2b      	cmp	r3, #43	; 0x2b
 800b9ce:	d02c      	beq.n	800ba2a <__gethex+0x13e>
 800b9d0:	2b2d      	cmp	r3, #45	; 0x2d
 800b9d2:	d02e      	beq.n	800ba32 <__gethex+0x146>
 800b9d4:	1c71      	adds	r1, r6, #1
 800b9d6:	f04f 0900 	mov.w	r9, #0
 800b9da:	7808      	ldrb	r0, [r1, #0]
 800b9dc:	f7ff ff71 	bl	800b8c2 <__hexdig_fun>
 800b9e0:	1e43      	subs	r3, r0, #1
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b18      	cmp	r3, #24
 800b9e6:	d82c      	bhi.n	800ba42 <__gethex+0x156>
 800b9e8:	f1a0 0210 	sub.w	r2, r0, #16
 800b9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9f0:	f7ff ff67 	bl	800b8c2 <__hexdig_fun>
 800b9f4:	1e43      	subs	r3, r0, #1
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b18      	cmp	r3, #24
 800b9fa:	d91d      	bls.n	800ba38 <__gethex+0x14c>
 800b9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ba00:	d000      	beq.n	800ba04 <__gethex+0x118>
 800ba02:	4252      	negs	r2, r2
 800ba04:	4415      	add	r5, r2
 800ba06:	f8cb 1000 	str.w	r1, [fp]
 800ba0a:	b1e4      	cbz	r4, 800ba46 <__gethex+0x15a>
 800ba0c:	9b00      	ldr	r3, [sp, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bf14      	ite	ne
 800ba12:	2700      	movne	r7, #0
 800ba14:	2706      	moveq	r7, #6
 800ba16:	4638      	mov	r0, r7
 800ba18:	b009      	add	sp, #36	; 0x24
 800ba1a:	ecbd 8b02 	vpop	{d8}
 800ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba22:	463e      	mov	r6, r7
 800ba24:	4625      	mov	r5, r4
 800ba26:	2401      	movs	r4, #1
 800ba28:	e7ca      	b.n	800b9c0 <__gethex+0xd4>
 800ba2a:	f04f 0900 	mov.w	r9, #0
 800ba2e:	1cb1      	adds	r1, r6, #2
 800ba30:	e7d3      	b.n	800b9da <__gethex+0xee>
 800ba32:	f04f 0901 	mov.w	r9, #1
 800ba36:	e7fa      	b.n	800ba2e <__gethex+0x142>
 800ba38:	230a      	movs	r3, #10
 800ba3a:	fb03 0202 	mla	r2, r3, r2, r0
 800ba3e:	3a10      	subs	r2, #16
 800ba40:	e7d4      	b.n	800b9ec <__gethex+0x100>
 800ba42:	4631      	mov	r1, r6
 800ba44:	e7df      	b.n	800ba06 <__gethex+0x11a>
 800ba46:	1bf3      	subs	r3, r6, r7
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	2b07      	cmp	r3, #7
 800ba4e:	dc0b      	bgt.n	800ba68 <__gethex+0x17c>
 800ba50:	ee18 0a10 	vmov	r0, s16
 800ba54:	f000 fae6 	bl	800c024 <_Balloc>
 800ba58:	4604      	mov	r4, r0
 800ba5a:	b940      	cbnz	r0, 800ba6e <__gethex+0x182>
 800ba5c:	4b65      	ldr	r3, [pc, #404]	; (800bbf4 <__gethex+0x308>)
 800ba5e:	4602      	mov	r2, r0
 800ba60:	21de      	movs	r1, #222	; 0xde
 800ba62:	4865      	ldr	r0, [pc, #404]	; (800bbf8 <__gethex+0x30c>)
 800ba64:	f001 fb94 	bl	800d190 <__assert_func>
 800ba68:	3101      	adds	r1, #1
 800ba6a:	105b      	asrs	r3, r3, #1
 800ba6c:	e7ee      	b.n	800ba4c <__gethex+0x160>
 800ba6e:	f100 0914 	add.w	r9, r0, #20
 800ba72:	f04f 0b00 	mov.w	fp, #0
 800ba76:	f1ca 0301 	rsb	r3, sl, #1
 800ba7a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba7e:	f8cd b000 	str.w	fp, [sp]
 800ba82:	9306      	str	r3, [sp, #24]
 800ba84:	42b7      	cmp	r7, r6
 800ba86:	d340      	bcc.n	800bb0a <__gethex+0x21e>
 800ba88:	9802      	ldr	r0, [sp, #8]
 800ba8a:	9b00      	ldr	r3, [sp, #0]
 800ba8c:	f840 3b04 	str.w	r3, [r0], #4
 800ba90:	eba0 0009 	sub.w	r0, r0, r9
 800ba94:	1080      	asrs	r0, r0, #2
 800ba96:	0146      	lsls	r6, r0, #5
 800ba98:	6120      	str	r0, [r4, #16]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fbb8 	bl	800c210 <__hi0bits>
 800baa0:	1a30      	subs	r0, r6, r0
 800baa2:	f8d8 6000 	ldr.w	r6, [r8]
 800baa6:	42b0      	cmp	r0, r6
 800baa8:	dd63      	ble.n	800bb72 <__gethex+0x286>
 800baaa:	1b87      	subs	r7, r0, r6
 800baac:	4639      	mov	r1, r7
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 ff52 	bl	800c958 <__any_on>
 800bab4:	4682      	mov	sl, r0
 800bab6:	b1a8      	cbz	r0, 800bae4 <__gethex+0x1f8>
 800bab8:	1e7b      	subs	r3, r7, #1
 800baba:	1159      	asrs	r1, r3, #5
 800babc:	f003 021f 	and.w	r2, r3, #31
 800bac0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bac4:	f04f 0a01 	mov.w	sl, #1
 800bac8:	fa0a f202 	lsl.w	r2, sl, r2
 800bacc:	420a      	tst	r2, r1
 800bace:	d009      	beq.n	800bae4 <__gethex+0x1f8>
 800bad0:	4553      	cmp	r3, sl
 800bad2:	dd05      	ble.n	800bae0 <__gethex+0x1f4>
 800bad4:	1eb9      	subs	r1, r7, #2
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 ff3e 	bl	800c958 <__any_on>
 800badc:	2800      	cmp	r0, #0
 800bade:	d145      	bne.n	800bb6c <__gethex+0x280>
 800bae0:	f04f 0a02 	mov.w	sl, #2
 800bae4:	4639      	mov	r1, r7
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff fe99 	bl	800b81e <rshift>
 800baec:	443d      	add	r5, r7
 800baee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baf2:	42ab      	cmp	r3, r5
 800baf4:	da4c      	bge.n	800bb90 <__gethex+0x2a4>
 800baf6:	ee18 0a10 	vmov	r0, s16
 800bafa:	4621      	mov	r1, r4
 800bafc:	f000 fad2 	bl	800c0a4 <_Bfree>
 800bb00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb02:	2300      	movs	r3, #0
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	27a3      	movs	r7, #163	; 0xa3
 800bb08:	e785      	b.n	800ba16 <__gethex+0x12a>
 800bb0a:	1e73      	subs	r3, r6, #1
 800bb0c:	9a05      	ldr	r2, [sp, #20]
 800bb0e:	9303      	str	r3, [sp, #12]
 800bb10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d019      	beq.n	800bb4c <__gethex+0x260>
 800bb18:	f1bb 0f20 	cmp.w	fp, #32
 800bb1c:	d107      	bne.n	800bb2e <__gethex+0x242>
 800bb1e:	9b02      	ldr	r3, [sp, #8]
 800bb20:	9a00      	ldr	r2, [sp, #0]
 800bb22:	f843 2b04 	str.w	r2, [r3], #4
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	469b      	mov	fp, r3
 800bb2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bb32:	f7ff fec6 	bl	800b8c2 <__hexdig_fun>
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	f000 000f 	and.w	r0, r0, #15
 800bb3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bb40:	4303      	orrs	r3, r0
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	f10b 0b04 	add.w	fp, fp, #4
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	e00d      	b.n	800bb68 <__gethex+0x27c>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	9a06      	ldr	r2, [sp, #24]
 800bb50:	4413      	add	r3, r2
 800bb52:	42bb      	cmp	r3, r7
 800bb54:	d3e0      	bcc.n	800bb18 <__gethex+0x22c>
 800bb56:	4618      	mov	r0, r3
 800bb58:	9901      	ldr	r1, [sp, #4]
 800bb5a:	9307      	str	r3, [sp, #28]
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	f001 fae6 	bl	800d12e <strncmp>
 800bb62:	9b07      	ldr	r3, [sp, #28]
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d1d7      	bne.n	800bb18 <__gethex+0x22c>
 800bb68:	461e      	mov	r6, r3
 800bb6a:	e78b      	b.n	800ba84 <__gethex+0x198>
 800bb6c:	f04f 0a03 	mov.w	sl, #3
 800bb70:	e7b8      	b.n	800bae4 <__gethex+0x1f8>
 800bb72:	da0a      	bge.n	800bb8a <__gethex+0x29e>
 800bb74:	1a37      	subs	r7, r6, r0
 800bb76:	4621      	mov	r1, r4
 800bb78:	ee18 0a10 	vmov	r0, s16
 800bb7c:	463a      	mov	r2, r7
 800bb7e:	f000 fcad 	bl	800c4dc <__lshift>
 800bb82:	1bed      	subs	r5, r5, r7
 800bb84:	4604      	mov	r4, r0
 800bb86:	f100 0914 	add.w	r9, r0, #20
 800bb8a:	f04f 0a00 	mov.w	sl, #0
 800bb8e:	e7ae      	b.n	800baee <__gethex+0x202>
 800bb90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb94:	42a8      	cmp	r0, r5
 800bb96:	dd72      	ble.n	800bc7e <__gethex+0x392>
 800bb98:	1b45      	subs	r5, r0, r5
 800bb9a:	42ae      	cmp	r6, r5
 800bb9c:	dc36      	bgt.n	800bc0c <__gethex+0x320>
 800bb9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d02a      	beq.n	800bbfc <__gethex+0x310>
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d02c      	beq.n	800bc04 <__gethex+0x318>
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d115      	bne.n	800bbda <__gethex+0x2ee>
 800bbae:	42ae      	cmp	r6, r5
 800bbb0:	d113      	bne.n	800bbda <__gethex+0x2ee>
 800bbb2:	2e01      	cmp	r6, #1
 800bbb4:	d10b      	bne.n	800bbce <__gethex+0x2e2>
 800bbb6:	9a04      	ldr	r2, [sp, #16]
 800bbb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	f8c9 3000 	str.w	r3, [r9]
 800bbc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bbc8:	2762      	movs	r7, #98	; 0x62
 800bbca:	601c      	str	r4, [r3, #0]
 800bbcc:	e723      	b.n	800ba16 <__gethex+0x12a>
 800bbce:	1e71      	subs	r1, r6, #1
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 fec1 	bl	800c958 <__any_on>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d1ed      	bne.n	800bbb6 <__gethex+0x2ca>
 800bbda:	ee18 0a10 	vmov	r0, s16
 800bbde:	4621      	mov	r1, r4
 800bbe0:	f000 fa60 	bl	800c0a4 <_Bfree>
 800bbe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	2750      	movs	r7, #80	; 0x50
 800bbec:	e713      	b.n	800ba16 <__gethex+0x12a>
 800bbee:	bf00      	nop
 800bbf0:	0800db6c 	.word	0x0800db6c
 800bbf4:	0800da8c 	.word	0x0800da8c
 800bbf8:	0800db00 	.word	0x0800db00
 800bbfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1eb      	bne.n	800bbda <__gethex+0x2ee>
 800bc02:	e7d8      	b.n	800bbb6 <__gethex+0x2ca>
 800bc04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1d5      	bne.n	800bbb6 <__gethex+0x2ca>
 800bc0a:	e7e6      	b.n	800bbda <__gethex+0x2ee>
 800bc0c:	1e6f      	subs	r7, r5, #1
 800bc0e:	f1ba 0f00 	cmp.w	sl, #0
 800bc12:	d131      	bne.n	800bc78 <__gethex+0x38c>
 800bc14:	b127      	cbz	r7, 800bc20 <__gethex+0x334>
 800bc16:	4639      	mov	r1, r7
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 fe9d 	bl	800c958 <__any_on>
 800bc1e:	4682      	mov	sl, r0
 800bc20:	117b      	asrs	r3, r7, #5
 800bc22:	2101      	movs	r1, #1
 800bc24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bc28:	f007 071f 	and.w	r7, r7, #31
 800bc2c:	fa01 f707 	lsl.w	r7, r1, r7
 800bc30:	421f      	tst	r7, r3
 800bc32:	4629      	mov	r1, r5
 800bc34:	4620      	mov	r0, r4
 800bc36:	bf18      	it	ne
 800bc38:	f04a 0a02 	orrne.w	sl, sl, #2
 800bc3c:	1b76      	subs	r6, r6, r5
 800bc3e:	f7ff fdee 	bl	800b81e <rshift>
 800bc42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc46:	2702      	movs	r7, #2
 800bc48:	f1ba 0f00 	cmp.w	sl, #0
 800bc4c:	d048      	beq.n	800bce0 <__gethex+0x3f4>
 800bc4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d015      	beq.n	800bc82 <__gethex+0x396>
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d017      	beq.n	800bc8a <__gethex+0x39e>
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d109      	bne.n	800bc72 <__gethex+0x386>
 800bc5e:	f01a 0f02 	tst.w	sl, #2
 800bc62:	d006      	beq.n	800bc72 <__gethex+0x386>
 800bc64:	f8d9 0000 	ldr.w	r0, [r9]
 800bc68:	ea4a 0a00 	orr.w	sl, sl, r0
 800bc6c:	f01a 0f01 	tst.w	sl, #1
 800bc70:	d10e      	bne.n	800bc90 <__gethex+0x3a4>
 800bc72:	f047 0710 	orr.w	r7, r7, #16
 800bc76:	e033      	b.n	800bce0 <__gethex+0x3f4>
 800bc78:	f04f 0a01 	mov.w	sl, #1
 800bc7c:	e7d0      	b.n	800bc20 <__gethex+0x334>
 800bc7e:	2701      	movs	r7, #1
 800bc80:	e7e2      	b.n	800bc48 <__gethex+0x35c>
 800bc82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc84:	f1c3 0301 	rsb	r3, r3, #1
 800bc88:	9315      	str	r3, [sp, #84]	; 0x54
 800bc8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0f0      	beq.n	800bc72 <__gethex+0x386>
 800bc90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc94:	f104 0314 	add.w	r3, r4, #20
 800bc98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bca0:	f04f 0c00 	mov.w	ip, #0
 800bca4:	4618      	mov	r0, r3
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bcae:	d01c      	beq.n	800bcea <__gethex+0x3fe>
 800bcb0:	3201      	adds	r2, #1
 800bcb2:	6002      	str	r2, [r0, #0]
 800bcb4:	2f02      	cmp	r7, #2
 800bcb6:	f104 0314 	add.w	r3, r4, #20
 800bcba:	d13f      	bne.n	800bd3c <__gethex+0x450>
 800bcbc:	f8d8 2000 	ldr.w	r2, [r8]
 800bcc0:	3a01      	subs	r2, #1
 800bcc2:	42b2      	cmp	r2, r6
 800bcc4:	d10a      	bne.n	800bcdc <__gethex+0x3f0>
 800bcc6:	1171      	asrs	r1, r6, #5
 800bcc8:	2201      	movs	r2, #1
 800bcca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcce:	f006 061f 	and.w	r6, r6, #31
 800bcd2:	fa02 f606 	lsl.w	r6, r2, r6
 800bcd6:	421e      	tst	r6, r3
 800bcd8:	bf18      	it	ne
 800bcda:	4617      	movne	r7, r2
 800bcdc:	f047 0720 	orr.w	r7, r7, #32
 800bce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bce2:	601c      	str	r4, [r3, #0]
 800bce4:	9b04      	ldr	r3, [sp, #16]
 800bce6:	601d      	str	r5, [r3, #0]
 800bce8:	e695      	b.n	800ba16 <__gethex+0x12a>
 800bcea:	4299      	cmp	r1, r3
 800bcec:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcf0:	d8d8      	bhi.n	800bca4 <__gethex+0x3b8>
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	459b      	cmp	fp, r3
 800bcf6:	db19      	blt.n	800bd2c <__gethex+0x440>
 800bcf8:	6861      	ldr	r1, [r4, #4]
 800bcfa:	ee18 0a10 	vmov	r0, s16
 800bcfe:	3101      	adds	r1, #1
 800bd00:	f000 f990 	bl	800c024 <_Balloc>
 800bd04:	4681      	mov	r9, r0
 800bd06:	b918      	cbnz	r0, 800bd10 <__gethex+0x424>
 800bd08:	4b1a      	ldr	r3, [pc, #104]	; (800bd74 <__gethex+0x488>)
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	2184      	movs	r1, #132	; 0x84
 800bd0e:	e6a8      	b.n	800ba62 <__gethex+0x176>
 800bd10:	6922      	ldr	r2, [r4, #16]
 800bd12:	3202      	adds	r2, #2
 800bd14:	f104 010c 	add.w	r1, r4, #12
 800bd18:	0092      	lsls	r2, r2, #2
 800bd1a:	300c      	adds	r0, #12
 800bd1c:	f000 f974 	bl	800c008 <memcpy>
 800bd20:	4621      	mov	r1, r4
 800bd22:	ee18 0a10 	vmov	r0, s16
 800bd26:	f000 f9bd 	bl	800c0a4 <_Bfree>
 800bd2a:	464c      	mov	r4, r9
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd34:	6122      	str	r2, [r4, #16]
 800bd36:	2201      	movs	r2, #1
 800bd38:	615a      	str	r2, [r3, #20]
 800bd3a:	e7bb      	b.n	800bcb4 <__gethex+0x3c8>
 800bd3c:	6922      	ldr	r2, [r4, #16]
 800bd3e:	455a      	cmp	r2, fp
 800bd40:	dd0b      	ble.n	800bd5a <__gethex+0x46e>
 800bd42:	2101      	movs	r1, #1
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7ff fd6a 	bl	800b81e <rshift>
 800bd4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd4e:	3501      	adds	r5, #1
 800bd50:	42ab      	cmp	r3, r5
 800bd52:	f6ff aed0 	blt.w	800baf6 <__gethex+0x20a>
 800bd56:	2701      	movs	r7, #1
 800bd58:	e7c0      	b.n	800bcdc <__gethex+0x3f0>
 800bd5a:	f016 061f 	ands.w	r6, r6, #31
 800bd5e:	d0fa      	beq.n	800bd56 <__gethex+0x46a>
 800bd60:	449a      	add	sl, r3
 800bd62:	f1c6 0620 	rsb	r6, r6, #32
 800bd66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bd6a:	f000 fa51 	bl	800c210 <__hi0bits>
 800bd6e:	42b0      	cmp	r0, r6
 800bd70:	dbe7      	blt.n	800bd42 <__gethex+0x456>
 800bd72:	e7f0      	b.n	800bd56 <__gethex+0x46a>
 800bd74:	0800da8c 	.word	0x0800da8c

0800bd78 <L_shift>:
 800bd78:	f1c2 0208 	rsb	r2, r2, #8
 800bd7c:	0092      	lsls	r2, r2, #2
 800bd7e:	b570      	push	{r4, r5, r6, lr}
 800bd80:	f1c2 0620 	rsb	r6, r2, #32
 800bd84:	6843      	ldr	r3, [r0, #4]
 800bd86:	6804      	ldr	r4, [r0, #0]
 800bd88:	fa03 f506 	lsl.w	r5, r3, r6
 800bd8c:	432c      	orrs	r4, r5
 800bd8e:	40d3      	lsrs	r3, r2
 800bd90:	6004      	str	r4, [r0, #0]
 800bd92:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd96:	4288      	cmp	r0, r1
 800bd98:	d3f4      	bcc.n	800bd84 <L_shift+0xc>
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}

0800bd9c <__match>:
 800bd9c:	b530      	push	{r4, r5, lr}
 800bd9e:	6803      	ldr	r3, [r0, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bda6:	b914      	cbnz	r4, 800bdae <__match+0x12>
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	2001      	movs	r0, #1
 800bdac:	bd30      	pop	{r4, r5, pc}
 800bdae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bdb6:	2d19      	cmp	r5, #25
 800bdb8:	bf98      	it	ls
 800bdba:	3220      	addls	r2, #32
 800bdbc:	42a2      	cmp	r2, r4
 800bdbe:	d0f0      	beq.n	800bda2 <__match+0x6>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7f3      	b.n	800bdac <__match+0x10>

0800bdc4 <__hexnan>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	680b      	ldr	r3, [r1, #0]
 800bdca:	6801      	ldr	r1, [r0, #0]
 800bdcc:	115e      	asrs	r6, r3, #5
 800bdce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdd2:	f013 031f 	ands.w	r3, r3, #31
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	bf18      	it	ne
 800bdda:	3604      	addne	r6, #4
 800bddc:	2500      	movs	r5, #0
 800bdde:	1f37      	subs	r7, r6, #4
 800bde0:	4682      	mov	sl, r0
 800bde2:	4690      	mov	r8, r2
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdea:	46b9      	mov	r9, r7
 800bdec:	463c      	mov	r4, r7
 800bdee:	9502      	str	r5, [sp, #8]
 800bdf0:	46ab      	mov	fp, r5
 800bdf2:	784a      	ldrb	r2, [r1, #1]
 800bdf4:	1c4b      	adds	r3, r1, #1
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	b342      	cbz	r2, 800be4c <__hexnan+0x88>
 800bdfa:	4610      	mov	r0, r2
 800bdfc:	9105      	str	r1, [sp, #20]
 800bdfe:	9204      	str	r2, [sp, #16]
 800be00:	f7ff fd5f 	bl	800b8c2 <__hexdig_fun>
 800be04:	2800      	cmp	r0, #0
 800be06:	d14f      	bne.n	800bea8 <__hexnan+0xe4>
 800be08:	9a04      	ldr	r2, [sp, #16]
 800be0a:	9905      	ldr	r1, [sp, #20]
 800be0c:	2a20      	cmp	r2, #32
 800be0e:	d818      	bhi.n	800be42 <__hexnan+0x7e>
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	459b      	cmp	fp, r3
 800be14:	dd13      	ble.n	800be3e <__hexnan+0x7a>
 800be16:	454c      	cmp	r4, r9
 800be18:	d206      	bcs.n	800be28 <__hexnan+0x64>
 800be1a:	2d07      	cmp	r5, #7
 800be1c:	dc04      	bgt.n	800be28 <__hexnan+0x64>
 800be1e:	462a      	mov	r2, r5
 800be20:	4649      	mov	r1, r9
 800be22:	4620      	mov	r0, r4
 800be24:	f7ff ffa8 	bl	800bd78 <L_shift>
 800be28:	4544      	cmp	r4, r8
 800be2a:	d950      	bls.n	800bece <__hexnan+0x10a>
 800be2c:	2300      	movs	r3, #0
 800be2e:	f1a4 0904 	sub.w	r9, r4, #4
 800be32:	f844 3c04 	str.w	r3, [r4, #-4]
 800be36:	f8cd b008 	str.w	fp, [sp, #8]
 800be3a:	464c      	mov	r4, r9
 800be3c:	461d      	mov	r5, r3
 800be3e:	9903      	ldr	r1, [sp, #12]
 800be40:	e7d7      	b.n	800bdf2 <__hexnan+0x2e>
 800be42:	2a29      	cmp	r2, #41	; 0x29
 800be44:	d156      	bne.n	800bef4 <__hexnan+0x130>
 800be46:	3102      	adds	r1, #2
 800be48:	f8ca 1000 	str.w	r1, [sl]
 800be4c:	f1bb 0f00 	cmp.w	fp, #0
 800be50:	d050      	beq.n	800bef4 <__hexnan+0x130>
 800be52:	454c      	cmp	r4, r9
 800be54:	d206      	bcs.n	800be64 <__hexnan+0xa0>
 800be56:	2d07      	cmp	r5, #7
 800be58:	dc04      	bgt.n	800be64 <__hexnan+0xa0>
 800be5a:	462a      	mov	r2, r5
 800be5c:	4649      	mov	r1, r9
 800be5e:	4620      	mov	r0, r4
 800be60:	f7ff ff8a 	bl	800bd78 <L_shift>
 800be64:	4544      	cmp	r4, r8
 800be66:	d934      	bls.n	800bed2 <__hexnan+0x10e>
 800be68:	f1a8 0204 	sub.w	r2, r8, #4
 800be6c:	4623      	mov	r3, r4
 800be6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800be72:	f842 1f04 	str.w	r1, [r2, #4]!
 800be76:	429f      	cmp	r7, r3
 800be78:	d2f9      	bcs.n	800be6e <__hexnan+0xaa>
 800be7a:	1b3b      	subs	r3, r7, r4
 800be7c:	f023 0303 	bic.w	r3, r3, #3
 800be80:	3304      	adds	r3, #4
 800be82:	3401      	adds	r4, #1
 800be84:	3e03      	subs	r6, #3
 800be86:	42b4      	cmp	r4, r6
 800be88:	bf88      	it	hi
 800be8a:	2304      	movhi	r3, #4
 800be8c:	4443      	add	r3, r8
 800be8e:	2200      	movs	r2, #0
 800be90:	f843 2b04 	str.w	r2, [r3], #4
 800be94:	429f      	cmp	r7, r3
 800be96:	d2fb      	bcs.n	800be90 <__hexnan+0xcc>
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	b91b      	cbnz	r3, 800bea4 <__hexnan+0xe0>
 800be9c:	4547      	cmp	r7, r8
 800be9e:	d127      	bne.n	800bef0 <__hexnan+0x12c>
 800bea0:	2301      	movs	r3, #1
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	2005      	movs	r0, #5
 800bea6:	e026      	b.n	800bef6 <__hexnan+0x132>
 800bea8:	3501      	adds	r5, #1
 800beaa:	2d08      	cmp	r5, #8
 800beac:	f10b 0b01 	add.w	fp, fp, #1
 800beb0:	dd06      	ble.n	800bec0 <__hexnan+0xfc>
 800beb2:	4544      	cmp	r4, r8
 800beb4:	d9c3      	bls.n	800be3e <__hexnan+0x7a>
 800beb6:	2300      	movs	r3, #0
 800beb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bebc:	2501      	movs	r5, #1
 800bebe:	3c04      	subs	r4, #4
 800bec0:	6822      	ldr	r2, [r4, #0]
 800bec2:	f000 000f 	and.w	r0, r0, #15
 800bec6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800beca:	6022      	str	r2, [r4, #0]
 800becc:	e7b7      	b.n	800be3e <__hexnan+0x7a>
 800bece:	2508      	movs	r5, #8
 800bed0:	e7b5      	b.n	800be3e <__hexnan+0x7a>
 800bed2:	9b01      	ldr	r3, [sp, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d0df      	beq.n	800be98 <__hexnan+0xd4>
 800bed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bedc:	f1c3 0320 	rsb	r3, r3, #32
 800bee0:	fa22 f303 	lsr.w	r3, r2, r3
 800bee4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bee8:	401a      	ands	r2, r3
 800beea:	f846 2c04 	str.w	r2, [r6, #-4]
 800beee:	e7d3      	b.n	800be98 <__hexnan+0xd4>
 800bef0:	3f04      	subs	r7, #4
 800bef2:	e7d1      	b.n	800be98 <__hexnan+0xd4>
 800bef4:	2004      	movs	r0, #4
 800bef6:	b007      	add	sp, #28
 800bef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800befc <_localeconv_r>:
 800befc:	4800      	ldr	r0, [pc, #0]	; (800bf00 <_localeconv_r+0x4>)
 800befe:	4770      	bx	lr
 800bf00:	2000016c 	.word	0x2000016c

0800bf04 <__retarget_lock_init_recursive>:
 800bf04:	4770      	bx	lr

0800bf06 <__retarget_lock_acquire_recursive>:
 800bf06:	4770      	bx	lr

0800bf08 <__retarget_lock_release_recursive>:
 800bf08:	4770      	bx	lr

0800bf0a <__swhatbuf_r>:
 800bf0a:	b570      	push	{r4, r5, r6, lr}
 800bf0c:	460e      	mov	r6, r1
 800bf0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf12:	2900      	cmp	r1, #0
 800bf14:	b096      	sub	sp, #88	; 0x58
 800bf16:	4614      	mov	r4, r2
 800bf18:	461d      	mov	r5, r3
 800bf1a:	da07      	bge.n	800bf2c <__swhatbuf_r+0x22>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	602b      	str	r3, [r5, #0]
 800bf20:	89b3      	ldrh	r3, [r6, #12]
 800bf22:	061a      	lsls	r2, r3, #24
 800bf24:	d410      	bmi.n	800bf48 <__swhatbuf_r+0x3e>
 800bf26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf2a:	e00e      	b.n	800bf4a <__swhatbuf_r+0x40>
 800bf2c:	466a      	mov	r2, sp
 800bf2e:	f001 f96f 	bl	800d210 <_fstat_r>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	dbf2      	blt.n	800bf1c <__swhatbuf_r+0x12>
 800bf36:	9a01      	ldr	r2, [sp, #4]
 800bf38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf40:	425a      	negs	r2, r3
 800bf42:	415a      	adcs	r2, r3
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	e7ee      	b.n	800bf26 <__swhatbuf_r+0x1c>
 800bf48:	2340      	movs	r3, #64	; 0x40
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	b016      	add	sp, #88	; 0x58
 800bf50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf54 <__smakebuf_r>:
 800bf54:	898b      	ldrh	r3, [r1, #12]
 800bf56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf58:	079d      	lsls	r5, r3, #30
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	d507      	bpl.n	800bf70 <__smakebuf_r+0x1c>
 800bf60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	2301      	movs	r3, #1
 800bf6a:	6163      	str	r3, [r4, #20]
 800bf6c:	b002      	add	sp, #8
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}
 800bf70:	ab01      	add	r3, sp, #4
 800bf72:	466a      	mov	r2, sp
 800bf74:	f7ff ffc9 	bl	800bf0a <__swhatbuf_r>
 800bf78:	9900      	ldr	r1, [sp, #0]
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f000 fd6b 	bl	800ca58 <_malloc_r>
 800bf82:	b948      	cbnz	r0, 800bf98 <__smakebuf_r+0x44>
 800bf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf88:	059a      	lsls	r2, r3, #22
 800bf8a:	d4ef      	bmi.n	800bf6c <__smakebuf_r+0x18>
 800bf8c:	f023 0303 	bic.w	r3, r3, #3
 800bf90:	f043 0302 	orr.w	r3, r3, #2
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	e7e3      	b.n	800bf60 <__smakebuf_r+0xc>
 800bf98:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <__smakebuf_r+0x7c>)
 800bf9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	6020      	str	r0, [r4, #0]
 800bfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	6163      	str	r3, [r4, #20]
 800bfaa:	9b01      	ldr	r3, [sp, #4]
 800bfac:	6120      	str	r0, [r4, #16]
 800bfae:	b15b      	cbz	r3, 800bfc8 <__smakebuf_r+0x74>
 800bfb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f001 f93d 	bl	800d234 <_isatty_r>
 800bfba:	b128      	cbz	r0, 800bfc8 <__smakebuf_r+0x74>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	f023 0303 	bic.w	r3, r3, #3
 800bfc2:	f043 0301 	orr.w	r3, r3, #1
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	89a0      	ldrh	r0, [r4, #12]
 800bfca:	4305      	orrs	r5, r0
 800bfcc:	81a5      	strh	r5, [r4, #12]
 800bfce:	e7cd      	b.n	800bf6c <__smakebuf_r+0x18>
 800bfd0:	0800b67d 	.word	0x0800b67d

0800bfd4 <malloc>:
 800bfd4:	4b02      	ldr	r3, [pc, #8]	; (800bfe0 <malloc+0xc>)
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	f000 bd3d 	b.w	800ca58 <_malloc_r>
 800bfde:	bf00      	nop
 800bfe0:	20000014 	.word	0x20000014

0800bfe4 <__ascii_mbtowc>:
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	b901      	cbnz	r1, 800bfea <__ascii_mbtowc+0x6>
 800bfe8:	a901      	add	r1, sp, #4
 800bfea:	b142      	cbz	r2, 800bffe <__ascii_mbtowc+0x1a>
 800bfec:	b14b      	cbz	r3, 800c002 <__ascii_mbtowc+0x1e>
 800bfee:	7813      	ldrb	r3, [r2, #0]
 800bff0:	600b      	str	r3, [r1, #0]
 800bff2:	7812      	ldrb	r2, [r2, #0]
 800bff4:	1e10      	subs	r0, r2, #0
 800bff6:	bf18      	it	ne
 800bff8:	2001      	movne	r0, #1
 800bffa:	b002      	add	sp, #8
 800bffc:	4770      	bx	lr
 800bffe:	4610      	mov	r0, r2
 800c000:	e7fb      	b.n	800bffa <__ascii_mbtowc+0x16>
 800c002:	f06f 0001 	mvn.w	r0, #1
 800c006:	e7f8      	b.n	800bffa <__ascii_mbtowc+0x16>

0800c008 <memcpy>:
 800c008:	440a      	add	r2, r1
 800c00a:	4291      	cmp	r1, r2
 800c00c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c010:	d100      	bne.n	800c014 <memcpy+0xc>
 800c012:	4770      	bx	lr
 800c014:	b510      	push	{r4, lr}
 800c016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01e:	4291      	cmp	r1, r2
 800c020:	d1f9      	bne.n	800c016 <memcpy+0xe>
 800c022:	bd10      	pop	{r4, pc}

0800c024 <_Balloc>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	b976      	cbnz	r6, 800c04c <_Balloc+0x28>
 800c02e:	2010      	movs	r0, #16
 800c030:	f7ff ffd0 	bl	800bfd4 <malloc>
 800c034:	4602      	mov	r2, r0
 800c036:	6260      	str	r0, [r4, #36]	; 0x24
 800c038:	b920      	cbnz	r0, 800c044 <_Balloc+0x20>
 800c03a:	4b18      	ldr	r3, [pc, #96]	; (800c09c <_Balloc+0x78>)
 800c03c:	4818      	ldr	r0, [pc, #96]	; (800c0a0 <_Balloc+0x7c>)
 800c03e:	2166      	movs	r1, #102	; 0x66
 800c040:	f001 f8a6 	bl	800d190 <__assert_func>
 800c044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c048:	6006      	str	r6, [r0, #0]
 800c04a:	60c6      	str	r6, [r0, #12]
 800c04c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c04e:	68f3      	ldr	r3, [r6, #12]
 800c050:	b183      	cbz	r3, 800c074 <_Balloc+0x50>
 800c052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c05a:	b9b8      	cbnz	r0, 800c08c <_Balloc+0x68>
 800c05c:	2101      	movs	r1, #1
 800c05e:	fa01 f605 	lsl.w	r6, r1, r5
 800c062:	1d72      	adds	r2, r6, #5
 800c064:	0092      	lsls	r2, r2, #2
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fc97 	bl	800c99a <_calloc_r>
 800c06c:	b160      	cbz	r0, 800c088 <_Balloc+0x64>
 800c06e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c072:	e00e      	b.n	800c092 <_Balloc+0x6e>
 800c074:	2221      	movs	r2, #33	; 0x21
 800c076:	2104      	movs	r1, #4
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 fc8e 	bl	800c99a <_calloc_r>
 800c07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c080:	60f0      	str	r0, [r6, #12]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e4      	bne.n	800c052 <_Balloc+0x2e>
 800c088:	2000      	movs	r0, #0
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	6802      	ldr	r2, [r0, #0]
 800c08e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c092:	2300      	movs	r3, #0
 800c094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c098:	e7f7      	b.n	800c08a <_Balloc+0x66>
 800c09a:	bf00      	nop
 800c09c:	0800da16 	.word	0x0800da16
 800c0a0:	0800db80 	.word	0x0800db80

0800c0a4 <_Bfree>:
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	b976      	cbnz	r6, 800c0cc <_Bfree+0x28>
 800c0ae:	2010      	movs	r0, #16
 800c0b0:	f7ff ff90 	bl	800bfd4 <malloc>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6268      	str	r0, [r5, #36]	; 0x24
 800c0b8:	b920      	cbnz	r0, 800c0c4 <_Bfree+0x20>
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <_Bfree+0x3c>)
 800c0bc:	4809      	ldr	r0, [pc, #36]	; (800c0e4 <_Bfree+0x40>)
 800c0be:	218a      	movs	r1, #138	; 0x8a
 800c0c0:	f001 f866 	bl	800d190 <__assert_func>
 800c0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0c8:	6006      	str	r6, [r0, #0]
 800c0ca:	60c6      	str	r6, [r0, #12]
 800c0cc:	b13c      	cbz	r4, 800c0de <_Bfree+0x3a>
 800c0ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c0d0:	6862      	ldr	r2, [r4, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0d8:	6021      	str	r1, [r4, #0]
 800c0da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	0800da16 	.word	0x0800da16
 800c0e4:	0800db80 	.word	0x0800db80

0800c0e8 <__multadd>:
 800c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ec:	690e      	ldr	r6, [r1, #16]
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	4698      	mov	r8, r3
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	f101 0014 	add.w	r0, r1, #20
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	6805      	ldr	r5, [r0, #0]
 800c0fc:	b2a9      	uxth	r1, r5
 800c0fe:	fb02 8101 	mla	r1, r2, r1, r8
 800c102:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c106:	0c2d      	lsrs	r5, r5, #16
 800c108:	fb02 c505 	mla	r5, r2, r5, ip
 800c10c:	b289      	uxth	r1, r1
 800c10e:	3301      	adds	r3, #1
 800c110:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c114:	429e      	cmp	r6, r3
 800c116:	f840 1b04 	str.w	r1, [r0], #4
 800c11a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c11e:	dcec      	bgt.n	800c0fa <__multadd+0x12>
 800c120:	f1b8 0f00 	cmp.w	r8, #0
 800c124:	d022      	beq.n	800c16c <__multadd+0x84>
 800c126:	68a3      	ldr	r3, [r4, #8]
 800c128:	42b3      	cmp	r3, r6
 800c12a:	dc19      	bgt.n	800c160 <__multadd+0x78>
 800c12c:	6861      	ldr	r1, [r4, #4]
 800c12e:	4638      	mov	r0, r7
 800c130:	3101      	adds	r1, #1
 800c132:	f7ff ff77 	bl	800c024 <_Balloc>
 800c136:	4605      	mov	r5, r0
 800c138:	b928      	cbnz	r0, 800c146 <__multadd+0x5e>
 800c13a:	4602      	mov	r2, r0
 800c13c:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <__multadd+0x8c>)
 800c13e:	480e      	ldr	r0, [pc, #56]	; (800c178 <__multadd+0x90>)
 800c140:	21b5      	movs	r1, #181	; 0xb5
 800c142:	f001 f825 	bl	800d190 <__assert_func>
 800c146:	6922      	ldr	r2, [r4, #16]
 800c148:	3202      	adds	r2, #2
 800c14a:	f104 010c 	add.w	r1, r4, #12
 800c14e:	0092      	lsls	r2, r2, #2
 800c150:	300c      	adds	r0, #12
 800c152:	f7ff ff59 	bl	800c008 <memcpy>
 800c156:	4621      	mov	r1, r4
 800c158:	4638      	mov	r0, r7
 800c15a:	f7ff ffa3 	bl	800c0a4 <_Bfree>
 800c15e:	462c      	mov	r4, r5
 800c160:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c164:	3601      	adds	r6, #1
 800c166:	f8c3 8014 	str.w	r8, [r3, #20]
 800c16a:	6126      	str	r6, [r4, #16]
 800c16c:	4620      	mov	r0, r4
 800c16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c172:	bf00      	nop
 800c174:	0800da8c 	.word	0x0800da8c
 800c178:	0800db80 	.word	0x0800db80

0800c17c <__s2b>:
 800c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c180:	460c      	mov	r4, r1
 800c182:	4615      	mov	r5, r2
 800c184:	461f      	mov	r7, r3
 800c186:	2209      	movs	r2, #9
 800c188:	3308      	adds	r3, #8
 800c18a:	4606      	mov	r6, r0
 800c18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c190:	2100      	movs	r1, #0
 800c192:	2201      	movs	r2, #1
 800c194:	429a      	cmp	r2, r3
 800c196:	db09      	blt.n	800c1ac <__s2b+0x30>
 800c198:	4630      	mov	r0, r6
 800c19a:	f7ff ff43 	bl	800c024 <_Balloc>
 800c19e:	b940      	cbnz	r0, 800c1b2 <__s2b+0x36>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	4b19      	ldr	r3, [pc, #100]	; (800c208 <__s2b+0x8c>)
 800c1a4:	4819      	ldr	r0, [pc, #100]	; (800c20c <__s2b+0x90>)
 800c1a6:	21ce      	movs	r1, #206	; 0xce
 800c1a8:	f000 fff2 	bl	800d190 <__assert_func>
 800c1ac:	0052      	lsls	r2, r2, #1
 800c1ae:	3101      	adds	r1, #1
 800c1b0:	e7f0      	b.n	800c194 <__s2b+0x18>
 800c1b2:	9b08      	ldr	r3, [sp, #32]
 800c1b4:	6143      	str	r3, [r0, #20]
 800c1b6:	2d09      	cmp	r5, #9
 800c1b8:	f04f 0301 	mov.w	r3, #1
 800c1bc:	6103      	str	r3, [r0, #16]
 800c1be:	dd16      	ble.n	800c1ee <__s2b+0x72>
 800c1c0:	f104 0909 	add.w	r9, r4, #9
 800c1c4:	46c8      	mov	r8, r9
 800c1c6:	442c      	add	r4, r5
 800c1c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	3b30      	subs	r3, #48	; 0x30
 800c1d0:	220a      	movs	r2, #10
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff ff88 	bl	800c0e8 <__multadd>
 800c1d8:	45a0      	cmp	r8, r4
 800c1da:	d1f5      	bne.n	800c1c8 <__s2b+0x4c>
 800c1dc:	f1a5 0408 	sub.w	r4, r5, #8
 800c1e0:	444c      	add	r4, r9
 800c1e2:	1b2d      	subs	r5, r5, r4
 800c1e4:	1963      	adds	r3, r4, r5
 800c1e6:	42bb      	cmp	r3, r7
 800c1e8:	db04      	blt.n	800c1f4 <__s2b+0x78>
 800c1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	340a      	adds	r4, #10
 800c1f0:	2509      	movs	r5, #9
 800c1f2:	e7f6      	b.n	800c1e2 <__s2b+0x66>
 800c1f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	3b30      	subs	r3, #48	; 0x30
 800c1fc:	220a      	movs	r2, #10
 800c1fe:	4630      	mov	r0, r6
 800c200:	f7ff ff72 	bl	800c0e8 <__multadd>
 800c204:	e7ee      	b.n	800c1e4 <__s2b+0x68>
 800c206:	bf00      	nop
 800c208:	0800da8c 	.word	0x0800da8c
 800c20c:	0800db80 	.word	0x0800db80

0800c210 <__hi0bits>:
 800c210:	0c03      	lsrs	r3, r0, #16
 800c212:	041b      	lsls	r3, r3, #16
 800c214:	b9d3      	cbnz	r3, 800c24c <__hi0bits+0x3c>
 800c216:	0400      	lsls	r0, r0, #16
 800c218:	2310      	movs	r3, #16
 800c21a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c21e:	bf04      	itt	eq
 800c220:	0200      	lsleq	r0, r0, #8
 800c222:	3308      	addeq	r3, #8
 800c224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c228:	bf04      	itt	eq
 800c22a:	0100      	lsleq	r0, r0, #4
 800c22c:	3304      	addeq	r3, #4
 800c22e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c232:	bf04      	itt	eq
 800c234:	0080      	lsleq	r0, r0, #2
 800c236:	3302      	addeq	r3, #2
 800c238:	2800      	cmp	r0, #0
 800c23a:	db05      	blt.n	800c248 <__hi0bits+0x38>
 800c23c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c240:	f103 0301 	add.w	r3, r3, #1
 800c244:	bf08      	it	eq
 800c246:	2320      	moveq	r3, #32
 800c248:	4618      	mov	r0, r3
 800c24a:	4770      	bx	lr
 800c24c:	2300      	movs	r3, #0
 800c24e:	e7e4      	b.n	800c21a <__hi0bits+0xa>

0800c250 <__lo0bits>:
 800c250:	6803      	ldr	r3, [r0, #0]
 800c252:	f013 0207 	ands.w	r2, r3, #7
 800c256:	4601      	mov	r1, r0
 800c258:	d00b      	beq.n	800c272 <__lo0bits+0x22>
 800c25a:	07da      	lsls	r2, r3, #31
 800c25c:	d424      	bmi.n	800c2a8 <__lo0bits+0x58>
 800c25e:	0798      	lsls	r0, r3, #30
 800c260:	bf49      	itett	mi
 800c262:	085b      	lsrmi	r3, r3, #1
 800c264:	089b      	lsrpl	r3, r3, #2
 800c266:	2001      	movmi	r0, #1
 800c268:	600b      	strmi	r3, [r1, #0]
 800c26a:	bf5c      	itt	pl
 800c26c:	600b      	strpl	r3, [r1, #0]
 800c26e:	2002      	movpl	r0, #2
 800c270:	4770      	bx	lr
 800c272:	b298      	uxth	r0, r3
 800c274:	b9b0      	cbnz	r0, 800c2a4 <__lo0bits+0x54>
 800c276:	0c1b      	lsrs	r3, r3, #16
 800c278:	2010      	movs	r0, #16
 800c27a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c27e:	bf04      	itt	eq
 800c280:	0a1b      	lsreq	r3, r3, #8
 800c282:	3008      	addeq	r0, #8
 800c284:	071a      	lsls	r2, r3, #28
 800c286:	bf04      	itt	eq
 800c288:	091b      	lsreq	r3, r3, #4
 800c28a:	3004      	addeq	r0, #4
 800c28c:	079a      	lsls	r2, r3, #30
 800c28e:	bf04      	itt	eq
 800c290:	089b      	lsreq	r3, r3, #2
 800c292:	3002      	addeq	r0, #2
 800c294:	07da      	lsls	r2, r3, #31
 800c296:	d403      	bmi.n	800c2a0 <__lo0bits+0x50>
 800c298:	085b      	lsrs	r3, r3, #1
 800c29a:	f100 0001 	add.w	r0, r0, #1
 800c29e:	d005      	beq.n	800c2ac <__lo0bits+0x5c>
 800c2a0:	600b      	str	r3, [r1, #0]
 800c2a2:	4770      	bx	lr
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	e7e8      	b.n	800c27a <__lo0bits+0x2a>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	4770      	bx	lr
 800c2ac:	2020      	movs	r0, #32
 800c2ae:	4770      	bx	lr

0800c2b0 <__i2b>:
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	f7ff feb5 	bl	800c024 <_Balloc>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	b928      	cbnz	r0, 800c2ca <__i2b+0x1a>
 800c2be:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <__i2b+0x24>)
 800c2c0:	4805      	ldr	r0, [pc, #20]	; (800c2d8 <__i2b+0x28>)
 800c2c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c2c6:	f000 ff63 	bl	800d190 <__assert_func>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	6144      	str	r4, [r0, #20]
 800c2ce:	6103      	str	r3, [r0, #16]
 800c2d0:	bd10      	pop	{r4, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800da8c 	.word	0x0800da8c
 800c2d8:	0800db80 	.word	0x0800db80

0800c2dc <__multiply>:
 800c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	690a      	ldr	r2, [r1, #16]
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	bfb8      	it	lt
 800c2ea:	460b      	movlt	r3, r1
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	bfbc      	itt	lt
 800c2f0:	4625      	movlt	r5, r4
 800c2f2:	461c      	movlt	r4, r3
 800c2f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c2f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c2fc:	68ab      	ldr	r3, [r5, #8]
 800c2fe:	6869      	ldr	r1, [r5, #4]
 800c300:	eb0a 0709 	add.w	r7, sl, r9
 800c304:	42bb      	cmp	r3, r7
 800c306:	b085      	sub	sp, #20
 800c308:	bfb8      	it	lt
 800c30a:	3101      	addlt	r1, #1
 800c30c:	f7ff fe8a 	bl	800c024 <_Balloc>
 800c310:	b930      	cbnz	r0, 800c320 <__multiply+0x44>
 800c312:	4602      	mov	r2, r0
 800c314:	4b42      	ldr	r3, [pc, #264]	; (800c420 <__multiply+0x144>)
 800c316:	4843      	ldr	r0, [pc, #268]	; (800c424 <__multiply+0x148>)
 800c318:	f240 115d 	movw	r1, #349	; 0x15d
 800c31c:	f000 ff38 	bl	800d190 <__assert_func>
 800c320:	f100 0614 	add.w	r6, r0, #20
 800c324:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c328:	4633      	mov	r3, r6
 800c32a:	2200      	movs	r2, #0
 800c32c:	4543      	cmp	r3, r8
 800c32e:	d31e      	bcc.n	800c36e <__multiply+0x92>
 800c330:	f105 0c14 	add.w	ip, r5, #20
 800c334:	f104 0314 	add.w	r3, r4, #20
 800c338:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c33c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c340:	9202      	str	r2, [sp, #8]
 800c342:	ebac 0205 	sub.w	r2, ip, r5
 800c346:	3a15      	subs	r2, #21
 800c348:	f022 0203 	bic.w	r2, r2, #3
 800c34c:	3204      	adds	r2, #4
 800c34e:	f105 0115 	add.w	r1, r5, #21
 800c352:	458c      	cmp	ip, r1
 800c354:	bf38      	it	cc
 800c356:	2204      	movcc	r2, #4
 800c358:	9201      	str	r2, [sp, #4]
 800c35a:	9a02      	ldr	r2, [sp, #8]
 800c35c:	9303      	str	r3, [sp, #12]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d808      	bhi.n	800c374 <__multiply+0x98>
 800c362:	2f00      	cmp	r7, #0
 800c364:	dc55      	bgt.n	800c412 <__multiply+0x136>
 800c366:	6107      	str	r7, [r0, #16]
 800c368:	b005      	add	sp, #20
 800c36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36e:	f843 2b04 	str.w	r2, [r3], #4
 800c372:	e7db      	b.n	800c32c <__multiply+0x50>
 800c374:	f8b3 a000 	ldrh.w	sl, [r3]
 800c378:	f1ba 0f00 	cmp.w	sl, #0
 800c37c:	d020      	beq.n	800c3c0 <__multiply+0xe4>
 800c37e:	f105 0e14 	add.w	lr, r5, #20
 800c382:	46b1      	mov	r9, r6
 800c384:	2200      	movs	r2, #0
 800c386:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c38a:	f8d9 b000 	ldr.w	fp, [r9]
 800c38e:	b2a1      	uxth	r1, r4
 800c390:	fa1f fb8b 	uxth.w	fp, fp
 800c394:	fb0a b101 	mla	r1, sl, r1, fp
 800c398:	4411      	add	r1, r2
 800c39a:	f8d9 2000 	ldr.w	r2, [r9]
 800c39e:	0c24      	lsrs	r4, r4, #16
 800c3a0:	0c12      	lsrs	r2, r2, #16
 800c3a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800c3a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c3aa:	b289      	uxth	r1, r1
 800c3ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c3b0:	45f4      	cmp	ip, lr
 800c3b2:	f849 1b04 	str.w	r1, [r9], #4
 800c3b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c3ba:	d8e4      	bhi.n	800c386 <__multiply+0xaa>
 800c3bc:	9901      	ldr	r1, [sp, #4]
 800c3be:	5072      	str	r2, [r6, r1]
 800c3c0:	9a03      	ldr	r2, [sp, #12]
 800c3c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	f1b9 0f00 	cmp.w	r9, #0
 800c3cc:	d01f      	beq.n	800c40e <__multiply+0x132>
 800c3ce:	6834      	ldr	r4, [r6, #0]
 800c3d0:	f105 0114 	add.w	r1, r5, #20
 800c3d4:	46b6      	mov	lr, r6
 800c3d6:	f04f 0a00 	mov.w	sl, #0
 800c3da:	880a      	ldrh	r2, [r1, #0]
 800c3dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c3e0:	fb09 b202 	mla	r2, r9, r2, fp
 800c3e4:	4492      	add	sl, r2
 800c3e6:	b2a4      	uxth	r4, r4
 800c3e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c3ec:	f84e 4b04 	str.w	r4, [lr], #4
 800c3f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800c3f4:	f8be 2000 	ldrh.w	r2, [lr]
 800c3f8:	0c24      	lsrs	r4, r4, #16
 800c3fa:	fb09 2404 	mla	r4, r9, r4, r2
 800c3fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c402:	458c      	cmp	ip, r1
 800c404:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c408:	d8e7      	bhi.n	800c3da <__multiply+0xfe>
 800c40a:	9a01      	ldr	r2, [sp, #4]
 800c40c:	50b4      	str	r4, [r6, r2]
 800c40e:	3604      	adds	r6, #4
 800c410:	e7a3      	b.n	800c35a <__multiply+0x7e>
 800c412:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1a5      	bne.n	800c366 <__multiply+0x8a>
 800c41a:	3f01      	subs	r7, #1
 800c41c:	e7a1      	b.n	800c362 <__multiply+0x86>
 800c41e:	bf00      	nop
 800c420:	0800da8c 	.word	0x0800da8c
 800c424:	0800db80 	.word	0x0800db80

0800c428 <__pow5mult>:
 800c428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c42c:	4615      	mov	r5, r2
 800c42e:	f012 0203 	ands.w	r2, r2, #3
 800c432:	4606      	mov	r6, r0
 800c434:	460f      	mov	r7, r1
 800c436:	d007      	beq.n	800c448 <__pow5mult+0x20>
 800c438:	4c25      	ldr	r4, [pc, #148]	; (800c4d0 <__pow5mult+0xa8>)
 800c43a:	3a01      	subs	r2, #1
 800c43c:	2300      	movs	r3, #0
 800c43e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c442:	f7ff fe51 	bl	800c0e8 <__multadd>
 800c446:	4607      	mov	r7, r0
 800c448:	10ad      	asrs	r5, r5, #2
 800c44a:	d03d      	beq.n	800c4c8 <__pow5mult+0xa0>
 800c44c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c44e:	b97c      	cbnz	r4, 800c470 <__pow5mult+0x48>
 800c450:	2010      	movs	r0, #16
 800c452:	f7ff fdbf 	bl	800bfd4 <malloc>
 800c456:	4602      	mov	r2, r0
 800c458:	6270      	str	r0, [r6, #36]	; 0x24
 800c45a:	b928      	cbnz	r0, 800c468 <__pow5mult+0x40>
 800c45c:	4b1d      	ldr	r3, [pc, #116]	; (800c4d4 <__pow5mult+0xac>)
 800c45e:	481e      	ldr	r0, [pc, #120]	; (800c4d8 <__pow5mult+0xb0>)
 800c460:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c464:	f000 fe94 	bl	800d190 <__assert_func>
 800c468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c46c:	6004      	str	r4, [r0, #0]
 800c46e:	60c4      	str	r4, [r0, #12]
 800c470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c478:	b94c      	cbnz	r4, 800c48e <__pow5mult+0x66>
 800c47a:	f240 2171 	movw	r1, #625	; 0x271
 800c47e:	4630      	mov	r0, r6
 800c480:	f7ff ff16 	bl	800c2b0 <__i2b>
 800c484:	2300      	movs	r3, #0
 800c486:	f8c8 0008 	str.w	r0, [r8, #8]
 800c48a:	4604      	mov	r4, r0
 800c48c:	6003      	str	r3, [r0, #0]
 800c48e:	f04f 0900 	mov.w	r9, #0
 800c492:	07eb      	lsls	r3, r5, #31
 800c494:	d50a      	bpl.n	800c4ac <__pow5mult+0x84>
 800c496:	4639      	mov	r1, r7
 800c498:	4622      	mov	r2, r4
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ff1e 	bl	800c2dc <__multiply>
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	4680      	mov	r8, r0
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff fdfd 	bl	800c0a4 <_Bfree>
 800c4aa:	4647      	mov	r7, r8
 800c4ac:	106d      	asrs	r5, r5, #1
 800c4ae:	d00b      	beq.n	800c4c8 <__pow5mult+0xa0>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	b938      	cbnz	r0, 800c4c4 <__pow5mult+0x9c>
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f7ff ff0f 	bl	800c2dc <__multiply>
 800c4be:	6020      	str	r0, [r4, #0]
 800c4c0:	f8c0 9000 	str.w	r9, [r0]
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	e7e4      	b.n	800c492 <__pow5mult+0x6a>
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0800dcd0 	.word	0x0800dcd0
 800c4d4:	0800da16 	.word	0x0800da16
 800c4d8:	0800db80 	.word	0x0800db80

0800c4dc <__lshift>:
 800c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	460c      	mov	r4, r1
 800c4e2:	6849      	ldr	r1, [r1, #4]
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4ea:	68a3      	ldr	r3, [r4, #8]
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	4691      	mov	r9, r2
 800c4f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4f4:	f108 0601 	add.w	r6, r8, #1
 800c4f8:	42b3      	cmp	r3, r6
 800c4fa:	db0b      	blt.n	800c514 <__lshift+0x38>
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	f7ff fd91 	bl	800c024 <_Balloc>
 800c502:	4605      	mov	r5, r0
 800c504:	b948      	cbnz	r0, 800c51a <__lshift+0x3e>
 800c506:	4602      	mov	r2, r0
 800c508:	4b28      	ldr	r3, [pc, #160]	; (800c5ac <__lshift+0xd0>)
 800c50a:	4829      	ldr	r0, [pc, #164]	; (800c5b0 <__lshift+0xd4>)
 800c50c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c510:	f000 fe3e 	bl	800d190 <__assert_func>
 800c514:	3101      	adds	r1, #1
 800c516:	005b      	lsls	r3, r3, #1
 800c518:	e7ee      	b.n	800c4f8 <__lshift+0x1c>
 800c51a:	2300      	movs	r3, #0
 800c51c:	f100 0114 	add.w	r1, r0, #20
 800c520:	f100 0210 	add.w	r2, r0, #16
 800c524:	4618      	mov	r0, r3
 800c526:	4553      	cmp	r3, sl
 800c528:	db33      	blt.n	800c592 <__lshift+0xb6>
 800c52a:	6920      	ldr	r0, [r4, #16]
 800c52c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c530:	f104 0314 	add.w	r3, r4, #20
 800c534:	f019 091f 	ands.w	r9, r9, #31
 800c538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c53c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c540:	d02b      	beq.n	800c59a <__lshift+0xbe>
 800c542:	f1c9 0e20 	rsb	lr, r9, #32
 800c546:	468a      	mov	sl, r1
 800c548:	2200      	movs	r2, #0
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	fa00 f009 	lsl.w	r0, r0, r9
 800c550:	4302      	orrs	r2, r0
 800c552:	f84a 2b04 	str.w	r2, [sl], #4
 800c556:	f853 2b04 	ldr.w	r2, [r3], #4
 800c55a:	459c      	cmp	ip, r3
 800c55c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c560:	d8f3      	bhi.n	800c54a <__lshift+0x6e>
 800c562:	ebac 0304 	sub.w	r3, ip, r4
 800c566:	3b15      	subs	r3, #21
 800c568:	f023 0303 	bic.w	r3, r3, #3
 800c56c:	3304      	adds	r3, #4
 800c56e:	f104 0015 	add.w	r0, r4, #21
 800c572:	4584      	cmp	ip, r0
 800c574:	bf38      	it	cc
 800c576:	2304      	movcc	r3, #4
 800c578:	50ca      	str	r2, [r1, r3]
 800c57a:	b10a      	cbz	r2, 800c580 <__lshift+0xa4>
 800c57c:	f108 0602 	add.w	r6, r8, #2
 800c580:	3e01      	subs	r6, #1
 800c582:	4638      	mov	r0, r7
 800c584:	612e      	str	r6, [r5, #16]
 800c586:	4621      	mov	r1, r4
 800c588:	f7ff fd8c 	bl	800c0a4 <_Bfree>
 800c58c:	4628      	mov	r0, r5
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	f842 0f04 	str.w	r0, [r2, #4]!
 800c596:	3301      	adds	r3, #1
 800c598:	e7c5      	b.n	800c526 <__lshift+0x4a>
 800c59a:	3904      	subs	r1, #4
 800c59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5a4:	459c      	cmp	ip, r3
 800c5a6:	d8f9      	bhi.n	800c59c <__lshift+0xc0>
 800c5a8:	e7ea      	b.n	800c580 <__lshift+0xa4>
 800c5aa:	bf00      	nop
 800c5ac:	0800da8c 	.word	0x0800da8c
 800c5b0:	0800db80 	.word	0x0800db80

0800c5b4 <__mcmp>:
 800c5b4:	b530      	push	{r4, r5, lr}
 800c5b6:	6902      	ldr	r2, [r0, #16]
 800c5b8:	690c      	ldr	r4, [r1, #16]
 800c5ba:	1b12      	subs	r2, r2, r4
 800c5bc:	d10e      	bne.n	800c5dc <__mcmp+0x28>
 800c5be:	f100 0314 	add.w	r3, r0, #20
 800c5c2:	3114      	adds	r1, #20
 800c5c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c5c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c5cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c5d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c5d4:	42a5      	cmp	r5, r4
 800c5d6:	d003      	beq.n	800c5e0 <__mcmp+0x2c>
 800c5d8:	d305      	bcc.n	800c5e6 <__mcmp+0x32>
 800c5da:	2201      	movs	r2, #1
 800c5dc:	4610      	mov	r0, r2
 800c5de:	bd30      	pop	{r4, r5, pc}
 800c5e0:	4283      	cmp	r3, r0
 800c5e2:	d3f3      	bcc.n	800c5cc <__mcmp+0x18>
 800c5e4:	e7fa      	b.n	800c5dc <__mcmp+0x28>
 800c5e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5ea:	e7f7      	b.n	800c5dc <__mcmp+0x28>

0800c5ec <__mdiff>:
 800c5ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f0:	460c      	mov	r4, r1
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4617      	mov	r7, r2
 800c5fa:	f7ff ffdb 	bl	800c5b4 <__mcmp>
 800c5fe:	1e05      	subs	r5, r0, #0
 800c600:	d110      	bne.n	800c624 <__mdiff+0x38>
 800c602:	4629      	mov	r1, r5
 800c604:	4630      	mov	r0, r6
 800c606:	f7ff fd0d 	bl	800c024 <_Balloc>
 800c60a:	b930      	cbnz	r0, 800c61a <__mdiff+0x2e>
 800c60c:	4b39      	ldr	r3, [pc, #228]	; (800c6f4 <__mdiff+0x108>)
 800c60e:	4602      	mov	r2, r0
 800c610:	f240 2132 	movw	r1, #562	; 0x232
 800c614:	4838      	ldr	r0, [pc, #224]	; (800c6f8 <__mdiff+0x10c>)
 800c616:	f000 fdbb 	bl	800d190 <__assert_func>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	bfa4      	itt	ge
 800c626:	463b      	movge	r3, r7
 800c628:	4627      	movge	r7, r4
 800c62a:	4630      	mov	r0, r6
 800c62c:	6879      	ldr	r1, [r7, #4]
 800c62e:	bfa6      	itte	ge
 800c630:	461c      	movge	r4, r3
 800c632:	2500      	movge	r5, #0
 800c634:	2501      	movlt	r5, #1
 800c636:	f7ff fcf5 	bl	800c024 <_Balloc>
 800c63a:	b920      	cbnz	r0, 800c646 <__mdiff+0x5a>
 800c63c:	4b2d      	ldr	r3, [pc, #180]	; (800c6f4 <__mdiff+0x108>)
 800c63e:	4602      	mov	r2, r0
 800c640:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c644:	e7e6      	b.n	800c614 <__mdiff+0x28>
 800c646:	693e      	ldr	r6, [r7, #16]
 800c648:	60c5      	str	r5, [r0, #12]
 800c64a:	6925      	ldr	r5, [r4, #16]
 800c64c:	f107 0114 	add.w	r1, r7, #20
 800c650:	f104 0914 	add.w	r9, r4, #20
 800c654:	f100 0e14 	add.w	lr, r0, #20
 800c658:	f107 0210 	add.w	r2, r7, #16
 800c65c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c660:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c664:	46f2      	mov	sl, lr
 800c666:	2700      	movs	r7, #0
 800c668:	f859 3b04 	ldr.w	r3, [r9], #4
 800c66c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c670:	fa1f f883 	uxth.w	r8, r3
 800c674:	fa17 f78b 	uxtah	r7, r7, fp
 800c678:	0c1b      	lsrs	r3, r3, #16
 800c67a:	eba7 0808 	sub.w	r8, r7, r8
 800c67e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c682:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c686:	fa1f f888 	uxth.w	r8, r8
 800c68a:	141f      	asrs	r7, r3, #16
 800c68c:	454d      	cmp	r5, r9
 800c68e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c692:	f84a 3b04 	str.w	r3, [sl], #4
 800c696:	d8e7      	bhi.n	800c668 <__mdiff+0x7c>
 800c698:	1b2b      	subs	r3, r5, r4
 800c69a:	3b15      	subs	r3, #21
 800c69c:	f023 0303 	bic.w	r3, r3, #3
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	3415      	adds	r4, #21
 800c6a4:	42a5      	cmp	r5, r4
 800c6a6:	bf38      	it	cc
 800c6a8:	2304      	movcc	r3, #4
 800c6aa:	4419      	add	r1, r3
 800c6ac:	4473      	add	r3, lr
 800c6ae:	469e      	mov	lr, r3
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	4565      	cmp	r5, ip
 800c6b4:	d30e      	bcc.n	800c6d4 <__mdiff+0xe8>
 800c6b6:	f10c 0203 	add.w	r2, ip, #3
 800c6ba:	1a52      	subs	r2, r2, r1
 800c6bc:	f022 0203 	bic.w	r2, r2, #3
 800c6c0:	3903      	subs	r1, #3
 800c6c2:	458c      	cmp	ip, r1
 800c6c4:	bf38      	it	cc
 800c6c6:	2200      	movcc	r2, #0
 800c6c8:	441a      	add	r2, r3
 800c6ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c6ce:	b17b      	cbz	r3, 800c6f0 <__mdiff+0x104>
 800c6d0:	6106      	str	r6, [r0, #16]
 800c6d2:	e7a5      	b.n	800c620 <__mdiff+0x34>
 800c6d4:	f855 8b04 	ldr.w	r8, [r5], #4
 800c6d8:	fa17 f488 	uxtah	r4, r7, r8
 800c6dc:	1422      	asrs	r2, r4, #16
 800c6de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c6e2:	b2a4      	uxth	r4, r4
 800c6e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c6e8:	f84e 4b04 	str.w	r4, [lr], #4
 800c6ec:	1417      	asrs	r7, r2, #16
 800c6ee:	e7e0      	b.n	800c6b2 <__mdiff+0xc6>
 800c6f0:	3e01      	subs	r6, #1
 800c6f2:	e7ea      	b.n	800c6ca <__mdiff+0xde>
 800c6f4:	0800da8c 	.word	0x0800da8c
 800c6f8:	0800db80 	.word	0x0800db80

0800c6fc <__ulp>:
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	ed8d 0b00 	vstr	d0, [sp]
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	4912      	ldr	r1, [pc, #72]	; (800c750 <__ulp+0x54>)
 800c706:	4019      	ands	r1, r3
 800c708:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c70c:	2900      	cmp	r1, #0
 800c70e:	dd05      	ble.n	800c71c <__ulp+0x20>
 800c710:	2200      	movs	r2, #0
 800c712:	460b      	mov	r3, r1
 800c714:	ec43 2b10 	vmov	d0, r2, r3
 800c718:	b002      	add	sp, #8
 800c71a:	4770      	bx	lr
 800c71c:	4249      	negs	r1, r1
 800c71e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c722:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c726:	f04f 0200 	mov.w	r2, #0
 800c72a:	f04f 0300 	mov.w	r3, #0
 800c72e:	da04      	bge.n	800c73a <__ulp+0x3e>
 800c730:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c734:	fa41 f300 	asr.w	r3, r1, r0
 800c738:	e7ec      	b.n	800c714 <__ulp+0x18>
 800c73a:	f1a0 0114 	sub.w	r1, r0, #20
 800c73e:	291e      	cmp	r1, #30
 800c740:	bfda      	itte	le
 800c742:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c746:	fa20 f101 	lsrle.w	r1, r0, r1
 800c74a:	2101      	movgt	r1, #1
 800c74c:	460a      	mov	r2, r1
 800c74e:	e7e1      	b.n	800c714 <__ulp+0x18>
 800c750:	7ff00000 	.word	0x7ff00000

0800c754 <__b2d>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	6905      	ldr	r5, [r0, #16]
 800c758:	f100 0714 	add.w	r7, r0, #20
 800c75c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c760:	1f2e      	subs	r6, r5, #4
 800c762:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c766:	4620      	mov	r0, r4
 800c768:	f7ff fd52 	bl	800c210 <__hi0bits>
 800c76c:	f1c0 0320 	rsb	r3, r0, #32
 800c770:	280a      	cmp	r0, #10
 800c772:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c7f0 <__b2d+0x9c>
 800c776:	600b      	str	r3, [r1, #0]
 800c778:	dc14      	bgt.n	800c7a4 <__b2d+0x50>
 800c77a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c77e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c782:	42b7      	cmp	r7, r6
 800c784:	ea41 030c 	orr.w	r3, r1, ip
 800c788:	bf34      	ite	cc
 800c78a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c78e:	2100      	movcs	r1, #0
 800c790:	3015      	adds	r0, #21
 800c792:	fa04 f000 	lsl.w	r0, r4, r0
 800c796:	fa21 f10e 	lsr.w	r1, r1, lr
 800c79a:	ea40 0201 	orr.w	r2, r0, r1
 800c79e:	ec43 2b10 	vmov	d0, r2, r3
 800c7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a4:	42b7      	cmp	r7, r6
 800c7a6:	bf3a      	itte	cc
 800c7a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800c7b0:	2100      	movcs	r1, #0
 800c7b2:	380b      	subs	r0, #11
 800c7b4:	d017      	beq.n	800c7e6 <__b2d+0x92>
 800c7b6:	f1c0 0c20 	rsb	ip, r0, #32
 800c7ba:	fa04 f500 	lsl.w	r5, r4, r0
 800c7be:	42be      	cmp	r6, r7
 800c7c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c7c4:	ea45 0504 	orr.w	r5, r5, r4
 800c7c8:	bf8c      	ite	hi
 800c7ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c7ce:	2400      	movls	r4, #0
 800c7d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c7d4:	fa01 f000 	lsl.w	r0, r1, r0
 800c7d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c7dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c7e0:	ea40 0204 	orr.w	r2, r0, r4
 800c7e4:	e7db      	b.n	800c79e <__b2d+0x4a>
 800c7e6:	ea44 030c 	orr.w	r3, r4, ip
 800c7ea:	460a      	mov	r2, r1
 800c7ec:	e7d7      	b.n	800c79e <__b2d+0x4a>
 800c7ee:	bf00      	nop
 800c7f0:	3ff00000 	.word	0x3ff00000

0800c7f4 <__d2b>:
 800c7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	4689      	mov	r9, r1
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	ec57 6b10 	vmov	r6, r7, d0
 800c800:	4690      	mov	r8, r2
 800c802:	f7ff fc0f 	bl	800c024 <_Balloc>
 800c806:	4604      	mov	r4, r0
 800c808:	b930      	cbnz	r0, 800c818 <__d2b+0x24>
 800c80a:	4602      	mov	r2, r0
 800c80c:	4b25      	ldr	r3, [pc, #148]	; (800c8a4 <__d2b+0xb0>)
 800c80e:	4826      	ldr	r0, [pc, #152]	; (800c8a8 <__d2b+0xb4>)
 800c810:	f240 310a 	movw	r1, #778	; 0x30a
 800c814:	f000 fcbc 	bl	800d190 <__assert_func>
 800c818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c820:	bb35      	cbnz	r5, 800c870 <__d2b+0x7c>
 800c822:	2e00      	cmp	r6, #0
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	d028      	beq.n	800c87a <__d2b+0x86>
 800c828:	4668      	mov	r0, sp
 800c82a:	9600      	str	r6, [sp, #0]
 800c82c:	f7ff fd10 	bl	800c250 <__lo0bits>
 800c830:	9900      	ldr	r1, [sp, #0]
 800c832:	b300      	cbz	r0, 800c876 <__d2b+0x82>
 800c834:	9a01      	ldr	r2, [sp, #4]
 800c836:	f1c0 0320 	rsb	r3, r0, #32
 800c83a:	fa02 f303 	lsl.w	r3, r2, r3
 800c83e:	430b      	orrs	r3, r1
 800c840:	40c2      	lsrs	r2, r0
 800c842:	6163      	str	r3, [r4, #20]
 800c844:	9201      	str	r2, [sp, #4]
 800c846:	9b01      	ldr	r3, [sp, #4]
 800c848:	61a3      	str	r3, [r4, #24]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	bf14      	ite	ne
 800c84e:	2202      	movne	r2, #2
 800c850:	2201      	moveq	r2, #1
 800c852:	6122      	str	r2, [r4, #16]
 800c854:	b1d5      	cbz	r5, 800c88c <__d2b+0x98>
 800c856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c85a:	4405      	add	r5, r0
 800c85c:	f8c9 5000 	str.w	r5, [r9]
 800c860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c864:	f8c8 0000 	str.w	r0, [r8]
 800c868:	4620      	mov	r0, r4
 800c86a:	b003      	add	sp, #12
 800c86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c874:	e7d5      	b.n	800c822 <__d2b+0x2e>
 800c876:	6161      	str	r1, [r4, #20]
 800c878:	e7e5      	b.n	800c846 <__d2b+0x52>
 800c87a:	a801      	add	r0, sp, #4
 800c87c:	f7ff fce8 	bl	800c250 <__lo0bits>
 800c880:	9b01      	ldr	r3, [sp, #4]
 800c882:	6163      	str	r3, [r4, #20]
 800c884:	2201      	movs	r2, #1
 800c886:	6122      	str	r2, [r4, #16]
 800c888:	3020      	adds	r0, #32
 800c88a:	e7e3      	b.n	800c854 <__d2b+0x60>
 800c88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c894:	f8c9 0000 	str.w	r0, [r9]
 800c898:	6918      	ldr	r0, [r3, #16]
 800c89a:	f7ff fcb9 	bl	800c210 <__hi0bits>
 800c89e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8a2:	e7df      	b.n	800c864 <__d2b+0x70>
 800c8a4:	0800da8c 	.word	0x0800da8c
 800c8a8:	0800db80 	.word	0x0800db80

0800c8ac <__ratio>:
 800c8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	4688      	mov	r8, r1
 800c8b2:	4669      	mov	r1, sp
 800c8b4:	4681      	mov	r9, r0
 800c8b6:	f7ff ff4d 	bl	800c754 <__b2d>
 800c8ba:	a901      	add	r1, sp, #4
 800c8bc:	4640      	mov	r0, r8
 800c8be:	ec55 4b10 	vmov	r4, r5, d0
 800c8c2:	f7ff ff47 	bl	800c754 <__b2d>
 800c8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c8ce:	eba3 0c02 	sub.w	ip, r3, r2
 800c8d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c8d6:	1a9b      	subs	r3, r3, r2
 800c8d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c8dc:	ec51 0b10 	vmov	r0, r1, d0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfd6      	itet	le
 800c8e4:	460a      	movle	r2, r1
 800c8e6:	462a      	movgt	r2, r5
 800c8e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c8ec:	468b      	mov	fp, r1
 800c8ee:	462f      	mov	r7, r5
 800c8f0:	bfd4      	ite	le
 800c8f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c8f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	ee10 2a10 	vmov	r2, s0
 800c900:	465b      	mov	r3, fp
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 ffc2 	bl	800088c <__aeabi_ddiv>
 800c908:	ec41 0b10 	vmov	d0, r0, r1
 800c90c:	b003      	add	sp, #12
 800c90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c912 <__copybits>:
 800c912:	3901      	subs	r1, #1
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	1149      	asrs	r1, r1, #5
 800c918:	6914      	ldr	r4, [r2, #16]
 800c91a:	3101      	adds	r1, #1
 800c91c:	f102 0314 	add.w	r3, r2, #20
 800c920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c928:	1f05      	subs	r5, r0, #4
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	d30c      	bcc.n	800c948 <__copybits+0x36>
 800c92e:	1aa3      	subs	r3, r4, r2
 800c930:	3b11      	subs	r3, #17
 800c932:	f023 0303 	bic.w	r3, r3, #3
 800c936:	3211      	adds	r2, #17
 800c938:	42a2      	cmp	r2, r4
 800c93a:	bf88      	it	hi
 800c93c:	2300      	movhi	r3, #0
 800c93e:	4418      	add	r0, r3
 800c940:	2300      	movs	r3, #0
 800c942:	4288      	cmp	r0, r1
 800c944:	d305      	bcc.n	800c952 <__copybits+0x40>
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	f853 6b04 	ldr.w	r6, [r3], #4
 800c94c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c950:	e7eb      	b.n	800c92a <__copybits+0x18>
 800c952:	f840 3b04 	str.w	r3, [r0], #4
 800c956:	e7f4      	b.n	800c942 <__copybits+0x30>

0800c958 <__any_on>:
 800c958:	f100 0214 	add.w	r2, r0, #20
 800c95c:	6900      	ldr	r0, [r0, #16]
 800c95e:	114b      	asrs	r3, r1, #5
 800c960:	4298      	cmp	r0, r3
 800c962:	b510      	push	{r4, lr}
 800c964:	db11      	blt.n	800c98a <__any_on+0x32>
 800c966:	dd0a      	ble.n	800c97e <__any_on+0x26>
 800c968:	f011 011f 	ands.w	r1, r1, #31
 800c96c:	d007      	beq.n	800c97e <__any_on+0x26>
 800c96e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c972:	fa24 f001 	lsr.w	r0, r4, r1
 800c976:	fa00 f101 	lsl.w	r1, r0, r1
 800c97a:	428c      	cmp	r4, r1
 800c97c:	d10b      	bne.n	800c996 <__any_on+0x3e>
 800c97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c982:	4293      	cmp	r3, r2
 800c984:	d803      	bhi.n	800c98e <__any_on+0x36>
 800c986:	2000      	movs	r0, #0
 800c988:	bd10      	pop	{r4, pc}
 800c98a:	4603      	mov	r3, r0
 800c98c:	e7f7      	b.n	800c97e <__any_on+0x26>
 800c98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c992:	2900      	cmp	r1, #0
 800c994:	d0f5      	beq.n	800c982 <__any_on+0x2a>
 800c996:	2001      	movs	r0, #1
 800c998:	e7f6      	b.n	800c988 <__any_on+0x30>

0800c99a <_calloc_r>:
 800c99a:	b513      	push	{r0, r1, r4, lr}
 800c99c:	434a      	muls	r2, r1
 800c99e:	4611      	mov	r1, r2
 800c9a0:	9201      	str	r2, [sp, #4]
 800c9a2:	f000 f859 	bl	800ca58 <_malloc_r>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	b118      	cbz	r0, 800c9b2 <_calloc_r+0x18>
 800c9aa:	9a01      	ldr	r2, [sp, #4]
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	f7fc f85b 	bl	8008a68 <memset>
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	b002      	add	sp, #8
 800c9b6:	bd10      	pop	{r4, pc}

0800c9b8 <_free_r>:
 800c9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	d048      	beq.n	800ca50 <_free_r+0x98>
 800c9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c2:	9001      	str	r0, [sp, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ca:	bfb8      	it	lt
 800c9cc:	18e4      	addlt	r4, r4, r3
 800c9ce:	f000 fc6d 	bl	800d2ac <__malloc_lock>
 800c9d2:	4a20      	ldr	r2, [pc, #128]	; (800ca54 <_free_r+0x9c>)
 800c9d4:	9801      	ldr	r0, [sp, #4]
 800c9d6:	6813      	ldr	r3, [r2, #0]
 800c9d8:	4615      	mov	r5, r2
 800c9da:	b933      	cbnz	r3, 800c9ea <_free_r+0x32>
 800c9dc:	6063      	str	r3, [r4, #4]
 800c9de:	6014      	str	r4, [r2, #0]
 800c9e0:	b003      	add	sp, #12
 800c9e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9e6:	f000 bc67 	b.w	800d2b8 <__malloc_unlock>
 800c9ea:	42a3      	cmp	r3, r4
 800c9ec:	d90b      	bls.n	800ca06 <_free_r+0x4e>
 800c9ee:	6821      	ldr	r1, [r4, #0]
 800c9f0:	1862      	adds	r2, r4, r1
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	bf04      	itt	eq
 800c9f6:	681a      	ldreq	r2, [r3, #0]
 800c9f8:	685b      	ldreq	r3, [r3, #4]
 800c9fa:	6063      	str	r3, [r4, #4]
 800c9fc:	bf04      	itt	eq
 800c9fe:	1852      	addeq	r2, r2, r1
 800ca00:	6022      	streq	r2, [r4, #0]
 800ca02:	602c      	str	r4, [r5, #0]
 800ca04:	e7ec      	b.n	800c9e0 <_free_r+0x28>
 800ca06:	461a      	mov	r2, r3
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	b10b      	cbz	r3, 800ca10 <_free_r+0x58>
 800ca0c:	42a3      	cmp	r3, r4
 800ca0e:	d9fa      	bls.n	800ca06 <_free_r+0x4e>
 800ca10:	6811      	ldr	r1, [r2, #0]
 800ca12:	1855      	adds	r5, r2, r1
 800ca14:	42a5      	cmp	r5, r4
 800ca16:	d10b      	bne.n	800ca30 <_free_r+0x78>
 800ca18:	6824      	ldr	r4, [r4, #0]
 800ca1a:	4421      	add	r1, r4
 800ca1c:	1854      	adds	r4, r2, r1
 800ca1e:	42a3      	cmp	r3, r4
 800ca20:	6011      	str	r1, [r2, #0]
 800ca22:	d1dd      	bne.n	800c9e0 <_free_r+0x28>
 800ca24:	681c      	ldr	r4, [r3, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	6053      	str	r3, [r2, #4]
 800ca2a:	4421      	add	r1, r4
 800ca2c:	6011      	str	r1, [r2, #0]
 800ca2e:	e7d7      	b.n	800c9e0 <_free_r+0x28>
 800ca30:	d902      	bls.n	800ca38 <_free_r+0x80>
 800ca32:	230c      	movs	r3, #12
 800ca34:	6003      	str	r3, [r0, #0]
 800ca36:	e7d3      	b.n	800c9e0 <_free_r+0x28>
 800ca38:	6825      	ldr	r5, [r4, #0]
 800ca3a:	1961      	adds	r1, r4, r5
 800ca3c:	428b      	cmp	r3, r1
 800ca3e:	bf04      	itt	eq
 800ca40:	6819      	ldreq	r1, [r3, #0]
 800ca42:	685b      	ldreq	r3, [r3, #4]
 800ca44:	6063      	str	r3, [r4, #4]
 800ca46:	bf04      	itt	eq
 800ca48:	1949      	addeq	r1, r1, r5
 800ca4a:	6021      	streq	r1, [r4, #0]
 800ca4c:	6054      	str	r4, [r2, #4]
 800ca4e:	e7c7      	b.n	800c9e0 <_free_r+0x28>
 800ca50:	b003      	add	sp, #12
 800ca52:	bd30      	pop	{r4, r5, pc}
 800ca54:	20000214 	.word	0x20000214

0800ca58 <_malloc_r>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	1ccd      	adds	r5, r1, #3
 800ca5c:	f025 0503 	bic.w	r5, r5, #3
 800ca60:	3508      	adds	r5, #8
 800ca62:	2d0c      	cmp	r5, #12
 800ca64:	bf38      	it	cc
 800ca66:	250c      	movcc	r5, #12
 800ca68:	2d00      	cmp	r5, #0
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	db01      	blt.n	800ca72 <_malloc_r+0x1a>
 800ca6e:	42a9      	cmp	r1, r5
 800ca70:	d903      	bls.n	800ca7a <_malloc_r+0x22>
 800ca72:	230c      	movs	r3, #12
 800ca74:	6033      	str	r3, [r6, #0]
 800ca76:	2000      	movs	r0, #0
 800ca78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7a:	f000 fc17 	bl	800d2ac <__malloc_lock>
 800ca7e:	4921      	ldr	r1, [pc, #132]	; (800cb04 <_malloc_r+0xac>)
 800ca80:	680a      	ldr	r2, [r1, #0]
 800ca82:	4614      	mov	r4, r2
 800ca84:	b99c      	cbnz	r4, 800caae <_malloc_r+0x56>
 800ca86:	4f20      	ldr	r7, [pc, #128]	; (800cb08 <_malloc_r+0xb0>)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	b923      	cbnz	r3, 800ca96 <_malloc_r+0x3e>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f000 fafa 	bl	800d088 <_sbrk_r>
 800ca94:	6038      	str	r0, [r7, #0]
 800ca96:	4629      	mov	r1, r5
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 faf5 	bl	800d088 <_sbrk_r>
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	d123      	bne.n	800caea <_malloc_r+0x92>
 800caa2:	230c      	movs	r3, #12
 800caa4:	6033      	str	r3, [r6, #0]
 800caa6:	4630      	mov	r0, r6
 800caa8:	f000 fc06 	bl	800d2b8 <__malloc_unlock>
 800caac:	e7e3      	b.n	800ca76 <_malloc_r+0x1e>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	1b5b      	subs	r3, r3, r5
 800cab2:	d417      	bmi.n	800cae4 <_malloc_r+0x8c>
 800cab4:	2b0b      	cmp	r3, #11
 800cab6:	d903      	bls.n	800cac0 <_malloc_r+0x68>
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	441c      	add	r4, r3
 800cabc:	6025      	str	r5, [r4, #0]
 800cabe:	e004      	b.n	800caca <_malloc_r+0x72>
 800cac0:	6863      	ldr	r3, [r4, #4]
 800cac2:	42a2      	cmp	r2, r4
 800cac4:	bf0c      	ite	eq
 800cac6:	600b      	streq	r3, [r1, #0]
 800cac8:	6053      	strne	r3, [r2, #4]
 800caca:	4630      	mov	r0, r6
 800cacc:	f000 fbf4 	bl	800d2b8 <__malloc_unlock>
 800cad0:	f104 000b 	add.w	r0, r4, #11
 800cad4:	1d23      	adds	r3, r4, #4
 800cad6:	f020 0007 	bic.w	r0, r0, #7
 800cada:	1ac2      	subs	r2, r0, r3
 800cadc:	d0cc      	beq.n	800ca78 <_malloc_r+0x20>
 800cade:	1a1b      	subs	r3, r3, r0
 800cae0:	50a3      	str	r3, [r4, r2]
 800cae2:	e7c9      	b.n	800ca78 <_malloc_r+0x20>
 800cae4:	4622      	mov	r2, r4
 800cae6:	6864      	ldr	r4, [r4, #4]
 800cae8:	e7cc      	b.n	800ca84 <_malloc_r+0x2c>
 800caea:	1cc4      	adds	r4, r0, #3
 800caec:	f024 0403 	bic.w	r4, r4, #3
 800caf0:	42a0      	cmp	r0, r4
 800caf2:	d0e3      	beq.n	800cabc <_malloc_r+0x64>
 800caf4:	1a21      	subs	r1, r4, r0
 800caf6:	4630      	mov	r0, r6
 800caf8:	f000 fac6 	bl	800d088 <_sbrk_r>
 800cafc:	3001      	adds	r0, #1
 800cafe:	d1dd      	bne.n	800cabc <_malloc_r+0x64>
 800cb00:	e7cf      	b.n	800caa2 <_malloc_r+0x4a>
 800cb02:	bf00      	nop
 800cb04:	20000214 	.word	0x20000214
 800cb08:	20000218 	.word	0x20000218

0800cb0c <__ssputs_r>:
 800cb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb10:	688e      	ldr	r6, [r1, #8]
 800cb12:	429e      	cmp	r6, r3
 800cb14:	4682      	mov	sl, r0
 800cb16:	460c      	mov	r4, r1
 800cb18:	4690      	mov	r8, r2
 800cb1a:	461f      	mov	r7, r3
 800cb1c:	d838      	bhi.n	800cb90 <__ssputs_r+0x84>
 800cb1e:	898a      	ldrh	r2, [r1, #12]
 800cb20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb24:	d032      	beq.n	800cb8c <__ssputs_r+0x80>
 800cb26:	6825      	ldr	r5, [r4, #0]
 800cb28:	6909      	ldr	r1, [r1, #16]
 800cb2a:	eba5 0901 	sub.w	r9, r5, r1
 800cb2e:	6965      	ldr	r5, [r4, #20]
 800cb30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb38:	3301      	adds	r3, #1
 800cb3a:	444b      	add	r3, r9
 800cb3c:	106d      	asrs	r5, r5, #1
 800cb3e:	429d      	cmp	r5, r3
 800cb40:	bf38      	it	cc
 800cb42:	461d      	movcc	r5, r3
 800cb44:	0553      	lsls	r3, r2, #21
 800cb46:	d531      	bpl.n	800cbac <__ssputs_r+0xa0>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7ff ff85 	bl	800ca58 <_malloc_r>
 800cb4e:	4606      	mov	r6, r0
 800cb50:	b950      	cbnz	r0, 800cb68 <__ssputs_r+0x5c>
 800cb52:	230c      	movs	r3, #12
 800cb54:	f8ca 3000 	str.w	r3, [sl]
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb5e:	81a3      	strh	r3, [r4, #12]
 800cb60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb68:	6921      	ldr	r1, [r4, #16]
 800cb6a:	464a      	mov	r2, r9
 800cb6c:	f7ff fa4c 	bl	800c008 <memcpy>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	6126      	str	r6, [r4, #16]
 800cb7e:	6165      	str	r5, [r4, #20]
 800cb80:	444e      	add	r6, r9
 800cb82:	eba5 0509 	sub.w	r5, r5, r9
 800cb86:	6026      	str	r6, [r4, #0]
 800cb88:	60a5      	str	r5, [r4, #8]
 800cb8a:	463e      	mov	r6, r7
 800cb8c:	42be      	cmp	r6, r7
 800cb8e:	d900      	bls.n	800cb92 <__ssputs_r+0x86>
 800cb90:	463e      	mov	r6, r7
 800cb92:	4632      	mov	r2, r6
 800cb94:	6820      	ldr	r0, [r4, #0]
 800cb96:	4641      	mov	r1, r8
 800cb98:	f000 fb6e 	bl	800d278 <memmove>
 800cb9c:	68a3      	ldr	r3, [r4, #8]
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	1b9b      	subs	r3, r3, r6
 800cba2:	4432      	add	r2, r6
 800cba4:	60a3      	str	r3, [r4, #8]
 800cba6:	6022      	str	r2, [r4, #0]
 800cba8:	2000      	movs	r0, #0
 800cbaa:	e7db      	b.n	800cb64 <__ssputs_r+0x58>
 800cbac:	462a      	mov	r2, r5
 800cbae:	f000 fb89 	bl	800d2c4 <_realloc_r>
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d1e1      	bne.n	800cb7c <__ssputs_r+0x70>
 800cbb8:	6921      	ldr	r1, [r4, #16]
 800cbba:	4650      	mov	r0, sl
 800cbbc:	f7ff fefc 	bl	800c9b8 <_free_r>
 800cbc0:	e7c7      	b.n	800cb52 <__ssputs_r+0x46>
	...

0800cbc4 <_svfiprintf_r>:
 800cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc8:	4698      	mov	r8, r3
 800cbca:	898b      	ldrh	r3, [r1, #12]
 800cbcc:	061b      	lsls	r3, r3, #24
 800cbce:	b09d      	sub	sp, #116	; 0x74
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	460d      	mov	r5, r1
 800cbd4:	4614      	mov	r4, r2
 800cbd6:	d50e      	bpl.n	800cbf6 <_svfiprintf_r+0x32>
 800cbd8:	690b      	ldr	r3, [r1, #16]
 800cbda:	b963      	cbnz	r3, 800cbf6 <_svfiprintf_r+0x32>
 800cbdc:	2140      	movs	r1, #64	; 0x40
 800cbde:	f7ff ff3b 	bl	800ca58 <_malloc_r>
 800cbe2:	6028      	str	r0, [r5, #0]
 800cbe4:	6128      	str	r0, [r5, #16]
 800cbe6:	b920      	cbnz	r0, 800cbf2 <_svfiprintf_r+0x2e>
 800cbe8:	230c      	movs	r3, #12
 800cbea:	603b      	str	r3, [r7, #0]
 800cbec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf0:	e0d1      	b.n	800cd96 <_svfiprintf_r+0x1d2>
 800cbf2:	2340      	movs	r3, #64	; 0x40
 800cbf4:	616b      	str	r3, [r5, #20]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfa:	2320      	movs	r3, #32
 800cbfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc00:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc04:	2330      	movs	r3, #48	; 0x30
 800cc06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cdb0 <_svfiprintf_r+0x1ec>
 800cc0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc0e:	f04f 0901 	mov.w	r9, #1
 800cc12:	4623      	mov	r3, r4
 800cc14:	469a      	mov	sl, r3
 800cc16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc1a:	b10a      	cbz	r2, 800cc20 <_svfiprintf_r+0x5c>
 800cc1c:	2a25      	cmp	r2, #37	; 0x25
 800cc1e:	d1f9      	bne.n	800cc14 <_svfiprintf_r+0x50>
 800cc20:	ebba 0b04 	subs.w	fp, sl, r4
 800cc24:	d00b      	beq.n	800cc3e <_svfiprintf_r+0x7a>
 800cc26:	465b      	mov	r3, fp
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7ff ff6d 	bl	800cb0c <__ssputs_r>
 800cc32:	3001      	adds	r0, #1
 800cc34:	f000 80aa 	beq.w	800cd8c <_svfiprintf_r+0x1c8>
 800cc38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc3a:	445a      	add	r2, fp
 800cc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc3e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f000 80a2 	beq.w	800cd8c <_svfiprintf_r+0x1c8>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc52:	f10a 0a01 	add.w	sl, sl, #1
 800cc56:	9304      	str	r3, [sp, #16]
 800cc58:	9307      	str	r3, [sp, #28]
 800cc5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc5e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc60:	4654      	mov	r4, sl
 800cc62:	2205      	movs	r2, #5
 800cc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc68:	4851      	ldr	r0, [pc, #324]	; (800cdb0 <_svfiprintf_r+0x1ec>)
 800cc6a:	f7f3 fad9 	bl	8000220 <memchr>
 800cc6e:	9a04      	ldr	r2, [sp, #16]
 800cc70:	b9d8      	cbnz	r0, 800ccaa <_svfiprintf_r+0xe6>
 800cc72:	06d0      	lsls	r0, r2, #27
 800cc74:	bf44      	itt	mi
 800cc76:	2320      	movmi	r3, #32
 800cc78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc7c:	0711      	lsls	r1, r2, #28
 800cc7e:	bf44      	itt	mi
 800cc80:	232b      	movmi	r3, #43	; 0x2b
 800cc82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc86:	f89a 3000 	ldrb.w	r3, [sl]
 800cc8a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc8c:	d015      	beq.n	800ccba <_svfiprintf_r+0xf6>
 800cc8e:	9a07      	ldr	r2, [sp, #28]
 800cc90:	4654      	mov	r4, sl
 800cc92:	2000      	movs	r0, #0
 800cc94:	f04f 0c0a 	mov.w	ip, #10
 800cc98:	4621      	mov	r1, r4
 800cc9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc9e:	3b30      	subs	r3, #48	; 0x30
 800cca0:	2b09      	cmp	r3, #9
 800cca2:	d94e      	bls.n	800cd42 <_svfiprintf_r+0x17e>
 800cca4:	b1b0      	cbz	r0, 800ccd4 <_svfiprintf_r+0x110>
 800cca6:	9207      	str	r2, [sp, #28]
 800cca8:	e014      	b.n	800ccd4 <_svfiprintf_r+0x110>
 800ccaa:	eba0 0308 	sub.w	r3, r0, r8
 800ccae:	fa09 f303 	lsl.w	r3, r9, r3
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	9304      	str	r3, [sp, #16]
 800ccb6:	46a2      	mov	sl, r4
 800ccb8:	e7d2      	b.n	800cc60 <_svfiprintf_r+0x9c>
 800ccba:	9b03      	ldr	r3, [sp, #12]
 800ccbc:	1d19      	adds	r1, r3, #4
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	9103      	str	r1, [sp, #12]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bfbb      	ittet	lt
 800ccc6:	425b      	neglt	r3, r3
 800ccc8:	f042 0202 	orrlt.w	r2, r2, #2
 800cccc:	9307      	strge	r3, [sp, #28]
 800ccce:	9307      	strlt	r3, [sp, #28]
 800ccd0:	bfb8      	it	lt
 800ccd2:	9204      	strlt	r2, [sp, #16]
 800ccd4:	7823      	ldrb	r3, [r4, #0]
 800ccd6:	2b2e      	cmp	r3, #46	; 0x2e
 800ccd8:	d10c      	bne.n	800ccf4 <_svfiprintf_r+0x130>
 800ccda:	7863      	ldrb	r3, [r4, #1]
 800ccdc:	2b2a      	cmp	r3, #42	; 0x2a
 800ccde:	d135      	bne.n	800cd4c <_svfiprintf_r+0x188>
 800cce0:	9b03      	ldr	r3, [sp, #12]
 800cce2:	1d1a      	adds	r2, r3, #4
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	9203      	str	r2, [sp, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	bfb8      	it	lt
 800ccec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ccf0:	3402      	adds	r4, #2
 800ccf2:	9305      	str	r3, [sp, #20]
 800ccf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cdc0 <_svfiprintf_r+0x1fc>
 800ccf8:	7821      	ldrb	r1, [r4, #0]
 800ccfa:	2203      	movs	r2, #3
 800ccfc:	4650      	mov	r0, sl
 800ccfe:	f7f3 fa8f 	bl	8000220 <memchr>
 800cd02:	b140      	cbz	r0, 800cd16 <_svfiprintf_r+0x152>
 800cd04:	2340      	movs	r3, #64	; 0x40
 800cd06:	eba0 000a 	sub.w	r0, r0, sl
 800cd0a:	fa03 f000 	lsl.w	r0, r3, r0
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	4303      	orrs	r3, r0
 800cd12:	3401      	adds	r4, #1
 800cd14:	9304      	str	r3, [sp, #16]
 800cd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1a:	4826      	ldr	r0, [pc, #152]	; (800cdb4 <_svfiprintf_r+0x1f0>)
 800cd1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd20:	2206      	movs	r2, #6
 800cd22:	f7f3 fa7d 	bl	8000220 <memchr>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d038      	beq.n	800cd9c <_svfiprintf_r+0x1d8>
 800cd2a:	4b23      	ldr	r3, [pc, #140]	; (800cdb8 <_svfiprintf_r+0x1f4>)
 800cd2c:	bb1b      	cbnz	r3, 800cd76 <_svfiprintf_r+0x1b2>
 800cd2e:	9b03      	ldr	r3, [sp, #12]
 800cd30:	3307      	adds	r3, #7
 800cd32:	f023 0307 	bic.w	r3, r3, #7
 800cd36:	3308      	adds	r3, #8
 800cd38:	9303      	str	r3, [sp, #12]
 800cd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd3c:	4433      	add	r3, r6
 800cd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd40:	e767      	b.n	800cc12 <_svfiprintf_r+0x4e>
 800cd42:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd46:	460c      	mov	r4, r1
 800cd48:	2001      	movs	r0, #1
 800cd4a:	e7a5      	b.n	800cc98 <_svfiprintf_r+0xd4>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	3401      	adds	r4, #1
 800cd50:	9305      	str	r3, [sp, #20]
 800cd52:	4619      	mov	r1, r3
 800cd54:	f04f 0c0a 	mov.w	ip, #10
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd5e:	3a30      	subs	r2, #48	; 0x30
 800cd60:	2a09      	cmp	r2, #9
 800cd62:	d903      	bls.n	800cd6c <_svfiprintf_r+0x1a8>
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d0c5      	beq.n	800ccf4 <_svfiprintf_r+0x130>
 800cd68:	9105      	str	r1, [sp, #20]
 800cd6a:	e7c3      	b.n	800ccf4 <_svfiprintf_r+0x130>
 800cd6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd70:	4604      	mov	r4, r0
 800cd72:	2301      	movs	r3, #1
 800cd74:	e7f0      	b.n	800cd58 <_svfiprintf_r+0x194>
 800cd76:	ab03      	add	r3, sp, #12
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <_svfiprintf_r+0x1f8>)
 800cd7e:	a904      	add	r1, sp, #16
 800cd80:	4638      	mov	r0, r7
 800cd82:	f7fb ff19 	bl	8008bb8 <_printf_float>
 800cd86:	1c42      	adds	r2, r0, #1
 800cd88:	4606      	mov	r6, r0
 800cd8a:	d1d6      	bne.n	800cd3a <_svfiprintf_r+0x176>
 800cd8c:	89ab      	ldrh	r3, [r5, #12]
 800cd8e:	065b      	lsls	r3, r3, #25
 800cd90:	f53f af2c 	bmi.w	800cbec <_svfiprintf_r+0x28>
 800cd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd96:	b01d      	add	sp, #116	; 0x74
 800cd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9c:	ab03      	add	r3, sp, #12
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	462a      	mov	r2, r5
 800cda2:	4b06      	ldr	r3, [pc, #24]	; (800cdbc <_svfiprintf_r+0x1f8>)
 800cda4:	a904      	add	r1, sp, #16
 800cda6:	4638      	mov	r0, r7
 800cda8:	f7fc f9aa 	bl	8009100 <_printf_i>
 800cdac:	e7eb      	b.n	800cd86 <_svfiprintf_r+0x1c2>
 800cdae:	bf00      	nop
 800cdb0:	0800dcdc 	.word	0x0800dcdc
 800cdb4:	0800dce6 	.word	0x0800dce6
 800cdb8:	08008bb9 	.word	0x08008bb9
 800cdbc:	0800cb0d 	.word	0x0800cb0d
 800cdc0:	0800dce2 	.word	0x0800dce2

0800cdc4 <__sfputc_r>:
 800cdc4:	6893      	ldr	r3, [r2, #8]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	b410      	push	{r4}
 800cdcc:	6093      	str	r3, [r2, #8]
 800cdce:	da08      	bge.n	800cde2 <__sfputc_r+0x1e>
 800cdd0:	6994      	ldr	r4, [r2, #24]
 800cdd2:	42a3      	cmp	r3, r4
 800cdd4:	db01      	blt.n	800cdda <__sfputc_r+0x16>
 800cdd6:	290a      	cmp	r1, #10
 800cdd8:	d103      	bne.n	800cde2 <__sfputc_r+0x1e>
 800cdda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdde:	f7fd bc2d 	b.w	800a63c <__swbuf_r>
 800cde2:	6813      	ldr	r3, [r2, #0]
 800cde4:	1c58      	adds	r0, r3, #1
 800cde6:	6010      	str	r0, [r2, #0]
 800cde8:	7019      	strb	r1, [r3, #0]
 800cdea:	4608      	mov	r0, r1
 800cdec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <__sfputs_r>:
 800cdf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	18d5      	adds	r5, r2, r3
 800cdfc:	42ac      	cmp	r4, r5
 800cdfe:	d101      	bne.n	800ce04 <__sfputs_r+0x12>
 800ce00:	2000      	movs	r0, #0
 800ce02:	e007      	b.n	800ce14 <__sfputs_r+0x22>
 800ce04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce08:	463a      	mov	r2, r7
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f7ff ffda 	bl	800cdc4 <__sfputc_r>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d1f3      	bne.n	800cdfc <__sfputs_r+0xa>
 800ce14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce18 <_vfiprintf_r>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	b09d      	sub	sp, #116	; 0x74
 800ce20:	4614      	mov	r4, r2
 800ce22:	4698      	mov	r8, r3
 800ce24:	4606      	mov	r6, r0
 800ce26:	b118      	cbz	r0, 800ce30 <_vfiprintf_r+0x18>
 800ce28:	6983      	ldr	r3, [r0, #24]
 800ce2a:	b90b      	cbnz	r3, 800ce30 <_vfiprintf_r+0x18>
 800ce2c:	f7fe fc5a 	bl	800b6e4 <__sinit>
 800ce30:	4b89      	ldr	r3, [pc, #548]	; (800d058 <_vfiprintf_r+0x240>)
 800ce32:	429d      	cmp	r5, r3
 800ce34:	d11b      	bne.n	800ce6e <_vfiprintf_r+0x56>
 800ce36:	6875      	ldr	r5, [r6, #4]
 800ce38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce3a:	07d9      	lsls	r1, r3, #31
 800ce3c:	d405      	bmi.n	800ce4a <_vfiprintf_r+0x32>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	059a      	lsls	r2, r3, #22
 800ce42:	d402      	bmi.n	800ce4a <_vfiprintf_r+0x32>
 800ce44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce46:	f7ff f85e 	bl	800bf06 <__retarget_lock_acquire_recursive>
 800ce4a:	89ab      	ldrh	r3, [r5, #12]
 800ce4c:	071b      	lsls	r3, r3, #28
 800ce4e:	d501      	bpl.n	800ce54 <_vfiprintf_r+0x3c>
 800ce50:	692b      	ldr	r3, [r5, #16]
 800ce52:	b9eb      	cbnz	r3, 800ce90 <_vfiprintf_r+0x78>
 800ce54:	4629      	mov	r1, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7fd fc42 	bl	800a6e0 <__swsetup_r>
 800ce5c:	b1c0      	cbz	r0, 800ce90 <_vfiprintf_r+0x78>
 800ce5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce60:	07dc      	lsls	r4, r3, #31
 800ce62:	d50e      	bpl.n	800ce82 <_vfiprintf_r+0x6a>
 800ce64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce68:	b01d      	add	sp, #116	; 0x74
 800ce6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6e:	4b7b      	ldr	r3, [pc, #492]	; (800d05c <_vfiprintf_r+0x244>)
 800ce70:	429d      	cmp	r5, r3
 800ce72:	d101      	bne.n	800ce78 <_vfiprintf_r+0x60>
 800ce74:	68b5      	ldr	r5, [r6, #8]
 800ce76:	e7df      	b.n	800ce38 <_vfiprintf_r+0x20>
 800ce78:	4b79      	ldr	r3, [pc, #484]	; (800d060 <_vfiprintf_r+0x248>)
 800ce7a:	429d      	cmp	r5, r3
 800ce7c:	bf08      	it	eq
 800ce7e:	68f5      	ldreq	r5, [r6, #12]
 800ce80:	e7da      	b.n	800ce38 <_vfiprintf_r+0x20>
 800ce82:	89ab      	ldrh	r3, [r5, #12]
 800ce84:	0598      	lsls	r0, r3, #22
 800ce86:	d4ed      	bmi.n	800ce64 <_vfiprintf_r+0x4c>
 800ce88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce8a:	f7ff f83d 	bl	800bf08 <__retarget_lock_release_recursive>
 800ce8e:	e7e9      	b.n	800ce64 <_vfiprintf_r+0x4c>
 800ce90:	2300      	movs	r3, #0
 800ce92:	9309      	str	r3, [sp, #36]	; 0x24
 800ce94:	2320      	movs	r3, #32
 800ce96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce9e:	2330      	movs	r3, #48	; 0x30
 800cea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d064 <_vfiprintf_r+0x24c>
 800cea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cea8:	f04f 0901 	mov.w	r9, #1
 800ceac:	4623      	mov	r3, r4
 800ceae:	469a      	mov	sl, r3
 800ceb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb4:	b10a      	cbz	r2, 800ceba <_vfiprintf_r+0xa2>
 800ceb6:	2a25      	cmp	r2, #37	; 0x25
 800ceb8:	d1f9      	bne.n	800ceae <_vfiprintf_r+0x96>
 800ceba:	ebba 0b04 	subs.w	fp, sl, r4
 800cebe:	d00b      	beq.n	800ced8 <_vfiprintf_r+0xc0>
 800cec0:	465b      	mov	r3, fp
 800cec2:	4622      	mov	r2, r4
 800cec4:	4629      	mov	r1, r5
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ff93 	bl	800cdf2 <__sfputs_r>
 800cecc:	3001      	adds	r0, #1
 800cece:	f000 80aa 	beq.w	800d026 <_vfiprintf_r+0x20e>
 800ced2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced4:	445a      	add	r2, fp
 800ced6:	9209      	str	r2, [sp, #36]	; 0x24
 800ced8:	f89a 3000 	ldrb.w	r3, [sl]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 80a2 	beq.w	800d026 <_vfiprintf_r+0x20e>
 800cee2:	2300      	movs	r3, #0
 800cee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceec:	f10a 0a01 	add.w	sl, sl, #1
 800cef0:	9304      	str	r3, [sp, #16]
 800cef2:	9307      	str	r3, [sp, #28]
 800cef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cef8:	931a      	str	r3, [sp, #104]	; 0x68
 800cefa:	4654      	mov	r4, sl
 800cefc:	2205      	movs	r2, #5
 800cefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf02:	4858      	ldr	r0, [pc, #352]	; (800d064 <_vfiprintf_r+0x24c>)
 800cf04:	f7f3 f98c 	bl	8000220 <memchr>
 800cf08:	9a04      	ldr	r2, [sp, #16]
 800cf0a:	b9d8      	cbnz	r0, 800cf44 <_vfiprintf_r+0x12c>
 800cf0c:	06d1      	lsls	r1, r2, #27
 800cf0e:	bf44      	itt	mi
 800cf10:	2320      	movmi	r3, #32
 800cf12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf16:	0713      	lsls	r3, r2, #28
 800cf18:	bf44      	itt	mi
 800cf1a:	232b      	movmi	r3, #43	; 0x2b
 800cf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf20:	f89a 3000 	ldrb.w	r3, [sl]
 800cf24:	2b2a      	cmp	r3, #42	; 0x2a
 800cf26:	d015      	beq.n	800cf54 <_vfiprintf_r+0x13c>
 800cf28:	9a07      	ldr	r2, [sp, #28]
 800cf2a:	4654      	mov	r4, sl
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	f04f 0c0a 	mov.w	ip, #10
 800cf32:	4621      	mov	r1, r4
 800cf34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf38:	3b30      	subs	r3, #48	; 0x30
 800cf3a:	2b09      	cmp	r3, #9
 800cf3c:	d94e      	bls.n	800cfdc <_vfiprintf_r+0x1c4>
 800cf3e:	b1b0      	cbz	r0, 800cf6e <_vfiprintf_r+0x156>
 800cf40:	9207      	str	r2, [sp, #28]
 800cf42:	e014      	b.n	800cf6e <_vfiprintf_r+0x156>
 800cf44:	eba0 0308 	sub.w	r3, r0, r8
 800cf48:	fa09 f303 	lsl.w	r3, r9, r3
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	46a2      	mov	sl, r4
 800cf52:	e7d2      	b.n	800cefa <_vfiprintf_r+0xe2>
 800cf54:	9b03      	ldr	r3, [sp, #12]
 800cf56:	1d19      	adds	r1, r3, #4
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	9103      	str	r1, [sp, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	bfbb      	ittet	lt
 800cf60:	425b      	neglt	r3, r3
 800cf62:	f042 0202 	orrlt.w	r2, r2, #2
 800cf66:	9307      	strge	r3, [sp, #28]
 800cf68:	9307      	strlt	r3, [sp, #28]
 800cf6a:	bfb8      	it	lt
 800cf6c:	9204      	strlt	r2, [sp, #16]
 800cf6e:	7823      	ldrb	r3, [r4, #0]
 800cf70:	2b2e      	cmp	r3, #46	; 0x2e
 800cf72:	d10c      	bne.n	800cf8e <_vfiprintf_r+0x176>
 800cf74:	7863      	ldrb	r3, [r4, #1]
 800cf76:	2b2a      	cmp	r3, #42	; 0x2a
 800cf78:	d135      	bne.n	800cfe6 <_vfiprintf_r+0x1ce>
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	1d1a      	adds	r2, r3, #4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	9203      	str	r2, [sp, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	bfb8      	it	lt
 800cf86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf8a:	3402      	adds	r4, #2
 800cf8c:	9305      	str	r3, [sp, #20]
 800cf8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d074 <_vfiprintf_r+0x25c>
 800cf92:	7821      	ldrb	r1, [r4, #0]
 800cf94:	2203      	movs	r2, #3
 800cf96:	4650      	mov	r0, sl
 800cf98:	f7f3 f942 	bl	8000220 <memchr>
 800cf9c:	b140      	cbz	r0, 800cfb0 <_vfiprintf_r+0x198>
 800cf9e:	2340      	movs	r3, #64	; 0x40
 800cfa0:	eba0 000a 	sub.w	r0, r0, sl
 800cfa4:	fa03 f000 	lsl.w	r0, r3, r0
 800cfa8:	9b04      	ldr	r3, [sp, #16]
 800cfaa:	4303      	orrs	r3, r0
 800cfac:	3401      	adds	r4, #1
 800cfae:	9304      	str	r3, [sp, #16]
 800cfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb4:	482c      	ldr	r0, [pc, #176]	; (800d068 <_vfiprintf_r+0x250>)
 800cfb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfba:	2206      	movs	r2, #6
 800cfbc:	f7f3 f930 	bl	8000220 <memchr>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d03f      	beq.n	800d044 <_vfiprintf_r+0x22c>
 800cfc4:	4b29      	ldr	r3, [pc, #164]	; (800d06c <_vfiprintf_r+0x254>)
 800cfc6:	bb1b      	cbnz	r3, 800d010 <_vfiprintf_r+0x1f8>
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	3307      	adds	r3, #7
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	9303      	str	r3, [sp, #12]
 800cfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd6:	443b      	add	r3, r7
 800cfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfda:	e767      	b.n	800ceac <_vfiprintf_r+0x94>
 800cfdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	e7a5      	b.n	800cf32 <_vfiprintf_r+0x11a>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	3401      	adds	r4, #1
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	4619      	mov	r1, r3
 800cfee:	f04f 0c0a 	mov.w	ip, #10
 800cff2:	4620      	mov	r0, r4
 800cff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff8:	3a30      	subs	r2, #48	; 0x30
 800cffa:	2a09      	cmp	r2, #9
 800cffc:	d903      	bls.n	800d006 <_vfiprintf_r+0x1ee>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d0c5      	beq.n	800cf8e <_vfiprintf_r+0x176>
 800d002:	9105      	str	r1, [sp, #20]
 800d004:	e7c3      	b.n	800cf8e <_vfiprintf_r+0x176>
 800d006:	fb0c 2101 	mla	r1, ip, r1, r2
 800d00a:	4604      	mov	r4, r0
 800d00c:	2301      	movs	r3, #1
 800d00e:	e7f0      	b.n	800cff2 <_vfiprintf_r+0x1da>
 800d010:	ab03      	add	r3, sp, #12
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	462a      	mov	r2, r5
 800d016:	4b16      	ldr	r3, [pc, #88]	; (800d070 <_vfiprintf_r+0x258>)
 800d018:	a904      	add	r1, sp, #16
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7fb fdcc 	bl	8008bb8 <_printf_float>
 800d020:	4607      	mov	r7, r0
 800d022:	1c78      	adds	r0, r7, #1
 800d024:	d1d6      	bne.n	800cfd4 <_vfiprintf_r+0x1bc>
 800d026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d028:	07d9      	lsls	r1, r3, #31
 800d02a:	d405      	bmi.n	800d038 <_vfiprintf_r+0x220>
 800d02c:	89ab      	ldrh	r3, [r5, #12]
 800d02e:	059a      	lsls	r2, r3, #22
 800d030:	d402      	bmi.n	800d038 <_vfiprintf_r+0x220>
 800d032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d034:	f7fe ff68 	bl	800bf08 <__retarget_lock_release_recursive>
 800d038:	89ab      	ldrh	r3, [r5, #12]
 800d03a:	065b      	lsls	r3, r3, #25
 800d03c:	f53f af12 	bmi.w	800ce64 <_vfiprintf_r+0x4c>
 800d040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d042:	e711      	b.n	800ce68 <_vfiprintf_r+0x50>
 800d044:	ab03      	add	r3, sp, #12
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	462a      	mov	r2, r5
 800d04a:	4b09      	ldr	r3, [pc, #36]	; (800d070 <_vfiprintf_r+0x258>)
 800d04c:	a904      	add	r1, sp, #16
 800d04e:	4630      	mov	r0, r6
 800d050:	f7fc f856 	bl	8009100 <_printf_i>
 800d054:	e7e4      	b.n	800d020 <_vfiprintf_r+0x208>
 800d056:	bf00      	nop
 800d058:	0800dac0 	.word	0x0800dac0
 800d05c:	0800dae0 	.word	0x0800dae0
 800d060:	0800daa0 	.word	0x0800daa0
 800d064:	0800dcdc 	.word	0x0800dcdc
 800d068:	0800dce6 	.word	0x0800dce6
 800d06c:	08008bb9 	.word	0x08008bb9
 800d070:	0800cdf3 	.word	0x0800cdf3
 800d074:	0800dce2 	.word	0x0800dce2

0800d078 <nan>:
 800d078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d080 <nan+0x8>
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	00000000 	.word	0x00000000
 800d084:	7ff80000 	.word	0x7ff80000

0800d088 <_sbrk_r>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	4d06      	ldr	r5, [pc, #24]	; (800d0a4 <_sbrk_r+0x1c>)
 800d08c:	2300      	movs	r3, #0
 800d08e:	4604      	mov	r4, r0
 800d090:	4608      	mov	r0, r1
 800d092:	602b      	str	r3, [r5, #0]
 800d094:	f7f5 f91e 	bl	80022d4 <_sbrk>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_sbrk_r+0x1a>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_sbrk_r+0x1a>
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	200005f0 	.word	0x200005f0

0800d0a8 <__sread>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b0:	f000 f92e 	bl	800d310 <_read_r>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	bfab      	itete	ge
 800d0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d0bc:	181b      	addge	r3, r3, r0
 800d0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0c2:	bfac      	ite	ge
 800d0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0c6:	81a3      	strhlt	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__swrite>:
 800d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	461f      	mov	r7, r3
 800d0d0:	898b      	ldrh	r3, [r1, #12]
 800d0d2:	05db      	lsls	r3, r3, #23
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	4616      	mov	r6, r2
 800d0da:	d505      	bpl.n	800d0e8 <__swrite+0x1e>
 800d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f000 f8b6 	bl	800d254 <_lseek_r>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fe:	f000 b835 	b.w	800d16c <_write_r>

0800d102 <__sseek>:
 800d102:	b510      	push	{r4, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10a:	f000 f8a3 	bl	800d254 <_lseek_r>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	bf15      	itete	ne
 800d114:	6560      	strne	r0, [r4, #84]	; 0x54
 800d116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d11e:	81a3      	strheq	r3, [r4, #12]
 800d120:	bf18      	it	ne
 800d122:	81a3      	strhne	r3, [r4, #12]
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__sclose>:
 800d126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12a:	f000 b84f 	b.w	800d1cc <_close_r>

0800d12e <strncmp>:
 800d12e:	b510      	push	{r4, lr}
 800d130:	b16a      	cbz	r2, 800d14e <strncmp+0x20>
 800d132:	3901      	subs	r1, #1
 800d134:	1884      	adds	r4, r0, r2
 800d136:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d13a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d13e:	4293      	cmp	r3, r2
 800d140:	d103      	bne.n	800d14a <strncmp+0x1c>
 800d142:	42a0      	cmp	r0, r4
 800d144:	d001      	beq.n	800d14a <strncmp+0x1c>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1f5      	bne.n	800d136 <strncmp+0x8>
 800d14a:	1a98      	subs	r0, r3, r2
 800d14c:	bd10      	pop	{r4, pc}
 800d14e:	4610      	mov	r0, r2
 800d150:	e7fc      	b.n	800d14c <strncmp+0x1e>

0800d152 <__ascii_wctomb>:
 800d152:	b149      	cbz	r1, 800d168 <__ascii_wctomb+0x16>
 800d154:	2aff      	cmp	r2, #255	; 0xff
 800d156:	bf85      	ittet	hi
 800d158:	238a      	movhi	r3, #138	; 0x8a
 800d15a:	6003      	strhi	r3, [r0, #0]
 800d15c:	700a      	strbls	r2, [r1, #0]
 800d15e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d162:	bf98      	it	ls
 800d164:	2001      	movls	r0, #1
 800d166:	4770      	bx	lr
 800d168:	4608      	mov	r0, r1
 800d16a:	4770      	bx	lr

0800d16c <_write_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4d07      	ldr	r5, [pc, #28]	; (800d18c <_write_r+0x20>)
 800d170:	4604      	mov	r4, r0
 800d172:	4608      	mov	r0, r1
 800d174:	4611      	mov	r1, r2
 800d176:	2200      	movs	r2, #0
 800d178:	602a      	str	r2, [r5, #0]
 800d17a:	461a      	mov	r2, r3
 800d17c:	f7f3 ff7d 	bl	800107a <_write>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_write_r+0x1e>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	b103      	cbz	r3, 800d18a <_write_r+0x1e>
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	200005f0 	.word	0x200005f0

0800d190 <__assert_func>:
 800d190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d192:	4614      	mov	r4, r2
 800d194:	461a      	mov	r2, r3
 800d196:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <__assert_func+0x2c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4605      	mov	r5, r0
 800d19c:	68d8      	ldr	r0, [r3, #12]
 800d19e:	b14c      	cbz	r4, 800d1b4 <__assert_func+0x24>
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <__assert_func+0x30>)
 800d1a2:	9100      	str	r1, [sp, #0]
 800d1a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1a8:	4906      	ldr	r1, [pc, #24]	; (800d1c4 <__assert_func+0x34>)
 800d1aa:	462b      	mov	r3, r5
 800d1ac:	f000 f81e 	bl	800d1ec <fiprintf>
 800d1b0:	f000 f8c0 	bl	800d334 <abort>
 800d1b4:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <__assert_func+0x38>)
 800d1b6:	461c      	mov	r4, r3
 800d1b8:	e7f3      	b.n	800d1a2 <__assert_func+0x12>
 800d1ba:	bf00      	nop
 800d1bc:	20000014 	.word	0x20000014
 800d1c0:	0800dced 	.word	0x0800dced
 800d1c4:	0800dcfa 	.word	0x0800dcfa
 800d1c8:	0800dd28 	.word	0x0800dd28

0800d1cc <_close_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d06      	ldr	r5, [pc, #24]	; (800d1e8 <_close_r+0x1c>)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	602b      	str	r3, [r5, #0]
 800d1d8:	f7f5 f847 	bl	800226a <_close>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_close_r+0x1a>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_close_r+0x1a>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	200005f0 	.word	0x200005f0

0800d1ec <fiprintf>:
 800d1ec:	b40e      	push	{r1, r2, r3}
 800d1ee:	b503      	push	{r0, r1, lr}
 800d1f0:	4601      	mov	r1, r0
 800d1f2:	ab03      	add	r3, sp, #12
 800d1f4:	4805      	ldr	r0, [pc, #20]	; (800d20c <fiprintf+0x20>)
 800d1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1fa:	6800      	ldr	r0, [r0, #0]
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	f7ff fe0b 	bl	800ce18 <_vfiprintf_r>
 800d202:	b002      	add	sp, #8
 800d204:	f85d eb04 	ldr.w	lr, [sp], #4
 800d208:	b003      	add	sp, #12
 800d20a:	4770      	bx	lr
 800d20c:	20000014 	.word	0x20000014

0800d210 <_fstat_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_fstat_r+0x20>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	f7f5 f830 	bl	8002282 <_fstat>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	d102      	bne.n	800d22c <_fstat_r+0x1c>
 800d226:	682b      	ldr	r3, [r5, #0]
 800d228:	b103      	cbz	r3, 800d22c <_fstat_r+0x1c>
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	200005f0 	.word	0x200005f0

0800d234 <_isatty_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d06      	ldr	r5, [pc, #24]	; (800d250 <_isatty_r+0x1c>)
 800d238:	2300      	movs	r3, #0
 800d23a:	4604      	mov	r4, r0
 800d23c:	4608      	mov	r0, r1
 800d23e:	602b      	str	r3, [r5, #0]
 800d240:	f7f5 f82f 	bl	80022a2 <_isatty>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_isatty_r+0x1a>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_isatty_r+0x1a>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	200005f0 	.word	0x200005f0

0800d254 <_lseek_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	4d07      	ldr	r5, [pc, #28]	; (800d274 <_lseek_r+0x20>)
 800d258:	4604      	mov	r4, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	4611      	mov	r1, r2
 800d25e:	2200      	movs	r2, #0
 800d260:	602a      	str	r2, [r5, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	f7f5 f828 	bl	80022b8 <_lseek>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d102      	bne.n	800d272 <_lseek_r+0x1e>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	b103      	cbz	r3, 800d272 <_lseek_r+0x1e>
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	200005f0 	.word	0x200005f0

0800d278 <memmove>:
 800d278:	4288      	cmp	r0, r1
 800d27a:	b510      	push	{r4, lr}
 800d27c:	eb01 0402 	add.w	r4, r1, r2
 800d280:	d902      	bls.n	800d288 <memmove+0x10>
 800d282:	4284      	cmp	r4, r0
 800d284:	4623      	mov	r3, r4
 800d286:	d807      	bhi.n	800d298 <memmove+0x20>
 800d288:	1e43      	subs	r3, r0, #1
 800d28a:	42a1      	cmp	r1, r4
 800d28c:	d008      	beq.n	800d2a0 <memmove+0x28>
 800d28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d292:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d296:	e7f8      	b.n	800d28a <memmove+0x12>
 800d298:	4402      	add	r2, r0
 800d29a:	4601      	mov	r1, r0
 800d29c:	428a      	cmp	r2, r1
 800d29e:	d100      	bne.n	800d2a2 <memmove+0x2a>
 800d2a0:	bd10      	pop	{r4, pc}
 800d2a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2aa:	e7f7      	b.n	800d29c <memmove+0x24>

0800d2ac <__malloc_lock>:
 800d2ac:	4801      	ldr	r0, [pc, #4]	; (800d2b4 <__malloc_lock+0x8>)
 800d2ae:	f7fe be2a 	b.w	800bf06 <__retarget_lock_acquire_recursive>
 800d2b2:	bf00      	nop
 800d2b4:	200005e8 	.word	0x200005e8

0800d2b8 <__malloc_unlock>:
 800d2b8:	4801      	ldr	r0, [pc, #4]	; (800d2c0 <__malloc_unlock+0x8>)
 800d2ba:	f7fe be25 	b.w	800bf08 <__retarget_lock_release_recursive>
 800d2be:	bf00      	nop
 800d2c0:	200005e8 	.word	0x200005e8

0800d2c4 <_realloc_r>:
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	460e      	mov	r6, r1
 800d2cc:	b921      	cbnz	r1, 800d2d8 <_realloc_r+0x14>
 800d2ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	f7ff bbc0 	b.w	800ca58 <_malloc_r>
 800d2d8:	b922      	cbnz	r2, 800d2e4 <_realloc_r+0x20>
 800d2da:	f7ff fb6d 	bl	800c9b8 <_free_r>
 800d2de:	4625      	mov	r5, r4
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e4:	f000 f82d 	bl	800d342 <_malloc_usable_size_r>
 800d2e8:	42a0      	cmp	r0, r4
 800d2ea:	d20f      	bcs.n	800d30c <_realloc_r+0x48>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f7ff fbb2 	bl	800ca58 <_malloc_r>
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d0f2      	beq.n	800d2e0 <_realloc_r+0x1c>
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	f7fe fe83 	bl	800c008 <memcpy>
 800d302:	4631      	mov	r1, r6
 800d304:	4638      	mov	r0, r7
 800d306:	f7ff fb57 	bl	800c9b8 <_free_r>
 800d30a:	e7e9      	b.n	800d2e0 <_realloc_r+0x1c>
 800d30c:	4635      	mov	r5, r6
 800d30e:	e7e7      	b.n	800d2e0 <_realloc_r+0x1c>

0800d310 <_read_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4d07      	ldr	r5, [pc, #28]	; (800d330 <_read_r+0x20>)
 800d314:	4604      	mov	r4, r0
 800d316:	4608      	mov	r0, r1
 800d318:	4611      	mov	r1, r2
 800d31a:	2200      	movs	r2, #0
 800d31c:	602a      	str	r2, [r5, #0]
 800d31e:	461a      	mov	r2, r3
 800d320:	f7f4 ff86 	bl	8002230 <_read>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d102      	bne.n	800d32e <_read_r+0x1e>
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	b103      	cbz	r3, 800d32e <_read_r+0x1e>
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	bd38      	pop	{r3, r4, r5, pc}
 800d330:	200005f0 	.word	0x200005f0

0800d334 <abort>:
 800d334:	b508      	push	{r3, lr}
 800d336:	2006      	movs	r0, #6
 800d338:	f000 f834 	bl	800d3a4 <raise>
 800d33c:	2001      	movs	r0, #1
 800d33e:	f7f4 ff6d 	bl	800221c <_exit>

0800d342 <_malloc_usable_size_r>:
 800d342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d346:	1f18      	subs	r0, r3, #4
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfbc      	itt	lt
 800d34c:	580b      	ldrlt	r3, [r1, r0]
 800d34e:	18c0      	addlt	r0, r0, r3
 800d350:	4770      	bx	lr

0800d352 <_raise_r>:
 800d352:	291f      	cmp	r1, #31
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	d904      	bls.n	800d366 <_raise_r+0x14>
 800d35c:	2316      	movs	r3, #22
 800d35e:	6003      	str	r3, [r0, #0]
 800d360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d364:	bd38      	pop	{r3, r4, r5, pc}
 800d366:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d368:	b112      	cbz	r2, 800d370 <_raise_r+0x1e>
 800d36a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d36e:	b94b      	cbnz	r3, 800d384 <_raise_r+0x32>
 800d370:	4620      	mov	r0, r4
 800d372:	f000 f831 	bl	800d3d8 <_getpid_r>
 800d376:	462a      	mov	r2, r5
 800d378:	4601      	mov	r1, r0
 800d37a:	4620      	mov	r0, r4
 800d37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d380:	f000 b818 	b.w	800d3b4 <_kill_r>
 800d384:	2b01      	cmp	r3, #1
 800d386:	d00a      	beq.n	800d39e <_raise_r+0x4c>
 800d388:	1c59      	adds	r1, r3, #1
 800d38a:	d103      	bne.n	800d394 <_raise_r+0x42>
 800d38c:	2316      	movs	r3, #22
 800d38e:	6003      	str	r3, [r0, #0]
 800d390:	2001      	movs	r0, #1
 800d392:	e7e7      	b.n	800d364 <_raise_r+0x12>
 800d394:	2400      	movs	r4, #0
 800d396:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d39a:	4628      	mov	r0, r5
 800d39c:	4798      	blx	r3
 800d39e:	2000      	movs	r0, #0
 800d3a0:	e7e0      	b.n	800d364 <_raise_r+0x12>
	...

0800d3a4 <raise>:
 800d3a4:	4b02      	ldr	r3, [pc, #8]	; (800d3b0 <raise+0xc>)
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	6818      	ldr	r0, [r3, #0]
 800d3aa:	f7ff bfd2 	b.w	800d352 <_raise_r>
 800d3ae:	bf00      	nop
 800d3b0:	20000014 	.word	0x20000014

0800d3b4 <_kill_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4d07      	ldr	r5, [pc, #28]	; (800d3d4 <_kill_r+0x20>)
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4608      	mov	r0, r1
 800d3be:	4611      	mov	r1, r2
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	f7f4 ff1b 	bl	80021fc <_kill>
 800d3c6:	1c43      	adds	r3, r0, #1
 800d3c8:	d102      	bne.n	800d3d0 <_kill_r+0x1c>
 800d3ca:	682b      	ldr	r3, [r5, #0]
 800d3cc:	b103      	cbz	r3, 800d3d0 <_kill_r+0x1c>
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	bd38      	pop	{r3, r4, r5, pc}
 800d3d2:	bf00      	nop
 800d3d4:	200005f0 	.word	0x200005f0

0800d3d8 <_getpid_r>:
 800d3d8:	f7f4 bf08 	b.w	80021ec <_getpid>

0800d3dc <_init>:
 800d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3de:	bf00      	nop
 800d3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3e2:	bc08      	pop	{r3}
 800d3e4:	469e      	mov	lr, r3
 800d3e6:	4770      	bx	lr

0800d3e8 <_fini>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	bf00      	nop
 800d3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ee:	bc08      	pop	{r3}
 800d3f0:	469e      	mov	lr, r3
 800d3f2:	4770      	bx	lr
