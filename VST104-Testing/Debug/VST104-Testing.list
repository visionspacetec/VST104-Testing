
VST104-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d68c  0800d68c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d68c  0800d68c  0001d68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d694  0800d694  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d694  0800d694  0001d694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d698  0800d698  0001d698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001e8  0800d884  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800d884  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020118  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391f  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00043c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  00045310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000132be  00000000  00000000  00046868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006fe4  00000000  00000000  00059b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00060b0a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000076d8  00000000  00000000  00060b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cdc4 	.word	0x0800cdc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800cdc4 	.word	0x0800cdc4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001018:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800102c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001034:	e000      	b.n	8001038 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001036:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001038:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001042:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_write>:
static void MX_USART3_UART_Init(void);
static void MX_I2C4_Init(void);
/* USER CODE BEGIN PFP */

// SWD printf() replacement
int _write(int file, char *ptr, int len) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e009      	b.n	8001080 <_write+0x26>
		ITM_SendChar((*ptr++));
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffc9 	bl	800100c <ITM_SendChar>
	for(int i=0; i<len; i++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf1      	blt.n	800106c <_write+0x12>
	return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f001 fa00 	bl	800249e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f8bd 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 fc4d 	bl	8001940 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010a6:	f000 f979 	bl	800139c <MX_ADC1_Init>
  MX_CAN1_Init();
 80010aa:	f000 fa53 	bl	8001554 <MX_CAN1_Init>
  MX_CAN2_Init();
 80010ae:	f000 fa87 	bl	80015c0 <MX_CAN2_Init>
  MX_I2C2_Init();
 80010b2:	f000 fabb 	bl	800162c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80010b6:	f000 fb79 	bl	80017ac <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80010ba:	f000 fba3 	bl	8001804 <MX_SPI1_Init>
  MX_ADC2_Init();
 80010be:	f000 f9e5 	bl	800148c <MX_ADC2_Init>
  MX_I2C3_Init();
 80010c2:	f000 faf3 	bl	80016ac <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80010c6:	f000 fbdb 	bl	8001880 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010ca:	f000 fc09 	bl	80018e0 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 80010ce:	f000 fb2d 	bl	800172c <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

	//test SDW printf()
  	HAL_Delay(1500);
 80010d2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010d6:	f001 fa57 	bl	8002588 <HAL_Delay>
	printf("\nSDW printf() initialized\n\n");
 80010da:	4845      	ldr	r0, [pc, #276]	; (80011f0 <main+0x15c>)
 80010dc:	f008 f8c2 	bl	8009264 <puts>

	// assign UART pointers
	assign_huartPtr(&huart2, &huart3);
 80010e0:	4944      	ldr	r1, [pc, #272]	; (80011f4 <main+0x160>)
 80010e2:	4845      	ldr	r0, [pc, #276]	; (80011f8 <main+0x164>)
 80010e4:	f007 f8f0 	bl	80082c8 <assign_huartPtr>

	// open UART isolators
	HAL_GPIO_WritePin(UART2_EN_GPIO_Port, UART2_EN_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2104      	movs	r1, #4
 80010ec:	4843      	ldr	r0, [pc, #268]	; (80011fc <main+0x168>)
 80010ee:	f003 f9b5 	bl	800445c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f8:	4841      	ldr	r0, [pc, #260]	; (8001200 <main+0x16c>)
 80010fa:	f003 f9af 	bl	800445c <HAL_GPIO_WritePin>

	// MCP reset power
	mcp9804_powerReset();
 80010fe:	f006 fbed 	bl	80078dc <mcp9804_powerReset>

	// MCP configure
	for(int i=0; i<7; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	e006      	b.n	8001116 <main+0x82>
		mcp9804_configure(&hi2c2, i);
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	483e      	ldr	r0, [pc, #248]	; (8001204 <main+0x170>)
 800110c:	f006 fc0c 	bl	8007928 <mcp9804_configure>
	for(int i=0; i<7; i++)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b06      	cmp	r3, #6
 800111a:	ddf5      	ble.n	8001108 <main+0x74>

	// MCP read manufacturer
	for(int i=0; i<7; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	e006      	b.n	8001130 <main+0x9c>
		mcp9884_readManufac(&hi2c2, i);
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	4837      	ldr	r0, [pc, #220]	; (8001204 <main+0x170>)
 8001126:	f006 fc17 	bl	8007958 <mcp9884_readManufac>
	for(int i=0; i<7; i++)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3301      	adds	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b06      	cmp	r3, #6
 8001134:	ddf5      	ble.n	8001122 <main+0x8e>

	// MMC reset power
	mmc5883_powerReset();
 8001136:	f006 fd0d 	bl	8007b54 <mmc5883_powerReset>

	// MMC configure
	mmc5883_configure(&hi2c3, 0);
 800113a:	2100      	movs	r1, #0
 800113c:	4832      	ldr	r0, [pc, #200]	; (8001208 <main+0x174>)
 800113e:	f006 fdb7 	bl	8007cb0 <mmc5883_configure>
	mmc5883_configure(&hi2c4, 1);
 8001142:	2101      	movs	r1, #1
 8001144:	4831      	ldr	r0, [pc, #196]	; (800120c <main+0x178>)
 8001146:	f006 fdb3 	bl	8007cb0 <mmc5883_configure>

	// MMC read manufacturer
	mmc5883_readManufac(&hi2c3, 0);
 800114a:	2100      	movs	r1, #0
 800114c:	482e      	ldr	r0, [pc, #184]	; (8001208 <main+0x174>)
 800114e:	f006 fdef 	bl	8007d30 <mmc5883_readManufac>
	mmc5883_readManufac(&hi2c4, 1);
 8001152:	2101      	movs	r1, #1
 8001154:	482d      	ldr	r0, [pc, #180]	; (800120c <main+0x178>)
 8001156:	f006 fdeb 	bl	8007d30 <mmc5883_readManufac>

	// LSM reset power
	lsm6ds3_powerReset();
 800115a:	f006 f8ef 	bl	800733c <lsm6ds3_powerReset>

	// LSM configure
	lsm6ds3_configure(&hi2c4, 0);
 800115e:	2100      	movs	r1, #0
 8001160:	482a      	ldr	r0, [pc, #168]	; (800120c <main+0x178>)
 8001162:	f006 f98d 	bl	8007480 <lsm6ds3_configure>

	// LSM read manufacturer
	lsm6ds3_readManufac(&hi2c4, 0);
 8001166:	2100      	movs	r1, #0
 8001168:	4828      	ldr	r0, [pc, #160]	; (800120c <main+0x178>)
 800116a:	f006 f9ff 	bl	800756c <lsm6ds3_readManufac>

	printf("------------------------------------------------\n");
 800116e:	4828      	ldr	r0, [pc, #160]	; (8001210 <main+0x17c>)
 8001170:	f008 f878 	bl	8009264 <puts>

	// initial 0.5s wait
	HAL_Delay(500);
 8001174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001178:	f001 fa06 	bl	8002588 <HAL_Delay>

	// development loop
	while(1) {

		// current consumption
		curr_readData(&hadc1, 0);
 800117c:	2100      	movs	r1, #0
 800117e:	4825      	ldr	r0, [pc, #148]	; (8001214 <main+0x180>)
 8001180:	f001 f902 	bl	8002388 <curr_readData>
		curr_readData(&hadc2, 1);
 8001184:	2101      	movs	r1, #1
 8001186:	4824      	ldr	r0, [pc, #144]	; (8001218 <main+0x184>)
 8001188:	f001 f8fe 	bl	8002388 <curr_readData>

		// MCP9884
		for(int i=0; i<7; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e006      	b.n	80011a0 <main+0x10c>
			mcp9884_readData(&hi2c2, i);
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	481b      	ldr	r0, [pc, #108]	; (8001204 <main+0x170>)
 8001196:	f006 fc6b 	bl	8007a70 <mcp9884_readData>
		for(int i=0; i<7; i++)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	ddf5      	ble.n	8001192 <main+0xfe>

		// MMC5883
		mmc5883_readTempData(&hi2c3, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4817      	ldr	r0, [pc, #92]	; (8001208 <main+0x174>)
 80011aa:	f006 ffd1 	bl	8008150 <mmc5883_readTempData>
		mmc5883_readTempData(&hi2c4, 1);
 80011ae:	2101      	movs	r1, #1
 80011b0:	4816      	ldr	r0, [pc, #88]	; (800120c <main+0x178>)
 80011b2:	f006 ffcd 	bl	8008150 <mmc5883_readTempData>
		mmc5883_readMagData(&hi2c3, 0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <main+0x174>)
 80011ba:	f006 fdfd 	bl	8007db8 <mmc5883_readMagData>
		mmc5883_readMagData(&hi2c4, 1);
 80011be:	2101      	movs	r1, #1
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <main+0x178>)
 80011c2:	f006 fdf9 	bl	8007db8 <mmc5883_readMagData>

		// LSM6DS3
		lsm6ds3_readAccData(&hi2c4, 0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <main+0x178>)
 80011ca:	f006 fa0d 	bl	80075e8 <lsm6ds3_readAccData>
		lsm6ds3_readGyroData(&hi2c4, 0);
 80011ce:	2100      	movs	r1, #0
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <main+0x178>)
 80011d2:	f006 fa99 	bl	8007708 <lsm6ds3_readGyroData>
		lsm6ds3_readTempData(&hi2c4, 0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <main+0x178>)
 80011da:	f006 fb23 	bl	8007824 <lsm6ds3_readTempData>

		printf("------------------------------------------------\n");
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <main+0x17c>)
 80011e0:	f008 f840 	bl	8009264 <puts>

		HAL_Delay(1000);
 80011e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e8:	f001 f9ce 	bl	8002588 <HAL_Delay>
		curr_readData(&hadc1, 0);
 80011ec:	e7c6      	b.n	800117c <main+0xe8>
 80011ee:	bf00      	nop
 80011f0:	0800cde0 	.word	0x0800cde0
 80011f4:	200002b0 	.word	0x200002b0
 80011f8:	200004dc 	.word	0x200004dc
 80011fc:	48001800 	.word	0x48001800
 8001200:	48000c00 	.word	0x48000c00
 8001204:	2000039c 	.word	0x2000039c
 8001208:	20000218 	.word	0x20000218
 800120c:	20000264 	.word	0x20000264
 8001210:	0800cdfc 	.word	0x0800cdfc
 8001214:	200003e8 	.word	0x200003e8
 8001218:	20000334 	.word	0x20000334

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0c0      	sub	sp, #256	; 0x100
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001226:	2244      	movs	r2, #68	; 0x44
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f007 f912 	bl	8008454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	228c      	movs	r2, #140	; 0x8c
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f007 f903 	bl	8008454 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001284:	2308      	movs	r3, #8
 8001286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 ff9b 	bl	80051dc <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ac:	f000 fc42 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012d2:	2103      	movs	r1, #3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fba7 	bl	8005a28 <HAL_RCC_ClockConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012e0:	f000 fc28 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <SystemClock_Config+0x178>)
 80012e6:	61fb      	str	r3, [r7, #28]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800130c:	2308      	movs	r3, #8
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800131c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fd84 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001332:	f000 fbff 	bl	8001b34 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001336:	f44f 7000 	mov.w	r0, #512	; 0x200
 800133a:	f003 fe27 	bl	8004f8c <HAL_PWREx_ControlVoltageScaling>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001344:	f000 fbf6 	bl	8001b34 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <SystemClock_Config+0x17c>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <SystemClock_Config+0x17c>)
 800134e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001352:	6593      	str	r3, [r2, #88]	; 0x58
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <SystemClock_Config+0x17c>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800135c:	463b      	mov	r3, r7
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	463b      	mov	r3, r7
 8001362:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001372:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001376:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001378:	2322      	movs	r3, #34	; 0x22
 800137a:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800137c:	2320      	movs	r3, #32
 800137e:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4618      	mov	r0, r3
 8001384:	f005 f852 	bl	800642c <HAL_RCCEx_CRSConfig>
}
 8001388:	bf00      	nop
 800138a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	00104186 	.word	0x00104186
 8001398:	40021000 	.word	0x40021000

0800139c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013c0:	4a30      	ldr	r2, [pc, #192]	; (8001484 <MX_ADC1_Init+0xe8>)
 80013c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_ADC1_Init+0xe4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC1_Init+0xe4>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC1_Init+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC1_Init+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC1_Init+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_ADC1_Init+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001420:	4817      	ldr	r0, [pc, #92]	; (8001480 <MX_ADC1_Init+0xe4>)
 8001422:	f001 fb19 	bl	8002a58 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800142c:	f000 fb82 	bl	8001b34 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_ADC1_Init+0xe4>)
 800143c:	f002 fbea 	bl	8003c14 <HAL_ADCEx_MultiModeConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001446:	f000 fb75 	bl	8001b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC1_Init+0xec>)
 800144c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144e:	2306      	movs	r3, #6
 8001450:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001456:	237f      	movs	r3, #127	; 0x7f
 8001458:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145a:	2304      	movs	r3, #4
 800145c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC1_Init+0xe4>)
 8001468:	f001 fe24 	bl	80030b4 <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001472:	f000 fb5f 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003e8 	.word	0x200003e8
 8001484:	50040000 	.word	0x50040000
 8001488:	10c00010 	.word	0x10c00010

0800148c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014a4:	4a29      	ldr	r2, [pc, #164]	; (800154c <MX_ADC2_Init+0xc0>)
 80014a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_ADC2_Init+0xbc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001504:	4810      	ldr	r0, [pc, #64]	; (8001548 <MX_ADC2_Init+0xbc>)
 8001506:	f001 faa7 	bl	8002a58 <HAL_ADC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001510:	f000 fb10 	bl	8001b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_ADC2_Init+0xc4>)
 8001516:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001518:	2306      	movs	r3, #6
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001520:	237f      	movs	r3, #127	; 0x7f
 8001522:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001524:	2304      	movs	r3, #4
 8001526:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_ADC2_Init+0xbc>)
 8001532:	f001 fdbf 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800153c:	f000 fafa 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000334 	.word	0x20000334
 800154c:	50040100 	.word	0x50040100
 8001550:	0c900008 	.word	0x0c900008

08001554 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_CAN1_Init+0x64>)
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <MX_CAN1_Init+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_CAN1_Init+0x64>)
 8001560:	2210      	movs	r2, #16
 8001562:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_CAN1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_CAN1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_CAN1_Init+0x64>)
 8001572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001576:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_CAN1_Init+0x64>)
 800157a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800157e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_CAN1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_CAN1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_CAN1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_CAN1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_CAN1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_CAN1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_CAN1_Init+0x64>)
 80015a6:	f002 fbe5 	bl	8003d74 <HAL_CAN_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80015b0:	f000 fac0 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000560 	.word	0x20000560
 80015bc:	40006400 	.word	0x40006400

080015c0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_CAN2_Init+0x64>)
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <MX_CAN2_Init+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_CAN2_Init+0x64>)
 80015cc:	2210      	movs	r2, #16
 80015ce:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_CAN2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_CAN2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_CAN2_Init+0x64>)
 80015de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_CAN2_Init+0x64>)
 80015e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015ea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_CAN2_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_CAN2_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_CAN2_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_CAN2_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_CAN2_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_CAN2_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_CAN2_Init+0x64>)
 8001612:	f002 fbaf 	bl	8003d74 <HAL_CAN_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800161c:	f000 fa8a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000450 	.word	0x20000450
 8001628:	40006800 	.word	0x40006800

0800162c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <MX_I2C2_Init+0x78>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <MX_I2C2_Init+0x7c>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_I2C2_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001644:	2201      	movs	r2, #1
 8001646:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_I2C2_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_I2C2_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <MX_I2C2_Init+0x74>)
 8001668:	f002 ff10 	bl	800448c <HAL_I2C_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001672:	f000 fa5f 	bl	8001b34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <MX_I2C2_Init+0x74>)
 800167a:	f003 fbe1 	bl	8004e40 <HAL_I2CEx_ConfigAnalogFilter>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001684:	f000 fa56 	bl	8001b34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_I2C2_Init+0x74>)
 800168c:	f003 fc23 	bl	8004ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001696:	f000 fa4d 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000039c 	.word	0x2000039c
 80016a4:	40005800 	.word	0x40005800
 80016a8:	10707dbc 	.word	0x10707dbc

080016ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_I2C3_Init+0x74>)
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <MX_I2C3_Init+0x78>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_I2C3_Init+0x74>)
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <MX_I2C3_Init+0x7c>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_I2C3_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_I2C3_Init+0x74>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_I2C3_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_I2C3_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_I2C3_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_I2C3_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_I2C3_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016e6:	480e      	ldr	r0, [pc, #56]	; (8001720 <MX_I2C3_Init+0x74>)
 80016e8:	f002 fed0 	bl	800448c <HAL_I2C_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016f2:	f000 fa1f 	bl	8001b34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <MX_I2C3_Init+0x74>)
 80016fa:	f003 fba1 	bl	8004e40 <HAL_I2CEx_ConfigAnalogFilter>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001704:	f000 fa16 	bl	8001b34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_I2C3_Init+0x74>)
 800170c:	f003 fbe3 	bl	8004ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001716:	f000 fa0d 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000218 	.word	0x20000218
 8001724:	40005c00 	.word	0x40005c00
 8001728:	10707dbc 	.word	0x10707dbc

0800172c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_I2C4_Init+0x78>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <MX_I2C4_Init+0x7c>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_I2C4_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001744:	2201      	movs	r2, #1
 8001746:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_I2C4_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C4_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <MX_I2C4_Init+0x74>)
 8001768:	f002 fe90 	bl	800448c <HAL_I2C_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001772:	f000 f9df 	bl	8001b34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <MX_I2C4_Init+0x74>)
 800177a:	f003 fb61 	bl	8004e40 <HAL_I2CEx_ConfigAnalogFilter>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001784:	f000 f9d6 	bl	8001b34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_I2C4_Init+0x74>)
 800178c:	f003 fba3 	bl	8004ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001796:	f000 f9cd 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000264 	.word	0x20000264
 80017a4:	40008400 	.word	0x40008400
 80017a8:	10707dbc 	.word	0x10707dbc

080017ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <MX_QUADSPI_Init+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017be:	2201      	movs	r2, #1
 80017c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017ca:	221f      	movs	r2, #31
 80017cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_QUADSPI_Init+0x50>)
 80017e8:	f003 fc36 	bl	8005058 <HAL_QSPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80017f2:	f000 f99f 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000588 	.word	0x20000588
 8001800:	a0001000 	.word	0xa0001000

08001804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_SPI1_Init+0x74>)
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <MX_SPI1_Init+0x78>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_SPI1_Init+0x74>)
 8001810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_SPI1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI1_Init+0x74>)
 800181e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI1_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_SPI1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI1_Init+0x74>)
 8001832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI1_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_SPI1_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI1_Init+0x74>)
 8001852:	2207      	movs	r2, #7
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_SPI1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI1_Init+0x74>)
 800185e:	2208      	movs	r2, #8
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_SPI1_Init+0x74>)
 8001864:	f004 fff2 	bl	800684c <HAL_SPI_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800186e:	f000 f961 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000478 	.word	0x20000478
 800187c:	40013000 	.word	0x40013000

08001880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <MX_USART2_UART_Init+0x5c>)
 8001888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018a8:	2208      	movs	r2, #8
 80018aa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_USART2_UART_Init+0x58>)
 80018c6:	f005 f864 	bl	8006992 <HAL_UART_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80018d0:	f000 f930 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200004dc 	.word	0x200004dc
 80018dc:	40004400 	.word	0x40004400

080018e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_USART3_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001904:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001908:	2208      	movs	r2, #8
 800190a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_USART3_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_USART3_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001926:	f005 f834 	bl	8006992 <HAL_UART_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8001930:	f000 f900 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200002b0 	.word	0x200002b0
 800193c:	40004800 	.word	0x40004800

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a70      	ldr	r2, [pc, #448]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800196e:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a6a      	ldr	r2, [pc, #424]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a64      	ldr	r2, [pc, #400]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a5e      	ldr	r2, [pc, #376]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e6:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <MX_GPIO_Init+0x1dc>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80019fe:	f003 fb1b 	bl	8005038 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2102      	movs	r1, #2
 8001a06:	4846      	ldr	r0, [pc, #280]	; (8001b20 <MX_GPIO_Init+0x1e0>)
 8001a08:	f002 fd28 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HOLD_Pin|SP1_WP_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2113      	movs	r1, #19
 8001a10:	4844      	ldr	r0, [pc, #272]	; (8001b24 <MX_GPIO_Init+0x1e4>)
 8001a12:	f002 fd23 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8001a16:	2200      	movs	r2, #0
 8001a18:	f240 611b 	movw	r1, #1563	; 0x61b
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f002 fd1c 	bl	800445c <HAL_GPIO_WritePin>
                          |TEST2_Pin|TEST1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2a:	483f      	ldr	r0, [pc, #252]	; (8001b28 <MX_GPIO_Init+0x1e8>)
 8001a2c:	f002 fd16 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin|I2C3_EN_Pin|I2C2_EN_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 4189 	mov.w	r1, #17536	; 0x4480
 8001a36:	483d      	ldr	r0, [pc, #244]	; (8001b2c <MX_GPIO_Init+0x1ec>)
 8001a38:	f002 fd10 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_EN_GPIO_Port, UART2_EN_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2104      	movs	r1, #4
 8001a40:	483b      	ldr	r0, [pc, #236]	; (8001b30 <MX_GPIO_Init+0x1f0>)
 8001a42:	f002 fd0b 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4830      	ldr	r0, [pc, #192]	; (8001b20 <MX_GPIO_Init+0x1e0>)
 8001a5e:	f002 fb6b 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HOLD_Pin SP1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_HOLD_Pin|SP1_WP_Pin;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	482a      	ldr	r0, [pc, #168]	; (8001b24 <MX_GPIO_Init+0x1e4>)
 8001a7a:	f002 fb5d 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin SPI1_CS3_Pin SPI1_CS2_Pin
                           TEST2_Pin TEST1_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8001a7e:	f240 631b 	movw	r3, #1563	; 0x61b
 8001a82:	61fb      	str	r3, [r7, #28]
                          |TEST2_Pin|TEST1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f002 fb4d 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481b      	ldr	r0, [pc, #108]	; (8001b24 <MX_GPIO_Init+0x1e4>)
 8001ab6:	f002 fb3f 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C4_EN_Pin */
  GPIO_InitStruct.Pin = I2C4_EN_Pin;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(I2C4_EN_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4815      	ldr	r0, [pc, #84]	; (8001b28 <MX_GPIO_Init+0x1e8>)
 8001ad4:	f002 fb30 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART3_EN_Pin I2C3_EN_Pin I2C2_EN_Pin */
  GPIO_InitStruct.Pin = UART3_EN_Pin|I2C3_EN_Pin|I2C2_EN_Pin;
 8001ad8:	f44f 4389 	mov.w	r3, #17536	; 0x4480
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	480e      	ldr	r0, [pc, #56]	; (8001b2c <MX_GPIO_Init+0x1ec>)
 8001af2:	f002 fb21 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin;
 8001af6:	2304      	movs	r3, #4
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART2_EN_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_GPIO_Init+0x1f0>)
 8001b0e:	f002 fb13 	bl	8004138 <HAL_GPIO_Init>

}
 8001b12:	bf00      	nop
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48001c00 	.word	0x48001c00
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000400 	.word	0x48000400
 8001b2c:	48000c00 	.word	0x48000c00
 8001b30:	48001800 	.word	0x48001800

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_MspInit+0x44>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_MspInit+0x44>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6613      	str	r3, [r2, #96]	; 0x60
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_MspInit+0x44>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_MspInit+0x44>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_MspInit+0x44>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_MspInit+0x44>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_ADC_MspInit+0xec>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12d      	bne.n	8001c06 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_ADC_MspInit+0xf0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <HAL_ADC_MspInit+0xf0>)
 8001bb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_ADC_MspInit+0xf0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001bc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF1_CUR_Pin;
 8001bec:	2308      	movs	r3, #8
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF1_CUR_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4820      	ldr	r0, [pc, #128]	; (8001c80 <HAL_ADC_MspInit+0xf8>)
 8001c00:	f002 fa9a 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c04:	e031      	b.n	8001c6a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_ADC_MspInit+0xfc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12c      	bne.n	8001c6a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_ADC_MspInit+0xf0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_ADC_MspInit+0xf0>)
 8001c18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_ADC_MspInit+0xf0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10b      	bne.n	8001c3a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001c28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_ADC_MspInit+0xf4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EF2_CUR_Pin|EF1_CUR_Pin;
 8001c52:	230c      	movs	r3, #12
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c56:	230b      	movs	r3, #11
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <HAL_ADC_MspInit+0xf8>)
 8001c66:	f002 fa67 	bl	8004138 <HAL_GPIO_Init>
}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	50040000 	.word	0x50040000
 8001c78:	20000204 	.word	0x20000204
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800
 8001c84:	50040100 	.word	0x50040100

08001c88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <HAL_CAN_MspInit+0x134>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d132      	bne.n	8001d10 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001caa:	4b45      	ldr	r3, [pc, #276]	; (8001dc0 <HAL_CAN_MspInit+0x138>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_CAN_MspInit+0x138>)
 8001cb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_CAN_MspInit+0x138>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10b      	bne.n	8001cd4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	4a3a      	ldr	r2, [pc, #232]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce0:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cfe:	2309      	movs	r3, #9
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	482f      	ldr	r0, [pc, #188]	; (8001dc8 <HAL_CAN_MspInit+0x140>)
 8001d0a:	f002 fa15 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d0e:	e051      	b.n	8001db4 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <HAL_CAN_MspInit+0x144>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d14c      	bne.n	8001db4 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_CAN_MspInit+0x138>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_CAN_MspInit+0x138>)
 8001d3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_CAN_MspInit+0x138>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10b      	bne.n	8001d5c <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_CAN_MspInit+0x13c>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d74:	2320      	movs	r3, #32
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001d84:	2303      	movs	r3, #3
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <HAL_CAN_MspInit+0x140>)
 8001d90:	f002 f9d2 	bl	8004138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d94:	2340      	movs	r3, #64	; 0x40
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001da4:	2308      	movs	r3, #8
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <HAL_CAN_MspInit+0x140>)
 8001db0:	f002 f9c2 	bl	8004138 <HAL_GPIO_Init>
}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40006400 	.word	0x40006400
 8001dc0:	20000208 	.word	0x20000208
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	48000400 	.word	0x48000400
 8001dcc:	40006800 	.word	0x40006800

08001dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_I2C_MspInit+0x13c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d128      	bne.n	8001e44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0e:	2312      	movs	r3, #18
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	483b      	ldr	r0, [pc, #236]	; (8001f14 <HAL_I2C_MspInit+0x144>)
 8001e26:	f002 f987 	bl	8004138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e34:	6593      	str	r3, [r2, #88]	; 0x58
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e42:	e05e      	b.n	8001f02 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a33      	ldr	r2, [pc, #204]	; (8001f18 <HAL_I2C_MspInit+0x148>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d12b      	bne.n	8001ea6 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001e66:	f003 f8e7 	bl	8005038 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e70:	2312      	movs	r3, #18
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4825      	ldr	r0, [pc, #148]	; (8001f1c <HAL_I2C_MspInit+0x14c>)
 8001e88:	f002 f956 	bl	8004138 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]
}
 8001ea4:	e02d      	b.n	8001f02 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_I2C_MspInit+0x150>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d128      	bne.n	8001f02 <HAL_I2C_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ec8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ece:	2312      	movs	r3, #18
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001eda:	2303      	movs	r3, #3
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480f      	ldr	r0, [pc, #60]	; (8001f24 <HAL_I2C_MspInit+0x154>)
 8001ee6:	f002 f927 	bl	8004138 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_I2C_MspInit+0x140>)
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	bf00      	nop
 8001f04:	3738      	adds	r7, #56	; 0x38
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40005800 	.word	0x40005800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	48001400 	.word	0x48001400
 8001f18:	40005c00 	.word	0x40005c00
 8001f1c:	48001800 	.word	0x48001800
 8001f20:	40008400 	.word	0x40008400
 8001f24:	48000400 	.word	0x48000400

08001f28 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <HAL_QSPI_MspInit+0xd8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d156      	bne.n	8001ff8 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6513      	str	r3, [r2, #80]	; 0x50
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	4a27      	ldr	r2, [pc, #156]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f68:	f043 0320 	orr.w	r3, r3, #32
 8001f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_QSPI_MspInit+0xdc>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fa4:	230a      	movs	r3, #10
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4816      	ldr	r0, [pc, #88]	; (8002008 <HAL_QSPI_MspInit+0xe0>)
 8001fb0:	f002 f8c2 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <HAL_QSPI_MspInit+0xe0>)
 8001fd2:	f002 f8b1 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CS3_Pin;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fe6:	230a      	movs	r3, #10
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CS3_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f002 f8a0 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	a0001000 	.word	0xa0001000
 8002004:	40021000 	.word	0x40021000
 8002008:	48001400 	.word	0x48001400

0800200c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_SPI_MspInit+0x7c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d128      	bne.n	8002080 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002038:	6613      	str	r3, [r2, #96]	; 0x60
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_SPI_MspInit+0x80>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_SPI_MspInit+0x80>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800205e:	23e0      	movs	r3, #224	; 0xe0
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800206e:	2305      	movs	r3, #5
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f002 f85c 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40013000 	.word	0x40013000
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_UART_MspInit+0xd8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d128      	bne.n	8002104 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <HAL_UART_MspInit+0xdc>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_UART_MspInit+0xdc>)
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_UART_MspInit+0xdc>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_UART_MspInit+0xdc>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_UART_MspInit+0xdc>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_UART_MspInit+0xdc>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 80020e2:	2360      	movs	r3, #96	; 0x60
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020f2:	2307      	movs	r3, #7
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	481c      	ldr	r0, [pc, #112]	; (8002170 <HAL_UART_MspInit+0xe0>)
 80020fe:	f002 f81b 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002102:	e02d      	b.n	8002160 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <HAL_UART_MspInit+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d128      	bne.n	8002160 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_UART_MspInit+0xdc>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_UART_MspInit+0xdc>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_UART_MspInit+0xdc>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_UART_MspInit+0xdc>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_UART_MspInit+0xdc>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_UART_MspInit+0xdc>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 800213e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002150:	2307      	movs	r3, #7
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_UART_MspInit+0xe0>)
 800215c:	f001 ffec 	bl	8004138 <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	3730      	adds	r7, #48	; 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000
 8002170:	48000c00 	.word	0x48000c00
 8002174:	40004800 	.word	0x40004800

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800217c:	e7fe      	b.n	800217c <NMI_Handler+0x4>

0800217e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <MemManage_Handler+0x4>

0800218a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <UsageFault_Handler+0x4>

08002196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c4:	f000 f9c0 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
	return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_kill>:

int _kill(int pid, int sig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021e6:	f006 f90b 	bl	8008400 <__errno>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2216      	movs	r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
	return -1;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_exit>:

void _exit (int status)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ffe7 	bl	80021dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800220e:	e7fe      	b.n	800220e <_exit+0x12>

08002210 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e00a      	b.n	8002238 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002222:	f3af 8000 	nop.w
 8002226:	4601      	mov	r1, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	b2ca      	uxtb	r2, r1
 8002230:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf0      	blt.n	8002222 <_read+0x12>
	}

return len;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_close>:
	}
	return len;
}

int _close(int file)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	return -1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002272:	605a      	str	r2, [r3, #4]
	return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_isatty>:

int _isatty(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
	return 0;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f006 f88c 	bl	8008400 <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20050000 	.word	0x20050000
 8002314:	00000400 	.word	0x00000400
 8002318:	2000020c 	.word	0x2000020c
 800231c:	200005f0 	.word	0x200005f0

08002320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <SystemInit+0x5c>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a14      	ldr	r2, [pc, #80]	; (800237c <SystemInit+0x5c>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <SystemInit+0x60>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <SystemInit+0x60>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <SystemInit+0x60>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <SystemInit+0x60>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <SystemInit+0x60>)
 800234c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002350:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002354:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <SystemInit+0x60>)
 8002358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800235c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <SystemInit+0x60>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <SystemInit+0x60>)
 8002364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SystemInit+0x60>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00
 8002380:	40021000 	.word	0x40021000
 8002384:	00000000 	.word	0x00000000

08002388 <curr_readData>:
	}


/* TESTING FUNCTIONS */

	void curr_readData(ADC_HandleTypeDef *handler, int device) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
		//start ADC conversion
		HAL_ADC_Start(handler);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fcba 	bl	8002d0c <HAL_ADC_Start>

		//poll ADC peripheral
		HAL_ADC_PollForConversion(handler, 1);
 8002398:	2101      	movs	r1, #1
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fda4 	bl	8002ee8 <HAL_ADC_PollForConversion>

		//read ADC conversion result
		uint16_t raw_value = HAL_ADC_GetValue(handler);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fe79 	bl	8003098 <HAL_ADC_GetValue>
 80023a6:	4603      	mov	r3, r0
 80023a8:	81fb      	strh	r3, [r7, #14]

		//stop ADC conversion
		HAL_ADC_Stop(handler);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fd68 	bl	8002e80 <HAL_ADC_Stop>

		//compute current consumption from ADC values in [mA]
		float value = (3000 * (float)VREFINT_CAL / (float)raw_value) / 1000;
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <curr_readData+0xb0>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800243c <curr_readData+0xb4>
 80023c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002440 <curr_readData+0xb8>
 80023d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023da:	edc7 7a02 	vstr	s15, [r7, #8]
		value = (value - CUR_IOS * CUR_RMON) / (CUR_GAIN * CUR_RMON);
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f7fe f8c2 	bl	8000568 <__aeabi_f2d>
 80023e4:	a310      	add	r3, pc, #64	; (adr r3, 8002428 <curr_readData+0xa0>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd ff5d 	bl	80002a8 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	a30e      	add	r3, pc, #56	; (adr r3, 8002430 <curr_readData+0xa8>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe fa36 	bl	800086c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fbfe 	bl	8000c08 <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	60bb      	str	r3, [r7, #8]

		log_send(2, "curr_readData", device, "na", value);
 8002410:	ed97 0a02 	vldr	s0, [r7, #8]
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <curr_readData+0xbc>)
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	490b      	ldr	r1, [pc, #44]	; (8002448 <curr_readData+0xc0>)
 800241a:	2002      	movs	r0, #2
 800241c:	f005 ff68 	bl	80082f0 <log_send>
	}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	eb851eb8 	.word	0xeb851eb8
 800242c:	3faeb851 	.word	0x3faeb851
 8002430:	33333333 	.word	0x33333333
 8002434:	400f3333 	.word	0x400f3333
 8002438:	1fff75aa 	.word	0x1fff75aa
 800243c:	453b8000 	.word	0x453b8000
 8002440:	447a0000 	.word	0x447a0000
 8002444:	0800ce30 	.word	0x0800ce30
 8002448:	0800ce34 	.word	0x0800ce34

0800244c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002450:	f7ff ff66 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002454:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002460:	480a      	ldr	r0, [pc, #40]	; (800248c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002466:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
	ldr	r2, =_sbss
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <LoopForever+0x12>)
	b	LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800246e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002470:	f842 3b04 	str.w	r3, [r2], #4

08002474 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LoopForever+0x16>)
	cmp	r2, r3
 8002476:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247a:	f005 ffc7 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247e:	f7fe fe09 	bl	8001094 <main>

08002482 <LoopForever>:

LoopForever:
    b LoopForever
 8002482:	e7fe      	b.n	8002482 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002484:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8002488:	0800d69c 	.word	0x0800d69c
	ldr	r0, =_sdata
 800248c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002490:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8002494:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8002498:	200005f0 	.word	0x200005f0

0800249c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_2_IRQHandler>

0800249e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f001 fe11 	bl	80040d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 f80e 	bl	80024d0 <HAL_InitTick>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	e001      	b.n	80024c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024c0:	f7ff fb3e 	bl	8001b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_InitTick+0x6c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_InitTick+0x70>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_InitTick+0x6c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fe0f 	bl	800411e <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d809      	bhi.n	8002520 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002514:	f001 fde7 	bl	80040e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_InitTick+0x74>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e007      	b.n	8002530 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e004      	b.n	8002530 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e001      	b.n	8002530 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000008 	.word	0x20000008
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008
 800256c:	200005d4 	.word	0x200005d4

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200005d4 	.word	0x200005d4

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008

080025d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <LL_ADC_SetOffset+0x44>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	4313      	orrs	r3, r2
 8002668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	03fff000 	.word	0x03fff000

08002680 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3360      	adds	r3, #96	; 0x60
 800268e:	461a      	mov	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	615a      	str	r2, [r3, #20]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3330      	adds	r3, #48	; 0x30
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	211f      	movs	r1, #31
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	f003 011f 	and.w	r1, r3, #31
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002786:	b480      	push	{r7}
 8002788:	b087      	sub	sp, #28
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3314      	adds	r3, #20
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	0e5b      	lsrs	r3, r3, #25
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0d1b      	lsrs	r3, r3, #20
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2107      	movs	r1, #7
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	0d1b      	lsrs	r3, r3, #20
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	431a      	orrs	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0318 	and.w	r3, r3, #24
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002800:	40d9      	lsrs	r1, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	400b      	ands	r3, r1
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	431a      	orrs	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	0007ffff 	.word	0x0007ffff

08002824 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 031f 	and.w	r3, r3, #31
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800286c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6093      	str	r3, [r2, #8]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002894:	d101      	bne.n	800289a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e4:	d101      	bne.n	80028ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002934:	f043 0202 	orr.w	r2, r3, #2
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <LL_ADC_IsEnabled+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_ADC_IsEnabled+0x1a>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d101      	bne.n	8002986 <LL_ADC_IsDisableOngoing+0x18>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_ADC_IsDisableOngoing+0x1a>
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d0:	f043 0210 	orr.w	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d101      	bne.n	80029fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e139      	b.n	8002ce6 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff f881 	bl	8001b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fef1 	bl	8002880 <LL_ADC_IsDeepPowerDownEnabled>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fed7 	bl	800285c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff0c 	bl	80028d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d115      	bne.n	8002aea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fef0 	bl	80028a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac8:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_ADC_Init+0x298>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	4a89      	ldr	r2, [pc, #548]	; (8002cf4 <HAL_ADC_Init+0x29c>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002adc:	e002      	b.n	8002ae4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f9      	bne.n	8002ade <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff feee 	bl	80028d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff62 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8002b20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80d2 	bne.w	8002cd4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80ce 	bne.w	8002cd4 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b40:	f043 0202 	orr.w	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fefb 	bl	8002948 <LL_ADC_IsEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d115      	bne.n	8002b84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b58:	4867      	ldr	r0, [pc, #412]	; (8002cf8 <HAL_ADC_Init+0x2a0>)
 8002b5a:	f7ff fef5 	bl	8002948 <LL_ADC_IsEnabled>
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4866      	ldr	r0, [pc, #408]	; (8002cfc <HAL_ADC_Init+0x2a4>)
 8002b62:	f7ff fef1 	bl	8002948 <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	431c      	orrs	r4, r3
 8002b6a:	4865      	ldr	r0, [pc, #404]	; (8002d00 <HAL_ADC_Init+0x2a8>)
 8002b6c:	f7ff feec 	bl	8002948 <LL_ADC_IsEnabled>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4323      	orrs	r3, r4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4861      	ldr	r0, [pc, #388]	; (8002d04 <HAL_ADC_Init+0x2ac>)
 8002b80:	f7ff fd26 	bl	80025d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7e5b      	ldrb	r3, [r3, #25]
 8002b88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d106      	bne.n	8002bc0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	045b      	lsls	r3, r3, #17
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_ADC_Init+0x2b0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fef5 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8002bfa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff16 	bl	8002a32 <LL_ADC_INJ_IsConversionOngoing>
 8002c06:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d140      	bne.n	8002c90 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d13d      	bne.n	8002c90 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7e1b      	ldrb	r3, [r3, #24]
 8002c1c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c1e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c36:	f023 0306 	bic.w	r3, r3, #6
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d118      	bne.n	8002c80 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c64:	4311      	orrs	r1, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c70:	430a      	orrs	r2, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e007      	b.n	8002c90 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10c      	bne.n	8002cb2 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f023 010f 	bic.w	r1, r3, #15
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb0:	e007      	b.n	8002cc2 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 020f 	bic.w	r2, r2, #15
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8002cd2:	e007      	b.n	8002ce4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f043 0210 	orr.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	053e2d63 	.word	0x053e2d63
 8002cf8:	50040000 	.word	0x50040000
 8002cfc:	50040100 	.word	0x50040100
 8002d00:	50040200 	.word	0x50040200
 8002d04:	50040300 	.word	0x50040300
 8002d08:	fff0c007 	.word	0xfff0c007

08002d0c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d14:	4857      	ldr	r0, [pc, #348]	; (8002e74 <HAL_ADC_Start+0x168>)
 8002d16:	f7ff fd85 	bl	8002824 <LL_ADC_GetMultimode>
 8002d1a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fe5f 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 809c 	bne.w	8002e66 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_Start+0x30>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e097      	b.n	8002e6c <HAL_ADC_Start+0x160>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fe7d 	bl	8003a44 <ADC_Enable>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 8083 	bne.w	8002e5c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <HAL_ADC_Start+0x16c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d002      	beq.n	8002d7a <HAL_ADC_Start+0x6e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e000      	b.n	8002d7c <HAL_ADC_Start+0x70>
 8002d7a:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <HAL_ADC_Start+0x170>)
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d002      	beq.n	8002d8a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da2:	d106      	bne.n	8002db2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f023 0206 	bic.w	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db0:	e002      	b.n	8002db8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	221c      	movs	r2, #28
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <HAL_ADC_Start+0x16c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d002      	beq.n	8002dd8 <HAL_ADC_Start+0xcc>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e000      	b.n	8002dda <HAL_ADC_Start+0xce>
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_ADC_Start+0x170>)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d008      	beq.n	8002df4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d002      	beq.n	8002df4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d114      	bne.n	8002e1e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fdbc 	bl	8002994 <LL_ADC_REG_StartConversion>
 8002e1c:	e025      	b.n	8002e6a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <HAL_ADC_Start+0x16c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d002      	beq.n	8002e3a <HAL_ADC_Start+0x12e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	e000      	b.n	8002e3c <HAL_ADC_Start+0x130>
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_ADC_Start+0x170>)
 8002e3c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00f      	beq.n	8002e6a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	; 0x58
 8002e5a:	e006      	b.n	8002e6a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002e64:	e001      	b.n	8002e6a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	50040300 	.word	0x50040300
 8002e78:	50040100 	.word	0x50040100
 8002e7c:	50040000 	.word	0x50040000

08002e80 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_Stop+0x16>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e023      	b.n	8002ede <HAL_ADC_Stop+0x5e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fd13 	bl	80038cc <ADC_ConversionStop>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fe29 	bl	8003b08 <ADC_Disable>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef2:	4866      	ldr	r0, [pc, #408]	; (800308c <HAL_ADC_PollForConversion+0x1a4>)
 8002ef4:	f7ff fc96 	bl	8002824 <LL_ADC_GetMultimode>
 8002ef8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d102      	bne.n	8002f08 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f02:	2308      	movs	r3, #8
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e02a      	b.n	8002f5e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d002      	beq.n	8002f1a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	d111      	bne.n	8002f3e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0a4      	b.n	8003082 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f38:	2304      	movs	r3, #4
 8002f3a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f3c:	e00f      	b.n	8002f5e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f3e:	4853      	ldr	r0, [pc, #332]	; (800308c <HAL_ADC_PollForConversion+0x1a4>)
 8002f40:	f7ff fc7e 	bl	8002840 <LL_ADC_GetMultiDMATransfer>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e093      	b.n	8003082 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f5e:	f7ff fb07 	bl	8002570 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f64:	e021      	b.n	8002faa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6c:	d01d      	beq.n	8002faa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f6e:	f7ff faff 	bl	8002570 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <HAL_ADC_PollForConversion+0x9c>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d112      	bne.n	8002faa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f043 0204 	orr.w	r2, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e06b      	b.n	8003082 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0d6      	beq.n	8002f66 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fb9d 	bl	8002708 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01c      	beq.n	800300e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7e5b      	ldrb	r3, [r3, #25]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d118      	bne.n	800300e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d111      	bne.n	800300e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_ADC_PollForConversion+0x1a8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d002      	beq.n	800301e <HAL_ADC_PollForConversion+0x136>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e000      	b.n	8003020 <HAL_ADC_PollForConversion+0x138>
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_ADC_PollForConversion+0x1ac>)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	4293      	cmp	r3, r2
 8003026:	d008      	beq.n	800303a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d002      	beq.n	800303a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b09      	cmp	r3, #9
 8003038:	d104      	bne.n	8003044 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e00c      	b.n	800305e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_ADC_PollForConversion+0x1a8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d002      	beq.n	8003054 <HAL_ADC_PollForConversion+0x16c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e000      	b.n	8003056 <HAL_ADC_PollForConversion+0x16e>
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_ADC_PollForConversion+0x1ac>)
 8003056:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d104      	bne.n	800306e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2208      	movs	r2, #8
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e008      	b.n	8003080 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	220c      	movs	r2, #12
 800307e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	50040300 	.word	0x50040300
 8003090:	50040100 	.word	0x50040100
 8003094:	50040000 	.word	0x50040000

08003098 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0b6      	sub	sp, #216	; 0xd8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x22>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e3e3      	b.n	800389e <HAL_ADC_ConfigChannel+0x7ea>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fc7e 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 83c4 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	d824      	bhi.n	8003142 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	3b02      	subs	r3, #2
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d81b      	bhi.n	800313a <HAL_ADC_ConfigChannel+0x86>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_ADC_ConfigChannel+0x54>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	08003121 	.word	0x08003121
 8003110:	08003129 	.word	0x08003129
 8003114:	08003131 	.word	0x08003131
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	220c      	movs	r2, #12
 800311c:	605a      	str	r2, [r3, #4]
          break;
 800311e:	e011      	b.n	8003144 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2212      	movs	r2, #18
 8003124:	605a      	str	r2, [r3, #4]
          break;
 8003126:	e00d      	b.n	8003144 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2218      	movs	r2, #24
 800312c:	605a      	str	r2, [r3, #4]
          break;
 800312e:	e009      	b.n	8003144 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003136:	605a      	str	r2, [r3, #4]
          break;
 8003138:	e004      	b.n	8003144 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2206      	movs	r2, #6
 800313e:	605a      	str	r2, [r3, #4]
          break;
 8003140:	e000      	b.n	8003144 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003142:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	f7ff faec 	bl	800272e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fc42 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8003160:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fc62 	bl	8002a32 <LL_ADC_INJ_IsConversionOngoing>
 800316e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003172:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 81c1 	bne.w	80034fe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800317c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 81bc 	bne.w	80034fe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318e:	d10f      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	4619      	mov	r1, r3
 800319c:	f7ff faf3 	bl	8002786 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fa9a 	bl	80026e2 <LL_ADC_SetSamplingTimeCommonConfig>
 80031ae:	e00e      	b.n	80031ce <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	461a      	mov	r2, r3
 80031be:	f7ff fae2 	bl	8002786 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fa8a 	bl	80026e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	08db      	lsrs	r3, r3, #3
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d00a      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6919      	ldr	r1, [r3, #16]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003200:	f7ff fa1a 	bl	8002638 <LL_ADC_SetOffset>
 8003204:	e17b      	b.n	80034fe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa37 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x17e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fa2c 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	e01e      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1bc>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fa21 	bl	8002680 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003258:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e004      	b.n	800326e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x1d4>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	e018      	b.n	80032ba <HAL_ADC_ConfigChannel+0x206>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800329c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80032ac:	2320      	movs	r3, #32
 80032ae:	e004      	b.n	80032ba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80032b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d106      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f9f0 	bl	80026ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f9d4 	bl	8002680 <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x244>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff f9c9 	bl	8002680 <LL_ADC_GetOffsetChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	f003 021f 	and.w	r2, r3, #31
 80032f6:	e01e      	b.n	8003336 <HAL_ADC_ConfigChannel+0x282>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff f9be 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8003304:	4603      	mov	r3, r0
 8003306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800331a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800331e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800332a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_ADC_ConfigChannel+0x29a>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0e9b      	lsrs	r3, r3, #26
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	e018      	b.n	8003380 <HAL_ADC_ConfigChannel+0x2cc>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800336a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003372:	2320      	movs	r3, #32
 8003374:	e004      	b.n	8003380 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003380:	429a      	cmp	r2, r3
 8003382:	d106      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2200      	movs	r2, #0
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff f98d 	bl	80026ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f971 	bl	8002680 <LL_ADC_GetOffsetChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_ADC_ConfigChannel+0x30a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f966 	bl	8002680 <LL_ADC_GetOffsetChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	0e9b      	lsrs	r3, r3, #26
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	e01e      	b.n	80033fc <HAL_ADC_ConfigChannel+0x348>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff f95b 	bl	8002680 <LL_ADC_GetOffsetChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e004      	b.n	80033fa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80033f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x360>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	e016      	b.n	8003442 <HAL_ADC_ConfigChannel+0x38e>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800342c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e004      	b.n	8003442 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003442:	429a      	cmp	r2, r3
 8003444:	d106      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f92c 	bl	80026ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2103      	movs	r1, #3
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f910 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x3cc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2103      	movs	r1, #3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f905 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	f003 021f 	and.w	r2, r3, #31
 800347e:	e017      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x3fc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2103      	movs	r1, #3
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f8fa 	bl	8002680 <LL_ADC_GetOffsetChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800349a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800349c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e003      	b.n	80034ae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80034a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x414>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	e011      	b.n	80034ec <HAL_ADC_ConfigChannel+0x438>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e003      	b.n	80034ec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d106      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2103      	movs	r1, #3
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f8d7 	bl	80026ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fa20 	bl	8002948 <LL_ADC_IsEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 8140 	bne.w	8003790 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	461a      	mov	r2, r3
 800351e:	f7ff f95d 	bl	80027dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a8f      	ldr	r2, [pc, #572]	; (8003764 <HAL_ADC_ConfigChannel+0x6b0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	f040 8131 	bne.w	8003790 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x4a2>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	3301      	adds	r3, #1
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2b09      	cmp	r3, #9
 800354c:	bf94      	ite	ls
 800354e:	2301      	movls	r3, #1
 8003550:	2300      	movhi	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e019      	b.n	800358a <HAL_ADC_ConfigChannel+0x4d6>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003566:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e003      	b.n	800357a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2b09      	cmp	r3, #9
 8003582:	bf94      	ite	ls
 8003584:	2301      	movls	r3, #1
 8003586:	2300      	movhi	r3, #0
 8003588:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358a:	2b00      	cmp	r3, #0
 800358c:	d079      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x4f6>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	3301      	adds	r3, #1
 80035a2:	069b      	lsls	r3, r3, #26
 80035a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a8:	e015      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x522>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e003      	b.n	80035ce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80035c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	069b      	lsls	r3, r3, #26
 80035d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x542>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0e9b      	lsrs	r3, r3, #26
 80035e8:	3301      	adds	r3, #1
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	e017      	b.n	8003626 <HAL_ADC_ConfigChannel+0x572>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	ea42 0103 	orr.w	r1, r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x598>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	0e9b      	lsrs	r3, r3, #26
 800363c:	3301      	adds	r3, #1
 800363e:	f003 021f 	and.w	r2, r3, #31
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	e018      	b.n	800367e <HAL_ADC_ConfigChannel+0x5ca>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f003 021f 	and.w	r2, r3, #31
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367e:	430b      	orrs	r3, r1
 8003680:	e081      	b.n	8003786 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_ADC_ConfigChannel+0x5ea>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	0e9b      	lsrs	r3, r3, #26
 8003694:	3301      	adds	r3, #1
 8003696:	069b      	lsls	r3, r3, #26
 8003698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369c:	e015      	b.n	80036ca <HAL_ADC_ConfigChannel+0x616>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	069b      	lsls	r3, r3, #26
 80036c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x636>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0e9b      	lsrs	r3, r3, #26
 80036dc:	3301      	adds	r3, #1
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	e017      	b.n	800371a <HAL_ADC_ConfigChannel+0x666>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
  return result;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	ea42 0103 	orr.w	r1, r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x692>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	3301      	adds	r3, #1
 8003732:	f003 021f 	and.w	r2, r3, #31
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	3b1e      	subs	r3, #30
 800373e:	051b      	lsls	r3, r3, #20
 8003740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003744:	e01e      	b.n	8003784 <HAL_ADC_ConfigChannel+0x6d0>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	613b      	str	r3, [r7, #16]
  return result;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800375e:	2320      	movs	r3, #32
 8003760:	e006      	b.n	8003770 <HAL_ADC_ConfigChannel+0x6bc>
 8003762:	bf00      	nop
 8003764:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f003 021f 	and.w	r2, r3, #31
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	3b1e      	subs	r3, #30
 800377e:	051b      	lsls	r3, r3, #20
 8003780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003784:	430b      	orrs	r3, r1
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	4619      	mov	r1, r3
 800378c:	f7fe fffb 	bl	8002786 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d07a      	beq.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379c:	4843      	ldr	r0, [pc, #268]	; (80038ac <HAL_ADC_ConfigChannel+0x7f8>)
 800379e:	f7fe ff3d 	bl	800261c <LL_ADC_GetCommonPathInternalCh>
 80037a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a41      	ldr	r2, [pc, #260]	; (80038b0 <HAL_ADC_ConfigChannel+0x7fc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d12c      	bne.n	800380a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d126      	bne.n	800380a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <HAL_ADC_ConfigChannel+0x800>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_ADC_ConfigChannel+0x71c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3b      	ldr	r2, [pc, #236]	; (80038b8 <HAL_ADC_ConfigChannel+0x804>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d15d      	bne.n	800388c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037d8:	4619      	mov	r1, r3
 80037da:	4834      	ldr	r0, [pc, #208]	; (80038ac <HAL_ADC_ConfigChannel+0x7f8>)
 80037dc:	f7fe ff0b 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_ADC_ConfigChannel+0x808>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	4a36      	ldr	r2, [pc, #216]	; (80038c0 <HAL_ADC_ConfigChannel+0x80c>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037fa:	e002      	b.n	8003802 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3b01      	subs	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f9      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003808:	e040      	b.n	800388c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_ADC_ConfigChannel+0x810>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d118      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x792>
 8003814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d112      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <HAL_ADC_ConfigChannel+0x800>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x780>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <HAL_ADC_ConfigChannel+0x804>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d12d      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383c:	4619      	mov	r1, r3
 800383e:	481b      	ldr	r0, [pc, #108]	; (80038ac <HAL_ADC_ConfigChannel+0x7f8>)
 8003840:	f7fe fed9 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003844:	e024      	b.n	8003890 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <HAL_ADC_ConfigChannel+0x814>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d120      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11a      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <HAL_ADC_ConfigChannel+0x800>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d115      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800386a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800386e:	4619      	mov	r1, r3
 8003870:	480e      	ldr	r0, [pc, #56]	; (80038ac <HAL_ADC_ConfigChannel+0x7f8>)
 8003872:	f7fe fec0 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
 8003876:	e00c      	b.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800388a:	e002      	b.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800389a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	37d8      	adds	r7, #216	; 0xd8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	80080000 	.word	0x80080000
 80038ac:	50040300 	.word	0x50040300
 80038b0:	c7520000 	.word	0xc7520000
 80038b4:	50040000 	.word	0x50040000
 80038b8:	50040200 	.word	0x50040200
 80038bc:	20000000 	.word	0x20000000
 80038c0:	053e2d63 	.word	0x053e2d63
 80038c4:	cb840000 	.word	0xcb840000
 80038c8:	80000001 	.word	0x80000001

080038cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff f87e 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 80038e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff f89f 	bl	8002a32 <LL_ADC_INJ_IsConversionOngoing>
 80038f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8098 	beq.w	8003a34 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02a      	beq.n	8003968 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7e5b      	ldrb	r3, [r3, #25]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d126      	bne.n	8003968 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7e1b      	ldrb	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d122      	bne.n	8003968 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003926:	e014      	b.n	8003952 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <ADC_ConversionStop+0x174>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d90d      	bls.n	800394c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f043 0210 	orr.w	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e074      	b.n	8003a36 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3301      	adds	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d1e3      	bne.n	8003928 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2240      	movs	r2, #64	; 0x40
 8003966:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d014      	beq.n	8003998 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff f836 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fff3 	bl	800296e <LL_ADC_IsDisableOngoing>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f812 	bl	80029bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d014      	beq.n	80039c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f845 	bl	8002a32 <LL_ADC_INJ_IsConversionOngoing>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00c      	beq.n	80039c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ffdb 	bl	800296e <LL_ADC_IsDisableOngoing>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f821 	bl	8002a0a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d005      	beq.n	80039da <ADC_ConversionStop+0x10e>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d105      	bne.n	80039e0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80039d4:	230c      	movs	r3, #12
 80039d6:	617b      	str	r3, [r7, #20]
        break;
 80039d8:	e005      	b.n	80039e6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80039da:	2308      	movs	r3, #8
 80039dc:	617b      	str	r3, [r7, #20]
        break;
 80039de:	e002      	b.n	80039e6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039e0:	2304      	movs	r3, #4
 80039e2:	617b      	str	r3, [r7, #20]
        break;
 80039e4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039e6:	f7fe fdc3 	bl	8002570 <HAL_GetTick>
 80039ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ec:	e01b      	b.n	8003a26 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039ee:	f7fe fdbf 	bl	8002570 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	d914      	bls.n	8003a26 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	f043 0210 	orr.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1dc      	bne.n	80039ee <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	a33fffff 	.word	0xa33fffff

08003a44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe ff79 	bl	8002948 <LL_ADC_IsEnabled>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d14d      	bne.n	8003af8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <ADC_Enable+0xc0>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e039      	b.n	8003afa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe ff34 	bl	80028f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a90:	f7fe fd6e 	bl	8002570 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a96:	e028      	b.n	8003aea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe ff53 	bl	8002948 <LL_ADC_IsEnabled>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d104      	bne.n	8003ab2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe ff23 	bl	80028f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ab2:	f7fe fd5d 	bl	8002570 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d914      	bls.n	8003aea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d00d      	beq.n	8003aea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	f043 0210 	orr.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e007      	b.n	8003afa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d1cf      	bne.n	8003a98 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	8000003f 	.word	0x8000003f

08003b08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe ff2a 	bl	800296e <LL_ADC_IsDisableOngoing>
 8003b1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe ff11 	bl	8002948 <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d047      	beq.n	8003bbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d144      	bne.n	8003bbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 030d 	and.w	r3, r3, #13
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10c      	bne.n	8003b5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe feeb 	bl	8002920 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b52:	f7fe fd0d 	bl	8002570 <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b58:	e029      	b.n	8003bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e023      	b.n	8003bbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b76:	f7fe fcfb 	bl	8002570 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d914      	bls.n	8003bae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1dc      	bne.n	8003b76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <LL_ADC_IsEnabled>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <LL_ADC_IsEnabled+0x18>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_ADC_IsEnabled+0x1a>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_REG_IsConversionOngoing>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b0a1      	sub	sp, #132	; 0x84
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e093      	b.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a47      	ldr	r2, [pc, #284]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d102      	bne.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c4c:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e001      	b.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e072      	b.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ffb8 	bl	8003bec <LL_ADC_REG_IsConversionOngoing>
 8003c7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ffb2 	bl	8003bec <LL_ADC_REG_IsConversionOngoing>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d154      	bne.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d151      	bne.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003c96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02c      	beq.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cb2:	035b      	lsls	r3, r3, #13
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cbc:	4829      	ldr	r0, [pc, #164]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003cbe:	f7ff ff82 	bl	8003bc6 <LL_ADC_IsEnabled>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4828      	ldr	r0, [pc, #160]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cc6:	f7ff ff7e 	bl	8003bc6 <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	431c      	orrs	r4, r3
 8003cce:	4828      	ldr	r0, [pc, #160]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003cd0:	f7ff ff79 	bl	8003bc6 <LL_ADC_IsEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4323      	orrs	r3, r4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d137      	bne.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ce4:	f023 030f 	bic.w	r3, r3, #15
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	6811      	ldr	r1, [r2, #0]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf8:	e028      	b.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d06:	4817      	ldr	r0, [pc, #92]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d08:	f7ff ff5d 	bl	8003bc6 <LL_ADC_IsEnabled>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4816      	ldr	r0, [pc, #88]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d10:	f7ff ff59 	bl	8003bc6 <LL_ADC_IsEnabled>
 8003d14:	4603      	mov	r3, r0
 8003d16:	431c      	orrs	r4, r3
 8003d18:	4815      	ldr	r0, [pc, #84]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003d1a:	f7ff ff54 	bl	8003bc6 <LL_ADC_IsEnabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4323      	orrs	r3, r4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d112      	bne.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d2e:	f023 030f 	bic.w	r3, r3, #15
 8003d32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d36:	e009      	b.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	f043 0220 	orr.w	r2, r3, #32
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d4a:	e000      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3784      	adds	r7, #132	; 0x84
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	50040000 	.word	0x50040000
 8003d68:	50040100 	.word	0x50040100
 8003d6c:	50040300 	.word	0x50040300
 8003d70:	50040200 	.word	0x50040200

08003d74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0ed      	b.n	8003f62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd ff78 	bl	8001c88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0202 	bic.w	r2, r2, #2
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da8:	f7fe fbe2 	bl	8002570 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dae:	e012      	b.n	8003dd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003db0:	f7fe fbde 	bl	8002570 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b0a      	cmp	r3, #10
 8003dbc:	d90b      	bls.n	8003dd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2205      	movs	r2, #5
 8003dce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0c5      	b.n	8003f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df4:	f7fe fbbc 	bl	8002570 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dfa:	e012      	b.n	8003e22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dfc:	f7fe fbb8 	bl	8002570 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b0a      	cmp	r3, #10
 8003e08:	d90b      	bls.n	8003e22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2205      	movs	r2, #5
 8003e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e09f      	b.n	8003f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0e5      	beq.n	8003dfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7e1b      	ldrb	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e007      	b.n	8003e5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7e5b      	ldrb	r3, [r3, #25]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d108      	bne.n	8003e74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7e9b      	ldrb	r3, [r3, #26]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d108      	bne.n	8003e9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0220 	orr.w	r2, r2, #32
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e007      	b.n	8003eae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0220 	bic.w	r2, r2, #32
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7edb      	ldrb	r3, [r3, #27]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d108      	bne.n	8003ec8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0210 	bic.w	r2, r2, #16
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e007      	b.n	8003ed8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0210 	orr.w	r2, r2, #16
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7f1b      	ldrb	r3, [r3, #28]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d108      	bne.n	8003ef2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e007      	b.n	8003f02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0208 	bic.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7f5b      	ldrb	r3, [r3, #29]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0204 	orr.w	r2, r2, #4
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e007      	b.n	8003f2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <__NVIC_SetPriorityGrouping>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	60d3      	str	r3, [r2, #12]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <__NVIC_GetPriorityGrouping>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <__NVIC_GetPriorityGrouping+0x18>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 0307 	and.w	r3, r3, #7
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <__NVIC_SetPriority>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	6039      	str	r1, [r7, #0]
 8003fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	db0a      	blt.n	8003ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	490c      	ldr	r1, [pc, #48]	; (800401c <__NVIC_SetPriority+0x4c>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	0112      	lsls	r2, r2, #4
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ff8:	e00a      	b.n	8004010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4908      	ldr	r1, [pc, #32]	; (8004020 <__NVIC_SetPriority+0x50>)
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3b04      	subs	r3, #4
 8004008:	0112      	lsls	r2, r2, #4
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	440b      	add	r3, r1
 800400e:	761a      	strb	r2, [r3, #24]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000e100 	.word	0xe000e100
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <NVIC_EncodePriority>:
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f1c3 0307 	rsb	r3, r3, #7
 800403e:	2b04      	cmp	r3, #4
 8004040:	bf28      	it	cs
 8004042:	2304      	movcs	r3, #4
 8004044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3304      	adds	r3, #4
 800404a:	2b06      	cmp	r3, #6
 800404c:	d902      	bls.n	8004054 <NVIC_EncodePriority+0x30>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3b03      	subs	r3, #3
 8004052:	e000      	b.n	8004056 <NVIC_EncodePriority+0x32>
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43da      	mvns	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	401a      	ands	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800406c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	43d9      	mvns	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800407c:	4313      	orrs	r3, r2
}
 800407e:	4618      	mov	r0, r3
 8004080:	3724      	adds	r7, #36	; 0x24
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <SysTick_Config>:
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800409c:	d301      	bcc.n	80040a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800409e:	2301      	movs	r3, #1
 80040a0:	e00f      	b.n	80040c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <SysTick_Config+0x40>)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040aa:	210f      	movs	r1, #15
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b0:	f7ff ff8e 	bl	8003fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <SysTick_Config+0x40>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <SysTick_Config+0x40>)
 80040bc:	2207      	movs	r2, #7
 80040be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	e000e010 	.word	0xe000e010

080040d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff47 	bl	8003f6c <__NVIC_SetPriorityGrouping>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4603      	mov	r3, r0
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040f8:	f7ff ff5c 	bl	8003fb4 <__NVIC_GetPriorityGrouping>
 80040fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff ff8e 	bl	8004024 <NVIC_EncodePriority>
 8004108:	4602      	mov	r2, r0
 800410a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff5d 	bl	8003fd0 <__NVIC_SetPriority>
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ffb0 	bl	800408c <SysTick_Config>
 800412c:	4603      	mov	r3, r0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004146:	e166      	b.n	8004416 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8158 	beq.w	8004410 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d00b      	beq.n	8004180 <HAL_GPIO_Init+0x48>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d007      	beq.n	8004180 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004174:	2b11      	cmp	r3, #17
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b12      	cmp	r3, #18
 800417e:	d130      	bne.n	80041e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041b6:	2201      	movs	r2, #1
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	f003 0201 	and.w	r2, r3, #1
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0xea>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b12      	cmp	r3, #18
 8004220:	d123      	bne.n	800426a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	08da      	lsrs	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3208      	adds	r2, #8
 800422a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	220f      	movs	r2, #15
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	6939      	ldr	r1, [r7, #16]
 8004266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0203 	and.w	r2, r3, #3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80b2 	beq.w	8004410 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ac:	4b61      	ldr	r3, [pc, #388]	; (8004434 <HAL_GPIO_Init+0x2fc>)
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	4a60      	ldr	r2, [pc, #384]	; (8004434 <HAL_GPIO_Init+0x2fc>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6613      	str	r3, [r2, #96]	; 0x60
 80042b8:	4b5e      	ldr	r3, [pc, #376]	; (8004434 <HAL_GPIO_Init+0x2fc>)
 80042ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042c4:	4a5c      	ldr	r2, [pc, #368]	; (8004438 <HAL_GPIO_Init+0x300>)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042ee:	d02b      	beq.n	8004348 <HAL_GPIO_Init+0x210>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a52      	ldr	r2, [pc, #328]	; (800443c <HAL_GPIO_Init+0x304>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d025      	beq.n	8004344 <HAL_GPIO_Init+0x20c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a51      	ldr	r2, [pc, #324]	; (8004440 <HAL_GPIO_Init+0x308>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d01f      	beq.n	8004340 <HAL_GPIO_Init+0x208>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a50      	ldr	r2, [pc, #320]	; (8004444 <HAL_GPIO_Init+0x30c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d019      	beq.n	800433c <HAL_GPIO_Init+0x204>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a4f      	ldr	r2, [pc, #316]	; (8004448 <HAL_GPIO_Init+0x310>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_GPIO_Init+0x200>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a4e      	ldr	r2, [pc, #312]	; (800444c <HAL_GPIO_Init+0x314>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00d      	beq.n	8004334 <HAL_GPIO_Init+0x1fc>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <HAL_GPIO_Init+0x318>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d007      	beq.n	8004330 <HAL_GPIO_Init+0x1f8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <HAL_GPIO_Init+0x31c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_GPIO_Init+0x1f4>
 8004328:	2307      	movs	r3, #7
 800432a:	e00e      	b.n	800434a <HAL_GPIO_Init+0x212>
 800432c:	2308      	movs	r3, #8
 800432e:	e00c      	b.n	800434a <HAL_GPIO_Init+0x212>
 8004330:	2306      	movs	r3, #6
 8004332:	e00a      	b.n	800434a <HAL_GPIO_Init+0x212>
 8004334:	2305      	movs	r3, #5
 8004336:	e008      	b.n	800434a <HAL_GPIO_Init+0x212>
 8004338:	2304      	movs	r3, #4
 800433a:	e006      	b.n	800434a <HAL_GPIO_Init+0x212>
 800433c:	2303      	movs	r3, #3
 800433e:	e004      	b.n	800434a <HAL_GPIO_Init+0x212>
 8004340:	2302      	movs	r3, #2
 8004342:	e002      	b.n	800434a <HAL_GPIO_Init+0x212>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_GPIO_Init+0x212>
 8004348:	2300      	movs	r3, #0
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	f002 0203 	and.w	r2, r2, #3
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	4093      	lsls	r3, r2
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800435a:	4937      	ldr	r1, [pc, #220]	; (8004438 <HAL_GPIO_Init+0x300>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004368:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_GPIO_Init+0x320>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	43db      	mvns	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800438c:	4a32      	ldr	r2, [pc, #200]	; (8004458 <HAL_GPIO_Init+0x320>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_GPIO_Init+0x320>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	43db      	mvns	r3, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043b6:	4a28      	ldr	r2, [pc, #160]	; (8004458 <HAL_GPIO_Init+0x320>)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043bc:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_GPIO_Init+0x320>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_GPIO_Init+0x320>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <HAL_GPIO_Init+0x320>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_GPIO_Init+0x320>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3301      	adds	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f ae91 	bne.w	8004148 <HAL_GPIO_Init+0x10>
  }
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40021000 	.word	0x40021000
 8004438:	40010000 	.word	0x40010000
 800443c:	48000400 	.word	0x48000400
 8004440:	48000800 	.word	0x48000800
 8004444:	48000c00 	.word	0x48000c00
 8004448:	48001000 	.word	0x48001000
 800444c:	48001400 	.word	0x48001400
 8004450:	48001800 	.word	0x48001800
 8004454:	48001c00 	.word	0x48001c00
 8004458:	40010400 	.word	0x40010400

0800445c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
 8004468:	4613      	mov	r3, r2
 800446a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800446c:	787b      	ldrb	r3, [r7, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004478:	e002      	b.n	8004480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e081      	b.n	80045a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fc8c 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e006      	b.n	8004514 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004512:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d104      	bne.n	8004526 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	ea42 0103 	orr.w	r1, r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	f040 80f9 	bne.w	80047c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_I2C_Mem_Write+0x34>
 80045da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d105      	bne.n	80045ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0ed      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_I2C_Mem_Write+0x4e>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e0e6      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004602:	f7fd ffb5 	bl	8002570 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2319      	movs	r3, #25
 800460e:	2201      	movs	r2, #1
 8004610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fac3 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0d1      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2221      	movs	r2, #33	; 0x21
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2240      	movs	r2, #64	; 0x40
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800464c:	88f8      	ldrh	r0, [r7, #6]
 800464e:	893a      	ldrh	r2, [r7, #8]
 8004650:	8979      	ldrh	r1, [r7, #10]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	4603      	mov	r3, r0
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f9d3 	bl	8004a08 <I2C_RequestMemoryWrite>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0a9      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2bff      	cmp	r3, #255	; 0xff
 800467c:	d90e      	bls.n	800469c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	b2da      	uxtb	r2, r3
 800468a:	8979      	ldrh	r1, [r7, #10]
 800468c:	2300      	movs	r3, #0
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fba5 	bl	8004de4 <I2C_TransferConfig>
 800469a:	e00f      	b.n	80046bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	8979      	ldrh	r1, [r7, #10]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fb94 	bl	8004de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 faad 	bl	8004c20 <I2C_WaitOnTXISFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e07b      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d034      	beq.n	8004774 <HAL_I2C_Mem_Write+0x1c8>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d130      	bne.n	8004774 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	2200      	movs	r2, #0
 800471a:	2180      	movs	r1, #128	; 0x80
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fa3f 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e04d      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2bff      	cmp	r3, #255	; 0xff
 8004734:	d90e      	bls.n	8004754 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	b2da      	uxtb	r2, r3
 8004742:	8979      	ldrh	r1, [r7, #10]
 8004744:	2300      	movs	r3, #0
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fb49 	bl	8004de4 <I2C_TransferConfig>
 8004752:	e00f      	b.n	8004774 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004762:	b2da      	uxtb	r2, r3
 8004764:	8979      	ldrh	r1, [r7, #10]
 8004766:	2300      	movs	r3, #0
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fb38 	bl	8004de4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d19e      	bne.n	80046bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa8c 	bl	8004ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e01a      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2220      	movs	r2, #32
 8004798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <HAL_I2C_Mem_Write+0x224>)
 80047a6:	400b      	ands	r3, r1
 80047a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	fe00e800 	.word	0xfe00e800

080047d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	460b      	mov	r3, r1
 80047e8:	813b      	strh	r3, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	f040 80fd 	bne.w	80049f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_I2C_Mem_Read+0x34>
 8004802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0f1      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_I2C_Mem_Read+0x4e>
 800481e:	2302      	movs	r3, #2
 8004820:	e0ea      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800482a:	f7fd fea1 	bl	8002570 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2319      	movs	r3, #25
 8004836:	2201      	movs	r2, #1
 8004838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f9af 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0d5      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2222      	movs	r2, #34	; 0x22
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004874:	88f8      	ldrh	r0, [r7, #6]
 8004876:	893a      	ldrh	r2, [r7, #8]
 8004878:	8979      	ldrh	r1, [r7, #10]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	4603      	mov	r3, r0
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f913 	bl	8004ab0 <I2C_RequestMemoryRead>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0ad      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2bff      	cmp	r3, #255	; 0xff
 80048a4:	d90e      	bls.n	80048c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	22ff      	movs	r2, #255	; 0xff
 80048aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	8979      	ldrh	r1, [r7, #10]
 80048b4:	4b52      	ldr	r3, [pc, #328]	; (8004a00 <HAL_I2C_Mem_Read+0x22c>)
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa91 	bl	8004de4 <I2C_TransferConfig>
 80048c2:	e00f      	b.n	80048e4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	8979      	ldrh	r1, [r7, #10]
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <HAL_I2C_Mem_Read+0x22c>)
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fa80 	bl	8004de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2200      	movs	r2, #0
 80048ec:	2104      	movs	r1, #4
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f956 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07c      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d034      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x1d0>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	d130      	bne.n	80049a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	2200      	movs	r2, #0
 800494a:	2180      	movs	r1, #128	; 0x80
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f927 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e04d      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2bff      	cmp	r3, #255	; 0xff
 8004964:	d90e      	bls.n	8004984 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	22ff      	movs	r2, #255	; 0xff
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	b2da      	uxtb	r2, r3
 8004972:	8979      	ldrh	r1, [r7, #10]
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fa31 	bl	8004de4 <I2C_TransferConfig>
 8004982:	e00f      	b.n	80049a4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	b2da      	uxtb	r2, r3
 8004994:	8979      	ldrh	r1, [r7, #10]
 8004996:	2300      	movs	r3, #0
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fa20 	bl	8004de4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d19a      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f974 	bl	8004ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e01a      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2220      	movs	r2, #32
 80049c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_I2C_Mem_Read+0x230>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	80002400 	.word	0x80002400
 8004a04:	fe00e800 	.word	0xfe00e800

08004a08 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	4608      	mov	r0, r1
 8004a12:	4611      	mov	r1, r2
 8004a14:	461a      	mov	r2, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	813b      	strh	r3, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	8979      	ldrh	r1, [r7, #10]
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <I2C_RequestMemoryWrite+0xa4>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f9d7 	bl	8004de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f8f0 	bl	8004c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e02c      	b.n	8004aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
 8004a5a:	e015      	b.n	8004a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a5c:	893b      	ldrh	r3, [r7, #8]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8d6 	bl	8004c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e012      	b.n	8004aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7e:	893b      	ldrh	r3, [r7, #8]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f884 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	80002000 	.word	0x80002000

08004ab0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	817b      	strh	r3, [r7, #10]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	813b      	strh	r3, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <I2C_RequestMemoryRead+0xa4>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f984 	bl	8004de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f89d 	bl	8004c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e02c      	b.n	8004b4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28
 8004b00:	e015      	b.n	8004b2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b02:	893b      	ldrh	r3, [r7, #8]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f883 	bl	8004c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e012      	b.n	8004b4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	; 0x40
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f831 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	80002000 	.word	0x80002000

08004b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d103      	bne.n	8004b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d007      	beq.n	8004b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	619a      	str	r2, [r3, #24]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb0:	e022      	b.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb8:	d01e      	beq.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fd fcd9 	bl	8002570 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	f043 0220 	orr.w	r2, r3, #32
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e00f      	b.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d0cd      	beq.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c2c:	e02c      	b.n	8004c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f870 	bl	8004d18 <I2C_IsAcknowledgeFailed>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e02a      	b.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c48:	d01e      	beq.n	8004c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fd fc91 	bl	8002570 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d113      	bne.n	8004c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e007      	b.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d1cb      	bne.n	8004c2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cac:	e028      	b.n	8004d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f830 	bl	8004d18 <I2C_IsAcknowledgeFailed>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e026      	b.n	8004d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fd fc55 	bl	8002570 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d113      	bne.n	8004d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e007      	b.n	8004d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d1cf      	bne.n	8004cae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d151      	bne.n	8004dd6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d32:	e022      	b.n	8004d7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d3a:	d01e      	beq.n	8004d7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3c:	f7fd fc18 	bl	8002570 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <I2C_IsAcknowledgeFailed+0x3a>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d113      	bne.n	8004d7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e02e      	b.n	8004dd8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d1d5      	bne.n	8004d34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2220      	movs	r2, #32
 8004d96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fedd 	bl	8004b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	fe00e800 	.word	0xfe00e800

08004de4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	817b      	strh	r3, [r7, #10]
 8004df2:	4613      	mov	r3, r2
 8004df4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	0d5b      	lsrs	r3, r3, #21
 8004e00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <I2C_TransferConfig+0x58>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	ea02 0103 	and.w	r1, r2, r3
 8004e0e:	897b      	ldrh	r3, [r7, #10]
 8004e10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e14:	7a7b      	ldrb	r3, [r7, #9]
 8004e16:	041b      	lsls	r3, r3, #16
 8004e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	03ff63ff 	.word	0x03ff63ff

08004e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d138      	bne.n	8004ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e032      	b.n	8004eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d139      	bne.n	8004f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e033      	b.n	8004f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2224      	movs	r2, #36	; 0x24
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e000      	b.n	8004f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40007000 	.word	0x40007000

08004f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9a:	d130      	bne.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d038      	beq.n	800501c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004faa:	4b20      	ldr	r3, [pc, #128]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2232      	movs	r2, #50	; 0x32
 8004fc0:	fb02 f303 	mul.w	r3, r2, r3
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	0c9b      	lsrs	r3, r3, #18
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd0:	e002      	b.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d102      	bne.n	8004fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f2      	bne.n	8004fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d110      	bne.n	800501c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e00f      	b.n	800501e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d007      	beq.n	800501c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005014:	4a05      	ldr	r2, [pc, #20]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800501a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40007000 	.word	0x40007000
 8005030:	20000000 	.word	0x20000000
 8005034:	431bde83 	.word	0x431bde83

08005038 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_PWREx_EnableVddIO2+0x1c>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005046:	6053      	str	r3, [r2, #4]
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40007000 	.word	0x40007000

08005058 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af02      	add	r7, sp, #8
 800505e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005060:	f7fd fa86 	bl	8002570 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e069      	b.n	8005144 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7fc ff4f 	bl	8001f28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800508a:	f241 3188 	movw	r1, #5000	; 0x1388
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f85e 	bl	8005150 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	021a      	lsls	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2120      	movs	r1, #32
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f856 	bl	800516c <QSPI_WaitFlagStateUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80050c4:	7afb      	ldrb	r3, [r7, #11]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d137      	bne.n	800513a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6852      	ldr	r2, [r2, #4]
 80050dc:	0611      	lsls	r1, r2, #24
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68d2      	ldr	r2, [r2, #12]
 80050e2:	4311      	orrs	r1, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	69d2      	ldr	r2, [r2, #28]
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a12      	ldr	r2, [r2, #32]
 80050ee:	4311      	orrs	r1, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <HAL_QSPI_Init+0xf4>)
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6912      	ldr	r2, [r2, #16]
 8005106:	0411      	lsls	r1, r2, #16
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6952      	ldr	r2, [r2, #20]
 800510c:	4311      	orrs	r1, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6992      	ldr	r2, [r2, #24]
 8005112:	4311      	orrs	r1, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	430b      	orrs	r3, r1
 800511a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005142:	7afb      	ldrb	r3, [r7, #11]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	ffe0f8fe 	.word	0xffe0f8fe

08005150 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800517c:	e01a      	b.n	80051b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005184:	d016      	beq.n	80051b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fd f9f3 	bl	8002570 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2204      	movs	r2, #4
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	f043 0201 	orr.w	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e00e      	b.n	80051d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	2300      	moveq	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d1d6      	bne.n	800517e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f000 bc16 	b.w	8005a1c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f0:	4ba0      	ldr	r3, [pc, #640]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051fa:	4b9e      	ldr	r3, [pc, #632]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80e4 	beq.w	80053da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_RCC_OscConfig+0x4c>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	f040 808b 	bne.w	8005336 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b01      	cmp	r3, #1
 8005224:	f040 8087 	bne.w	8005336 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005228:	4b92      	ldr	r3, [pc, #584]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_OscConfig+0x64>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e3ed      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	4b8b      	ldr	r3, [pc, #556]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <HAL_RCC_OscConfig+0x7e>
 8005250:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005258:	e005      	b.n	8005266 <HAL_RCC_OscConfig+0x8a>
 800525a:	4b86      	ldr	r3, [pc, #536]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800525c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005266:	4293      	cmp	r3, r2
 8005268:	d223      	bcs.n	80052b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fd80 	bl	8005d74 <RCC_SetFlashLatencyFromMSIRange>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e3ce      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800527e:	4b7d      	ldr	r3, [pc, #500]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a7c      	ldr	r2, [pc, #496]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005284:	f043 0308 	orr.w	r3, r3, #8
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b7a      	ldr	r3, [pc, #488]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4977      	ldr	r1, [pc, #476]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800529c:	4b75      	ldr	r3, [pc, #468]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	4972      	ldr	r1, [pc, #456]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]
 80052b0:	e025      	b.n	80052fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b2:	4b70      	ldr	r3, [pc, #448]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6f      	ldr	r2, [pc, #444]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052b8:	f043 0308 	orr.w	r3, r3, #8
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4b6d      	ldr	r3, [pc, #436]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	496a      	ldr	r1, [pc, #424]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d0:	4b68      	ldr	r3, [pc, #416]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	4965      	ldr	r1, [pc, #404]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fd40 	bl	8005d74 <RCC_SetFlashLatencyFromMSIRange>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e38e      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052fe:	f000 fc75 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	495a      	ldr	r1, [pc, #360]	; (8005478 <HAL_RCC_OscConfig+0x29c>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a58      	ldr	r2, [pc, #352]	; (800547c <HAL_RCC_OscConfig+0x2a0>)
 800531c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800531e:	4b58      	ldr	r3, [pc, #352]	; (8005480 <HAL_RCC_OscConfig+0x2a4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd f8d4 	bl	80024d0 <HAL_InitTick>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d052      	beq.n	80053d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	e372      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d032      	beq.n	80053a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800533e:	4b4d      	ldr	r3, [pc, #308]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a4c      	ldr	r2, [pc, #304]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800534a:	f7fd f911 	bl	8002570 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005352:	f7fd f90d 	bl	8002570 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e35b      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005370:	4b40      	ldr	r3, [pc, #256]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a3f      	ldr	r2, [pc, #252]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005376:	f043 0308 	orr.w	r3, r3, #8
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	493a      	ldr	r1, [pc, #232]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800538e:	4b39      	ldr	r3, [pc, #228]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4935      	ldr	r1, [pc, #212]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
 80053a2:	e01a      	b.n	80053da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053a4:	4b33      	ldr	r3, [pc, #204]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a32      	ldr	r2, [pc, #200]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053b0:	f7fd f8de 	bl	8002570 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053b8:	f7fd f8da 	bl	8002570 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e328      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ca:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x1dc>
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d073      	beq.n	80054ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_OscConfig+0x21c>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d10e      	bne.n	8005410 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d10b      	bne.n	8005410 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d063      	beq.n	80054cc <HAL_RCC_OscConfig+0x2f0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d15f      	bne.n	80054cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e305      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d106      	bne.n	8005428 <HAL_RCC_OscConfig+0x24c>
 800541a:	4b16      	ldr	r3, [pc, #88]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e01d      	b.n	8005464 <HAL_RCC_OscConfig+0x288>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0x270>
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0f      	ldr	r2, [pc, #60]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e00b      	b.n	8005464 <HAL_RCC_OscConfig+0x288>
 800544c:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a08      	ldr	r2, [pc, #32]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a05      	ldr	r2, [pc, #20]	; (8005474 <HAL_RCC_OscConfig+0x298>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01b      	beq.n	80054a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd f880 	bl	8002570 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005472:	e010      	b.n	8005496 <HAL_RCC_OscConfig+0x2ba>
 8005474:	40021000 	.word	0x40021000
 8005478:	0800d174 	.word	0x0800d174
 800547c:	20000000 	.word	0x20000000
 8005480:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005484:	f7fd f874 	bl	8002570 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e2c2      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005496:	4baf      	ldr	r3, [pc, #700]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x2a8>
 80054a2:	e014      	b.n	80054ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd f864 	bl	8002570 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ac:	f7fd f860 	bl	8002570 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	; 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e2ae      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054be:	4ba5      	ldr	r3, [pc, #660]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x2d0>
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d060      	beq.n	800559c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d005      	beq.n	80054ec <HAL_RCC_OscConfig+0x310>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	d119      	bne.n	800551a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d116      	bne.n	800551a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ec:	4b99      	ldr	r3, [pc, #612]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_OscConfig+0x328>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e28b      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005504:	4b93      	ldr	r3, [pc, #588]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	4990      	ldr	r1, [pc, #576]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005518:	e040      	b.n	800559c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d023      	beq.n	800556a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005522:	4b8c      	ldr	r3, [pc, #560]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a8b      	ldr	r2, [pc, #556]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fd f81f 	bl	8002570 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005536:	f7fd f81b 	bl	8002570 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e269      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005548:	4b82      	ldr	r3, [pc, #520]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005554:	4b7f      	ldr	r3, [pc, #508]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	497c      	ldr	r1, [pc, #496]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
 8005568:	e018      	b.n	800559c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556a:	4b7a      	ldr	r3, [pc, #488]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a79      	ldr	r2, [pc, #484]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fc fffb 	bl	8002570 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800557e:	f7fc fff7 	bl	8002570 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e245      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005590:	4b70      	ldr	r3, [pc, #448]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d03c      	beq.n	8005622 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01c      	beq.n	80055ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b0:	4b68      	ldr	r3, [pc, #416]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	4a67      	ldr	r2, [pc, #412]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fc ffd6 	bl	8002570 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fc ffd2 	bl	8002570 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e220      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055da:	4b5e      	ldr	r3, [pc, #376]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80055dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ef      	beq.n	80055c8 <HAL_RCC_OscConfig+0x3ec>
 80055e8:	e01b      	b.n	8005622 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ea:	4b5a      	ldr	r3, [pc, #360]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80055ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f0:	4a58      	ldr	r2, [pc, #352]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fa:	f7fc ffb9 	bl	8002570 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005602:	f7fc ffb5 	bl	8002570 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e203      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005614:	4b4f      	ldr	r3, [pc, #316]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1ef      	bne.n	8005602 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80a6 	beq.w	800577c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005634:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10d      	bne.n	800565c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005640:	4b44      	ldr	r3, [pc, #272]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	4a43      	ldr	r2, [pc, #268]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564a:	6593      	str	r3, [r2, #88]	; 0x58
 800564c:	4b41      	ldr	r3, [pc, #260]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005658:	2301      	movs	r3, #1
 800565a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800565c:	4b3e      	ldr	r3, [pc, #248]	; (8005758 <HAL_RCC_OscConfig+0x57c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d118      	bne.n	800569a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005668:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x57c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <HAL_RCC_OscConfig+0x57c>)
 800566e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005672:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005674:	f7fc ff7c 	bl	8002570 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567c:	f7fc ff78 	bl	8002570 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e1c6      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568e:	4b32      	ldr	r3, [pc, #200]	; (8005758 <HAL_RCC_OscConfig+0x57c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d108      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4d8>
 80056a2:	4b2c      	ldr	r3, [pc, #176]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056b2:	e024      	b.n	80056fe <HAL_RCC_OscConfig+0x522>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	d110      	bne.n	80056de <HAL_RCC_OscConfig+0x502>
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	4a24      	ldr	r2, [pc, #144]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056cc:	4b21      	ldr	r3, [pc, #132]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	4a20      	ldr	r2, [pc, #128]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056dc:	e00f      	b.n	80056fe <HAL_RCC_OscConfig+0x522>
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	4a17      	ldr	r2, [pc, #92]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 80056f6:	f023 0304 	bic.w	r3, r3, #4
 80056fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fc ff33 	bl	8002570 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fc ff2f 	bl	8002570 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e17b      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_OscConfig+0x578>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ed      	beq.n	800570e <HAL_RCC_OscConfig+0x532>
 8005732:	e01a      	b.n	800576a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fc ff1c 	bl	8002570 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800573a:	e00f      	b.n	800575c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573c:	f7fc ff18 	bl	8002570 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	; 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d906      	bls.n	800575c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e164      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800575c:	4ba8      	ldr	r3, [pc, #672]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e8      	bne.n	800573c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800576a:	7ffb      	ldrb	r3, [r7, #31]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005770:	4ba3      	ldr	r3, [pc, #652]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	4aa2      	ldr	r2, [pc, #648]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d03c      	beq.n	8005802 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01c      	beq.n	80057ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005790:	4b9b      	ldr	r3, [pc, #620]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005796:	4a9a      	ldr	r2, [pc, #616]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fc fee6 	bl	8002570 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a8:	f7fc fee2 	bl	8002570 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e130      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ba:	4b91      	ldr	r3, [pc, #580]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80057bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ef      	beq.n	80057a8 <HAL_RCC_OscConfig+0x5cc>
 80057c8:	e01b      	b.n	8005802 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ca:	4b8d      	ldr	r3, [pc, #564]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80057cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d0:	4a8b      	ldr	r2, [pc, #556]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fc fec9 	bl	8002570 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e2:	f7fc fec5 	bl	8002570 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e113      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f4:	4b82      	ldr	r3, [pc, #520]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80057f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ef      	bne.n	80057e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8107 	beq.w	8005a1a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	2b02      	cmp	r3, #2
 8005812:	f040 80cb 	bne.w	80059ac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005816:	4b7a      	ldr	r3, [pc, #488]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f003 0203 	and.w	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	429a      	cmp	r2, r3
 8005828:	d12c      	bne.n	8005884 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	3b01      	subs	r3, #1
 8005836:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d123      	bne.n	8005884 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005846:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d11b      	bne.n	8005884 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d113      	bne.n	8005884 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d109      	bne.n	8005884 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	3b01      	subs	r3, #1
 800587e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d06d      	beq.n	8005960 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d068      	beq.n	800595c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800588a:	4b5d      	ldr	r3, [pc, #372]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005896:	4b5a      	ldr	r3, [pc, #360]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0ba      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058a6:	4b56      	ldr	r3, [pc, #344]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a55      	ldr	r2, [pc, #340]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80058ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058b2:	f7fc fe5d 	bl	8002570 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fc fe59 	bl	8002570 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e0a7      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058cc:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d8:	4b49      	ldr	r3, [pc, #292]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	4b49      	ldr	r3, [pc, #292]	; (8005a04 <HAL_RCC_OscConfig+0x828>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058f2:	0212      	lsls	r2, r2, #8
 80058f4:	4311      	orrs	r1, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058fa:	0852      	lsrs	r2, r2, #1
 80058fc:	3a01      	subs	r2, #1
 80058fe:	0552      	lsls	r2, r2, #21
 8005900:	4311      	orrs	r1, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005906:	0852      	lsrs	r2, r2, #1
 8005908:	3a01      	subs	r2, #1
 800590a:	0652      	lsls	r2, r2, #25
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005912:	06d2      	lsls	r2, r2, #27
 8005914:	430a      	orrs	r2, r1
 8005916:	493a      	ldr	r1, [pc, #232]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005918:	4313      	orrs	r3, r2
 800591a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800591c:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a37      	ldr	r2, [pc, #220]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005928:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005932:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005934:	f7fc fe1c 	bl	8002570 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593c:	f7fc fe18 	bl	8002570 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e066      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594e:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800595a:	e05e      	b.n	8005a1a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e05d      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d156      	bne.n	8005a1a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005976:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005978:	4b21      	ldr	r3, [pc, #132]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 800597e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005982:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005984:	f7fc fdf4 	bl	8002570 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fc fdf0 	bl	8002570 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e03e      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x7b0>
 80059aa:	e036      	b.n	8005a1a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d031      	beq.n	8005a16 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059d0:	f023 0303 	bic.w	r3, r3, #3
 80059d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <HAL_RCC_OscConfig+0x824>)
 80059dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80059e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e6:	f7fc fdc3 	bl	8002570 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ec:	e00c      	b.n	8005a08 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ee:	f7fc fdbf 	bl	8002570 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d905      	bls.n	8005a08 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e00d      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
 8005a00:	40021000 	.word	0x40021000
 8005a04:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_RCC_OscConfig+0x848>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1ec      	bne.n	80059ee <HAL_RCC_OscConfig+0x812>
 8005a14:	e001      	b.n	8005a1a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40021000 	.word	0x40021000

08005a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0c8      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b66      	ldr	r3, [pc, #408]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d910      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 0207 	bic.w	r2, r3, #7
 8005a52:	4961      	ldr	r1, [pc, #388]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b5f      	ldr	r3, [pc, #380]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0b0      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d04c      	beq.n	8005b12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a80:	4b56      	ldr	r3, [pc, #344]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d121      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e09e      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a98:	4b50      	ldr	r3, [pc, #320]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d115      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e092      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ab0:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d109      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e086      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac0:	4b46      	ldr	r3, [pc, #280]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e07e      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ad0:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f023 0203 	bic.w	r2, r3, #3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	493f      	ldr	r1, [pc, #252]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fd45 	bl	8002570 <HAL_GetTick>
 8005ae6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aea:	f7fc fd41 	bl	8002570 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e066      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b00:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 020c 	and.w	r2, r3, #12
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d1eb      	bne.n	8005aea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	492c      	ldr	r1, [pc, #176]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b30:	4b29      	ldr	r3, [pc, #164]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d210      	bcs.n	8005b60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0207 	bic.w	r2, r3, #7
 8005b46:	4924      	ldr	r1, [pc, #144]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e036      	b.n	8005bce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4918      	ldr	r1, [pc, #96]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b8a:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4910      	ldr	r1, [pc, #64]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b9e:	f000 f825 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <HAL_RCC_ClockConfig+0x1b4>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	490c      	ldr	r1, [pc, #48]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	5ccb      	ldrb	r3, [r1, r3]
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fc fc84 	bl	80024d0 <HAL_InitTick>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40022000 	.word	0x40022000
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	0800d174 	.word	0x0800d174
 8005be4:	20000000 	.word	0x20000000
 8005be8:	20000004 	.word	0x20000004

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c04:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x34>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b0c      	cmp	r3, #12
 8005c18:	d121      	bne.n	8005c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d11e      	bne.n	8005c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c20:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d107      	bne.n	8005c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c2c:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e005      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	091b      	lsrs	r3, r3, #4
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c48:	4a2b      	ldr	r2, [pc, #172]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10d      	bne.n	8005c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d102      	bne.n	8005c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	e004      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c70:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	d134      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d003      	beq.n	8005c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d003      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0xac>
 8005c90:	e005      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c92:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8005c94:	617b      	str	r3, [r7, #20]
      break;
 8005c96:	e005      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c9a:	617b      	str	r3, [r7, #20]
      break;
 8005c9c:	e002      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	617b      	str	r3, [r7, #20]
      break;
 8005ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	3301      	adds	r3, #1
 8005cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	fb02 f203 	mul.w	r2, r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	0e5b      	lsrs	r3, r3, #25
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3724      	adds	r7, #36	; 0x24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	0800d18c 	.word	0x0800d18c
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	018cba80 	.word	0x018cba80

08005d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000000 	.word	0x20000000

08005d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d20:	f7ff fff0 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4904      	ldr	r1, [pc, #16]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40021000 	.word	0x40021000
 8005d44:	0800d184 	.word	0x0800d184

08005d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d4c:	f7ff ffda 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0adb      	lsrs	r3, r3, #11
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4904      	ldr	r1, [pc, #16]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d5e:	5ccb      	ldrb	r3, [r1, r3]
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	0800d184 	.word	0x0800d184

08005d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d8c:	f7ff f8f0 	bl	8004f70 <HAL_PWREx_GetVoltageRange>
 8005d90:	6178      	str	r0, [r7, #20]
 8005d92:	e014      	b.n	8005dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8005da0:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005dac:	f7ff f8e0 	bl	8004f70 <HAL_PWREx_GetVoltageRange>
 8005db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005db2:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc4:	d10b      	bne.n	8005dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d919      	bls.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2ba0      	cmp	r3, #160	; 0xa0
 8005dd0:	d902      	bls.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e013      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dd8:	2301      	movs	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	e010      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b80      	cmp	r3, #128	; 0x80
 8005de2:	d902      	bls.n	8005dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005de4:	2303      	movs	r3, #3
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	e00a      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d102      	bne.n	8005df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005df0:	2302      	movs	r3, #2
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	e004      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b70      	cmp	r3, #112	; 0x70
 8005dfa:	d101      	bne.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 0207 	bic.w	r2, r3, #7
 8005e08:	4909      	ldr	r1, [pc, #36]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d001      	beq.n	8005e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	40022000 	.word	0x40022000

08005e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e40:	2300      	movs	r3, #0
 8005e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d041      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e58:	d02a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e5e:	d824      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e64:	d008      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e6a:	d81e      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e74:	d010      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e76:	e018      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e78:	4b86      	ldr	r3, [pc, #536]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a85      	ldr	r2, [pc, #532]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e84:	e015      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fb0f 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e96:	e00c      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3320      	adds	r3, #32
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fbf8 	bl	8006694 <RCCEx_PLLSAI2_Config>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	74fb      	strb	r3, [r7, #19]
      break;
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb2:	7cfb      	ldrb	r3, [r7, #19]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10b      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eb8:	4b76      	ldr	r3, [pc, #472]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec6:	4973      	ldr	r1, [pc, #460]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ece:	e001      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d041      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ee8:	d02a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005eea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005eee:	d824      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ef4:	d008      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005efa:	d81e      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f04:	d010      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f06:	e018      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f08:	4b62      	ldr	r3, [pc, #392]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a61      	ldr	r2, [pc, #388]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f14:	e015      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fac7 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f26:	e00c      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3320      	adds	r3, #32
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fbb0 	bl	8006694 <RCCEx_PLLSAI2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f38:	e003      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f48:	4b52      	ldr	r3, [pc, #328]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f56:	494f      	ldr	r1, [pc, #316]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f5e:	e001      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	7cfb      	ldrb	r3, [r7, #19]
 8005f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80a0 	beq.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f72:	2300      	movs	r3, #0
 8005f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f76:	4b47      	ldr	r3, [pc, #284]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8c:	4b41      	ldr	r3, [pc, #260]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	4a40      	ldr	r2, [pc, #256]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	6593      	str	r3, [r2, #88]	; 0x58
 8005f98:	4b3e      	ldr	r3, [pc, #248]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa8:	4b3b      	ldr	r3, [pc, #236]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3a      	ldr	r2, [pc, #232]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fb4:	f7fc fadc 	bl	8002570 <HAL_GetTick>
 8005fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fba:	e009      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbc:	f7fc fad8 	bl	8002570 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d902      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8005fce:	e005      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fd0:	4b31      	ldr	r3, [pc, #196]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0ef      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d15c      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fe2:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01f      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d019      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006000:	4b24      	ldr	r3, [pc, #144]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800600a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800600c:	4b21      	ldr	r3, [pc, #132]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fc fa97 	bl	8002570 <HAL_GetTick>
 8006042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006044:	e00b      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fc fa93 	bl	8002570 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d902      	bls.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	74fb      	strb	r3, [r7, #19]
            break;
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0ec      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10c      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	4904      	ldr	r1, [pc, #16]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800608a:	e009      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800608c:	7cfb      	ldrb	r3, [r7, #19]
 800608e:	74bb      	strb	r3, [r7, #18]
 8006090:	e006      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000
 8006098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a0:	7c7b      	ldrb	r3, [r7, #17]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a6:	4ba6      	ldr	r3, [pc, #664]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	4aa5      	ldr	r2, [pc, #660]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060be:	4ba0      	ldr	r3, [pc, #640]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	f023 0203 	bic.w	r2, r3, #3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	499c      	ldr	r1, [pc, #624]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060e0:	4b97      	ldr	r3, [pc, #604]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f023 020c 	bic.w	r2, r3, #12
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	4994      	ldr	r1, [pc, #592]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006102:	4b8f      	ldr	r3, [pc, #572]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	498b      	ldr	r1, [pc, #556]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006124:	4b86      	ldr	r3, [pc, #536]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	4983      	ldr	r1, [pc, #524]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006146:	4b7e      	ldr	r3, [pc, #504]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006154:	497a      	ldr	r1, [pc, #488]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006168:	4b75      	ldr	r3, [pc, #468]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006176:	4972      	ldr	r1, [pc, #456]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800618a:	4b6d      	ldr	r3, [pc, #436]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800618c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006198:	4969      	ldr	r1, [pc, #420]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ac:	4b64      	ldr	r3, [pc, #400]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ba:	4961      	ldr	r1, [pc, #388]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061ce:	4b5c      	ldr	r3, [pc, #368]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061dc:	4958      	ldr	r1, [pc, #352]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061f0:	4b53      	ldr	r3, [pc, #332]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	4950      	ldr	r1, [pc, #320]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006212:	4b4b      	ldr	r3, [pc, #300]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006220:	4947      	ldr	r1, [pc, #284]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006234:	4b42      	ldr	r3, [pc, #264]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623a:	f023 0203 	bic.w	r2, r3, #3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006242:	493f      	ldr	r1, [pc, #252]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d028      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006256:	4b3a      	ldr	r3, [pc, #232]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4936      	ldr	r1, [pc, #216]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006274:	d106      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006276:	4b32      	ldr	r3, [pc, #200]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4a31      	ldr	r2, [pc, #196]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800627c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006280:	60d3      	str	r3, [r2, #12]
 8006282:	e011      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3304      	adds	r3, #4
 8006292:	2101      	movs	r1, #1
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f90b 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 800629a:	4603      	mov	r3, r0
 800629c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d028      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062b4:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c2:	491f      	ldr	r1, [pc, #124]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d2:	d106      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062de:	60d3      	str	r3, [r2, #12]
 80062e0:	e011      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ea:	d10c      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	2101      	movs	r1, #1
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f8dc 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d02a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006320:	4907      	ldr	r1, [pc, #28]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800632c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006330:	d108      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006332:	4b03      	ldr	r3, [pc, #12]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4a02      	ldr	r2, [pc, #8]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800633c:	60d3      	str	r3, [r2, #12]
 800633e:	e013      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800634c:	d10c      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	2101      	movs	r1, #1
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f8ab 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d02f      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006374:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006382:	4929      	ldr	r1, [pc, #164]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800638e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006392:	d10d      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	2102      	movs	r1, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f888 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063a4:	7cfb      	ldrb	r3, [r7, #19]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80063aa:	7cfb      	ldrb	r3, [r7, #19]
 80063ac:	74bb      	strb	r3, [r7, #18]
 80063ae:	e011      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3320      	adds	r3, #32
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 f967 	bl	8006694 <RCCEx_PLLSAI2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f0:	490d      	ldr	r1, [pc, #52]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006404:	4b08      	ldr	r3, [pc, #32]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006414:	4904      	ldr	r1, [pc, #16]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800641c:	7cbb      	ldrb	r3, [r7, #18]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000

0800642c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <HAL_RCCEx_CRSConfig+0x7c>)
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	4a1b      	ldr	r2, [pc, #108]	; (80064a8 <HAL_RCCEx_CRSConfig+0x7c>)
 800643a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800643e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCCEx_CRSConfig+0x7c>)
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <HAL_RCCEx_CRSConfig+0x7c>)
 8006446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800644a:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <HAL_RCCEx_CRSConfig+0x80>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <HAL_RCCEx_CRSConfig+0x80>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	4908      	ldr	r1, [pc, #32]	; (80064ac <HAL_RCCEx_CRSConfig+0x80>)
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_RCCEx_CRSConfig+0x80>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a06      	ldr	r2, [pc, #24]	; (80064ac <HAL_RCCEx_CRSConfig+0x80>)
 8006494:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006498:	6013      	str	r3, [r2, #0]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40006000 	.word	0x40006000

080064b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064be:	4b74      	ldr	r3, [pc, #464]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064ca:	4b71      	ldr	r3, [pc, #452]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0203 	and.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d10d      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
       ||
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064e2:	4b6b      	ldr	r3, [pc, #428]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	091b      	lsrs	r3, r3, #4
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
       ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d047      	beq.n	8006586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
 80064fa:	e044      	b.n	8006586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d018      	beq.n	8006536 <RCCEx_PLLSAI1_Config+0x86>
 8006504:	2b03      	cmp	r3, #3
 8006506:	d825      	bhi.n	8006554 <RCCEx_PLLSAI1_Config+0xa4>
 8006508:	2b01      	cmp	r3, #1
 800650a:	d002      	beq.n	8006512 <RCCEx_PLLSAI1_Config+0x62>
 800650c:	2b02      	cmp	r3, #2
 800650e:	d009      	beq.n	8006524 <RCCEx_PLLSAI1_Config+0x74>
 8006510:	e020      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006512:	4b5f      	ldr	r3, [pc, #380]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11d      	bne.n	800655a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006522:	e01a      	b.n	800655a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006524:	4b5a      	ldr	r3, [pc, #360]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	2b00      	cmp	r3, #0
 800652e:	d116      	bne.n	800655e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006534:	e013      	b.n	800655e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006536:	4b56      	ldr	r3, [pc, #344]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006542:	4b53      	ldr	r3, [pc, #332]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006552:	e006      	b.n	8006562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e004      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006562:	bf00      	nop
    }

    if(status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10d      	bne.n	8006586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800656a:	4b49      	ldr	r3, [pc, #292]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6819      	ldr	r1, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	3b01      	subs	r3, #1
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	430b      	orrs	r3, r1
 8006580:	4943      	ldr	r1, [pc, #268]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d17c      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800658c:	4b40      	ldr	r3, [pc, #256]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3f      	ldr	r2, [pc, #252]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006598:	f7fb ffea 	bl	8002570 <HAL_GetTick>
 800659c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800659e:	e009      	b.n	80065b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065a0:	f7fb ffe6 	bl	8002570 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d902      	bls.n	80065b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	73fb      	strb	r3, [r7, #15]
        break;
 80065b2:	e005      	b.n	80065c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065b4:	4b36      	ldr	r3, [pc, #216]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ef      	bne.n	80065a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d15f      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d110      	bne.n	80065ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065cc:	4b30      	ldr	r3, [pc, #192]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6892      	ldr	r2, [r2, #8]
 80065dc:	0211      	lsls	r1, r2, #8
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68d2      	ldr	r2, [r2, #12]
 80065e2:	06d2      	lsls	r2, r2, #27
 80065e4:	430a      	orrs	r2, r1
 80065e6:	492a      	ldr	r1, [pc, #168]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	610b      	str	r3, [r1, #16]
 80065ec:	e027      	b.n	800663e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d112      	bne.n	800661a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f4:	4b26      	ldr	r3, [pc, #152]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6892      	ldr	r2, [r2, #8]
 8006604:	0211      	lsls	r1, r2, #8
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6912      	ldr	r2, [r2, #16]
 800660a:	0852      	lsrs	r2, r2, #1
 800660c:	3a01      	subs	r2, #1
 800660e:	0552      	lsls	r2, r2, #21
 8006610:	430a      	orrs	r2, r1
 8006612:	491f      	ldr	r1, [pc, #124]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006614:	4313      	orrs	r3, r2
 8006616:	610b      	str	r3, [r1, #16]
 8006618:	e011      	b.n	800663e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6892      	ldr	r2, [r2, #8]
 800662a:	0211      	lsls	r1, r2, #8
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6952      	ldr	r2, [r2, #20]
 8006630:	0852      	lsrs	r2, r2, #1
 8006632:	3a01      	subs	r2, #1
 8006634:	0652      	lsls	r2, r2, #25
 8006636:	430a      	orrs	r2, r1
 8006638:	4915      	ldr	r1, [pc, #84]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	4313      	orrs	r3, r2
 800663c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a13      	ldr	r2, [pc, #76]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006648:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664a:	f7fb ff91 	bl	8002570 <HAL_GetTick>
 800664e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006650:	e009      	b.n	8006666 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006652:	f7fb ff8d 	bl	8002570 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d902      	bls.n	8006666 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	73fb      	strb	r3, [r7, #15]
          break;
 8006664:	e005      	b.n	8006672 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0ef      	beq.n	8006652 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	4903      	ldr	r1, [pc, #12]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006682:	4313      	orrs	r3, r2
 8006684:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000

08006694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066a2:	4b69      	ldr	r3, [pc, #420]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d018      	beq.n	80066e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066ae:	4b66      	ldr	r3, [pc, #408]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0203 	and.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d10d      	bne.n	80066da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
       ||
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066c6:	4b60      	ldr	r3, [pc, #384]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
       ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d047      	beq.n	800676a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e044      	b.n	800676a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d018      	beq.n	800671a <RCCEx_PLLSAI2_Config+0x86>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d825      	bhi.n	8006738 <RCCEx_PLLSAI2_Config+0xa4>
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d002      	beq.n	80066f6 <RCCEx_PLLSAI2_Config+0x62>
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d009      	beq.n	8006708 <RCCEx_PLLSAI2_Config+0x74>
 80066f4:	e020      	b.n	8006738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066f6:	4b54      	ldr	r3, [pc, #336]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11d      	bne.n	800673e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006706:	e01a      	b.n	800673e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006708:	4b4f      	ldr	r3, [pc, #316]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d116      	bne.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006718:	e013      	b.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800671a:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006726:	4b48      	ldr	r3, [pc, #288]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006736:	e006      	b.n	8006746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006746:	bf00      	nop
    }

    if(status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800674e:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	430b      	orrs	r3, r1
 8006764:	4938      	ldr	r1, [pc, #224]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006766:	4313      	orrs	r3, r2
 8006768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d166      	bne.n	800683e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006770:	4b35      	ldr	r3, [pc, #212]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a34      	ldr	r2, [pc, #208]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800677a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677c:	f7fb fef8 	bl	8002570 <HAL_GetTick>
 8006780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006782:	e009      	b.n	8006798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006784:	f7fb fef4 	bl	8002570 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d902      	bls.n	8006798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	73fb      	strb	r3, [r7, #15]
        break;
 8006796:	e005      	b.n	80067a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006798:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1ef      	bne.n	8006784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d149      	bne.n	800683e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d110      	bne.n	80067d2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80067b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6892      	ldr	r2, [r2, #8]
 80067c0:	0211      	lsls	r1, r2, #8
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	68d2      	ldr	r2, [r2, #12]
 80067c6:	06d2      	lsls	r2, r2, #27
 80067c8:	430a      	orrs	r2, r1
 80067ca:	491f      	ldr	r1, [pc, #124]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	614b      	str	r3, [r1, #20]
 80067d0:	e011      	b.n	80067f6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067d2:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6892      	ldr	r2, [r2, #8]
 80067e2:	0211      	lsls	r1, r2, #8
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6912      	ldr	r2, [r2, #16]
 80067e8:	0852      	lsrs	r2, r2, #1
 80067ea:	3a01      	subs	r2, #1
 80067ec:	0652      	lsls	r2, r2, #25
 80067ee:	430a      	orrs	r2, r1
 80067f0:	4915      	ldr	r1, [pc, #84]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a13      	ldr	r2, [pc, #76]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006802:	f7fb feb5 	bl	8002570 <HAL_GetTick>
 8006806:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006808:	e009      	b.n	800681e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800680a:	f7fb feb1 	bl	8002570 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d902      	bls.n	800681e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	73fb      	strb	r3, [r7, #15]
          break;
 800681c:	e005      	b.n	800682a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0ef      	beq.n	800680a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006832:	695a      	ldr	r2, [r3, #20]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	4903      	ldr	r1, [pc, #12]	; (8006848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800683a:	4313      	orrs	r3, r2
 800683c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40021000 	.word	0x40021000

0800684c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e095      	b.n	800698a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	2b00      	cmp	r3, #0
 8006864:	d108      	bne.n	8006878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686e:	d009      	beq.n	8006884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	61da      	str	r2, [r3, #28]
 8006876:	e005      	b.n	8006884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fb fbb4 	bl	800200c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c4:	d902      	bls.n	80068cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e002      	b.n	80068d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068da:	d007      	beq.n	80068ec <HAL_SPI_Init+0xa0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	ea42 0103 	orr.w	r1, r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	f003 0204 	and.w	r2, r3, #4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006968:	ea42 0103 	orr.w	r1, r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e040      	b.n	8006a26 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fb fb6b 	bl	8002090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2224      	movs	r2, #36	; 0x24
 80069be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0201 	bic.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f8c1 	bl	8006b58 <UART_SetConfig>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e022      	b.n	8006a26 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb3f 	bl	800706c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fbc6 	bl	80071b0 <UART_CheckIdleState>
 8006a24:	4603      	mov	r3, r0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b08a      	sub	sp, #40	; 0x28
 8006a32:	af02      	add	r7, sp, #8
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	603b      	str	r3, [r7, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	f040 8082 	bne.w	8006b4c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Transmit+0x26>
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e07a      	b.n	8006b4e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Transmit+0x38>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e073      	b.n	8006b4e <HAL_UART_Transmit+0x120>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2221      	movs	r2, #33	; 0x21
 8006a7a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a7c:	f7fb fd78 	bl	8002570 <HAL_GetTick>
 8006a80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	88fa      	ldrh	r2, [r7, #6]
 8006a8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	d108      	bne.n	8006aae <HAL_UART_Transmit+0x80>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	e003      	b.n	8006ab6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006abe:	e02d      	b.n	8006b1c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2180      	movs	r1, #128	; 0x80
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fbb9 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e039      	b.n	8006b4e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aec:	b292      	uxth	r2, r2
 8006aee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	3302      	adds	r3, #2
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e008      	b.n	8006b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	b292      	uxth	r2, r2
 8006b02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	3301      	adds	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1cb      	bne.n	8006ac0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2140      	movs	r1, #64	; 0x40
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fb85 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e005      	b.n	8006b4e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b58:	b5b0      	push	{r4, r5, r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4bad      	ldr	r3, [pc, #692]	; (8006e38 <UART_SetConfig+0x2e0>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4aa2      	ldr	r2, [pc, #648]	; (8006e3c <UART_SetConfig+0x2e4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a99      	ldr	r2, [pc, #612]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d121      	bne.n	8006c22 <UART_SetConfig+0xca>
 8006bde:	4b99      	ldr	r3, [pc, #612]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d817      	bhi.n	8006c1c <UART_SetConfig+0xc4>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x9c>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c05 	.word	0x08006c05
 8006bf8:	08006c11 	.word	0x08006c11
 8006bfc:	08006c0b 	.word	0x08006c0b
 8006c00:	08006c17 	.word	0x08006c17
 8006c04:	2301      	movs	r3, #1
 8006c06:	76fb      	strb	r3, [r7, #27]
 8006c08:	e0e7      	b.n	8006dda <UART_SetConfig+0x282>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	76fb      	strb	r3, [r7, #27]
 8006c0e:	e0e4      	b.n	8006dda <UART_SetConfig+0x282>
 8006c10:	2304      	movs	r3, #4
 8006c12:	76fb      	strb	r3, [r7, #27]
 8006c14:	e0e1      	b.n	8006dda <UART_SetConfig+0x282>
 8006c16:	2308      	movs	r3, #8
 8006c18:	76fb      	strb	r3, [r7, #27]
 8006c1a:	e0de      	b.n	8006dda <UART_SetConfig+0x282>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	76fb      	strb	r3, [r7, #27]
 8006c20:	e0db      	b.n	8006dda <UART_SetConfig+0x282>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a88      	ldr	r2, [pc, #544]	; (8006e48 <UART_SetConfig+0x2f0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d132      	bne.n	8006c92 <UART_SetConfig+0x13a>
 8006c2c:	4b85      	ldr	r3, [pc, #532]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f003 030c 	and.w	r3, r3, #12
 8006c36:	2b0c      	cmp	r3, #12
 8006c38:	d828      	bhi.n	8006c8c <UART_SetConfig+0x134>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0xe8>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c75 	.word	0x08006c75
 8006c44:	08006c8d 	.word	0x08006c8d
 8006c48:	08006c8d 	.word	0x08006c8d
 8006c4c:	08006c8d 	.word	0x08006c8d
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006c8d 	.word	0x08006c8d
 8006c58:	08006c8d 	.word	0x08006c8d
 8006c5c:	08006c8d 	.word	0x08006c8d
 8006c60:	08006c7b 	.word	0x08006c7b
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006c87 	.word	0x08006c87
 8006c74:	2300      	movs	r3, #0
 8006c76:	76fb      	strb	r3, [r7, #27]
 8006c78:	e0af      	b.n	8006dda <UART_SetConfig+0x282>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	76fb      	strb	r3, [r7, #27]
 8006c7e:	e0ac      	b.n	8006dda <UART_SetConfig+0x282>
 8006c80:	2304      	movs	r3, #4
 8006c82:	76fb      	strb	r3, [r7, #27]
 8006c84:	e0a9      	b.n	8006dda <UART_SetConfig+0x282>
 8006c86:	2308      	movs	r3, #8
 8006c88:	76fb      	strb	r3, [r7, #27]
 8006c8a:	e0a6      	b.n	8006dda <UART_SetConfig+0x282>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	76fb      	strb	r3, [r7, #27]
 8006c90:	e0a3      	b.n	8006dda <UART_SetConfig+0x282>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6d      	ldr	r2, [pc, #436]	; (8006e4c <UART_SetConfig+0x2f4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d120      	bne.n	8006cde <UART_SetConfig+0x186>
 8006c9c:	4b69      	ldr	r3, [pc, #420]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ca6:	2b30      	cmp	r3, #48	; 0x30
 8006ca8:	d013      	beq.n	8006cd2 <UART_SetConfig+0x17a>
 8006caa:	2b30      	cmp	r3, #48	; 0x30
 8006cac:	d814      	bhi.n	8006cd8 <UART_SetConfig+0x180>
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d009      	beq.n	8006cc6 <UART_SetConfig+0x16e>
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d810      	bhi.n	8006cd8 <UART_SetConfig+0x180>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <UART_SetConfig+0x168>
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d006      	beq.n	8006ccc <UART_SetConfig+0x174>
 8006cbe:	e00b      	b.n	8006cd8 <UART_SetConfig+0x180>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	76fb      	strb	r3, [r7, #27]
 8006cc4:	e089      	b.n	8006dda <UART_SetConfig+0x282>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	76fb      	strb	r3, [r7, #27]
 8006cca:	e086      	b.n	8006dda <UART_SetConfig+0x282>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	76fb      	strb	r3, [r7, #27]
 8006cd0:	e083      	b.n	8006dda <UART_SetConfig+0x282>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	76fb      	strb	r3, [r7, #27]
 8006cd6:	e080      	b.n	8006dda <UART_SetConfig+0x282>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	76fb      	strb	r3, [r7, #27]
 8006cdc:	e07d      	b.n	8006dda <UART_SetConfig+0x282>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a5b      	ldr	r2, [pc, #364]	; (8006e50 <UART_SetConfig+0x2f8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d120      	bne.n	8006d2a <UART_SetConfig+0x1d2>
 8006ce8:	4b56      	ldr	r3, [pc, #344]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8006cf4:	d013      	beq.n	8006d1e <UART_SetConfig+0x1c6>
 8006cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cf8:	d814      	bhi.n	8006d24 <UART_SetConfig+0x1cc>
 8006cfa:	2b80      	cmp	r3, #128	; 0x80
 8006cfc:	d009      	beq.n	8006d12 <UART_SetConfig+0x1ba>
 8006cfe:	2b80      	cmp	r3, #128	; 0x80
 8006d00:	d810      	bhi.n	8006d24 <UART_SetConfig+0x1cc>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <UART_SetConfig+0x1b4>
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d006      	beq.n	8006d18 <UART_SetConfig+0x1c0>
 8006d0a:	e00b      	b.n	8006d24 <UART_SetConfig+0x1cc>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	76fb      	strb	r3, [r7, #27]
 8006d10:	e063      	b.n	8006dda <UART_SetConfig+0x282>
 8006d12:	2302      	movs	r3, #2
 8006d14:	76fb      	strb	r3, [r7, #27]
 8006d16:	e060      	b.n	8006dda <UART_SetConfig+0x282>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	76fb      	strb	r3, [r7, #27]
 8006d1c:	e05d      	b.n	8006dda <UART_SetConfig+0x282>
 8006d1e:	2308      	movs	r3, #8
 8006d20:	76fb      	strb	r3, [r7, #27]
 8006d22:	e05a      	b.n	8006dda <UART_SetConfig+0x282>
 8006d24:	2310      	movs	r3, #16
 8006d26:	76fb      	strb	r3, [r7, #27]
 8006d28:	e057      	b.n	8006dda <UART_SetConfig+0x282>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a49      	ldr	r2, [pc, #292]	; (8006e54 <UART_SetConfig+0x2fc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d125      	bne.n	8006d80 <UART_SetConfig+0x228>
 8006d34:	4b43      	ldr	r3, [pc, #268]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d42:	d017      	beq.n	8006d74 <UART_SetConfig+0x21c>
 8006d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d48:	d817      	bhi.n	8006d7a <UART_SetConfig+0x222>
 8006d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4e:	d00b      	beq.n	8006d68 <UART_SetConfig+0x210>
 8006d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d54:	d811      	bhi.n	8006d7a <UART_SetConfig+0x222>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <UART_SetConfig+0x20a>
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5e:	d006      	beq.n	8006d6e <UART_SetConfig+0x216>
 8006d60:	e00b      	b.n	8006d7a <UART_SetConfig+0x222>
 8006d62:	2300      	movs	r3, #0
 8006d64:	76fb      	strb	r3, [r7, #27]
 8006d66:	e038      	b.n	8006dda <UART_SetConfig+0x282>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	76fb      	strb	r3, [r7, #27]
 8006d6c:	e035      	b.n	8006dda <UART_SetConfig+0x282>
 8006d6e:	2304      	movs	r3, #4
 8006d70:	76fb      	strb	r3, [r7, #27]
 8006d72:	e032      	b.n	8006dda <UART_SetConfig+0x282>
 8006d74:	2308      	movs	r3, #8
 8006d76:	76fb      	strb	r3, [r7, #27]
 8006d78:	e02f      	b.n	8006dda <UART_SetConfig+0x282>
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	76fb      	strb	r3, [r7, #27]
 8006d7e:	e02c      	b.n	8006dda <UART_SetConfig+0x282>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2d      	ldr	r2, [pc, #180]	; (8006e3c <UART_SetConfig+0x2e4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d125      	bne.n	8006dd6 <UART_SetConfig+0x27e>
 8006d8a:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <UART_SetConfig+0x2ec>)
 8006d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d98:	d017      	beq.n	8006dca <UART_SetConfig+0x272>
 8006d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d9e:	d817      	bhi.n	8006dd0 <UART_SetConfig+0x278>
 8006da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da4:	d00b      	beq.n	8006dbe <UART_SetConfig+0x266>
 8006da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006daa:	d811      	bhi.n	8006dd0 <UART_SetConfig+0x278>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <UART_SetConfig+0x260>
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db4:	d006      	beq.n	8006dc4 <UART_SetConfig+0x26c>
 8006db6:	e00b      	b.n	8006dd0 <UART_SetConfig+0x278>
 8006db8:	2300      	movs	r3, #0
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e00d      	b.n	8006dda <UART_SetConfig+0x282>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	76fb      	strb	r3, [r7, #27]
 8006dc2:	e00a      	b.n	8006dda <UART_SetConfig+0x282>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	e007      	b.n	8006dda <UART_SetConfig+0x282>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	76fb      	strb	r3, [r7, #27]
 8006dce:	e004      	b.n	8006dda <UART_SetConfig+0x282>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	76fb      	strb	r3, [r7, #27]
 8006dd4:	e001      	b.n	8006dda <UART_SetConfig+0x282>
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <UART_SetConfig+0x2e4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	f040 8087 	bne.w	8006ef4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006de6:	7efb      	ldrb	r3, [r7, #27]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d837      	bhi.n	8006e5c <UART_SetConfig+0x304>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x29c>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e5d 	.word	0x08006e5d
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e5d 	.word	0x08006e5d
 8006e04:	08006e27 	.word	0x08006e27
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006e5d 	.word	0x08006e5d
 8006e10:	08006e5d 	.word	0x08006e5d
 8006e14:	08006e2f 	.word	0x08006e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e18:	f7fe ff80 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8006e1c:	6178      	str	r0, [r7, #20]
        break;
 8006e1e:	e022      	b.n	8006e66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e20:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <UART_SetConfig+0x300>)
 8006e22:	617b      	str	r3, [r7, #20]
        break;
 8006e24:	e01f      	b.n	8006e66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fe fee1 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8006e2a:	6178      	str	r0, [r7, #20]
        break;
 8006e2c:	e01b      	b.n	8006e66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e32:	617b      	str	r3, [r7, #20]
        break;
 8006e34:	e017      	b.n	8006e66 <UART_SetConfig+0x30e>
 8006e36:	bf00      	nop
 8006e38:	efff69f3 	.word	0xefff69f3
 8006e3c:	40008000 	.word	0x40008000
 8006e40:	40013800 	.word	0x40013800
 8006e44:	40021000 	.word	0x40021000
 8006e48:	40004400 	.word	0x40004400
 8006e4c:	40004800 	.word	0x40004800
 8006e50:	40004c00 	.word	0x40004c00
 8006e54:	40005000 	.word	0x40005000
 8006e58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	76bb      	strb	r3, [r7, #26]
        break;
 8006e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80f1 	beq.w	8007050 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	4413      	add	r3, r2
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d305      	bcc.n	8006e8a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d902      	bls.n	8006e90 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	76bb      	strb	r3, [r7, #26]
 8006e8e:	e0df      	b.n	8007050 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	020b      	lsls	r3, r1, #8
 8006ea2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ea6:	0202      	lsls	r2, r0, #8
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	6849      	ldr	r1, [r1, #4]
 8006eac:	0849      	lsrs	r1, r1, #1
 8006eae:	4608      	mov	r0, r1
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	1814      	adds	r4, r2, r0
 8006eb6:	eb43 0501 	adc.w	r5, r3, r1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 feee 	bl	8000ca8 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eda:	d308      	bcc.n	8006eee <UART_SetConfig+0x396>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee2:	d204      	bcs.n	8006eee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e0b0      	b.n	8007050 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	76bb      	strb	r3, [r7, #26]
 8006ef2:	e0ad      	b.n	8007050 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efc:	d15c      	bne.n	8006fb8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006efe:	7efb      	ldrb	r3, [r7, #27]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d828      	bhi.n	8006f56 <UART_SetConfig+0x3fe>
 8006f04:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <UART_SetConfig+0x3b4>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f39 	.word	0x08006f39
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08006f57 	.word	0x08006f57
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f57 	.word	0x08006f57
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006f57 	.word	0x08006f57
 8006f2c:	08006f4f 	.word	0x08006f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fe fef4 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8006f34:	6178      	str	r0, [r7, #20]
        break;
 8006f36:	e013      	b.n	8006f60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f38:	f7fe ff06 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8006f3c:	6178      	str	r0, [r7, #20]
        break;
 8006f3e:	e00f      	b.n	8006f60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f40:	4b49      	ldr	r3, [pc, #292]	; (8007068 <UART_SetConfig+0x510>)
 8006f42:	617b      	str	r3, [r7, #20]
        break;
 8006f44:	e00c      	b.n	8006f60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f46:	f7fe fe51 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8006f4a:	6178      	str	r0, [r7, #20]
        break;
 8006f4c:	e008      	b.n	8006f60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f52:	617b      	str	r3, [r7, #20]
        break;
 8006f54:	e004      	b.n	8006f60 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	76bb      	strb	r3, [r7, #26]
        break;
 8006f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d074      	beq.n	8007050 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	005a      	lsls	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	441a      	add	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d916      	bls.n	8006fb2 <UART_SetConfig+0x45a>
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8a:	d212      	bcs.n	8006fb2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f023 030f 	bic.w	r3, r3, #15
 8006f94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	89fb      	ldrh	r3, [r7, #14]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	89fa      	ldrh	r2, [r7, #14]
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e04e      	b.n	8007050 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	76bb      	strb	r3, [r7, #26]
 8006fb6:	e04b      	b.n	8007050 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb8:	7efb      	ldrb	r3, [r7, #27]
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d827      	bhi.n	800700e <UART_SetConfig+0x4b6>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x46c>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fe fe98 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8006fec:	6178      	str	r0, [r7, #20]
        break;
 8006fee:	e013      	b.n	8007018 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fe feaa 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	6178      	str	r0, [r7, #20]
        break;
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <UART_SetConfig+0x510>)
 8006ffa:	617b      	str	r3, [r7, #20]
        break;
 8006ffc:	e00c      	b.n	8007018 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fe fdf5 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8007002:	6178      	str	r0, [r7, #20]
        break;
 8007004:	e008      	b.n	8007018 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	617b      	str	r3, [r7, #20]
        break;
 800700c:	e004      	b.n	8007018 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	76bb      	strb	r3, [r7, #26]
        break;
 8007016:	bf00      	nop
    }

    if (pclk != 0U)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	085a      	lsrs	r2, r3, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	441a      	add	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007030:	b29b      	uxth	r3, r3
 8007032:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d908      	bls.n	800704c <UART_SetConfig+0x4f4>
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007040:	d204      	bcs.n	800704c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	60da      	str	r2, [r3, #12]
 800704a:	e001      	b.n	8007050 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800705c:	7ebb      	ldrb	r3, [r7, #26]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bdb0      	pop	{r4, r5, r7, pc}
 8007066:	bf00      	nop
 8007068:	00f42400 	.word	0x00f42400

0800706c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716a:	d10a      	bne.n	8007182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c0:	f7fb f9d6 	bl	8002570 <HAL_GetTick>
 80071c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d10e      	bne.n	80071f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f82d 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e023      	b.n	800723a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d10e      	bne.n	800721e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f817 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e00d      	b.n	800723a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007252:	e05e      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800725a:	d05a      	beq.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725c:	f7fb f988 	bl	8002570 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	429a      	cmp	r2, r3
 800726a:	d302      	bcc.n	8007272 <UART_WaitOnFlagUntilTimeout+0x30>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11b      	bne.n	80072aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007280:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2220      	movs	r2, #32
 8007296:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e043      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02c      	beq.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c6:	d124      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e00f      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	429a      	cmp	r2, r3
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	429a      	cmp	r2, r3
 800732e:	d091      	beq.n	8007254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <lsm6ds3_powerReset>:
#define T_Off		25		// degC


/* SUPPORT FUNCTIONS */

void lsm6ds3_powerReset() {
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8007340:	2200      	movs	r2, #0
 8007342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007346:	480d      	ldr	r0, [pc, #52]	; (800737c <lsm6ds3_powerReset+0x40>)
 8007348:	f7fd f888 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800734c:	20c8      	movs	r0, #200	; 0xc8
 800734e:	f7fb f91b 	bl	8002588 <HAL_Delay>

	// connect I2C bus
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_SET);
 8007352:	2201      	movs	r2, #1
 8007354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007358:	4808      	ldr	r0, [pc, #32]	; (800737c <lsm6ds3_powerReset+0x40>)
 800735a:	f7fd f87f 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800735e:	2064      	movs	r0, #100	; 0x64
 8007360:	f7fb f912 	bl	8002588 <HAL_Delay>

	log_send(0, "lsm6ds3_powerReset", -1, "na", NAN);
 8007364:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8007380 <lsm6ds3_powerReset+0x44>
 8007368:	4b06      	ldr	r3, [pc, #24]	; (8007384 <lsm6ds3_powerReset+0x48>)
 800736a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800736e:	4906      	ldr	r1, [pc, #24]	; (8007388 <lsm6ds3_powerReset+0x4c>)
 8007370:	2000      	movs	r0, #0
 8007372:	f000 ffbd 	bl	80082f0 <log_send>
}
 8007376:	bf00      	nop
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	48000400 	.word	0x48000400
 8007380:	7fc00000 	.word	0x7fc00000
 8007384:	0800ce88 	.word	0x0800ce88
 8007388:	0800ce8c 	.word	0x0800ce8c

0800738c <lsm6ds3_waitMeasure>:


int lsm6ds3_waitMeasure(I2C_HandleTypeDef *hand, int type, int dev) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af04      	add	r7, sp, #16
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]

	// periodically check status register
	while(cnt*10 < TIMEOUT) {
 800739c:	e040      	b.n	8007420 <lsm6ds3_waitMeasure+0x94>
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
 800739e:	236a      	movs	r3, #106	; 0x6a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	b299      	uxth	r1, r3
 80073a6:	2364      	movs	r3, #100	; 0x64
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	2301      	movs	r3, #1
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	f107 0312 	add.w	r3, r7, #18
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2301      	movs	r3, #1
 80073b6:	221e      	movs	r2, #30
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7fd fa0b 	bl	80047d4 <HAL_I2C_Mem_Read>
 80073be:	4603      	mov	r3, r0
 80073c0:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK) log_send(1, "lsm6ds3_waitMeasure", dev, "na", 1);
 80073c2:	7cfb      	ldrb	r3, [r7, #19]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <lsm6ds3_waitMeasure+0x4c>
 80073c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80073cc:	4b1b      	ldr	r3, [pc, #108]	; (800743c <lsm6ds3_waitMeasure+0xb0>)
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	491b      	ldr	r1, [pc, #108]	; (8007440 <lsm6ds3_waitMeasure+0xb4>)
 80073d2:	2001      	movs	r0, #1
 80073d4:	f000 ff8c 	bl	80082f0 <log_send>

		// check buffer (0:acc, 1:gyro, 2:temp)
		if(type == 0 && (buff & (1 << RDY_XLDA))) return 0;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <lsm6ds3_waitMeasure+0x60>
 80073de:	7cbb      	ldrb	r3, [r7, #18]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <lsm6ds3_waitMeasure+0x60>
 80073e8:	2300      	movs	r3, #0
 80073ea:	e022      	b.n	8007432 <lsm6ds3_waitMeasure+0xa6>
		else if(type == 1 && (buff & (1 << RDY_GDA))) return 0;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d106      	bne.n	8007400 <lsm6ds3_waitMeasure+0x74>
 80073f2:	7cbb      	ldrb	r3, [r7, #18]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <lsm6ds3_waitMeasure+0x74>
 80073fc:	2300      	movs	r3, #0
 80073fe:	e018      	b.n	8007432 <lsm6ds3_waitMeasure+0xa6>
		else if(type == 2 && (buff & (1 << RDY_TDA))) return 0;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d106      	bne.n	8007414 <lsm6ds3_waitMeasure+0x88>
 8007406:	7cbb      	ldrb	r3, [r7, #18]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <lsm6ds3_waitMeasure+0x88>
 8007410:	2300      	movs	r3, #0
 8007412:	e00e      	b.n	8007432 <lsm6ds3_waitMeasure+0xa6>

		// wait 5ms and increase counter
		HAL_Delay(5);
 8007414:	2005      	movs	r0, #5
 8007416:	f7fb f8b7 	bl	8002588 <HAL_Delay>
		cnt++;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	3301      	adds	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
	while(cnt*10 < TIMEOUT) {
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	2bc7      	cmp	r3, #199	; 0xc7
 800742c:	ddb7      	ble.n	800739e <lsm6ds3_waitMeasure+0x12>
	}

	// timeout error
	return -1;
 800742e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	0800ce88 	.word	0x0800ce88
 8007440:	0800cea0 	.word	0x0800cea0

08007444 <lsm6ds3_processBuff>:


int16_t lsm6ds3_processBuff(uint8_t *buff, int data) {
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	return (int16_t)buff[0 + 2*data] | (int16_t)(buff[1 + 2*data] << 8);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4413      	add	r3, r2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b21a      	sxth	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	3301      	adds	r3, #1
 8007462:	4619      	mov	r1, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	440b      	add	r3, r1
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	b21b      	sxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b21b      	sxth	r3, r3
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <lsm6ds3_configure>:


/* MAIN FUNCTIONS */

void lsm6ds3_configure(I2C_HandleTypeDef *hand, int dev) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af04      	add	r7, sp, #16
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	// reset device
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL3, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
 800748a:	236a      	movs	r3, #106	; 0x6a
 800748c:	b29b      	uxth	r3, r3
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	b299      	uxth	r1, r3
 8007492:	2364      	movs	r3, #100	; 0x64
 8007494:	9302      	str	r3, [sp, #8]
 8007496:	2301      	movs	r3, #1
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <lsm6ds3_configure+0xd0>)
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2301      	movs	r3, #1
 80074a0:	2212      	movs	r2, #18
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fd f882 	bl	80045ac <HAL_I2C_Mem_Write>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_configure", dev, "na", 1);
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <lsm6ds3_configure+0x42>
 80074b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <lsm6ds3_configure+0xd4>)
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	4927      	ldr	r1, [pc, #156]	; (8007558 <lsm6ds3_configure+0xd8>)
 80074bc:	2001      	movs	r0, #1
 80074be:	f000 ff17 	bl	80082f0 <log_send>
	HAL_Delay(100);
 80074c2:	2064      	movs	r0, #100	; 0x64
 80074c4:	f7fb f860 	bl	8002588 <HAL_Delay>

	// enable accelerometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_ODR_XL, 1, I2C_TIMEOUT);
 80074c8:	236a      	movs	r3, #106	; 0x6a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	b299      	uxth	r1, r3
 80074d0:	2364      	movs	r3, #100	; 0x64
 80074d2:	9302      	str	r3, [sp, #8]
 80074d4:	2301      	movs	r3, #1
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	4b20      	ldr	r3, [pc, #128]	; (800755c <lsm6ds3_configure+0xdc>)
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2301      	movs	r3, #1
 80074de:	2210      	movs	r2, #16
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fd f863 	bl	80045ac <HAL_I2C_Mem_Write>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_configure", dev, "na", 3);
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <lsm6ds3_configure+0x80>
 80074f0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80074f4:	4b17      	ldr	r3, [pc, #92]	; (8007554 <lsm6ds3_configure+0xd4>)
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4917      	ldr	r1, [pc, #92]	; (8007558 <lsm6ds3_configure+0xd8>)
 80074fa:	2001      	movs	r0, #1
 80074fc:	f000 fef8 	bl	80082f0 <log_send>

	// enable gyroscope
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL2, 1, &CMD_ODR_G, 1, I2C_TIMEOUT);
 8007500:	236a      	movs	r3, #106	; 0x6a
 8007502:	b29b      	uxth	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b299      	uxth	r1, r3
 8007508:	2364      	movs	r3, #100	; 0x64
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	2301      	movs	r3, #1
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	4b13      	ldr	r3, [pc, #76]	; (8007560 <lsm6ds3_configure+0xe0>)
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	2301      	movs	r3, #1
 8007516:	2211      	movs	r2, #17
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fd f847 	bl	80045ac <HAL_I2C_Mem_Write>
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_configure", dev, "na", 2);
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d007      	beq.n	8007538 <lsm6ds3_configure+0xb8>
 8007528:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <lsm6ds3_configure+0xd4>)
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4909      	ldr	r1, [pc, #36]	; (8007558 <lsm6ds3_configure+0xd8>)
 8007532:	2001      	movs	r0, #1
 8007534:	f000 fedc 	bl	80082f0 <log_send>

	log_send(0, "mmc5883_config", dev, "na", NAN);
 8007538:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007564 <lsm6ds3_configure+0xe4>
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <lsm6ds3_configure+0xd4>)
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	4909      	ldr	r1, [pc, #36]	; (8007568 <lsm6ds3_configure+0xe8>)
 8007542:	2000      	movs	r0, #0
 8007544:	f000 fed4 	bl	80082f0 <log_send>
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000009 	.word	0x20000009
 8007554:	0800ce88 	.word	0x0800ce88
 8007558:	0800ceb4 	.word	0x0800ceb4
 800755c:	2000000b 	.word	0x2000000b
 8007560:	2000000a 	.word	0x2000000a
 8007564:	7fc00000 	.word	0x7fc00000
 8007568:	0800cec8 	.word	0x0800cec8

0800756c <lsm6ds3_readManufac>:


void lsm6ds3_readManufac(I2C_HandleTypeDef *hand, int dev) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af04      	add	r7, sp, #16
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
 8007576:	236a      	movs	r3, #106	; 0x6a
 8007578:	b29b      	uxth	r3, r3
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	b299      	uxth	r1, r3
 800757e:	2364      	movs	r3, #100	; 0x64
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	2301      	movs	r3, #1
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	f107 030e 	add.w	r3, r7, #14
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2301      	movs	r3, #1
 800758e:	220f      	movs	r2, #15
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fd f91f 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_readManufac", dev, "na", 1);
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <lsm6ds3_readManufac+0x44>
 80075a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80075a4:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <lsm6ds3_readManufac+0x70>)
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	490d      	ldr	r1, [pc, #52]	; (80075e0 <lsm6ds3_readManufac+0x74>)
 80075aa:	2001      	movs	r0, #1
 80075ac:	f000 fea0 	bl	80082f0 <log_send>

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
 80075b0:	f107 0208 	add.w	r2, r7, #8
 80075b4:	f107 030e 	add.w	r3, r7, #14
 80075b8:	2101      	movs	r1, #1
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fe5c 	bl	8008278 <addr2str>
	log_send(2, "lsm6ds3_readManufac", dev, tmp, NAN);
 80075c0:	f107 0308 	add.w	r3, r7, #8
 80075c4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80075e4 <lsm6ds3_readManufac+0x78>
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	4905      	ldr	r1, [pc, #20]	; (80075e0 <lsm6ds3_readManufac+0x74>)
 80075cc:	2002      	movs	r0, #2
 80075ce:	f000 fe8f 	bl	80082f0 <log_send>
}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	0800ce88 	.word	0x0800ce88
 80075e0:	0800ced8 	.word	0x0800ced8
 80075e4:	7fc00000 	.word	0x7fc00000

080075e8 <lsm6ds3_readAccData>:


void lsm6ds3_readAccData(I2C_HandleTypeDef *hand, int dev) {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 0, dev);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	2100      	movs	r1, #0
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fec8 	bl	800738c <lsm6ds3_waitMeasure>
 80075fc:	6238      	str	r0, [r7, #32]
	if(waitRet != 0) log_send(1, "lsm6ds3_readAccData", dev, "na", 1);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <lsm6ds3_readAccData+0x2c>
 8007604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007608:	4b39      	ldr	r3, [pc, #228]	; (80076f0 <lsm6ds3_readAccData+0x108>)
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4939      	ldr	r1, [pc, #228]	; (80076f4 <lsm6ds3_readAccData+0x10c>)
 800760e:	2001      	movs	r0, #1
 8007610:	f000 fe6e 	bl	80082f0 <log_send>

	// read gyroscope register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ACC, 1, buff, 6, I2C_TIMEOUT);
 8007614:	236a      	movs	r3, #106	; 0x6a
 8007616:	b29b      	uxth	r3, r3
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	b299      	uxth	r1, r3
 800761c:	2364      	movs	r3, #100	; 0x64
 800761e:	9302      	str	r3, [sp, #8]
 8007620:	2306      	movs	r3, #6
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	f107 0318 	add.w	r3, r7, #24
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2301      	movs	r3, #1
 800762c:	2228      	movs	r2, #40	; 0x28
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fd f8d0 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007634:	4603      	mov	r3, r0
 8007636:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_readAccData", dev, "na", 2);
 8007638:	7ffb      	ldrb	r3, [r7, #31]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <lsm6ds3_readAccData+0x66>
 800763e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007642:	4b2b      	ldr	r3, [pc, #172]	; (80076f0 <lsm6ds3_readAccData+0x108>)
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	492b      	ldr	r1, [pc, #172]	; (80076f4 <lsm6ds3_readAccData+0x10c>)
 8007648:	2001      	movs	r0, #1
 800764a:	f000 fe51 	bl	80082f0 <log_send>

	// process gyroscope data
	float val[3];
	for(int i=0; i<3; i++) {
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
 8007652:	e024      	b.n	800769e <lsm6ds3_readAccData+0xb6>
		val[i] = (float)lsm6ds3_processBuff(buff, i) * (LA_So / 1000) * (LA_FS / 2);
 8007654:	f107 0318 	add.w	r3, r7, #24
 8007658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fef2 	bl	8007444 <lsm6ds3_processBuff>
 8007660:	4603      	mov	r3, r0
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766a:	ee17 0a90 	vmov	r0, s15
 800766e:	f7f8 ff7b 	bl	8000568 <__aeabi_f2d>
 8007672:	a31d      	add	r3, pc, #116	; (adr r3, 80076e8 <lsm6ds3_readAccData+0x100>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f7f8 ffce 	bl	8000618 <__aeabi_dmul>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f7f9 fac0 	bl	8000c08 <__aeabi_d2f>
 8007688:	4602      	mov	r2, r0
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007692:	440b      	add	r3, r1
 8007694:	3b1c      	subs	r3, #28
 8007696:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	3301      	adds	r3, #1
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	ddd7      	ble.n	8007654 <lsm6ds3_readAccData+0x6c>
	}

	log_send(2, "lsm6ds3_readAccData", dev, "acc_x", val[0]);
 80076a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80076a8:	eeb0 0a67 	vmov.f32	s0, s15
 80076ac:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <lsm6ds3_readAccData+0x110>)
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4910      	ldr	r1, [pc, #64]	; (80076f4 <lsm6ds3_readAccData+0x10c>)
 80076b2:	2002      	movs	r0, #2
 80076b4:	f000 fe1c 	bl	80082f0 <log_send>
	log_send(2, "lsm6ds3_readAccData", dev, "acc_y", val[1]);
 80076b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80076bc:	eeb0 0a67 	vmov.f32	s0, s15
 80076c0:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <lsm6ds3_readAccData+0x114>)
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	490b      	ldr	r1, [pc, #44]	; (80076f4 <lsm6ds3_readAccData+0x10c>)
 80076c6:	2002      	movs	r0, #2
 80076c8:	f000 fe12 	bl	80082f0 <log_send>
	log_send(2, "lsm6ds3_readAccData", dev, "acc_z", val[2]);
 80076cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80076d0:	eeb0 0a67 	vmov.f32	s0, s15
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <lsm6ds3_readAccData+0x118>)
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	4906      	ldr	r1, [pc, #24]	; (80076f4 <lsm6ds3_readAccData+0x10c>)
 80076da:	2002      	movs	r0, #2
 80076dc:	f000 fe08 	bl	80082f0 <log_send>
}
 80076e0:	bf00      	nop
 80076e2:	3728      	adds	r7, #40	; 0x28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	0a5accd5 	.word	0x0a5accd5
 80076ec:	3f0ffb48 	.word	0x3f0ffb48
 80076f0:	0800ce88 	.word	0x0800ce88
 80076f4:	0800ceec 	.word	0x0800ceec
 80076f8:	0800cf00 	.word	0x0800cf00
 80076fc:	0800cf08 	.word	0x0800cf08
 8007700:	0800cf10 	.word	0x0800cf10
 8007704:	00000000 	.word	0x00000000

08007708 <lsm6ds3_readGyroData>:


void lsm6ds3_readGyroData(I2C_HandleTypeDef *hand, int dev) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b08e      	sub	sp, #56	; 0x38
 800770c:	af04      	add	r7, sp, #16
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 1, dev);
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	2101      	movs	r1, #1
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff fe38 	bl	800738c <lsm6ds3_waitMeasure>
 800771c:	6238      	str	r0, [r7, #32]
	if(waitRet != 0) log_send(1, "lsm6ds3_readGyroData", dev, "na", 1);
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <lsm6ds3_readGyroData+0x2c>
 8007724:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007728:	4b39      	ldr	r3, [pc, #228]	; (8007810 <lsm6ds3_readGyroData+0x108>)
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4939      	ldr	r1, [pc, #228]	; (8007814 <lsm6ds3_readGyroData+0x10c>)
 800772e:	2001      	movs	r0, #1
 8007730:	f000 fdde 	bl	80082f0 <log_send>

	// read gyroscope register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_GYRO, 1, buff, 6, I2C_TIMEOUT);
 8007734:	236a      	movs	r3, #106	; 0x6a
 8007736:	b29b      	uxth	r3, r3
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	b299      	uxth	r1, r3
 800773c:	2364      	movs	r3, #100	; 0x64
 800773e:	9302      	str	r3, [sp, #8]
 8007740:	2306      	movs	r3, #6
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	f107 0318 	add.w	r3, r7, #24
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2301      	movs	r3, #1
 800774c:	2222      	movs	r2, #34	; 0x22
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fd f840 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007754:	4603      	mov	r3, r0
 8007756:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_readGyroData", dev, "na", 2);
 8007758:	7ffb      	ldrb	r3, [r7, #31]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <lsm6ds3_readGyroData+0x66>
 800775e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007762:	4b2b      	ldr	r3, [pc, #172]	; (8007810 <lsm6ds3_readGyroData+0x108>)
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	492b      	ldr	r1, [pc, #172]	; (8007814 <lsm6ds3_readGyroData+0x10c>)
 8007768:	2001      	movs	r0, #1
 800776a:	f000 fdc1 	bl	80082f0 <log_send>

	// process gyroscope data
	float val[3];
	for(int i=0; i<3; i++) {
 800776e:	2300      	movs	r3, #0
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
 8007772:	e024      	b.n	80077be <lsm6ds3_readGyroData+0xb6>
		val[i] = (float)lsm6ds3_processBuff(buff, i) * (G_So / 1000) * (G_FS / 125);
 8007774:	f107 0318 	add.w	r3, r7, #24
 8007778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fe62 	bl	8007444 <lsm6ds3_processBuff>
 8007780:	4603      	mov	r3, r0
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800778a:	ee17 0a90 	vmov	r0, s15
 800778e:	f7f8 feeb 	bl	8000568 <__aeabi_f2d>
 8007792:	a31d      	add	r3, pc, #116	; (adr r3, 8007808 <lsm6ds3_readGyroData+0x100>)
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f7f8 ff3e 	bl	8000618 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4610      	mov	r0, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	f7f9 fa30 	bl	8000c08 <__aeabi_d2f>
 80077a8:	4602      	mov	r2, r0
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80077b2:	440b      	add	r3, r1
 80077b4:	3b1c      	subs	r3, #28
 80077b6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	3301      	adds	r3, #1
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	ddd7      	ble.n	8007774 <lsm6ds3_readGyroData+0x6c>
	}

	log_send(2, "lsm6ds3_readGyroData", dev, "gyro_x", val[0]);
 80077c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80077c8:	eeb0 0a67 	vmov.f32	s0, s15
 80077cc:	4b12      	ldr	r3, [pc, #72]	; (8007818 <lsm6ds3_readGyroData+0x110>)
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4910      	ldr	r1, [pc, #64]	; (8007814 <lsm6ds3_readGyroData+0x10c>)
 80077d2:	2002      	movs	r0, #2
 80077d4:	f000 fd8c 	bl	80082f0 <log_send>
	log_send(2, "lsm6ds3_readGyroData", dev, "gyro_y", val[1]);
 80077d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80077dc:	eeb0 0a67 	vmov.f32	s0, s15
 80077e0:	4b0e      	ldr	r3, [pc, #56]	; (800781c <lsm6ds3_readGyroData+0x114>)
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	490b      	ldr	r1, [pc, #44]	; (8007814 <lsm6ds3_readGyroData+0x10c>)
 80077e6:	2002      	movs	r0, #2
 80077e8:	f000 fd82 	bl	80082f0 <log_send>
	log_send(2, "lsm6ds3_readGyroData", dev, "gyro_z", val[2]);
 80077ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80077f0:	eeb0 0a67 	vmov.f32	s0, s15
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <lsm6ds3_readGyroData+0x118>)
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4906      	ldr	r1, [pc, #24]	; (8007814 <lsm6ds3_readGyroData+0x10c>)
 80077fa:	2002      	movs	r0, #2
 80077fc:	f000 fd78 	bl	80082f0 <log_send>
}
 8007800:	bf00      	nop
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	1eb851ec 	.word	0x1eb851ec
 800780c:	3f71eb85 	.word	0x3f71eb85
 8007810:	0800ce88 	.word	0x0800ce88
 8007814:	0800cf18 	.word	0x0800cf18
 8007818:	0800cf30 	.word	0x0800cf30
 800781c:	0800cf38 	.word	0x0800cf38
 8007820:	0800cf40 	.word	0x0800cf40

08007824 <lsm6ds3_readTempData>:


void lsm6ds3_readTempData(I2C_HandleTypeDef *hand, int dev) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af04      	add	r7, sp, #16
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 2, dev);
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	2102      	movs	r1, #2
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff fdaa 	bl	800738c <lsm6ds3_waitMeasure>
 8007838:	6178      	str	r0, [r7, #20]
	if(waitRet != 0) log_send(1, "lsm6ds3_readTempData", dev, "na", 1);
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <lsm6ds3_readTempData+0x2c>
 8007840:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007844:	4b21      	ldr	r3, [pc, #132]	; (80078cc <lsm6ds3_readTempData+0xa8>)
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4921      	ldr	r1, [pc, #132]	; (80078d0 <lsm6ds3_readTempData+0xac>)
 800784a:	2001      	movs	r0, #1
 800784c:	f000 fd50 	bl	80082f0 <log_send>

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
 8007850:	236a      	movs	r3, #106	; 0x6a
 8007852:	b29b      	uxth	r3, r3
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	b299      	uxth	r1, r3
 8007858:	2364      	movs	r3, #100	; 0x64
 800785a:	9302      	str	r3, [sp, #8]
 800785c:	2302      	movs	r3, #2
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f107 0308 	add.w	r3, r7, #8
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2301      	movs	r3, #1
 8007868:	2220      	movs	r2, #32
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fc ffb2 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007870:	4603      	mov	r3, r0
 8007872:	74fb      	strb	r3, [r7, #19]
	if(ret != HAL_OK) log_send(1, "lsm6ds3_readTempData", dev, "na", 2);
 8007874:	7cfb      	ldrb	r3, [r7, #19]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <lsm6ds3_readTempData+0x66>
 800787a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <lsm6ds3_readTempData+0xa8>)
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	4913      	ldr	r1, [pc, #76]	; (80078d0 <lsm6ds3_readTempData+0xac>)
 8007884:	2001      	movs	r0, #1
 8007886:	f000 fd33 	bl	80082f0 <log_send>

	// process temperature value
	float val = T_Off + (float)lsm6ds3_processBuff(buff,0) / T_So;
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fdd7 	bl	8007444 <lsm6ds3_processBuff>
 8007896:	4603      	mov	r3, r0
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078a0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80078a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078a8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80078ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078b0:	edc7 7a03 	vstr	s15, [r7, #12]

	log_send(2, "mmc5883_readTempData", dev, "temp", val);
 80078b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <lsm6ds3_readTempData+0xb0>)
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4906      	ldr	r1, [pc, #24]	; (80078d8 <lsm6ds3_readTempData+0xb4>)
 80078be:	2002      	movs	r0, #2
 80078c0:	f000 fd16 	bl	80082f0 <log_send>
}
 80078c4:	bf00      	nop
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	0800ce88 	.word	0x0800ce88
 80078d0:	0800cf48 	.word	0x0800cf48
 80078d4:	0800cf60 	.word	0x0800cf60
 80078d8:	0800cf68 	.word	0x0800cf68

080078dc <mcp9804_powerReset>:
// MCP9804 significant commands


/* SUPPORT FUNCTIONS */

void mcp9804_powerReset() {
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_RESET);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2180      	movs	r1, #128	; 0x80
 80078e4:	480c      	ldr	r0, [pc, #48]	; (8007918 <mcp9804_powerReset+0x3c>)
 80078e6:	f7fc fdb9 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80078ea:	20c8      	movs	r0, #200	; 0xc8
 80078ec:	f7fa fe4c 	bl	8002588 <HAL_Delay>

	// connect I2C bus
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_SET);
 80078f0:	2201      	movs	r2, #1
 80078f2:	2180      	movs	r1, #128	; 0x80
 80078f4:	4808      	ldr	r0, [pc, #32]	; (8007918 <mcp9804_powerReset+0x3c>)
 80078f6:	f7fc fdb1 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80078fa:	2064      	movs	r0, #100	; 0x64
 80078fc:	f7fa fe44 	bl	8002588 <HAL_Delay>

	log_send(0, "mcp9804_powerReset", -1, "na", NAN);
 8007900:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800791c <mcp9804_powerReset+0x40>
 8007904:	4b06      	ldr	r3, [pc, #24]	; (8007920 <mcp9804_powerReset+0x44>)
 8007906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790a:	4906      	ldr	r1, [pc, #24]	; (8007924 <mcp9804_powerReset+0x48>)
 800790c:	2000      	movs	r0, #0
 800790e:	f000 fcef 	bl	80082f0 <log_send>
}
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	48000c00 	.word	0x48000c00
 800791c:	7fc00000 	.word	0x7fc00000
 8007920:	0800cf80 	.word	0x0800cf80
 8007924:	0800cf84 	.word	0x0800cf84

08007928 <mcp9804_configure>:


/* MAIN FUNCTIONS */

void mcp9804_configure(I2C_HandleTypeDef *hand, int dev) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]

	// right now nothing to do

	log_send(0, "mcp9804_configure", dev, "na", NAN);
 8007932:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800794c <mcp9804_configure+0x24>
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <mcp9804_configure+0x28>)
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	4906      	ldr	r1, [pc, #24]	; (8007954 <mcp9804_configure+0x2c>)
 800793c:	2000      	movs	r0, #0
 800793e:	f000 fcd7 	bl	80082f0 <log_send>
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	7fc00000 	.word	0x7fc00000
 8007950:	0800cf80 	.word	0x0800cf80
 8007954:	0800cf98 	.word	0x0800cf98

08007958 <mcp9884_readManufac>:


void mcp9884_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af04      	add	r7, sp, #16
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2];

	// read manufacturer ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, buff, 2, I2C_TIMEOUT);
 8007962:	4a3c      	ldr	r2, [pc, #240]	; (8007a54 <mcp9884_readManufac+0xfc>)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	4413      	add	r3, r2
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	b299      	uxth	r1, r3
 8007970:	2364      	movs	r3, #100	; 0x64
 8007972:	9302      	str	r3, [sp, #8]
 8007974:	2302      	movs	r3, #2
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2301      	movs	r3, #1
 8007980:	2206      	movs	r2, #6
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fc ff26 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007988:	4603      	mov	r3, r0
 800798a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mcp9884_readManufac", dev, "na", 1);
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <mcp9884_readManufac+0x4a>
 8007992:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007996:	4b30      	ldr	r3, [pc, #192]	; (8007a58 <mcp9884_readManufac+0x100>)
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	4930      	ldr	r1, [pc, #192]	; (8007a5c <mcp9884_readManufac+0x104>)
 800799c:	2001      	movs	r0, #1
 800799e:	f000 fca7 	bl	80082f0 <log_send>

	// convert address to string
	char tmp[5];
	addr2str(buff, 2, tmp);
 80079a2:	f107 020c 	add.w	r2, r7, #12
 80079a6:	f107 0314 	add.w	r3, r7, #20
 80079aa:	2102      	movs	r1, #2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fc63 	bl	8008278 <addr2str>
	log_send(2, "mcp9884_readManufac->manufacturer_id", dev, tmp, NAN);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8007a60 <mcp9884_readManufac+0x108>
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4929      	ldr	r1, [pc, #164]	; (8007a64 <mcp9884_readManufac+0x10c>)
 80079be:	2002      	movs	r0, #2
 80079c0:	f000 fc96 	bl	80082f0 <log_send>

	// read dev ID and revision register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_DEV, 1, buff, 2, I2C_TIMEOUT);
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <mcp9884_readManufac+0xfc>)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	4413      	add	r3, r2
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	b299      	uxth	r1, r3
 80079d2:	2364      	movs	r3, #100	; 0x64
 80079d4:	9302      	str	r3, [sp, #8]
 80079d6:	2302      	movs	r3, #2
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	f107 0314 	add.w	r3, r7, #20
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	2301      	movs	r3, #1
 80079e2:	2207      	movs	r2, #7
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7fc fef5 	bl	80047d4 <HAL_I2C_Mem_Read>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mcp9884_readManufac", dev, "na", 2);
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <mcp9884_readManufac+0xac>
 80079f4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80079f8:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <mcp9884_readManufac+0x100>)
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4917      	ldr	r1, [pc, #92]	; (8007a5c <mcp9884_readManufac+0x104>)
 80079fe:	2001      	movs	r0, #1
 8007a00:	f000 fc76 	bl	80082f0 <log_send>

	// convert address to string
	addr2str(&buff[0], 1, tmp);
 8007a04:	f107 020c 	add.w	r2, r7, #12
 8007a08:	f107 0314 	add.w	r3, r7, #20
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc32 	bl	8008278 <addr2str>
	log_send(2, "mcp9884_readManufac->dev_id", dev, tmp, NAN);
 8007a14:	f107 030c 	add.w	r3, r7, #12
 8007a18:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007a60 <mcp9884_readManufac+0x108>
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4912      	ldr	r1, [pc, #72]	; (8007a68 <mcp9884_readManufac+0x110>)
 8007a20:	2002      	movs	r0, #2
 8007a22:	f000 fc65 	bl	80082f0 <log_send>

	// convert address to string
	addr2str(&buff[1], 1, tmp);
 8007a26:	f107 020c 	add.w	r2, r7, #12
 8007a2a:	f107 0314 	add.w	r3, r7, #20
 8007a2e:	3301      	adds	r3, #1
 8007a30:	2101      	movs	r1, #1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fc20 	bl	8008278 <addr2str>
	log_send(2, "mcp9884_readManufac->revision", dev, tmp, NAN);
 8007a38:	f107 030c 	add.w	r3, r7, #12
 8007a3c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007a60 <mcp9884_readManufac+0x108>
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	490a      	ldr	r1, [pc, #40]	; (8007a6c <mcp9884_readManufac+0x114>)
 8007a44:	2002      	movs	r0, #2
 8007a46:	f000 fc53 	bl	80082f0 <log_send>
}
 8007a4a:	bf00      	nop
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	0800d1bc 	.word	0x0800d1bc
 8007a58:	0800cf80 	.word	0x0800cf80
 8007a5c:	0800cfac 	.word	0x0800cfac
 8007a60:	7fc00000 	.word	0x7fc00000
 8007a64:	0800cfc0 	.word	0x0800cfc0
 8007a68:	0800cfe8 	.word	0x0800cfe8
 8007a6c:	0800d004 	.word	0x0800d004

08007a70 <mcp9884_readData>:


void mcp9884_readData(I2C_HandleTypeDef *hand, int dev) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af04      	add	r7, sp, #16
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2];

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
 8007a7a:	4a33      	ldr	r2, [pc, #204]	; (8007b48 <mcp9884_readData+0xd8>)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	4413      	add	r3, r2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	b299      	uxth	r1, r3
 8007a88:	2364      	movs	r3, #100	; 0x64
 8007a8a:	9302      	str	r3, [sp, #8]
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	f107 0308 	add.w	r3, r7, #8
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2301      	movs	r3, #1
 8007a98:	2205      	movs	r2, #5
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fc fe9a 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK) log_send(1, "mcp9884_readData", dev, "na", 1);
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <mcp9884_readData+0x4a>
 8007aaa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007aae:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <mcp9884_readData+0xdc>)
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	4927      	ldr	r1, [pc, #156]	; (8007b50 <mcp9884_readData+0xe0>)
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f000 fc1b 	bl	80082f0 <log_send>

	// clear flag byte
	if(buff[0] & 0xE0)
 8007aba:	7a3b      	ldrb	r3, [r7, #8]
 8007abc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <mcp9884_readData+0x5e>
		buff[0] = buff[0] & 0x1F;
 8007ac4:	7a3b      	ldrb	r3, [r7, #8]
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	723b      	strb	r3, [r7, #8]

	// convert Ta value to degC temperature
	float value;
	if((buff[0] & 0x10) == 0x10){
 8007ace:	7a3b      	ldrb	r3, [r7, #8]
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d014      	beq.n	8007b02 <mcp9884_readData+0x92>
		buff[0] = buff[0] & 0x0F;
 8007ad8:	7a3b      	ldrb	r3, [r7, #8]
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	723b      	strb	r3, [r7, #8]
		value = (256 - (buff[0] << 4) + (buff[1] >> 4)) * -1;
 8007ae2:	7a3b      	ldrb	r3, [r7, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007aea:	7a7a      	ldrb	r2, [r7, #9]
 8007aec:	0912      	lsrs	r2, r2, #4
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	4413      	add	r3, r2
 8007af2:	425b      	negs	r3, r3
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007afc:	edc7 7a03 	vstr	s15, [r7, #12]
 8007b00:	e015      	b.n	8007b2e <mcp9884_readData+0xbe>
	}
	else
		value = (float)buff[0] * 16 + (float)buff[1] / 16;
 8007b02:	7a3b      	ldrb	r3, [r7, #8]
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b14:	7a7b      	ldrb	r3, [r7, #9]
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1e:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8007b22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b2a:	edc7 7a03 	vstr	s15, [r7, #12]

	log_send(2, "mcp9884_readData", dev, "na", value);
 8007b2e:	ed97 0a03 	vldr	s0, [r7, #12]
 8007b32:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <mcp9884_readData+0xdc>)
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	4906      	ldr	r1, [pc, #24]	; (8007b50 <mcp9884_readData+0xe0>)
 8007b38:	2002      	movs	r0, #2
 8007b3a:	f000 fbd9 	bl	80082f0 <log_send>
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	0800d1bc 	.word	0x0800d1bc
 8007b4c:	0800cf80 	.word	0x0800cf80
 8007b50:	0800d024 	.word	0x0800d024

08007b54 <mmc5883_powerReset>:
#define T_So		0.7		// LSB/degC
#define T_Off		-75		// degC

/* SUPPORT FUNCTIONS */

void mmc5883_powerReset() {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
	// isolate both I2C busses
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_RESET);
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b5e:	4813      	ldr	r0, [pc, #76]	; (8007bac <mmc5883_powerReset+0x58>)
 8007b60:	f7fc fc7c 	bl	800445c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8007b64:	2200      	movs	r2, #0
 8007b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b6a:	4811      	ldr	r0, [pc, #68]	; (8007bb0 <mmc5883_powerReset+0x5c>)
 8007b6c:	f7fc fc76 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8007b70:	20c8      	movs	r0, #200	; 0xc8
 8007b72:	f7fa fd09 	bl	8002588 <HAL_Delay>

	// connect both I2C busses
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_SET);
 8007b76:	2201      	movs	r2, #1
 8007b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b7c:	480b      	ldr	r0, [pc, #44]	; (8007bac <mmc5883_powerReset+0x58>)
 8007b7e:	f7fc fc6d 	bl	800445c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_SET);
 8007b82:	2201      	movs	r2, #1
 8007b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b88:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <mmc5883_powerReset+0x5c>)
 8007b8a:	f7fc fc67 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007b8e:	2064      	movs	r0, #100	; 0x64
 8007b90:	f7fa fcfa 	bl	8002588 <HAL_Delay>

	log_send(0, "mmc5883_powerReset", -1, "na", NAN);
 8007b94:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8007bb4 <mmc5883_powerReset+0x60>
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <mmc5883_powerReset+0x64>)
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b9e:	4907      	ldr	r1, [pc, #28]	; (8007bbc <mmc5883_powerReset+0x68>)
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f000 fba5 	bl	80082f0 <log_send>
}
 8007ba6:	bf00      	nop
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	48000c00 	.word	0x48000c00
 8007bb0:	48000400 	.word	0x48000400
 8007bb4:	7fc00000 	.word	0x7fc00000
 8007bb8:	0800d038 	.word	0x0800d038
 8007bbc:	0800d03c 	.word	0x0800d03c

08007bc0 <mmc5883_waitMeasure>:


int mmc5883_waitMeasure(I2C_HandleTypeDef *hand, bool type, int dev) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]

	// periodically check status register
	while(cnt*10 < TIMEOUT) {
 8007bd2:	e03c      	b.n	8007c4e <mmc5883_waitMeasure+0x8e>
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
 8007bd4:	4a24      	ldr	r2, [pc, #144]	; (8007c68 <mmc5883_waitMeasure+0xa8>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	b299      	uxth	r1, r3
 8007be2:	2364      	movs	r3, #100	; 0x64
 8007be4:	9302      	str	r3, [sp, #8]
 8007be6:	2301      	movs	r3, #1
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f107 0312 	add.w	r3, r7, #18
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	2207      	movs	r2, #7
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7fc fded 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK) log_send(1, "mmc5883_waitMeasure", dev, "na", 1);
 8007bfe:	7cfb      	ldrb	r3, [r7, #19]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <mmc5883_waitMeasure+0x54>
 8007c04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c08:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <mmc5883_waitMeasure+0xac>)
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4918      	ldr	r1, [pc, #96]	; (8007c70 <mmc5883_waitMeasure+0xb0>)
 8007c0e:	2001      	movs	r0, #1
 8007c10:	f000 fb6e 	bl	80082f0 <log_send>

		// check buffer (0:mag, 1:temp)
		if(!type && (buff & (1 << RDY_TM_M))) return 0;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	f083 0301 	eor.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d006      	beq.n	8007c2e <mmc5883_waitMeasure+0x6e>
 8007c20:	7cbb      	ldrb	r3, [r7, #18]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <mmc5883_waitMeasure+0x6e>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e018      	b.n	8007c60 <mmc5883_waitMeasure+0xa0>
		else if(type && (buff & (1 << RDY_TM_T))) return 0;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <mmc5883_waitMeasure+0x82>
 8007c34:	7cbb      	ldrb	r3, [r7, #18]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <mmc5883_waitMeasure+0x82>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e00e      	b.n	8007c60 <mmc5883_waitMeasure+0xa0>

		// wait 5ms and increase counter
		HAL_Delay(5);
 8007c42:	2005      	movs	r0, #5
 8007c44:	f7fa fca0 	bl	8002588 <HAL_Delay>
		cnt++;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	617b      	str	r3, [r7, #20]
	while(cnt*10 < TIMEOUT) {
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	2bc7      	cmp	r3, #199	; 0xc7
 8007c5a:	ddbb      	ble.n	8007bd4 <mmc5883_waitMeasure+0x14>
	}

	// timeout error
	return -1;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	0800d1c4 	.word	0x0800d1c4
 8007c6c:	0800d038 	.word	0x0800d038
 8007c70:	0800d050 	.word	0x0800d050

08007c74 <mmc5883_processBuff>:


uint16_t mmc5883_processBuff(uint8_t *buff, int data) {
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	return (uint16_t)buff[0 + 2*data] | (uint16_t)(buff[1 + 2*data] << 8);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	3301      	adds	r3, #1
 8007c92:	4619      	mov	r1, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	440b      	add	r3, r1
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b29b      	uxth	r3, r3
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <mmc5883_configure>:


/* MAIN FUNCTIONS */

void mmc5883_configure(I2C_HandleTypeDef *hand, int dev) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af04      	add	r7, sp, #16
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	// reset device - clear registers (5ms power on)
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <mmc5883_configure+0x68>)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	b299      	uxth	r1, r3
 8007cc8:	2364      	movs	r3, #100	; 0x64
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <mmc5883_configure+0x6c>)
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	2209      	movs	r2, #9
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fc fc67 	bl	80045ac <HAL_I2C_Mem_Write>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "mmc5883_configure", dev, "na", 1);
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <mmc5883_configure+0x48>
 8007ce8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <mmc5883_configure+0x70>)
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	490c      	ldr	r1, [pc, #48]	; (8007d24 <mmc5883_configure+0x74>)
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f000 fafc 	bl	80082f0 <log_send>
	HAL_Delay(100);
 8007cf8:	2064      	movs	r0, #100	; 0x64
 8007cfa:	f7fa fc45 	bl	8002588 <HAL_Delay>

	log_send(0, "mmc5883_config", dev, "na", NAN);
 8007cfe:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007d28 <mmc5883_configure+0x78>
 8007d02:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <mmc5883_configure+0x70>)
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	4909      	ldr	r1, [pc, #36]	; (8007d2c <mmc5883_configure+0x7c>)
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f000 faf1 	bl	80082f0 <log_send>
}
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	0800d1c4 	.word	0x0800d1c4
 8007d1c:	20000010 	.word	0x20000010
 8007d20:	0800d038 	.word	0x0800d038
 8007d24:	0800d064 	.word	0x0800d064
 8007d28:	7fc00000 	.word	0x7fc00000
 8007d2c:	0800d078 	.word	0x0800d078

08007d30 <mmc5883_readManufac>:


void mmc5883_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af04      	add	r7, sp, #16
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
 8007d3a:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <mmc5883_readManufac+0x74>)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	4413      	add	r3, r2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	b299      	uxth	r1, r3
 8007d48:	2364      	movs	r3, #100	; 0x64
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f107 030e 	add.w	r3, r7, #14
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2301      	movs	r3, #1
 8007d58:	222f      	movs	r2, #47	; 0x2f
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fc fd3a 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "mmc5883_readManufac", dev, "na", 2);
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <mmc5883_readManufac+0x4a>
 8007d6a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <mmc5883_readManufac+0x78>)
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	490e      	ldr	r1, [pc, #56]	; (8007dac <mmc5883_readManufac+0x7c>)
 8007d74:	2001      	movs	r0, #1
 8007d76:	f000 fabb 	bl	80082f0 <log_send>

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
 8007d7a:	f107 0208 	add.w	r2, r7, #8
 8007d7e:	f107 030e 	add.w	r3, r7, #14
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fa77 	bl	8008278 <addr2str>
	log_send(2, "mmc5883_readManufac", dev, tmp, NAN);
 8007d8a:	f107 0308 	add.w	r3, r7, #8
 8007d8e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007db0 <mmc5883_readManufac+0x80>
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4905      	ldr	r1, [pc, #20]	; (8007dac <mmc5883_readManufac+0x7c>)
 8007d96:	2002      	movs	r0, #2
 8007d98:	f000 faaa 	bl	80082f0 <log_send>
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	0800d1c4 	.word	0x0800d1c4
 8007da8:	0800d038 	.word	0x0800d038
 8007dac:	0800d088 	.word	0x0800d088
 8007db0:	7fc00000 	.word	0x7fc00000
 8007db4:	00000000 	.word	0x00000000

08007db8 <mmc5883_readMagData>:


void mmc5883_readMagData(I2C_HandleTypeDef *hand, int dev) {
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b099      	sub	sp, #100	; 0x64
 8007dbc:	af04      	add	r7, sp, #16
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// set magnetometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_SET, 1, I2C_TIMEOUT);
 8007dc2:	4aa4      	ldr	r2, [pc, #656]	; (8008054 <mmc5883_readMagData+0x29c>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	b299      	uxth	r1, r3
 8007dd0:	2364      	movs	r3, #100	; 0x64
 8007dd2:	9302      	str	r3, [sp, #8]
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	4b9f      	ldr	r3, [pc, #636]	; (8008058 <mmc5883_readMagData+0x2a0>)
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	2301      	movs	r3, #1
 8007dde:	2208      	movs	r2, #8
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7fc fbe3 	bl	80045ac <HAL_I2C_Mem_Write>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 1);
 8007dec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d007      	beq.n	8007e04 <mmc5883_readMagData+0x4c>
 8007df4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007df8:	4b98      	ldr	r3, [pc, #608]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4998      	ldr	r1, [pc, #608]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007dfe:	2001      	movs	r0, #1
 8007e00:	f000 fa76 	bl	80082f0 <log_send>

	// initiate magnetic measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_M, 1, I2C_TIMEOUT);
 8007e04:	4a93      	ldr	r2, [pc, #588]	; (8008054 <mmc5883_readMagData+0x29c>)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	4413      	add	r3, r2
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	b299      	uxth	r1, r3
 8007e12:	2364      	movs	r3, #100	; 0x64
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	2301      	movs	r3, #1
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	4b92      	ldr	r3, [pc, #584]	; (8008064 <mmc5883_readMagData+0x2ac>)
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	2301      	movs	r3, #1
 8007e20:	2208      	movs	r2, #8
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fc fbc2 	bl	80045ac <HAL_I2C_Mem_Write>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 2);
 8007e2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <mmc5883_readMagData+0x8e>
 8007e36:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007e3a:	4b88      	ldr	r3, [pc, #544]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	4988      	ldr	r1, [pc, #544]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007e40:	2001      	movs	r0, #1
 8007e42:	f000 fa55 	bl	80082f0 <log_send>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 0, dev);
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff feb8 	bl	8007bc0 <mmc5883_waitMeasure>
 8007e50:	63b8      	str	r0, [r7, #56]	; 0x38
	if(waitRet != 0) log_send(1, "mmc5883_readMagData", dev, "na", 3);
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <mmc5883_readMagData+0xb0>
 8007e58:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8007e5c:	4b7f      	ldr	r3, [pc, #508]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	497f      	ldr	r1, [pc, #508]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007e62:	2001      	movs	r0, #1
 8007e64:	f000 fa44 	bl	80082f0 <log_send>

	// read magnetic register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_MAG, 1, buff, 6, I2C_TIMEOUT);
 8007e68:	4a7a      	ldr	r2, [pc, #488]	; (8008054 <mmc5883_readMagData+0x29c>)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	b299      	uxth	r1, r3
 8007e76:	2364      	movs	r3, #100	; 0x64
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	2306      	movs	r3, #6
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2301      	movs	r3, #1
 8007e86:	2200      	movs	r2, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7fc fca3 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 4);
 8007e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <mmc5883_readMagData+0xf4>
 8007e9c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8007ea0:	4b6e      	ldr	r3, [pc, #440]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	496e      	ldr	r1, [pc, #440]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f000 fa22 	bl	80082f0 <log_send>

	// process measurement 1
	uint16_t valTmp[6];
	for(int i=0; i<3; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb0:	e011      	b.n	8007ed6 <mmc5883_readMagData+0x11e>
		valTmp[i] = mmc5883_processBuff(buff, i);
 8007eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007eb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fedb 	bl	8007c74 <mmc5883_processBuff>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007eca:	440b      	add	r3, r1
 8007ecc:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for(int i=0; i<3; i++)
 8007ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	ddea      	ble.n	8007eb2 <mmc5883_readMagData+0xfa>

	// reset magnetometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_RST, 1, I2C_TIMEOUT);
 8007edc:	4a5d      	ldr	r2, [pc, #372]	; (8008054 <mmc5883_readMagData+0x29c>)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	b299      	uxth	r1, r3
 8007eea:	2364      	movs	r3, #100	; 0x64
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	4b5d      	ldr	r3, [pc, #372]	; (8008068 <mmc5883_readMagData+0x2b0>)
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	2208      	movs	r2, #8
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fc fb56 	bl	80045ac <HAL_I2C_Mem_Write>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 5);
 8007f06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <mmc5883_readMagData+0x166>
 8007f0e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8007f12:	4b52      	ldr	r3, [pc, #328]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	4952      	ldr	r1, [pc, #328]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007f18:	2001      	movs	r0, #1
 8007f1a:	f000 f9e9 	bl	80082f0 <log_send>

	// initiate magnetic measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_M, 1, I2C_TIMEOUT);
 8007f1e:	4a4d      	ldr	r2, [pc, #308]	; (8008054 <mmc5883_readMagData+0x29c>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4413      	add	r3, r2
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	b299      	uxth	r1, r3
 8007f2c:	2364      	movs	r3, #100	; 0x64
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	2301      	movs	r3, #1
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	4b4b      	ldr	r3, [pc, #300]	; (8008064 <mmc5883_readMagData+0x2ac>)
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2301      	movs	r3, #1
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7fc fb35 	bl	80045ac <HAL_I2C_Mem_Write>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 6);
 8007f48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d007      	beq.n	8007f60 <mmc5883_readMagData+0x1a8>
 8007f50:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8007f54:	4b41      	ldr	r3, [pc, #260]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4941      	ldr	r1, [pc, #260]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f000 f9c8 	bl	80082f0 <log_send>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 0, dev);
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	2100      	movs	r1, #0
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fe2b 	bl	8007bc0 <mmc5883_waitMeasure>
 8007f6a:	63b8      	str	r0, [r7, #56]	; 0x38
	if(waitRet != 0) log_send(1, "mmc5883_readMagData", dev, "na", 7);
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d007      	beq.n	8007f82 <mmc5883_readMagData+0x1ca>
 8007f72:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	4939      	ldr	r1, [pc, #228]	; (8008060 <mmc5883_readMagData+0x2a8>)
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	f000 f9b7 	bl	80082f0 <log_send>

	// read magnetic register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_MAG, 1, buff, 6, I2C_TIMEOUT);
 8007f82:	4a34      	ldr	r2, [pc, #208]	; (8008054 <mmc5883_readMagData+0x29c>)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4413      	add	r3, r2
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	b299      	uxth	r1, r3
 8007f90:	2364      	movs	r3, #100	; 0x64
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	2306      	movs	r3, #6
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fc fc16 	bl	80047d4 <HAL_I2C_Mem_Read>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(ret != HAL_OK) log_send(1, "mmc5883_readData", dev, "na", 8);
 8007fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <mmc5883_readMagData+0x20e>
 8007fb6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8007fba:	4b28      	ldr	r3, [pc, #160]	; (800805c <mmc5883_readMagData+0x2a4>)
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	492b      	ldr	r1, [pc, #172]	; (800806c <mmc5883_readMagData+0x2b4>)
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f000 f995 	bl	80082f0 <log_send>

	// process measurement 2
	for(int i=0; i<3; i++)
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fca:	e012      	b.n	8007ff2 <mmc5883_readMagData+0x23a>
		valTmp[i+3] = mmc5883_processBuff(buff, i);
 8007fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fce:	1cdc      	adds	r4, r3, #3
 8007fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fd4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fe4c 	bl	8007c74 <mmc5883_processBuff>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	0063      	lsls	r3, r4, #1
 8007fe2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for(int i=0; i<3; i++)
 8007fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fee:	3301      	adds	r3, #1
 8007ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	dde9      	ble.n	8007fcc <mmc5883_readMagData+0x214>

	// find data offset
	float valOffset[3];
	for(int i=0; i<3; i++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8007ffc:	e023      	b.n	8008046 <mmc5883_readMagData+0x28e>
		valOffset[i] = (float)(valTmp[i] + valTmp[i+3]) / 2;
 8007ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008006:	4413      	add	r3, r2
 8008008:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800800c:	461a      	mov	r2, r3
 800800e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008010:	3303      	adds	r3, #3
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008018:	440b      	add	r3, r1
 800801a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800801e:	4413      	add	r3, r2
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008028:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800802c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008038:	4413      	add	r3, r2
 800803a:	3b38      	subs	r3, #56	; 0x38
 800803c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++)
 8008040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008042:	3301      	adds	r3, #1
 8008044:	647b      	str	r3, [r7, #68]	; 0x44
 8008046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008048:	2b02      	cmp	r3, #2
 800804a:	ddd8      	ble.n	8007ffe <mmc5883_readMagData+0x246>

	// process final data
	float val[3];
	for(int i=0; i<3; i++) {
 800804c:	2300      	movs	r3, #0
 800804e:	643b      	str	r3, [r7, #64]	; 0x40
 8008050:	e04b      	b.n	80080ea <mmc5883_readMagData+0x332>
 8008052:	bf00      	nop
 8008054:	0800d1c4 	.word	0x0800d1c4
 8008058:	2000000e 	.word	0x2000000e
 800805c:	0800d038 	.word	0x0800d038
 8008060:	0800d09c 	.word	0x0800d09c
 8008064:	2000000c 	.word	0x2000000c
 8008068:	2000000f 	.word	0x2000000f
 800806c:	0800d0b0 	.word	0x0800d0b0
		val[i] = (float)valTmp[i] - valOffset[i];
 8008070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008078:	4413      	add	r3, r2
 800807a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800808e:	4413      	add	r3, r2
 8008090:	3b38      	subs	r3, #56	; 0x38
 8008092:	edd3 7a00 	vldr	s15, [r3]
 8008096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800809a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080a2:	4413      	add	r3, r2
 80080a4:	3b44      	subs	r3, #68	; 0x44
 80080a6:	edc3 7a00 	vstr	s15, [r3]
		val[i] = val[i] * (MAG_So / 1000) * (MAG_FS / 8);
 80080aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080b2:	4413      	add	r3, r2
 80080b4:	3b44      	subs	r3, #68	; 0x44
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f8 fa55 	bl	8000568 <__aeabi_f2d>
 80080be:	a322      	add	r3, pc, #136	; (adr r3, 8008148 <mmc5883_readMagData+0x390>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 faa8 	bl	8000618 <__aeabi_dmul>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4610      	mov	r0, r2
 80080ce:	4619      	mov	r1, r3
 80080d0:	f7f8 fd9a 	bl	8000c08 <__aeabi_d2f>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80080de:	440b      	add	r3, r1
 80080e0:	3b44      	subs	r3, #68	; 0x44
 80080e2:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 80080e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e6:	3301      	adds	r3, #1
 80080e8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	ddbf      	ble.n	8008070 <mmc5883_readMagData+0x2b8>
	}

	log_send(2, "mmc5883_readMagData", dev, "mag_x", val[0]);
 80080f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80080f4:	eeb0 0a67 	vmov.f32	s0, s15
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <mmc5883_readMagData+0x380>)
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	490f      	ldr	r1, [pc, #60]	; (800813c <mmc5883_readMagData+0x384>)
 80080fe:	2002      	movs	r0, #2
 8008100:	f000 f8f6 	bl	80082f0 <log_send>
	log_send(2, "mmc5883_readMagData", dev, "mag_y", val[1]);
 8008104:	edd7 7a04 	vldr	s15, [r7, #16]
 8008108:	eeb0 0a67 	vmov.f32	s0, s15
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <mmc5883_readMagData+0x388>)
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	490a      	ldr	r1, [pc, #40]	; (800813c <mmc5883_readMagData+0x384>)
 8008112:	2002      	movs	r0, #2
 8008114:	f000 f8ec 	bl	80082f0 <log_send>
	log_send(2, "mmc5883_readMagData", dev, "mag_z", val[2]);
 8008118:	edd7 7a05 	vldr	s15, [r7, #20]
 800811c:	eeb0 0a67 	vmov.f32	s0, s15
 8008120:	4b08      	ldr	r3, [pc, #32]	; (8008144 <mmc5883_readMagData+0x38c>)
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4905      	ldr	r1, [pc, #20]	; (800813c <mmc5883_readMagData+0x384>)
 8008126:	2002      	movs	r0, #2
 8008128:	f000 f8e2 	bl	80082f0 <log_send>
}
 800812c:	bf00      	nop
 800812e:	3754      	adds	r7, #84	; 0x54
 8008130:	46bd      	mov	sp, r7
 8008132:	bd90      	pop	{r4, r7, pc}
 8008134:	f3af 8000 	nop.w
 8008138:	0800d0c4 	.word	0x0800d0c4
 800813c:	0800d09c 	.word	0x0800d09c
 8008140:	0800d0cc 	.word	0x0800d0cc
 8008144:	0800d0d4 	.word	0x0800d0d4
 8008148:	d2f1a9fc 	.word	0xd2f1a9fc
 800814c:	3f30624d 	.word	0x3f30624d

08008150 <mmc5883_readTempData>:


void mmc5883_readTempData(I2C_HandleTypeDef *hand, int dev) {
 8008150:	b580      	push	{r7, lr}
 8008152:	b08a      	sub	sp, #40	; 0x28
 8008154:	af04      	add	r7, sp, #16
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff; int waitRet;

	// initiate temperature measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_T, 1, I2C_TIMEOUT);
 800815a:	4a41      	ldr	r2, [pc, #260]	; (8008260 <mmc5883_readTempData+0x110>)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	4413      	add	r3, r2
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b299      	uxth	r1, r3
 8008168:	2364      	movs	r3, #100	; 0x64
 800816a:	9302      	str	r3, [sp, #8]
 800816c:	2301      	movs	r3, #1
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	4b3c      	ldr	r3, [pc, #240]	; (8008264 <mmc5883_readTempData+0x114>)
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2301      	movs	r3, #1
 8008176:	2208      	movs	r2, #8
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7fc fa17 	bl	80045ac <HAL_I2C_Mem_Write>
 800817e:	4603      	mov	r3, r0
 8008180:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mmc5883_readData", dev, "na", 1);
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <mmc5883_readTempData+0x48>
 8008188:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <mmc5883_readTempData+0x118>)
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4936      	ldr	r1, [pc, #216]	; (800826c <mmc5883_readTempData+0x11c>)
 8008192:	2001      	movs	r0, #1
 8008194:	f000 f8ac 	bl	80082f0 <log_send>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 1, dev);
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff fd0f 	bl	8007bc0 <mmc5883_waitMeasure>
 80081a2:	6138      	str	r0, [r7, #16]
	if(waitRet != 0) log_send(1, "mmc5883_readData", dev, "na", 2);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <mmc5883_readTempData+0x6a>
 80081aa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80081ae:	4b2e      	ldr	r3, [pc, #184]	; (8008268 <mmc5883_readTempData+0x118>)
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	492e      	ldr	r1, [pc, #184]	; (800826c <mmc5883_readTempData+0x11c>)
 80081b4:	2001      	movs	r0, #1
 80081b6:	f000 f89b 	bl	80082f0 <log_send>

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, &buff, 1, I2C_TIMEOUT);
 80081ba:	4a29      	ldr	r2, [pc, #164]	; (8008260 <mmc5883_readTempData+0x110>)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b299      	uxth	r1, r3
 80081c8:	2364      	movs	r3, #100	; 0x64
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	2301      	movs	r3, #1
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	f107 030b 	add.w	r3, r7, #11
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2301      	movs	r3, #1
 80081d8:	2206      	movs	r2, #6
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fc fafa 	bl	80047d4 <HAL_I2C_Mem_Read>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mmc5883_readData", dev, "na", 3);
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <mmc5883_readTempData+0xaa>
 80081ea:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <mmc5883_readTempData+0x118>)
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	491e      	ldr	r1, [pc, #120]	; (800826c <mmc5883_readTempData+0x11c>)
 80081f4:	2001      	movs	r0, #1
 80081f6:	f000 f87b 	bl	80082f0 <log_send>

	// process temperature value (formula from data-sheet)
	float val = T_Off + T_So*(float)buff;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008204:	ee17 0a90 	vmov	r0, s15
 8008208:	f7f8 f9ae 	bl	8000568 <__aeabi_f2d>
 800820c:	a310      	add	r3, pc, #64	; (adr r3, 8008250 <mmc5883_readTempData+0x100>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 fa01 	bl	8000618 <__aeabi_dmul>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4610      	mov	r0, r2
 800821c:	4619      	mov	r1, r3
 800821e:	a30e      	add	r3, pc, #56	; (adr r3, 8008258 <mmc5883_readTempData+0x108>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f840 	bl	80002a8 <__aeabi_dsub>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4610      	mov	r0, r2
 800822e:	4619      	mov	r1, r3
 8008230:	f7f8 fcea 	bl	8000c08 <__aeabi_d2f>
 8008234:	4603      	mov	r3, r0
 8008236:	60fb      	str	r3, [r7, #12]

	log_send(2, "mmc5883_readTempData", dev, "temp", val);
 8008238:	ed97 0a03 	vldr	s0, [r7, #12]
 800823c:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <mmc5883_readTempData+0x120>)
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	490c      	ldr	r1, [pc, #48]	; (8008274 <mmc5883_readTempData+0x124>)
 8008242:	2002      	movs	r0, #2
 8008244:	f000 f854 	bl	80082f0 <log_send>
}
 8008248:	bf00      	nop
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	66666666 	.word	0x66666666
 8008254:	3fe66666 	.word	0x3fe66666
 8008258:	00000000 	.word	0x00000000
 800825c:	4052c000 	.word	0x4052c000
 8008260:	0800d1c4 	.word	0x0800d1c4
 8008264:	2000000d 	.word	0x2000000d
 8008268:	0800d038 	.word	0x0800d038
 800826c:	0800d0b0 	.word	0x0800d0b0
 8008270:	0800d0dc 	.word	0x0800d0dc
 8008274:	0800d0e4 	.word	0x0800d0e4

08008278 <addr2str>:
static const char LOG_types[3][4] = {"INF", "ERR", "DAT"};


/* FUNCTIONS */

void addr2str(uint8_t *addr, int addr_len, char *str) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
	int index = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	e011      	b.n	80082b2 <addr2str+0x3a>
	   index += sprintf(&str[index], "%02X", addr[i]);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	18d0      	adds	r0, r2, r3
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4413      	add	r3, r2
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	4909      	ldr	r1, [pc, #36]	; (80082c4 <addr2str+0x4c>)
 80082a0:	f000 ffee 	bl	8009280 <siprintf>
 80082a4:	4602      	mov	r2, r0
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	4413      	add	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	3301      	adds	r3, #1
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	dbe9      	blt.n	800828e <addr2str+0x16>
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	0800d0fc 	.word	0x0800d0fc

080082c8 <assign_huartPtr>:
	}
	printf("Scanning completed\n");
}


void assign_huartPtr(UART_HandleTypeDef* hand1, UART_HandleTypeDef* hand2) {
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
	huartPtrs[0] = hand1;
 80082d2:	4a06      	ldr	r2, [pc, #24]	; (80082ec <assign_huartPtr+0x24>)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6013      	str	r3, [r2, #0]
	huartPtrs[1] = hand2;
 80082d8:	4a04      	ldr	r2, [pc, #16]	; (80082ec <assign_huartPtr+0x24>)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6053      	str	r3, [r2, #4]
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	200005d8 	.word	0x200005d8

080082f0 <log_send>:


void log_send(int type, char *identity, int device, char *data_str, float data_flt) {
 80082f0:	b590      	push	{r4, r7, lr}
 80082f2:	b0cf      	sub	sp, #316	; 0x13c
 80082f4:	af04      	add	r7, sp, #16
 80082f6:	f107 0414 	add.w	r4, r7, #20
 80082fa:	6020      	str	r0, [r4, #0]
 80082fc:	f107 0010 	add.w	r0, r7, #16
 8008300:	6001      	str	r1, [r0, #0]
 8008302:	f107 010c 	add.w	r1, r7, #12
 8008306:	600a      	str	r2, [r1, #0]
 8008308:	f107 0208 	add.w	r2, r7, #8
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	ed83 0a00 	vstr	s0, [r3]
	// process device
	char device_str[8] = "na";
 8008314:	f246 136e 	movw	r3, #24942	; 0x616e
 8008318:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	if(device >= 0) sprintf(device_str, "%d", device);
 8008322:	f107 030c 	add.w	r3, r7, #12
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db07      	blt.n	800833c <log_send+0x4c>
 800832c:	f107 030c 	add.w	r3, r7, #12
 8008330:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	492c      	ldr	r1, [pc, #176]	; (80083e8 <log_send+0xf8>)
 8008338:	f000 ffa2 	bl	8009280 <siprintf>

	// generate message string
	char msg[256];
	sprintf(msg, "%s -i %s -d %s -s %s -f %f\n", LOG_types[type], identity, device_str, data_str, data_flt);
 800833c:	f107 0314 	add.w	r3, r7, #20
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4a29      	ldr	r2, [pc, #164]	; (80083ec <log_send+0xfc>)
 8008346:	189c      	adds	r4, r3, r2
 8008348:	1d3b      	adds	r3, r7, #4
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	f7f8 f90c 	bl	8000568 <__aeabi_f2d>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	f107 0110 	add.w	r1, r7, #16
 8008358:	f107 001c 	add.w	r0, r7, #28
 800835c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	680b      	ldr	r3, [r1, #0]
 8008370:	4622      	mov	r2, r4
 8008372:	491f      	ldr	r1, [pc, #124]	; (80083f0 <log_send+0x100>)
 8008374:	f000 ff84 	bl	8009280 <siprintf>

	// send to SWD
	printf("%s", msg);
 8008378:	f107 031c 	add.w	r3, r7, #28
 800837c:	4619      	mov	r1, r3
 800837e:	481d      	ldr	r0, [pc, #116]	; (80083f4 <log_send+0x104>)
 8008380:	f000 feea 	bl	8009158 <iprintf>

	// send to UARTs
	for(int i=0; i<2; i++) {
 8008384:	2300      	movs	r3, #0
 8008386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800838a:	e022      	b.n	80083d2 <log_send+0xe2>
		if(HAL_UART_Transmit(huartPtrs[i], (uint8_t *)msg, strlen(msg)+1, UART_TIMEOUT) != HAL_OK)
 800838c:	4a1a      	ldr	r2, [pc, #104]	; (80083f8 <log_send+0x108>)
 800838e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008392:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008396:	f107 031c 	add.w	r3, r7, #28
 800839a:	4618      	mov	r0, r3
 800839c:	f7f7 ff28 	bl	80001f0 <strlen>
 80083a0:	4603      	mov	r3, r0
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f107 011c 	add.w	r1, r7, #28
 80083ac:	2332      	movs	r3, #50	; 0x32
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7fe fb3d 	bl	8006a2e <HAL_UART_Transmit>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d006      	beq.n	80083c8 <log_send+0xd8>
			printf("#### UART-%d ERROR ####\n", i+1);
 80083ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083be:	3301      	adds	r3, #1
 80083c0:	4619      	mov	r1, r3
 80083c2:	480e      	ldr	r0, [pc, #56]	; (80083fc <log_send+0x10c>)
 80083c4:	f000 fec8 	bl	8009158 <iprintf>
	for(int i=0; i<2; i++) {
 80083c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083cc:	3301      	adds	r3, #1
 80083ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80083d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	ddd8      	ble.n	800838c <log_send+0x9c>
	}
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd90      	pop	{r4, r7, pc}
 80083e6:	bf00      	nop
 80083e8:	0800d134 	.word	0x0800d134
 80083ec:	0800d1c8 	.word	0x0800d1c8
 80083f0:	0800d138 	.word	0x0800d138
 80083f4:	0800d154 	.word	0x0800d154
 80083f8:	200005d8 	.word	0x200005d8
 80083fc:	0800d158 	.word	0x0800d158

08008400 <__errno>:
 8008400:	4b01      	ldr	r3, [pc, #4]	; (8008408 <__errno+0x8>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20000014 	.word	0x20000014

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4d0d      	ldr	r5, [pc, #52]	; (8008444 <__libc_init_array+0x38>)
 8008410:	4c0d      	ldr	r4, [pc, #52]	; (8008448 <__libc_init_array+0x3c>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2600      	movs	r6, #0
 8008418:	42a6      	cmp	r6, r4
 800841a:	d109      	bne.n	8008430 <__libc_init_array+0x24>
 800841c:	4d0b      	ldr	r5, [pc, #44]	; (800844c <__libc_init_array+0x40>)
 800841e:	4c0c      	ldr	r4, [pc, #48]	; (8008450 <__libc_init_array+0x44>)
 8008420:	f004 fcd0 	bl	800cdc4 <_init>
 8008424:	1b64      	subs	r4, r4, r5
 8008426:	10a4      	asrs	r4, r4, #2
 8008428:	2600      	movs	r6, #0
 800842a:	42a6      	cmp	r6, r4
 800842c:	d105      	bne.n	800843a <__libc_init_array+0x2e>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	f855 3b04 	ldr.w	r3, [r5], #4
 8008434:	4798      	blx	r3
 8008436:	3601      	adds	r6, #1
 8008438:	e7ee      	b.n	8008418 <__libc_init_array+0xc>
 800843a:	f855 3b04 	ldr.w	r3, [r5], #4
 800843e:	4798      	blx	r3
 8008440:	3601      	adds	r6, #1
 8008442:	e7f2      	b.n	800842a <__libc_init_array+0x1e>
 8008444:	0800d694 	.word	0x0800d694
 8008448:	0800d694 	.word	0x0800d694
 800844c:	0800d694 	.word	0x0800d694
 8008450:	0800d698 	.word	0x0800d698

08008454 <memset>:
 8008454:	4402      	add	r2, r0
 8008456:	4603      	mov	r3, r0
 8008458:	4293      	cmp	r3, r2
 800845a:	d100      	bne.n	800845e <memset+0xa>
 800845c:	4770      	bx	lr
 800845e:	f803 1b01 	strb.w	r1, [r3], #1
 8008462:	e7f9      	b.n	8008458 <memset+0x4>

08008464 <__cvt>:
 8008464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	ec55 4b10 	vmov	r4, r5, d0
 800846c:	2d00      	cmp	r5, #0
 800846e:	460e      	mov	r6, r1
 8008470:	4619      	mov	r1, r3
 8008472:	462b      	mov	r3, r5
 8008474:	bfbb      	ittet	lt
 8008476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800847a:	461d      	movlt	r5, r3
 800847c:	2300      	movge	r3, #0
 800847e:	232d      	movlt	r3, #45	; 0x2d
 8008480:	700b      	strb	r3, [r1, #0]
 8008482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008488:	4691      	mov	r9, r2
 800848a:	f023 0820 	bic.w	r8, r3, #32
 800848e:	bfbc      	itt	lt
 8008490:	4622      	movlt	r2, r4
 8008492:	4614      	movlt	r4, r2
 8008494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008498:	d005      	beq.n	80084a6 <__cvt+0x42>
 800849a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800849e:	d100      	bne.n	80084a2 <__cvt+0x3e>
 80084a0:	3601      	adds	r6, #1
 80084a2:	2102      	movs	r1, #2
 80084a4:	e000      	b.n	80084a8 <__cvt+0x44>
 80084a6:	2103      	movs	r1, #3
 80084a8:	ab03      	add	r3, sp, #12
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	ab02      	add	r3, sp, #8
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	ec45 4b10 	vmov	d0, r4, r5
 80084b4:	4653      	mov	r3, sl
 80084b6:	4632      	mov	r2, r6
 80084b8:	f001 ff02 	bl	800a2c0 <_dtoa_r>
 80084bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084c0:	4607      	mov	r7, r0
 80084c2:	d102      	bne.n	80084ca <__cvt+0x66>
 80084c4:	f019 0f01 	tst.w	r9, #1
 80084c8:	d022      	beq.n	8008510 <__cvt+0xac>
 80084ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084ce:	eb07 0906 	add.w	r9, r7, r6
 80084d2:	d110      	bne.n	80084f6 <__cvt+0x92>
 80084d4:	783b      	ldrb	r3, [r7, #0]
 80084d6:	2b30      	cmp	r3, #48	; 0x30
 80084d8:	d10a      	bne.n	80084f0 <__cvt+0x8c>
 80084da:	2200      	movs	r2, #0
 80084dc:	2300      	movs	r3, #0
 80084de:	4620      	mov	r0, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	f7f8 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 80084e6:	b918      	cbnz	r0, 80084f0 <__cvt+0x8c>
 80084e8:	f1c6 0601 	rsb	r6, r6, #1
 80084ec:	f8ca 6000 	str.w	r6, [sl]
 80084f0:	f8da 3000 	ldr.w	r3, [sl]
 80084f4:	4499      	add	r9, r3
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f8 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008502:	b108      	cbz	r0, 8008508 <__cvt+0xa4>
 8008504:	f8cd 900c 	str.w	r9, [sp, #12]
 8008508:	2230      	movs	r2, #48	; 0x30
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	454b      	cmp	r3, r9
 800850e:	d307      	bcc.n	8008520 <__cvt+0xbc>
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008514:	1bdb      	subs	r3, r3, r7
 8008516:	4638      	mov	r0, r7
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	b004      	add	sp, #16
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	1c59      	adds	r1, r3, #1
 8008522:	9103      	str	r1, [sp, #12]
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e7f0      	b.n	800850a <__cvt+0xa6>

08008528 <__exponent>:
 8008528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852a:	4603      	mov	r3, r0
 800852c:	2900      	cmp	r1, #0
 800852e:	bfb8      	it	lt
 8008530:	4249      	neglt	r1, r1
 8008532:	f803 2b02 	strb.w	r2, [r3], #2
 8008536:	bfb4      	ite	lt
 8008538:	222d      	movlt	r2, #45	; 0x2d
 800853a:	222b      	movge	r2, #43	; 0x2b
 800853c:	2909      	cmp	r1, #9
 800853e:	7042      	strb	r2, [r0, #1]
 8008540:	dd2a      	ble.n	8008598 <__exponent+0x70>
 8008542:	f10d 0407 	add.w	r4, sp, #7
 8008546:	46a4      	mov	ip, r4
 8008548:	270a      	movs	r7, #10
 800854a:	46a6      	mov	lr, r4
 800854c:	460a      	mov	r2, r1
 800854e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008552:	fb07 1516 	mls	r5, r7, r6, r1
 8008556:	3530      	adds	r5, #48	; 0x30
 8008558:	2a63      	cmp	r2, #99	; 0x63
 800855a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800855e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008562:	4631      	mov	r1, r6
 8008564:	dcf1      	bgt.n	800854a <__exponent+0x22>
 8008566:	3130      	adds	r1, #48	; 0x30
 8008568:	f1ae 0502 	sub.w	r5, lr, #2
 800856c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008570:	1c44      	adds	r4, r0, #1
 8008572:	4629      	mov	r1, r5
 8008574:	4561      	cmp	r1, ip
 8008576:	d30a      	bcc.n	800858e <__exponent+0x66>
 8008578:	f10d 0209 	add.w	r2, sp, #9
 800857c:	eba2 020e 	sub.w	r2, r2, lr
 8008580:	4565      	cmp	r5, ip
 8008582:	bf88      	it	hi
 8008584:	2200      	movhi	r2, #0
 8008586:	4413      	add	r3, r2
 8008588:	1a18      	subs	r0, r3, r0
 800858a:	b003      	add	sp, #12
 800858c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800858e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008592:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008596:	e7ed      	b.n	8008574 <__exponent+0x4c>
 8008598:	2330      	movs	r3, #48	; 0x30
 800859a:	3130      	adds	r1, #48	; 0x30
 800859c:	7083      	strb	r3, [r0, #2]
 800859e:	70c1      	strb	r1, [r0, #3]
 80085a0:	1d03      	adds	r3, r0, #4
 80085a2:	e7f1      	b.n	8008588 <__exponent+0x60>

080085a4 <_printf_float>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	ed2d 8b02 	vpush	{d8}
 80085ac:	b08d      	sub	sp, #52	; 0x34
 80085ae:	460c      	mov	r4, r1
 80085b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085b4:	4616      	mov	r6, r2
 80085b6:	461f      	mov	r7, r3
 80085b8:	4605      	mov	r5, r0
 80085ba:	f003 f993 	bl	800b8e4 <_localeconv_r>
 80085be:	f8d0 a000 	ldr.w	sl, [r0]
 80085c2:	4650      	mov	r0, sl
 80085c4:	f7f7 fe14 	bl	80001f0 <strlen>
 80085c8:	2300      	movs	r3, #0
 80085ca:	930a      	str	r3, [sp, #40]	; 0x28
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	f8d8 3000 	ldr.w	r3, [r8]
 80085d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085d8:	3307      	adds	r3, #7
 80085da:	f023 0307 	bic.w	r3, r3, #7
 80085de:	f103 0208 	add.w	r2, r3, #8
 80085e2:	f8c8 2000 	str.w	r2, [r8]
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085f6:	9307      	str	r3, [sp, #28]
 80085f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80085fc:	ee08 0a10 	vmov	s16, r0
 8008600:	4b9f      	ldr	r3, [pc, #636]	; (8008880 <_printf_float+0x2dc>)
 8008602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800860a:	f7f8 fa9f 	bl	8000b4c <__aeabi_dcmpun>
 800860e:	bb88      	cbnz	r0, 8008674 <_printf_float+0xd0>
 8008610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008614:	4b9a      	ldr	r3, [pc, #616]	; (8008880 <_printf_float+0x2dc>)
 8008616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800861a:	f7f8 fa79 	bl	8000b10 <__aeabi_dcmple>
 800861e:	bb48      	cbnz	r0, 8008674 <_printf_float+0xd0>
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f8 fa68 	bl	8000afc <__aeabi_dcmplt>
 800862c:	b110      	cbz	r0, 8008634 <_printf_float+0x90>
 800862e:	232d      	movs	r3, #45	; 0x2d
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	4b93      	ldr	r3, [pc, #588]	; (8008884 <_printf_float+0x2e0>)
 8008636:	4894      	ldr	r0, [pc, #592]	; (8008888 <_printf_float+0x2e4>)
 8008638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800863c:	bf94      	ite	ls
 800863e:	4698      	movls	r8, r3
 8008640:	4680      	movhi	r8, r0
 8008642:	2303      	movs	r3, #3
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	9b05      	ldr	r3, [sp, #20]
 8008648:	f023 0204 	bic.w	r2, r3, #4
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	9700      	str	r7, [sp, #0]
 8008654:	4633      	mov	r3, r6
 8008656:	aa0b      	add	r2, sp, #44	; 0x2c
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f9d8 	bl	8008a10 <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	f040 8090 	bne.w	8008786 <_printf_float+0x1e2>
 8008666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800866a:	b00d      	add	sp, #52	; 0x34
 800866c:	ecbd 8b02 	vpop	{d8}
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	4642      	mov	r2, r8
 8008676:	464b      	mov	r3, r9
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f8 fa66 	bl	8000b4c <__aeabi_dcmpun>
 8008680:	b140      	cbz	r0, 8008694 <_printf_float+0xf0>
 8008682:	464b      	mov	r3, r9
 8008684:	2b00      	cmp	r3, #0
 8008686:	bfbc      	itt	lt
 8008688:	232d      	movlt	r3, #45	; 0x2d
 800868a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800868e:	487f      	ldr	r0, [pc, #508]	; (800888c <_printf_float+0x2e8>)
 8008690:	4b7f      	ldr	r3, [pc, #508]	; (8008890 <_printf_float+0x2ec>)
 8008692:	e7d1      	b.n	8008638 <_printf_float+0x94>
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800869a:	9206      	str	r2, [sp, #24]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	d13f      	bne.n	8008720 <_printf_float+0x17c>
 80086a0:	2306      	movs	r3, #6
 80086a2:	6063      	str	r3, [r4, #4]
 80086a4:	9b05      	ldr	r3, [sp, #20]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086ac:	2300      	movs	r3, #0
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	ab0a      	add	r3, sp, #40	; 0x28
 80086b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086b6:	ab09      	add	r3, sp, #36	; 0x24
 80086b8:	ec49 8b10 	vmov	d0, r8, r9
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086c4:	4628      	mov	r0, r5
 80086c6:	f7ff fecd 	bl	8008464 <__cvt>
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ce:	2b47      	cmp	r3, #71	; 0x47
 80086d0:	4680      	mov	r8, r0
 80086d2:	d108      	bne.n	80086e6 <_printf_float+0x142>
 80086d4:	1cc8      	adds	r0, r1, #3
 80086d6:	db02      	blt.n	80086de <_printf_float+0x13a>
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	4299      	cmp	r1, r3
 80086dc:	dd41      	ble.n	8008762 <_printf_float+0x1be>
 80086de:	f1ab 0b02 	sub.w	fp, fp, #2
 80086e2:	fa5f fb8b 	uxtb.w	fp, fp
 80086e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086ea:	d820      	bhi.n	800872e <_printf_float+0x18a>
 80086ec:	3901      	subs	r1, #1
 80086ee:	465a      	mov	r2, fp
 80086f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086f4:	9109      	str	r1, [sp, #36]	; 0x24
 80086f6:	f7ff ff17 	bl	8008528 <__exponent>
 80086fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fc:	1813      	adds	r3, r2, r0
 80086fe:	2a01      	cmp	r2, #1
 8008700:	4681      	mov	r9, r0
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	dc02      	bgt.n	800870c <_printf_float+0x168>
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	07d2      	lsls	r2, r2, #31
 800870a:	d501      	bpl.n	8008710 <_printf_float+0x16c>
 800870c:	3301      	adds	r3, #1
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008714:	2b00      	cmp	r3, #0
 8008716:	d09c      	beq.n	8008652 <_printf_float+0xae>
 8008718:	232d      	movs	r3, #45	; 0x2d
 800871a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800871e:	e798      	b.n	8008652 <_printf_float+0xae>
 8008720:	9a06      	ldr	r2, [sp, #24]
 8008722:	2a47      	cmp	r2, #71	; 0x47
 8008724:	d1be      	bne.n	80086a4 <_printf_float+0x100>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1bc      	bne.n	80086a4 <_printf_float+0x100>
 800872a:	2301      	movs	r3, #1
 800872c:	e7b9      	b.n	80086a2 <_printf_float+0xfe>
 800872e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008732:	d118      	bne.n	8008766 <_printf_float+0x1c2>
 8008734:	2900      	cmp	r1, #0
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	dd0b      	ble.n	8008752 <_printf_float+0x1ae>
 800873a:	6121      	str	r1, [r4, #16]
 800873c:	b913      	cbnz	r3, 8008744 <_printf_float+0x1a0>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	07d0      	lsls	r0, r2, #31
 8008742:	d502      	bpl.n	800874a <_printf_float+0x1a6>
 8008744:	3301      	adds	r3, #1
 8008746:	440b      	add	r3, r1
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	65a1      	str	r1, [r4, #88]	; 0x58
 800874c:	f04f 0900 	mov.w	r9, #0
 8008750:	e7de      	b.n	8008710 <_printf_float+0x16c>
 8008752:	b913      	cbnz	r3, 800875a <_printf_float+0x1b6>
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	07d2      	lsls	r2, r2, #31
 8008758:	d501      	bpl.n	800875e <_printf_float+0x1ba>
 800875a:	3302      	adds	r3, #2
 800875c:	e7f4      	b.n	8008748 <_printf_float+0x1a4>
 800875e:	2301      	movs	r3, #1
 8008760:	e7f2      	b.n	8008748 <_printf_float+0x1a4>
 8008762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	4299      	cmp	r1, r3
 800876a:	db05      	blt.n	8008778 <_printf_float+0x1d4>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	6121      	str	r1, [r4, #16]
 8008770:	07d8      	lsls	r0, r3, #31
 8008772:	d5ea      	bpl.n	800874a <_printf_float+0x1a6>
 8008774:	1c4b      	adds	r3, r1, #1
 8008776:	e7e7      	b.n	8008748 <_printf_float+0x1a4>
 8008778:	2900      	cmp	r1, #0
 800877a:	bfd4      	ite	le
 800877c:	f1c1 0202 	rsble	r2, r1, #2
 8008780:	2201      	movgt	r2, #1
 8008782:	4413      	add	r3, r2
 8008784:	e7e0      	b.n	8008748 <_printf_float+0x1a4>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	055a      	lsls	r2, r3, #21
 800878a:	d407      	bmi.n	800879c <_printf_float+0x1f8>
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	4642      	mov	r2, r8
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	d12c      	bne.n	80087f4 <_printf_float+0x250>
 800879a:	e764      	b.n	8008666 <_printf_float+0xc2>
 800879c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087a0:	f240 80e0 	bls.w	8008964 <_printf_float+0x3c0>
 80087a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	f7f8 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d034      	beq.n	800881e <_printf_float+0x27a>
 80087b4:	4a37      	ldr	r2, [pc, #220]	; (8008894 <_printf_float+0x2f0>)
 80087b6:	2301      	movs	r3, #1
 80087b8:	4631      	mov	r1, r6
 80087ba:	4628      	mov	r0, r5
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f af51 	beq.w	8008666 <_printf_float+0xc2>
 80087c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c8:	429a      	cmp	r2, r3
 80087ca:	db02      	blt.n	80087d2 <_printf_float+0x22e>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07d8      	lsls	r0, r3, #31
 80087d0:	d510      	bpl.n	80087f4 <_printf_float+0x250>
 80087d2:	ee18 3a10 	vmov	r3, s16
 80087d6:	4652      	mov	r2, sl
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af41 	beq.w	8008666 <_printf_float+0xc2>
 80087e4:	f04f 0800 	mov.w	r8, #0
 80087e8:	f104 091a 	add.w	r9, r4, #26
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	3b01      	subs	r3, #1
 80087f0:	4543      	cmp	r3, r8
 80087f2:	dc09      	bgt.n	8008808 <_printf_float+0x264>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	079b      	lsls	r3, r3, #30
 80087f8:	f100 8105 	bmi.w	8008a06 <_printf_float+0x462>
 80087fc:	68e0      	ldr	r0, [r4, #12]
 80087fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008800:	4298      	cmp	r0, r3
 8008802:	bfb8      	it	lt
 8008804:	4618      	movlt	r0, r3
 8008806:	e730      	b.n	800866a <_printf_float+0xc6>
 8008808:	2301      	movs	r3, #1
 800880a:	464a      	mov	r2, r9
 800880c:	4631      	mov	r1, r6
 800880e:	4628      	mov	r0, r5
 8008810:	47b8      	blx	r7
 8008812:	3001      	adds	r0, #1
 8008814:	f43f af27 	beq.w	8008666 <_printf_float+0xc2>
 8008818:	f108 0801 	add.w	r8, r8, #1
 800881c:	e7e6      	b.n	80087ec <_printf_float+0x248>
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	dc39      	bgt.n	8008898 <_printf_float+0x2f4>
 8008824:	4a1b      	ldr	r2, [pc, #108]	; (8008894 <_printf_float+0x2f0>)
 8008826:	2301      	movs	r3, #1
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f af19 	beq.w	8008666 <_printf_float+0xc2>
 8008834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008838:	4313      	orrs	r3, r2
 800883a:	d102      	bne.n	8008842 <_printf_float+0x29e>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07d9      	lsls	r1, r3, #31
 8008840:	d5d8      	bpl.n	80087f4 <_printf_float+0x250>
 8008842:	ee18 3a10 	vmov	r3, s16
 8008846:	4652      	mov	r2, sl
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af09 	beq.w	8008666 <_printf_float+0xc2>
 8008854:	f04f 0900 	mov.w	r9, #0
 8008858:	f104 0a1a 	add.w	sl, r4, #26
 800885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885e:	425b      	negs	r3, r3
 8008860:	454b      	cmp	r3, r9
 8008862:	dc01      	bgt.n	8008868 <_printf_float+0x2c4>
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	e792      	b.n	800878e <_printf_float+0x1ea>
 8008868:	2301      	movs	r3, #1
 800886a:	4652      	mov	r2, sl
 800886c:	4631      	mov	r1, r6
 800886e:	4628      	mov	r0, r5
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f aef7 	beq.w	8008666 <_printf_float+0xc2>
 8008878:	f109 0901 	add.w	r9, r9, #1
 800887c:	e7ee      	b.n	800885c <_printf_float+0x2b8>
 800887e:	bf00      	nop
 8008880:	7fefffff 	.word	0x7fefffff
 8008884:	0800d1d8 	.word	0x0800d1d8
 8008888:	0800d1dc 	.word	0x0800d1dc
 800888c:	0800d1e4 	.word	0x0800d1e4
 8008890:	0800d1e0 	.word	0x0800d1e0
 8008894:	0800d1e8 	.word	0x0800d1e8
 8008898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800889c:	429a      	cmp	r2, r3
 800889e:	bfa8      	it	ge
 80088a0:	461a      	movge	r2, r3
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	4691      	mov	r9, r2
 80088a6:	dc37      	bgt.n	8008918 <_printf_float+0x374>
 80088a8:	f04f 0b00 	mov.w	fp, #0
 80088ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088b0:	f104 021a 	add.w	r2, r4, #26
 80088b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	eba3 0309 	sub.w	r3, r3, r9
 80088bc:	455b      	cmp	r3, fp
 80088be:	dc33      	bgt.n	8008928 <_printf_float+0x384>
 80088c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c4:	429a      	cmp	r2, r3
 80088c6:	db3b      	blt.n	8008940 <_printf_float+0x39c>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	07da      	lsls	r2, r3, #31
 80088cc:	d438      	bmi.n	8008940 <_printf_float+0x39c>
 80088ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	eba2 0901 	sub.w	r9, r2, r1
 80088da:	4599      	cmp	r9, r3
 80088dc:	bfa8      	it	ge
 80088de:	4699      	movge	r9, r3
 80088e0:	f1b9 0f00 	cmp.w	r9, #0
 80088e4:	dc35      	bgt.n	8008952 <_printf_float+0x3ae>
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ee:	f104 0a1a 	add.w	sl, r4, #26
 80088f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	eba3 0309 	sub.w	r3, r3, r9
 80088fc:	4543      	cmp	r3, r8
 80088fe:	f77f af79 	ble.w	80087f4 <_printf_float+0x250>
 8008902:	2301      	movs	r3, #1
 8008904:	4652      	mov	r2, sl
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	f43f aeaa 	beq.w	8008666 <_printf_float+0xc2>
 8008912:	f108 0801 	add.w	r8, r8, #1
 8008916:	e7ec      	b.n	80088f2 <_printf_float+0x34e>
 8008918:	4613      	mov	r3, r2
 800891a:	4631      	mov	r1, r6
 800891c:	4642      	mov	r2, r8
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	d1c0      	bne.n	80088a8 <_printf_float+0x304>
 8008926:	e69e      	b.n	8008666 <_printf_float+0xc2>
 8008928:	2301      	movs	r3, #1
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	9205      	str	r2, [sp, #20]
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f43f ae97 	beq.w	8008666 <_printf_float+0xc2>
 8008938:	9a05      	ldr	r2, [sp, #20]
 800893a:	f10b 0b01 	add.w	fp, fp, #1
 800893e:	e7b9      	b.n	80088b4 <_printf_float+0x310>
 8008940:	ee18 3a10 	vmov	r3, s16
 8008944:	4652      	mov	r2, sl
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	d1be      	bne.n	80088ce <_printf_float+0x32a>
 8008950:	e689      	b.n	8008666 <_printf_float+0xc2>
 8008952:	9a05      	ldr	r2, [sp, #20]
 8008954:	464b      	mov	r3, r9
 8008956:	4442      	add	r2, r8
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d1c1      	bne.n	80088e6 <_printf_float+0x342>
 8008962:	e680      	b.n	8008666 <_printf_float+0xc2>
 8008964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008966:	2a01      	cmp	r2, #1
 8008968:	dc01      	bgt.n	800896e <_printf_float+0x3ca>
 800896a:	07db      	lsls	r3, r3, #31
 800896c:	d538      	bpl.n	80089e0 <_printf_float+0x43c>
 800896e:	2301      	movs	r3, #1
 8008970:	4642      	mov	r2, r8
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae74 	beq.w	8008666 <_printf_float+0xc2>
 800897e:	ee18 3a10 	vmov	r3, s16
 8008982:	4652      	mov	r2, sl
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f ae6b 	beq.w	8008666 <_printf_float+0xc2>
 8008990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008994:	2200      	movs	r2, #0
 8008996:	2300      	movs	r3, #0
 8008998:	f7f8 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800899c:	b9d8      	cbnz	r0, 80089d6 <_printf_float+0x432>
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	f108 0201 	add.w	r2, r8, #1
 80089a4:	3b01      	subs	r3, #1
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	d10e      	bne.n	80089ce <_printf_float+0x42a>
 80089b0:	e659      	b.n	8008666 <_printf_float+0xc2>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4652      	mov	r2, sl
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f ae52 	beq.w	8008666 <_printf_float+0xc2>
 80089c2:	f108 0801 	add.w	r8, r8, #1
 80089c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c8:	3b01      	subs	r3, #1
 80089ca:	4543      	cmp	r3, r8
 80089cc:	dcf1      	bgt.n	80089b2 <_printf_float+0x40e>
 80089ce:	464b      	mov	r3, r9
 80089d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089d4:	e6dc      	b.n	8008790 <_printf_float+0x1ec>
 80089d6:	f04f 0800 	mov.w	r8, #0
 80089da:	f104 0a1a 	add.w	sl, r4, #26
 80089de:	e7f2      	b.n	80089c6 <_printf_float+0x422>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4642      	mov	r2, r8
 80089e4:	e7df      	b.n	80089a6 <_printf_float+0x402>
 80089e6:	2301      	movs	r3, #1
 80089e8:	464a      	mov	r2, r9
 80089ea:	4631      	mov	r1, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b8      	blx	r7
 80089f0:	3001      	adds	r0, #1
 80089f2:	f43f ae38 	beq.w	8008666 <_printf_float+0xc2>
 80089f6:	f108 0801 	add.w	r8, r8, #1
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089fe:	1a5b      	subs	r3, r3, r1
 8008a00:	4543      	cmp	r3, r8
 8008a02:	dcf0      	bgt.n	80089e6 <_printf_float+0x442>
 8008a04:	e6fa      	b.n	80087fc <_printf_float+0x258>
 8008a06:	f04f 0800 	mov.w	r8, #0
 8008a0a:	f104 0919 	add.w	r9, r4, #25
 8008a0e:	e7f4      	b.n	80089fa <_printf_float+0x456>

08008a10 <_printf_common>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	4616      	mov	r6, r2
 8008a16:	4699      	mov	r9, r3
 8008a18:	688a      	ldr	r2, [r1, #8]
 8008a1a:	690b      	ldr	r3, [r1, #16]
 8008a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a20:	4293      	cmp	r3, r2
 8008a22:	bfb8      	it	lt
 8008a24:	4613      	movlt	r3, r2
 8008a26:	6033      	str	r3, [r6, #0]
 8008a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	b10a      	cbz	r2, 8008a36 <_printf_common+0x26>
 8008a32:	3301      	adds	r3, #1
 8008a34:	6033      	str	r3, [r6, #0]
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	0699      	lsls	r1, r3, #26
 8008a3a:	bf42      	ittt	mi
 8008a3c:	6833      	ldrmi	r3, [r6, #0]
 8008a3e:	3302      	addmi	r3, #2
 8008a40:	6033      	strmi	r3, [r6, #0]
 8008a42:	6825      	ldr	r5, [r4, #0]
 8008a44:	f015 0506 	ands.w	r5, r5, #6
 8008a48:	d106      	bne.n	8008a58 <_printf_common+0x48>
 8008a4a:	f104 0a19 	add.w	sl, r4, #25
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	6832      	ldr	r2, [r6, #0]
 8008a52:	1a9b      	subs	r3, r3, r2
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	dc26      	bgt.n	8008aa6 <_printf_common+0x96>
 8008a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a5c:	1e13      	subs	r3, r2, #0
 8008a5e:	6822      	ldr	r2, [r4, #0]
 8008a60:	bf18      	it	ne
 8008a62:	2301      	movne	r3, #1
 8008a64:	0692      	lsls	r2, r2, #26
 8008a66:	d42b      	bmi.n	8008ac0 <_printf_common+0xb0>
 8008a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	4638      	mov	r0, r7
 8008a70:	47c0      	blx	r8
 8008a72:	3001      	adds	r0, #1
 8008a74:	d01e      	beq.n	8008ab4 <_printf_common+0xa4>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	68e5      	ldr	r5, [r4, #12]
 8008a7a:	6832      	ldr	r2, [r6, #0]
 8008a7c:	f003 0306 	and.w	r3, r3, #6
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	bf08      	it	eq
 8008a84:	1aad      	subeq	r5, r5, r2
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	6922      	ldr	r2, [r4, #16]
 8008a8a:	bf0c      	ite	eq
 8008a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a90:	2500      	movne	r5, #0
 8008a92:	4293      	cmp	r3, r2
 8008a94:	bfc4      	itt	gt
 8008a96:	1a9b      	subgt	r3, r3, r2
 8008a98:	18ed      	addgt	r5, r5, r3
 8008a9a:	2600      	movs	r6, #0
 8008a9c:	341a      	adds	r4, #26
 8008a9e:	42b5      	cmp	r5, r6
 8008aa0:	d11a      	bne.n	8008ad8 <_printf_common+0xc8>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e008      	b.n	8008ab8 <_printf_common+0xa8>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	4649      	mov	r1, r9
 8008aac:	4638      	mov	r0, r7
 8008aae:	47c0      	blx	r8
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d103      	bne.n	8008abc <_printf_common+0xac>
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abc:	3501      	adds	r5, #1
 8008abe:	e7c6      	b.n	8008a4e <_printf_common+0x3e>
 8008ac0:	18e1      	adds	r1, r4, r3
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	2030      	movs	r0, #48	; 0x30
 8008ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aca:	4422      	add	r2, r4
 8008acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	e7c7      	b.n	8008a68 <_printf_common+0x58>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4622      	mov	r2, r4
 8008adc:	4649      	mov	r1, r9
 8008ade:	4638      	mov	r0, r7
 8008ae0:	47c0      	blx	r8
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d0e6      	beq.n	8008ab4 <_printf_common+0xa4>
 8008ae6:	3601      	adds	r6, #1
 8008ae8:	e7d9      	b.n	8008a9e <_printf_common+0x8e>
	...

08008aec <_printf_i>:
 8008aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	4691      	mov	r9, r2
 8008af4:	7e27      	ldrb	r7, [r4, #24]
 8008af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008af8:	2f78      	cmp	r7, #120	; 0x78
 8008afa:	4680      	mov	r8, r0
 8008afc:	469a      	mov	sl, r3
 8008afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b02:	d807      	bhi.n	8008b14 <_printf_i+0x28>
 8008b04:	2f62      	cmp	r7, #98	; 0x62
 8008b06:	d80a      	bhi.n	8008b1e <_printf_i+0x32>
 8008b08:	2f00      	cmp	r7, #0
 8008b0a:	f000 80d8 	beq.w	8008cbe <_printf_i+0x1d2>
 8008b0e:	2f58      	cmp	r7, #88	; 0x58
 8008b10:	f000 80a3 	beq.w	8008c5a <_printf_i+0x16e>
 8008b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b1c:	e03a      	b.n	8008b94 <_printf_i+0xa8>
 8008b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b22:	2b15      	cmp	r3, #21
 8008b24:	d8f6      	bhi.n	8008b14 <_printf_i+0x28>
 8008b26:	a001      	add	r0, pc, #4	; (adr r0, 8008b2c <_printf_i+0x40>)
 8008b28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b2c:	08008b85 	.word	0x08008b85
 8008b30:	08008b99 	.word	0x08008b99
 8008b34:	08008b15 	.word	0x08008b15
 8008b38:	08008b15 	.word	0x08008b15
 8008b3c:	08008b15 	.word	0x08008b15
 8008b40:	08008b15 	.word	0x08008b15
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008b15 	.word	0x08008b15
 8008b4c:	08008b15 	.word	0x08008b15
 8008b50:	08008b15 	.word	0x08008b15
 8008b54:	08008b15 	.word	0x08008b15
 8008b58:	08008ca5 	.word	0x08008ca5
 8008b5c:	08008bc9 	.word	0x08008bc9
 8008b60:	08008c87 	.word	0x08008c87
 8008b64:	08008b15 	.word	0x08008b15
 8008b68:	08008b15 	.word	0x08008b15
 8008b6c:	08008cc7 	.word	0x08008cc7
 8008b70:	08008b15 	.word	0x08008b15
 8008b74:	08008bc9 	.word	0x08008bc9
 8008b78:	08008b15 	.word	0x08008b15
 8008b7c:	08008b15 	.word	0x08008b15
 8008b80:	08008c8f 	.word	0x08008c8f
 8008b84:	680b      	ldr	r3, [r1, #0]
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	600a      	str	r2, [r1, #0]
 8008b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0a3      	b.n	8008ce0 <_printf_i+0x1f4>
 8008b98:	6825      	ldr	r5, [r4, #0]
 8008b9a:	6808      	ldr	r0, [r1, #0]
 8008b9c:	062e      	lsls	r6, r5, #24
 8008b9e:	f100 0304 	add.w	r3, r0, #4
 8008ba2:	d50a      	bpl.n	8008bba <_printf_i+0xce>
 8008ba4:	6805      	ldr	r5, [r0, #0]
 8008ba6:	600b      	str	r3, [r1, #0]
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	da03      	bge.n	8008bb4 <_printf_i+0xc8>
 8008bac:	232d      	movs	r3, #45	; 0x2d
 8008bae:	426d      	negs	r5, r5
 8008bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bb4:	485e      	ldr	r0, [pc, #376]	; (8008d30 <_printf_i+0x244>)
 8008bb6:	230a      	movs	r3, #10
 8008bb8:	e019      	b.n	8008bee <_printf_i+0x102>
 8008bba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008bbe:	6805      	ldr	r5, [r0, #0]
 8008bc0:	600b      	str	r3, [r1, #0]
 8008bc2:	bf18      	it	ne
 8008bc4:	b22d      	sxthne	r5, r5
 8008bc6:	e7ef      	b.n	8008ba8 <_printf_i+0xbc>
 8008bc8:	680b      	ldr	r3, [r1, #0]
 8008bca:	6825      	ldr	r5, [r4, #0]
 8008bcc:	1d18      	adds	r0, r3, #4
 8008bce:	6008      	str	r0, [r1, #0]
 8008bd0:	0628      	lsls	r0, r5, #24
 8008bd2:	d501      	bpl.n	8008bd8 <_printf_i+0xec>
 8008bd4:	681d      	ldr	r5, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <_printf_i+0xf2>
 8008bd8:	0669      	lsls	r1, r5, #25
 8008bda:	d5fb      	bpl.n	8008bd4 <_printf_i+0xe8>
 8008bdc:	881d      	ldrh	r5, [r3, #0]
 8008bde:	4854      	ldr	r0, [pc, #336]	; (8008d30 <_printf_i+0x244>)
 8008be0:	2f6f      	cmp	r7, #111	; 0x6f
 8008be2:	bf0c      	ite	eq
 8008be4:	2308      	moveq	r3, #8
 8008be6:	230a      	movne	r3, #10
 8008be8:	2100      	movs	r1, #0
 8008bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bee:	6866      	ldr	r6, [r4, #4]
 8008bf0:	60a6      	str	r6, [r4, #8]
 8008bf2:	2e00      	cmp	r6, #0
 8008bf4:	bfa2      	ittt	ge
 8008bf6:	6821      	ldrge	r1, [r4, #0]
 8008bf8:	f021 0104 	bicge.w	r1, r1, #4
 8008bfc:	6021      	strge	r1, [r4, #0]
 8008bfe:	b90d      	cbnz	r5, 8008c04 <_printf_i+0x118>
 8008c00:	2e00      	cmp	r6, #0
 8008c02:	d04d      	beq.n	8008ca0 <_printf_i+0x1b4>
 8008c04:	4616      	mov	r6, r2
 8008c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c0e:	5dc7      	ldrb	r7, [r0, r7]
 8008c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c14:	462f      	mov	r7, r5
 8008c16:	42bb      	cmp	r3, r7
 8008c18:	460d      	mov	r5, r1
 8008c1a:	d9f4      	bls.n	8008c06 <_printf_i+0x11a>
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d10b      	bne.n	8008c38 <_printf_i+0x14c>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	07df      	lsls	r7, r3, #31
 8008c24:	d508      	bpl.n	8008c38 <_printf_i+0x14c>
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	6861      	ldr	r1, [r4, #4]
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	bfde      	ittt	le
 8008c2e:	2330      	movle	r3, #48	; 0x30
 8008c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c34:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008c38:	1b92      	subs	r2, r2, r6
 8008c3a:	6122      	str	r2, [r4, #16]
 8008c3c:	f8cd a000 	str.w	sl, [sp]
 8008c40:	464b      	mov	r3, r9
 8008c42:	aa03      	add	r2, sp, #12
 8008c44:	4621      	mov	r1, r4
 8008c46:	4640      	mov	r0, r8
 8008c48:	f7ff fee2 	bl	8008a10 <_printf_common>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d14c      	bne.n	8008cea <_printf_i+0x1fe>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c54:	b004      	add	sp, #16
 8008c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5a:	4835      	ldr	r0, [pc, #212]	; (8008d30 <_printf_i+0x244>)
 8008c5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	680e      	ldr	r6, [r1, #0]
 8008c64:	061f      	lsls	r7, r3, #24
 8008c66:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c6a:	600e      	str	r6, [r1, #0]
 8008c6c:	d514      	bpl.n	8008c98 <_printf_i+0x1ac>
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	bf44      	itt	mi
 8008c72:	f043 0320 	orrmi.w	r3, r3, #32
 8008c76:	6023      	strmi	r3, [r4, #0]
 8008c78:	b91d      	cbnz	r5, 8008c82 <_printf_i+0x196>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	f023 0320 	bic.w	r3, r3, #32
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	2310      	movs	r3, #16
 8008c84:	e7b0      	b.n	8008be8 <_printf_i+0xfc>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	f043 0320 	orr.w	r3, r3, #32
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2378      	movs	r3, #120	; 0x78
 8008c90:	4828      	ldr	r0, [pc, #160]	; (8008d34 <_printf_i+0x248>)
 8008c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c96:	e7e3      	b.n	8008c60 <_printf_i+0x174>
 8008c98:	065e      	lsls	r6, r3, #25
 8008c9a:	bf48      	it	mi
 8008c9c:	b2ad      	uxthmi	r5, r5
 8008c9e:	e7e6      	b.n	8008c6e <_printf_i+0x182>
 8008ca0:	4616      	mov	r6, r2
 8008ca2:	e7bb      	b.n	8008c1c <_printf_i+0x130>
 8008ca4:	680b      	ldr	r3, [r1, #0]
 8008ca6:	6826      	ldr	r6, [r4, #0]
 8008ca8:	6960      	ldr	r0, [r4, #20]
 8008caa:	1d1d      	adds	r5, r3, #4
 8008cac:	600d      	str	r5, [r1, #0]
 8008cae:	0635      	lsls	r5, r6, #24
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	d501      	bpl.n	8008cb8 <_printf_i+0x1cc>
 8008cb4:	6018      	str	r0, [r3, #0]
 8008cb6:	e002      	b.n	8008cbe <_printf_i+0x1d2>
 8008cb8:	0671      	lsls	r1, r6, #25
 8008cba:	d5fb      	bpl.n	8008cb4 <_printf_i+0x1c8>
 8008cbc:	8018      	strh	r0, [r3, #0]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	4616      	mov	r6, r2
 8008cc4:	e7ba      	b.n	8008c3c <_printf_i+0x150>
 8008cc6:	680b      	ldr	r3, [r1, #0]
 8008cc8:	1d1a      	adds	r2, r3, #4
 8008cca:	600a      	str	r2, [r1, #0]
 8008ccc:	681e      	ldr	r6, [r3, #0]
 8008cce:	6862      	ldr	r2, [r4, #4]
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7f7 fa94 	bl	8000200 <memchr>
 8008cd8:	b108      	cbz	r0, 8008cde <_printf_i+0x1f2>
 8008cda:	1b80      	subs	r0, r0, r6
 8008cdc:	6060      	str	r0, [r4, #4]
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce8:	e7a8      	b.n	8008c3c <_printf_i+0x150>
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	4632      	mov	r2, r6
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	47d0      	blx	sl
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d0ab      	beq.n	8008c50 <_printf_i+0x164>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	079b      	lsls	r3, r3, #30
 8008cfc:	d413      	bmi.n	8008d26 <_printf_i+0x23a>
 8008cfe:	68e0      	ldr	r0, [r4, #12]
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	4298      	cmp	r0, r3
 8008d04:	bfb8      	it	lt
 8008d06:	4618      	movlt	r0, r3
 8008d08:	e7a4      	b.n	8008c54 <_printf_i+0x168>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	4649      	mov	r1, r9
 8008d10:	4640      	mov	r0, r8
 8008d12:	47d0      	blx	sl
 8008d14:	3001      	adds	r0, #1
 8008d16:	d09b      	beq.n	8008c50 <_printf_i+0x164>
 8008d18:	3501      	adds	r5, #1
 8008d1a:	68e3      	ldr	r3, [r4, #12]
 8008d1c:	9903      	ldr	r1, [sp, #12]
 8008d1e:	1a5b      	subs	r3, r3, r1
 8008d20:	42ab      	cmp	r3, r5
 8008d22:	dcf2      	bgt.n	8008d0a <_printf_i+0x21e>
 8008d24:	e7eb      	b.n	8008cfe <_printf_i+0x212>
 8008d26:	2500      	movs	r5, #0
 8008d28:	f104 0619 	add.w	r6, r4, #25
 8008d2c:	e7f5      	b.n	8008d1a <_printf_i+0x22e>
 8008d2e:	bf00      	nop
 8008d30:	0800d1ea 	.word	0x0800d1ea
 8008d34:	0800d1fb 	.word	0x0800d1fb

08008d38 <_scanf_float>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	b087      	sub	sp, #28
 8008d3e:	4617      	mov	r7, r2
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	688b      	ldr	r3, [r1, #8]
 8008d44:	1e5a      	subs	r2, r3, #1
 8008d46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d4a:	bf83      	ittte	hi
 8008d4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d50:	195b      	addhi	r3, r3, r5
 8008d52:	9302      	strhi	r3, [sp, #8]
 8008d54:	2300      	movls	r3, #0
 8008d56:	bf86      	itte	hi
 8008d58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d5c:	608b      	strhi	r3, [r1, #8]
 8008d5e:	9302      	strls	r3, [sp, #8]
 8008d60:	680b      	ldr	r3, [r1, #0]
 8008d62:	468b      	mov	fp, r1
 8008d64:	2500      	movs	r5, #0
 8008d66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008d6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d72:	4680      	mov	r8, r0
 8008d74:	460c      	mov	r4, r1
 8008d76:	465e      	mov	r6, fp
 8008d78:	46aa      	mov	sl, r5
 8008d7a:	46a9      	mov	r9, r5
 8008d7c:	9501      	str	r5, [sp, #4]
 8008d7e:	68a2      	ldr	r2, [r4, #8]
 8008d80:	b152      	cbz	r2, 8008d98 <_scanf_float+0x60>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b4e      	cmp	r3, #78	; 0x4e
 8008d88:	d864      	bhi.n	8008e54 <_scanf_float+0x11c>
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	d83c      	bhi.n	8008e08 <_scanf_float+0xd0>
 8008d8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d92:	b2c8      	uxtb	r0, r1
 8008d94:	280e      	cmp	r0, #14
 8008d96:	d93a      	bls.n	8008e0e <_scanf_float+0xd6>
 8008d98:	f1b9 0f00 	cmp.w	r9, #0
 8008d9c:	d003      	beq.n	8008da6 <_scanf_float+0x6e>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008daa:	f1ba 0f01 	cmp.w	sl, #1
 8008dae:	f200 8113 	bhi.w	8008fd8 <_scanf_float+0x2a0>
 8008db2:	455e      	cmp	r6, fp
 8008db4:	f200 8105 	bhi.w	8008fc2 <_scanf_float+0x28a>
 8008db8:	2501      	movs	r5, #1
 8008dba:	4628      	mov	r0, r5
 8008dbc:	b007      	add	sp, #28
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008dc6:	2a0d      	cmp	r2, #13
 8008dc8:	d8e6      	bhi.n	8008d98 <_scanf_float+0x60>
 8008dca:	a101      	add	r1, pc, #4	; (adr r1, 8008dd0 <_scanf_float+0x98>)
 8008dcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008dd0:	08008f0f 	.word	0x08008f0f
 8008dd4:	08008d99 	.word	0x08008d99
 8008dd8:	08008d99 	.word	0x08008d99
 8008ddc:	08008d99 	.word	0x08008d99
 8008de0:	08008f6f 	.word	0x08008f6f
 8008de4:	08008f47 	.word	0x08008f47
 8008de8:	08008d99 	.word	0x08008d99
 8008dec:	08008d99 	.word	0x08008d99
 8008df0:	08008f1d 	.word	0x08008f1d
 8008df4:	08008d99 	.word	0x08008d99
 8008df8:	08008d99 	.word	0x08008d99
 8008dfc:	08008d99 	.word	0x08008d99
 8008e00:	08008d99 	.word	0x08008d99
 8008e04:	08008ed5 	.word	0x08008ed5
 8008e08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e0c:	e7db      	b.n	8008dc6 <_scanf_float+0x8e>
 8008e0e:	290e      	cmp	r1, #14
 8008e10:	d8c2      	bhi.n	8008d98 <_scanf_float+0x60>
 8008e12:	a001      	add	r0, pc, #4	; (adr r0, 8008e18 <_scanf_float+0xe0>)
 8008e14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e18:	08008ec7 	.word	0x08008ec7
 8008e1c:	08008d99 	.word	0x08008d99
 8008e20:	08008ec7 	.word	0x08008ec7
 8008e24:	08008f5b 	.word	0x08008f5b
 8008e28:	08008d99 	.word	0x08008d99
 8008e2c:	08008e75 	.word	0x08008e75
 8008e30:	08008eb1 	.word	0x08008eb1
 8008e34:	08008eb1 	.word	0x08008eb1
 8008e38:	08008eb1 	.word	0x08008eb1
 8008e3c:	08008eb1 	.word	0x08008eb1
 8008e40:	08008eb1 	.word	0x08008eb1
 8008e44:	08008eb1 	.word	0x08008eb1
 8008e48:	08008eb1 	.word	0x08008eb1
 8008e4c:	08008eb1 	.word	0x08008eb1
 8008e50:	08008eb1 	.word	0x08008eb1
 8008e54:	2b6e      	cmp	r3, #110	; 0x6e
 8008e56:	d809      	bhi.n	8008e6c <_scanf_float+0x134>
 8008e58:	2b60      	cmp	r3, #96	; 0x60
 8008e5a:	d8b2      	bhi.n	8008dc2 <_scanf_float+0x8a>
 8008e5c:	2b54      	cmp	r3, #84	; 0x54
 8008e5e:	d077      	beq.n	8008f50 <_scanf_float+0x218>
 8008e60:	2b59      	cmp	r3, #89	; 0x59
 8008e62:	d199      	bne.n	8008d98 <_scanf_float+0x60>
 8008e64:	2d07      	cmp	r5, #7
 8008e66:	d197      	bne.n	8008d98 <_scanf_float+0x60>
 8008e68:	2508      	movs	r5, #8
 8008e6a:	e029      	b.n	8008ec0 <_scanf_float+0x188>
 8008e6c:	2b74      	cmp	r3, #116	; 0x74
 8008e6e:	d06f      	beq.n	8008f50 <_scanf_float+0x218>
 8008e70:	2b79      	cmp	r3, #121	; 0x79
 8008e72:	e7f6      	b.n	8008e62 <_scanf_float+0x12a>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	05c8      	lsls	r0, r1, #23
 8008e78:	d51a      	bpl.n	8008eb0 <_scanf_float+0x178>
 8008e7a:	9b02      	ldr	r3, [sp, #8]
 8008e7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e80:	6021      	str	r1, [r4, #0]
 8008e82:	f109 0901 	add.w	r9, r9, #1
 8008e86:	b11b      	cbz	r3, 8008e90 <_scanf_float+0x158>
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	60a2      	str	r2, [r4, #8]
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	607b      	str	r3, [r7, #4]
 8008ea4:	f340 8084 	ble.w	8008fb0 <_scanf_float+0x278>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	603b      	str	r3, [r7, #0]
 8008eae:	e766      	b.n	8008d7e <_scanf_float+0x46>
 8008eb0:	eb1a 0f05 	cmn.w	sl, r5
 8008eb4:	f47f af70 	bne.w	8008d98 <_scanf_float+0x60>
 8008eb8:	6822      	ldr	r2, [r4, #0]
 8008eba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	f806 3b01 	strb.w	r3, [r6], #1
 8008ec4:	e7e4      	b.n	8008e90 <_scanf_float+0x158>
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	0610      	lsls	r0, r2, #24
 8008eca:	f57f af65 	bpl.w	8008d98 <_scanf_float+0x60>
 8008ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ed2:	e7f4      	b.n	8008ebe <_scanf_float+0x186>
 8008ed4:	f1ba 0f00 	cmp.w	sl, #0
 8008ed8:	d10e      	bne.n	8008ef8 <_scanf_float+0x1c0>
 8008eda:	f1b9 0f00 	cmp.w	r9, #0
 8008ede:	d10e      	bne.n	8008efe <_scanf_float+0x1c6>
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ee6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008eea:	d108      	bne.n	8008efe <_scanf_float+0x1c6>
 8008eec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	f04f 0a01 	mov.w	sl, #1
 8008ef6:	e7e3      	b.n	8008ec0 <_scanf_float+0x188>
 8008ef8:	f1ba 0f02 	cmp.w	sl, #2
 8008efc:	d055      	beq.n	8008faa <_scanf_float+0x272>
 8008efe:	2d01      	cmp	r5, #1
 8008f00:	d002      	beq.n	8008f08 <_scanf_float+0x1d0>
 8008f02:	2d04      	cmp	r5, #4
 8008f04:	f47f af48 	bne.w	8008d98 <_scanf_float+0x60>
 8008f08:	3501      	adds	r5, #1
 8008f0a:	b2ed      	uxtb	r5, r5
 8008f0c:	e7d8      	b.n	8008ec0 <_scanf_float+0x188>
 8008f0e:	f1ba 0f01 	cmp.w	sl, #1
 8008f12:	f47f af41 	bne.w	8008d98 <_scanf_float+0x60>
 8008f16:	f04f 0a02 	mov.w	sl, #2
 8008f1a:	e7d1      	b.n	8008ec0 <_scanf_float+0x188>
 8008f1c:	b97d      	cbnz	r5, 8008f3e <_scanf_float+0x206>
 8008f1e:	f1b9 0f00 	cmp.w	r9, #0
 8008f22:	f47f af3c 	bne.w	8008d9e <_scanf_float+0x66>
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f30:	f47f af39 	bne.w	8008da6 <_scanf_float+0x6e>
 8008f34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f38:	6022      	str	r2, [r4, #0]
 8008f3a:	2501      	movs	r5, #1
 8008f3c:	e7c0      	b.n	8008ec0 <_scanf_float+0x188>
 8008f3e:	2d03      	cmp	r5, #3
 8008f40:	d0e2      	beq.n	8008f08 <_scanf_float+0x1d0>
 8008f42:	2d05      	cmp	r5, #5
 8008f44:	e7de      	b.n	8008f04 <_scanf_float+0x1cc>
 8008f46:	2d02      	cmp	r5, #2
 8008f48:	f47f af26 	bne.w	8008d98 <_scanf_float+0x60>
 8008f4c:	2503      	movs	r5, #3
 8008f4e:	e7b7      	b.n	8008ec0 <_scanf_float+0x188>
 8008f50:	2d06      	cmp	r5, #6
 8008f52:	f47f af21 	bne.w	8008d98 <_scanf_float+0x60>
 8008f56:	2507      	movs	r5, #7
 8008f58:	e7b2      	b.n	8008ec0 <_scanf_float+0x188>
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	0591      	lsls	r1, r2, #22
 8008f5e:	f57f af1b 	bpl.w	8008d98 <_scanf_float+0x60>
 8008f62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f6c:	e7a8      	b.n	8008ec0 <_scanf_float+0x188>
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008f74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f78:	d006      	beq.n	8008f88 <_scanf_float+0x250>
 8008f7a:	0550      	lsls	r0, r2, #21
 8008f7c:	f57f af0c 	bpl.w	8008d98 <_scanf_float+0x60>
 8008f80:	f1b9 0f00 	cmp.w	r9, #0
 8008f84:	f43f af0f 	beq.w	8008da6 <_scanf_float+0x6e>
 8008f88:	0591      	lsls	r1, r2, #22
 8008f8a:	bf58      	it	pl
 8008f8c:	9901      	ldrpl	r1, [sp, #4]
 8008f8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f92:	bf58      	it	pl
 8008f94:	eba9 0101 	subpl.w	r1, r9, r1
 8008f98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f9c:	bf58      	it	pl
 8008f9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008fa2:	6022      	str	r2, [r4, #0]
 8008fa4:	f04f 0900 	mov.w	r9, #0
 8008fa8:	e78a      	b.n	8008ec0 <_scanf_float+0x188>
 8008faa:	f04f 0a03 	mov.w	sl, #3
 8008fae:	e787      	b.n	8008ec0 <_scanf_float+0x188>
 8008fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4798      	blx	r3
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f43f aedf 	beq.w	8008d7e <_scanf_float+0x46>
 8008fc0:	e6ea      	b.n	8008d98 <_scanf_float+0x60>
 8008fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fca:	463a      	mov	r2, r7
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4798      	blx	r3
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	e6ec      	b.n	8008db2 <_scanf_float+0x7a>
 8008fd8:	1e6b      	subs	r3, r5, #1
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	d825      	bhi.n	800902a <_scanf_float+0x2f2>
 8008fde:	2d02      	cmp	r5, #2
 8008fe0:	d836      	bhi.n	8009050 <_scanf_float+0x318>
 8008fe2:	455e      	cmp	r6, fp
 8008fe4:	f67f aee8 	bls.w	8008db8 <_scanf_float+0x80>
 8008fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4798      	blx	r3
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	e7f1      	b.n	8008fe2 <_scanf_float+0x2aa>
 8008ffe:	9802      	ldr	r0, [sp, #8]
 8009000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009004:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009008:	9002      	str	r0, [sp, #8]
 800900a:	463a      	mov	r2, r7
 800900c:	4640      	mov	r0, r8
 800900e:	4798      	blx	r3
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	3b01      	subs	r3, #1
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800901a:	fa5f fa8a 	uxtb.w	sl, sl
 800901e:	f1ba 0f02 	cmp.w	sl, #2
 8009022:	d1ec      	bne.n	8008ffe <_scanf_float+0x2c6>
 8009024:	3d03      	subs	r5, #3
 8009026:	b2ed      	uxtb	r5, r5
 8009028:	1b76      	subs	r6, r6, r5
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	05da      	lsls	r2, r3, #23
 800902e:	d52f      	bpl.n	8009090 <_scanf_float+0x358>
 8009030:	055b      	lsls	r3, r3, #21
 8009032:	d510      	bpl.n	8009056 <_scanf_float+0x31e>
 8009034:	455e      	cmp	r6, fp
 8009036:	f67f aebf 	bls.w	8008db8 <_scanf_float+0x80>
 800903a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800903e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009042:	463a      	mov	r2, r7
 8009044:	4640      	mov	r0, r8
 8009046:	4798      	blx	r3
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	3b01      	subs	r3, #1
 800904c:	6123      	str	r3, [r4, #16]
 800904e:	e7f1      	b.n	8009034 <_scanf_float+0x2fc>
 8009050:	46aa      	mov	sl, r5
 8009052:	9602      	str	r6, [sp, #8]
 8009054:	e7df      	b.n	8009016 <_scanf_float+0x2de>
 8009056:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	2965      	cmp	r1, #101	; 0x65
 800905e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009062:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	d00c      	beq.n	8009084 <_scanf_float+0x34c>
 800906a:	2945      	cmp	r1, #69	; 0x45
 800906c:	d00a      	beq.n	8009084 <_scanf_float+0x34c>
 800906e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009072:	463a      	mov	r2, r7
 8009074:	4640      	mov	r0, r8
 8009076:	4798      	blx	r3
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800907e:	3b01      	subs	r3, #1
 8009080:	1eb5      	subs	r5, r6, #2
 8009082:	6123      	str	r3, [r4, #16]
 8009084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009088:	463a      	mov	r2, r7
 800908a:	4640      	mov	r0, r8
 800908c:	4798      	blx	r3
 800908e:	462e      	mov	r6, r5
 8009090:	6825      	ldr	r5, [r4, #0]
 8009092:	f015 0510 	ands.w	r5, r5, #16
 8009096:	d158      	bne.n	800914a <_scanf_float+0x412>
 8009098:	7035      	strb	r5, [r6, #0]
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a4:	d11c      	bne.n	80090e0 <_scanf_float+0x3a8>
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	454b      	cmp	r3, r9
 80090aa:	eba3 0209 	sub.w	r2, r3, r9
 80090ae:	d124      	bne.n	80090fa <_scanf_float+0x3c2>
 80090b0:	2200      	movs	r2, #0
 80090b2:	4659      	mov	r1, fp
 80090b4:	4640      	mov	r0, r8
 80090b6:	f000 ff29 	bl	8009f0c <_strtod_r>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	6821      	ldr	r1, [r4, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f011 0f02 	tst.w	r1, #2
 80090c4:	ec57 6b10 	vmov	r6, r7, d0
 80090c8:	f103 0204 	add.w	r2, r3, #4
 80090cc:	d020      	beq.n	8009110 <_scanf_float+0x3d8>
 80090ce:	9903      	ldr	r1, [sp, #12]
 80090d0:	600a      	str	r2, [r1, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	e9c3 6700 	strd	r6, r7, [r3]
 80090d8:	68e3      	ldr	r3, [r4, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60e3      	str	r3, [r4, #12]
 80090de:	e66c      	b.n	8008dba <_scanf_float+0x82>
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0e4      	beq.n	80090b0 <_scanf_float+0x378>
 80090e6:	9905      	ldr	r1, [sp, #20]
 80090e8:	230a      	movs	r3, #10
 80090ea:	462a      	mov	r2, r5
 80090ec:	3101      	adds	r1, #1
 80090ee:	4640      	mov	r0, r8
 80090f0:	f000 ff96 	bl	800a020 <_strtol_r>
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	9e05      	ldr	r6, [sp, #20]
 80090f8:	1ac2      	subs	r2, r0, r3
 80090fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80090fe:	429e      	cmp	r6, r3
 8009100:	bf28      	it	cs
 8009102:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009106:	4912      	ldr	r1, [pc, #72]	; (8009150 <_scanf_float+0x418>)
 8009108:	4630      	mov	r0, r6
 800910a:	f000 f8b9 	bl	8009280 <siprintf>
 800910e:	e7cf      	b.n	80090b0 <_scanf_float+0x378>
 8009110:	f011 0f04 	tst.w	r1, #4
 8009114:	9903      	ldr	r1, [sp, #12]
 8009116:	600a      	str	r2, [r1, #0]
 8009118:	d1db      	bne.n	80090d2 <_scanf_float+0x39a>
 800911a:	f8d3 8000 	ldr.w	r8, [r3]
 800911e:	ee10 2a10 	vmov	r2, s0
 8009122:	ee10 0a10 	vmov	r0, s0
 8009126:	463b      	mov	r3, r7
 8009128:	4639      	mov	r1, r7
 800912a:	f7f7 fd0f 	bl	8000b4c <__aeabi_dcmpun>
 800912e:	b128      	cbz	r0, 800913c <_scanf_float+0x404>
 8009130:	4808      	ldr	r0, [pc, #32]	; (8009154 <_scanf_float+0x41c>)
 8009132:	f000 f89f 	bl	8009274 <nanf>
 8009136:	ed88 0a00 	vstr	s0, [r8]
 800913a:	e7cd      	b.n	80090d8 <_scanf_float+0x3a0>
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fd62 	bl	8000c08 <__aeabi_d2f>
 8009144:	f8c8 0000 	str.w	r0, [r8]
 8009148:	e7c6      	b.n	80090d8 <_scanf_float+0x3a0>
 800914a:	2500      	movs	r5, #0
 800914c:	e635      	b.n	8008dba <_scanf_float+0x82>
 800914e:	bf00      	nop
 8009150:	0800d20c 	.word	0x0800d20c
 8009154:	0800d688 	.word	0x0800d688

08009158 <iprintf>:
 8009158:	b40f      	push	{r0, r1, r2, r3}
 800915a:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <iprintf+0x2c>)
 800915c:	b513      	push	{r0, r1, r4, lr}
 800915e:	681c      	ldr	r4, [r3, #0]
 8009160:	b124      	cbz	r4, 800916c <iprintf+0x14>
 8009162:	69a3      	ldr	r3, [r4, #24]
 8009164:	b913      	cbnz	r3, 800916c <iprintf+0x14>
 8009166:	4620      	mov	r0, r4
 8009168:	f001 ffb0 	bl	800b0cc <__sinit>
 800916c:	ab05      	add	r3, sp, #20
 800916e:	9a04      	ldr	r2, [sp, #16]
 8009170:	68a1      	ldr	r1, [r4, #8]
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	4620      	mov	r0, r4
 8009176:	f003 fb43 	bl	800c800 <_vfiprintf_r>
 800917a:	b002      	add	sp, #8
 800917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009180:	b004      	add	sp, #16
 8009182:	4770      	bx	lr
 8009184:	20000014 	.word	0x20000014

08009188 <_puts_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	460e      	mov	r6, r1
 800918c:	4605      	mov	r5, r0
 800918e:	b118      	cbz	r0, 8009198 <_puts_r+0x10>
 8009190:	6983      	ldr	r3, [r0, #24]
 8009192:	b90b      	cbnz	r3, 8009198 <_puts_r+0x10>
 8009194:	f001 ff9a 	bl	800b0cc <__sinit>
 8009198:	69ab      	ldr	r3, [r5, #24]
 800919a:	68ac      	ldr	r4, [r5, #8]
 800919c:	b913      	cbnz	r3, 80091a4 <_puts_r+0x1c>
 800919e:	4628      	mov	r0, r5
 80091a0:	f001 ff94 	bl	800b0cc <__sinit>
 80091a4:	4b2c      	ldr	r3, [pc, #176]	; (8009258 <_puts_r+0xd0>)
 80091a6:	429c      	cmp	r4, r3
 80091a8:	d120      	bne.n	80091ec <_puts_r+0x64>
 80091aa:	686c      	ldr	r4, [r5, #4]
 80091ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091ae:	07db      	lsls	r3, r3, #31
 80091b0:	d405      	bmi.n	80091be <_puts_r+0x36>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	0598      	lsls	r0, r3, #22
 80091b6:	d402      	bmi.n	80091be <_puts_r+0x36>
 80091b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ba:	f002 fb98 	bl	800b8ee <__retarget_lock_acquire_recursive>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	0719      	lsls	r1, r3, #28
 80091c2:	d51d      	bpl.n	8009200 <_puts_r+0x78>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	b1db      	cbz	r3, 8009200 <_puts_r+0x78>
 80091c8:	3e01      	subs	r6, #1
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091d0:	3b01      	subs	r3, #1
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	bb39      	cbnz	r1, 8009226 <_puts_r+0x9e>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da38      	bge.n	800924c <_puts_r+0xc4>
 80091da:	4622      	mov	r2, r4
 80091dc:	210a      	movs	r1, #10
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 ff20 	bl	800a024 <__swbuf_r>
 80091e4:	3001      	adds	r0, #1
 80091e6:	d011      	beq.n	800920c <_puts_r+0x84>
 80091e8:	250a      	movs	r5, #10
 80091ea:	e011      	b.n	8009210 <_puts_r+0x88>
 80091ec:	4b1b      	ldr	r3, [pc, #108]	; (800925c <_puts_r+0xd4>)
 80091ee:	429c      	cmp	r4, r3
 80091f0:	d101      	bne.n	80091f6 <_puts_r+0x6e>
 80091f2:	68ac      	ldr	r4, [r5, #8]
 80091f4:	e7da      	b.n	80091ac <_puts_r+0x24>
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <_puts_r+0xd8>)
 80091f8:	429c      	cmp	r4, r3
 80091fa:	bf08      	it	eq
 80091fc:	68ec      	ldreq	r4, [r5, #12]
 80091fe:	e7d5      	b.n	80091ac <_puts_r+0x24>
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f000 ff60 	bl	800a0c8 <__swsetup_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	d0dd      	beq.n	80091c8 <_puts_r+0x40>
 800920c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009212:	07da      	lsls	r2, r3, #31
 8009214:	d405      	bmi.n	8009222 <_puts_r+0x9a>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	059b      	lsls	r3, r3, #22
 800921a:	d402      	bmi.n	8009222 <_puts_r+0x9a>
 800921c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921e:	f002 fb67 	bl	800b8f0 <__retarget_lock_release_recursive>
 8009222:	4628      	mov	r0, r5
 8009224:	bd70      	pop	{r4, r5, r6, pc}
 8009226:	2b00      	cmp	r3, #0
 8009228:	da04      	bge.n	8009234 <_puts_r+0xac>
 800922a:	69a2      	ldr	r2, [r4, #24]
 800922c:	429a      	cmp	r2, r3
 800922e:	dc06      	bgt.n	800923e <_puts_r+0xb6>
 8009230:	290a      	cmp	r1, #10
 8009232:	d004      	beq.n	800923e <_puts_r+0xb6>
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	6022      	str	r2, [r4, #0]
 800923a:	7019      	strb	r1, [r3, #0]
 800923c:	e7c5      	b.n	80091ca <_puts_r+0x42>
 800923e:	4622      	mov	r2, r4
 8009240:	4628      	mov	r0, r5
 8009242:	f000 feef 	bl	800a024 <__swbuf_r>
 8009246:	3001      	adds	r0, #1
 8009248:	d1bf      	bne.n	80091ca <_puts_r+0x42>
 800924a:	e7df      	b.n	800920c <_puts_r+0x84>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	250a      	movs	r5, #10
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	701d      	strb	r5, [r3, #0]
 8009256:	e7db      	b.n	8009210 <_puts_r+0x88>
 8009258:	0800d420 	.word	0x0800d420
 800925c:	0800d440 	.word	0x0800d440
 8009260:	0800d400 	.word	0x0800d400

08009264 <puts>:
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <puts+0xc>)
 8009266:	4601      	mov	r1, r0
 8009268:	6818      	ldr	r0, [r3, #0]
 800926a:	f7ff bf8d 	b.w	8009188 <_puts_r>
 800926e:	bf00      	nop
 8009270:	20000014 	.word	0x20000014

08009274 <nanf>:
 8009274:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800927c <nanf+0x8>
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	7fc00000 	.word	0x7fc00000

08009280 <siprintf>:
 8009280:	b40e      	push	{r1, r2, r3}
 8009282:	b500      	push	{lr}
 8009284:	b09c      	sub	sp, #112	; 0x70
 8009286:	ab1d      	add	r3, sp, #116	; 0x74
 8009288:	9002      	str	r0, [sp, #8]
 800928a:	9006      	str	r0, [sp, #24]
 800928c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009290:	4809      	ldr	r0, [pc, #36]	; (80092b8 <siprintf+0x38>)
 8009292:	9107      	str	r1, [sp, #28]
 8009294:	9104      	str	r1, [sp, #16]
 8009296:	4909      	ldr	r1, [pc, #36]	; (80092bc <siprintf+0x3c>)
 8009298:	f853 2b04 	ldr.w	r2, [r3], #4
 800929c:	9105      	str	r1, [sp, #20]
 800929e:	6800      	ldr	r0, [r0, #0]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	a902      	add	r1, sp, #8
 80092a4:	f003 f982 	bl	800c5ac <_svfiprintf_r>
 80092a8:	9b02      	ldr	r3, [sp, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	b01c      	add	sp, #112	; 0x70
 80092b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b4:	b003      	add	sp, #12
 80092b6:	4770      	bx	lr
 80092b8:	20000014 	.word	0x20000014
 80092bc:	ffff0208 	.word	0xffff0208

080092c0 <sulp>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	4604      	mov	r4, r0
 80092c4:	460d      	mov	r5, r1
 80092c6:	ec45 4b10 	vmov	d0, r4, r5
 80092ca:	4616      	mov	r6, r2
 80092cc:	f002 ff0a 	bl	800c0e4 <__ulp>
 80092d0:	ec51 0b10 	vmov	r0, r1, d0
 80092d4:	b17e      	cbz	r6, 80092f6 <sulp+0x36>
 80092d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dd09      	ble.n	80092f6 <sulp+0x36>
 80092e2:	051b      	lsls	r3, r3, #20
 80092e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092e8:	2400      	movs	r4, #0
 80092ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80092ee:	4622      	mov	r2, r4
 80092f0:	462b      	mov	r3, r5
 80092f2:	f7f7 f991 	bl	8000618 <__aeabi_dmul>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}

080092f8 <_strtod_l>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	b0a3      	sub	sp, #140	; 0x8c
 80092fe:	461f      	mov	r7, r3
 8009300:	2300      	movs	r3, #0
 8009302:	931e      	str	r3, [sp, #120]	; 0x78
 8009304:	4ba4      	ldr	r3, [pc, #656]	; (8009598 <_strtod_l+0x2a0>)
 8009306:	9219      	str	r2, [sp, #100]	; 0x64
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	4604      	mov	r4, r0
 800930e:	4618      	mov	r0, r3
 8009310:	4688      	mov	r8, r1
 8009312:	f7f6 ff6d 	bl	80001f0 <strlen>
 8009316:	f04f 0a00 	mov.w	sl, #0
 800931a:	4605      	mov	r5, r0
 800931c:	f04f 0b00 	mov.w	fp, #0
 8009320:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	2a2b      	cmp	r2, #43	; 0x2b
 800932a:	d04c      	beq.n	80093c6 <_strtod_l+0xce>
 800932c:	d839      	bhi.n	80093a2 <_strtod_l+0xaa>
 800932e:	2a0d      	cmp	r2, #13
 8009330:	d832      	bhi.n	8009398 <_strtod_l+0xa0>
 8009332:	2a08      	cmp	r2, #8
 8009334:	d832      	bhi.n	800939c <_strtod_l+0xa4>
 8009336:	2a00      	cmp	r2, #0
 8009338:	d03c      	beq.n	80093b4 <_strtod_l+0xbc>
 800933a:	2300      	movs	r3, #0
 800933c:	930e      	str	r3, [sp, #56]	; 0x38
 800933e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009340:	7833      	ldrb	r3, [r6, #0]
 8009342:	2b30      	cmp	r3, #48	; 0x30
 8009344:	f040 80b4 	bne.w	80094b0 <_strtod_l+0x1b8>
 8009348:	7873      	ldrb	r3, [r6, #1]
 800934a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800934e:	2b58      	cmp	r3, #88	; 0x58
 8009350:	d16c      	bne.n	800942c <_strtod_l+0x134>
 8009352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	ab1e      	add	r3, sp, #120	; 0x78
 8009358:	9702      	str	r7, [sp, #8]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	4a8f      	ldr	r2, [pc, #572]	; (800959c <_strtod_l+0x2a4>)
 800935e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009360:	a91d      	add	r1, sp, #116	; 0x74
 8009362:	4620      	mov	r0, r4
 8009364:	f001 ffb6 	bl	800b2d4 <__gethex>
 8009368:	f010 0707 	ands.w	r7, r0, #7
 800936c:	4605      	mov	r5, r0
 800936e:	d005      	beq.n	800937c <_strtod_l+0x84>
 8009370:	2f06      	cmp	r7, #6
 8009372:	d12a      	bne.n	80093ca <_strtod_l+0xd2>
 8009374:	3601      	adds	r6, #1
 8009376:	2300      	movs	r3, #0
 8009378:	961d      	str	r6, [sp, #116]	; 0x74
 800937a:	930e      	str	r3, [sp, #56]	; 0x38
 800937c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800937e:	2b00      	cmp	r3, #0
 8009380:	f040 8596 	bne.w	8009eb0 <_strtod_l+0xbb8>
 8009384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009386:	b1db      	cbz	r3, 80093c0 <_strtod_l+0xc8>
 8009388:	4652      	mov	r2, sl
 800938a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800938e:	ec43 2b10 	vmov	d0, r2, r3
 8009392:	b023      	add	sp, #140	; 0x8c
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	2a20      	cmp	r2, #32
 800939a:	d1ce      	bne.n	800933a <_strtod_l+0x42>
 800939c:	3301      	adds	r3, #1
 800939e:	931d      	str	r3, [sp, #116]	; 0x74
 80093a0:	e7c0      	b.n	8009324 <_strtod_l+0x2c>
 80093a2:	2a2d      	cmp	r2, #45	; 0x2d
 80093a4:	d1c9      	bne.n	800933a <_strtod_l+0x42>
 80093a6:	2201      	movs	r2, #1
 80093a8:	920e      	str	r2, [sp, #56]	; 0x38
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	921d      	str	r2, [sp, #116]	; 0x74
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1c4      	bne.n	800933e <_strtod_l+0x46>
 80093b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f040 8576 	bne.w	8009eac <_strtod_l+0xbb4>
 80093c0:	4652      	mov	r2, sl
 80093c2:	465b      	mov	r3, fp
 80093c4:	e7e3      	b.n	800938e <_strtod_l+0x96>
 80093c6:	2200      	movs	r2, #0
 80093c8:	e7ee      	b.n	80093a8 <_strtod_l+0xb0>
 80093ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80093cc:	b13a      	cbz	r2, 80093de <_strtod_l+0xe6>
 80093ce:	2135      	movs	r1, #53	; 0x35
 80093d0:	a820      	add	r0, sp, #128	; 0x80
 80093d2:	f002 ff92 	bl	800c2fa <__copybits>
 80093d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80093d8:	4620      	mov	r0, r4
 80093da:	f002 fb57 	bl	800ba8c <_Bfree>
 80093de:	3f01      	subs	r7, #1
 80093e0:	2f05      	cmp	r7, #5
 80093e2:	d807      	bhi.n	80093f4 <_strtod_l+0xfc>
 80093e4:	e8df f007 	tbb	[pc, r7]
 80093e8:	1d180b0e 	.word	0x1d180b0e
 80093ec:	030e      	.short	0x030e
 80093ee:	f04f 0b00 	mov.w	fp, #0
 80093f2:	46da      	mov	sl, fp
 80093f4:	0728      	lsls	r0, r5, #28
 80093f6:	d5c1      	bpl.n	800937c <_strtod_l+0x84>
 80093f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093fc:	e7be      	b.n	800937c <_strtod_l+0x84>
 80093fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009402:	e7f7      	b.n	80093f4 <_strtod_l+0xfc>
 8009404:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009408:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800940a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800940e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009412:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009416:	e7ed      	b.n	80093f4 <_strtod_l+0xfc>
 8009418:	f8df b184 	ldr.w	fp, [pc, #388]	; 80095a0 <_strtod_l+0x2a8>
 800941c:	f04f 0a00 	mov.w	sl, #0
 8009420:	e7e8      	b.n	80093f4 <_strtod_l+0xfc>
 8009422:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009426:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800942a:	e7e3      	b.n	80093f4 <_strtod_l+0xfc>
 800942c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	921d      	str	r2, [sp, #116]	; 0x74
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	2b30      	cmp	r3, #48	; 0x30
 8009436:	d0f9      	beq.n	800942c <_strtod_l+0x134>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d09f      	beq.n	800937c <_strtod_l+0x84>
 800943c:	2301      	movs	r3, #1
 800943e:	f04f 0900 	mov.w	r9, #0
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009446:	930a      	str	r3, [sp, #40]	; 0x28
 8009448:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800944c:	464f      	mov	r7, r9
 800944e:	220a      	movs	r2, #10
 8009450:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009452:	7806      	ldrb	r6, [r0, #0]
 8009454:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009458:	b2d9      	uxtb	r1, r3
 800945a:	2909      	cmp	r1, #9
 800945c:	d92a      	bls.n	80094b4 <_strtod_l+0x1bc>
 800945e:	9907      	ldr	r1, [sp, #28]
 8009460:	462a      	mov	r2, r5
 8009462:	f003 fb58 	bl	800cb16 <strncmp>
 8009466:	b398      	cbz	r0, 80094d0 <_strtod_l+0x1d8>
 8009468:	2000      	movs	r0, #0
 800946a:	4633      	mov	r3, r6
 800946c:	463d      	mov	r5, r7
 800946e:	9007      	str	r0, [sp, #28]
 8009470:	4602      	mov	r2, r0
 8009472:	2b65      	cmp	r3, #101	; 0x65
 8009474:	d001      	beq.n	800947a <_strtod_l+0x182>
 8009476:	2b45      	cmp	r3, #69	; 0x45
 8009478:	d118      	bne.n	80094ac <_strtod_l+0x1b4>
 800947a:	b91d      	cbnz	r5, 8009484 <_strtod_l+0x18c>
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	4303      	orrs	r3, r0
 8009480:	d098      	beq.n	80093b4 <_strtod_l+0xbc>
 8009482:	2500      	movs	r5, #0
 8009484:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009488:	f108 0301 	add.w	r3, r8, #1
 800948c:	931d      	str	r3, [sp, #116]	; 0x74
 800948e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009492:	2b2b      	cmp	r3, #43	; 0x2b
 8009494:	d075      	beq.n	8009582 <_strtod_l+0x28a>
 8009496:	2b2d      	cmp	r3, #45	; 0x2d
 8009498:	d07b      	beq.n	8009592 <_strtod_l+0x29a>
 800949a:	f04f 0c00 	mov.w	ip, #0
 800949e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094a2:	2909      	cmp	r1, #9
 80094a4:	f240 8082 	bls.w	80095ac <_strtod_l+0x2b4>
 80094a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80094ac:	2600      	movs	r6, #0
 80094ae:	e09d      	b.n	80095ec <_strtod_l+0x2f4>
 80094b0:	2300      	movs	r3, #0
 80094b2:	e7c4      	b.n	800943e <_strtod_l+0x146>
 80094b4:	2f08      	cmp	r7, #8
 80094b6:	bfd8      	it	le
 80094b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80094ba:	f100 0001 	add.w	r0, r0, #1
 80094be:	bfda      	itte	le
 80094c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80094c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80094c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80094ca:	3701      	adds	r7, #1
 80094cc:	901d      	str	r0, [sp, #116]	; 0x74
 80094ce:	e7bf      	b.n	8009450 <_strtod_l+0x158>
 80094d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094d2:	195a      	adds	r2, r3, r5
 80094d4:	921d      	str	r2, [sp, #116]	; 0x74
 80094d6:	5d5b      	ldrb	r3, [r3, r5]
 80094d8:	2f00      	cmp	r7, #0
 80094da:	d037      	beq.n	800954c <_strtod_l+0x254>
 80094dc:	9007      	str	r0, [sp, #28]
 80094de:	463d      	mov	r5, r7
 80094e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80094e4:	2a09      	cmp	r2, #9
 80094e6:	d912      	bls.n	800950e <_strtod_l+0x216>
 80094e8:	2201      	movs	r2, #1
 80094ea:	e7c2      	b.n	8009472 <_strtod_l+0x17a>
 80094ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	921d      	str	r2, [sp, #116]	; 0x74
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	3001      	adds	r0, #1
 80094f6:	2b30      	cmp	r3, #48	; 0x30
 80094f8:	d0f8      	beq.n	80094ec <_strtod_l+0x1f4>
 80094fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80094fe:	2a08      	cmp	r2, #8
 8009500:	f200 84db 	bhi.w	8009eba <_strtod_l+0xbc2>
 8009504:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009506:	9007      	str	r0, [sp, #28]
 8009508:	2000      	movs	r0, #0
 800950a:	920a      	str	r2, [sp, #40]	; 0x28
 800950c:	4605      	mov	r5, r0
 800950e:	3b30      	subs	r3, #48	; 0x30
 8009510:	f100 0201 	add.w	r2, r0, #1
 8009514:	d014      	beq.n	8009540 <_strtod_l+0x248>
 8009516:	9907      	ldr	r1, [sp, #28]
 8009518:	4411      	add	r1, r2
 800951a:	9107      	str	r1, [sp, #28]
 800951c:	462a      	mov	r2, r5
 800951e:	eb00 0e05 	add.w	lr, r0, r5
 8009522:	210a      	movs	r1, #10
 8009524:	4572      	cmp	r2, lr
 8009526:	d113      	bne.n	8009550 <_strtod_l+0x258>
 8009528:	182a      	adds	r2, r5, r0
 800952a:	2a08      	cmp	r2, #8
 800952c:	f105 0501 	add.w	r5, r5, #1
 8009530:	4405      	add	r5, r0
 8009532:	dc1c      	bgt.n	800956e <_strtod_l+0x276>
 8009534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009536:	220a      	movs	r2, #10
 8009538:	fb02 3301 	mla	r3, r2, r1, r3
 800953c:	9309      	str	r3, [sp, #36]	; 0x24
 800953e:	2200      	movs	r2, #0
 8009540:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009542:	1c59      	adds	r1, r3, #1
 8009544:	911d      	str	r1, [sp, #116]	; 0x74
 8009546:	785b      	ldrb	r3, [r3, #1]
 8009548:	4610      	mov	r0, r2
 800954a:	e7c9      	b.n	80094e0 <_strtod_l+0x1e8>
 800954c:	4638      	mov	r0, r7
 800954e:	e7d2      	b.n	80094f6 <_strtod_l+0x1fe>
 8009550:	2a08      	cmp	r2, #8
 8009552:	dc04      	bgt.n	800955e <_strtod_l+0x266>
 8009554:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009556:	434e      	muls	r6, r1
 8009558:	9609      	str	r6, [sp, #36]	; 0x24
 800955a:	3201      	adds	r2, #1
 800955c:	e7e2      	b.n	8009524 <_strtod_l+0x22c>
 800955e:	f102 0c01 	add.w	ip, r2, #1
 8009562:	f1bc 0f10 	cmp.w	ip, #16
 8009566:	bfd8      	it	le
 8009568:	fb01 f909 	mulle.w	r9, r1, r9
 800956c:	e7f5      	b.n	800955a <_strtod_l+0x262>
 800956e:	2d10      	cmp	r5, #16
 8009570:	bfdc      	itt	le
 8009572:	220a      	movle	r2, #10
 8009574:	fb02 3909 	mlale	r9, r2, r9, r3
 8009578:	e7e1      	b.n	800953e <_strtod_l+0x246>
 800957a:	2300      	movs	r3, #0
 800957c:	9307      	str	r3, [sp, #28]
 800957e:	2201      	movs	r2, #1
 8009580:	e77c      	b.n	800947c <_strtod_l+0x184>
 8009582:	f04f 0c00 	mov.w	ip, #0
 8009586:	f108 0302 	add.w	r3, r8, #2
 800958a:	931d      	str	r3, [sp, #116]	; 0x74
 800958c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009590:	e785      	b.n	800949e <_strtod_l+0x1a6>
 8009592:	f04f 0c01 	mov.w	ip, #1
 8009596:	e7f6      	b.n	8009586 <_strtod_l+0x28e>
 8009598:	0800d4cc 	.word	0x0800d4cc
 800959c:	0800d214 	.word	0x0800d214
 80095a0:	7ff00000 	.word	0x7ff00000
 80095a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095a6:	1c59      	adds	r1, r3, #1
 80095a8:	911d      	str	r1, [sp, #116]	; 0x74
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b30      	cmp	r3, #48	; 0x30
 80095ae:	d0f9      	beq.n	80095a4 <_strtod_l+0x2ac>
 80095b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80095b4:	2908      	cmp	r1, #8
 80095b6:	f63f af79 	bhi.w	80094ac <_strtod_l+0x1b4>
 80095ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80095be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095c0:	9308      	str	r3, [sp, #32]
 80095c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095c4:	1c59      	adds	r1, r3, #1
 80095c6:	911d      	str	r1, [sp, #116]	; 0x74
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80095ce:	2e09      	cmp	r6, #9
 80095d0:	d937      	bls.n	8009642 <_strtod_l+0x34a>
 80095d2:	9e08      	ldr	r6, [sp, #32]
 80095d4:	1b89      	subs	r1, r1, r6
 80095d6:	2908      	cmp	r1, #8
 80095d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80095dc:	dc02      	bgt.n	80095e4 <_strtod_l+0x2ec>
 80095de:	4576      	cmp	r6, lr
 80095e0:	bfa8      	it	ge
 80095e2:	4676      	movge	r6, lr
 80095e4:	f1bc 0f00 	cmp.w	ip, #0
 80095e8:	d000      	beq.n	80095ec <_strtod_l+0x2f4>
 80095ea:	4276      	negs	r6, r6
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	d14f      	bne.n	8009690 <_strtod_l+0x398>
 80095f0:	9904      	ldr	r1, [sp, #16]
 80095f2:	4301      	orrs	r1, r0
 80095f4:	f47f aec2 	bne.w	800937c <_strtod_l+0x84>
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	f47f aedb 	bne.w	80093b4 <_strtod_l+0xbc>
 80095fe:	2b69      	cmp	r3, #105	; 0x69
 8009600:	d027      	beq.n	8009652 <_strtod_l+0x35a>
 8009602:	dc24      	bgt.n	800964e <_strtod_l+0x356>
 8009604:	2b49      	cmp	r3, #73	; 0x49
 8009606:	d024      	beq.n	8009652 <_strtod_l+0x35a>
 8009608:	2b4e      	cmp	r3, #78	; 0x4e
 800960a:	f47f aed3 	bne.w	80093b4 <_strtod_l+0xbc>
 800960e:	499e      	ldr	r1, [pc, #632]	; (8009888 <_strtod_l+0x590>)
 8009610:	a81d      	add	r0, sp, #116	; 0x74
 8009612:	f002 f8b7 	bl	800b784 <__match>
 8009616:	2800      	cmp	r0, #0
 8009618:	f43f aecc 	beq.w	80093b4 <_strtod_l+0xbc>
 800961c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b28      	cmp	r3, #40	; 0x28
 8009622:	d12d      	bne.n	8009680 <_strtod_l+0x388>
 8009624:	4999      	ldr	r1, [pc, #612]	; (800988c <_strtod_l+0x594>)
 8009626:	aa20      	add	r2, sp, #128	; 0x80
 8009628:	a81d      	add	r0, sp, #116	; 0x74
 800962a:	f002 f8bf 	bl	800b7ac <__hexnan>
 800962e:	2805      	cmp	r0, #5
 8009630:	d126      	bne.n	8009680 <_strtod_l+0x388>
 8009632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009634:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009638:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800963c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009640:	e69c      	b.n	800937c <_strtod_l+0x84>
 8009642:	210a      	movs	r1, #10
 8009644:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009648:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800964c:	e7b9      	b.n	80095c2 <_strtod_l+0x2ca>
 800964e:	2b6e      	cmp	r3, #110	; 0x6e
 8009650:	e7db      	b.n	800960a <_strtod_l+0x312>
 8009652:	498f      	ldr	r1, [pc, #572]	; (8009890 <_strtod_l+0x598>)
 8009654:	a81d      	add	r0, sp, #116	; 0x74
 8009656:	f002 f895 	bl	800b784 <__match>
 800965a:	2800      	cmp	r0, #0
 800965c:	f43f aeaa 	beq.w	80093b4 <_strtod_l+0xbc>
 8009660:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009662:	498c      	ldr	r1, [pc, #560]	; (8009894 <_strtod_l+0x59c>)
 8009664:	3b01      	subs	r3, #1
 8009666:	a81d      	add	r0, sp, #116	; 0x74
 8009668:	931d      	str	r3, [sp, #116]	; 0x74
 800966a:	f002 f88b 	bl	800b784 <__match>
 800966e:	b910      	cbnz	r0, 8009676 <_strtod_l+0x37e>
 8009670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009672:	3301      	adds	r3, #1
 8009674:	931d      	str	r3, [sp, #116]	; 0x74
 8009676:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80098a4 <_strtod_l+0x5ac>
 800967a:	f04f 0a00 	mov.w	sl, #0
 800967e:	e67d      	b.n	800937c <_strtod_l+0x84>
 8009680:	4885      	ldr	r0, [pc, #532]	; (8009898 <_strtod_l+0x5a0>)
 8009682:	f003 f9ed 	bl	800ca60 <nan>
 8009686:	ed8d 0b04 	vstr	d0, [sp, #16]
 800968a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800968e:	e675      	b.n	800937c <_strtod_l+0x84>
 8009690:	9b07      	ldr	r3, [sp, #28]
 8009692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009694:	1af3      	subs	r3, r6, r3
 8009696:	2f00      	cmp	r7, #0
 8009698:	bf08      	it	eq
 800969a:	462f      	moveq	r7, r5
 800969c:	2d10      	cmp	r5, #16
 800969e:	9308      	str	r3, [sp, #32]
 80096a0:	46a8      	mov	r8, r5
 80096a2:	bfa8      	it	ge
 80096a4:	f04f 0810 	movge.w	r8, #16
 80096a8:	f7f6 ff3c 	bl	8000524 <__aeabi_ui2d>
 80096ac:	2d09      	cmp	r5, #9
 80096ae:	4682      	mov	sl, r0
 80096b0:	468b      	mov	fp, r1
 80096b2:	dd13      	ble.n	80096dc <_strtod_l+0x3e4>
 80096b4:	4b79      	ldr	r3, [pc, #484]	; (800989c <_strtod_l+0x5a4>)
 80096b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096be:	f7f6 ffab 	bl	8000618 <__aeabi_dmul>
 80096c2:	4682      	mov	sl, r0
 80096c4:	4648      	mov	r0, r9
 80096c6:	468b      	mov	fp, r1
 80096c8:	f7f6 ff2c 	bl	8000524 <__aeabi_ui2d>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4650      	mov	r0, sl
 80096d2:	4659      	mov	r1, fp
 80096d4:	f7f6 fdea 	bl	80002ac <__adddf3>
 80096d8:	4682      	mov	sl, r0
 80096da:	468b      	mov	fp, r1
 80096dc:	2d0f      	cmp	r5, #15
 80096de:	dc38      	bgt.n	8009752 <_strtod_l+0x45a>
 80096e0:	9b08      	ldr	r3, [sp, #32]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f43f ae4a 	beq.w	800937c <_strtod_l+0x84>
 80096e8:	dd24      	ble.n	8009734 <_strtod_l+0x43c>
 80096ea:	2b16      	cmp	r3, #22
 80096ec:	dc0b      	bgt.n	8009706 <_strtod_l+0x40e>
 80096ee:	4d6b      	ldr	r5, [pc, #428]	; (800989c <_strtod_l+0x5a4>)
 80096f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80096f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80096f8:	4652      	mov	r2, sl
 80096fa:	465b      	mov	r3, fp
 80096fc:	f7f6 ff8c 	bl	8000618 <__aeabi_dmul>
 8009700:	4682      	mov	sl, r0
 8009702:	468b      	mov	fp, r1
 8009704:	e63a      	b.n	800937c <_strtod_l+0x84>
 8009706:	9a08      	ldr	r2, [sp, #32]
 8009708:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800970c:	4293      	cmp	r3, r2
 800970e:	db20      	blt.n	8009752 <_strtod_l+0x45a>
 8009710:	4c62      	ldr	r4, [pc, #392]	; (800989c <_strtod_l+0x5a4>)
 8009712:	f1c5 050f 	rsb	r5, r5, #15
 8009716:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800971a:	4652      	mov	r2, sl
 800971c:	465b      	mov	r3, fp
 800971e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009722:	f7f6 ff79 	bl	8000618 <__aeabi_dmul>
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	1b5d      	subs	r5, r3, r5
 800972a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800972e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009732:	e7e3      	b.n	80096fc <_strtod_l+0x404>
 8009734:	9b08      	ldr	r3, [sp, #32]
 8009736:	3316      	adds	r3, #22
 8009738:	db0b      	blt.n	8009752 <_strtod_l+0x45a>
 800973a:	9b07      	ldr	r3, [sp, #28]
 800973c:	4a57      	ldr	r2, [pc, #348]	; (800989c <_strtod_l+0x5a4>)
 800973e:	1b9e      	subs	r6, r3, r6
 8009740:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009744:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009748:	4650      	mov	r0, sl
 800974a:	4659      	mov	r1, fp
 800974c:	f7f7 f88e 	bl	800086c <__aeabi_ddiv>
 8009750:	e7d6      	b.n	8009700 <_strtod_l+0x408>
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	eba5 0808 	sub.w	r8, r5, r8
 8009758:	4498      	add	r8, r3
 800975a:	f1b8 0f00 	cmp.w	r8, #0
 800975e:	dd71      	ble.n	8009844 <_strtod_l+0x54c>
 8009760:	f018 030f 	ands.w	r3, r8, #15
 8009764:	d00a      	beq.n	800977c <_strtod_l+0x484>
 8009766:	494d      	ldr	r1, [pc, #308]	; (800989c <_strtod_l+0x5a4>)
 8009768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800976c:	4652      	mov	r2, sl
 800976e:	465b      	mov	r3, fp
 8009770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009774:	f7f6 ff50 	bl	8000618 <__aeabi_dmul>
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	f038 080f 	bics.w	r8, r8, #15
 8009780:	d04d      	beq.n	800981e <_strtod_l+0x526>
 8009782:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009786:	dd22      	ble.n	80097ce <_strtod_l+0x4d6>
 8009788:	2500      	movs	r5, #0
 800978a:	462e      	mov	r6, r5
 800978c:	9509      	str	r5, [sp, #36]	; 0x24
 800978e:	9507      	str	r5, [sp, #28]
 8009790:	2322      	movs	r3, #34	; 0x22
 8009792:	f8df b110 	ldr.w	fp, [pc, #272]	; 80098a4 <_strtod_l+0x5ac>
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	f04f 0a00 	mov.w	sl, #0
 800979c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f43f adec 	beq.w	800937c <_strtod_l+0x84>
 80097a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80097a6:	4620      	mov	r0, r4
 80097a8:	f002 f970 	bl	800ba8c <_Bfree>
 80097ac:	9907      	ldr	r1, [sp, #28]
 80097ae:	4620      	mov	r0, r4
 80097b0:	f002 f96c 	bl	800ba8c <_Bfree>
 80097b4:	4631      	mov	r1, r6
 80097b6:	4620      	mov	r0, r4
 80097b8:	f002 f968 	bl	800ba8c <_Bfree>
 80097bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097be:	4620      	mov	r0, r4
 80097c0:	f002 f964 	bl	800ba8c <_Bfree>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4620      	mov	r0, r4
 80097c8:	f002 f960 	bl	800ba8c <_Bfree>
 80097cc:	e5d6      	b.n	800937c <_strtod_l+0x84>
 80097ce:	2300      	movs	r3, #0
 80097d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	4699      	mov	r9, r3
 80097da:	f1b8 0f01 	cmp.w	r8, #1
 80097de:	dc21      	bgt.n	8009824 <_strtod_l+0x52c>
 80097e0:	b10b      	cbz	r3, 80097e6 <_strtod_l+0x4ee>
 80097e2:	4682      	mov	sl, r0
 80097e4:	468b      	mov	fp, r1
 80097e6:	4b2e      	ldr	r3, [pc, #184]	; (80098a0 <_strtod_l+0x5a8>)
 80097e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80097ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80097f0:	4652      	mov	r2, sl
 80097f2:	465b      	mov	r3, fp
 80097f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80097f8:	f7f6 ff0e 	bl	8000618 <__aeabi_dmul>
 80097fc:	4b29      	ldr	r3, [pc, #164]	; (80098a4 <_strtod_l+0x5ac>)
 80097fe:	460a      	mov	r2, r1
 8009800:	400b      	ands	r3, r1
 8009802:	4929      	ldr	r1, [pc, #164]	; (80098a8 <_strtod_l+0x5b0>)
 8009804:	428b      	cmp	r3, r1
 8009806:	4682      	mov	sl, r0
 8009808:	d8be      	bhi.n	8009788 <_strtod_l+0x490>
 800980a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800980e:	428b      	cmp	r3, r1
 8009810:	bf86      	itte	hi
 8009812:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80098ac <_strtod_l+0x5b4>
 8009816:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800981a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800981e:	2300      	movs	r3, #0
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	e081      	b.n	8009928 <_strtod_l+0x630>
 8009824:	f018 0f01 	tst.w	r8, #1
 8009828:	d007      	beq.n	800983a <_strtod_l+0x542>
 800982a:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <_strtod_l+0x5a8>)
 800982c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f6 fef0 	bl	8000618 <__aeabi_dmul>
 8009838:	2301      	movs	r3, #1
 800983a:	f109 0901 	add.w	r9, r9, #1
 800983e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009842:	e7ca      	b.n	80097da <_strtod_l+0x4e2>
 8009844:	d0eb      	beq.n	800981e <_strtod_l+0x526>
 8009846:	f1c8 0800 	rsb	r8, r8, #0
 800984a:	f018 020f 	ands.w	r2, r8, #15
 800984e:	d00a      	beq.n	8009866 <_strtod_l+0x56e>
 8009850:	4b12      	ldr	r3, [pc, #72]	; (800989c <_strtod_l+0x5a4>)
 8009852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009856:	4650      	mov	r0, sl
 8009858:	4659      	mov	r1, fp
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f7 f805 	bl	800086c <__aeabi_ddiv>
 8009862:	4682      	mov	sl, r0
 8009864:	468b      	mov	fp, r1
 8009866:	ea5f 1828 	movs.w	r8, r8, asr #4
 800986a:	d0d8      	beq.n	800981e <_strtod_l+0x526>
 800986c:	f1b8 0f1f 	cmp.w	r8, #31
 8009870:	dd1e      	ble.n	80098b0 <_strtod_l+0x5b8>
 8009872:	2500      	movs	r5, #0
 8009874:	462e      	mov	r6, r5
 8009876:	9509      	str	r5, [sp, #36]	; 0x24
 8009878:	9507      	str	r5, [sp, #28]
 800987a:	2322      	movs	r3, #34	; 0x22
 800987c:	f04f 0a00 	mov.w	sl, #0
 8009880:	f04f 0b00 	mov.w	fp, #0
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	e789      	b.n	800979c <_strtod_l+0x4a4>
 8009888:	0800d1e5 	.word	0x0800d1e5
 800988c:	0800d228 	.word	0x0800d228
 8009890:	0800d1dd 	.word	0x0800d1dd
 8009894:	0800d36c 	.word	0x0800d36c
 8009898:	0800d688 	.word	0x0800d688
 800989c:	0800d568 	.word	0x0800d568
 80098a0:	0800d540 	.word	0x0800d540
 80098a4:	7ff00000 	.word	0x7ff00000
 80098a8:	7ca00000 	.word	0x7ca00000
 80098ac:	7fefffff 	.word	0x7fefffff
 80098b0:	f018 0310 	ands.w	r3, r8, #16
 80098b4:	bf18      	it	ne
 80098b6:	236a      	movne	r3, #106	; 0x6a
 80098b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009c70 <_strtod_l+0x978>
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	4650      	mov	r0, sl
 80098c0:	4659      	mov	r1, fp
 80098c2:	2300      	movs	r3, #0
 80098c4:	f018 0f01 	tst.w	r8, #1
 80098c8:	d004      	beq.n	80098d4 <_strtod_l+0x5dc>
 80098ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098ce:	f7f6 fea3 	bl	8000618 <__aeabi_dmul>
 80098d2:	2301      	movs	r3, #1
 80098d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80098d8:	f109 0908 	add.w	r9, r9, #8
 80098dc:	d1f2      	bne.n	80098c4 <_strtod_l+0x5cc>
 80098de:	b10b      	cbz	r3, 80098e4 <_strtod_l+0x5ec>
 80098e0:	4682      	mov	sl, r0
 80098e2:	468b      	mov	fp, r1
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	b1bb      	cbz	r3, 8009918 <_strtod_l+0x620>
 80098e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80098ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	4659      	mov	r1, fp
 80098f4:	dd10      	ble.n	8009918 <_strtod_l+0x620>
 80098f6:	2b1f      	cmp	r3, #31
 80098f8:	f340 8128 	ble.w	8009b4c <_strtod_l+0x854>
 80098fc:	2b34      	cmp	r3, #52	; 0x34
 80098fe:	bfde      	ittt	le
 8009900:	3b20      	suble	r3, #32
 8009902:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009906:	fa02 f303 	lslle.w	r3, r2, r3
 800990a:	f04f 0a00 	mov.w	sl, #0
 800990e:	bfcc      	ite	gt
 8009910:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009914:	ea03 0b01 	andle.w	fp, r3, r1
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	4650      	mov	r0, sl
 800991e:	4659      	mov	r1, fp
 8009920:	f7f7 f8e2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009924:	2800      	cmp	r0, #0
 8009926:	d1a4      	bne.n	8009872 <_strtod_l+0x57a>
 8009928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800992e:	462b      	mov	r3, r5
 8009930:	463a      	mov	r2, r7
 8009932:	4620      	mov	r0, r4
 8009934:	f002 f916 	bl	800bb64 <__s2b>
 8009938:	9009      	str	r0, [sp, #36]	; 0x24
 800993a:	2800      	cmp	r0, #0
 800993c:	f43f af24 	beq.w	8009788 <_strtod_l+0x490>
 8009940:	9b07      	ldr	r3, [sp, #28]
 8009942:	1b9e      	subs	r6, r3, r6
 8009944:	9b08      	ldr	r3, [sp, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	bfb4      	ite	lt
 800994a:	4633      	movlt	r3, r6
 800994c:	2300      	movge	r3, #0
 800994e:	9310      	str	r3, [sp, #64]	; 0x40
 8009950:	9b08      	ldr	r3, [sp, #32]
 8009952:	2500      	movs	r5, #0
 8009954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009958:	9318      	str	r3, [sp, #96]	; 0x60
 800995a:	462e      	mov	r6, r5
 800995c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995e:	4620      	mov	r0, r4
 8009960:	6859      	ldr	r1, [r3, #4]
 8009962:	f002 f853 	bl	800ba0c <_Balloc>
 8009966:	9007      	str	r0, [sp, #28]
 8009968:	2800      	cmp	r0, #0
 800996a:	f43f af11 	beq.w	8009790 <_strtod_l+0x498>
 800996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009970:	691a      	ldr	r2, [r3, #16]
 8009972:	3202      	adds	r2, #2
 8009974:	f103 010c 	add.w	r1, r3, #12
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	300c      	adds	r0, #12
 800997c:	f002 f838 	bl	800b9f0 <memcpy>
 8009980:	ec4b ab10 	vmov	d0, sl, fp
 8009984:	aa20      	add	r2, sp, #128	; 0x80
 8009986:	a91f      	add	r1, sp, #124	; 0x7c
 8009988:	4620      	mov	r0, r4
 800998a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800998e:	f002 fc25 	bl	800c1dc <__d2b>
 8009992:	901e      	str	r0, [sp, #120]	; 0x78
 8009994:	2800      	cmp	r0, #0
 8009996:	f43f aefb 	beq.w	8009790 <_strtod_l+0x498>
 800999a:	2101      	movs	r1, #1
 800999c:	4620      	mov	r0, r4
 800999e:	f002 f97b 	bl	800bc98 <__i2b>
 80099a2:	4606      	mov	r6, r0
 80099a4:	2800      	cmp	r0, #0
 80099a6:	f43f aef3 	beq.w	8009790 <_strtod_l+0x498>
 80099aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099ac:	9904      	ldr	r1, [sp, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bfab      	itete	ge
 80099b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80099b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80099b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80099b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80099bc:	bfac      	ite	ge
 80099be:	eb03 0902 	addge.w	r9, r3, r2
 80099c2:	1ad7      	sublt	r7, r2, r3
 80099c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80099c6:	eba3 0801 	sub.w	r8, r3, r1
 80099ca:	4490      	add	r8, r2
 80099cc:	4ba3      	ldr	r3, [pc, #652]	; (8009c5c <_strtod_l+0x964>)
 80099ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80099d2:	4598      	cmp	r8, r3
 80099d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099d8:	f280 80cc 	bge.w	8009b74 <_strtod_l+0x87c>
 80099dc:	eba3 0308 	sub.w	r3, r3, r8
 80099e0:	2b1f      	cmp	r3, #31
 80099e2:	eba2 0203 	sub.w	r2, r2, r3
 80099e6:	f04f 0101 	mov.w	r1, #1
 80099ea:	f300 80b6 	bgt.w	8009b5a <_strtod_l+0x862>
 80099ee:	fa01 f303 	lsl.w	r3, r1, r3
 80099f2:	9311      	str	r3, [sp, #68]	; 0x44
 80099f4:	2300      	movs	r3, #0
 80099f6:	930c      	str	r3, [sp, #48]	; 0x30
 80099f8:	eb09 0802 	add.w	r8, r9, r2
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	45c1      	cmp	r9, r8
 8009a00:	4417      	add	r7, r2
 8009a02:	441f      	add	r7, r3
 8009a04:	464b      	mov	r3, r9
 8009a06:	bfa8      	it	ge
 8009a08:	4643      	movge	r3, r8
 8009a0a:	42bb      	cmp	r3, r7
 8009a0c:	bfa8      	it	ge
 8009a0e:	463b      	movge	r3, r7
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bfc2      	ittt	gt
 8009a14:	eba8 0803 	subgt.w	r8, r8, r3
 8009a18:	1aff      	subgt	r7, r7, r3
 8009a1a:	eba9 0903 	subgt.w	r9, r9, r3
 8009a1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dd17      	ble.n	8009a54 <_strtod_l+0x75c>
 8009a24:	4631      	mov	r1, r6
 8009a26:	461a      	mov	r2, r3
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f002 f9f1 	bl	800be10 <__pow5mult>
 8009a2e:	4606      	mov	r6, r0
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f43f aead 	beq.w	8009790 <_strtod_l+0x498>
 8009a36:	4601      	mov	r1, r0
 8009a38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f002 f942 	bl	800bcc4 <__multiply>
 8009a40:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f43f aea4 	beq.w	8009790 <_strtod_l+0x498>
 8009a48:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f002 f81e 	bl	800ba8c <_Bfree>
 8009a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a52:	931e      	str	r3, [sp, #120]	; 0x78
 8009a54:	f1b8 0f00 	cmp.w	r8, #0
 8009a58:	f300 8091 	bgt.w	8009b7e <_strtod_l+0x886>
 8009a5c:	9b08      	ldr	r3, [sp, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd08      	ble.n	8009a74 <_strtod_l+0x77c>
 8009a62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a64:	9907      	ldr	r1, [sp, #28]
 8009a66:	4620      	mov	r0, r4
 8009a68:	f002 f9d2 	bl	800be10 <__pow5mult>
 8009a6c:	9007      	str	r0, [sp, #28]
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f43f ae8e 	beq.w	8009790 <_strtod_l+0x498>
 8009a74:	2f00      	cmp	r7, #0
 8009a76:	dd08      	ble.n	8009a8a <_strtod_l+0x792>
 8009a78:	9907      	ldr	r1, [sp, #28]
 8009a7a:	463a      	mov	r2, r7
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f002 fa21 	bl	800bec4 <__lshift>
 8009a82:	9007      	str	r0, [sp, #28]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f43f ae83 	beq.w	8009790 <_strtod_l+0x498>
 8009a8a:	f1b9 0f00 	cmp.w	r9, #0
 8009a8e:	dd08      	ble.n	8009aa2 <_strtod_l+0x7aa>
 8009a90:	4631      	mov	r1, r6
 8009a92:	464a      	mov	r2, r9
 8009a94:	4620      	mov	r0, r4
 8009a96:	f002 fa15 	bl	800bec4 <__lshift>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f43f ae77 	beq.w	8009790 <_strtod_l+0x498>
 8009aa2:	9a07      	ldr	r2, [sp, #28]
 8009aa4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f002 fa94 	bl	800bfd4 <__mdiff>
 8009aac:	4605      	mov	r5, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f43f ae6e 	beq.w	8009790 <_strtod_l+0x498>
 8009ab4:	68c3      	ldr	r3, [r0, #12]
 8009ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60c3      	str	r3, [r0, #12]
 8009abc:	4631      	mov	r1, r6
 8009abe:	f002 fa6d 	bl	800bf9c <__mcmp>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	da65      	bge.n	8009b92 <_strtod_l+0x89a>
 8009ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ac8:	ea53 030a 	orrs.w	r3, r3, sl
 8009acc:	f040 8087 	bne.w	8009bde <_strtod_l+0x8e6>
 8009ad0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f040 8082 	bne.w	8009bde <_strtod_l+0x8e6>
 8009ada:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ade:	0d1b      	lsrs	r3, r3, #20
 8009ae0:	051b      	lsls	r3, r3, #20
 8009ae2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ae6:	d97a      	bls.n	8009bde <_strtod_l+0x8e6>
 8009ae8:	696b      	ldr	r3, [r5, #20]
 8009aea:	b913      	cbnz	r3, 8009af2 <_strtod_l+0x7fa>
 8009aec:	692b      	ldr	r3, [r5, #16]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	dd75      	ble.n	8009bde <_strtod_l+0x8e6>
 8009af2:	4629      	mov	r1, r5
 8009af4:	2201      	movs	r2, #1
 8009af6:	4620      	mov	r0, r4
 8009af8:	f002 f9e4 	bl	800bec4 <__lshift>
 8009afc:	4631      	mov	r1, r6
 8009afe:	4605      	mov	r5, r0
 8009b00:	f002 fa4c 	bl	800bf9c <__mcmp>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	dd6a      	ble.n	8009bde <_strtod_l+0x8e6>
 8009b08:	9904      	ldr	r1, [sp, #16]
 8009b0a:	4a55      	ldr	r2, [pc, #340]	; (8009c60 <_strtod_l+0x968>)
 8009b0c:	465b      	mov	r3, fp
 8009b0e:	2900      	cmp	r1, #0
 8009b10:	f000 8085 	beq.w	8009c1e <_strtod_l+0x926>
 8009b14:	ea02 010b 	and.w	r1, r2, fp
 8009b18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b1c:	dc7f      	bgt.n	8009c1e <_strtod_l+0x926>
 8009b1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b22:	f77f aeaa 	ble.w	800987a <_strtod_l+0x582>
 8009b26:	4a4f      	ldr	r2, [pc, #316]	; (8009c64 <_strtod_l+0x96c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009b2e:	4650      	mov	r0, sl
 8009b30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009b34:	4659      	mov	r1, fp
 8009b36:	f7f6 fd6f 	bl	8000618 <__aeabi_dmul>
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4303      	orrs	r3, r0
 8009b3e:	bf08      	it	eq
 8009b40:	2322      	moveq	r3, #34	; 0x22
 8009b42:	4682      	mov	sl, r0
 8009b44:	468b      	mov	fp, r1
 8009b46:	bf08      	it	eq
 8009b48:	6023      	streq	r3, [r4, #0]
 8009b4a:	e62b      	b.n	80097a4 <_strtod_l+0x4ac>
 8009b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b50:	fa02 f303 	lsl.w	r3, r2, r3
 8009b54:	ea03 0a0a 	and.w	sl, r3, sl
 8009b58:	e6de      	b.n	8009918 <_strtod_l+0x620>
 8009b5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b6a:	fa01 f308 	lsl.w	r3, r1, r8
 8009b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b70:	9111      	str	r1, [sp, #68]	; 0x44
 8009b72:	e741      	b.n	80099f8 <_strtod_l+0x700>
 8009b74:	2300      	movs	r3, #0
 8009b76:	930c      	str	r3, [sp, #48]	; 0x30
 8009b78:	2301      	movs	r3, #1
 8009b7a:	9311      	str	r3, [sp, #68]	; 0x44
 8009b7c:	e73c      	b.n	80099f8 <_strtod_l+0x700>
 8009b7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b80:	4642      	mov	r2, r8
 8009b82:	4620      	mov	r0, r4
 8009b84:	f002 f99e 	bl	800bec4 <__lshift>
 8009b88:	901e      	str	r0, [sp, #120]	; 0x78
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f47f af66 	bne.w	8009a5c <_strtod_l+0x764>
 8009b90:	e5fe      	b.n	8009790 <_strtod_l+0x498>
 8009b92:	465f      	mov	r7, fp
 8009b94:	d16e      	bne.n	8009c74 <_strtod_l+0x97c>
 8009b96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b9c:	b342      	cbz	r2, 8009bf0 <_strtod_l+0x8f8>
 8009b9e:	4a32      	ldr	r2, [pc, #200]	; (8009c68 <_strtod_l+0x970>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d128      	bne.n	8009bf6 <_strtod_l+0x8fe>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	b1eb      	cbz	r3, 8009be6 <_strtod_l+0x8ee>
 8009baa:	4a2d      	ldr	r2, [pc, #180]	; (8009c60 <_strtod_l+0x968>)
 8009bac:	403a      	ands	r2, r7
 8009bae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009bb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bb6:	d819      	bhi.n	8009bec <_strtod_l+0x8f4>
 8009bb8:	0d12      	lsrs	r2, r2, #20
 8009bba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc2:	4298      	cmp	r0, r3
 8009bc4:	d117      	bne.n	8009bf6 <_strtod_l+0x8fe>
 8009bc6:	4b29      	ldr	r3, [pc, #164]	; (8009c6c <_strtod_l+0x974>)
 8009bc8:	429f      	cmp	r7, r3
 8009bca:	d102      	bne.n	8009bd2 <_strtod_l+0x8da>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f addf 	beq.w	8009790 <_strtod_l+0x498>
 8009bd2:	4b23      	ldr	r3, [pc, #140]	; (8009c60 <_strtod_l+0x968>)
 8009bd4:	403b      	ands	r3, r7
 8009bd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009bda:	f04f 0a00 	mov.w	sl, #0
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1a0      	bne.n	8009b26 <_strtod_l+0x82e>
 8009be4:	e5de      	b.n	80097a4 <_strtod_l+0x4ac>
 8009be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bea:	e7ea      	b.n	8009bc2 <_strtod_l+0x8ca>
 8009bec:	460b      	mov	r3, r1
 8009bee:	e7e8      	b.n	8009bc2 <_strtod_l+0x8ca>
 8009bf0:	ea53 030a 	orrs.w	r3, r3, sl
 8009bf4:	d088      	beq.n	8009b08 <_strtod_l+0x810>
 8009bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bf8:	b1db      	cbz	r3, 8009c32 <_strtod_l+0x93a>
 8009bfa:	423b      	tst	r3, r7
 8009bfc:	d0ef      	beq.n	8009bde <_strtod_l+0x8e6>
 8009bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c00:	9a04      	ldr	r2, [sp, #16]
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	b1c3      	cbz	r3, 8009c3a <_strtod_l+0x942>
 8009c08:	f7ff fb5a 	bl	80092c0 <sulp>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c14:	f7f6 fb4a 	bl	80002ac <__adddf3>
 8009c18:	4682      	mov	sl, r0
 8009c1a:	468b      	mov	fp, r1
 8009c1c:	e7df      	b.n	8009bde <_strtod_l+0x8e6>
 8009c1e:	4013      	ands	r3, r2
 8009c20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009c30:	e7d5      	b.n	8009bde <_strtod_l+0x8e6>
 8009c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c34:	ea13 0f0a 	tst.w	r3, sl
 8009c38:	e7e0      	b.n	8009bfc <_strtod_l+0x904>
 8009c3a:	f7ff fb41 	bl	80092c0 <sulp>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c46:	f7f6 fb2f 	bl	80002a8 <__aeabi_dsub>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4682      	mov	sl, r0
 8009c50:	468b      	mov	fp, r1
 8009c52:	f7f6 ff49 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0c1      	beq.n	8009bde <_strtod_l+0x8e6>
 8009c5a:	e60e      	b.n	800987a <_strtod_l+0x582>
 8009c5c:	fffffc02 	.word	0xfffffc02
 8009c60:	7ff00000 	.word	0x7ff00000
 8009c64:	39500000 	.word	0x39500000
 8009c68:	000fffff 	.word	0x000fffff
 8009c6c:	7fefffff 	.word	0x7fefffff
 8009c70:	0800d240 	.word	0x0800d240
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	f002 fb0c 	bl	800c294 <__ratio>
 8009c7c:	ec59 8b10 	vmov	r8, r9, d0
 8009c80:	ee10 0a10 	vmov	r0, s0
 8009c84:	2200      	movs	r2, #0
 8009c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	f7f6 ff40 	bl	8000b10 <__aeabi_dcmple>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d07c      	beq.n	8009d8e <_strtod_l+0xa96>
 8009c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d04c      	beq.n	8009d34 <_strtod_l+0xa3c>
 8009c9a:	4b95      	ldr	r3, [pc, #596]	; (8009ef0 <_strtod_l+0xbf8>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009ca2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009ef0 <_strtod_l+0xbf8>
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	4b92      	ldr	r3, [pc, #584]	; (8009ef4 <_strtod_l+0xbfc>)
 8009cac:	403b      	ands	r3, r7
 8009cae:	9311      	str	r3, [sp, #68]	; 0x44
 8009cb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009cb2:	4b91      	ldr	r3, [pc, #580]	; (8009ef8 <_strtod_l+0xc00>)
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	f040 80b2 	bne.w	8009e1e <_strtod_l+0xb26>
 8009cba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cc2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009cc6:	ec4b ab10 	vmov	d0, sl, fp
 8009cca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009cce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cd2:	f002 fa07 	bl	800c0e4 <__ulp>
 8009cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cda:	ec53 2b10 	vmov	r2, r3, d0
 8009cde:	f7f6 fc9b 	bl	8000618 <__aeabi_dmul>
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	465b      	mov	r3, fp
 8009ce6:	f7f6 fae1 	bl	80002ac <__adddf3>
 8009cea:	460b      	mov	r3, r1
 8009cec:	4981      	ldr	r1, [pc, #516]	; (8009ef4 <_strtod_l+0xbfc>)
 8009cee:	4a83      	ldr	r2, [pc, #524]	; (8009efc <_strtod_l+0xc04>)
 8009cf0:	4019      	ands	r1, r3
 8009cf2:	4291      	cmp	r1, r2
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	d95e      	bls.n	8009db6 <_strtod_l+0xabe>
 8009cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cfa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d103      	bne.n	8009d0a <_strtod_l+0xa12>
 8009d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d04:	3301      	adds	r3, #1
 8009d06:	f43f ad43 	beq.w	8009790 <_strtod_l+0x498>
 8009d0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009f08 <_strtod_l+0xc10>
 8009d0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009d12:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009d14:	4620      	mov	r0, r4
 8009d16:	f001 feb9 	bl	800ba8c <_Bfree>
 8009d1a:	9907      	ldr	r1, [sp, #28]
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f001 feb5 	bl	800ba8c <_Bfree>
 8009d22:	4631      	mov	r1, r6
 8009d24:	4620      	mov	r0, r4
 8009d26:	f001 feb1 	bl	800ba8c <_Bfree>
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f001 fead 	bl	800ba8c <_Bfree>
 8009d32:	e613      	b.n	800995c <_strtod_l+0x664>
 8009d34:	f1ba 0f00 	cmp.w	sl, #0
 8009d38:	d11b      	bne.n	8009d72 <_strtod_l+0xa7a>
 8009d3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d3e:	b9f3      	cbnz	r3, 8009d7e <_strtod_l+0xa86>
 8009d40:	4b6b      	ldr	r3, [pc, #428]	; (8009ef0 <_strtod_l+0xbf8>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f7f6 fed8 	bl	8000afc <__aeabi_dcmplt>
 8009d4c:	b9d0      	cbnz	r0, 8009d84 <_strtod_l+0xa8c>
 8009d4e:	4640      	mov	r0, r8
 8009d50:	4649      	mov	r1, r9
 8009d52:	4b6b      	ldr	r3, [pc, #428]	; (8009f00 <_strtod_l+0xc08>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	f7f6 fc5f 	bl	8000618 <__aeabi_dmul>
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	4689      	mov	r9, r1
 8009d5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009d66:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009d6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d70:	e79b      	b.n	8009caa <_strtod_l+0x9b2>
 8009d72:	f1ba 0f01 	cmp.w	sl, #1
 8009d76:	d102      	bne.n	8009d7e <_strtod_l+0xa86>
 8009d78:	2f00      	cmp	r7, #0
 8009d7a:	f43f ad7e 	beq.w	800987a <_strtod_l+0x582>
 8009d7e:	4b61      	ldr	r3, [pc, #388]	; (8009f04 <_strtod_l+0xc0c>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	e78c      	b.n	8009c9e <_strtod_l+0x9a6>
 8009d84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f00 <_strtod_l+0xc08>
 8009d88:	f04f 0800 	mov.w	r8, #0
 8009d8c:	e7e7      	b.n	8009d5e <_strtod_l+0xa66>
 8009d8e:	4b5c      	ldr	r3, [pc, #368]	; (8009f00 <_strtod_l+0xc08>)
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	2200      	movs	r2, #0
 8009d96:	f7f6 fc3f 	bl	8000618 <__aeabi_dmul>
 8009d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	b933      	cbnz	r3, 8009db0 <_strtod_l+0xab8>
 8009da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009da6:	9012      	str	r0, [sp, #72]	; 0x48
 8009da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009daa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009dae:	e7dd      	b.n	8009d6c <_strtod_l+0xa74>
 8009db0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009db4:	e7f9      	b.n	8009daa <_strtod_l+0xab2>
 8009db6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1a8      	bne.n	8009d12 <_strtod_l+0xa1a>
 8009dc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009dc6:	0d1b      	lsrs	r3, r3, #20
 8009dc8:	051b      	lsls	r3, r3, #20
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d1a1      	bne.n	8009d12 <_strtod_l+0xa1a>
 8009dce:	4640      	mov	r0, r8
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	f7f6 ff81 	bl	8000cd8 <__aeabi_d2lz>
 8009dd6:	f7f6 fbf1 	bl	80005bc <__aeabi_l2d>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4640      	mov	r0, r8
 8009de0:	4649      	mov	r1, r9
 8009de2:	f7f6 fa61 	bl	80002a8 <__aeabi_dsub>
 8009de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dec:	ea43 030a 	orr.w	r3, r3, sl
 8009df0:	4313      	orrs	r3, r2
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	d053      	beq.n	8009ea0 <_strtod_l+0xba8>
 8009df8:	a335      	add	r3, pc, #212	; (adr r3, 8009ed0 <_strtod_l+0xbd8>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 fe7d 	bl	8000afc <__aeabi_dcmplt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	f47f acce 	bne.w	80097a4 <_strtod_l+0x4ac>
 8009e08:	a333      	add	r3, pc, #204	; (adr r3, 8009ed8 <_strtod_l+0xbe0>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	f7f6 fe91 	bl	8000b38 <__aeabi_dcmpgt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f af7b 	beq.w	8009d12 <_strtod_l+0xa1a>
 8009e1c:	e4c2      	b.n	80097a4 <_strtod_l+0x4ac>
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	b333      	cbz	r3, 8009e70 <_strtod_l+0xb78>
 8009e22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e28:	d822      	bhi.n	8009e70 <_strtod_l+0xb78>
 8009e2a:	a32d      	add	r3, pc, #180	; (adr r3, 8009ee0 <_strtod_l+0xbe8>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fe6c 	bl	8000b10 <__aeabi_dcmple>
 8009e38:	b1a0      	cbz	r0, 8009e64 <_strtod_l+0xb6c>
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	f7f6 fec3 	bl	8000bc8 <__aeabi_d2uiz>
 8009e42:	2801      	cmp	r0, #1
 8009e44:	bf38      	it	cc
 8009e46:	2001      	movcc	r0, #1
 8009e48:	f7f6 fb6c 	bl	8000524 <__aeabi_ui2d>
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e4e:	4680      	mov	r8, r0
 8009e50:	4689      	mov	r9, r1
 8009e52:	bb13      	cbnz	r3, 8009e9a <_strtod_l+0xba2>
 8009e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e58:	9014      	str	r0, [sp, #80]	; 0x50
 8009e5a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8009e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009e78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e7c:	f002 f932 	bl	800c0e4 <__ulp>
 8009e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e84:	ec53 2b10 	vmov	r2, r3, d0
 8009e88:	f7f6 fbc6 	bl	8000618 <__aeabi_dmul>
 8009e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e90:	f7f6 fa0c 	bl	80002ac <__adddf3>
 8009e94:	4682      	mov	sl, r0
 8009e96:	468b      	mov	fp, r1
 8009e98:	e78f      	b.n	8009dba <_strtod_l+0xac2>
 8009e9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009e9e:	e7dd      	b.n	8009e5c <_strtod_l+0xb64>
 8009ea0:	a311      	add	r3, pc, #68	; (adr r3, 8009ee8 <_strtod_l+0xbf0>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 fe29 	bl	8000afc <__aeabi_dcmplt>
 8009eaa:	e7b4      	b.n	8009e16 <_strtod_l+0xb1e>
 8009eac:	2300      	movs	r3, #0
 8009eae:	930e      	str	r3, [sp, #56]	; 0x38
 8009eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009eb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	f7ff ba65 	b.w	8009384 <_strtod_l+0x8c>
 8009eba:	2b65      	cmp	r3, #101	; 0x65
 8009ebc:	f43f ab5d 	beq.w	800957a <_strtod_l+0x282>
 8009ec0:	2b45      	cmp	r3, #69	; 0x45
 8009ec2:	f43f ab5a 	beq.w	800957a <_strtod_l+0x282>
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f7ff bb92 	b.w	80095f0 <_strtod_l+0x2f8>
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	94a03595 	.word	0x94a03595
 8009ed4:	3fdfffff 	.word	0x3fdfffff
 8009ed8:	35afe535 	.word	0x35afe535
 8009edc:	3fe00000 	.word	0x3fe00000
 8009ee0:	ffc00000 	.word	0xffc00000
 8009ee4:	41dfffff 	.word	0x41dfffff
 8009ee8:	94a03595 	.word	0x94a03595
 8009eec:	3fcfffff 	.word	0x3fcfffff
 8009ef0:	3ff00000 	.word	0x3ff00000
 8009ef4:	7ff00000 	.word	0x7ff00000
 8009ef8:	7fe00000 	.word	0x7fe00000
 8009efc:	7c9fffff 	.word	0x7c9fffff
 8009f00:	3fe00000 	.word	0x3fe00000
 8009f04:	bff00000 	.word	0xbff00000
 8009f08:	7fefffff 	.word	0x7fefffff

08009f0c <_strtod_r>:
 8009f0c:	4b01      	ldr	r3, [pc, #4]	; (8009f14 <_strtod_r+0x8>)
 8009f0e:	f7ff b9f3 	b.w	80092f8 <_strtod_l>
 8009f12:	bf00      	nop
 8009f14:	2000007c 	.word	0x2000007c

08009f18 <_strtol_l.isra.0>:
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1e:	d001      	beq.n	8009f24 <_strtol_l.isra.0+0xc>
 8009f20:	2b24      	cmp	r3, #36	; 0x24
 8009f22:	d906      	bls.n	8009f32 <_strtol_l.isra.0+0x1a>
 8009f24:	f7fe fa6c 	bl	8008400 <__errno>
 8009f28:	2316      	movs	r3, #22
 8009f2a:	6003      	str	r3, [r0, #0]
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f32:	4f3a      	ldr	r7, [pc, #232]	; (800a01c <_strtol_l.isra.0+0x104>)
 8009f34:	468e      	mov	lr, r1
 8009f36:	4676      	mov	r6, lr
 8009f38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009f3c:	5de5      	ldrb	r5, [r4, r7]
 8009f3e:	f015 0508 	ands.w	r5, r5, #8
 8009f42:	d1f8      	bne.n	8009f36 <_strtol_l.isra.0+0x1e>
 8009f44:	2c2d      	cmp	r4, #45	; 0x2d
 8009f46:	d134      	bne.n	8009fb2 <_strtol_l.isra.0+0x9a>
 8009f48:	f89e 4000 	ldrb.w	r4, [lr]
 8009f4c:	f04f 0801 	mov.w	r8, #1
 8009f50:	f106 0e02 	add.w	lr, r6, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d05c      	beq.n	800a012 <_strtol_l.isra.0+0xfa>
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	d10c      	bne.n	8009f76 <_strtol_l.isra.0+0x5e>
 8009f5c:	2c30      	cmp	r4, #48	; 0x30
 8009f5e:	d10a      	bne.n	8009f76 <_strtol_l.isra.0+0x5e>
 8009f60:	f89e 4000 	ldrb.w	r4, [lr]
 8009f64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f68:	2c58      	cmp	r4, #88	; 0x58
 8009f6a:	d14d      	bne.n	800a008 <_strtol_l.isra.0+0xf0>
 8009f6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009f70:	2310      	movs	r3, #16
 8009f72:	f10e 0e02 	add.w	lr, lr, #2
 8009f76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009f7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009f7e:	2600      	movs	r6, #0
 8009f80:	fbbc f9f3 	udiv	r9, ip, r3
 8009f84:	4635      	mov	r5, r6
 8009f86:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009f8e:	2f09      	cmp	r7, #9
 8009f90:	d818      	bhi.n	8009fc4 <_strtol_l.isra.0+0xac>
 8009f92:	463c      	mov	r4, r7
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	dd24      	ble.n	8009fe2 <_strtol_l.isra.0+0xca>
 8009f98:	2e00      	cmp	r6, #0
 8009f9a:	db1f      	blt.n	8009fdc <_strtol_l.isra.0+0xc4>
 8009f9c:	45a9      	cmp	r9, r5
 8009f9e:	d31d      	bcc.n	8009fdc <_strtol_l.isra.0+0xc4>
 8009fa0:	d101      	bne.n	8009fa6 <_strtol_l.isra.0+0x8e>
 8009fa2:	45a2      	cmp	sl, r4
 8009fa4:	db1a      	blt.n	8009fdc <_strtol_l.isra.0+0xc4>
 8009fa6:	fb05 4503 	mla	r5, r5, r3, r4
 8009faa:	2601      	movs	r6, #1
 8009fac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009fb0:	e7eb      	b.n	8009f8a <_strtol_l.isra.0+0x72>
 8009fb2:	2c2b      	cmp	r4, #43	; 0x2b
 8009fb4:	bf08      	it	eq
 8009fb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009fba:	46a8      	mov	r8, r5
 8009fbc:	bf08      	it	eq
 8009fbe:	f106 0e02 	addeq.w	lr, r6, #2
 8009fc2:	e7c7      	b.n	8009f54 <_strtol_l.isra.0+0x3c>
 8009fc4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009fc8:	2f19      	cmp	r7, #25
 8009fca:	d801      	bhi.n	8009fd0 <_strtol_l.isra.0+0xb8>
 8009fcc:	3c37      	subs	r4, #55	; 0x37
 8009fce:	e7e1      	b.n	8009f94 <_strtol_l.isra.0+0x7c>
 8009fd0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009fd4:	2f19      	cmp	r7, #25
 8009fd6:	d804      	bhi.n	8009fe2 <_strtol_l.isra.0+0xca>
 8009fd8:	3c57      	subs	r4, #87	; 0x57
 8009fda:	e7db      	b.n	8009f94 <_strtol_l.isra.0+0x7c>
 8009fdc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009fe0:	e7e4      	b.n	8009fac <_strtol_l.isra.0+0x94>
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	da05      	bge.n	8009ff2 <_strtol_l.isra.0+0xda>
 8009fe6:	2322      	movs	r3, #34	; 0x22
 8009fe8:	6003      	str	r3, [r0, #0]
 8009fea:	4665      	mov	r5, ip
 8009fec:	b942      	cbnz	r2, 800a000 <_strtol_l.isra.0+0xe8>
 8009fee:	4628      	mov	r0, r5
 8009ff0:	e79d      	b.n	8009f2e <_strtol_l.isra.0+0x16>
 8009ff2:	f1b8 0f00 	cmp.w	r8, #0
 8009ff6:	d000      	beq.n	8009ffa <_strtol_l.isra.0+0xe2>
 8009ff8:	426d      	negs	r5, r5
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	d0f7      	beq.n	8009fee <_strtol_l.isra.0+0xd6>
 8009ffe:	b10e      	cbz	r6, 800a004 <_strtol_l.isra.0+0xec>
 800a000:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	e7f2      	b.n	8009fee <_strtol_l.isra.0+0xd6>
 800a008:	2430      	movs	r4, #48	; 0x30
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1b3      	bne.n	8009f76 <_strtol_l.isra.0+0x5e>
 800a00e:	2308      	movs	r3, #8
 800a010:	e7b1      	b.n	8009f76 <_strtol_l.isra.0+0x5e>
 800a012:	2c30      	cmp	r4, #48	; 0x30
 800a014:	d0a4      	beq.n	8009f60 <_strtol_l.isra.0+0x48>
 800a016:	230a      	movs	r3, #10
 800a018:	e7ad      	b.n	8009f76 <_strtol_l.isra.0+0x5e>
 800a01a:	bf00      	nop
 800a01c:	0800d269 	.word	0x0800d269

0800a020 <_strtol_r>:
 800a020:	f7ff bf7a 	b.w	8009f18 <_strtol_l.isra.0>

0800a024 <__swbuf_r>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	460e      	mov	r6, r1
 800a028:	4614      	mov	r4, r2
 800a02a:	4605      	mov	r5, r0
 800a02c:	b118      	cbz	r0, 800a036 <__swbuf_r+0x12>
 800a02e:	6983      	ldr	r3, [r0, #24]
 800a030:	b90b      	cbnz	r3, 800a036 <__swbuf_r+0x12>
 800a032:	f001 f84b 	bl	800b0cc <__sinit>
 800a036:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <__swbuf_r+0x98>)
 800a038:	429c      	cmp	r4, r3
 800a03a:	d12b      	bne.n	800a094 <__swbuf_r+0x70>
 800a03c:	686c      	ldr	r4, [r5, #4]
 800a03e:	69a3      	ldr	r3, [r4, #24]
 800a040:	60a3      	str	r3, [r4, #8]
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	071a      	lsls	r2, r3, #28
 800a046:	d52f      	bpl.n	800a0a8 <__swbuf_r+0x84>
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	b36b      	cbz	r3, 800a0a8 <__swbuf_r+0x84>
 800a04c:	6923      	ldr	r3, [r4, #16]
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	1ac0      	subs	r0, r0, r3
 800a052:	6963      	ldr	r3, [r4, #20]
 800a054:	b2f6      	uxtb	r6, r6
 800a056:	4283      	cmp	r3, r0
 800a058:	4637      	mov	r7, r6
 800a05a:	dc04      	bgt.n	800a066 <__swbuf_r+0x42>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 ffa0 	bl	800afa4 <_fflush_r>
 800a064:	bb30      	cbnz	r0, 800a0b4 <__swbuf_r+0x90>
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	3b01      	subs	r3, #1
 800a06a:	60a3      	str	r3, [r4, #8]
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	6022      	str	r2, [r4, #0]
 800a072:	701e      	strb	r6, [r3, #0]
 800a074:	6963      	ldr	r3, [r4, #20]
 800a076:	3001      	adds	r0, #1
 800a078:	4283      	cmp	r3, r0
 800a07a:	d004      	beq.n	800a086 <__swbuf_r+0x62>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	07db      	lsls	r3, r3, #31
 800a080:	d506      	bpl.n	800a090 <__swbuf_r+0x6c>
 800a082:	2e0a      	cmp	r6, #10
 800a084:	d104      	bne.n	800a090 <__swbuf_r+0x6c>
 800a086:	4621      	mov	r1, r4
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 ff8b 	bl	800afa4 <_fflush_r>
 800a08e:	b988      	cbnz	r0, 800a0b4 <__swbuf_r+0x90>
 800a090:	4638      	mov	r0, r7
 800a092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a094:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <__swbuf_r+0x9c>)
 800a096:	429c      	cmp	r4, r3
 800a098:	d101      	bne.n	800a09e <__swbuf_r+0x7a>
 800a09a:	68ac      	ldr	r4, [r5, #8]
 800a09c:	e7cf      	b.n	800a03e <__swbuf_r+0x1a>
 800a09e:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <__swbuf_r+0xa0>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	bf08      	it	eq
 800a0a4:	68ec      	ldreq	r4, [r5, #12]
 800a0a6:	e7ca      	b.n	800a03e <__swbuf_r+0x1a>
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f000 f80c 	bl	800a0c8 <__swsetup_r>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d0cb      	beq.n	800a04c <__swbuf_r+0x28>
 800a0b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a0b8:	e7ea      	b.n	800a090 <__swbuf_r+0x6c>
 800a0ba:	bf00      	nop
 800a0bc:	0800d420 	.word	0x0800d420
 800a0c0:	0800d440 	.word	0x0800d440
 800a0c4:	0800d400 	.word	0x0800d400

0800a0c8 <__swsetup_r>:
 800a0c8:	4b32      	ldr	r3, [pc, #200]	; (800a194 <__swsetup_r+0xcc>)
 800a0ca:	b570      	push	{r4, r5, r6, lr}
 800a0cc:	681d      	ldr	r5, [r3, #0]
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	b125      	cbz	r5, 800a0de <__swsetup_r+0x16>
 800a0d4:	69ab      	ldr	r3, [r5, #24]
 800a0d6:	b913      	cbnz	r3, 800a0de <__swsetup_r+0x16>
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 fff7 	bl	800b0cc <__sinit>
 800a0de:	4b2e      	ldr	r3, [pc, #184]	; (800a198 <__swsetup_r+0xd0>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d10f      	bne.n	800a104 <__swsetup_r+0x3c>
 800a0e4:	686c      	ldr	r4, [r5, #4]
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0ec:	0719      	lsls	r1, r3, #28
 800a0ee:	d42c      	bmi.n	800a14a <__swsetup_r+0x82>
 800a0f0:	06dd      	lsls	r5, r3, #27
 800a0f2:	d411      	bmi.n	800a118 <__swsetup_r+0x50>
 800a0f4:	2309      	movs	r3, #9
 800a0f6:	6033      	str	r3, [r6, #0]
 800a0f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a102:	e03e      	b.n	800a182 <__swsetup_r+0xba>
 800a104:	4b25      	ldr	r3, [pc, #148]	; (800a19c <__swsetup_r+0xd4>)
 800a106:	429c      	cmp	r4, r3
 800a108:	d101      	bne.n	800a10e <__swsetup_r+0x46>
 800a10a:	68ac      	ldr	r4, [r5, #8]
 800a10c:	e7eb      	b.n	800a0e6 <__swsetup_r+0x1e>
 800a10e:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <__swsetup_r+0xd8>)
 800a110:	429c      	cmp	r4, r3
 800a112:	bf08      	it	eq
 800a114:	68ec      	ldreq	r4, [r5, #12]
 800a116:	e7e6      	b.n	800a0e6 <__swsetup_r+0x1e>
 800a118:	0758      	lsls	r0, r3, #29
 800a11a:	d512      	bpl.n	800a142 <__swsetup_r+0x7a>
 800a11c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11e:	b141      	cbz	r1, 800a132 <__swsetup_r+0x6a>
 800a120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <__swsetup_r+0x66>
 800a128:	4630      	mov	r0, r6
 800a12a:	f002 f939 	bl	800c3a0 <_free_r>
 800a12e:	2300      	movs	r3, #0
 800a130:	6363      	str	r3, [r4, #52]	; 0x34
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a138:	81a3      	strh	r3, [r4, #12]
 800a13a:	2300      	movs	r3, #0
 800a13c:	6063      	str	r3, [r4, #4]
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f043 0308 	orr.w	r3, r3, #8
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	b94b      	cbnz	r3, 800a162 <__swsetup_r+0x9a>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a158:	d003      	beq.n	800a162 <__swsetup_r+0x9a>
 800a15a:	4621      	mov	r1, r4
 800a15c:	4630      	mov	r0, r6
 800a15e:	f001 fbed 	bl	800b93c <__smakebuf_r>
 800a162:	89a0      	ldrh	r0, [r4, #12]
 800a164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a168:	f010 0301 	ands.w	r3, r0, #1
 800a16c:	d00a      	beq.n	800a184 <__swsetup_r+0xbc>
 800a16e:	2300      	movs	r3, #0
 800a170:	60a3      	str	r3, [r4, #8]
 800a172:	6963      	ldr	r3, [r4, #20]
 800a174:	425b      	negs	r3, r3
 800a176:	61a3      	str	r3, [r4, #24]
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	b943      	cbnz	r3, 800a18e <__swsetup_r+0xc6>
 800a17c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a180:	d1ba      	bne.n	800a0f8 <__swsetup_r+0x30>
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	0781      	lsls	r1, r0, #30
 800a186:	bf58      	it	pl
 800a188:	6963      	ldrpl	r3, [r4, #20]
 800a18a:	60a3      	str	r3, [r4, #8]
 800a18c:	e7f4      	b.n	800a178 <__swsetup_r+0xb0>
 800a18e:	2000      	movs	r0, #0
 800a190:	e7f7      	b.n	800a182 <__swsetup_r+0xba>
 800a192:	bf00      	nop
 800a194:	20000014 	.word	0x20000014
 800a198:	0800d420 	.word	0x0800d420
 800a19c:	0800d440 	.word	0x0800d440
 800a1a0:	0800d400 	.word	0x0800d400

0800a1a4 <quorem>:
 800a1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	6903      	ldr	r3, [r0, #16]
 800a1aa:	690c      	ldr	r4, [r1, #16]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	f2c0 8081 	blt.w	800a2b6 <quorem+0x112>
 800a1b4:	3c01      	subs	r4, #1
 800a1b6:	f101 0814 	add.w	r8, r1, #20
 800a1ba:	f100 0514 	add.w	r5, r0, #20
 800a1be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1dc:	d331      	bcc.n	800a242 <quorem+0x9e>
 800a1de:	f04f 0e00 	mov.w	lr, #0
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	46ac      	mov	ip, r5
 800a1e6:	46f2      	mov	sl, lr
 800a1e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1ec:	b293      	uxth	r3, r2
 800a1ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a1f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a1fc:	0c12      	lsrs	r2, r2, #16
 800a1fe:	f8dc a000 	ldr.w	sl, [ip]
 800a202:	fb06 e202 	mla	r2, r6, r2, lr
 800a206:	fa13 f38a 	uxtah	r3, r3, sl
 800a20a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a20e:	fa1f fa82 	uxth.w	sl, r2
 800a212:	f8dc 2000 	ldr.w	r2, [ip]
 800a216:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a21a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a21e:	b29b      	uxth	r3, r3
 800a220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a224:	4581      	cmp	r9, r0
 800a226:	f84c 3b04 	str.w	r3, [ip], #4
 800a22a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a22e:	d2db      	bcs.n	800a1e8 <quorem+0x44>
 800a230:	f855 300b 	ldr.w	r3, [r5, fp]
 800a234:	b92b      	cbnz	r3, 800a242 <quorem+0x9e>
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	3b04      	subs	r3, #4
 800a23a:	429d      	cmp	r5, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	d32e      	bcc.n	800a29e <quorem+0xfa>
 800a240:	613c      	str	r4, [r7, #16]
 800a242:	4638      	mov	r0, r7
 800a244:	f001 feaa 	bl	800bf9c <__mcmp>
 800a248:	2800      	cmp	r0, #0
 800a24a:	db24      	blt.n	800a296 <quorem+0xf2>
 800a24c:	3601      	adds	r6, #1
 800a24e:	4628      	mov	r0, r5
 800a250:	f04f 0c00 	mov.w	ip, #0
 800a254:	f858 2b04 	ldr.w	r2, [r8], #4
 800a258:	f8d0 e000 	ldr.w	lr, [r0]
 800a25c:	b293      	uxth	r3, r2
 800a25e:	ebac 0303 	sub.w	r3, ip, r3
 800a262:	0c12      	lsrs	r2, r2, #16
 800a264:	fa13 f38e 	uxtah	r3, r3, lr
 800a268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a26c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a270:	b29b      	uxth	r3, r3
 800a272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a276:	45c1      	cmp	r9, r8
 800a278:	f840 3b04 	str.w	r3, [r0], #4
 800a27c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a280:	d2e8      	bcs.n	800a254 <quorem+0xb0>
 800a282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a28a:	b922      	cbnz	r2, 800a296 <quorem+0xf2>
 800a28c:	3b04      	subs	r3, #4
 800a28e:	429d      	cmp	r5, r3
 800a290:	461a      	mov	r2, r3
 800a292:	d30a      	bcc.n	800a2aa <quorem+0x106>
 800a294:	613c      	str	r4, [r7, #16]
 800a296:	4630      	mov	r0, r6
 800a298:	b003      	add	sp, #12
 800a29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29e:	6812      	ldr	r2, [r2, #0]
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	2a00      	cmp	r2, #0
 800a2a4:	d1cc      	bne.n	800a240 <quorem+0x9c>
 800a2a6:	3c01      	subs	r4, #1
 800a2a8:	e7c7      	b.n	800a23a <quorem+0x96>
 800a2aa:	6812      	ldr	r2, [r2, #0]
 800a2ac:	3b04      	subs	r3, #4
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	d1f0      	bne.n	800a294 <quorem+0xf0>
 800a2b2:	3c01      	subs	r4, #1
 800a2b4:	e7eb      	b.n	800a28e <quorem+0xea>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e7ee      	b.n	800a298 <quorem+0xf4>
 800a2ba:	0000      	movs	r0, r0
 800a2bc:	0000      	movs	r0, r0
	...

0800a2c0 <_dtoa_r>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	ed2d 8b02 	vpush	{d8}
 800a2c8:	ec57 6b10 	vmov	r6, r7, d0
 800a2cc:	b095      	sub	sp, #84	; 0x54
 800a2ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2d4:	9105      	str	r1, [sp, #20]
 800a2d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2da:	4604      	mov	r4, r0
 800a2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2e0:	b975      	cbnz	r5, 800a300 <_dtoa_r+0x40>
 800a2e2:	2010      	movs	r0, #16
 800a2e4:	f001 fb6a 	bl	800b9bc <malloc>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a2ec:	b920      	cbnz	r0, 800a2f8 <_dtoa_r+0x38>
 800a2ee:	4bb2      	ldr	r3, [pc, #712]	; (800a5b8 <_dtoa_r+0x2f8>)
 800a2f0:	21ea      	movs	r1, #234	; 0xea
 800a2f2:	48b2      	ldr	r0, [pc, #712]	; (800a5bc <_dtoa_r+0x2fc>)
 800a2f4:	f002 fc40 	bl	800cb78 <__assert_func>
 800a2f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2fc:	6005      	str	r5, [r0, #0]
 800a2fe:	60c5      	str	r5, [r0, #12]
 800a300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	b151      	cbz	r1, 800a31c <_dtoa_r+0x5c>
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	604a      	str	r2, [r1, #4]
 800a30a:	2301      	movs	r3, #1
 800a30c:	4093      	lsls	r3, r2
 800a30e:	608b      	str	r3, [r1, #8]
 800a310:	4620      	mov	r0, r4
 800a312:	f001 fbbb 	bl	800ba8c <_Bfree>
 800a316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	1e3b      	subs	r3, r7, #0
 800a31e:	bfb9      	ittee	lt
 800a320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a324:	9303      	strlt	r3, [sp, #12]
 800a326:	2300      	movge	r3, #0
 800a328:	f8c8 3000 	strge.w	r3, [r8]
 800a32c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a330:	4ba3      	ldr	r3, [pc, #652]	; (800a5c0 <_dtoa_r+0x300>)
 800a332:	bfbc      	itt	lt
 800a334:	2201      	movlt	r2, #1
 800a336:	f8c8 2000 	strlt.w	r2, [r8]
 800a33a:	ea33 0309 	bics.w	r3, r3, r9
 800a33e:	d11b      	bne.n	800a378 <_dtoa_r+0xb8>
 800a340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a342:	f242 730f 	movw	r3, #9999	; 0x270f
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a34c:	4333      	orrs	r3, r6
 800a34e:	f000 857a 	beq.w	800ae46 <_dtoa_r+0xb86>
 800a352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a354:	b963      	cbnz	r3, 800a370 <_dtoa_r+0xb0>
 800a356:	4b9b      	ldr	r3, [pc, #620]	; (800a5c4 <_dtoa_r+0x304>)
 800a358:	e024      	b.n	800a3a4 <_dtoa_r+0xe4>
 800a35a:	4b9b      	ldr	r3, [pc, #620]	; (800a5c8 <_dtoa_r+0x308>)
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	9800      	ldr	r0, [sp, #0]
 800a366:	b015      	add	sp, #84	; 0x54
 800a368:	ecbd 8b02 	vpop	{d8}
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	4b94      	ldr	r3, [pc, #592]	; (800a5c4 <_dtoa_r+0x304>)
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	3303      	adds	r3, #3
 800a376:	e7f3      	b.n	800a360 <_dtoa_r+0xa0>
 800a378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a37c:	2200      	movs	r2, #0
 800a37e:	ec51 0b17 	vmov	r0, r1, d7
 800a382:	2300      	movs	r3, #0
 800a384:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a388:	f7f6 fbae 	bl	8000ae8 <__aeabi_dcmpeq>
 800a38c:	4680      	mov	r8, r0
 800a38e:	b158      	cbz	r0, 800a3a8 <_dtoa_r+0xe8>
 800a390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a392:	2301      	movs	r3, #1
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8551 	beq.w	800ae40 <_dtoa_r+0xb80>
 800a39e:	488b      	ldr	r0, [pc, #556]	; (800a5cc <_dtoa_r+0x30c>)
 800a3a0:	6018      	str	r0, [r3, #0]
 800a3a2:	1e43      	subs	r3, r0, #1
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	e7dd      	b.n	800a364 <_dtoa_r+0xa4>
 800a3a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a3ac:	aa12      	add	r2, sp, #72	; 0x48
 800a3ae:	a913      	add	r1, sp, #76	; 0x4c
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f001 ff13 	bl	800c1dc <__d2b>
 800a3b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3ba:	4683      	mov	fp, r0
 800a3bc:	2d00      	cmp	r5, #0
 800a3be:	d07c      	beq.n	800a4ba <_dtoa_r+0x1fa>
 800a3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3da:	4b7d      	ldr	r3, [pc, #500]	; (800a5d0 <_dtoa_r+0x310>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	f7f5 ff61 	bl	80002a8 <__aeabi_dsub>
 800a3e6:	a36e      	add	r3, pc, #440	; (adr r3, 800a5a0 <_dtoa_r+0x2e0>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f6 f914 	bl	8000618 <__aeabi_dmul>
 800a3f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a5a8 <_dtoa_r+0x2e8>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 ff59 	bl	80002ac <__adddf3>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	460f      	mov	r7, r1
 800a400:	f7f6 f8a0 	bl	8000544 <__aeabi_i2d>
 800a404:	a36a      	add	r3, pc, #424	; (adr r3, 800a5b0 <_dtoa_r+0x2f0>)
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f7f6 f905 	bl	8000618 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f5 ff49 	bl	80002ac <__adddf3>
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	f7f6 fbab 	bl	8000b78 <__aeabi_d2iz>
 800a422:	2200      	movs	r2, #0
 800a424:	4682      	mov	sl, r0
 800a426:	2300      	movs	r3, #0
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	f7f6 fb66 	bl	8000afc <__aeabi_dcmplt>
 800a430:	b148      	cbz	r0, 800a446 <_dtoa_r+0x186>
 800a432:	4650      	mov	r0, sl
 800a434:	f7f6 f886 	bl	8000544 <__aeabi_i2d>
 800a438:	4632      	mov	r2, r6
 800a43a:	463b      	mov	r3, r7
 800a43c:	f7f6 fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 800a440:	b908      	cbnz	r0, 800a446 <_dtoa_r+0x186>
 800a442:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a446:	f1ba 0f16 	cmp.w	sl, #22
 800a44a:	d854      	bhi.n	800a4f6 <_dtoa_r+0x236>
 800a44c:	4b61      	ldr	r3, [pc, #388]	; (800a5d4 <_dtoa_r+0x314>)
 800a44e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a45a:	f7f6 fb4f 	bl	8000afc <__aeabi_dcmplt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d04b      	beq.n	800a4fa <_dtoa_r+0x23a>
 800a462:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a466:	2300      	movs	r3, #0
 800a468:	930e      	str	r3, [sp, #56]	; 0x38
 800a46a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a46c:	1b5d      	subs	r5, r3, r5
 800a46e:	1e6b      	subs	r3, r5, #1
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	bf43      	ittte	mi
 800a474:	2300      	movmi	r3, #0
 800a476:	f1c5 0801 	rsbmi	r8, r5, #1
 800a47a:	9304      	strmi	r3, [sp, #16]
 800a47c:	f04f 0800 	movpl.w	r8, #0
 800a480:	f1ba 0f00 	cmp.w	sl, #0
 800a484:	db3b      	blt.n	800a4fe <_dtoa_r+0x23e>
 800a486:	9b04      	ldr	r3, [sp, #16]
 800a488:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a48c:	4453      	add	r3, sl
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	2300      	movs	r3, #0
 800a492:	9306      	str	r3, [sp, #24]
 800a494:	9b05      	ldr	r3, [sp, #20]
 800a496:	2b09      	cmp	r3, #9
 800a498:	d869      	bhi.n	800a56e <_dtoa_r+0x2ae>
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	bfc4      	itt	gt
 800a49e:	3b04      	subgt	r3, #4
 800a4a0:	9305      	strgt	r3, [sp, #20]
 800a4a2:	9b05      	ldr	r3, [sp, #20]
 800a4a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a4a8:	bfcc      	ite	gt
 800a4aa:	2500      	movgt	r5, #0
 800a4ac:	2501      	movle	r5, #1
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d869      	bhi.n	800a586 <_dtoa_r+0x2c6>
 800a4b2:	e8df f003 	tbb	[pc, r3]
 800a4b6:	4e2c      	.short	0x4e2c
 800a4b8:	5a4c      	.short	0x5a4c
 800a4ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a4be:	441d      	add	r5, r3
 800a4c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4c4:	2b20      	cmp	r3, #32
 800a4c6:	bfc1      	itttt	gt
 800a4c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4d8:	bfda      	itte	le
 800a4da:	f1c3 0320 	rsble	r3, r3, #32
 800a4de:	fa06 f003 	lslle.w	r0, r6, r3
 800a4e2:	4318      	orrgt	r0, r3
 800a4e4:	f7f6 f81e 	bl	8000524 <__aeabi_ui2d>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4f0:	3d01      	subs	r5, #1
 800a4f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4f4:	e771      	b.n	800a3da <_dtoa_r+0x11a>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7b6      	b.n	800a468 <_dtoa_r+0x1a8>
 800a4fa:	900e      	str	r0, [sp, #56]	; 0x38
 800a4fc:	e7b5      	b.n	800a46a <_dtoa_r+0x1aa>
 800a4fe:	f1ca 0300 	rsb	r3, sl, #0
 800a502:	9306      	str	r3, [sp, #24]
 800a504:	2300      	movs	r3, #0
 800a506:	eba8 080a 	sub.w	r8, r8, sl
 800a50a:	930d      	str	r3, [sp, #52]	; 0x34
 800a50c:	e7c2      	b.n	800a494 <_dtoa_r+0x1d4>
 800a50e:	2300      	movs	r3, #0
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	dc39      	bgt.n	800a58c <_dtoa_r+0x2cc>
 800a518:	f04f 0901 	mov.w	r9, #1
 800a51c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a520:	464b      	mov	r3, r9
 800a522:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a528:	2200      	movs	r2, #0
 800a52a:	6042      	str	r2, [r0, #4]
 800a52c:	2204      	movs	r2, #4
 800a52e:	f102 0614 	add.w	r6, r2, #20
 800a532:	429e      	cmp	r6, r3
 800a534:	6841      	ldr	r1, [r0, #4]
 800a536:	d92f      	bls.n	800a598 <_dtoa_r+0x2d8>
 800a538:	4620      	mov	r0, r4
 800a53a:	f001 fa67 	bl	800ba0c <_Balloc>
 800a53e:	9000      	str	r0, [sp, #0]
 800a540:	2800      	cmp	r0, #0
 800a542:	d14b      	bne.n	800a5dc <_dtoa_r+0x31c>
 800a544:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <_dtoa_r+0x318>)
 800a546:	4602      	mov	r2, r0
 800a548:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a54c:	e6d1      	b.n	800a2f2 <_dtoa_r+0x32>
 800a54e:	2301      	movs	r3, #1
 800a550:	e7de      	b.n	800a510 <_dtoa_r+0x250>
 800a552:	2300      	movs	r3, #0
 800a554:	9308      	str	r3, [sp, #32]
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	eb0a 0903 	add.w	r9, sl, r3
 800a55c:	f109 0301 	add.w	r3, r9, #1
 800a560:	2b01      	cmp	r3, #1
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	bfb8      	it	lt
 800a566:	2301      	movlt	r3, #1
 800a568:	e7dd      	b.n	800a526 <_dtoa_r+0x266>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e7f2      	b.n	800a554 <_dtoa_r+0x294>
 800a56e:	2501      	movs	r5, #1
 800a570:	2300      	movs	r3, #0
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	9508      	str	r5, [sp, #32]
 800a576:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a580:	2312      	movs	r3, #18
 800a582:	9209      	str	r2, [sp, #36]	; 0x24
 800a584:	e7cf      	b.n	800a526 <_dtoa_r+0x266>
 800a586:	2301      	movs	r3, #1
 800a588:	9308      	str	r3, [sp, #32]
 800a58a:	e7f4      	b.n	800a576 <_dtoa_r+0x2b6>
 800a58c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a590:	f8cd 9004 	str.w	r9, [sp, #4]
 800a594:	464b      	mov	r3, r9
 800a596:	e7c6      	b.n	800a526 <_dtoa_r+0x266>
 800a598:	3101      	adds	r1, #1
 800a59a:	6041      	str	r1, [r0, #4]
 800a59c:	0052      	lsls	r2, r2, #1
 800a59e:	e7c6      	b.n	800a52e <_dtoa_r+0x26e>
 800a5a0:	636f4361 	.word	0x636f4361
 800a5a4:	3fd287a7 	.word	0x3fd287a7
 800a5a8:	8b60c8b3 	.word	0x8b60c8b3
 800a5ac:	3fc68a28 	.word	0x3fc68a28
 800a5b0:	509f79fb 	.word	0x509f79fb
 800a5b4:	3fd34413 	.word	0x3fd34413
 800a5b8:	0800d376 	.word	0x0800d376
 800a5bc:	0800d38d 	.word	0x0800d38d
 800a5c0:	7ff00000 	.word	0x7ff00000
 800a5c4:	0800d372 	.word	0x0800d372
 800a5c8:	0800d369 	.word	0x0800d369
 800a5cc:	0800d1e9 	.word	0x0800d1e9
 800a5d0:	3ff80000 	.word	0x3ff80000
 800a5d4:	0800d568 	.word	0x0800d568
 800a5d8:	0800d3ec 	.word	0x0800d3ec
 800a5dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5de:	9a00      	ldr	r2, [sp, #0]
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	2b0e      	cmp	r3, #14
 800a5e6:	f200 80ad 	bhi.w	800a744 <_dtoa_r+0x484>
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	f000 80aa 	beq.w	800a744 <_dtoa_r+0x484>
 800a5f0:	f1ba 0f00 	cmp.w	sl, #0
 800a5f4:	dd36      	ble.n	800a664 <_dtoa_r+0x3a4>
 800a5f6:	4ac3      	ldr	r2, [pc, #780]	; (800a904 <_dtoa_r+0x644>)
 800a5f8:	f00a 030f 	and.w	r3, sl, #15
 800a5fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a600:	ed93 7b00 	vldr	d7, [r3]
 800a604:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a608:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a60c:	eeb0 8a47 	vmov.f32	s16, s14
 800a610:	eef0 8a67 	vmov.f32	s17, s15
 800a614:	d016      	beq.n	800a644 <_dtoa_r+0x384>
 800a616:	4bbc      	ldr	r3, [pc, #752]	; (800a908 <_dtoa_r+0x648>)
 800a618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a61c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a620:	f7f6 f924 	bl	800086c <__aeabi_ddiv>
 800a624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a628:	f007 070f 	and.w	r7, r7, #15
 800a62c:	2503      	movs	r5, #3
 800a62e:	4eb6      	ldr	r6, [pc, #728]	; (800a908 <_dtoa_r+0x648>)
 800a630:	b957      	cbnz	r7, 800a648 <_dtoa_r+0x388>
 800a632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a636:	ec53 2b18 	vmov	r2, r3, d8
 800a63a:	f7f6 f917 	bl	800086c <__aeabi_ddiv>
 800a63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a642:	e029      	b.n	800a698 <_dtoa_r+0x3d8>
 800a644:	2502      	movs	r5, #2
 800a646:	e7f2      	b.n	800a62e <_dtoa_r+0x36e>
 800a648:	07f9      	lsls	r1, r7, #31
 800a64a:	d508      	bpl.n	800a65e <_dtoa_r+0x39e>
 800a64c:	ec51 0b18 	vmov	r0, r1, d8
 800a650:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a654:	f7f5 ffe0 	bl	8000618 <__aeabi_dmul>
 800a658:	ec41 0b18 	vmov	d8, r0, r1
 800a65c:	3501      	adds	r5, #1
 800a65e:	107f      	asrs	r7, r7, #1
 800a660:	3608      	adds	r6, #8
 800a662:	e7e5      	b.n	800a630 <_dtoa_r+0x370>
 800a664:	f000 80a6 	beq.w	800a7b4 <_dtoa_r+0x4f4>
 800a668:	f1ca 0600 	rsb	r6, sl, #0
 800a66c:	4ba5      	ldr	r3, [pc, #660]	; (800a904 <_dtoa_r+0x644>)
 800a66e:	4fa6      	ldr	r7, [pc, #664]	; (800a908 <_dtoa_r+0x648>)
 800a670:	f006 020f 	and.w	r2, r6, #15
 800a674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a680:	f7f5 ffca 	bl	8000618 <__aeabi_dmul>
 800a684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a688:	1136      	asrs	r6, r6, #4
 800a68a:	2300      	movs	r3, #0
 800a68c:	2502      	movs	r5, #2
 800a68e:	2e00      	cmp	r6, #0
 800a690:	f040 8085 	bne.w	800a79e <_dtoa_r+0x4de>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1d2      	bne.n	800a63e <_dtoa_r+0x37e>
 800a698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 808c 	beq.w	800a7b8 <_dtoa_r+0x4f8>
 800a6a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6a4:	4b99      	ldr	r3, [pc, #612]	; (800a90c <_dtoa_r+0x64c>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	f7f6 fa26 	bl	8000afc <__aeabi_dcmplt>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	f000 8081 	beq.w	800a7b8 <_dtoa_r+0x4f8>
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d07d      	beq.n	800a7b8 <_dtoa_r+0x4f8>
 800a6bc:	f1b9 0f00 	cmp.w	r9, #0
 800a6c0:	dd3c      	ble.n	800a73c <_dtoa_r+0x47c>
 800a6c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a6c6:	9307      	str	r3, [sp, #28]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4b91      	ldr	r3, [pc, #580]	; (800a910 <_dtoa_r+0x650>)
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f5 ffa2 	bl	8000618 <__aeabi_dmul>
 800a6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d8:	3501      	adds	r5, #1
 800a6da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7f5 ff2e 	bl	8000544 <__aeabi_i2d>
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	f7f5 ff94 	bl	8000618 <__aeabi_dmul>
 800a6f0:	4b88      	ldr	r3, [pc, #544]	; (800a914 <_dtoa_r+0x654>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f7f5 fdda 	bl	80002ac <__adddf3>
 800a6f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	d15c      	bne.n	800a7c2 <_dtoa_r+0x502>
 800a708:	4b83      	ldr	r3, [pc, #524]	; (800a918 <_dtoa_r+0x658>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f5 fdca 	bl	80002a8 <__aeabi_dsub>
 800a714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a718:	4606      	mov	r6, r0
 800a71a:	460f      	mov	r7, r1
 800a71c:	f7f6 fa0c 	bl	8000b38 <__aeabi_dcmpgt>
 800a720:	2800      	cmp	r0, #0
 800a722:	f040 8296 	bne.w	800ac52 <_dtoa_r+0x992>
 800a726:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a72a:	4630      	mov	r0, r6
 800a72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a730:	4639      	mov	r1, r7
 800a732:	f7f6 f9e3 	bl	8000afc <__aeabi_dcmplt>
 800a736:	2800      	cmp	r0, #0
 800a738:	f040 8288 	bne.w	800ac4c <_dtoa_r+0x98c>
 800a73c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a746:	2b00      	cmp	r3, #0
 800a748:	f2c0 8158 	blt.w	800a9fc <_dtoa_r+0x73c>
 800a74c:	f1ba 0f0e 	cmp.w	sl, #14
 800a750:	f300 8154 	bgt.w	800a9fc <_dtoa_r+0x73c>
 800a754:	4b6b      	ldr	r3, [pc, #428]	; (800a904 <_dtoa_r+0x644>)
 800a756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a75a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	f280 80e3 	bge.w	800a92c <_dtoa_r+0x66c>
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f300 80df 	bgt.w	800a92c <_dtoa_r+0x66c>
 800a76e:	f040 826d 	bne.w	800ac4c <_dtoa_r+0x98c>
 800a772:	4b69      	ldr	r3, [pc, #420]	; (800a918 <_dtoa_r+0x658>)
 800a774:	2200      	movs	r2, #0
 800a776:	4640      	mov	r0, r8
 800a778:	4649      	mov	r1, r9
 800a77a:	f7f5 ff4d 	bl	8000618 <__aeabi_dmul>
 800a77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a782:	f7f6 f9cf 	bl	8000b24 <__aeabi_dcmpge>
 800a786:	9e01      	ldr	r6, [sp, #4]
 800a788:	4637      	mov	r7, r6
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f040 8243 	bne.w	800ac16 <_dtoa_r+0x956>
 800a790:	9d00      	ldr	r5, [sp, #0]
 800a792:	2331      	movs	r3, #49	; 0x31
 800a794:	f805 3b01 	strb.w	r3, [r5], #1
 800a798:	f10a 0a01 	add.w	sl, sl, #1
 800a79c:	e23f      	b.n	800ac1e <_dtoa_r+0x95e>
 800a79e:	07f2      	lsls	r2, r6, #31
 800a7a0:	d505      	bpl.n	800a7ae <_dtoa_r+0x4ee>
 800a7a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a6:	f7f5 ff37 	bl	8000618 <__aeabi_dmul>
 800a7aa:	3501      	adds	r5, #1
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	1076      	asrs	r6, r6, #1
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	e76c      	b.n	800a68e <_dtoa_r+0x3ce>
 800a7b4:	2502      	movs	r5, #2
 800a7b6:	e76f      	b.n	800a698 <_dtoa_r+0x3d8>
 800a7b8:	9b01      	ldr	r3, [sp, #4]
 800a7ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7be:	930c      	str	r3, [sp, #48]	; 0x30
 800a7c0:	e78d      	b.n	800a6de <_dtoa_r+0x41e>
 800a7c2:	9900      	ldr	r1, [sp, #0]
 800a7c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7c8:	4b4e      	ldr	r3, [pc, #312]	; (800a904 <_dtoa_r+0x644>)
 800a7ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ce:	4401      	add	r1, r0
 800a7d0:	9102      	str	r1, [sp, #8]
 800a7d2:	9908      	ldr	r1, [sp, #32]
 800a7d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a7d8:	eef0 8a67 	vmov.f32	s17, s15
 800a7dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	d045      	beq.n	800a874 <_dtoa_r+0x5b4>
 800a7e8:	494c      	ldr	r1, [pc, #304]	; (800a91c <_dtoa_r+0x65c>)
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	f7f6 f83e 	bl	800086c <__aeabi_ddiv>
 800a7f0:	ec53 2b18 	vmov	r2, r3, d8
 800a7f4:	f7f5 fd58 	bl	80002a8 <__aeabi_dsub>
 800a7f8:	9d00      	ldr	r5, [sp, #0]
 800a7fa:	ec41 0b18 	vmov	d8, r0, r1
 800a7fe:	4639      	mov	r1, r7
 800a800:	4630      	mov	r0, r6
 800a802:	f7f6 f9b9 	bl	8000b78 <__aeabi_d2iz>
 800a806:	900c      	str	r0, [sp, #48]	; 0x30
 800a808:	f7f5 fe9c 	bl	8000544 <__aeabi_i2d>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fd48 	bl	80002a8 <__aeabi_dsub>
 800a818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a81a:	3330      	adds	r3, #48	; 0x30
 800a81c:	f805 3b01 	strb.w	r3, [r5], #1
 800a820:	ec53 2b18 	vmov	r2, r3, d8
 800a824:	4606      	mov	r6, r0
 800a826:	460f      	mov	r7, r1
 800a828:	f7f6 f968 	bl	8000afc <__aeabi_dcmplt>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d165      	bne.n	800a8fc <_dtoa_r+0x63c>
 800a830:	4632      	mov	r2, r6
 800a832:	463b      	mov	r3, r7
 800a834:	4935      	ldr	r1, [pc, #212]	; (800a90c <_dtoa_r+0x64c>)
 800a836:	2000      	movs	r0, #0
 800a838:	f7f5 fd36 	bl	80002a8 <__aeabi_dsub>
 800a83c:	ec53 2b18 	vmov	r2, r3, d8
 800a840:	f7f6 f95c 	bl	8000afc <__aeabi_dcmplt>
 800a844:	2800      	cmp	r0, #0
 800a846:	f040 80b9 	bne.w	800a9bc <_dtoa_r+0x6fc>
 800a84a:	9b02      	ldr	r3, [sp, #8]
 800a84c:	429d      	cmp	r5, r3
 800a84e:	f43f af75 	beq.w	800a73c <_dtoa_r+0x47c>
 800a852:	4b2f      	ldr	r3, [pc, #188]	; (800a910 <_dtoa_r+0x650>)
 800a854:	ec51 0b18 	vmov	r0, r1, d8
 800a858:	2200      	movs	r2, #0
 800a85a:	f7f5 fedd 	bl	8000618 <__aeabi_dmul>
 800a85e:	4b2c      	ldr	r3, [pc, #176]	; (800a910 <_dtoa_r+0x650>)
 800a860:	ec41 0b18 	vmov	d8, r0, r1
 800a864:	2200      	movs	r2, #0
 800a866:	4630      	mov	r0, r6
 800a868:	4639      	mov	r1, r7
 800a86a:	f7f5 fed5 	bl	8000618 <__aeabi_dmul>
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	e7c4      	b.n	800a7fe <_dtoa_r+0x53e>
 800a874:	ec51 0b17 	vmov	r0, r1, d7
 800a878:	f7f5 fece 	bl	8000618 <__aeabi_dmul>
 800a87c:	9b02      	ldr	r3, [sp, #8]
 800a87e:	9d00      	ldr	r5, [sp, #0]
 800a880:	930c      	str	r3, [sp, #48]	; 0x30
 800a882:	ec41 0b18 	vmov	d8, r0, r1
 800a886:	4639      	mov	r1, r7
 800a888:	4630      	mov	r0, r6
 800a88a:	f7f6 f975 	bl	8000b78 <__aeabi_d2iz>
 800a88e:	9011      	str	r0, [sp, #68]	; 0x44
 800a890:	f7f5 fe58 	bl	8000544 <__aeabi_i2d>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fd04 	bl	80002a8 <__aeabi_dsub>
 800a8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8a2:	3330      	adds	r3, #48	; 0x30
 800a8a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8a8:	9b02      	ldr	r3, [sp, #8]
 800a8aa:	429d      	cmp	r5, r3
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	d134      	bne.n	800a920 <_dtoa_r+0x660>
 800a8b6:	4b19      	ldr	r3, [pc, #100]	; (800a91c <_dtoa_r+0x65c>)
 800a8b8:	ec51 0b18 	vmov	r0, r1, d8
 800a8bc:	f7f5 fcf6 	bl	80002ac <__adddf3>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f6 f936 	bl	8000b38 <__aeabi_dcmpgt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d175      	bne.n	800a9bc <_dtoa_r+0x6fc>
 800a8d0:	ec53 2b18 	vmov	r2, r3, d8
 800a8d4:	4911      	ldr	r1, [pc, #68]	; (800a91c <_dtoa_r+0x65c>)
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f7f5 fce6 	bl	80002a8 <__aeabi_dsub>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 f90a 	bl	8000afc <__aeabi_dcmplt>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f43f af27 	beq.w	800a73c <_dtoa_r+0x47c>
 800a8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8f0:	1e6b      	subs	r3, r5, #1
 800a8f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	d0f8      	beq.n	800a8ee <_dtoa_r+0x62e>
 800a8fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a900:	e04a      	b.n	800a998 <_dtoa_r+0x6d8>
 800a902:	bf00      	nop
 800a904:	0800d568 	.word	0x0800d568
 800a908:	0800d540 	.word	0x0800d540
 800a90c:	3ff00000 	.word	0x3ff00000
 800a910:	40240000 	.word	0x40240000
 800a914:	401c0000 	.word	0x401c0000
 800a918:	40140000 	.word	0x40140000
 800a91c:	3fe00000 	.word	0x3fe00000
 800a920:	4baf      	ldr	r3, [pc, #700]	; (800abe0 <_dtoa_r+0x920>)
 800a922:	f7f5 fe79 	bl	8000618 <__aeabi_dmul>
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	e7ac      	b.n	800a886 <_dtoa_r+0x5c6>
 800a92c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a930:	9d00      	ldr	r5, [sp, #0]
 800a932:	4642      	mov	r2, r8
 800a934:	464b      	mov	r3, r9
 800a936:	4630      	mov	r0, r6
 800a938:	4639      	mov	r1, r7
 800a93a:	f7f5 ff97 	bl	800086c <__aeabi_ddiv>
 800a93e:	f7f6 f91b 	bl	8000b78 <__aeabi_d2iz>
 800a942:	9002      	str	r0, [sp, #8]
 800a944:	f7f5 fdfe 	bl	8000544 <__aeabi_i2d>
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	f7f5 fe64 	bl	8000618 <__aeabi_dmul>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4630      	mov	r0, r6
 800a956:	4639      	mov	r1, r7
 800a958:	f7f5 fca6 	bl	80002a8 <__aeabi_dsub>
 800a95c:	9e02      	ldr	r6, [sp, #8]
 800a95e:	9f01      	ldr	r7, [sp, #4]
 800a960:	3630      	adds	r6, #48	; 0x30
 800a962:	f805 6b01 	strb.w	r6, [r5], #1
 800a966:	9e00      	ldr	r6, [sp, #0]
 800a968:	1bae      	subs	r6, r5, r6
 800a96a:	42b7      	cmp	r7, r6
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	d137      	bne.n	800a9e2 <_dtoa_r+0x722>
 800a972:	f7f5 fc9b 	bl	80002ac <__adddf3>
 800a976:	4642      	mov	r2, r8
 800a978:	464b      	mov	r3, r9
 800a97a:	4606      	mov	r6, r0
 800a97c:	460f      	mov	r7, r1
 800a97e:	f7f6 f8db 	bl	8000b38 <__aeabi_dcmpgt>
 800a982:	b9c8      	cbnz	r0, 800a9b8 <_dtoa_r+0x6f8>
 800a984:	4642      	mov	r2, r8
 800a986:	464b      	mov	r3, r9
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f6 f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 800a990:	b110      	cbz	r0, 800a998 <_dtoa_r+0x6d8>
 800a992:	9b02      	ldr	r3, [sp, #8]
 800a994:	07d9      	lsls	r1, r3, #31
 800a996:	d40f      	bmi.n	800a9b8 <_dtoa_r+0x6f8>
 800a998:	4620      	mov	r0, r4
 800a99a:	4659      	mov	r1, fp
 800a99c:	f001 f876 	bl	800ba8c <_Bfree>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	702b      	strb	r3, [r5, #0]
 800a9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a6:	f10a 0001 	add.w	r0, sl, #1
 800a9aa:	6018      	str	r0, [r3, #0]
 800a9ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f43f acd8 	beq.w	800a364 <_dtoa_r+0xa4>
 800a9b4:	601d      	str	r5, [r3, #0]
 800a9b6:	e4d5      	b.n	800a364 <_dtoa_r+0xa4>
 800a9b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a9bc:	462b      	mov	r3, r5
 800a9be:	461d      	mov	r5, r3
 800a9c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9c4:	2a39      	cmp	r2, #57	; 0x39
 800a9c6:	d108      	bne.n	800a9da <_dtoa_r+0x71a>
 800a9c8:	9a00      	ldr	r2, [sp, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d1f7      	bne.n	800a9be <_dtoa_r+0x6fe>
 800a9ce:	9a07      	ldr	r2, [sp, #28]
 800a9d0:	9900      	ldr	r1, [sp, #0]
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	9207      	str	r2, [sp, #28]
 800a9d6:	2230      	movs	r2, #48	; 0x30
 800a9d8:	700a      	strb	r2, [r1, #0]
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	3201      	adds	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e78c      	b.n	800a8fc <_dtoa_r+0x63c>
 800a9e2:	4b7f      	ldr	r3, [pc, #508]	; (800abe0 <_dtoa_r+0x920>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f7f5 fe17 	bl	8000618 <__aeabi_dmul>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	f7f6 f879 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d09b      	beq.n	800a932 <_dtoa_r+0x672>
 800a9fa:	e7cd      	b.n	800a998 <_dtoa_r+0x6d8>
 800a9fc:	9a08      	ldr	r2, [sp, #32]
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	f000 80c4 	beq.w	800ab8c <_dtoa_r+0x8cc>
 800aa04:	9a05      	ldr	r2, [sp, #20]
 800aa06:	2a01      	cmp	r2, #1
 800aa08:	f300 80a8 	bgt.w	800ab5c <_dtoa_r+0x89c>
 800aa0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	f000 80a0 	beq.w	800ab54 <_dtoa_r+0x894>
 800aa14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa18:	9e06      	ldr	r6, [sp, #24]
 800aa1a:	4645      	mov	r5, r8
 800aa1c:	9a04      	ldr	r2, [sp, #16]
 800aa1e:	2101      	movs	r1, #1
 800aa20:	441a      	add	r2, r3
 800aa22:	4620      	mov	r0, r4
 800aa24:	4498      	add	r8, r3
 800aa26:	9204      	str	r2, [sp, #16]
 800aa28:	f001 f936 	bl	800bc98 <__i2b>
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	dd0b      	ble.n	800aa4a <_dtoa_r+0x78a>
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd08      	ble.n	800aa4a <_dtoa_r+0x78a>
 800aa38:	42ab      	cmp	r3, r5
 800aa3a:	9a04      	ldr	r2, [sp, #16]
 800aa3c:	bfa8      	it	ge
 800aa3e:	462b      	movge	r3, r5
 800aa40:	eba8 0803 	sub.w	r8, r8, r3
 800aa44:	1aed      	subs	r5, r5, r3
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	9b06      	ldr	r3, [sp, #24]
 800aa4c:	b1fb      	cbz	r3, 800aa8e <_dtoa_r+0x7ce>
 800aa4e:	9b08      	ldr	r3, [sp, #32]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 809f 	beq.w	800ab94 <_dtoa_r+0x8d4>
 800aa56:	2e00      	cmp	r6, #0
 800aa58:	dd11      	ble.n	800aa7e <_dtoa_r+0x7be>
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f001 f9d6 	bl	800be10 <__pow5mult>
 800aa64:	465a      	mov	r2, fp
 800aa66:	4601      	mov	r1, r0
 800aa68:	4607      	mov	r7, r0
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f001 f92a 	bl	800bcc4 <__multiply>
 800aa70:	4659      	mov	r1, fp
 800aa72:	9007      	str	r0, [sp, #28]
 800aa74:	4620      	mov	r0, r4
 800aa76:	f001 f809 	bl	800ba8c <_Bfree>
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	469b      	mov	fp, r3
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	1b9a      	subs	r2, r3, r6
 800aa82:	d004      	beq.n	800aa8e <_dtoa_r+0x7ce>
 800aa84:	4659      	mov	r1, fp
 800aa86:	4620      	mov	r0, r4
 800aa88:	f001 f9c2 	bl	800be10 <__pow5mult>
 800aa8c:	4683      	mov	fp, r0
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4620      	mov	r0, r4
 800aa92:	f001 f901 	bl	800bc98 <__i2b>
 800aa96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	dd7c      	ble.n	800ab98 <_dtoa_r+0x8d8>
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	4601      	mov	r1, r0
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f001 f9b4 	bl	800be10 <__pow5mult>
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	4606      	mov	r6, r0
 800aaae:	dd76      	ble.n	800ab9e <_dtoa_r+0x8de>
 800aab0:	2300      	movs	r3, #0
 800aab2:	9306      	str	r3, [sp, #24]
 800aab4:	6933      	ldr	r3, [r6, #16]
 800aab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaba:	6918      	ldr	r0, [r3, #16]
 800aabc:	f001 f89c 	bl	800bbf8 <__hi0bits>
 800aac0:	f1c0 0020 	rsb	r0, r0, #32
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	4418      	add	r0, r3
 800aac8:	f010 001f 	ands.w	r0, r0, #31
 800aacc:	f000 8086 	beq.w	800abdc <_dtoa_r+0x91c>
 800aad0:	f1c0 0320 	rsb	r3, r0, #32
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	dd7f      	ble.n	800abd8 <_dtoa_r+0x918>
 800aad8:	f1c0 001c 	rsb	r0, r0, #28
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	4403      	add	r3, r0
 800aae0:	4480      	add	r8, r0
 800aae2:	4405      	add	r5, r0
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	f1b8 0f00 	cmp.w	r8, #0
 800aaea:	dd05      	ble.n	800aaf8 <_dtoa_r+0x838>
 800aaec:	4659      	mov	r1, fp
 800aaee:	4642      	mov	r2, r8
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f001 f9e7 	bl	800bec4 <__lshift>
 800aaf6:	4683      	mov	fp, r0
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dd05      	ble.n	800ab0a <_dtoa_r+0x84a>
 800aafe:	4631      	mov	r1, r6
 800ab00:	461a      	mov	r2, r3
 800ab02:	4620      	mov	r0, r4
 800ab04:	f001 f9de 	bl	800bec4 <__lshift>
 800ab08:	4606      	mov	r6, r0
 800ab0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d069      	beq.n	800abe4 <_dtoa_r+0x924>
 800ab10:	4631      	mov	r1, r6
 800ab12:	4658      	mov	r0, fp
 800ab14:	f001 fa42 	bl	800bf9c <__mcmp>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	da63      	bge.n	800abe4 <_dtoa_r+0x924>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4659      	mov	r1, fp
 800ab20:	220a      	movs	r2, #10
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 ffd4 	bl	800bad0 <__multadd>
 800ab28:	9b08      	ldr	r3, [sp, #32]
 800ab2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ab2e:	4683      	mov	fp, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 818f 	beq.w	800ae54 <_dtoa_r+0xb94>
 800ab36:	4639      	mov	r1, r7
 800ab38:	2300      	movs	r3, #0
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 ffc7 	bl	800bad0 <__multadd>
 800ab42:	f1b9 0f00 	cmp.w	r9, #0
 800ab46:	4607      	mov	r7, r0
 800ab48:	f300 808e 	bgt.w	800ac68 <_dtoa_r+0x9a8>
 800ab4c:	9b05      	ldr	r3, [sp, #20]
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	dc50      	bgt.n	800abf4 <_dtoa_r+0x934>
 800ab52:	e089      	b.n	800ac68 <_dtoa_r+0x9a8>
 800ab54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab5a:	e75d      	b.n	800aa18 <_dtoa_r+0x758>
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	1e5e      	subs	r6, r3, #1
 800ab60:	9b06      	ldr	r3, [sp, #24]
 800ab62:	42b3      	cmp	r3, r6
 800ab64:	bfbf      	itttt	lt
 800ab66:	9b06      	ldrlt	r3, [sp, #24]
 800ab68:	9606      	strlt	r6, [sp, #24]
 800ab6a:	1af2      	sublt	r2, r6, r3
 800ab6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab6e:	bfb6      	itet	lt
 800ab70:	189b      	addlt	r3, r3, r2
 800ab72:	1b9e      	subge	r6, r3, r6
 800ab74:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	bfb8      	it	lt
 800ab7a:	2600      	movlt	r6, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfb5      	itete	lt
 800ab80:	eba8 0503 	sublt.w	r5, r8, r3
 800ab84:	9b01      	ldrge	r3, [sp, #4]
 800ab86:	2300      	movlt	r3, #0
 800ab88:	4645      	movge	r5, r8
 800ab8a:	e747      	b.n	800aa1c <_dtoa_r+0x75c>
 800ab8c:	9e06      	ldr	r6, [sp, #24]
 800ab8e:	9f08      	ldr	r7, [sp, #32]
 800ab90:	4645      	mov	r5, r8
 800ab92:	e74c      	b.n	800aa2e <_dtoa_r+0x76e>
 800ab94:	9a06      	ldr	r2, [sp, #24]
 800ab96:	e775      	b.n	800aa84 <_dtoa_r+0x7c4>
 800ab98:	9b05      	ldr	r3, [sp, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	dc18      	bgt.n	800abd0 <_dtoa_r+0x910>
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	b9b3      	cbnz	r3, 800abd0 <_dtoa_r+0x910>
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aba8:	b9a3      	cbnz	r3, 800abd4 <_dtoa_r+0x914>
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abb0:	0d1b      	lsrs	r3, r3, #20
 800abb2:	051b      	lsls	r3, r3, #20
 800abb4:	b12b      	cbz	r3, 800abc2 <_dtoa_r+0x902>
 800abb6:	9b04      	ldr	r3, [sp, #16]
 800abb8:	3301      	adds	r3, #1
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	f108 0801 	add.w	r8, r8, #1
 800abc0:	2301      	movs	r3, #1
 800abc2:	9306      	str	r3, [sp, #24]
 800abc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f47f af74 	bne.w	800aab4 <_dtoa_r+0x7f4>
 800abcc:	2001      	movs	r0, #1
 800abce:	e779      	b.n	800aac4 <_dtoa_r+0x804>
 800abd0:	2300      	movs	r3, #0
 800abd2:	e7f6      	b.n	800abc2 <_dtoa_r+0x902>
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	e7f4      	b.n	800abc2 <_dtoa_r+0x902>
 800abd8:	d085      	beq.n	800aae6 <_dtoa_r+0x826>
 800abda:	4618      	mov	r0, r3
 800abdc:	301c      	adds	r0, #28
 800abde:	e77d      	b.n	800aadc <_dtoa_r+0x81c>
 800abe0:	40240000 	.word	0x40240000
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dc38      	bgt.n	800ac5c <_dtoa_r+0x99c>
 800abea:	9b05      	ldr	r3, [sp, #20]
 800abec:	2b02      	cmp	r3, #2
 800abee:	dd35      	ble.n	800ac5c <_dtoa_r+0x99c>
 800abf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	d10d      	bne.n	800ac16 <_dtoa_r+0x956>
 800abfa:	4631      	mov	r1, r6
 800abfc:	464b      	mov	r3, r9
 800abfe:	2205      	movs	r2, #5
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 ff65 	bl	800bad0 <__multadd>
 800ac06:	4601      	mov	r1, r0
 800ac08:	4606      	mov	r6, r0
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f001 f9c6 	bl	800bf9c <__mcmp>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f73f adbd 	bgt.w	800a790 <_dtoa_r+0x4d0>
 800ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac18:	9d00      	ldr	r5, [sp, #0]
 800ac1a:	ea6f 0a03 	mvn.w	sl, r3
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	4631      	mov	r1, r6
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 ff31 	bl	800ba8c <_Bfree>
 800ac2a:	2f00      	cmp	r7, #0
 800ac2c:	f43f aeb4 	beq.w	800a998 <_dtoa_r+0x6d8>
 800ac30:	f1b8 0f00 	cmp.w	r8, #0
 800ac34:	d005      	beq.n	800ac42 <_dtoa_r+0x982>
 800ac36:	45b8      	cmp	r8, r7
 800ac38:	d003      	beq.n	800ac42 <_dtoa_r+0x982>
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 ff25 	bl	800ba8c <_Bfree>
 800ac42:	4639      	mov	r1, r7
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 ff21 	bl	800ba8c <_Bfree>
 800ac4a:	e6a5      	b.n	800a998 <_dtoa_r+0x6d8>
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	4637      	mov	r7, r6
 800ac50:	e7e1      	b.n	800ac16 <_dtoa_r+0x956>
 800ac52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac58:	4637      	mov	r7, r6
 800ac5a:	e599      	b.n	800a790 <_dtoa_r+0x4d0>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 80fd 	beq.w	800ae62 <_dtoa_r+0xba2>
 800ac68:	2d00      	cmp	r5, #0
 800ac6a:	dd05      	ble.n	800ac78 <_dtoa_r+0x9b8>
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	462a      	mov	r2, r5
 800ac70:	4620      	mov	r0, r4
 800ac72:	f001 f927 	bl	800bec4 <__lshift>
 800ac76:	4607      	mov	r7, r0
 800ac78:	9b06      	ldr	r3, [sp, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d05c      	beq.n	800ad38 <_dtoa_r+0xa78>
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fec3 	bl	800ba0c <_Balloc>
 800ac86:	4605      	mov	r5, r0
 800ac88:	b928      	cbnz	r0, 800ac96 <_dtoa_r+0x9d6>
 800ac8a:	4b80      	ldr	r3, [pc, #512]	; (800ae8c <_dtoa_r+0xbcc>)
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac92:	f7ff bb2e 	b.w	800a2f2 <_dtoa_r+0x32>
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	3202      	adds	r2, #2
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	f107 010c 	add.w	r1, r7, #12
 800aca0:	300c      	adds	r0, #12
 800aca2:	f000 fea5 	bl	800b9f0 <memcpy>
 800aca6:	2201      	movs	r2, #1
 800aca8:	4629      	mov	r1, r5
 800acaa:	4620      	mov	r0, r4
 800acac:	f001 f90a 	bl	800bec4 <__lshift>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	9b00      	ldr	r3, [sp, #0]
 800acb8:	444b      	add	r3, r9
 800acba:	9307      	str	r3, [sp, #28]
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	46b8      	mov	r8, r7
 800acc4:	9306      	str	r3, [sp, #24]
 800acc6:	4607      	mov	r7, r0
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	4631      	mov	r1, r6
 800accc:	3b01      	subs	r3, #1
 800acce:	4658      	mov	r0, fp
 800acd0:	9302      	str	r3, [sp, #8]
 800acd2:	f7ff fa67 	bl	800a1a4 <quorem>
 800acd6:	4603      	mov	r3, r0
 800acd8:	3330      	adds	r3, #48	; 0x30
 800acda:	9004      	str	r0, [sp, #16]
 800acdc:	4641      	mov	r1, r8
 800acde:	4658      	mov	r0, fp
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	f001 f95b 	bl	800bf9c <__mcmp>
 800ace6:	463a      	mov	r2, r7
 800ace8:	4681      	mov	r9, r0
 800acea:	4631      	mov	r1, r6
 800acec:	4620      	mov	r0, r4
 800acee:	f001 f971 	bl	800bfd4 <__mdiff>
 800acf2:	68c2      	ldr	r2, [r0, #12]
 800acf4:	9b08      	ldr	r3, [sp, #32]
 800acf6:	4605      	mov	r5, r0
 800acf8:	bb02      	cbnz	r2, 800ad3c <_dtoa_r+0xa7c>
 800acfa:	4601      	mov	r1, r0
 800acfc:	4658      	mov	r0, fp
 800acfe:	f001 f94d 	bl	800bf9c <__mcmp>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	4602      	mov	r2, r0
 800ad06:	4629      	mov	r1, r5
 800ad08:	4620      	mov	r0, r4
 800ad0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ad0e:	f000 febd 	bl	800ba8c <_Bfree>
 800ad12:	9b05      	ldr	r3, [sp, #20]
 800ad14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad16:	9d01      	ldr	r5, [sp, #4]
 800ad18:	ea43 0102 	orr.w	r1, r3, r2
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	9b08      	ldr	r3, [sp, #32]
 800ad22:	d10d      	bne.n	800ad40 <_dtoa_r+0xa80>
 800ad24:	2b39      	cmp	r3, #57	; 0x39
 800ad26:	d029      	beq.n	800ad7c <_dtoa_r+0xabc>
 800ad28:	f1b9 0f00 	cmp.w	r9, #0
 800ad2c:	dd01      	ble.n	800ad32 <_dtoa_r+0xa72>
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	3331      	adds	r3, #49	; 0x31
 800ad32:	9a02      	ldr	r2, [sp, #8]
 800ad34:	7013      	strb	r3, [r2, #0]
 800ad36:	e774      	b.n	800ac22 <_dtoa_r+0x962>
 800ad38:	4638      	mov	r0, r7
 800ad3a:	e7b9      	b.n	800acb0 <_dtoa_r+0x9f0>
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	e7e2      	b.n	800ad06 <_dtoa_r+0xa46>
 800ad40:	f1b9 0f00 	cmp.w	r9, #0
 800ad44:	db06      	blt.n	800ad54 <_dtoa_r+0xa94>
 800ad46:	9905      	ldr	r1, [sp, #20]
 800ad48:	ea41 0909 	orr.w	r9, r1, r9
 800ad4c:	9906      	ldr	r1, [sp, #24]
 800ad4e:	ea59 0101 	orrs.w	r1, r9, r1
 800ad52:	d120      	bne.n	800ad96 <_dtoa_r+0xad6>
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	ddec      	ble.n	800ad32 <_dtoa_r+0xa72>
 800ad58:	4659      	mov	r1, fp
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	9301      	str	r3, [sp, #4]
 800ad60:	f001 f8b0 	bl	800bec4 <__lshift>
 800ad64:	4631      	mov	r1, r6
 800ad66:	4683      	mov	fp, r0
 800ad68:	f001 f918 	bl	800bf9c <__mcmp>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	dc02      	bgt.n	800ad78 <_dtoa_r+0xab8>
 800ad72:	d1de      	bne.n	800ad32 <_dtoa_r+0xa72>
 800ad74:	07da      	lsls	r2, r3, #31
 800ad76:	d5dc      	bpl.n	800ad32 <_dtoa_r+0xa72>
 800ad78:	2b39      	cmp	r3, #57	; 0x39
 800ad7a:	d1d8      	bne.n	800ad2e <_dtoa_r+0xa6e>
 800ad7c:	9a02      	ldr	r2, [sp, #8]
 800ad7e:	2339      	movs	r3, #57	; 0x39
 800ad80:	7013      	strb	r3, [r2, #0]
 800ad82:	462b      	mov	r3, r5
 800ad84:	461d      	mov	r5, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad8c:	2a39      	cmp	r2, #57	; 0x39
 800ad8e:	d050      	beq.n	800ae32 <_dtoa_r+0xb72>
 800ad90:	3201      	adds	r2, #1
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	e745      	b.n	800ac22 <_dtoa_r+0x962>
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	dd03      	ble.n	800ada2 <_dtoa_r+0xae2>
 800ad9a:	2b39      	cmp	r3, #57	; 0x39
 800ad9c:	d0ee      	beq.n	800ad7c <_dtoa_r+0xabc>
 800ad9e:	3301      	adds	r3, #1
 800ada0:	e7c7      	b.n	800ad32 <_dtoa_r+0xa72>
 800ada2:	9a01      	ldr	r2, [sp, #4]
 800ada4:	9907      	ldr	r1, [sp, #28]
 800ada6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800adaa:	428a      	cmp	r2, r1
 800adac:	d02a      	beq.n	800ae04 <_dtoa_r+0xb44>
 800adae:	4659      	mov	r1, fp
 800adb0:	2300      	movs	r3, #0
 800adb2:	220a      	movs	r2, #10
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fe8b 	bl	800bad0 <__multadd>
 800adba:	45b8      	cmp	r8, r7
 800adbc:	4683      	mov	fp, r0
 800adbe:	f04f 0300 	mov.w	r3, #0
 800adc2:	f04f 020a 	mov.w	r2, #10
 800adc6:	4641      	mov	r1, r8
 800adc8:	4620      	mov	r0, r4
 800adca:	d107      	bne.n	800addc <_dtoa_r+0xb1c>
 800adcc:	f000 fe80 	bl	800bad0 <__multadd>
 800add0:	4680      	mov	r8, r0
 800add2:	4607      	mov	r7, r0
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	e775      	b.n	800acc8 <_dtoa_r+0xa08>
 800addc:	f000 fe78 	bl	800bad0 <__multadd>
 800ade0:	4639      	mov	r1, r7
 800ade2:	4680      	mov	r8, r0
 800ade4:	2300      	movs	r3, #0
 800ade6:	220a      	movs	r2, #10
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fe71 	bl	800bad0 <__multadd>
 800adee:	4607      	mov	r7, r0
 800adf0:	e7f0      	b.n	800add4 <_dtoa_r+0xb14>
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	9a00      	ldr	r2, [sp, #0]
 800adf8:	bfcc      	ite	gt
 800adfa:	464d      	movgt	r5, r9
 800adfc:	2501      	movle	r5, #1
 800adfe:	4415      	add	r5, r2
 800ae00:	f04f 0800 	mov.w	r8, #0
 800ae04:	4659      	mov	r1, fp
 800ae06:	2201      	movs	r2, #1
 800ae08:	4620      	mov	r0, r4
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	f001 f85a 	bl	800bec4 <__lshift>
 800ae10:	4631      	mov	r1, r6
 800ae12:	4683      	mov	fp, r0
 800ae14:	f001 f8c2 	bl	800bf9c <__mcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	dcb2      	bgt.n	800ad82 <_dtoa_r+0xac2>
 800ae1c:	d102      	bne.n	800ae24 <_dtoa_r+0xb64>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	07db      	lsls	r3, r3, #31
 800ae22:	d4ae      	bmi.n	800ad82 <_dtoa_r+0xac2>
 800ae24:	462b      	mov	r3, r5
 800ae26:	461d      	mov	r5, r3
 800ae28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae2c:	2a30      	cmp	r2, #48	; 0x30
 800ae2e:	d0fa      	beq.n	800ae26 <_dtoa_r+0xb66>
 800ae30:	e6f7      	b.n	800ac22 <_dtoa_r+0x962>
 800ae32:	9a00      	ldr	r2, [sp, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d1a5      	bne.n	800ad84 <_dtoa_r+0xac4>
 800ae38:	f10a 0a01 	add.w	sl, sl, #1
 800ae3c:	2331      	movs	r3, #49	; 0x31
 800ae3e:	e779      	b.n	800ad34 <_dtoa_r+0xa74>
 800ae40:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <_dtoa_r+0xbd0>)
 800ae42:	f7ff baaf 	b.w	800a3a4 <_dtoa_r+0xe4>
 800ae46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f47f aa86 	bne.w	800a35a <_dtoa_r+0x9a>
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <_dtoa_r+0xbd4>)
 800ae50:	f7ff baa8 	b.w	800a3a4 <_dtoa_r+0xe4>
 800ae54:	f1b9 0f00 	cmp.w	r9, #0
 800ae58:	dc03      	bgt.n	800ae62 <_dtoa_r+0xba2>
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	f73f aec9 	bgt.w	800abf4 <_dtoa_r+0x934>
 800ae62:	9d00      	ldr	r5, [sp, #0]
 800ae64:	4631      	mov	r1, r6
 800ae66:	4658      	mov	r0, fp
 800ae68:	f7ff f99c 	bl	800a1a4 <quorem>
 800ae6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae70:	f805 3b01 	strb.w	r3, [r5], #1
 800ae74:	9a00      	ldr	r2, [sp, #0]
 800ae76:	1aaa      	subs	r2, r5, r2
 800ae78:	4591      	cmp	r9, r2
 800ae7a:	ddba      	ble.n	800adf2 <_dtoa_r+0xb32>
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	2300      	movs	r3, #0
 800ae80:	220a      	movs	r2, #10
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 fe24 	bl	800bad0 <__multadd>
 800ae88:	4683      	mov	fp, r0
 800ae8a:	e7eb      	b.n	800ae64 <_dtoa_r+0xba4>
 800ae8c:	0800d3ec 	.word	0x0800d3ec
 800ae90:	0800d1e8 	.word	0x0800d1e8
 800ae94:	0800d369 	.word	0x0800d369

0800ae98 <__sflush_r>:
 800ae98:	898a      	ldrh	r2, [r1, #12]
 800ae9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	4605      	mov	r5, r0
 800aea0:	0710      	lsls	r0, r2, #28
 800aea2:	460c      	mov	r4, r1
 800aea4:	d458      	bmi.n	800af58 <__sflush_r+0xc0>
 800aea6:	684b      	ldr	r3, [r1, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc05      	bgt.n	800aeb8 <__sflush_r+0x20>
 800aeac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dc02      	bgt.n	800aeb8 <__sflush_r+0x20>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeba:	2e00      	cmp	r6, #0
 800aebc:	d0f9      	beq.n	800aeb2 <__sflush_r+0x1a>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aec4:	682f      	ldr	r7, [r5, #0]
 800aec6:	602b      	str	r3, [r5, #0]
 800aec8:	d032      	beq.n	800af30 <__sflush_r+0x98>
 800aeca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	075a      	lsls	r2, r3, #29
 800aed0:	d505      	bpl.n	800aede <__sflush_r+0x46>
 800aed2:	6863      	ldr	r3, [r4, #4]
 800aed4:	1ac0      	subs	r0, r0, r3
 800aed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aed8:	b10b      	cbz	r3, 800aede <__sflush_r+0x46>
 800aeda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aedc:	1ac0      	subs	r0, r0, r3
 800aede:	2300      	movs	r3, #0
 800aee0:	4602      	mov	r2, r0
 800aee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aee4:	6a21      	ldr	r1, [r4, #32]
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b0      	blx	r6
 800aeea:	1c43      	adds	r3, r0, #1
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	d106      	bne.n	800aefe <__sflush_r+0x66>
 800aef0:	6829      	ldr	r1, [r5, #0]
 800aef2:	291d      	cmp	r1, #29
 800aef4:	d82c      	bhi.n	800af50 <__sflush_r+0xb8>
 800aef6:	4a2a      	ldr	r2, [pc, #168]	; (800afa0 <__sflush_r+0x108>)
 800aef8:	40ca      	lsrs	r2, r1
 800aefa:	07d6      	lsls	r6, r2, #31
 800aefc:	d528      	bpl.n	800af50 <__sflush_r+0xb8>
 800aefe:	2200      	movs	r2, #0
 800af00:	6062      	str	r2, [r4, #4]
 800af02:	04d9      	lsls	r1, r3, #19
 800af04:	6922      	ldr	r2, [r4, #16]
 800af06:	6022      	str	r2, [r4, #0]
 800af08:	d504      	bpl.n	800af14 <__sflush_r+0x7c>
 800af0a:	1c42      	adds	r2, r0, #1
 800af0c:	d101      	bne.n	800af12 <__sflush_r+0x7a>
 800af0e:	682b      	ldr	r3, [r5, #0]
 800af10:	b903      	cbnz	r3, 800af14 <__sflush_r+0x7c>
 800af12:	6560      	str	r0, [r4, #84]	; 0x54
 800af14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af16:	602f      	str	r7, [r5, #0]
 800af18:	2900      	cmp	r1, #0
 800af1a:	d0ca      	beq.n	800aeb2 <__sflush_r+0x1a>
 800af1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af20:	4299      	cmp	r1, r3
 800af22:	d002      	beq.n	800af2a <__sflush_r+0x92>
 800af24:	4628      	mov	r0, r5
 800af26:	f001 fa3b 	bl	800c3a0 <_free_r>
 800af2a:	2000      	movs	r0, #0
 800af2c:	6360      	str	r0, [r4, #52]	; 0x34
 800af2e:	e7c1      	b.n	800aeb4 <__sflush_r+0x1c>
 800af30:	6a21      	ldr	r1, [r4, #32]
 800af32:	2301      	movs	r3, #1
 800af34:	4628      	mov	r0, r5
 800af36:	47b0      	blx	r6
 800af38:	1c41      	adds	r1, r0, #1
 800af3a:	d1c7      	bne.n	800aecc <__sflush_r+0x34>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0c4      	beq.n	800aecc <__sflush_r+0x34>
 800af42:	2b1d      	cmp	r3, #29
 800af44:	d001      	beq.n	800af4a <__sflush_r+0xb2>
 800af46:	2b16      	cmp	r3, #22
 800af48:	d101      	bne.n	800af4e <__sflush_r+0xb6>
 800af4a:	602f      	str	r7, [r5, #0]
 800af4c:	e7b1      	b.n	800aeb2 <__sflush_r+0x1a>
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	e7ad      	b.n	800aeb4 <__sflush_r+0x1c>
 800af58:	690f      	ldr	r7, [r1, #16]
 800af5a:	2f00      	cmp	r7, #0
 800af5c:	d0a9      	beq.n	800aeb2 <__sflush_r+0x1a>
 800af5e:	0793      	lsls	r3, r2, #30
 800af60:	680e      	ldr	r6, [r1, #0]
 800af62:	bf08      	it	eq
 800af64:	694b      	ldreq	r3, [r1, #20]
 800af66:	600f      	str	r7, [r1, #0]
 800af68:	bf18      	it	ne
 800af6a:	2300      	movne	r3, #0
 800af6c:	eba6 0807 	sub.w	r8, r6, r7
 800af70:	608b      	str	r3, [r1, #8]
 800af72:	f1b8 0f00 	cmp.w	r8, #0
 800af76:	dd9c      	ble.n	800aeb2 <__sflush_r+0x1a>
 800af78:	6a21      	ldr	r1, [r4, #32]
 800af7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af7c:	4643      	mov	r3, r8
 800af7e:	463a      	mov	r2, r7
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	2800      	cmp	r0, #0
 800af86:	dc06      	bgt.n	800af96 <__sflush_r+0xfe>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8e:	81a3      	strh	r3, [r4, #12]
 800af90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af94:	e78e      	b.n	800aeb4 <__sflush_r+0x1c>
 800af96:	4407      	add	r7, r0
 800af98:	eba8 0800 	sub.w	r8, r8, r0
 800af9c:	e7e9      	b.n	800af72 <__sflush_r+0xda>
 800af9e:	bf00      	nop
 800afa0:	20400001 	.word	0x20400001

0800afa4 <_fflush_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	690b      	ldr	r3, [r1, #16]
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b913      	cbnz	r3, 800afb4 <_fflush_r+0x10>
 800afae:	2500      	movs	r5, #0
 800afb0:	4628      	mov	r0, r5
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	b118      	cbz	r0, 800afbe <_fflush_r+0x1a>
 800afb6:	6983      	ldr	r3, [r0, #24]
 800afb8:	b90b      	cbnz	r3, 800afbe <_fflush_r+0x1a>
 800afba:	f000 f887 	bl	800b0cc <__sinit>
 800afbe:	4b14      	ldr	r3, [pc, #80]	; (800b010 <_fflush_r+0x6c>)
 800afc0:	429c      	cmp	r4, r3
 800afc2:	d11b      	bne.n	800affc <_fflush_r+0x58>
 800afc4:	686c      	ldr	r4, [r5, #4]
 800afc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0ef      	beq.n	800afae <_fflush_r+0xa>
 800afce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afd0:	07d0      	lsls	r0, r2, #31
 800afd2:	d404      	bmi.n	800afde <_fflush_r+0x3a>
 800afd4:	0599      	lsls	r1, r3, #22
 800afd6:	d402      	bmi.n	800afde <_fflush_r+0x3a>
 800afd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afda:	f000 fc88 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800afde:	4628      	mov	r0, r5
 800afe0:	4621      	mov	r1, r4
 800afe2:	f7ff ff59 	bl	800ae98 <__sflush_r>
 800afe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afe8:	07da      	lsls	r2, r3, #31
 800afea:	4605      	mov	r5, r0
 800afec:	d4e0      	bmi.n	800afb0 <_fflush_r+0xc>
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	059b      	lsls	r3, r3, #22
 800aff2:	d4dd      	bmi.n	800afb0 <_fflush_r+0xc>
 800aff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff6:	f000 fc7b 	bl	800b8f0 <__retarget_lock_release_recursive>
 800affa:	e7d9      	b.n	800afb0 <_fflush_r+0xc>
 800affc:	4b05      	ldr	r3, [pc, #20]	; (800b014 <_fflush_r+0x70>)
 800affe:	429c      	cmp	r4, r3
 800b000:	d101      	bne.n	800b006 <_fflush_r+0x62>
 800b002:	68ac      	ldr	r4, [r5, #8]
 800b004:	e7df      	b.n	800afc6 <_fflush_r+0x22>
 800b006:	4b04      	ldr	r3, [pc, #16]	; (800b018 <_fflush_r+0x74>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	bf08      	it	eq
 800b00c:	68ec      	ldreq	r4, [r5, #12]
 800b00e:	e7da      	b.n	800afc6 <_fflush_r+0x22>
 800b010:	0800d420 	.word	0x0800d420
 800b014:	0800d440 	.word	0x0800d440
 800b018:	0800d400 	.word	0x0800d400

0800b01c <std>:
 800b01c:	2300      	movs	r3, #0
 800b01e:	b510      	push	{r4, lr}
 800b020:	4604      	mov	r4, r0
 800b022:	e9c0 3300 	strd	r3, r3, [r0]
 800b026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b02a:	6083      	str	r3, [r0, #8]
 800b02c:	8181      	strh	r1, [r0, #12]
 800b02e:	6643      	str	r3, [r0, #100]	; 0x64
 800b030:	81c2      	strh	r2, [r0, #14]
 800b032:	6183      	str	r3, [r0, #24]
 800b034:	4619      	mov	r1, r3
 800b036:	2208      	movs	r2, #8
 800b038:	305c      	adds	r0, #92	; 0x5c
 800b03a:	f7fd fa0b 	bl	8008454 <memset>
 800b03e:	4b05      	ldr	r3, [pc, #20]	; (800b054 <std+0x38>)
 800b040:	6263      	str	r3, [r4, #36]	; 0x24
 800b042:	4b05      	ldr	r3, [pc, #20]	; (800b058 <std+0x3c>)
 800b044:	62a3      	str	r3, [r4, #40]	; 0x28
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <std+0x40>)
 800b048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b04a:	4b05      	ldr	r3, [pc, #20]	; (800b060 <std+0x44>)
 800b04c:	6224      	str	r4, [r4, #32]
 800b04e:	6323      	str	r3, [r4, #48]	; 0x30
 800b050:	bd10      	pop	{r4, pc}
 800b052:	bf00      	nop
 800b054:	0800ca91 	.word	0x0800ca91
 800b058:	0800cab3 	.word	0x0800cab3
 800b05c:	0800caeb 	.word	0x0800caeb
 800b060:	0800cb0f 	.word	0x0800cb0f

0800b064 <_cleanup_r>:
 800b064:	4901      	ldr	r1, [pc, #4]	; (800b06c <_cleanup_r+0x8>)
 800b066:	f000 b8af 	b.w	800b1c8 <_fwalk_reent>
 800b06a:	bf00      	nop
 800b06c:	0800afa5 	.word	0x0800afa5

0800b070 <__sfmoreglue>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	1e4a      	subs	r2, r1, #1
 800b074:	2568      	movs	r5, #104	; 0x68
 800b076:	4355      	muls	r5, r2
 800b078:	460e      	mov	r6, r1
 800b07a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b07e:	f001 f9df 	bl	800c440 <_malloc_r>
 800b082:	4604      	mov	r4, r0
 800b084:	b140      	cbz	r0, 800b098 <__sfmoreglue+0x28>
 800b086:	2100      	movs	r1, #0
 800b088:	e9c0 1600 	strd	r1, r6, [r0]
 800b08c:	300c      	adds	r0, #12
 800b08e:	60a0      	str	r0, [r4, #8]
 800b090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b094:	f7fd f9de 	bl	8008454 <memset>
 800b098:	4620      	mov	r0, r4
 800b09a:	bd70      	pop	{r4, r5, r6, pc}

0800b09c <__sfp_lock_acquire>:
 800b09c:	4801      	ldr	r0, [pc, #4]	; (800b0a4 <__sfp_lock_acquire+0x8>)
 800b09e:	f000 bc26 	b.w	800b8ee <__retarget_lock_acquire_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	200005e8 	.word	0x200005e8

0800b0a8 <__sfp_lock_release>:
 800b0a8:	4801      	ldr	r0, [pc, #4]	; (800b0b0 <__sfp_lock_release+0x8>)
 800b0aa:	f000 bc21 	b.w	800b8f0 <__retarget_lock_release_recursive>
 800b0ae:	bf00      	nop
 800b0b0:	200005e8 	.word	0x200005e8

0800b0b4 <__sinit_lock_acquire>:
 800b0b4:	4801      	ldr	r0, [pc, #4]	; (800b0bc <__sinit_lock_acquire+0x8>)
 800b0b6:	f000 bc1a 	b.w	800b8ee <__retarget_lock_acquire_recursive>
 800b0ba:	bf00      	nop
 800b0bc:	200005e3 	.word	0x200005e3

0800b0c0 <__sinit_lock_release>:
 800b0c0:	4801      	ldr	r0, [pc, #4]	; (800b0c8 <__sinit_lock_release+0x8>)
 800b0c2:	f000 bc15 	b.w	800b8f0 <__retarget_lock_release_recursive>
 800b0c6:	bf00      	nop
 800b0c8:	200005e3 	.word	0x200005e3

0800b0cc <__sinit>:
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	f7ff fff0 	bl	800b0b4 <__sinit_lock_acquire>
 800b0d4:	69a3      	ldr	r3, [r4, #24]
 800b0d6:	b11b      	cbz	r3, 800b0e0 <__sinit+0x14>
 800b0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0dc:	f7ff bff0 	b.w	800b0c0 <__sinit_lock_release>
 800b0e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0e4:	6523      	str	r3, [r4, #80]	; 0x50
 800b0e6:	4b13      	ldr	r3, [pc, #76]	; (800b134 <__sinit+0x68>)
 800b0e8:	4a13      	ldr	r2, [pc, #76]	; (800b138 <__sinit+0x6c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	bf04      	itt	eq
 800b0f2:	2301      	moveq	r3, #1
 800b0f4:	61a3      	streq	r3, [r4, #24]
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 f820 	bl	800b13c <__sfp>
 800b0fc:	6060      	str	r0, [r4, #4]
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 f81c 	bl	800b13c <__sfp>
 800b104:	60a0      	str	r0, [r4, #8]
 800b106:	4620      	mov	r0, r4
 800b108:	f000 f818 	bl	800b13c <__sfp>
 800b10c:	2200      	movs	r2, #0
 800b10e:	60e0      	str	r0, [r4, #12]
 800b110:	2104      	movs	r1, #4
 800b112:	6860      	ldr	r0, [r4, #4]
 800b114:	f7ff ff82 	bl	800b01c <std>
 800b118:	68a0      	ldr	r0, [r4, #8]
 800b11a:	2201      	movs	r2, #1
 800b11c:	2109      	movs	r1, #9
 800b11e:	f7ff ff7d 	bl	800b01c <std>
 800b122:	68e0      	ldr	r0, [r4, #12]
 800b124:	2202      	movs	r2, #2
 800b126:	2112      	movs	r1, #18
 800b128:	f7ff ff78 	bl	800b01c <std>
 800b12c:	2301      	movs	r3, #1
 800b12e:	61a3      	str	r3, [r4, #24]
 800b130:	e7d2      	b.n	800b0d8 <__sinit+0xc>
 800b132:	bf00      	nop
 800b134:	0800d1d4 	.word	0x0800d1d4
 800b138:	0800b065 	.word	0x0800b065

0800b13c <__sfp>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	4607      	mov	r7, r0
 800b140:	f7ff ffac 	bl	800b09c <__sfp_lock_acquire>
 800b144:	4b1e      	ldr	r3, [pc, #120]	; (800b1c0 <__sfp+0x84>)
 800b146:	681e      	ldr	r6, [r3, #0]
 800b148:	69b3      	ldr	r3, [r6, #24]
 800b14a:	b913      	cbnz	r3, 800b152 <__sfp+0x16>
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff ffbd 	bl	800b0cc <__sinit>
 800b152:	3648      	adds	r6, #72	; 0x48
 800b154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b158:	3b01      	subs	r3, #1
 800b15a:	d503      	bpl.n	800b164 <__sfp+0x28>
 800b15c:	6833      	ldr	r3, [r6, #0]
 800b15e:	b30b      	cbz	r3, 800b1a4 <__sfp+0x68>
 800b160:	6836      	ldr	r6, [r6, #0]
 800b162:	e7f7      	b.n	800b154 <__sfp+0x18>
 800b164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b168:	b9d5      	cbnz	r5, 800b1a0 <__sfp+0x64>
 800b16a:	4b16      	ldr	r3, [pc, #88]	; (800b1c4 <__sfp+0x88>)
 800b16c:	60e3      	str	r3, [r4, #12]
 800b16e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b172:	6665      	str	r5, [r4, #100]	; 0x64
 800b174:	f000 fbba 	bl	800b8ec <__retarget_lock_init_recursive>
 800b178:	f7ff ff96 	bl	800b0a8 <__sfp_lock_release>
 800b17c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b184:	6025      	str	r5, [r4, #0]
 800b186:	61a5      	str	r5, [r4, #24]
 800b188:	2208      	movs	r2, #8
 800b18a:	4629      	mov	r1, r5
 800b18c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b190:	f7fd f960 	bl	8008454 <memset>
 800b194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b19c:	4620      	mov	r0, r4
 800b19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a0:	3468      	adds	r4, #104	; 0x68
 800b1a2:	e7d9      	b.n	800b158 <__sfp+0x1c>
 800b1a4:	2104      	movs	r1, #4
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f7ff ff62 	bl	800b070 <__sfmoreglue>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	6030      	str	r0, [r6, #0]
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d1d5      	bne.n	800b160 <__sfp+0x24>
 800b1b4:	f7ff ff78 	bl	800b0a8 <__sfp_lock_release>
 800b1b8:	230c      	movs	r3, #12
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	e7ee      	b.n	800b19c <__sfp+0x60>
 800b1be:	bf00      	nop
 800b1c0:	0800d1d4 	.word	0x0800d1d4
 800b1c4:	ffff0001 	.word	0xffff0001

0800b1c8 <_fwalk_reent>:
 800b1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	4688      	mov	r8, r1
 800b1d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1d4:	2700      	movs	r7, #0
 800b1d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1da:	f1b9 0901 	subs.w	r9, r9, #1
 800b1de:	d505      	bpl.n	800b1ec <_fwalk_reent+0x24>
 800b1e0:	6824      	ldr	r4, [r4, #0]
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	d1f7      	bne.n	800b1d6 <_fwalk_reent+0xe>
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ec:	89ab      	ldrh	r3, [r5, #12]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d907      	bls.n	800b202 <_fwalk_reent+0x3a>
 800b1f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	d003      	beq.n	800b202 <_fwalk_reent+0x3a>
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	47c0      	blx	r8
 800b200:	4307      	orrs	r7, r0
 800b202:	3568      	adds	r5, #104	; 0x68
 800b204:	e7e9      	b.n	800b1da <_fwalk_reent+0x12>

0800b206 <rshift>:
 800b206:	6903      	ldr	r3, [r0, #16]
 800b208:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b20c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b210:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b214:	f100 0414 	add.w	r4, r0, #20
 800b218:	dd45      	ble.n	800b2a6 <rshift+0xa0>
 800b21a:	f011 011f 	ands.w	r1, r1, #31
 800b21e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b222:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b226:	d10c      	bne.n	800b242 <rshift+0x3c>
 800b228:	f100 0710 	add.w	r7, r0, #16
 800b22c:	4629      	mov	r1, r5
 800b22e:	42b1      	cmp	r1, r6
 800b230:	d334      	bcc.n	800b29c <rshift+0x96>
 800b232:	1a9b      	subs	r3, r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	1eea      	subs	r2, r5, #3
 800b238:	4296      	cmp	r6, r2
 800b23a:	bf38      	it	cc
 800b23c:	2300      	movcc	r3, #0
 800b23e:	4423      	add	r3, r4
 800b240:	e015      	b.n	800b26e <rshift+0x68>
 800b242:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b246:	f1c1 0820 	rsb	r8, r1, #32
 800b24a:	40cf      	lsrs	r7, r1
 800b24c:	f105 0e04 	add.w	lr, r5, #4
 800b250:	46a1      	mov	r9, r4
 800b252:	4576      	cmp	r6, lr
 800b254:	46f4      	mov	ip, lr
 800b256:	d815      	bhi.n	800b284 <rshift+0x7e>
 800b258:	1a9b      	subs	r3, r3, r2
 800b25a:	009a      	lsls	r2, r3, #2
 800b25c:	3a04      	subs	r2, #4
 800b25e:	3501      	adds	r5, #1
 800b260:	42ae      	cmp	r6, r5
 800b262:	bf38      	it	cc
 800b264:	2200      	movcc	r2, #0
 800b266:	18a3      	adds	r3, r4, r2
 800b268:	50a7      	str	r7, [r4, r2]
 800b26a:	b107      	cbz	r7, 800b26e <rshift+0x68>
 800b26c:	3304      	adds	r3, #4
 800b26e:	1b1a      	subs	r2, r3, r4
 800b270:	42a3      	cmp	r3, r4
 800b272:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b276:	bf08      	it	eq
 800b278:	2300      	moveq	r3, #0
 800b27a:	6102      	str	r2, [r0, #16]
 800b27c:	bf08      	it	eq
 800b27e:	6143      	streq	r3, [r0, #20]
 800b280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b284:	f8dc c000 	ldr.w	ip, [ip]
 800b288:	fa0c fc08 	lsl.w	ip, ip, r8
 800b28c:	ea4c 0707 	orr.w	r7, ip, r7
 800b290:	f849 7b04 	str.w	r7, [r9], #4
 800b294:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b298:	40cf      	lsrs	r7, r1
 800b29a:	e7da      	b.n	800b252 <rshift+0x4c>
 800b29c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2a4:	e7c3      	b.n	800b22e <rshift+0x28>
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	e7e1      	b.n	800b26e <rshift+0x68>

0800b2aa <__hexdig_fun>:
 800b2aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b2ae:	2b09      	cmp	r3, #9
 800b2b0:	d802      	bhi.n	800b2b8 <__hexdig_fun+0xe>
 800b2b2:	3820      	subs	r0, #32
 800b2b4:	b2c0      	uxtb	r0, r0
 800b2b6:	4770      	bx	lr
 800b2b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d801      	bhi.n	800b2c4 <__hexdig_fun+0x1a>
 800b2c0:	3847      	subs	r0, #71	; 0x47
 800b2c2:	e7f7      	b.n	800b2b4 <__hexdig_fun+0xa>
 800b2c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b2c8:	2b05      	cmp	r3, #5
 800b2ca:	d801      	bhi.n	800b2d0 <__hexdig_fun+0x26>
 800b2cc:	3827      	subs	r0, #39	; 0x27
 800b2ce:	e7f1      	b.n	800b2b4 <__hexdig_fun+0xa>
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	4770      	bx	lr

0800b2d4 <__gethex>:
 800b2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d8:	ed2d 8b02 	vpush	{d8}
 800b2dc:	b089      	sub	sp, #36	; 0x24
 800b2de:	ee08 0a10 	vmov	s16, r0
 800b2e2:	9304      	str	r3, [sp, #16]
 800b2e4:	4bbc      	ldr	r3, [pc, #752]	; (800b5d8 <__gethex+0x304>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	468b      	mov	fp, r1
 800b2ee:	4690      	mov	r8, r2
 800b2f0:	f7f4 ff7e 	bl	80001f0 <strlen>
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	f8db 2000 	ldr.w	r2, [fp]
 800b2fa:	4403      	add	r3, r0
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	1c93      	adds	r3, r2, #2
 800b306:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b30a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b30e:	32fe      	adds	r2, #254	; 0xfe
 800b310:	18d1      	adds	r1, r2, r3
 800b312:	461f      	mov	r7, r3
 800b314:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b318:	9100      	str	r1, [sp, #0]
 800b31a:	2830      	cmp	r0, #48	; 0x30
 800b31c:	d0f8      	beq.n	800b310 <__gethex+0x3c>
 800b31e:	f7ff ffc4 	bl	800b2aa <__hexdig_fun>
 800b322:	4604      	mov	r4, r0
 800b324:	2800      	cmp	r0, #0
 800b326:	d13a      	bne.n	800b39e <__gethex+0xca>
 800b328:	9901      	ldr	r1, [sp, #4]
 800b32a:	4652      	mov	r2, sl
 800b32c:	4638      	mov	r0, r7
 800b32e:	f001 fbf2 	bl	800cb16 <strncmp>
 800b332:	4605      	mov	r5, r0
 800b334:	2800      	cmp	r0, #0
 800b336:	d168      	bne.n	800b40a <__gethex+0x136>
 800b338:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b33c:	eb07 060a 	add.w	r6, r7, sl
 800b340:	f7ff ffb3 	bl	800b2aa <__hexdig_fun>
 800b344:	2800      	cmp	r0, #0
 800b346:	d062      	beq.n	800b40e <__gethex+0x13a>
 800b348:	4633      	mov	r3, r6
 800b34a:	7818      	ldrb	r0, [r3, #0]
 800b34c:	2830      	cmp	r0, #48	; 0x30
 800b34e:	461f      	mov	r7, r3
 800b350:	f103 0301 	add.w	r3, r3, #1
 800b354:	d0f9      	beq.n	800b34a <__gethex+0x76>
 800b356:	f7ff ffa8 	bl	800b2aa <__hexdig_fun>
 800b35a:	2301      	movs	r3, #1
 800b35c:	fab0 f480 	clz	r4, r0
 800b360:	0964      	lsrs	r4, r4, #5
 800b362:	4635      	mov	r5, r6
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	463a      	mov	r2, r7
 800b368:	4616      	mov	r6, r2
 800b36a:	3201      	adds	r2, #1
 800b36c:	7830      	ldrb	r0, [r6, #0]
 800b36e:	f7ff ff9c 	bl	800b2aa <__hexdig_fun>
 800b372:	2800      	cmp	r0, #0
 800b374:	d1f8      	bne.n	800b368 <__gethex+0x94>
 800b376:	9901      	ldr	r1, [sp, #4]
 800b378:	4652      	mov	r2, sl
 800b37a:	4630      	mov	r0, r6
 800b37c:	f001 fbcb 	bl	800cb16 <strncmp>
 800b380:	b980      	cbnz	r0, 800b3a4 <__gethex+0xd0>
 800b382:	b94d      	cbnz	r5, 800b398 <__gethex+0xc4>
 800b384:	eb06 050a 	add.w	r5, r6, sl
 800b388:	462a      	mov	r2, r5
 800b38a:	4616      	mov	r6, r2
 800b38c:	3201      	adds	r2, #1
 800b38e:	7830      	ldrb	r0, [r6, #0]
 800b390:	f7ff ff8b 	bl	800b2aa <__hexdig_fun>
 800b394:	2800      	cmp	r0, #0
 800b396:	d1f8      	bne.n	800b38a <__gethex+0xb6>
 800b398:	1bad      	subs	r5, r5, r6
 800b39a:	00ad      	lsls	r5, r5, #2
 800b39c:	e004      	b.n	800b3a8 <__gethex+0xd4>
 800b39e:	2400      	movs	r4, #0
 800b3a0:	4625      	mov	r5, r4
 800b3a2:	e7e0      	b.n	800b366 <__gethex+0x92>
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	d1f7      	bne.n	800b398 <__gethex+0xc4>
 800b3a8:	7833      	ldrb	r3, [r6, #0]
 800b3aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3ae:	2b50      	cmp	r3, #80	; 0x50
 800b3b0:	d13b      	bne.n	800b42a <__gethex+0x156>
 800b3b2:	7873      	ldrb	r3, [r6, #1]
 800b3b4:	2b2b      	cmp	r3, #43	; 0x2b
 800b3b6:	d02c      	beq.n	800b412 <__gethex+0x13e>
 800b3b8:	2b2d      	cmp	r3, #45	; 0x2d
 800b3ba:	d02e      	beq.n	800b41a <__gethex+0x146>
 800b3bc:	1c71      	adds	r1, r6, #1
 800b3be:	f04f 0900 	mov.w	r9, #0
 800b3c2:	7808      	ldrb	r0, [r1, #0]
 800b3c4:	f7ff ff71 	bl	800b2aa <__hexdig_fun>
 800b3c8:	1e43      	subs	r3, r0, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b18      	cmp	r3, #24
 800b3ce:	d82c      	bhi.n	800b42a <__gethex+0x156>
 800b3d0:	f1a0 0210 	sub.w	r2, r0, #16
 800b3d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3d8:	f7ff ff67 	bl	800b2aa <__hexdig_fun>
 800b3dc:	1e43      	subs	r3, r0, #1
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b18      	cmp	r3, #24
 800b3e2:	d91d      	bls.n	800b420 <__gethex+0x14c>
 800b3e4:	f1b9 0f00 	cmp.w	r9, #0
 800b3e8:	d000      	beq.n	800b3ec <__gethex+0x118>
 800b3ea:	4252      	negs	r2, r2
 800b3ec:	4415      	add	r5, r2
 800b3ee:	f8cb 1000 	str.w	r1, [fp]
 800b3f2:	b1e4      	cbz	r4, 800b42e <__gethex+0x15a>
 800b3f4:	9b00      	ldr	r3, [sp, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bf14      	ite	ne
 800b3fa:	2700      	movne	r7, #0
 800b3fc:	2706      	moveq	r7, #6
 800b3fe:	4638      	mov	r0, r7
 800b400:	b009      	add	sp, #36	; 0x24
 800b402:	ecbd 8b02 	vpop	{d8}
 800b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40a:	463e      	mov	r6, r7
 800b40c:	4625      	mov	r5, r4
 800b40e:	2401      	movs	r4, #1
 800b410:	e7ca      	b.n	800b3a8 <__gethex+0xd4>
 800b412:	f04f 0900 	mov.w	r9, #0
 800b416:	1cb1      	adds	r1, r6, #2
 800b418:	e7d3      	b.n	800b3c2 <__gethex+0xee>
 800b41a:	f04f 0901 	mov.w	r9, #1
 800b41e:	e7fa      	b.n	800b416 <__gethex+0x142>
 800b420:	230a      	movs	r3, #10
 800b422:	fb03 0202 	mla	r2, r3, r2, r0
 800b426:	3a10      	subs	r2, #16
 800b428:	e7d4      	b.n	800b3d4 <__gethex+0x100>
 800b42a:	4631      	mov	r1, r6
 800b42c:	e7df      	b.n	800b3ee <__gethex+0x11a>
 800b42e:	1bf3      	subs	r3, r6, r7
 800b430:	3b01      	subs	r3, #1
 800b432:	4621      	mov	r1, r4
 800b434:	2b07      	cmp	r3, #7
 800b436:	dc0b      	bgt.n	800b450 <__gethex+0x17c>
 800b438:	ee18 0a10 	vmov	r0, s16
 800b43c:	f000 fae6 	bl	800ba0c <_Balloc>
 800b440:	4604      	mov	r4, r0
 800b442:	b940      	cbnz	r0, 800b456 <__gethex+0x182>
 800b444:	4b65      	ldr	r3, [pc, #404]	; (800b5dc <__gethex+0x308>)
 800b446:	4602      	mov	r2, r0
 800b448:	21de      	movs	r1, #222	; 0xde
 800b44a:	4865      	ldr	r0, [pc, #404]	; (800b5e0 <__gethex+0x30c>)
 800b44c:	f001 fb94 	bl	800cb78 <__assert_func>
 800b450:	3101      	adds	r1, #1
 800b452:	105b      	asrs	r3, r3, #1
 800b454:	e7ee      	b.n	800b434 <__gethex+0x160>
 800b456:	f100 0914 	add.w	r9, r0, #20
 800b45a:	f04f 0b00 	mov.w	fp, #0
 800b45e:	f1ca 0301 	rsb	r3, sl, #1
 800b462:	f8cd 9008 	str.w	r9, [sp, #8]
 800b466:	f8cd b000 	str.w	fp, [sp]
 800b46a:	9306      	str	r3, [sp, #24]
 800b46c:	42b7      	cmp	r7, r6
 800b46e:	d340      	bcc.n	800b4f2 <__gethex+0x21e>
 800b470:	9802      	ldr	r0, [sp, #8]
 800b472:	9b00      	ldr	r3, [sp, #0]
 800b474:	f840 3b04 	str.w	r3, [r0], #4
 800b478:	eba0 0009 	sub.w	r0, r0, r9
 800b47c:	1080      	asrs	r0, r0, #2
 800b47e:	0146      	lsls	r6, r0, #5
 800b480:	6120      	str	r0, [r4, #16]
 800b482:	4618      	mov	r0, r3
 800b484:	f000 fbb8 	bl	800bbf8 <__hi0bits>
 800b488:	1a30      	subs	r0, r6, r0
 800b48a:	f8d8 6000 	ldr.w	r6, [r8]
 800b48e:	42b0      	cmp	r0, r6
 800b490:	dd63      	ble.n	800b55a <__gethex+0x286>
 800b492:	1b87      	subs	r7, r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	4620      	mov	r0, r4
 800b498:	f000 ff52 	bl	800c340 <__any_on>
 800b49c:	4682      	mov	sl, r0
 800b49e:	b1a8      	cbz	r0, 800b4cc <__gethex+0x1f8>
 800b4a0:	1e7b      	subs	r3, r7, #1
 800b4a2:	1159      	asrs	r1, r3, #5
 800b4a4:	f003 021f 	and.w	r2, r3, #31
 800b4a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b4ac:	f04f 0a01 	mov.w	sl, #1
 800b4b0:	fa0a f202 	lsl.w	r2, sl, r2
 800b4b4:	420a      	tst	r2, r1
 800b4b6:	d009      	beq.n	800b4cc <__gethex+0x1f8>
 800b4b8:	4553      	cmp	r3, sl
 800b4ba:	dd05      	ble.n	800b4c8 <__gethex+0x1f4>
 800b4bc:	1eb9      	subs	r1, r7, #2
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f000 ff3e 	bl	800c340 <__any_on>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d145      	bne.n	800b554 <__gethex+0x280>
 800b4c8:	f04f 0a02 	mov.w	sl, #2
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f7ff fe99 	bl	800b206 <rshift>
 800b4d4:	443d      	add	r5, r7
 800b4d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4da:	42ab      	cmp	r3, r5
 800b4dc:	da4c      	bge.n	800b578 <__gethex+0x2a4>
 800b4de:	ee18 0a10 	vmov	r0, s16
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	f000 fad2 	bl	800ba8c <_Bfree>
 800b4e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	27a3      	movs	r7, #163	; 0xa3
 800b4f0:	e785      	b.n	800b3fe <__gethex+0x12a>
 800b4f2:	1e73      	subs	r3, r6, #1
 800b4f4:	9a05      	ldr	r2, [sp, #20]
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d019      	beq.n	800b534 <__gethex+0x260>
 800b500:	f1bb 0f20 	cmp.w	fp, #32
 800b504:	d107      	bne.n	800b516 <__gethex+0x242>
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	9a00      	ldr	r2, [sp, #0]
 800b50a:	f843 2b04 	str.w	r2, [r3], #4
 800b50e:	9302      	str	r3, [sp, #8]
 800b510:	2300      	movs	r3, #0
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	469b      	mov	fp, r3
 800b516:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b51a:	f7ff fec6 	bl	800b2aa <__hexdig_fun>
 800b51e:	9b00      	ldr	r3, [sp, #0]
 800b520:	f000 000f 	and.w	r0, r0, #15
 800b524:	fa00 f00b 	lsl.w	r0, r0, fp
 800b528:	4303      	orrs	r3, r0
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	f10b 0b04 	add.w	fp, fp, #4
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	e00d      	b.n	800b550 <__gethex+0x27c>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	9a06      	ldr	r2, [sp, #24]
 800b538:	4413      	add	r3, r2
 800b53a:	42bb      	cmp	r3, r7
 800b53c:	d3e0      	bcc.n	800b500 <__gethex+0x22c>
 800b53e:	4618      	mov	r0, r3
 800b540:	9901      	ldr	r1, [sp, #4]
 800b542:	9307      	str	r3, [sp, #28]
 800b544:	4652      	mov	r2, sl
 800b546:	f001 fae6 	bl	800cb16 <strncmp>
 800b54a:	9b07      	ldr	r3, [sp, #28]
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d1d7      	bne.n	800b500 <__gethex+0x22c>
 800b550:	461e      	mov	r6, r3
 800b552:	e78b      	b.n	800b46c <__gethex+0x198>
 800b554:	f04f 0a03 	mov.w	sl, #3
 800b558:	e7b8      	b.n	800b4cc <__gethex+0x1f8>
 800b55a:	da0a      	bge.n	800b572 <__gethex+0x29e>
 800b55c:	1a37      	subs	r7, r6, r0
 800b55e:	4621      	mov	r1, r4
 800b560:	ee18 0a10 	vmov	r0, s16
 800b564:	463a      	mov	r2, r7
 800b566:	f000 fcad 	bl	800bec4 <__lshift>
 800b56a:	1bed      	subs	r5, r5, r7
 800b56c:	4604      	mov	r4, r0
 800b56e:	f100 0914 	add.w	r9, r0, #20
 800b572:	f04f 0a00 	mov.w	sl, #0
 800b576:	e7ae      	b.n	800b4d6 <__gethex+0x202>
 800b578:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b57c:	42a8      	cmp	r0, r5
 800b57e:	dd72      	ble.n	800b666 <__gethex+0x392>
 800b580:	1b45      	subs	r5, r0, r5
 800b582:	42ae      	cmp	r6, r5
 800b584:	dc36      	bgt.n	800b5f4 <__gethex+0x320>
 800b586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d02a      	beq.n	800b5e4 <__gethex+0x310>
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d02c      	beq.n	800b5ec <__gethex+0x318>
 800b592:	2b01      	cmp	r3, #1
 800b594:	d115      	bne.n	800b5c2 <__gethex+0x2ee>
 800b596:	42ae      	cmp	r6, r5
 800b598:	d113      	bne.n	800b5c2 <__gethex+0x2ee>
 800b59a:	2e01      	cmp	r6, #1
 800b59c:	d10b      	bne.n	800b5b6 <__gethex+0x2e2>
 800b59e:	9a04      	ldr	r2, [sp, #16]
 800b5a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	f8c9 3000 	str.w	r3, [r9]
 800b5ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5b0:	2762      	movs	r7, #98	; 0x62
 800b5b2:	601c      	str	r4, [r3, #0]
 800b5b4:	e723      	b.n	800b3fe <__gethex+0x12a>
 800b5b6:	1e71      	subs	r1, r6, #1
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fec1 	bl	800c340 <__any_on>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d1ed      	bne.n	800b59e <__gethex+0x2ca>
 800b5c2:	ee18 0a10 	vmov	r0, s16
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f000 fa60 	bl	800ba8c <_Bfree>
 800b5cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	2750      	movs	r7, #80	; 0x50
 800b5d4:	e713      	b.n	800b3fe <__gethex+0x12a>
 800b5d6:	bf00      	nop
 800b5d8:	0800d4cc 	.word	0x0800d4cc
 800b5dc:	0800d3ec 	.word	0x0800d3ec
 800b5e0:	0800d460 	.word	0x0800d460
 800b5e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1eb      	bne.n	800b5c2 <__gethex+0x2ee>
 800b5ea:	e7d8      	b.n	800b59e <__gethex+0x2ca>
 800b5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1d5      	bne.n	800b59e <__gethex+0x2ca>
 800b5f2:	e7e6      	b.n	800b5c2 <__gethex+0x2ee>
 800b5f4:	1e6f      	subs	r7, r5, #1
 800b5f6:	f1ba 0f00 	cmp.w	sl, #0
 800b5fa:	d131      	bne.n	800b660 <__gethex+0x38c>
 800b5fc:	b127      	cbz	r7, 800b608 <__gethex+0x334>
 800b5fe:	4639      	mov	r1, r7
 800b600:	4620      	mov	r0, r4
 800b602:	f000 fe9d 	bl	800c340 <__any_on>
 800b606:	4682      	mov	sl, r0
 800b608:	117b      	asrs	r3, r7, #5
 800b60a:	2101      	movs	r1, #1
 800b60c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b610:	f007 071f 	and.w	r7, r7, #31
 800b614:	fa01 f707 	lsl.w	r7, r1, r7
 800b618:	421f      	tst	r7, r3
 800b61a:	4629      	mov	r1, r5
 800b61c:	4620      	mov	r0, r4
 800b61e:	bf18      	it	ne
 800b620:	f04a 0a02 	orrne.w	sl, sl, #2
 800b624:	1b76      	subs	r6, r6, r5
 800b626:	f7ff fdee 	bl	800b206 <rshift>
 800b62a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b62e:	2702      	movs	r7, #2
 800b630:	f1ba 0f00 	cmp.w	sl, #0
 800b634:	d048      	beq.n	800b6c8 <__gethex+0x3f4>
 800b636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d015      	beq.n	800b66a <__gethex+0x396>
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d017      	beq.n	800b672 <__gethex+0x39e>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d109      	bne.n	800b65a <__gethex+0x386>
 800b646:	f01a 0f02 	tst.w	sl, #2
 800b64a:	d006      	beq.n	800b65a <__gethex+0x386>
 800b64c:	f8d9 0000 	ldr.w	r0, [r9]
 800b650:	ea4a 0a00 	orr.w	sl, sl, r0
 800b654:	f01a 0f01 	tst.w	sl, #1
 800b658:	d10e      	bne.n	800b678 <__gethex+0x3a4>
 800b65a:	f047 0710 	orr.w	r7, r7, #16
 800b65e:	e033      	b.n	800b6c8 <__gethex+0x3f4>
 800b660:	f04f 0a01 	mov.w	sl, #1
 800b664:	e7d0      	b.n	800b608 <__gethex+0x334>
 800b666:	2701      	movs	r7, #1
 800b668:	e7e2      	b.n	800b630 <__gethex+0x35c>
 800b66a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b66c:	f1c3 0301 	rsb	r3, r3, #1
 800b670:	9315      	str	r3, [sp, #84]	; 0x54
 800b672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0f0      	beq.n	800b65a <__gethex+0x386>
 800b678:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b67c:	f104 0314 	add.w	r3, r4, #20
 800b680:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b684:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b688:	f04f 0c00 	mov.w	ip, #0
 800b68c:	4618      	mov	r0, r3
 800b68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b692:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b696:	d01c      	beq.n	800b6d2 <__gethex+0x3fe>
 800b698:	3201      	adds	r2, #1
 800b69a:	6002      	str	r2, [r0, #0]
 800b69c:	2f02      	cmp	r7, #2
 800b69e:	f104 0314 	add.w	r3, r4, #20
 800b6a2:	d13f      	bne.n	800b724 <__gethex+0x450>
 800b6a4:	f8d8 2000 	ldr.w	r2, [r8]
 800b6a8:	3a01      	subs	r2, #1
 800b6aa:	42b2      	cmp	r2, r6
 800b6ac:	d10a      	bne.n	800b6c4 <__gethex+0x3f0>
 800b6ae:	1171      	asrs	r1, r6, #5
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6b6:	f006 061f 	and.w	r6, r6, #31
 800b6ba:	fa02 f606 	lsl.w	r6, r2, r6
 800b6be:	421e      	tst	r6, r3
 800b6c0:	bf18      	it	ne
 800b6c2:	4617      	movne	r7, r2
 800b6c4:	f047 0720 	orr.w	r7, r7, #32
 800b6c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6ca:	601c      	str	r4, [r3, #0]
 800b6cc:	9b04      	ldr	r3, [sp, #16]
 800b6ce:	601d      	str	r5, [r3, #0]
 800b6d0:	e695      	b.n	800b3fe <__gethex+0x12a>
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6d8:	d8d8      	bhi.n	800b68c <__gethex+0x3b8>
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	459b      	cmp	fp, r3
 800b6de:	db19      	blt.n	800b714 <__gethex+0x440>
 800b6e0:	6861      	ldr	r1, [r4, #4]
 800b6e2:	ee18 0a10 	vmov	r0, s16
 800b6e6:	3101      	adds	r1, #1
 800b6e8:	f000 f990 	bl	800ba0c <_Balloc>
 800b6ec:	4681      	mov	r9, r0
 800b6ee:	b918      	cbnz	r0, 800b6f8 <__gethex+0x424>
 800b6f0:	4b1a      	ldr	r3, [pc, #104]	; (800b75c <__gethex+0x488>)
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	2184      	movs	r1, #132	; 0x84
 800b6f6:	e6a8      	b.n	800b44a <__gethex+0x176>
 800b6f8:	6922      	ldr	r2, [r4, #16]
 800b6fa:	3202      	adds	r2, #2
 800b6fc:	f104 010c 	add.w	r1, r4, #12
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	300c      	adds	r0, #12
 800b704:	f000 f974 	bl	800b9f0 <memcpy>
 800b708:	4621      	mov	r1, r4
 800b70a:	ee18 0a10 	vmov	r0, s16
 800b70e:	f000 f9bd 	bl	800ba8c <_Bfree>
 800b712:	464c      	mov	r4, r9
 800b714:	6923      	ldr	r3, [r4, #16]
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b71c:	6122      	str	r2, [r4, #16]
 800b71e:	2201      	movs	r2, #1
 800b720:	615a      	str	r2, [r3, #20]
 800b722:	e7bb      	b.n	800b69c <__gethex+0x3c8>
 800b724:	6922      	ldr	r2, [r4, #16]
 800b726:	455a      	cmp	r2, fp
 800b728:	dd0b      	ble.n	800b742 <__gethex+0x46e>
 800b72a:	2101      	movs	r1, #1
 800b72c:	4620      	mov	r0, r4
 800b72e:	f7ff fd6a 	bl	800b206 <rshift>
 800b732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b736:	3501      	adds	r5, #1
 800b738:	42ab      	cmp	r3, r5
 800b73a:	f6ff aed0 	blt.w	800b4de <__gethex+0x20a>
 800b73e:	2701      	movs	r7, #1
 800b740:	e7c0      	b.n	800b6c4 <__gethex+0x3f0>
 800b742:	f016 061f 	ands.w	r6, r6, #31
 800b746:	d0fa      	beq.n	800b73e <__gethex+0x46a>
 800b748:	449a      	add	sl, r3
 800b74a:	f1c6 0620 	rsb	r6, r6, #32
 800b74e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b752:	f000 fa51 	bl	800bbf8 <__hi0bits>
 800b756:	42b0      	cmp	r0, r6
 800b758:	dbe7      	blt.n	800b72a <__gethex+0x456>
 800b75a:	e7f0      	b.n	800b73e <__gethex+0x46a>
 800b75c:	0800d3ec 	.word	0x0800d3ec

0800b760 <L_shift>:
 800b760:	f1c2 0208 	rsb	r2, r2, #8
 800b764:	0092      	lsls	r2, r2, #2
 800b766:	b570      	push	{r4, r5, r6, lr}
 800b768:	f1c2 0620 	rsb	r6, r2, #32
 800b76c:	6843      	ldr	r3, [r0, #4]
 800b76e:	6804      	ldr	r4, [r0, #0]
 800b770:	fa03 f506 	lsl.w	r5, r3, r6
 800b774:	432c      	orrs	r4, r5
 800b776:	40d3      	lsrs	r3, r2
 800b778:	6004      	str	r4, [r0, #0]
 800b77a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b77e:	4288      	cmp	r0, r1
 800b780:	d3f4      	bcc.n	800b76c <L_shift+0xc>
 800b782:	bd70      	pop	{r4, r5, r6, pc}

0800b784 <__match>:
 800b784:	b530      	push	{r4, r5, lr}
 800b786:	6803      	ldr	r3, [r0, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b78e:	b914      	cbnz	r4, 800b796 <__match+0x12>
 800b790:	6003      	str	r3, [r0, #0]
 800b792:	2001      	movs	r0, #1
 800b794:	bd30      	pop	{r4, r5, pc}
 800b796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b79a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b79e:	2d19      	cmp	r5, #25
 800b7a0:	bf98      	it	ls
 800b7a2:	3220      	addls	r2, #32
 800b7a4:	42a2      	cmp	r2, r4
 800b7a6:	d0f0      	beq.n	800b78a <__match+0x6>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e7f3      	b.n	800b794 <__match+0x10>

0800b7ac <__hexnan>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	680b      	ldr	r3, [r1, #0]
 800b7b2:	6801      	ldr	r1, [r0, #0]
 800b7b4:	115e      	asrs	r6, r3, #5
 800b7b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7ba:	f013 031f 	ands.w	r3, r3, #31
 800b7be:	b087      	sub	sp, #28
 800b7c0:	bf18      	it	ne
 800b7c2:	3604      	addne	r6, #4
 800b7c4:	2500      	movs	r5, #0
 800b7c6:	1f37      	subs	r7, r6, #4
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	4690      	mov	r8, r2
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7d2:	46b9      	mov	r9, r7
 800b7d4:	463c      	mov	r4, r7
 800b7d6:	9502      	str	r5, [sp, #8]
 800b7d8:	46ab      	mov	fp, r5
 800b7da:	784a      	ldrb	r2, [r1, #1]
 800b7dc:	1c4b      	adds	r3, r1, #1
 800b7de:	9303      	str	r3, [sp, #12]
 800b7e0:	b342      	cbz	r2, 800b834 <__hexnan+0x88>
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	9105      	str	r1, [sp, #20]
 800b7e6:	9204      	str	r2, [sp, #16]
 800b7e8:	f7ff fd5f 	bl	800b2aa <__hexdig_fun>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d14f      	bne.n	800b890 <__hexnan+0xe4>
 800b7f0:	9a04      	ldr	r2, [sp, #16]
 800b7f2:	9905      	ldr	r1, [sp, #20]
 800b7f4:	2a20      	cmp	r2, #32
 800b7f6:	d818      	bhi.n	800b82a <__hexnan+0x7e>
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	459b      	cmp	fp, r3
 800b7fc:	dd13      	ble.n	800b826 <__hexnan+0x7a>
 800b7fe:	454c      	cmp	r4, r9
 800b800:	d206      	bcs.n	800b810 <__hexnan+0x64>
 800b802:	2d07      	cmp	r5, #7
 800b804:	dc04      	bgt.n	800b810 <__hexnan+0x64>
 800b806:	462a      	mov	r2, r5
 800b808:	4649      	mov	r1, r9
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff ffa8 	bl	800b760 <L_shift>
 800b810:	4544      	cmp	r4, r8
 800b812:	d950      	bls.n	800b8b6 <__hexnan+0x10a>
 800b814:	2300      	movs	r3, #0
 800b816:	f1a4 0904 	sub.w	r9, r4, #4
 800b81a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b81e:	f8cd b008 	str.w	fp, [sp, #8]
 800b822:	464c      	mov	r4, r9
 800b824:	461d      	mov	r5, r3
 800b826:	9903      	ldr	r1, [sp, #12]
 800b828:	e7d7      	b.n	800b7da <__hexnan+0x2e>
 800b82a:	2a29      	cmp	r2, #41	; 0x29
 800b82c:	d156      	bne.n	800b8dc <__hexnan+0x130>
 800b82e:	3102      	adds	r1, #2
 800b830:	f8ca 1000 	str.w	r1, [sl]
 800b834:	f1bb 0f00 	cmp.w	fp, #0
 800b838:	d050      	beq.n	800b8dc <__hexnan+0x130>
 800b83a:	454c      	cmp	r4, r9
 800b83c:	d206      	bcs.n	800b84c <__hexnan+0xa0>
 800b83e:	2d07      	cmp	r5, #7
 800b840:	dc04      	bgt.n	800b84c <__hexnan+0xa0>
 800b842:	462a      	mov	r2, r5
 800b844:	4649      	mov	r1, r9
 800b846:	4620      	mov	r0, r4
 800b848:	f7ff ff8a 	bl	800b760 <L_shift>
 800b84c:	4544      	cmp	r4, r8
 800b84e:	d934      	bls.n	800b8ba <__hexnan+0x10e>
 800b850:	f1a8 0204 	sub.w	r2, r8, #4
 800b854:	4623      	mov	r3, r4
 800b856:	f853 1b04 	ldr.w	r1, [r3], #4
 800b85a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b85e:	429f      	cmp	r7, r3
 800b860:	d2f9      	bcs.n	800b856 <__hexnan+0xaa>
 800b862:	1b3b      	subs	r3, r7, r4
 800b864:	f023 0303 	bic.w	r3, r3, #3
 800b868:	3304      	adds	r3, #4
 800b86a:	3401      	adds	r4, #1
 800b86c:	3e03      	subs	r6, #3
 800b86e:	42b4      	cmp	r4, r6
 800b870:	bf88      	it	hi
 800b872:	2304      	movhi	r3, #4
 800b874:	4443      	add	r3, r8
 800b876:	2200      	movs	r2, #0
 800b878:	f843 2b04 	str.w	r2, [r3], #4
 800b87c:	429f      	cmp	r7, r3
 800b87e:	d2fb      	bcs.n	800b878 <__hexnan+0xcc>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	b91b      	cbnz	r3, 800b88c <__hexnan+0xe0>
 800b884:	4547      	cmp	r7, r8
 800b886:	d127      	bne.n	800b8d8 <__hexnan+0x12c>
 800b888:	2301      	movs	r3, #1
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	2005      	movs	r0, #5
 800b88e:	e026      	b.n	800b8de <__hexnan+0x132>
 800b890:	3501      	adds	r5, #1
 800b892:	2d08      	cmp	r5, #8
 800b894:	f10b 0b01 	add.w	fp, fp, #1
 800b898:	dd06      	ble.n	800b8a8 <__hexnan+0xfc>
 800b89a:	4544      	cmp	r4, r8
 800b89c:	d9c3      	bls.n	800b826 <__hexnan+0x7a>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8a4:	2501      	movs	r5, #1
 800b8a6:	3c04      	subs	r4, #4
 800b8a8:	6822      	ldr	r2, [r4, #0]
 800b8aa:	f000 000f 	and.w	r0, r0, #15
 800b8ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b8b2:	6022      	str	r2, [r4, #0]
 800b8b4:	e7b7      	b.n	800b826 <__hexnan+0x7a>
 800b8b6:	2508      	movs	r5, #8
 800b8b8:	e7b5      	b.n	800b826 <__hexnan+0x7a>
 800b8ba:	9b01      	ldr	r3, [sp, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0df      	beq.n	800b880 <__hexnan+0xd4>
 800b8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8c4:	f1c3 0320 	rsb	r3, r3, #32
 800b8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8d0:	401a      	ands	r2, r3
 800b8d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b8d6:	e7d3      	b.n	800b880 <__hexnan+0xd4>
 800b8d8:	3f04      	subs	r7, #4
 800b8da:	e7d1      	b.n	800b880 <__hexnan+0xd4>
 800b8dc:	2004      	movs	r0, #4
 800b8de:	b007      	add	sp, #28
 800b8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8e4 <_localeconv_r>:
 800b8e4:	4800      	ldr	r0, [pc, #0]	; (800b8e8 <_localeconv_r+0x4>)
 800b8e6:	4770      	bx	lr
 800b8e8:	2000016c 	.word	0x2000016c

0800b8ec <__retarget_lock_init_recursive>:
 800b8ec:	4770      	bx	lr

0800b8ee <__retarget_lock_acquire_recursive>:
 800b8ee:	4770      	bx	lr

0800b8f0 <__retarget_lock_release_recursive>:
 800b8f0:	4770      	bx	lr

0800b8f2 <__swhatbuf_r>:
 800b8f2:	b570      	push	{r4, r5, r6, lr}
 800b8f4:	460e      	mov	r6, r1
 800b8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fa:	2900      	cmp	r1, #0
 800b8fc:	b096      	sub	sp, #88	; 0x58
 800b8fe:	4614      	mov	r4, r2
 800b900:	461d      	mov	r5, r3
 800b902:	da07      	bge.n	800b914 <__swhatbuf_r+0x22>
 800b904:	2300      	movs	r3, #0
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	89b3      	ldrh	r3, [r6, #12]
 800b90a:	061a      	lsls	r2, r3, #24
 800b90c:	d410      	bmi.n	800b930 <__swhatbuf_r+0x3e>
 800b90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b912:	e00e      	b.n	800b932 <__swhatbuf_r+0x40>
 800b914:	466a      	mov	r2, sp
 800b916:	f001 f96f 	bl	800cbf8 <_fstat_r>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	dbf2      	blt.n	800b904 <__swhatbuf_r+0x12>
 800b91e:	9a01      	ldr	r2, [sp, #4]
 800b920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b928:	425a      	negs	r2, r3
 800b92a:	415a      	adcs	r2, r3
 800b92c:	602a      	str	r2, [r5, #0]
 800b92e:	e7ee      	b.n	800b90e <__swhatbuf_r+0x1c>
 800b930:	2340      	movs	r3, #64	; 0x40
 800b932:	2000      	movs	r0, #0
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	b016      	add	sp, #88	; 0x58
 800b938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b93c <__smakebuf_r>:
 800b93c:	898b      	ldrh	r3, [r1, #12]
 800b93e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b940:	079d      	lsls	r5, r3, #30
 800b942:	4606      	mov	r6, r0
 800b944:	460c      	mov	r4, r1
 800b946:	d507      	bpl.n	800b958 <__smakebuf_r+0x1c>
 800b948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	6123      	str	r3, [r4, #16]
 800b950:	2301      	movs	r3, #1
 800b952:	6163      	str	r3, [r4, #20]
 800b954:	b002      	add	sp, #8
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	ab01      	add	r3, sp, #4
 800b95a:	466a      	mov	r2, sp
 800b95c:	f7ff ffc9 	bl	800b8f2 <__swhatbuf_r>
 800b960:	9900      	ldr	r1, [sp, #0]
 800b962:	4605      	mov	r5, r0
 800b964:	4630      	mov	r0, r6
 800b966:	f000 fd6b 	bl	800c440 <_malloc_r>
 800b96a:	b948      	cbnz	r0, 800b980 <__smakebuf_r+0x44>
 800b96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b970:	059a      	lsls	r2, r3, #22
 800b972:	d4ef      	bmi.n	800b954 <__smakebuf_r+0x18>
 800b974:	f023 0303 	bic.w	r3, r3, #3
 800b978:	f043 0302 	orr.w	r3, r3, #2
 800b97c:	81a3      	strh	r3, [r4, #12]
 800b97e:	e7e3      	b.n	800b948 <__smakebuf_r+0xc>
 800b980:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <__smakebuf_r+0x7c>)
 800b982:	62b3      	str	r3, [r6, #40]	; 0x28
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	6020      	str	r0, [r4, #0]
 800b988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	9b00      	ldr	r3, [sp, #0]
 800b990:	6163      	str	r3, [r4, #20]
 800b992:	9b01      	ldr	r3, [sp, #4]
 800b994:	6120      	str	r0, [r4, #16]
 800b996:	b15b      	cbz	r3, 800b9b0 <__smakebuf_r+0x74>
 800b998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b99c:	4630      	mov	r0, r6
 800b99e:	f001 f93d 	bl	800cc1c <_isatty_r>
 800b9a2:	b128      	cbz	r0, 800b9b0 <__smakebuf_r+0x74>
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	f023 0303 	bic.w	r3, r3, #3
 800b9aa:	f043 0301 	orr.w	r3, r3, #1
 800b9ae:	81a3      	strh	r3, [r4, #12]
 800b9b0:	89a0      	ldrh	r0, [r4, #12]
 800b9b2:	4305      	orrs	r5, r0
 800b9b4:	81a5      	strh	r5, [r4, #12]
 800b9b6:	e7cd      	b.n	800b954 <__smakebuf_r+0x18>
 800b9b8:	0800b065 	.word	0x0800b065

0800b9bc <malloc>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <malloc+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f000 bd3d 	b.w	800c440 <_malloc_r>
 800b9c6:	bf00      	nop
 800b9c8:	20000014 	.word	0x20000014

0800b9cc <__ascii_mbtowc>:
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	b901      	cbnz	r1, 800b9d2 <__ascii_mbtowc+0x6>
 800b9d0:	a901      	add	r1, sp, #4
 800b9d2:	b142      	cbz	r2, 800b9e6 <__ascii_mbtowc+0x1a>
 800b9d4:	b14b      	cbz	r3, 800b9ea <__ascii_mbtowc+0x1e>
 800b9d6:	7813      	ldrb	r3, [r2, #0]
 800b9d8:	600b      	str	r3, [r1, #0]
 800b9da:	7812      	ldrb	r2, [r2, #0]
 800b9dc:	1e10      	subs	r0, r2, #0
 800b9de:	bf18      	it	ne
 800b9e0:	2001      	movne	r0, #1
 800b9e2:	b002      	add	sp, #8
 800b9e4:	4770      	bx	lr
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	e7fb      	b.n	800b9e2 <__ascii_mbtowc+0x16>
 800b9ea:	f06f 0001 	mvn.w	r0, #1
 800b9ee:	e7f8      	b.n	800b9e2 <__ascii_mbtowc+0x16>

0800b9f0 <memcpy>:
 800b9f0:	440a      	add	r2, r1
 800b9f2:	4291      	cmp	r1, r2
 800b9f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9f8:	d100      	bne.n	800b9fc <memcpy+0xc>
 800b9fa:	4770      	bx	lr
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba06:	4291      	cmp	r1, r2
 800ba08:	d1f9      	bne.n	800b9fe <memcpy+0xe>
 800ba0a:	bd10      	pop	{r4, pc}

0800ba0c <_Balloc>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba10:	4604      	mov	r4, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	b976      	cbnz	r6, 800ba34 <_Balloc+0x28>
 800ba16:	2010      	movs	r0, #16
 800ba18:	f7ff ffd0 	bl	800b9bc <malloc>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ba20:	b920      	cbnz	r0, 800ba2c <_Balloc+0x20>
 800ba22:	4b18      	ldr	r3, [pc, #96]	; (800ba84 <_Balloc+0x78>)
 800ba24:	4818      	ldr	r0, [pc, #96]	; (800ba88 <_Balloc+0x7c>)
 800ba26:	2166      	movs	r1, #102	; 0x66
 800ba28:	f001 f8a6 	bl	800cb78 <__assert_func>
 800ba2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba30:	6006      	str	r6, [r0, #0]
 800ba32:	60c6      	str	r6, [r0, #12]
 800ba34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba36:	68f3      	ldr	r3, [r6, #12]
 800ba38:	b183      	cbz	r3, 800ba5c <_Balloc+0x50>
 800ba3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba42:	b9b8      	cbnz	r0, 800ba74 <_Balloc+0x68>
 800ba44:	2101      	movs	r1, #1
 800ba46:	fa01 f605 	lsl.w	r6, r1, r5
 800ba4a:	1d72      	adds	r2, r6, #5
 800ba4c:	0092      	lsls	r2, r2, #2
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 fc97 	bl	800c382 <_calloc_r>
 800ba54:	b160      	cbz	r0, 800ba70 <_Balloc+0x64>
 800ba56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba5a:	e00e      	b.n	800ba7a <_Balloc+0x6e>
 800ba5c:	2221      	movs	r2, #33	; 0x21
 800ba5e:	2104      	movs	r1, #4
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fc8e 	bl	800c382 <_calloc_r>
 800ba66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba68:	60f0      	str	r0, [r6, #12]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e4      	bne.n	800ba3a <_Balloc+0x2e>
 800ba70:	2000      	movs	r0, #0
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	6802      	ldr	r2, [r0, #0]
 800ba76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba80:	e7f7      	b.n	800ba72 <_Balloc+0x66>
 800ba82:	bf00      	nop
 800ba84:	0800d376 	.word	0x0800d376
 800ba88:	0800d4e0 	.word	0x0800d4e0

0800ba8c <_Bfree>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba90:	4605      	mov	r5, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	b976      	cbnz	r6, 800bab4 <_Bfree+0x28>
 800ba96:	2010      	movs	r0, #16
 800ba98:	f7ff ff90 	bl	800b9bc <malloc>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	6268      	str	r0, [r5, #36]	; 0x24
 800baa0:	b920      	cbnz	r0, 800baac <_Bfree+0x20>
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <_Bfree+0x3c>)
 800baa4:	4809      	ldr	r0, [pc, #36]	; (800bacc <_Bfree+0x40>)
 800baa6:	218a      	movs	r1, #138	; 0x8a
 800baa8:	f001 f866 	bl	800cb78 <__assert_func>
 800baac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bab0:	6006      	str	r6, [r0, #0]
 800bab2:	60c6      	str	r6, [r0, #12]
 800bab4:	b13c      	cbz	r4, 800bac6 <_Bfree+0x3a>
 800bab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bab8:	6862      	ldr	r2, [r4, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bac0:	6021      	str	r1, [r4, #0]
 800bac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	0800d376 	.word	0x0800d376
 800bacc:	0800d4e0 	.word	0x0800d4e0

0800bad0 <__multadd>:
 800bad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	690e      	ldr	r6, [r1, #16]
 800bad6:	4607      	mov	r7, r0
 800bad8:	4698      	mov	r8, r3
 800bada:	460c      	mov	r4, r1
 800badc:	f101 0014 	add.w	r0, r1, #20
 800bae0:	2300      	movs	r3, #0
 800bae2:	6805      	ldr	r5, [r0, #0]
 800bae4:	b2a9      	uxth	r1, r5
 800bae6:	fb02 8101 	mla	r1, r2, r1, r8
 800baea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800baee:	0c2d      	lsrs	r5, r5, #16
 800baf0:	fb02 c505 	mla	r5, r2, r5, ip
 800baf4:	b289      	uxth	r1, r1
 800baf6:	3301      	adds	r3, #1
 800baf8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bafc:	429e      	cmp	r6, r3
 800bafe:	f840 1b04 	str.w	r1, [r0], #4
 800bb02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb06:	dcec      	bgt.n	800bae2 <__multadd+0x12>
 800bb08:	f1b8 0f00 	cmp.w	r8, #0
 800bb0c:	d022      	beq.n	800bb54 <__multadd+0x84>
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	42b3      	cmp	r3, r6
 800bb12:	dc19      	bgt.n	800bb48 <__multadd+0x78>
 800bb14:	6861      	ldr	r1, [r4, #4]
 800bb16:	4638      	mov	r0, r7
 800bb18:	3101      	adds	r1, #1
 800bb1a:	f7ff ff77 	bl	800ba0c <_Balloc>
 800bb1e:	4605      	mov	r5, r0
 800bb20:	b928      	cbnz	r0, 800bb2e <__multadd+0x5e>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <__multadd+0x8c>)
 800bb26:	480e      	ldr	r0, [pc, #56]	; (800bb60 <__multadd+0x90>)
 800bb28:	21b5      	movs	r1, #181	; 0xb5
 800bb2a:	f001 f825 	bl	800cb78 <__assert_func>
 800bb2e:	6922      	ldr	r2, [r4, #16]
 800bb30:	3202      	adds	r2, #2
 800bb32:	f104 010c 	add.w	r1, r4, #12
 800bb36:	0092      	lsls	r2, r2, #2
 800bb38:	300c      	adds	r0, #12
 800bb3a:	f7ff ff59 	bl	800b9f0 <memcpy>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4638      	mov	r0, r7
 800bb42:	f7ff ffa3 	bl	800ba8c <_Bfree>
 800bb46:	462c      	mov	r4, r5
 800bb48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb52:	6126      	str	r6, [r4, #16]
 800bb54:	4620      	mov	r0, r4
 800bb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5a:	bf00      	nop
 800bb5c:	0800d3ec 	.word	0x0800d3ec
 800bb60:	0800d4e0 	.word	0x0800d4e0

0800bb64 <__s2b>:
 800bb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4615      	mov	r5, r2
 800bb6c:	461f      	mov	r7, r3
 800bb6e:	2209      	movs	r2, #9
 800bb70:	3308      	adds	r3, #8
 800bb72:	4606      	mov	r6, r0
 800bb74:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb78:	2100      	movs	r1, #0
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	db09      	blt.n	800bb94 <__s2b+0x30>
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7ff ff43 	bl	800ba0c <_Balloc>
 800bb86:	b940      	cbnz	r0, 800bb9a <__s2b+0x36>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	4b19      	ldr	r3, [pc, #100]	; (800bbf0 <__s2b+0x8c>)
 800bb8c:	4819      	ldr	r0, [pc, #100]	; (800bbf4 <__s2b+0x90>)
 800bb8e:	21ce      	movs	r1, #206	; 0xce
 800bb90:	f000 fff2 	bl	800cb78 <__assert_func>
 800bb94:	0052      	lsls	r2, r2, #1
 800bb96:	3101      	adds	r1, #1
 800bb98:	e7f0      	b.n	800bb7c <__s2b+0x18>
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	6143      	str	r3, [r0, #20]
 800bb9e:	2d09      	cmp	r5, #9
 800bba0:	f04f 0301 	mov.w	r3, #1
 800bba4:	6103      	str	r3, [r0, #16]
 800bba6:	dd16      	ble.n	800bbd6 <__s2b+0x72>
 800bba8:	f104 0909 	add.w	r9, r4, #9
 800bbac:	46c8      	mov	r8, r9
 800bbae:	442c      	add	r4, r5
 800bbb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbb4:	4601      	mov	r1, r0
 800bbb6:	3b30      	subs	r3, #48	; 0x30
 800bbb8:	220a      	movs	r2, #10
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7ff ff88 	bl	800bad0 <__multadd>
 800bbc0:	45a0      	cmp	r8, r4
 800bbc2:	d1f5      	bne.n	800bbb0 <__s2b+0x4c>
 800bbc4:	f1a5 0408 	sub.w	r4, r5, #8
 800bbc8:	444c      	add	r4, r9
 800bbca:	1b2d      	subs	r5, r5, r4
 800bbcc:	1963      	adds	r3, r4, r5
 800bbce:	42bb      	cmp	r3, r7
 800bbd0:	db04      	blt.n	800bbdc <__s2b+0x78>
 800bbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbd6:	340a      	adds	r4, #10
 800bbd8:	2509      	movs	r5, #9
 800bbda:	e7f6      	b.n	800bbca <__s2b+0x66>
 800bbdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbe0:	4601      	mov	r1, r0
 800bbe2:	3b30      	subs	r3, #48	; 0x30
 800bbe4:	220a      	movs	r2, #10
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7ff ff72 	bl	800bad0 <__multadd>
 800bbec:	e7ee      	b.n	800bbcc <__s2b+0x68>
 800bbee:	bf00      	nop
 800bbf0:	0800d3ec 	.word	0x0800d3ec
 800bbf4:	0800d4e0 	.word	0x0800d4e0

0800bbf8 <__hi0bits>:
 800bbf8:	0c03      	lsrs	r3, r0, #16
 800bbfa:	041b      	lsls	r3, r3, #16
 800bbfc:	b9d3      	cbnz	r3, 800bc34 <__hi0bits+0x3c>
 800bbfe:	0400      	lsls	r0, r0, #16
 800bc00:	2310      	movs	r3, #16
 800bc02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc06:	bf04      	itt	eq
 800bc08:	0200      	lsleq	r0, r0, #8
 800bc0a:	3308      	addeq	r3, #8
 800bc0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc10:	bf04      	itt	eq
 800bc12:	0100      	lsleq	r0, r0, #4
 800bc14:	3304      	addeq	r3, #4
 800bc16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc1a:	bf04      	itt	eq
 800bc1c:	0080      	lsleq	r0, r0, #2
 800bc1e:	3302      	addeq	r3, #2
 800bc20:	2800      	cmp	r0, #0
 800bc22:	db05      	blt.n	800bc30 <__hi0bits+0x38>
 800bc24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc28:	f103 0301 	add.w	r3, r3, #1
 800bc2c:	bf08      	it	eq
 800bc2e:	2320      	moveq	r3, #32
 800bc30:	4618      	mov	r0, r3
 800bc32:	4770      	bx	lr
 800bc34:	2300      	movs	r3, #0
 800bc36:	e7e4      	b.n	800bc02 <__hi0bits+0xa>

0800bc38 <__lo0bits>:
 800bc38:	6803      	ldr	r3, [r0, #0]
 800bc3a:	f013 0207 	ands.w	r2, r3, #7
 800bc3e:	4601      	mov	r1, r0
 800bc40:	d00b      	beq.n	800bc5a <__lo0bits+0x22>
 800bc42:	07da      	lsls	r2, r3, #31
 800bc44:	d424      	bmi.n	800bc90 <__lo0bits+0x58>
 800bc46:	0798      	lsls	r0, r3, #30
 800bc48:	bf49      	itett	mi
 800bc4a:	085b      	lsrmi	r3, r3, #1
 800bc4c:	089b      	lsrpl	r3, r3, #2
 800bc4e:	2001      	movmi	r0, #1
 800bc50:	600b      	strmi	r3, [r1, #0]
 800bc52:	bf5c      	itt	pl
 800bc54:	600b      	strpl	r3, [r1, #0]
 800bc56:	2002      	movpl	r0, #2
 800bc58:	4770      	bx	lr
 800bc5a:	b298      	uxth	r0, r3
 800bc5c:	b9b0      	cbnz	r0, 800bc8c <__lo0bits+0x54>
 800bc5e:	0c1b      	lsrs	r3, r3, #16
 800bc60:	2010      	movs	r0, #16
 800bc62:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc66:	bf04      	itt	eq
 800bc68:	0a1b      	lsreq	r3, r3, #8
 800bc6a:	3008      	addeq	r0, #8
 800bc6c:	071a      	lsls	r2, r3, #28
 800bc6e:	bf04      	itt	eq
 800bc70:	091b      	lsreq	r3, r3, #4
 800bc72:	3004      	addeq	r0, #4
 800bc74:	079a      	lsls	r2, r3, #30
 800bc76:	bf04      	itt	eq
 800bc78:	089b      	lsreq	r3, r3, #2
 800bc7a:	3002      	addeq	r0, #2
 800bc7c:	07da      	lsls	r2, r3, #31
 800bc7e:	d403      	bmi.n	800bc88 <__lo0bits+0x50>
 800bc80:	085b      	lsrs	r3, r3, #1
 800bc82:	f100 0001 	add.w	r0, r0, #1
 800bc86:	d005      	beq.n	800bc94 <__lo0bits+0x5c>
 800bc88:	600b      	str	r3, [r1, #0]
 800bc8a:	4770      	bx	lr
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	e7e8      	b.n	800bc62 <__lo0bits+0x2a>
 800bc90:	2000      	movs	r0, #0
 800bc92:	4770      	bx	lr
 800bc94:	2020      	movs	r0, #32
 800bc96:	4770      	bx	lr

0800bc98 <__i2b>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	f7ff feb5 	bl	800ba0c <_Balloc>
 800bca2:	4602      	mov	r2, r0
 800bca4:	b928      	cbnz	r0, 800bcb2 <__i2b+0x1a>
 800bca6:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <__i2b+0x24>)
 800bca8:	4805      	ldr	r0, [pc, #20]	; (800bcc0 <__i2b+0x28>)
 800bcaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcae:	f000 ff63 	bl	800cb78 <__assert_func>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	6144      	str	r4, [r0, #20]
 800bcb6:	6103      	str	r3, [r0, #16]
 800bcb8:	bd10      	pop	{r4, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800d3ec 	.word	0x0800d3ec
 800bcc0:	0800d4e0 	.word	0x0800d4e0

0800bcc4 <__multiply>:
 800bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	4614      	mov	r4, r2
 800bcca:	690a      	ldr	r2, [r1, #16]
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	bfb8      	it	lt
 800bcd2:	460b      	movlt	r3, r1
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	bfbc      	itt	lt
 800bcd8:	4625      	movlt	r5, r4
 800bcda:	461c      	movlt	r4, r3
 800bcdc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bce0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bce4:	68ab      	ldr	r3, [r5, #8]
 800bce6:	6869      	ldr	r1, [r5, #4]
 800bce8:	eb0a 0709 	add.w	r7, sl, r9
 800bcec:	42bb      	cmp	r3, r7
 800bcee:	b085      	sub	sp, #20
 800bcf0:	bfb8      	it	lt
 800bcf2:	3101      	addlt	r1, #1
 800bcf4:	f7ff fe8a 	bl	800ba0c <_Balloc>
 800bcf8:	b930      	cbnz	r0, 800bd08 <__multiply+0x44>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	4b42      	ldr	r3, [pc, #264]	; (800be08 <__multiply+0x144>)
 800bcfe:	4843      	ldr	r0, [pc, #268]	; (800be0c <__multiply+0x148>)
 800bd00:	f240 115d 	movw	r1, #349	; 0x15d
 800bd04:	f000 ff38 	bl	800cb78 <__assert_func>
 800bd08:	f100 0614 	add.w	r6, r0, #20
 800bd0c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd10:	4633      	mov	r3, r6
 800bd12:	2200      	movs	r2, #0
 800bd14:	4543      	cmp	r3, r8
 800bd16:	d31e      	bcc.n	800bd56 <__multiply+0x92>
 800bd18:	f105 0c14 	add.w	ip, r5, #20
 800bd1c:	f104 0314 	add.w	r3, r4, #20
 800bd20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bd24:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd28:	9202      	str	r2, [sp, #8]
 800bd2a:	ebac 0205 	sub.w	r2, ip, r5
 800bd2e:	3a15      	subs	r2, #21
 800bd30:	f022 0203 	bic.w	r2, r2, #3
 800bd34:	3204      	adds	r2, #4
 800bd36:	f105 0115 	add.w	r1, r5, #21
 800bd3a:	458c      	cmp	ip, r1
 800bd3c:	bf38      	it	cc
 800bd3e:	2204      	movcc	r2, #4
 800bd40:	9201      	str	r2, [sp, #4]
 800bd42:	9a02      	ldr	r2, [sp, #8]
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d808      	bhi.n	800bd5c <__multiply+0x98>
 800bd4a:	2f00      	cmp	r7, #0
 800bd4c:	dc55      	bgt.n	800bdfa <__multiply+0x136>
 800bd4e:	6107      	str	r7, [r0, #16]
 800bd50:	b005      	add	sp, #20
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd56:	f843 2b04 	str.w	r2, [r3], #4
 800bd5a:	e7db      	b.n	800bd14 <__multiply+0x50>
 800bd5c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd60:	f1ba 0f00 	cmp.w	sl, #0
 800bd64:	d020      	beq.n	800bda8 <__multiply+0xe4>
 800bd66:	f105 0e14 	add.w	lr, r5, #20
 800bd6a:	46b1      	mov	r9, r6
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd72:	f8d9 b000 	ldr.w	fp, [r9]
 800bd76:	b2a1      	uxth	r1, r4
 800bd78:	fa1f fb8b 	uxth.w	fp, fp
 800bd7c:	fb0a b101 	mla	r1, sl, r1, fp
 800bd80:	4411      	add	r1, r2
 800bd82:	f8d9 2000 	ldr.w	r2, [r9]
 800bd86:	0c24      	lsrs	r4, r4, #16
 800bd88:	0c12      	lsrs	r2, r2, #16
 800bd8a:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd8e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd92:	b289      	uxth	r1, r1
 800bd94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd98:	45f4      	cmp	ip, lr
 800bd9a:	f849 1b04 	str.w	r1, [r9], #4
 800bd9e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bda2:	d8e4      	bhi.n	800bd6e <__multiply+0xaa>
 800bda4:	9901      	ldr	r1, [sp, #4]
 800bda6:	5072      	str	r2, [r6, r1]
 800bda8:	9a03      	ldr	r2, [sp, #12]
 800bdaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	f1b9 0f00 	cmp.w	r9, #0
 800bdb4:	d01f      	beq.n	800bdf6 <__multiply+0x132>
 800bdb6:	6834      	ldr	r4, [r6, #0]
 800bdb8:	f105 0114 	add.w	r1, r5, #20
 800bdbc:	46b6      	mov	lr, r6
 800bdbe:	f04f 0a00 	mov.w	sl, #0
 800bdc2:	880a      	ldrh	r2, [r1, #0]
 800bdc4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bdc8:	fb09 b202 	mla	r2, r9, r2, fp
 800bdcc:	4492      	add	sl, r2
 800bdce:	b2a4      	uxth	r4, r4
 800bdd0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bdd4:	f84e 4b04 	str.w	r4, [lr], #4
 800bdd8:	f851 4b04 	ldr.w	r4, [r1], #4
 800bddc:	f8be 2000 	ldrh.w	r2, [lr]
 800bde0:	0c24      	lsrs	r4, r4, #16
 800bde2:	fb09 2404 	mla	r4, r9, r4, r2
 800bde6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bdea:	458c      	cmp	ip, r1
 800bdec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdf0:	d8e7      	bhi.n	800bdc2 <__multiply+0xfe>
 800bdf2:	9a01      	ldr	r2, [sp, #4]
 800bdf4:	50b4      	str	r4, [r6, r2]
 800bdf6:	3604      	adds	r6, #4
 800bdf8:	e7a3      	b.n	800bd42 <__multiply+0x7e>
 800bdfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1a5      	bne.n	800bd4e <__multiply+0x8a>
 800be02:	3f01      	subs	r7, #1
 800be04:	e7a1      	b.n	800bd4a <__multiply+0x86>
 800be06:	bf00      	nop
 800be08:	0800d3ec 	.word	0x0800d3ec
 800be0c:	0800d4e0 	.word	0x0800d4e0

0800be10 <__pow5mult>:
 800be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be14:	4615      	mov	r5, r2
 800be16:	f012 0203 	ands.w	r2, r2, #3
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	d007      	beq.n	800be30 <__pow5mult+0x20>
 800be20:	4c25      	ldr	r4, [pc, #148]	; (800beb8 <__pow5mult+0xa8>)
 800be22:	3a01      	subs	r2, #1
 800be24:	2300      	movs	r3, #0
 800be26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be2a:	f7ff fe51 	bl	800bad0 <__multadd>
 800be2e:	4607      	mov	r7, r0
 800be30:	10ad      	asrs	r5, r5, #2
 800be32:	d03d      	beq.n	800beb0 <__pow5mult+0xa0>
 800be34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be36:	b97c      	cbnz	r4, 800be58 <__pow5mult+0x48>
 800be38:	2010      	movs	r0, #16
 800be3a:	f7ff fdbf 	bl	800b9bc <malloc>
 800be3e:	4602      	mov	r2, r0
 800be40:	6270      	str	r0, [r6, #36]	; 0x24
 800be42:	b928      	cbnz	r0, 800be50 <__pow5mult+0x40>
 800be44:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <__pow5mult+0xac>)
 800be46:	481e      	ldr	r0, [pc, #120]	; (800bec0 <__pow5mult+0xb0>)
 800be48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be4c:	f000 fe94 	bl	800cb78 <__assert_func>
 800be50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be54:	6004      	str	r4, [r0, #0]
 800be56:	60c4      	str	r4, [r0, #12]
 800be58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be60:	b94c      	cbnz	r4, 800be76 <__pow5mult+0x66>
 800be62:	f240 2171 	movw	r1, #625	; 0x271
 800be66:	4630      	mov	r0, r6
 800be68:	f7ff ff16 	bl	800bc98 <__i2b>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be72:	4604      	mov	r4, r0
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	f04f 0900 	mov.w	r9, #0
 800be7a:	07eb      	lsls	r3, r5, #31
 800be7c:	d50a      	bpl.n	800be94 <__pow5mult+0x84>
 800be7e:	4639      	mov	r1, r7
 800be80:	4622      	mov	r2, r4
 800be82:	4630      	mov	r0, r6
 800be84:	f7ff ff1e 	bl	800bcc4 <__multiply>
 800be88:	4639      	mov	r1, r7
 800be8a:	4680      	mov	r8, r0
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff fdfd 	bl	800ba8c <_Bfree>
 800be92:	4647      	mov	r7, r8
 800be94:	106d      	asrs	r5, r5, #1
 800be96:	d00b      	beq.n	800beb0 <__pow5mult+0xa0>
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	b938      	cbnz	r0, 800beac <__pow5mult+0x9c>
 800be9c:	4622      	mov	r2, r4
 800be9e:	4621      	mov	r1, r4
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff ff0f 	bl	800bcc4 <__multiply>
 800bea6:	6020      	str	r0, [r4, #0]
 800bea8:	f8c0 9000 	str.w	r9, [r0]
 800beac:	4604      	mov	r4, r0
 800beae:	e7e4      	b.n	800be7a <__pow5mult+0x6a>
 800beb0:	4638      	mov	r0, r7
 800beb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb6:	bf00      	nop
 800beb8:	0800d630 	.word	0x0800d630
 800bebc:	0800d376 	.word	0x0800d376
 800bec0:	0800d4e0 	.word	0x0800d4e0

0800bec4 <__lshift>:
 800bec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	6849      	ldr	r1, [r1, #4]
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bed2:	68a3      	ldr	r3, [r4, #8]
 800bed4:	4607      	mov	r7, r0
 800bed6:	4691      	mov	r9, r2
 800bed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bedc:	f108 0601 	add.w	r6, r8, #1
 800bee0:	42b3      	cmp	r3, r6
 800bee2:	db0b      	blt.n	800befc <__lshift+0x38>
 800bee4:	4638      	mov	r0, r7
 800bee6:	f7ff fd91 	bl	800ba0c <_Balloc>
 800beea:	4605      	mov	r5, r0
 800beec:	b948      	cbnz	r0, 800bf02 <__lshift+0x3e>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b28      	ldr	r3, [pc, #160]	; (800bf94 <__lshift+0xd0>)
 800bef2:	4829      	ldr	r0, [pc, #164]	; (800bf98 <__lshift+0xd4>)
 800bef4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bef8:	f000 fe3e 	bl	800cb78 <__assert_func>
 800befc:	3101      	adds	r1, #1
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	e7ee      	b.n	800bee0 <__lshift+0x1c>
 800bf02:	2300      	movs	r3, #0
 800bf04:	f100 0114 	add.w	r1, r0, #20
 800bf08:	f100 0210 	add.w	r2, r0, #16
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	4553      	cmp	r3, sl
 800bf10:	db33      	blt.n	800bf7a <__lshift+0xb6>
 800bf12:	6920      	ldr	r0, [r4, #16]
 800bf14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf18:	f104 0314 	add.w	r3, r4, #20
 800bf1c:	f019 091f 	ands.w	r9, r9, #31
 800bf20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf28:	d02b      	beq.n	800bf82 <__lshift+0xbe>
 800bf2a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf2e:	468a      	mov	sl, r1
 800bf30:	2200      	movs	r2, #0
 800bf32:	6818      	ldr	r0, [r3, #0]
 800bf34:	fa00 f009 	lsl.w	r0, r0, r9
 800bf38:	4302      	orrs	r2, r0
 800bf3a:	f84a 2b04 	str.w	r2, [sl], #4
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	459c      	cmp	ip, r3
 800bf44:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf48:	d8f3      	bhi.n	800bf32 <__lshift+0x6e>
 800bf4a:	ebac 0304 	sub.w	r3, ip, r4
 800bf4e:	3b15      	subs	r3, #21
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	3304      	adds	r3, #4
 800bf56:	f104 0015 	add.w	r0, r4, #21
 800bf5a:	4584      	cmp	ip, r0
 800bf5c:	bf38      	it	cc
 800bf5e:	2304      	movcc	r3, #4
 800bf60:	50ca      	str	r2, [r1, r3]
 800bf62:	b10a      	cbz	r2, 800bf68 <__lshift+0xa4>
 800bf64:	f108 0602 	add.w	r6, r8, #2
 800bf68:	3e01      	subs	r6, #1
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	612e      	str	r6, [r5, #16]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	f7ff fd8c 	bl	800ba8c <_Bfree>
 800bf74:	4628      	mov	r0, r5
 800bf76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf7e:	3301      	adds	r3, #1
 800bf80:	e7c5      	b.n	800bf0e <__lshift+0x4a>
 800bf82:	3904      	subs	r1, #4
 800bf84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf88:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf8c:	459c      	cmp	ip, r3
 800bf8e:	d8f9      	bhi.n	800bf84 <__lshift+0xc0>
 800bf90:	e7ea      	b.n	800bf68 <__lshift+0xa4>
 800bf92:	bf00      	nop
 800bf94:	0800d3ec 	.word	0x0800d3ec
 800bf98:	0800d4e0 	.word	0x0800d4e0

0800bf9c <__mcmp>:
 800bf9c:	b530      	push	{r4, r5, lr}
 800bf9e:	6902      	ldr	r2, [r0, #16]
 800bfa0:	690c      	ldr	r4, [r1, #16]
 800bfa2:	1b12      	subs	r2, r2, r4
 800bfa4:	d10e      	bne.n	800bfc4 <__mcmp+0x28>
 800bfa6:	f100 0314 	add.w	r3, r0, #20
 800bfaa:	3114      	adds	r1, #20
 800bfac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfbc:	42a5      	cmp	r5, r4
 800bfbe:	d003      	beq.n	800bfc8 <__mcmp+0x2c>
 800bfc0:	d305      	bcc.n	800bfce <__mcmp+0x32>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	bd30      	pop	{r4, r5, pc}
 800bfc8:	4283      	cmp	r3, r0
 800bfca:	d3f3      	bcc.n	800bfb4 <__mcmp+0x18>
 800bfcc:	e7fa      	b.n	800bfc4 <__mcmp+0x28>
 800bfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfd2:	e7f7      	b.n	800bfc4 <__mcmp+0x28>

0800bfd4 <__mdiff>:
 800bfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	460c      	mov	r4, r1
 800bfda:	4606      	mov	r6, r0
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4617      	mov	r7, r2
 800bfe2:	f7ff ffdb 	bl	800bf9c <__mcmp>
 800bfe6:	1e05      	subs	r5, r0, #0
 800bfe8:	d110      	bne.n	800c00c <__mdiff+0x38>
 800bfea:	4629      	mov	r1, r5
 800bfec:	4630      	mov	r0, r6
 800bfee:	f7ff fd0d 	bl	800ba0c <_Balloc>
 800bff2:	b930      	cbnz	r0, 800c002 <__mdiff+0x2e>
 800bff4:	4b39      	ldr	r3, [pc, #228]	; (800c0dc <__mdiff+0x108>)
 800bff6:	4602      	mov	r2, r0
 800bff8:	f240 2132 	movw	r1, #562	; 0x232
 800bffc:	4838      	ldr	r0, [pc, #224]	; (800c0e0 <__mdiff+0x10c>)
 800bffe:	f000 fdbb 	bl	800cb78 <__assert_func>
 800c002:	2301      	movs	r3, #1
 800c004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00c:	bfa4      	itt	ge
 800c00e:	463b      	movge	r3, r7
 800c010:	4627      	movge	r7, r4
 800c012:	4630      	mov	r0, r6
 800c014:	6879      	ldr	r1, [r7, #4]
 800c016:	bfa6      	itte	ge
 800c018:	461c      	movge	r4, r3
 800c01a:	2500      	movge	r5, #0
 800c01c:	2501      	movlt	r5, #1
 800c01e:	f7ff fcf5 	bl	800ba0c <_Balloc>
 800c022:	b920      	cbnz	r0, 800c02e <__mdiff+0x5a>
 800c024:	4b2d      	ldr	r3, [pc, #180]	; (800c0dc <__mdiff+0x108>)
 800c026:	4602      	mov	r2, r0
 800c028:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c02c:	e7e6      	b.n	800bffc <__mdiff+0x28>
 800c02e:	693e      	ldr	r6, [r7, #16]
 800c030:	60c5      	str	r5, [r0, #12]
 800c032:	6925      	ldr	r5, [r4, #16]
 800c034:	f107 0114 	add.w	r1, r7, #20
 800c038:	f104 0914 	add.w	r9, r4, #20
 800c03c:	f100 0e14 	add.w	lr, r0, #20
 800c040:	f107 0210 	add.w	r2, r7, #16
 800c044:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c048:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c04c:	46f2      	mov	sl, lr
 800c04e:	2700      	movs	r7, #0
 800c050:	f859 3b04 	ldr.w	r3, [r9], #4
 800c054:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c058:	fa1f f883 	uxth.w	r8, r3
 800c05c:	fa17 f78b 	uxtah	r7, r7, fp
 800c060:	0c1b      	lsrs	r3, r3, #16
 800c062:	eba7 0808 	sub.w	r8, r7, r8
 800c066:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c06a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c06e:	fa1f f888 	uxth.w	r8, r8
 800c072:	141f      	asrs	r7, r3, #16
 800c074:	454d      	cmp	r5, r9
 800c076:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c07a:	f84a 3b04 	str.w	r3, [sl], #4
 800c07e:	d8e7      	bhi.n	800c050 <__mdiff+0x7c>
 800c080:	1b2b      	subs	r3, r5, r4
 800c082:	3b15      	subs	r3, #21
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	3304      	adds	r3, #4
 800c08a:	3415      	adds	r4, #21
 800c08c:	42a5      	cmp	r5, r4
 800c08e:	bf38      	it	cc
 800c090:	2304      	movcc	r3, #4
 800c092:	4419      	add	r1, r3
 800c094:	4473      	add	r3, lr
 800c096:	469e      	mov	lr, r3
 800c098:	460d      	mov	r5, r1
 800c09a:	4565      	cmp	r5, ip
 800c09c:	d30e      	bcc.n	800c0bc <__mdiff+0xe8>
 800c09e:	f10c 0203 	add.w	r2, ip, #3
 800c0a2:	1a52      	subs	r2, r2, r1
 800c0a4:	f022 0203 	bic.w	r2, r2, #3
 800c0a8:	3903      	subs	r1, #3
 800c0aa:	458c      	cmp	ip, r1
 800c0ac:	bf38      	it	cc
 800c0ae:	2200      	movcc	r2, #0
 800c0b0:	441a      	add	r2, r3
 800c0b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0b6:	b17b      	cbz	r3, 800c0d8 <__mdiff+0x104>
 800c0b8:	6106      	str	r6, [r0, #16]
 800c0ba:	e7a5      	b.n	800c008 <__mdiff+0x34>
 800c0bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0c0:	fa17 f488 	uxtah	r4, r7, r8
 800c0c4:	1422      	asrs	r2, r4, #16
 800c0c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c0ca:	b2a4      	uxth	r4, r4
 800c0cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c0d0:	f84e 4b04 	str.w	r4, [lr], #4
 800c0d4:	1417      	asrs	r7, r2, #16
 800c0d6:	e7e0      	b.n	800c09a <__mdiff+0xc6>
 800c0d8:	3e01      	subs	r6, #1
 800c0da:	e7ea      	b.n	800c0b2 <__mdiff+0xde>
 800c0dc:	0800d3ec 	.word	0x0800d3ec
 800c0e0:	0800d4e0 	.word	0x0800d4e0

0800c0e4 <__ulp>:
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	ed8d 0b00 	vstr	d0, [sp]
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	4912      	ldr	r1, [pc, #72]	; (800c138 <__ulp+0x54>)
 800c0ee:	4019      	ands	r1, r3
 800c0f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	dd05      	ble.n	800c104 <__ulp+0x20>
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	ec43 2b10 	vmov	d0, r2, r3
 800c100:	b002      	add	sp, #8
 800c102:	4770      	bx	lr
 800c104:	4249      	negs	r1, r1
 800c106:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c10a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c10e:	f04f 0200 	mov.w	r2, #0
 800c112:	f04f 0300 	mov.w	r3, #0
 800c116:	da04      	bge.n	800c122 <__ulp+0x3e>
 800c118:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c11c:	fa41 f300 	asr.w	r3, r1, r0
 800c120:	e7ec      	b.n	800c0fc <__ulp+0x18>
 800c122:	f1a0 0114 	sub.w	r1, r0, #20
 800c126:	291e      	cmp	r1, #30
 800c128:	bfda      	itte	le
 800c12a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c12e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c132:	2101      	movgt	r1, #1
 800c134:	460a      	mov	r2, r1
 800c136:	e7e1      	b.n	800c0fc <__ulp+0x18>
 800c138:	7ff00000 	.word	0x7ff00000

0800c13c <__b2d>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	6905      	ldr	r5, [r0, #16]
 800c140:	f100 0714 	add.w	r7, r0, #20
 800c144:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c148:	1f2e      	subs	r6, r5, #4
 800c14a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c14e:	4620      	mov	r0, r4
 800c150:	f7ff fd52 	bl	800bbf8 <__hi0bits>
 800c154:	f1c0 0320 	rsb	r3, r0, #32
 800c158:	280a      	cmp	r0, #10
 800c15a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1d8 <__b2d+0x9c>
 800c15e:	600b      	str	r3, [r1, #0]
 800c160:	dc14      	bgt.n	800c18c <__b2d+0x50>
 800c162:	f1c0 0e0b 	rsb	lr, r0, #11
 800c166:	fa24 f10e 	lsr.w	r1, r4, lr
 800c16a:	42b7      	cmp	r7, r6
 800c16c:	ea41 030c 	orr.w	r3, r1, ip
 800c170:	bf34      	ite	cc
 800c172:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c176:	2100      	movcs	r1, #0
 800c178:	3015      	adds	r0, #21
 800c17a:	fa04 f000 	lsl.w	r0, r4, r0
 800c17e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c182:	ea40 0201 	orr.w	r2, r0, r1
 800c186:	ec43 2b10 	vmov	d0, r2, r3
 800c18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c18c:	42b7      	cmp	r7, r6
 800c18e:	bf3a      	itte	cc
 800c190:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c194:	f1a5 0608 	subcc.w	r6, r5, #8
 800c198:	2100      	movcs	r1, #0
 800c19a:	380b      	subs	r0, #11
 800c19c:	d017      	beq.n	800c1ce <__b2d+0x92>
 800c19e:	f1c0 0c20 	rsb	ip, r0, #32
 800c1a2:	fa04 f500 	lsl.w	r5, r4, r0
 800c1a6:	42be      	cmp	r6, r7
 800c1a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c1ac:	ea45 0504 	orr.w	r5, r5, r4
 800c1b0:	bf8c      	ite	hi
 800c1b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1b6:	2400      	movls	r4, #0
 800c1b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1bc:	fa01 f000 	lsl.w	r0, r1, r0
 800c1c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1c8:	ea40 0204 	orr.w	r2, r0, r4
 800c1cc:	e7db      	b.n	800c186 <__b2d+0x4a>
 800c1ce:	ea44 030c 	orr.w	r3, r4, ip
 800c1d2:	460a      	mov	r2, r1
 800c1d4:	e7d7      	b.n	800c186 <__b2d+0x4a>
 800c1d6:	bf00      	nop
 800c1d8:	3ff00000 	.word	0x3ff00000

0800c1dc <__d2b>:
 800c1dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1e0:	4689      	mov	r9, r1
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	ec57 6b10 	vmov	r6, r7, d0
 800c1e8:	4690      	mov	r8, r2
 800c1ea:	f7ff fc0f 	bl	800ba0c <_Balloc>
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	b930      	cbnz	r0, 800c200 <__d2b+0x24>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	4b25      	ldr	r3, [pc, #148]	; (800c28c <__d2b+0xb0>)
 800c1f6:	4826      	ldr	r0, [pc, #152]	; (800c290 <__d2b+0xb4>)
 800c1f8:	f240 310a 	movw	r1, #778	; 0x30a
 800c1fc:	f000 fcbc 	bl	800cb78 <__assert_func>
 800c200:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c204:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c208:	bb35      	cbnz	r5, 800c258 <__d2b+0x7c>
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	d028      	beq.n	800c262 <__d2b+0x86>
 800c210:	4668      	mov	r0, sp
 800c212:	9600      	str	r6, [sp, #0]
 800c214:	f7ff fd10 	bl	800bc38 <__lo0bits>
 800c218:	9900      	ldr	r1, [sp, #0]
 800c21a:	b300      	cbz	r0, 800c25e <__d2b+0x82>
 800c21c:	9a01      	ldr	r2, [sp, #4]
 800c21e:	f1c0 0320 	rsb	r3, r0, #32
 800c222:	fa02 f303 	lsl.w	r3, r2, r3
 800c226:	430b      	orrs	r3, r1
 800c228:	40c2      	lsrs	r2, r0
 800c22a:	6163      	str	r3, [r4, #20]
 800c22c:	9201      	str	r2, [sp, #4]
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	61a3      	str	r3, [r4, #24]
 800c232:	2b00      	cmp	r3, #0
 800c234:	bf14      	ite	ne
 800c236:	2202      	movne	r2, #2
 800c238:	2201      	moveq	r2, #1
 800c23a:	6122      	str	r2, [r4, #16]
 800c23c:	b1d5      	cbz	r5, 800c274 <__d2b+0x98>
 800c23e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c242:	4405      	add	r5, r0
 800c244:	f8c9 5000 	str.w	r5, [r9]
 800c248:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c24c:	f8c8 0000 	str.w	r0, [r8]
 800c250:	4620      	mov	r0, r4
 800c252:	b003      	add	sp, #12
 800c254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c25c:	e7d5      	b.n	800c20a <__d2b+0x2e>
 800c25e:	6161      	str	r1, [r4, #20]
 800c260:	e7e5      	b.n	800c22e <__d2b+0x52>
 800c262:	a801      	add	r0, sp, #4
 800c264:	f7ff fce8 	bl	800bc38 <__lo0bits>
 800c268:	9b01      	ldr	r3, [sp, #4]
 800c26a:	6163      	str	r3, [r4, #20]
 800c26c:	2201      	movs	r2, #1
 800c26e:	6122      	str	r2, [r4, #16]
 800c270:	3020      	adds	r0, #32
 800c272:	e7e3      	b.n	800c23c <__d2b+0x60>
 800c274:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c278:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c27c:	f8c9 0000 	str.w	r0, [r9]
 800c280:	6918      	ldr	r0, [r3, #16]
 800c282:	f7ff fcb9 	bl	800bbf8 <__hi0bits>
 800c286:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c28a:	e7df      	b.n	800c24c <__d2b+0x70>
 800c28c:	0800d3ec 	.word	0x0800d3ec
 800c290:	0800d4e0 	.word	0x0800d4e0

0800c294 <__ratio>:
 800c294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	4688      	mov	r8, r1
 800c29a:	4669      	mov	r1, sp
 800c29c:	4681      	mov	r9, r0
 800c29e:	f7ff ff4d 	bl	800c13c <__b2d>
 800c2a2:	a901      	add	r1, sp, #4
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	ec55 4b10 	vmov	r4, r5, d0
 800c2aa:	f7ff ff47 	bl	800c13c <__b2d>
 800c2ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2b6:	eba3 0c02 	sub.w	ip, r3, r2
 800c2ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2c4:	ec51 0b10 	vmov	r0, r1, d0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	bfd6      	itet	le
 800c2cc:	460a      	movle	r2, r1
 800c2ce:	462a      	movgt	r2, r5
 800c2d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2d4:	468b      	mov	fp, r1
 800c2d6:	462f      	mov	r7, r5
 800c2d8:	bfd4      	ite	le
 800c2da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	ee10 2a10 	vmov	r2, s0
 800c2e8:	465b      	mov	r3, fp
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	f7f4 fabe 	bl	800086c <__aeabi_ddiv>
 800c2f0:	ec41 0b10 	vmov	d0, r0, r1
 800c2f4:	b003      	add	sp, #12
 800c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2fa <__copybits>:
 800c2fa:	3901      	subs	r1, #1
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	1149      	asrs	r1, r1, #5
 800c300:	6914      	ldr	r4, [r2, #16]
 800c302:	3101      	adds	r1, #1
 800c304:	f102 0314 	add.w	r3, r2, #20
 800c308:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c30c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c310:	1f05      	subs	r5, r0, #4
 800c312:	42a3      	cmp	r3, r4
 800c314:	d30c      	bcc.n	800c330 <__copybits+0x36>
 800c316:	1aa3      	subs	r3, r4, r2
 800c318:	3b11      	subs	r3, #17
 800c31a:	f023 0303 	bic.w	r3, r3, #3
 800c31e:	3211      	adds	r2, #17
 800c320:	42a2      	cmp	r2, r4
 800c322:	bf88      	it	hi
 800c324:	2300      	movhi	r3, #0
 800c326:	4418      	add	r0, r3
 800c328:	2300      	movs	r3, #0
 800c32a:	4288      	cmp	r0, r1
 800c32c:	d305      	bcc.n	800c33a <__copybits+0x40>
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	f853 6b04 	ldr.w	r6, [r3], #4
 800c334:	f845 6f04 	str.w	r6, [r5, #4]!
 800c338:	e7eb      	b.n	800c312 <__copybits+0x18>
 800c33a:	f840 3b04 	str.w	r3, [r0], #4
 800c33e:	e7f4      	b.n	800c32a <__copybits+0x30>

0800c340 <__any_on>:
 800c340:	f100 0214 	add.w	r2, r0, #20
 800c344:	6900      	ldr	r0, [r0, #16]
 800c346:	114b      	asrs	r3, r1, #5
 800c348:	4298      	cmp	r0, r3
 800c34a:	b510      	push	{r4, lr}
 800c34c:	db11      	blt.n	800c372 <__any_on+0x32>
 800c34e:	dd0a      	ble.n	800c366 <__any_on+0x26>
 800c350:	f011 011f 	ands.w	r1, r1, #31
 800c354:	d007      	beq.n	800c366 <__any_on+0x26>
 800c356:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c35a:	fa24 f001 	lsr.w	r0, r4, r1
 800c35e:	fa00 f101 	lsl.w	r1, r0, r1
 800c362:	428c      	cmp	r4, r1
 800c364:	d10b      	bne.n	800c37e <__any_on+0x3e>
 800c366:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d803      	bhi.n	800c376 <__any_on+0x36>
 800c36e:	2000      	movs	r0, #0
 800c370:	bd10      	pop	{r4, pc}
 800c372:	4603      	mov	r3, r0
 800c374:	e7f7      	b.n	800c366 <__any_on+0x26>
 800c376:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c37a:	2900      	cmp	r1, #0
 800c37c:	d0f5      	beq.n	800c36a <__any_on+0x2a>
 800c37e:	2001      	movs	r0, #1
 800c380:	e7f6      	b.n	800c370 <__any_on+0x30>

0800c382 <_calloc_r>:
 800c382:	b513      	push	{r0, r1, r4, lr}
 800c384:	434a      	muls	r2, r1
 800c386:	4611      	mov	r1, r2
 800c388:	9201      	str	r2, [sp, #4]
 800c38a:	f000 f859 	bl	800c440 <_malloc_r>
 800c38e:	4604      	mov	r4, r0
 800c390:	b118      	cbz	r0, 800c39a <_calloc_r+0x18>
 800c392:	9a01      	ldr	r2, [sp, #4]
 800c394:	2100      	movs	r1, #0
 800c396:	f7fc f85d 	bl	8008454 <memset>
 800c39a:	4620      	mov	r0, r4
 800c39c:	b002      	add	sp, #8
 800c39e:	bd10      	pop	{r4, pc}

0800c3a0 <_free_r>:
 800c3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3a2:	2900      	cmp	r1, #0
 800c3a4:	d048      	beq.n	800c438 <_free_r+0x98>
 800c3a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3aa:	9001      	str	r0, [sp, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c3b2:	bfb8      	it	lt
 800c3b4:	18e4      	addlt	r4, r4, r3
 800c3b6:	f000 fc6d 	bl	800cc94 <__malloc_lock>
 800c3ba:	4a20      	ldr	r2, [pc, #128]	; (800c43c <_free_r+0x9c>)
 800c3bc:	9801      	ldr	r0, [sp, #4]
 800c3be:	6813      	ldr	r3, [r2, #0]
 800c3c0:	4615      	mov	r5, r2
 800c3c2:	b933      	cbnz	r3, 800c3d2 <_free_r+0x32>
 800c3c4:	6063      	str	r3, [r4, #4]
 800c3c6:	6014      	str	r4, [r2, #0]
 800c3c8:	b003      	add	sp, #12
 800c3ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3ce:	f000 bc67 	b.w	800cca0 <__malloc_unlock>
 800c3d2:	42a3      	cmp	r3, r4
 800c3d4:	d90b      	bls.n	800c3ee <_free_r+0x4e>
 800c3d6:	6821      	ldr	r1, [r4, #0]
 800c3d8:	1862      	adds	r2, r4, r1
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	bf04      	itt	eq
 800c3de:	681a      	ldreq	r2, [r3, #0]
 800c3e0:	685b      	ldreq	r3, [r3, #4]
 800c3e2:	6063      	str	r3, [r4, #4]
 800c3e4:	bf04      	itt	eq
 800c3e6:	1852      	addeq	r2, r2, r1
 800c3e8:	6022      	streq	r2, [r4, #0]
 800c3ea:	602c      	str	r4, [r5, #0]
 800c3ec:	e7ec      	b.n	800c3c8 <_free_r+0x28>
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	b10b      	cbz	r3, 800c3f8 <_free_r+0x58>
 800c3f4:	42a3      	cmp	r3, r4
 800c3f6:	d9fa      	bls.n	800c3ee <_free_r+0x4e>
 800c3f8:	6811      	ldr	r1, [r2, #0]
 800c3fa:	1855      	adds	r5, r2, r1
 800c3fc:	42a5      	cmp	r5, r4
 800c3fe:	d10b      	bne.n	800c418 <_free_r+0x78>
 800c400:	6824      	ldr	r4, [r4, #0]
 800c402:	4421      	add	r1, r4
 800c404:	1854      	adds	r4, r2, r1
 800c406:	42a3      	cmp	r3, r4
 800c408:	6011      	str	r1, [r2, #0]
 800c40a:	d1dd      	bne.n	800c3c8 <_free_r+0x28>
 800c40c:	681c      	ldr	r4, [r3, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	6053      	str	r3, [r2, #4]
 800c412:	4421      	add	r1, r4
 800c414:	6011      	str	r1, [r2, #0]
 800c416:	e7d7      	b.n	800c3c8 <_free_r+0x28>
 800c418:	d902      	bls.n	800c420 <_free_r+0x80>
 800c41a:	230c      	movs	r3, #12
 800c41c:	6003      	str	r3, [r0, #0]
 800c41e:	e7d3      	b.n	800c3c8 <_free_r+0x28>
 800c420:	6825      	ldr	r5, [r4, #0]
 800c422:	1961      	adds	r1, r4, r5
 800c424:	428b      	cmp	r3, r1
 800c426:	bf04      	itt	eq
 800c428:	6819      	ldreq	r1, [r3, #0]
 800c42a:	685b      	ldreq	r3, [r3, #4]
 800c42c:	6063      	str	r3, [r4, #4]
 800c42e:	bf04      	itt	eq
 800c430:	1949      	addeq	r1, r1, r5
 800c432:	6021      	streq	r1, [r4, #0]
 800c434:	6054      	str	r4, [r2, #4]
 800c436:	e7c7      	b.n	800c3c8 <_free_r+0x28>
 800c438:	b003      	add	sp, #12
 800c43a:	bd30      	pop	{r4, r5, pc}
 800c43c:	20000210 	.word	0x20000210

0800c440 <_malloc_r>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	1ccd      	adds	r5, r1, #3
 800c444:	f025 0503 	bic.w	r5, r5, #3
 800c448:	3508      	adds	r5, #8
 800c44a:	2d0c      	cmp	r5, #12
 800c44c:	bf38      	it	cc
 800c44e:	250c      	movcc	r5, #12
 800c450:	2d00      	cmp	r5, #0
 800c452:	4606      	mov	r6, r0
 800c454:	db01      	blt.n	800c45a <_malloc_r+0x1a>
 800c456:	42a9      	cmp	r1, r5
 800c458:	d903      	bls.n	800c462 <_malloc_r+0x22>
 800c45a:	230c      	movs	r3, #12
 800c45c:	6033      	str	r3, [r6, #0]
 800c45e:	2000      	movs	r0, #0
 800c460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c462:	f000 fc17 	bl	800cc94 <__malloc_lock>
 800c466:	4921      	ldr	r1, [pc, #132]	; (800c4ec <_malloc_r+0xac>)
 800c468:	680a      	ldr	r2, [r1, #0]
 800c46a:	4614      	mov	r4, r2
 800c46c:	b99c      	cbnz	r4, 800c496 <_malloc_r+0x56>
 800c46e:	4f20      	ldr	r7, [pc, #128]	; (800c4f0 <_malloc_r+0xb0>)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	b923      	cbnz	r3, 800c47e <_malloc_r+0x3e>
 800c474:	4621      	mov	r1, r4
 800c476:	4630      	mov	r0, r6
 800c478:	f000 fafa 	bl	800ca70 <_sbrk_r>
 800c47c:	6038      	str	r0, [r7, #0]
 800c47e:	4629      	mov	r1, r5
 800c480:	4630      	mov	r0, r6
 800c482:	f000 faf5 	bl	800ca70 <_sbrk_r>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d123      	bne.n	800c4d2 <_malloc_r+0x92>
 800c48a:	230c      	movs	r3, #12
 800c48c:	6033      	str	r3, [r6, #0]
 800c48e:	4630      	mov	r0, r6
 800c490:	f000 fc06 	bl	800cca0 <__malloc_unlock>
 800c494:	e7e3      	b.n	800c45e <_malloc_r+0x1e>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	1b5b      	subs	r3, r3, r5
 800c49a:	d417      	bmi.n	800c4cc <_malloc_r+0x8c>
 800c49c:	2b0b      	cmp	r3, #11
 800c49e:	d903      	bls.n	800c4a8 <_malloc_r+0x68>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	441c      	add	r4, r3
 800c4a4:	6025      	str	r5, [r4, #0]
 800c4a6:	e004      	b.n	800c4b2 <_malloc_r+0x72>
 800c4a8:	6863      	ldr	r3, [r4, #4]
 800c4aa:	42a2      	cmp	r2, r4
 800c4ac:	bf0c      	ite	eq
 800c4ae:	600b      	streq	r3, [r1, #0]
 800c4b0:	6053      	strne	r3, [r2, #4]
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f000 fbf4 	bl	800cca0 <__malloc_unlock>
 800c4b8:	f104 000b 	add.w	r0, r4, #11
 800c4bc:	1d23      	adds	r3, r4, #4
 800c4be:	f020 0007 	bic.w	r0, r0, #7
 800c4c2:	1ac2      	subs	r2, r0, r3
 800c4c4:	d0cc      	beq.n	800c460 <_malloc_r+0x20>
 800c4c6:	1a1b      	subs	r3, r3, r0
 800c4c8:	50a3      	str	r3, [r4, r2]
 800c4ca:	e7c9      	b.n	800c460 <_malloc_r+0x20>
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	6864      	ldr	r4, [r4, #4]
 800c4d0:	e7cc      	b.n	800c46c <_malloc_r+0x2c>
 800c4d2:	1cc4      	adds	r4, r0, #3
 800c4d4:	f024 0403 	bic.w	r4, r4, #3
 800c4d8:	42a0      	cmp	r0, r4
 800c4da:	d0e3      	beq.n	800c4a4 <_malloc_r+0x64>
 800c4dc:	1a21      	subs	r1, r4, r0
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f000 fac6 	bl	800ca70 <_sbrk_r>
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d1dd      	bne.n	800c4a4 <_malloc_r+0x64>
 800c4e8:	e7cf      	b.n	800c48a <_malloc_r+0x4a>
 800c4ea:	bf00      	nop
 800c4ec:	20000210 	.word	0x20000210
 800c4f0:	20000214 	.word	0x20000214

0800c4f4 <__ssputs_r>:
 800c4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f8:	688e      	ldr	r6, [r1, #8]
 800c4fa:	429e      	cmp	r6, r3
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	4690      	mov	r8, r2
 800c502:	461f      	mov	r7, r3
 800c504:	d838      	bhi.n	800c578 <__ssputs_r+0x84>
 800c506:	898a      	ldrh	r2, [r1, #12]
 800c508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c50c:	d032      	beq.n	800c574 <__ssputs_r+0x80>
 800c50e:	6825      	ldr	r5, [r4, #0]
 800c510:	6909      	ldr	r1, [r1, #16]
 800c512:	eba5 0901 	sub.w	r9, r5, r1
 800c516:	6965      	ldr	r5, [r4, #20]
 800c518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c51c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c520:	3301      	adds	r3, #1
 800c522:	444b      	add	r3, r9
 800c524:	106d      	asrs	r5, r5, #1
 800c526:	429d      	cmp	r5, r3
 800c528:	bf38      	it	cc
 800c52a:	461d      	movcc	r5, r3
 800c52c:	0553      	lsls	r3, r2, #21
 800c52e:	d531      	bpl.n	800c594 <__ssputs_r+0xa0>
 800c530:	4629      	mov	r1, r5
 800c532:	f7ff ff85 	bl	800c440 <_malloc_r>
 800c536:	4606      	mov	r6, r0
 800c538:	b950      	cbnz	r0, 800c550 <__ssputs_r+0x5c>
 800c53a:	230c      	movs	r3, #12
 800c53c:	f8ca 3000 	str.w	r3, [sl]
 800c540:	89a3      	ldrh	r3, [r4, #12]
 800c542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c546:	81a3      	strh	r3, [r4, #12]
 800c548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	6921      	ldr	r1, [r4, #16]
 800c552:	464a      	mov	r2, r9
 800c554:	f7ff fa4c 	bl	800b9f0 <memcpy>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	6126      	str	r6, [r4, #16]
 800c566:	6165      	str	r5, [r4, #20]
 800c568:	444e      	add	r6, r9
 800c56a:	eba5 0509 	sub.w	r5, r5, r9
 800c56e:	6026      	str	r6, [r4, #0]
 800c570:	60a5      	str	r5, [r4, #8]
 800c572:	463e      	mov	r6, r7
 800c574:	42be      	cmp	r6, r7
 800c576:	d900      	bls.n	800c57a <__ssputs_r+0x86>
 800c578:	463e      	mov	r6, r7
 800c57a:	4632      	mov	r2, r6
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	4641      	mov	r1, r8
 800c580:	f000 fb6e 	bl	800cc60 <memmove>
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	6822      	ldr	r2, [r4, #0]
 800c588:	1b9b      	subs	r3, r3, r6
 800c58a:	4432      	add	r2, r6
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	6022      	str	r2, [r4, #0]
 800c590:	2000      	movs	r0, #0
 800c592:	e7db      	b.n	800c54c <__ssputs_r+0x58>
 800c594:	462a      	mov	r2, r5
 800c596:	f000 fb89 	bl	800ccac <_realloc_r>
 800c59a:	4606      	mov	r6, r0
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d1e1      	bne.n	800c564 <__ssputs_r+0x70>
 800c5a0:	6921      	ldr	r1, [r4, #16]
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	f7ff fefc 	bl	800c3a0 <_free_r>
 800c5a8:	e7c7      	b.n	800c53a <__ssputs_r+0x46>
	...

0800c5ac <_svfiprintf_r>:
 800c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b0:	4698      	mov	r8, r3
 800c5b2:	898b      	ldrh	r3, [r1, #12]
 800c5b4:	061b      	lsls	r3, r3, #24
 800c5b6:	b09d      	sub	sp, #116	; 0x74
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	460d      	mov	r5, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	d50e      	bpl.n	800c5de <_svfiprintf_r+0x32>
 800c5c0:	690b      	ldr	r3, [r1, #16]
 800c5c2:	b963      	cbnz	r3, 800c5de <_svfiprintf_r+0x32>
 800c5c4:	2140      	movs	r1, #64	; 0x40
 800c5c6:	f7ff ff3b 	bl	800c440 <_malloc_r>
 800c5ca:	6028      	str	r0, [r5, #0]
 800c5cc:	6128      	str	r0, [r5, #16]
 800c5ce:	b920      	cbnz	r0, 800c5da <_svfiprintf_r+0x2e>
 800c5d0:	230c      	movs	r3, #12
 800c5d2:	603b      	str	r3, [r7, #0]
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5d8:	e0d1      	b.n	800c77e <_svfiprintf_r+0x1d2>
 800c5da:	2340      	movs	r3, #64	; 0x40
 800c5dc:	616b      	str	r3, [r5, #20]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e2:	2320      	movs	r3, #32
 800c5e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ec:	2330      	movs	r3, #48	; 0x30
 800c5ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c798 <_svfiprintf_r+0x1ec>
 800c5f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5f6:	f04f 0901 	mov.w	r9, #1
 800c5fa:	4623      	mov	r3, r4
 800c5fc:	469a      	mov	sl, r3
 800c5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c602:	b10a      	cbz	r2, 800c608 <_svfiprintf_r+0x5c>
 800c604:	2a25      	cmp	r2, #37	; 0x25
 800c606:	d1f9      	bne.n	800c5fc <_svfiprintf_r+0x50>
 800c608:	ebba 0b04 	subs.w	fp, sl, r4
 800c60c:	d00b      	beq.n	800c626 <_svfiprintf_r+0x7a>
 800c60e:	465b      	mov	r3, fp
 800c610:	4622      	mov	r2, r4
 800c612:	4629      	mov	r1, r5
 800c614:	4638      	mov	r0, r7
 800c616:	f7ff ff6d 	bl	800c4f4 <__ssputs_r>
 800c61a:	3001      	adds	r0, #1
 800c61c:	f000 80aa 	beq.w	800c774 <_svfiprintf_r+0x1c8>
 800c620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c622:	445a      	add	r2, fp
 800c624:	9209      	str	r2, [sp, #36]	; 0x24
 800c626:	f89a 3000 	ldrb.w	r3, [sl]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 80a2 	beq.w	800c774 <_svfiprintf_r+0x1c8>
 800c630:	2300      	movs	r3, #0
 800c632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63a:	f10a 0a01 	add.w	sl, sl, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	9307      	str	r3, [sp, #28]
 800c642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c646:	931a      	str	r3, [sp, #104]	; 0x68
 800c648:	4654      	mov	r4, sl
 800c64a:	2205      	movs	r2, #5
 800c64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c650:	4851      	ldr	r0, [pc, #324]	; (800c798 <_svfiprintf_r+0x1ec>)
 800c652:	f7f3 fdd5 	bl	8000200 <memchr>
 800c656:	9a04      	ldr	r2, [sp, #16]
 800c658:	b9d8      	cbnz	r0, 800c692 <_svfiprintf_r+0xe6>
 800c65a:	06d0      	lsls	r0, r2, #27
 800c65c:	bf44      	itt	mi
 800c65e:	2320      	movmi	r3, #32
 800c660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c664:	0711      	lsls	r1, r2, #28
 800c666:	bf44      	itt	mi
 800c668:	232b      	movmi	r3, #43	; 0x2b
 800c66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c66e:	f89a 3000 	ldrb.w	r3, [sl]
 800c672:	2b2a      	cmp	r3, #42	; 0x2a
 800c674:	d015      	beq.n	800c6a2 <_svfiprintf_r+0xf6>
 800c676:	9a07      	ldr	r2, [sp, #28]
 800c678:	4654      	mov	r4, sl
 800c67a:	2000      	movs	r0, #0
 800c67c:	f04f 0c0a 	mov.w	ip, #10
 800c680:	4621      	mov	r1, r4
 800c682:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c686:	3b30      	subs	r3, #48	; 0x30
 800c688:	2b09      	cmp	r3, #9
 800c68a:	d94e      	bls.n	800c72a <_svfiprintf_r+0x17e>
 800c68c:	b1b0      	cbz	r0, 800c6bc <_svfiprintf_r+0x110>
 800c68e:	9207      	str	r2, [sp, #28]
 800c690:	e014      	b.n	800c6bc <_svfiprintf_r+0x110>
 800c692:	eba0 0308 	sub.w	r3, r0, r8
 800c696:	fa09 f303 	lsl.w	r3, r9, r3
 800c69a:	4313      	orrs	r3, r2
 800c69c:	9304      	str	r3, [sp, #16]
 800c69e:	46a2      	mov	sl, r4
 800c6a0:	e7d2      	b.n	800c648 <_svfiprintf_r+0x9c>
 800c6a2:	9b03      	ldr	r3, [sp, #12]
 800c6a4:	1d19      	adds	r1, r3, #4
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	9103      	str	r1, [sp, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfbb      	ittet	lt
 800c6ae:	425b      	neglt	r3, r3
 800c6b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b4:	9307      	strge	r3, [sp, #28]
 800c6b6:	9307      	strlt	r3, [sp, #28]
 800c6b8:	bfb8      	it	lt
 800c6ba:	9204      	strlt	r2, [sp, #16]
 800c6bc:	7823      	ldrb	r3, [r4, #0]
 800c6be:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c0:	d10c      	bne.n	800c6dc <_svfiprintf_r+0x130>
 800c6c2:	7863      	ldrb	r3, [r4, #1]
 800c6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c6:	d135      	bne.n	800c734 <_svfiprintf_r+0x188>
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	1d1a      	adds	r2, r3, #4
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	9203      	str	r2, [sp, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bfb8      	it	lt
 800c6d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6d8:	3402      	adds	r4, #2
 800c6da:	9305      	str	r3, [sp, #20]
 800c6dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7a8 <_svfiprintf_r+0x1fc>
 800c6e0:	7821      	ldrb	r1, [r4, #0]
 800c6e2:	2203      	movs	r2, #3
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	f7f3 fd8b 	bl	8000200 <memchr>
 800c6ea:	b140      	cbz	r0, 800c6fe <_svfiprintf_r+0x152>
 800c6ec:	2340      	movs	r3, #64	; 0x40
 800c6ee:	eba0 000a 	sub.w	r0, r0, sl
 800c6f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c6f6:	9b04      	ldr	r3, [sp, #16]
 800c6f8:	4303      	orrs	r3, r0
 800c6fa:	3401      	adds	r4, #1
 800c6fc:	9304      	str	r3, [sp, #16]
 800c6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c702:	4826      	ldr	r0, [pc, #152]	; (800c79c <_svfiprintf_r+0x1f0>)
 800c704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c708:	2206      	movs	r2, #6
 800c70a:	f7f3 fd79 	bl	8000200 <memchr>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d038      	beq.n	800c784 <_svfiprintf_r+0x1d8>
 800c712:	4b23      	ldr	r3, [pc, #140]	; (800c7a0 <_svfiprintf_r+0x1f4>)
 800c714:	bb1b      	cbnz	r3, 800c75e <_svfiprintf_r+0x1b2>
 800c716:	9b03      	ldr	r3, [sp, #12]
 800c718:	3307      	adds	r3, #7
 800c71a:	f023 0307 	bic.w	r3, r3, #7
 800c71e:	3308      	adds	r3, #8
 800c720:	9303      	str	r3, [sp, #12]
 800c722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c724:	4433      	add	r3, r6
 800c726:	9309      	str	r3, [sp, #36]	; 0x24
 800c728:	e767      	b.n	800c5fa <_svfiprintf_r+0x4e>
 800c72a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c72e:	460c      	mov	r4, r1
 800c730:	2001      	movs	r0, #1
 800c732:	e7a5      	b.n	800c680 <_svfiprintf_r+0xd4>
 800c734:	2300      	movs	r3, #0
 800c736:	3401      	adds	r4, #1
 800c738:	9305      	str	r3, [sp, #20]
 800c73a:	4619      	mov	r1, r3
 800c73c:	f04f 0c0a 	mov.w	ip, #10
 800c740:	4620      	mov	r0, r4
 800c742:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c746:	3a30      	subs	r2, #48	; 0x30
 800c748:	2a09      	cmp	r2, #9
 800c74a:	d903      	bls.n	800c754 <_svfiprintf_r+0x1a8>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0c5      	beq.n	800c6dc <_svfiprintf_r+0x130>
 800c750:	9105      	str	r1, [sp, #20]
 800c752:	e7c3      	b.n	800c6dc <_svfiprintf_r+0x130>
 800c754:	fb0c 2101 	mla	r1, ip, r1, r2
 800c758:	4604      	mov	r4, r0
 800c75a:	2301      	movs	r3, #1
 800c75c:	e7f0      	b.n	800c740 <_svfiprintf_r+0x194>
 800c75e:	ab03      	add	r3, sp, #12
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	462a      	mov	r2, r5
 800c764:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <_svfiprintf_r+0x1f8>)
 800c766:	a904      	add	r1, sp, #16
 800c768:	4638      	mov	r0, r7
 800c76a:	f7fb ff1b 	bl	80085a4 <_printf_float>
 800c76e:	1c42      	adds	r2, r0, #1
 800c770:	4606      	mov	r6, r0
 800c772:	d1d6      	bne.n	800c722 <_svfiprintf_r+0x176>
 800c774:	89ab      	ldrh	r3, [r5, #12]
 800c776:	065b      	lsls	r3, r3, #25
 800c778:	f53f af2c 	bmi.w	800c5d4 <_svfiprintf_r+0x28>
 800c77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c77e:	b01d      	add	sp, #116	; 0x74
 800c780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c784:	ab03      	add	r3, sp, #12
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	462a      	mov	r2, r5
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <_svfiprintf_r+0x1f8>)
 800c78c:	a904      	add	r1, sp, #16
 800c78e:	4638      	mov	r0, r7
 800c790:	f7fc f9ac 	bl	8008aec <_printf_i>
 800c794:	e7eb      	b.n	800c76e <_svfiprintf_r+0x1c2>
 800c796:	bf00      	nop
 800c798:	0800d63c 	.word	0x0800d63c
 800c79c:	0800d646 	.word	0x0800d646
 800c7a0:	080085a5 	.word	0x080085a5
 800c7a4:	0800c4f5 	.word	0x0800c4f5
 800c7a8:	0800d642 	.word	0x0800d642

0800c7ac <__sfputc_r>:
 800c7ac:	6893      	ldr	r3, [r2, #8]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	b410      	push	{r4}
 800c7b4:	6093      	str	r3, [r2, #8]
 800c7b6:	da08      	bge.n	800c7ca <__sfputc_r+0x1e>
 800c7b8:	6994      	ldr	r4, [r2, #24]
 800c7ba:	42a3      	cmp	r3, r4
 800c7bc:	db01      	blt.n	800c7c2 <__sfputc_r+0x16>
 800c7be:	290a      	cmp	r1, #10
 800c7c0:	d103      	bne.n	800c7ca <__sfputc_r+0x1e>
 800c7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c6:	f7fd bc2d 	b.w	800a024 <__swbuf_r>
 800c7ca:	6813      	ldr	r3, [r2, #0]
 800c7cc:	1c58      	adds	r0, r3, #1
 800c7ce:	6010      	str	r0, [r2, #0]
 800c7d0:	7019      	strb	r1, [r3, #0]
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <__sfputs_r>:
 800c7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460f      	mov	r7, r1
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	18d5      	adds	r5, r2, r3
 800c7e4:	42ac      	cmp	r4, r5
 800c7e6:	d101      	bne.n	800c7ec <__sfputs_r+0x12>
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	e007      	b.n	800c7fc <__sfputs_r+0x22>
 800c7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f0:	463a      	mov	r2, r7
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff ffda 	bl	800c7ac <__sfputc_r>
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	d1f3      	bne.n	800c7e4 <__sfputs_r+0xa>
 800c7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c800 <_vfiprintf_r>:
 800c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	460d      	mov	r5, r1
 800c806:	b09d      	sub	sp, #116	; 0x74
 800c808:	4614      	mov	r4, r2
 800c80a:	4698      	mov	r8, r3
 800c80c:	4606      	mov	r6, r0
 800c80e:	b118      	cbz	r0, 800c818 <_vfiprintf_r+0x18>
 800c810:	6983      	ldr	r3, [r0, #24]
 800c812:	b90b      	cbnz	r3, 800c818 <_vfiprintf_r+0x18>
 800c814:	f7fe fc5a 	bl	800b0cc <__sinit>
 800c818:	4b89      	ldr	r3, [pc, #548]	; (800ca40 <_vfiprintf_r+0x240>)
 800c81a:	429d      	cmp	r5, r3
 800c81c:	d11b      	bne.n	800c856 <_vfiprintf_r+0x56>
 800c81e:	6875      	ldr	r5, [r6, #4]
 800c820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c822:	07d9      	lsls	r1, r3, #31
 800c824:	d405      	bmi.n	800c832 <_vfiprintf_r+0x32>
 800c826:	89ab      	ldrh	r3, [r5, #12]
 800c828:	059a      	lsls	r2, r3, #22
 800c82a:	d402      	bmi.n	800c832 <_vfiprintf_r+0x32>
 800c82c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82e:	f7ff f85e 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800c832:	89ab      	ldrh	r3, [r5, #12]
 800c834:	071b      	lsls	r3, r3, #28
 800c836:	d501      	bpl.n	800c83c <_vfiprintf_r+0x3c>
 800c838:	692b      	ldr	r3, [r5, #16]
 800c83a:	b9eb      	cbnz	r3, 800c878 <_vfiprintf_r+0x78>
 800c83c:	4629      	mov	r1, r5
 800c83e:	4630      	mov	r0, r6
 800c840:	f7fd fc42 	bl	800a0c8 <__swsetup_r>
 800c844:	b1c0      	cbz	r0, 800c878 <_vfiprintf_r+0x78>
 800c846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c848:	07dc      	lsls	r4, r3, #31
 800c84a:	d50e      	bpl.n	800c86a <_vfiprintf_r+0x6a>
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c850:	b01d      	add	sp, #116	; 0x74
 800c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c856:	4b7b      	ldr	r3, [pc, #492]	; (800ca44 <_vfiprintf_r+0x244>)
 800c858:	429d      	cmp	r5, r3
 800c85a:	d101      	bne.n	800c860 <_vfiprintf_r+0x60>
 800c85c:	68b5      	ldr	r5, [r6, #8]
 800c85e:	e7df      	b.n	800c820 <_vfiprintf_r+0x20>
 800c860:	4b79      	ldr	r3, [pc, #484]	; (800ca48 <_vfiprintf_r+0x248>)
 800c862:	429d      	cmp	r5, r3
 800c864:	bf08      	it	eq
 800c866:	68f5      	ldreq	r5, [r6, #12]
 800c868:	e7da      	b.n	800c820 <_vfiprintf_r+0x20>
 800c86a:	89ab      	ldrh	r3, [r5, #12]
 800c86c:	0598      	lsls	r0, r3, #22
 800c86e:	d4ed      	bmi.n	800c84c <_vfiprintf_r+0x4c>
 800c870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c872:	f7ff f83d 	bl	800b8f0 <__retarget_lock_release_recursive>
 800c876:	e7e9      	b.n	800c84c <_vfiprintf_r+0x4c>
 800c878:	2300      	movs	r3, #0
 800c87a:	9309      	str	r3, [sp, #36]	; 0x24
 800c87c:	2320      	movs	r3, #32
 800c87e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c882:	f8cd 800c 	str.w	r8, [sp, #12]
 800c886:	2330      	movs	r3, #48	; 0x30
 800c888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca4c <_vfiprintf_r+0x24c>
 800c88c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c890:	f04f 0901 	mov.w	r9, #1
 800c894:	4623      	mov	r3, r4
 800c896:	469a      	mov	sl, r3
 800c898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c89c:	b10a      	cbz	r2, 800c8a2 <_vfiprintf_r+0xa2>
 800c89e:	2a25      	cmp	r2, #37	; 0x25
 800c8a0:	d1f9      	bne.n	800c896 <_vfiprintf_r+0x96>
 800c8a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c8a6:	d00b      	beq.n	800c8c0 <_vfiprintf_r+0xc0>
 800c8a8:	465b      	mov	r3, fp
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f7ff ff93 	bl	800c7da <__sfputs_r>
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	f000 80aa 	beq.w	800ca0e <_vfiprintf_r+0x20e>
 800c8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8bc:	445a      	add	r2, fp
 800c8be:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 80a2 	beq.w	800ca0e <_vfiprintf_r+0x20e>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8d4:	f10a 0a01 	add.w	sl, sl, #1
 800c8d8:	9304      	str	r3, [sp, #16]
 800c8da:	9307      	str	r3, [sp, #28]
 800c8dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8e0:	931a      	str	r3, [sp, #104]	; 0x68
 800c8e2:	4654      	mov	r4, sl
 800c8e4:	2205      	movs	r2, #5
 800c8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ea:	4858      	ldr	r0, [pc, #352]	; (800ca4c <_vfiprintf_r+0x24c>)
 800c8ec:	f7f3 fc88 	bl	8000200 <memchr>
 800c8f0:	9a04      	ldr	r2, [sp, #16]
 800c8f2:	b9d8      	cbnz	r0, 800c92c <_vfiprintf_r+0x12c>
 800c8f4:	06d1      	lsls	r1, r2, #27
 800c8f6:	bf44      	itt	mi
 800c8f8:	2320      	movmi	r3, #32
 800c8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8fe:	0713      	lsls	r3, r2, #28
 800c900:	bf44      	itt	mi
 800c902:	232b      	movmi	r3, #43	; 0x2b
 800c904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c908:	f89a 3000 	ldrb.w	r3, [sl]
 800c90c:	2b2a      	cmp	r3, #42	; 0x2a
 800c90e:	d015      	beq.n	800c93c <_vfiprintf_r+0x13c>
 800c910:	9a07      	ldr	r2, [sp, #28]
 800c912:	4654      	mov	r4, sl
 800c914:	2000      	movs	r0, #0
 800c916:	f04f 0c0a 	mov.w	ip, #10
 800c91a:	4621      	mov	r1, r4
 800c91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c920:	3b30      	subs	r3, #48	; 0x30
 800c922:	2b09      	cmp	r3, #9
 800c924:	d94e      	bls.n	800c9c4 <_vfiprintf_r+0x1c4>
 800c926:	b1b0      	cbz	r0, 800c956 <_vfiprintf_r+0x156>
 800c928:	9207      	str	r2, [sp, #28]
 800c92a:	e014      	b.n	800c956 <_vfiprintf_r+0x156>
 800c92c:	eba0 0308 	sub.w	r3, r0, r8
 800c930:	fa09 f303 	lsl.w	r3, r9, r3
 800c934:	4313      	orrs	r3, r2
 800c936:	9304      	str	r3, [sp, #16]
 800c938:	46a2      	mov	sl, r4
 800c93a:	e7d2      	b.n	800c8e2 <_vfiprintf_r+0xe2>
 800c93c:	9b03      	ldr	r3, [sp, #12]
 800c93e:	1d19      	adds	r1, r3, #4
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	9103      	str	r1, [sp, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	bfbb      	ittet	lt
 800c948:	425b      	neglt	r3, r3
 800c94a:	f042 0202 	orrlt.w	r2, r2, #2
 800c94e:	9307      	strge	r3, [sp, #28]
 800c950:	9307      	strlt	r3, [sp, #28]
 800c952:	bfb8      	it	lt
 800c954:	9204      	strlt	r2, [sp, #16]
 800c956:	7823      	ldrb	r3, [r4, #0]
 800c958:	2b2e      	cmp	r3, #46	; 0x2e
 800c95a:	d10c      	bne.n	800c976 <_vfiprintf_r+0x176>
 800c95c:	7863      	ldrb	r3, [r4, #1]
 800c95e:	2b2a      	cmp	r3, #42	; 0x2a
 800c960:	d135      	bne.n	800c9ce <_vfiprintf_r+0x1ce>
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	1d1a      	adds	r2, r3, #4
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	9203      	str	r2, [sp, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	bfb8      	it	lt
 800c96e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c972:	3402      	adds	r4, #2
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca5c <_vfiprintf_r+0x25c>
 800c97a:	7821      	ldrb	r1, [r4, #0]
 800c97c:	2203      	movs	r2, #3
 800c97e:	4650      	mov	r0, sl
 800c980:	f7f3 fc3e 	bl	8000200 <memchr>
 800c984:	b140      	cbz	r0, 800c998 <_vfiprintf_r+0x198>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	eba0 000a 	sub.w	r0, r0, sl
 800c98c:	fa03 f000 	lsl.w	r0, r3, r0
 800c990:	9b04      	ldr	r3, [sp, #16]
 800c992:	4303      	orrs	r3, r0
 800c994:	3401      	adds	r4, #1
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c99c:	482c      	ldr	r0, [pc, #176]	; (800ca50 <_vfiprintf_r+0x250>)
 800c99e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9a2:	2206      	movs	r2, #6
 800c9a4:	f7f3 fc2c 	bl	8000200 <memchr>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d03f      	beq.n	800ca2c <_vfiprintf_r+0x22c>
 800c9ac:	4b29      	ldr	r3, [pc, #164]	; (800ca54 <_vfiprintf_r+0x254>)
 800c9ae:	bb1b      	cbnz	r3, 800c9f8 <_vfiprintf_r+0x1f8>
 800c9b0:	9b03      	ldr	r3, [sp, #12]
 800c9b2:	3307      	adds	r3, #7
 800c9b4:	f023 0307 	bic.w	r3, r3, #7
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	9303      	str	r3, [sp, #12]
 800c9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9be:	443b      	add	r3, r7
 800c9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c2:	e767      	b.n	800c894 <_vfiprintf_r+0x94>
 800c9c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	e7a5      	b.n	800c91a <_vfiprintf_r+0x11a>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	3401      	adds	r4, #1
 800c9d2:	9305      	str	r3, [sp, #20]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	f04f 0c0a 	mov.w	ip, #10
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9e0:	3a30      	subs	r2, #48	; 0x30
 800c9e2:	2a09      	cmp	r2, #9
 800c9e4:	d903      	bls.n	800c9ee <_vfiprintf_r+0x1ee>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0c5      	beq.n	800c976 <_vfiprintf_r+0x176>
 800c9ea:	9105      	str	r1, [sp, #20]
 800c9ec:	e7c3      	b.n	800c976 <_vfiprintf_r+0x176>
 800c9ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e7f0      	b.n	800c9da <_vfiprintf_r+0x1da>
 800c9f8:	ab03      	add	r3, sp, #12
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	462a      	mov	r2, r5
 800c9fe:	4b16      	ldr	r3, [pc, #88]	; (800ca58 <_vfiprintf_r+0x258>)
 800ca00:	a904      	add	r1, sp, #16
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7fb fdce 	bl	80085a4 <_printf_float>
 800ca08:	4607      	mov	r7, r0
 800ca0a:	1c78      	adds	r0, r7, #1
 800ca0c:	d1d6      	bne.n	800c9bc <_vfiprintf_r+0x1bc>
 800ca0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca10:	07d9      	lsls	r1, r3, #31
 800ca12:	d405      	bmi.n	800ca20 <_vfiprintf_r+0x220>
 800ca14:	89ab      	ldrh	r3, [r5, #12]
 800ca16:	059a      	lsls	r2, r3, #22
 800ca18:	d402      	bmi.n	800ca20 <_vfiprintf_r+0x220>
 800ca1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca1c:	f7fe ff68 	bl	800b8f0 <__retarget_lock_release_recursive>
 800ca20:	89ab      	ldrh	r3, [r5, #12]
 800ca22:	065b      	lsls	r3, r3, #25
 800ca24:	f53f af12 	bmi.w	800c84c <_vfiprintf_r+0x4c>
 800ca28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca2a:	e711      	b.n	800c850 <_vfiprintf_r+0x50>
 800ca2c:	ab03      	add	r3, sp, #12
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	462a      	mov	r2, r5
 800ca32:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <_vfiprintf_r+0x258>)
 800ca34:	a904      	add	r1, sp, #16
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7fc f858 	bl	8008aec <_printf_i>
 800ca3c:	e7e4      	b.n	800ca08 <_vfiprintf_r+0x208>
 800ca3e:	bf00      	nop
 800ca40:	0800d420 	.word	0x0800d420
 800ca44:	0800d440 	.word	0x0800d440
 800ca48:	0800d400 	.word	0x0800d400
 800ca4c:	0800d63c 	.word	0x0800d63c
 800ca50:	0800d646 	.word	0x0800d646
 800ca54:	080085a5 	.word	0x080085a5
 800ca58:	0800c7db 	.word	0x0800c7db
 800ca5c:	0800d642 	.word	0x0800d642

0800ca60 <nan>:
 800ca60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca68 <nan+0x8>
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	00000000 	.word	0x00000000
 800ca6c:	7ff80000 	.word	0x7ff80000

0800ca70 <_sbrk_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d06      	ldr	r5, [pc, #24]	; (800ca8c <_sbrk_r+0x1c>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	f7f5 fc1a 	bl	80022b4 <_sbrk>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_sbrk_r+0x1a>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_sbrk_r+0x1a>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	200005ec 	.word	0x200005ec

0800ca90 <__sread>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	460c      	mov	r4, r1
 800ca94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca98:	f000 f92e 	bl	800ccf8 <_read_r>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	bfab      	itete	ge
 800caa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caa2:	89a3      	ldrhlt	r3, [r4, #12]
 800caa4:	181b      	addge	r3, r3, r0
 800caa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800caaa:	bfac      	ite	ge
 800caac:	6563      	strge	r3, [r4, #84]	; 0x54
 800caae:	81a3      	strhlt	r3, [r4, #12]
 800cab0:	bd10      	pop	{r4, pc}

0800cab2 <__swrite>:
 800cab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab6:	461f      	mov	r7, r3
 800cab8:	898b      	ldrh	r3, [r1, #12]
 800caba:	05db      	lsls	r3, r3, #23
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	4616      	mov	r6, r2
 800cac2:	d505      	bpl.n	800cad0 <__swrite+0x1e>
 800cac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac8:	2302      	movs	r3, #2
 800caca:	2200      	movs	r2, #0
 800cacc:	f000 f8b6 	bl	800cc3c <_lseek_r>
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cada:	81a3      	strh	r3, [r4, #12]
 800cadc:	4632      	mov	r2, r6
 800cade:	463b      	mov	r3, r7
 800cae0:	4628      	mov	r0, r5
 800cae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cae6:	f000 b835 	b.w	800cb54 <_write_r>

0800caea <__sseek>:
 800caea:	b510      	push	{r4, lr}
 800caec:	460c      	mov	r4, r1
 800caee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf2:	f000 f8a3 	bl	800cc3c <_lseek_r>
 800caf6:	1c43      	adds	r3, r0, #1
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	bf15      	itete	ne
 800cafc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cafe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb06:	81a3      	strheq	r3, [r4, #12]
 800cb08:	bf18      	it	ne
 800cb0a:	81a3      	strhne	r3, [r4, #12]
 800cb0c:	bd10      	pop	{r4, pc}

0800cb0e <__sclose>:
 800cb0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb12:	f000 b84f 	b.w	800cbb4 <_close_r>

0800cb16 <strncmp>:
 800cb16:	b510      	push	{r4, lr}
 800cb18:	b16a      	cbz	r2, 800cb36 <strncmp+0x20>
 800cb1a:	3901      	subs	r1, #1
 800cb1c:	1884      	adds	r4, r0, r2
 800cb1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cb22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d103      	bne.n	800cb32 <strncmp+0x1c>
 800cb2a:	42a0      	cmp	r0, r4
 800cb2c:	d001      	beq.n	800cb32 <strncmp+0x1c>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f5      	bne.n	800cb1e <strncmp+0x8>
 800cb32:	1a98      	subs	r0, r3, r2
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	4610      	mov	r0, r2
 800cb38:	e7fc      	b.n	800cb34 <strncmp+0x1e>

0800cb3a <__ascii_wctomb>:
 800cb3a:	b149      	cbz	r1, 800cb50 <__ascii_wctomb+0x16>
 800cb3c:	2aff      	cmp	r2, #255	; 0xff
 800cb3e:	bf85      	ittet	hi
 800cb40:	238a      	movhi	r3, #138	; 0x8a
 800cb42:	6003      	strhi	r3, [r0, #0]
 800cb44:	700a      	strbls	r2, [r1, #0]
 800cb46:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cb4a:	bf98      	it	ls
 800cb4c:	2001      	movls	r0, #1
 800cb4e:	4770      	bx	lr
 800cb50:	4608      	mov	r0, r1
 800cb52:	4770      	bx	lr

0800cb54 <_write_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d07      	ldr	r5, [pc, #28]	; (800cb74 <_write_r+0x20>)
 800cb58:	4604      	mov	r4, r0
 800cb5a:	4608      	mov	r0, r1
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	2200      	movs	r2, #0
 800cb60:	602a      	str	r2, [r5, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	f7f4 fa79 	bl	800105a <_write>
 800cb68:	1c43      	adds	r3, r0, #1
 800cb6a:	d102      	bne.n	800cb72 <_write_r+0x1e>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	b103      	cbz	r3, 800cb72 <_write_r+0x1e>
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	200005ec 	.word	0x200005ec

0800cb78 <__assert_func>:
 800cb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb7a:	4614      	mov	r4, r2
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <__assert_func+0x2c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4605      	mov	r5, r0
 800cb84:	68d8      	ldr	r0, [r3, #12]
 800cb86:	b14c      	cbz	r4, 800cb9c <__assert_func+0x24>
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <__assert_func+0x30>)
 800cb8a:	9100      	str	r1, [sp, #0]
 800cb8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb90:	4906      	ldr	r1, [pc, #24]	; (800cbac <__assert_func+0x34>)
 800cb92:	462b      	mov	r3, r5
 800cb94:	f000 f81e 	bl	800cbd4 <fiprintf>
 800cb98:	f000 f8c0 	bl	800cd1c <abort>
 800cb9c:	4b04      	ldr	r3, [pc, #16]	; (800cbb0 <__assert_func+0x38>)
 800cb9e:	461c      	mov	r4, r3
 800cba0:	e7f3      	b.n	800cb8a <__assert_func+0x12>
 800cba2:	bf00      	nop
 800cba4:	20000014 	.word	0x20000014
 800cba8:	0800d64d 	.word	0x0800d64d
 800cbac:	0800d65a 	.word	0x0800d65a
 800cbb0:	0800d688 	.word	0x0800d688

0800cbb4 <_close_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d06      	ldr	r5, [pc, #24]	; (800cbd0 <_close_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	f7f5 fb43 	bl	800224a <_close>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_close_r+0x1a>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_close_r+0x1a>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	200005ec 	.word	0x200005ec

0800cbd4 <fiprintf>:
 800cbd4:	b40e      	push	{r1, r2, r3}
 800cbd6:	b503      	push	{r0, r1, lr}
 800cbd8:	4601      	mov	r1, r0
 800cbda:	ab03      	add	r3, sp, #12
 800cbdc:	4805      	ldr	r0, [pc, #20]	; (800cbf4 <fiprintf+0x20>)
 800cbde:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe2:	6800      	ldr	r0, [r0, #0]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	f7ff fe0b 	bl	800c800 <_vfiprintf_r>
 800cbea:	b002      	add	sp, #8
 800cbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbf0:	b003      	add	sp, #12
 800cbf2:	4770      	bx	lr
 800cbf4:	20000014 	.word	0x20000014

0800cbf8 <_fstat_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	; (800cc18 <_fstat_r+0x20>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	4611      	mov	r1, r2
 800cc04:	602b      	str	r3, [r5, #0]
 800cc06:	f7f5 fb2c 	bl	8002262 <_fstat>
 800cc0a:	1c43      	adds	r3, r0, #1
 800cc0c:	d102      	bne.n	800cc14 <_fstat_r+0x1c>
 800cc0e:	682b      	ldr	r3, [r5, #0]
 800cc10:	b103      	cbz	r3, 800cc14 <_fstat_r+0x1c>
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	bd38      	pop	{r3, r4, r5, pc}
 800cc16:	bf00      	nop
 800cc18:	200005ec 	.word	0x200005ec

0800cc1c <_isatty_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d06      	ldr	r5, [pc, #24]	; (800cc38 <_isatty_r+0x1c>)
 800cc20:	2300      	movs	r3, #0
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	602b      	str	r3, [r5, #0]
 800cc28:	f7f5 fb2b 	bl	8002282 <_isatty>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d102      	bne.n	800cc36 <_isatty_r+0x1a>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	b103      	cbz	r3, 800cc36 <_isatty_r+0x1a>
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	200005ec 	.word	0x200005ec

0800cc3c <_lseek_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4d07      	ldr	r5, [pc, #28]	; (800cc5c <_lseek_r+0x20>)
 800cc40:	4604      	mov	r4, r0
 800cc42:	4608      	mov	r0, r1
 800cc44:	4611      	mov	r1, r2
 800cc46:	2200      	movs	r2, #0
 800cc48:	602a      	str	r2, [r5, #0]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	f7f5 fb24 	bl	8002298 <_lseek>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	d102      	bne.n	800cc5a <_lseek_r+0x1e>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	b103      	cbz	r3, 800cc5a <_lseek_r+0x1e>
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	200005ec 	.word	0x200005ec

0800cc60 <memmove>:
 800cc60:	4288      	cmp	r0, r1
 800cc62:	b510      	push	{r4, lr}
 800cc64:	eb01 0402 	add.w	r4, r1, r2
 800cc68:	d902      	bls.n	800cc70 <memmove+0x10>
 800cc6a:	4284      	cmp	r4, r0
 800cc6c:	4623      	mov	r3, r4
 800cc6e:	d807      	bhi.n	800cc80 <memmove+0x20>
 800cc70:	1e43      	subs	r3, r0, #1
 800cc72:	42a1      	cmp	r1, r4
 800cc74:	d008      	beq.n	800cc88 <memmove+0x28>
 800cc76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc7e:	e7f8      	b.n	800cc72 <memmove+0x12>
 800cc80:	4402      	add	r2, r0
 800cc82:	4601      	mov	r1, r0
 800cc84:	428a      	cmp	r2, r1
 800cc86:	d100      	bne.n	800cc8a <memmove+0x2a>
 800cc88:	bd10      	pop	{r4, pc}
 800cc8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc92:	e7f7      	b.n	800cc84 <memmove+0x24>

0800cc94 <__malloc_lock>:
 800cc94:	4801      	ldr	r0, [pc, #4]	; (800cc9c <__malloc_lock+0x8>)
 800cc96:	f7fe be2a 	b.w	800b8ee <__retarget_lock_acquire_recursive>
 800cc9a:	bf00      	nop
 800cc9c:	200005e4 	.word	0x200005e4

0800cca0 <__malloc_unlock>:
 800cca0:	4801      	ldr	r0, [pc, #4]	; (800cca8 <__malloc_unlock+0x8>)
 800cca2:	f7fe be25 	b.w	800b8f0 <__retarget_lock_release_recursive>
 800cca6:	bf00      	nop
 800cca8:	200005e4 	.word	0x200005e4

0800ccac <_realloc_r>:
 800ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccae:	4607      	mov	r7, r0
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	460e      	mov	r6, r1
 800ccb4:	b921      	cbnz	r1, 800ccc0 <_realloc_r+0x14>
 800ccb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ccba:	4611      	mov	r1, r2
 800ccbc:	f7ff bbc0 	b.w	800c440 <_malloc_r>
 800ccc0:	b922      	cbnz	r2, 800cccc <_realloc_r+0x20>
 800ccc2:	f7ff fb6d 	bl	800c3a0 <_free_r>
 800ccc6:	4625      	mov	r5, r4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	f000 f82d 	bl	800cd2a <_malloc_usable_size_r>
 800ccd0:	42a0      	cmp	r0, r4
 800ccd2:	d20f      	bcs.n	800ccf4 <_realloc_r+0x48>
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f7ff fbb2 	bl	800c440 <_malloc_r>
 800ccdc:	4605      	mov	r5, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0f2      	beq.n	800ccc8 <_realloc_r+0x1c>
 800cce2:	4631      	mov	r1, r6
 800cce4:	4622      	mov	r2, r4
 800cce6:	f7fe fe83 	bl	800b9f0 <memcpy>
 800ccea:	4631      	mov	r1, r6
 800ccec:	4638      	mov	r0, r7
 800ccee:	f7ff fb57 	bl	800c3a0 <_free_r>
 800ccf2:	e7e9      	b.n	800ccc8 <_realloc_r+0x1c>
 800ccf4:	4635      	mov	r5, r6
 800ccf6:	e7e7      	b.n	800ccc8 <_realloc_r+0x1c>

0800ccf8 <_read_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	; (800cd18 <_read_r+0x20>)
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	602a      	str	r2, [r5, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f7f5 fa82 	bl	8002210 <_read>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_read_r+0x1e>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_read_r+0x1e>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	200005ec 	.word	0x200005ec

0800cd1c <abort>:
 800cd1c:	b508      	push	{r3, lr}
 800cd1e:	2006      	movs	r0, #6
 800cd20:	f000 f834 	bl	800cd8c <raise>
 800cd24:	2001      	movs	r0, #1
 800cd26:	f7f5 fa69 	bl	80021fc <_exit>

0800cd2a <_malloc_usable_size_r>:
 800cd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2e:	1f18      	subs	r0, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bfbc      	itt	lt
 800cd34:	580b      	ldrlt	r3, [r1, r0]
 800cd36:	18c0      	addlt	r0, r0, r3
 800cd38:	4770      	bx	lr

0800cd3a <_raise_r>:
 800cd3a:	291f      	cmp	r1, #31
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	d904      	bls.n	800cd4e <_raise_r+0x14>
 800cd44:	2316      	movs	r3, #22
 800cd46:	6003      	str	r3, [r0, #0]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd50:	b112      	cbz	r2, 800cd58 <_raise_r+0x1e>
 800cd52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd56:	b94b      	cbnz	r3, 800cd6c <_raise_r+0x32>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 f831 	bl	800cdc0 <_getpid_r>
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4601      	mov	r1, r0
 800cd62:	4620      	mov	r0, r4
 800cd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd68:	f000 b818 	b.w	800cd9c <_kill_r>
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d00a      	beq.n	800cd86 <_raise_r+0x4c>
 800cd70:	1c59      	adds	r1, r3, #1
 800cd72:	d103      	bne.n	800cd7c <_raise_r+0x42>
 800cd74:	2316      	movs	r3, #22
 800cd76:	6003      	str	r3, [r0, #0]
 800cd78:	2001      	movs	r0, #1
 800cd7a:	e7e7      	b.n	800cd4c <_raise_r+0x12>
 800cd7c:	2400      	movs	r4, #0
 800cd7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd82:	4628      	mov	r0, r5
 800cd84:	4798      	blx	r3
 800cd86:	2000      	movs	r0, #0
 800cd88:	e7e0      	b.n	800cd4c <_raise_r+0x12>
	...

0800cd8c <raise>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <raise+0xc>)
 800cd8e:	4601      	mov	r1, r0
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f7ff bfd2 	b.w	800cd3a <_raise_r>
 800cd96:	bf00      	nop
 800cd98:	20000014 	.word	0x20000014

0800cd9c <_kill_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	; (800cdbc <_kill_r+0x20>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	4604      	mov	r4, r0
 800cda4:	4608      	mov	r0, r1
 800cda6:	4611      	mov	r1, r2
 800cda8:	602b      	str	r3, [r5, #0]
 800cdaa:	f7f5 fa17 	bl	80021dc <_kill>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d102      	bne.n	800cdb8 <_kill_r+0x1c>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	b103      	cbz	r3, 800cdb8 <_kill_r+0x1c>
 800cdb6:	6023      	str	r3, [r4, #0]
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	bf00      	nop
 800cdbc:	200005ec 	.word	0x200005ec

0800cdc0 <_getpid_r>:
 800cdc0:	f7f5 ba04 	b.w	80021cc <_getpid>

0800cdc4 <_init>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	bf00      	nop
 800cdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdca:	bc08      	pop	{r3}
 800cdcc:	469e      	mov	lr, r3
 800cdce:	4770      	bx	lr

0800cdd0 <_fini>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr
