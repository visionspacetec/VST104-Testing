
VST104-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0800c3a8  0800c3a8  0001c3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb14  0800cb14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb14  0800cb14  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb14  0800cb14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb14  0800cb14  0001cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb18  0800cb18  0001cb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cb1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e0  0800ccfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800ccfc  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d21  00000000  00000000  000390f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fff6  00000000  00000000  0003e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006436  00000000  00000000  0004e3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000547ec  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000068f0  00000000  00000000  00054840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c38c 	.word	0x0800c38c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800c38c 	.word	0x0800c38c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d013      	beq.n	8000d54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00b      	beq.n	8000d54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d3c:	e000      	b.n	8000d40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_write>:
static void MX_ADC2_Init(void);

/* USER CODE BEGIN PFP */

// SWD printf() replacement
int _write(int file, char *ptr, int len) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffc9 	bl	8000d14 <ITM_SendChar>
	for(int i=0; i<len; i++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf1      	blt.n	8000d74 <_write+0x12>
	return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f001 fabc 	bl	800231e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 f8b7 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f000 fb49 	bl	8001440 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dae:	f000 f957 	bl	8001060 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000db2:	f000 fa2f 	bl	8001214 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000db6:	f000 fa63 	bl	8001280 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000dba:	f000 fa97 	bl	80012ec <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000dbe:	f000 fad5 	bl	800136c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000dc2:	f000 faff 	bl	80013c4 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000dc6:	f000 f9c1 	bl	800114c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	//test SDW printf
  	HAL_Delay(1500);
 8000dca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000dce:	f001 fb1b 	bl	8002408 <HAL_Delay>
	printf("\nSDW printf() initialized\n\n");
 8000dd2:	483f      	ldr	r0, [pc, #252]	; (8000ed0 <main+0x134>)
 8000dd4:	f007 fd28 	bl	8008828 <puts>

	//initialize I2C MCP9804 temperature sensors
	printf("Initializing MCP9804 temp. sensors:\n");
 8000dd8:	483e      	ldr	r0, [pc, #248]	; (8000ed4 <main+0x138>)
 8000dda:	f007 fd25 	bl	8008828 <puts>

	// reset MPC sensors power
	temp_powerReset();
 8000dde:	f000 ff37 	bl	8001c50 <temp_powerReset>

	// configure MPC sensors
	for(int i=0; i<sizeof MCP_add; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e006      	b.n	8000df6 <main+0x5a>
		temp_configure(&hi2c2, i);
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	483b      	ldr	r0, [pc, #236]	; (8000ed8 <main+0x13c>)
 8000dec:	f000 ff56 	bl	8001c9c <temp_configure>
	for(int i=0; i<sizeof MCP_add; i++)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b06      	cmp	r3, #6
 8000dfa:	d9f5      	bls.n	8000de8 <main+0x4c>

	// initial 0.5s wait
	HAL_Delay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e00:	f001 fb02 	bl	8002408 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while(1) {

		printf("\nBoard Sierra test iteration:\n");
 8000e04:	4835      	ldr	r0, [pc, #212]	; (8000edc <main+0x140>)
 8000e06:	f007 fd0f 	bl	8008828 <puts>

		//clock source checking ##############################################################################################################
		printf("\n(2) Clock freq. and source demonstration:\n");
 8000e0a:	4835      	ldr	r0, [pc, #212]	; (8000ee0 <main+0x144>)
 8000e0c:	f007 fd0c 	bl	8008828 <puts>

		//read and print SYSCLK, HCLK, PCLK1 and PCLK2 frequencies
		printf("\t- SYSCLK freq.: %lu [Hz]\n", HAL_RCC_GetSysClockFreq());
 8000e10:	f005 f89c 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <main+0x148>)
 8000e1a:	f007 fc7f 	bl	800871c <iprintf>
		printf("\t- HCLK   freq.: %lu [Hz]\n", HAL_RCC_GetHCLKFreq());
 8000e1e:	f005 f921 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <main+0x14c>)
 8000e28:	f007 fc78 	bl	800871c <iprintf>
		printf("\t- PCLK1  freq.: %lu [Hz]\n", HAL_RCC_GetPCLK1Freq());
 8000e2c:	f005 f926 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <main+0x150>)
 8000e36:	f007 fc71 	bl	800871c <iprintf>
		printf("\t- PCLK2  freq.: %lu [Hz]\n", HAL_RCC_GetPCLK2Freq());
 8000e3a:	f005 f935 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4619      	mov	r1, r3
 8000e42:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <main+0x154>)
 8000e44:	f007 fc6a 	bl	800871c <iprintf>


	/* power consumption */
		printf("\n(3) Power management current readings:\n");
 8000e48:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <main+0x158>)
 8000e4a:	f007 fced 	bl	8008828 <puts>

		// read current for both channels
		curr_readData(&hadc1, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <main+0x15c>)
 8000e52:	f001 f899 	bl	8001f88 <curr_readData>
		curr_readData(&hadc2, 1);
 8000e56:	2101      	movs	r1, #1
 8000e58:	4828      	ldr	r0, [pc, #160]	; (8000efc <main+0x160>)
 8000e5a:	f001 f895 	bl	8001f88 <curr_readData>


	/* temperature sensors */
		printf("\n(4) Temperature sensors readings:\n");
 8000e5e:	4828      	ldr	r0, [pc, #160]	; (8000f00 <main+0x164>)
 8000e60:	f007 fce2 	bl	8008828 <puts>

		// loop and read temperature
		for(int i=0; i<sizeof MCP_add; i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	e006      	b.n	8000e78 <main+0xdc>
			temp_readData(&hi2c2, i);
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <main+0x13c>)
 8000e6e:	f001 f8ed 	bl	800204c <temp_readData>
		for(int i=0; i<sizeof MCP_add; i++)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d9f5      	bls.n	8000e6a <main+0xce>


	/* QSPI flash memories */
		printf("\n(5) NOR-Flash QSPI manufacturer data request:\n");
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <main+0x168>)
 8000e80:	f007 fcd2 	bl	8008828 <puts>

		// loop and read manufacturer data
		for(int i=0; i<3; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	e006      	b.n	8000e98 <main+0xfc>
			flash_manufacData(&hqspi, i);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	481e      	ldr	r0, [pc, #120]	; (8000f08 <main+0x16c>)
 8000e8e:	f001 f973 	bl	8002178 <flash_manufacData>
		for(int i=0; i<3; i++)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	ddf5      	ble.n	8000e8a <main+0xee>


	/* SPI f-ram memories */
		printf("\n(6) F-RAM SPI manufacturer data request:\n");
 8000e9e:	481b      	ldr	r0, [pc, #108]	; (8000f0c <main+0x170>)
 8000ea0:	f007 fcc2 	bl	8008828 <puts>

		// loop and read manufacturer data
		for(int i=0; i<3; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	e006      	b.n	8000eb8 <main+0x11c>
			fram_manufacData(&hspi1, i);
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	4818      	ldr	r0, [pc, #96]	; (8000f10 <main+0x174>)
 8000eae:	f001 f9cd 	bl	800224c <fram_manufacData>
		for(int i=0; i<3; i++)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	ddf5      	ble.n	8000eaa <main+0x10e>

	/* end of the loop */
		printf("\n\n");
 8000ebe:	4815      	ldr	r0, [pc, #84]	; (8000f14 <main+0x178>)
 8000ec0:	f007 fcb2 	bl	8008828 <puts>
		HAL_Delay(2000);
 8000ec4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec8:	f001 fa9e 	bl	8002408 <HAL_Delay>
		printf("\nBoard Sierra test iteration:\n");
 8000ecc:	e79a      	b.n	8000e04 <main+0x68>
 8000ece:	bf00      	nop
 8000ed0:	0800c3a8 	.word	0x0800c3a8
 8000ed4:	0800c3c4 	.word	0x0800c3c4
 8000ed8:	20000278 	.word	0x20000278
 8000edc:	0800c3e8 	.word	0x0800c3e8
 8000ee0:	0800c408 	.word	0x0800c408
 8000ee4:	0800c434 	.word	0x0800c434
 8000ee8:	0800c450 	.word	0x0800c450
 8000eec:	0800c46c 	.word	0x0800c46c
 8000ef0:	0800c488 	.word	0x0800c488
 8000ef4:	0800c4a4 	.word	0x0800c4a4
 8000ef8:	200002c4 	.word	0x200002c4
 8000efc:	20000210 	.word	0x20000210
 8000f00:	0800c4cc 	.word	0x0800c4cc
 8000f04:	0800c4f0 	.word	0x0800c4f0
 8000f08:	200003e0 	.word	0x200003e0
 8000f0c:	0800c520 	.word	0x0800c520
 8000f10:	20000354 	.word	0x20000354
 8000f14:	0800c54c 	.word	0x0800c54c

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0c0      	sub	sp, #256	; 0x100
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f22:	2244      	movs	r2, #68	; 0x44
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f006 fd76 	bl	8007a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	228c      	movs	r2, #140	; 0x8c
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f006 fd67 	bl	8007a18 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fadf 	bl	800553c <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000f84:	f000 fb18 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 feeb 	bl	8005d88 <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fb8:	f000 fafe 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC;
 8000fbc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000fc0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f005 f8cf 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ffc:	f000 fadc 	bl	80015b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001004:	f003 ff02 	bl	8004e0c <HAL_PWREx_ControlVoltageScaling>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800100e:	f000 fad3 	bl	80015b8 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <SystemClock_Config+0x144>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <SystemClock_Config+0x144>)
 8001018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <SystemClock_Config+0x144>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8001026:	463b      	mov	r3, r7
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	463b      	mov	r3, r7
 800102c:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001032:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001036:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800103c:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001040:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001042:	2322      	movs	r3, #34	; 0x22
 8001044:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001046:	2320      	movs	r3, #32
 8001048:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fb9d 	bl	800678c <HAL_RCCEx_CRSConfig>
}
 8001052:	bf00      	nop
 8001054:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <MX_ADC1_Init+0xe0>)
 8001084:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <MX_ADC1_Init+0xe4>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_ADC1_Init+0xe0>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_ADC1_Init+0xe0>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_ADC1_Init+0xe0>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800109a:	4b29      	ldr	r3, [pc, #164]	; (8001140 <MX_ADC1_Init+0xe0>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e2:	4817      	ldr	r0, [pc, #92]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010e4:	f001 fbf8 	bl	80028d8 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ee:	f000 fa63 	bl	80015b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <MX_ADC1_Init+0xe0>)
 80010fe:	f002 fcc9 	bl	8003a94 <HAL_ADCEx_MultiModeConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001108:	f000 fa56 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_ADC1_Init+0xe8>)
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001110:	2306      	movs	r3, #6
 8001112:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001118:	237f      	movs	r3, #127	; 0x7f
 800111a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111c:	2304      	movs	r3, #4
 800111e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_ADC1_Init+0xe0>)
 800112a:	f001 ff03 	bl	8002f34 <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001134:	f000 fa40 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002c4 	.word	0x200002c4
 8001144:	50040000 	.word	0x50040000
 8001148:	10c00010 	.word	0x10c00010

0800114c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <MX_ADC2_Init+0xbc>)
 8001164:	4a29      	ldr	r2, [pc, #164]	; (800120c <MX_ADC2_Init+0xc0>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_ADC2_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_ADC2_Init+0xbc>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_ADC2_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_ADC2_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_ADC2_Init+0xbc>)
 8001182:	2204      	movs	r2, #4
 8001184:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_ADC2_Init+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_ADC2_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC2_Init+0xbc>)
 8001194:	2201      	movs	r2, #1
 8001196:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_ADC2_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011c4:	f001 fb88 	bl	80028d8 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80011ce:	f000 f9f3 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC2_Init+0xc4>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	; 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_ADC2_Init+0xbc>)
 80011f0:	f001 fea0 	bl	8002f34 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80011fa:	f000 f9dd 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000210 	.word	0x20000210
 800120c:	50040100 	.word	0x50040100
 8001210:	0c900008 	.word	0x0c900008

08001214 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_CAN1_Init+0x64>)
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <MX_CAN1_Init+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_CAN1_Init+0x64>)
 8001220:	2210      	movs	r2, #16
 8001222:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_CAN1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_CAN1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_CAN1_Init+0x64>)
 8001232:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001236:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_CAN1_Init+0x64>)
 800123a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800123e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_CAN1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_CAN1_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_CAN1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_CAN1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_CAN1_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_CAN1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_CAN1_Init+0x64>)
 8001266:	f002 fcc5 	bl	8003bf4 <HAL_CAN_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001270:	f000 f9a2 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200003b8 	.word	0x200003b8
 800127c:	40006400 	.word	0x40006400

08001280 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_CAN2_Init+0x64>)
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <MX_CAN2_Init+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_CAN2_Init+0x64>)
 800128c:	2210      	movs	r2, #16
 800128e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_CAN2_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_CAN2_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_CAN2_Init+0x64>)
 800129e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_CAN2_Init+0x64>)
 80012d2:	f002 fc8f 	bl	8003bf4 <HAL_CAN_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80012dc:	f000 f96c 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000032c 	.word	0x2000032c
 80012e8:	40006800 	.word	0x40006800

080012ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_I2C2_Init+0x74>)
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <MX_I2C2_Init+0x78>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_I2C2_Init+0x74>)
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <MX_I2C2_Init+0x7c>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_I2C2_Init+0x74>)
 8001304:	2201      	movs	r2, #1
 8001306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_I2C2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C2_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C2_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C2_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001326:	480e      	ldr	r0, [pc, #56]	; (8001360 <MX_I2C2_Init+0x74>)
 8001328:	f002 fff0 	bl	800430c <HAL_I2C_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001332:	f000 f941 	bl	80015b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <MX_I2C2_Init+0x74>)
 800133a:	f003 fcc1 	bl	8004cc0 <HAL_I2CEx_ConfigAnalogFilter>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001344:	f000 f938 	bl	80015b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001348:	2100      	movs	r1, #0
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_I2C2_Init+0x74>)
 800134c:	f003 fd03 	bl	8004d56 <HAL_I2CEx_ConfigDigitalFilter>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001356:	f000 f92f 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000278 	.word	0x20000278
 8001364:	40005800 	.word	0x40005800
 8001368:	00303d5b 	.word	0x00303d5b

0800136c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_QUADSPI_Init+0x50>)
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <MX_QUADSPI_Init+0x54>)
 8001374:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_QUADSPI_Init+0x50>)
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_QUADSPI_Init+0x50>)
 800137e:	2201      	movs	r2, #1
 8001380:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_QUADSPI_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_QUADSPI_Init+0x50>)
 800138a:	221f      	movs	r2, #31
 800138c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_QUADSPI_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_QUADSPI_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_QUADSPI_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_QUADSPI_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_QUADSPI_Init+0x50>)
 80013a8:	f003 fd86 	bl	8004eb8 <HAL_QSPI_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80013b2:	f000 f901 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003e0 	.word	0x200003e0
 80013c0:	a0001000 	.word	0xa0001000

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_SPI1_Init+0x74>)
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <MX_SPI1_Init+0x78>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_SPI1_Init+0x74>)
 80013d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_SPI1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_SPI1_Init+0x74>)
 80013de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_SPI1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_SPI1_Init+0x74>)
 80013f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_SPI1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_SPI1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_SPI1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_SPI1_Init+0x74>)
 8001412:	2207      	movs	r2, #7
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_SPI1_Init+0x74>)
 800141e:	2208      	movs	r2, #8
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_SPI1_Init+0x74>)
 8001424:	f005 fbc2 	bl	8006bac <HAL_SPI_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800142e:	f000 f8c3 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000354 	.word	0x20000354
 800143c:	40013000 	.word	0x40013000

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a53      	ldr	r2, [pc, #332]	; (80015a8 <MX_GPIO_Init+0x168>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a4d      	ldr	r2, [pc, #308]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <MX_GPIO_Init+0x168>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a47      	ldr	r2, [pc, #284]	; (80015a8 <MX_GPIO_Init+0x168>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a41      	ldr	r2, [pc, #260]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2102      	movs	r1, #2
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <MX_GPIO_Init+0x16c>)
 80014ec:	f002 fef6 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HOLD_Pin|SP1_WP_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2113      	movs	r1, #19
 80014f4:	482e      	ldr	r0, [pc, #184]	; (80015b0 <MX_GPIO_Init+0x170>)
 80014f6:	f002 fef1 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	211b      	movs	r1, #27
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f002 feeb 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	482a      	ldr	r0, [pc, #168]	; (80015b4 <MX_GPIO_Init+0x174>)
 800150c:	f002 fee6 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 8001510:	2302      	movs	r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4821      	ldr	r0, [pc, #132]	; (80015ac <MX_GPIO_Init+0x16c>)
 8001528:	f002 fd46 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HOLD_Pin SP1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_HOLD_Pin|SP1_WP_Pin;
 800152c:	2303      	movs	r3, #3
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <MX_GPIO_Init+0x170>)
 8001544:	f002 fd38 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin SPI1_CS3_Pin SPI1_CS2_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin;
 8001548:	231b      	movs	r3, #27
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001562:	f002 fd29 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 8001566:	2310      	movs	r3, #16
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_GPIO_Init+0x170>)
 800157e:	f002 fd1b 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_EN_Pin */
  GPIO_InitStruct.Pin = I2C2_EN_Pin;
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(I2C2_EN_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_GPIO_Init+0x174>)
 800159a:	f002 fd0d 	bl	8003fb8 <HAL_GPIO_Init>

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	; 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48001c00 	.word	0x48001c00
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x44>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x44>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a33      	ldr	r2, [pc, #204]	; (80016f8 <HAL_ADC_MspInit+0xec>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12d      	bne.n	800168a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_ADC_MspInit+0xf0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a31      	ldr	r2, [pc, #196]	; (80016fc <HAL_ADC_MspInit+0xf0>)
 8001636:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_ADC_MspInit+0xf0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10b      	bne.n	8001658 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 8001646:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800164a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4a28      	ldr	r2, [pc, #160]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF1_CUR_Pin;
 8001670:	2308      	movs	r3, #8
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001674:	230b      	movs	r3, #11
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF1_CUR_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4820      	ldr	r0, [pc, #128]	; (8001704 <HAL_ADC_MspInit+0xf8>)
 8001684:	f002 fc98 	bl	8003fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001688:	e031      	b.n	80016ee <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_ADC_MspInit+0xfc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d12c      	bne.n	80016ee <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_ADC_MspInit+0xf0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_ADC_MspInit+0xf0>)
 800169c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_ADC_MspInit+0xf0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10b      	bne.n	80016be <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 80016ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_ADC_MspInit+0xf4>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EF2_CUR_Pin|EF1_CUR_Pin;
 80016d6:	230c      	movs	r3, #12
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016da:	230b      	movs	r3, #11
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <HAL_ADC_MspInit+0xf8>)
 80016ea:	f002 fc65 	bl	8003fb8 <HAL_GPIO_Init>
}
 80016ee:	bf00      	nop
 80016f0:	3730      	adds	r7, #48	; 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	50040000 	.word	0x50040000
 80016fc:	200001fc 	.word	0x200001fc
 8001700:	40021000 	.word	0x40021000
 8001704:	48000800 	.word	0x48000800
 8001708:	50040100 	.word	0x50040100

0800170c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a45      	ldr	r2, [pc, #276]	; (8001840 <HAL_CAN_MspInit+0x134>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d132      	bne.n	8001794 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <HAL_CAN_MspInit+0x138>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a43      	ldr	r2, [pc, #268]	; (8001844 <HAL_CAN_MspInit+0x138>)
 8001736:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_CAN_MspInit+0x138>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d10b      	bne.n	8001758 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	4a40      	ldr	r2, [pc, #256]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 8001746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174a:	6593      	str	r3, [r2, #88]	; 0x58
 800174c:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001770:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001782:	2309      	movs	r3, #9
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	482f      	ldr	r0, [pc, #188]	; (800184c <HAL_CAN_MspInit+0x140>)
 800178e:	f002 fc13 	bl	8003fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001792:	e051      	b.n	8001838 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2d      	ldr	r2, [pc, #180]	; (8001850 <HAL_CAN_MspInit+0x144>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d14c      	bne.n	8001838 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_CAN_MspInit+0x138>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <HAL_CAN_MspInit+0x138>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_CAN_MspInit+0x138>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10b      	bne.n	80017e0 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_CAN_MspInit+0x13c>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f8:	2320      	movs	r3, #32
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001808:	2303      	movs	r3, #3
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	480e      	ldr	r0, [pc, #56]	; (800184c <HAL_CAN_MspInit+0x140>)
 8001814:	f002 fbd0 	bl	8003fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001828:	2308      	movs	r3, #8
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <HAL_CAN_MspInit+0x140>)
 8001834:	f002 fbc0 	bl	8003fb8 <HAL_GPIO_Init>
}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40006400 	.word	0x40006400
 8001844:	20000200 	.word	0x20000200
 8001848:	40021000 	.word	0x40021000
 800184c:	48000400 	.word	0x48000400
 8001850:	40006800 	.word	0x40006800

08001854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <HAL_I2C_MspInit+0x7c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d127      	bne.n	80018c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_I2C_MspInit+0x80>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <HAL_I2C_MspInit+0x80>)
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_I2C_MspInit+0x80>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800188e:	2303      	movs	r3, #3
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2312      	movs	r3, #18
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <HAL_I2C_MspInit+0x84>)
 80018aa:	f002 fb85 	bl	8003fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_I2C_MspInit+0x80>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_I2C_MspInit+0x80>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_I2C_MspInit+0x80>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005800 	.word	0x40005800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48001400 	.word	0x48001400

080018dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <HAL_QSPI_MspInit+0xd8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d156      	bne.n	80019ac <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 8001900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001902:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6513      	str	r3, [r2, #80]	; 0x50
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 800190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_QSPI_MspInit+0xdc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001946:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001958:	230a      	movs	r3, #10
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4816      	ldr	r0, [pc, #88]	; (80019bc <HAL_QSPI_MspInit+0xe0>)
 8001964:	f002 fb28 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 800197a:	2303      	movs	r3, #3
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <HAL_QSPI_MspInit+0xe0>)
 8001986:	f002 fb17 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CS3_Pin;
 800198a:	2304      	movs	r3, #4
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800199a:	230a      	movs	r3, #10
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CS3_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f002 fb06 	bl	8003fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	a0001000 	.word	0xa0001000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48001400 	.word	0x48001400

080019c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_SPI_MspInit+0x7c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d128      	bne.n	8001a34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_SPI_MspInit+0x80>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_SPI_MspInit+0x80>)
 80019e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ec:	6613      	str	r3, [r2, #96]	; 0x60
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_SPI_MspInit+0x80>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_SPI_MspInit+0x80>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_SPI_MspInit+0x80>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_SPI_MspInit+0x80>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a12:	23e0      	movs	r3, #224	; 0xe0
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a22:	2305      	movs	r3, #5
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f002 fac2 	bl	8003fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	40021000 	.word	0x40021000

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a90:	f000 fc9a 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
	return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_kill>:

int _kill(int pid, int sig)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ab2:	f005 ff87 	bl	80079c4 <__errno>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2216      	movs	r2, #22
 8001aba:	601a      	str	r2, [r3, #0]
	return -1;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_exit>:

void _exit (int status)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ffe7 	bl	8001aa8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ada:	e7fe      	b.n	8001ada <_exit+0x12>

08001adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e00a      	b.n	8001b04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aee:	f3af 8000 	nop.w
 8001af2:	4601      	mov	r1, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf0      	blt.n	8001aee <_read+0x12>
	}

return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f005 ff08 	bl	80079c4 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20050000 	.word	0x20050000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000204 	.word	0x20000204
 8001be8:	20000440 	.word	0x20000440

08001bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <SystemInit+0x5c>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <SystemInit+0x5c>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <SystemInit+0x60>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <SystemInit+0x60>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <SystemInit+0x60>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <SystemInit+0x60>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <SystemInit+0x60>)
 8001c18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <SystemInit+0x60>)
 8001c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <SystemInit+0x60>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <SystemInit+0x60>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SystemInit+0x60>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00
 8001c4c:	40021000 	.word	0x40021000

08001c50 <temp_powerReset>:
#include "testing_functions.h"


/* CONFIGURATION FUNCTIONS */

	void temp_powerReset() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <temp_powerReset+0x3c>)
 8001c5a:	f002 fb3f 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001c5e:	20c8      	movs	r0, #200	; 0xc8
 8001c60:	f000 fbd2 	bl	8002408 <HAL_Delay>
		HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	4808      	ldr	r0, [pc, #32]	; (8001c8c <temp_powerReset+0x3c>)
 8001c6a:	f002 fb37 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001c6e:	2064      	movs	r0, #100	; 0x64
 8001c70:	f000 fbca 	bl	8002408 <HAL_Delay>

		log_send(0, "temp_powerReset", -1, "na", NAN);
 8001c74:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001c90 <temp_powerReset+0x40>
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <temp_powerReset+0x44>)
 8001c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c7e:	4906      	ldr	r1, [pc, #24]	; (8001c98 <temp_powerReset+0x48>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 f86b 	bl	8001d5c <log_send>
	}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	48000c00 	.word	0x48000c00
 8001c90:	7fc00000 	.word	0x7fc00000
 8001c94:	0800c550 	.word	0x0800c550
 8001c98:	0800c554 	.word	0x0800c554

08001c9c <temp_configure>:

	void temp_configure(I2C_HandleTypeDef *handler, int device) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
		// flags for thermostat mode and interrupt not used
		uint8_t buff[2] = {0x00, 0x08};
 8001ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001caa:	81bb      	strh	r3, [r7, #12]

		// send configuration and check for outcome
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(handler, MCP_add[device] << 1, MCP_REG_CONF, 1, buff, 2, HAL_MAX_DELAY);
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <temp_configure+0x60>)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	2201      	movs	r2, #1
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f002 fbac 	bl	800442c <HAL_I2C_Mem_Write>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
		log_send(ret == HAL_OK ? 0 : 1, "temp_configure", device, "na", NAN);
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001d00 <temp_configure+0x64>
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <temp_configure+0x68>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4906      	ldr	r1, [pc, #24]	; (8001d08 <temp_configure+0x6c>)
 8001cf0:	f000 f834 	bl	8001d5c <log_send>
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	0800c648 	.word	0x0800c648
 8001d00:	7fc00000 	.word	0x7fc00000
 8001d04:	0800c550 	.word	0x0800c550
 8001d08:	0800c564 	.word	0x0800c564

08001d0c <addr2str>:


/* TOOLS */

	void addr2str(uint8_t *addr, int addr_len, char *str) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
		int index = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
		for(int i=0; i<addr_len; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e011      	b.n	8001d46 <addr2str+0x3a>
		   index += sprintf(&str[index], "%02X", addr[i]);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	18d0      	adds	r0, r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4909      	ldr	r1, [pc, #36]	; (8001d58 <addr2str+0x4c>)
 8001d34:	f006 fd86 	bl	8008844 <siprintf>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<addr_len; i++)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	3301      	adds	r3, #1
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbe9      	blt.n	8001d22 <addr2str+0x16>
	}
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	0800c574 	.word	0x0800c574

08001d5c <log_send>:



/* CONTROL FUNCTIONS */

	void log_send(int type, char *identity, int device, char *data_str, float data_flt) {
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08d      	sub	sp, #52	; 0x34
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	6178      	str	r0, [r7, #20]
 8001d64:	6139      	str	r1, [r7, #16]
 8001d66:	60fa      	str	r2, [r7, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	ed87 0a01 	vstr	s0, [r7, #4]
		// process device
		char device_str[8] = "na";
 8001d6e:	f246 136e 	movw	r3, #24942	; 0x616e
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
		if(device >= 0) sprintf(device_str, "%d", device);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db06      	blt.n	8001d8c <log_send+0x30>
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <log_send+0x64>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f006 fd5c 	bl	8008844 <siprintf>


		// send to SWD
		printf("%s -i %s -d %s -s %s -f %f\n", LOG_types[type], identity, device_str, data_str, data_flt);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <log_send+0x68>)
 8001d92:	189c      	adds	r4, r3, r2
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7fe fbe7 	bl	8000568 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f107 0118 	add.w	r1, r7, #24
 8001da2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	460b      	mov	r3, r1
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4621      	mov	r1, r4
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <log_send+0x6c>)
 8001db2:	f006 fcb3 	bl	800871c <iprintf>
	}
 8001db6:	bf00      	nop
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800c57c 	.word	0x0800c57c
 8001dc4:	0800c650 	.word	0x0800c650
 8001dc8:	0800c580 	.word	0x0800c580

08001dcc <flash_processCommand>:

	int flash_processCommand(QSPI_HandleTypeDef *handler, uint8_t command, uint8_t *buff, int size, int device) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b094      	sub	sp, #80	; 0x50
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	72fb      	strb	r3, [r7, #11]
		HAL_StatusTypeDef ret; QSPI_CommandTypeDef sCommand;

		sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.Instruction       = command;
 8001de2:	7afb      	ldrb	r3, [r7, #11]
 8001de4:	613b      	str	r3, [r7, #16]
		sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;	// OK
 8001dea:	2300      	movs	r3, #0
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DataMode          = QSPI_DATA_1_LINE;			// OK
 8001dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.NbData            = size;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.DummyCycles       = 0;							// 8 : 1b left shift
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;		// OK
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e00:	2300      	movs	r3, #0
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;	// OK
 8001e04:	2300      	movs	r3, #0
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44

		// set all devices
		HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin | QSPI_CS2_Pin , GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f002 fa64 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(QSPI_CS3_GPIO_Port, QSPI_CS3_Pin, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	2104      	movs	r1, #4
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1c:	f002 fa5e 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f000 faf1 	bl	8002408 <HAL_Delay>

		// reset appropriate memory
		if(device == 1) HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin, GPIO_PIN_RESET);
 8001e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <flash_processCommand+0x6e>
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2101      	movs	r1, #1
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e34:	f002 fa52 	bl	80042dc <HAL_GPIO_WritePin>
 8001e38:	e00f      	b.n	8001e5a <flash_processCommand+0x8e>
		else if(device ==2 ) HAL_GPIO_WritePin(GPIOA, QSPI_CS2_Pin, GPIO_PIN_RESET);
 8001e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d106      	bne.n	8001e4e <flash_processCommand+0x82>
 8001e40:	2200      	movs	r2, #0
 8001e42:	2102      	movs	r1, #2
 8001e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e48:	f002 fa48 	bl	80042dc <HAL_GPIO_WritePin>
 8001e4c:	e005      	b.n	8001e5a <flash_processCommand+0x8e>
		else HAL_GPIO_WritePin(QSPI_CS3_GPIO_Port, QSPI_CS3_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2104      	movs	r1, #4
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f002 fa41 	bl	80042dc <HAL_GPIO_WritePin>

		// send command
		int errNo = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
		ret = HAL_QSPI_Command(handler, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4619      	mov	r1, r3
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f003 f8a1 	bl	8004fb0 <HAL_QSPI_Command>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(ret != HAL_OK) errNo = 1;
 8001e74:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <flash_processCommand+0xb4>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c

		// receive answer
		if(errNo == 0) {
 8001e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <flash_processCommand+0xd8>
			ret = HAL_QSPI_Receive(handler, buff, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f003 f8ed 	bl	800506c <HAL_QSPI_Receive>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			if(ret != HAL_OK) errNo = 2;
 8001e98:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <flash_processCommand+0xd8>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		// set all devices
		HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin | QSPI_CS2_Pin , GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eac:	f002 fa16 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(QSPI_CS3_GPIO_Port, QSPI_CS3_Pin, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f002 fa10 	bl	80042dc <HAL_GPIO_WritePin>

		return errNo;
 8001ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3750      	adds	r7, #80	; 0x50
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <fram_processCommand>:

	int fram_processCommand(SPI_HandleTypeDef *handler, uint8_t *command, uint8_t *buff, int size, int device) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
		HAL_StatusTypeDef ret;

		// set all devices
		HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2110      	movs	r1, #16
 8001eda:	482a      	ldr	r0, [pc, #168]	; (8001f84 <fram_processCommand+0xbc>)
 8001edc:	f002 f9fe 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SPI1_CS2_Pin | SPI1_CS3_Pin, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2118      	movs	r1, #24
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f002 f9f8 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f000 fa8b 	bl	8002408 <HAL_Delay>

		// reset appropriate memory
		if(device == 1) HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_RESET);
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <fram_processCommand+0x3c>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2110      	movs	r1, #16
 8001efc:	4821      	ldr	r0, [pc, #132]	; (8001f84 <fram_processCommand+0xbc>)
 8001efe:	f002 f9ed 	bl	80042dc <HAL_GPIO_WritePin>
 8001f02:	e00f      	b.n	8001f24 <fram_processCommand+0x5c>
		else if(device ==2 ) HAL_GPIO_WritePin(GPIOA, SPI1_CS2_Pin, GPIO_PIN_RESET);
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d106      	bne.n	8001f18 <fram_processCommand+0x50>
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f12:	f002 f9e3 	bl	80042dc <HAL_GPIO_WritePin>
 8001f16:	e005      	b.n	8001f24 <fram_processCommand+0x5c>
		else HAL_GPIO_WritePin(GPIOA, SPI1_CS3_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f002 f9dc 	bl	80042dc <HAL_GPIO_WritePin>

		// send command
		int errNo = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
		ret = HAL_SPI_Transmit(handler, command, 1, 100);
 8001f28:	2364      	movs	r3, #100	; 0x64
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f004 fedf 	bl	8006cf2 <HAL_SPI_Transmit>
 8001f34:	4603      	mov	r3, r0
 8001f36:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK) errNo = 1;
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <fram_processCommand+0x7a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]

		// receive answer
		if(errNo == 0) {
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <fram_processCommand+0x9c>
			ret = HAL_SPI_Receive(handler, buff, size, 100);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2364      	movs	r3, #100	; 0x64
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f005 f83c 	bl	8006fce <HAL_SPI_Receive>
 8001f56:	4603      	mov	r3, r0
 8001f58:	74fb      	strb	r3, [r7, #19]
			if(ret != HAL_OK) errNo = 2;
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <fram_processCommand+0x9c>
 8001f60:	2302      	movs	r3, #2
 8001f62:	617b      	str	r3, [r7, #20]
		}

		//set all devices
		HAL_GPIO_WritePin(GPIOC, SPI1_CS1_Pin, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2110      	movs	r1, #16
 8001f68:	4806      	ldr	r0, [pc, #24]	; (8001f84 <fram_processCommand+0xbc>)
 8001f6a:	f002 f9b7 	bl	80042dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SPI1_CS2_Pin | SPI1_CS3_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2118      	movs	r1, #24
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f002 f9b1 	bl	80042dc <HAL_GPIO_WritePin>

		return errNo;
 8001f7a:	697b      	ldr	r3, [r7, #20]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	48000800 	.word	0x48000800

08001f88 <curr_readData>:


/* TESTING FUNCTIONS */

	void curr_readData(ADC_HandleTypeDef *handler, int device) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
		//start ADC conversion
		HAL_ADC_Start(handler);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fdfa 	bl	8002b8c <HAL_ADC_Start>

		//poll ADC peripheral
		HAL_ADC_PollForConversion(handler, 1);
 8001f98:	2101      	movs	r1, #1
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fee4 	bl	8002d68 <HAL_ADC_PollForConversion>

		//read ADC conversion result
		uint16_t raw_value = HAL_ADC_GetValue(handler);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 ffb9 	bl	8002f18 <HAL_ADC_GetValue>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	81fb      	strh	r3, [r7, #14]

		//stop ADC conversion
		HAL_ADC_Stop(handler);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fea8 	bl	8002d00 <HAL_ADC_Stop>

		//compute current consumption from ADC values in [mA]
		float value = (3000 * (float)VREFINT_CAL / (float)raw_value) / 1000;
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <curr_readData+0xb0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fbc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800203c <curr_readData+0xb4>
 8001fc0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fc4:	89fb      	ldrh	r3, [r7, #14]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002040 <curr_readData+0xb8>
 8001fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fda:	edc7 7a02 	vstr	s15, [r7, #8]
		value = (value - CUR_IOS * CUR_RMON) / (CUR_GAIN * CUR_RMON);
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	f7fe fac2 	bl	8000568 <__aeabi_f2d>
 8001fe4:	a310      	add	r3, pc, #64	; (adr r3, 8002028 <curr_readData+0xa0>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe f95d 	bl	80002a8 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	a30e      	add	r3, pc, #56	; (adr r3, 8002030 <curr_readData+0xa8>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fc36 	bl	800086c <__aeabi_ddiv>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fdfe 	bl	8000c08 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	60bb      	str	r3, [r7, #8]

		log_send(2, "curr_readData", device, "na", value);
 8002010:	ed97 0a02 	vldr	s0, [r7, #8]
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <curr_readData+0xbc>)
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	490b      	ldr	r1, [pc, #44]	; (8002048 <curr_readData+0xc0>)
 800201a:	2002      	movs	r0, #2
 800201c:	f7ff fe9e 	bl	8001d5c <log_send>
	}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	eb851eb8 	.word	0xeb851eb8
 800202c:	3faeb851 	.word	0x3faeb851
 8002030:	33333333 	.word	0x33333333
 8002034:	400f3333 	.word	0x400f3333
 8002038:	1fff75aa 	.word	0x1fff75aa
 800203c:	453b8000 	.word	0x453b8000
 8002040:	447a0000 	.word	0x447a0000
 8002044:	0800c550 	.word	0x0800c550
 8002048:	0800c59c 	.word	0x0800c59c

0800204c <temp_readData>:

	void temp_readData(I2C_HandleTypeDef *handler, int device) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af04      	add	r7, sp, #16
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
		// flags requesting Ta data
		uint8_t buff[2] = {0x00, 0x00};
 8002056:	2300      	movs	r3, #0
 8002058:	813b      	strh	r3, [r7, #8]

		// send request
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(handler, MCP_add[device] << 1, MCP_REG_TEMP, 1, buff, 2, HAL_MAX_DELAY);
 800205a:	4a44      	ldr	r2, [pc, #272]	; (800216c <temp_readData+0x120>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	b299      	uxth	r1, r3
 8002068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2302      	movs	r3, #2
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	2205      	movs	r2, #5
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f002 f9d5 	bl	800442c <HAL_I2C_Mem_Write>
 8002082:	4603      	mov	r3, r0
 8002084:	72fb      	strb	r3, [r7, #11]
		if(ret != HAL_OK) log_send(1, "temp_readData", device, "na", 1);
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <temp_readData+0x50>
 800208c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <temp_readData+0x124>)
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4937      	ldr	r1, [pc, #220]	; (8002174 <temp_readData+0x128>)
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff fe60 	bl	8001d5c <log_send>

		// read requested Ta data
		ret = HAL_I2C_Mem_Read(handler, MCP_add[device] << 1, MCP_REG_TEMP, 1, buff, 2, HAL_MAX_DELAY);
 800209c:	4a33      	ldr	r2, [pc, #204]	; (800216c <temp_readData+0x120>)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	b299      	uxth	r1, r3
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2301      	movs	r3, #1
 80020bc:	2205      	movs	r2, #5
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f002 fac8 	bl	8004654 <HAL_I2C_Mem_Read>
 80020c4:	4603      	mov	r3, r0
 80020c6:	72fb      	strb	r3, [r7, #11]
		if(ret != HAL_OK) log_send(1, "temp_readData", device, "na", 2);
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <temp_readData+0x92>
 80020ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <temp_readData+0x124>)
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <temp_readData+0x128>)
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff fe3f 	bl	8001d5c <log_send>

		// clear flag byte
		if(buff[0] & 0xE0)
 80020de:	7a3b      	ldrb	r3, [r7, #8]
 80020e0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <temp_readData+0xa6>
			buff[0] = buff[0] & 0x1F;
 80020e8:	7a3b      	ldrb	r3, [r7, #8]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	723b      	strb	r3, [r7, #8]

		// convert Ta value to degC temperature
		float value;
		if((buff[0] & 0x10) == 0x10){
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d014      	beq.n	8002126 <temp_readData+0xda>
			buff[0] = buff[0] & 0x0F;
 80020fc:	7a3b      	ldrb	r3, [r7, #8]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	b2db      	uxtb	r3, r3
 8002104:	723b      	strb	r3, [r7, #8]
			value = (256 - (buff[0] << 4) + (buff[1] >> 4)) * -1;
 8002106:	7a3b      	ldrb	r3, [r7, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800210e:	7a7a      	ldrb	r2, [r7, #9]
 8002110:	0912      	lsrs	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	4413      	add	r3, r2
 8002116:	425b      	negs	r3, r3
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	edc7 7a03 	vstr	s15, [r7, #12]
 8002124:	e015      	b.n	8002152 <temp_readData+0x106>
		}
		else
			value = (float)buff[0] * 16 + (float)buff[1] / 16;
 8002126:	7a3b      	ldrb	r3, [r7, #8]
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002130:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002138:	7a7b      	ldrb	r3, [r7, #9]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002142:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8002146:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	edc7 7a03 	vstr	s15, [r7, #12]

		// print results
		log_send(2, "temp_readData", device, "na", value);
 8002152:	ed97 0a03 	vldr	s0, [r7, #12]
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <temp_readData+0x124>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4906      	ldr	r1, [pc, #24]	; (8002174 <temp_readData+0x128>)
 800215c:	2002      	movs	r0, #2
 800215e:	f7ff fdfd 	bl	8001d5c <log_send>
	}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	0800c648 	.word	0x0800c648
 8002170:	0800c550 	.word	0x0800c550
 8002174:	0800c5ac 	.word	0x0800c5ac

08002178 <flash_manufacData>:

	void flash_manufacData(QSPI_HandleTypeDef *handler, int device) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
		// prepare variables
		int ret; uint8_t buff[8];

		// request and read manufacturer device type
		ret = flash_processCommand(handler, 0x9F, buff, 3, device);
 8002182:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2303      	movs	r3, #3
 800218c:	219f      	movs	r1, #159	; 0x9f
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fe1c 	bl	8001dcc <flash_processCommand>
 8002194:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(ret != 0) log_send(1, "flash_manufacData->type", device, "na", ret);
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <flash_manufacData+0x40>
 800219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a6:	eeb0 0a67 	vmov.f32	s0, s15
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <flash_manufacData+0xc4>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4924      	ldr	r1, [pc, #144]	; (8002240 <flash_manufacData+0xc8>)
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff fdd3 	bl	8001d5c <log_send>
 80021b6:	e010      	b.n	80021da <flash_manufacData+0x62>
		else {
			char tmp[7];
			addr2str(buff, 3, tmp);
 80021b8:	f107 021c 	add.w	r2, r7, #28
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	2103      	movs	r1, #3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fda2 	bl	8001d0c <addr2str>
			log_send(2, "flash_manufacData->type", device, tmp, NAN);
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002244 <flash_manufacData+0xcc>
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	491b      	ldr	r1, [pc, #108]	; (8002240 <flash_manufacData+0xc8>)
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff fdc1 	bl	8001d5c <log_send>
		}

		// request and read unique device ID
		ret = flash_processCommand(handler, 0x4B, buff, 8, device);
 80021da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2308      	movs	r3, #8
 80021e4:	214b      	movs	r1, #75	; 0x4b
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fdf0 	bl	8001dcc <flash_processCommand>
 80021ec:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(ret != 0) log_send(1, "flash_manufacData->id", device, "na", ret);
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <flash_manufacData+0x98>
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <flash_manufacData+0xc4>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4910      	ldr	r1, [pc, #64]	; (8002248 <flash_manufacData+0xd0>)
 8002208:	2001      	movs	r0, #1
 800220a:	f7ff fda7 	bl	8001d5c <log_send>
		else {
			char tmp[17];
			addr2str(buff, 8, tmp);
			log_send(2, "flash_manufacData->type", device, tmp, NAN);
		}
	}
 800220e:	e010      	b.n	8002232 <flash_manufacData+0xba>
			addr2str(buff, 8, tmp);
 8002210:	f107 0208 	add.w	r2, r7, #8
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	2108      	movs	r1, #8
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fd76 	bl	8001d0c <addr2str>
			log_send(2, "flash_manufacData->type", device, tmp, NAN);
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002244 <flash_manufacData+0xcc>
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4905      	ldr	r1, [pc, #20]	; (8002240 <flash_manufacData+0xc8>)
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff fd95 	bl	8001d5c <log_send>
	}
 8002232:	bf00      	nop
 8002234:	3730      	adds	r7, #48	; 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	0800c550 	.word	0x0800c550
 8002240:	0800c5bc 	.word	0x0800c5bc
 8002244:	7fc00000 	.word	0x7fc00000
 8002248:	0800c5d4 	.word	0x0800c5d4

0800224c <fram_manufacData>:


	void fram_manufacData(SPI_HandleTypeDef *handler, int device) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af02      	add	r7, sp, #8
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
		// prepare variables
		int ret; uint8_t buff[9]; uint8_t command[] = {0x9F};
 8002256:	239f      	movs	r3, #159	; 0x9f
 8002258:	773b      	strb	r3, [r7, #28]

		// request and read manufacturer device type
		ret = fram_processCommand(handler, command, buff, 9, device);
 800225a:	f107 0220 	add.w	r2, r7, #32
 800225e:	f107 011c 	add.w	r1, r7, #28
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2309      	movs	r3, #9
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fe2d 	bl	8001ec8 <fram_processCommand>
 800226e:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(ret != 0) log_send(1, "fram_manufacData", device, "na", ret);
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <fram_manufacData+0x46>
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <fram_manufacData+0x70>)
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	490d      	ldr	r1, [pc, #52]	; (80022c0 <fram_manufacData+0x74>)
 800228a:	2001      	movs	r0, #1
 800228c:	f7ff fd66 	bl	8001d5c <log_send>
			char tmp[19];
			addr2str(buff, 9, tmp);
			log_send(2, "flash_manufacData->type", device, tmp, NAN);
		}

	}
 8002290:	e010      	b.n	80022b4 <fram_manufacData+0x68>
			addr2str(buff, 9, tmp);
 8002292:	f107 0208 	add.w	r2, r7, #8
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	2109      	movs	r1, #9
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fd35 	bl	8001d0c <addr2str>
			log_send(2, "flash_manufacData->type", device, tmp, NAN);
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80022c4 <fram_manufacData+0x78>
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4906      	ldr	r1, [pc, #24]	; (80022c8 <fram_manufacData+0x7c>)
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7ff fd54 	bl	8001d5c <log_send>
	}
 80022b4:	bf00      	nop
 80022b6:	3730      	adds	r7, #48	; 0x30
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	0800c550 	.word	0x0800c550
 80022c0:	0800c5ec 	.word	0x0800c5ec
 80022c4:	7fc00000 	.word	0x7fc00000
 80022c8:	0800c5bc 	.word	0x0800c5bc

080022cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002304 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d0:	f7ff fc8c 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022d6:	e003      	b.n	80022e0 <LoopCopyDataInit>

080022d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022de:	3104      	adds	r1, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <LoopForever+0xa>)
	ldr	r3, =_edata
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022e8:	d3f6      	bcc.n	80022d8 <CopyDataInit>
	ldr	r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022ec:	e002      	b.n	80022f4 <LoopFillZerobss>

080022ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022f0:	f842 3b04 	str.w	r3, [r2], #4

080022f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <LoopForever+0x16>)
	cmp	r2, r3
 80022f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022f8:	d3f9      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fa:	f005 fb69 	bl	80079d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fe:	f7fe fd4d 	bl	8000d9c <main>

08002302 <LoopForever>:

LoopForever:
    b LoopForever
 8002302:	e7fe      	b.n	8002302 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002304:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8002308:	0800cb1c 	.word	0x0800cb1c
	ldr	r0, =_sdata
 800230c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002310:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8002314:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002318:	20000440 	.word	0x20000440

0800231c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_2_IRQHandler>

0800231e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f001 fe11 	bl	8003f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232e:	2000      	movs	r0, #0
 8002330:	f000 f80e 	bl	8002350 <HAL_InitTick>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	e001      	b.n	8002344 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002340:	f7ff f940 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002344:	79fb      	ldrb	r3, [r7, #7]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_InitTick+0x6c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_InitTick+0x70>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_InitTick+0x6c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f001 fe0f 	bl	8003f9e <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d809      	bhi.n	80023a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002394:	f001 fde7 	bl	8003f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_InitTick+0x74>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e007      	b.n	80023b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e004      	b.n	80023b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e001      	b.n	80023b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20000004 	.word	0x20000004

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008
 80023ec:	2000042c 	.word	0x2000042c

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000042c 	.word	0x2000042c

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008

08002450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	609a      	str	r2, [r3, #8]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3360      	adds	r3, #96	; 0x60
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LL_ADC_SetOffset+0x44>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	03fff000 	.word	0x03fff000

08002500 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3360      	adds	r3, #96	; 0x60
 800250e:	461a      	mov	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3360      	adds	r3, #96	; 0x60
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	615a      	str	r2, [r3, #20]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3330      	adds	r3, #48	; 0x30
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	4413      	add	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	211f      	movs	r1, #31
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 011f 	and.w	r1, r3, #31
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002606:	b480      	push	{r7}
 8002608:	b087      	sub	sp, #28
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3314      	adds	r3, #20
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	0e5b      	lsrs	r3, r3, #25
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	4413      	add	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	0d1b      	lsrs	r3, r3, #20
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2107      	movs	r1, #7
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	0d1b      	lsrs	r3, r3, #20
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0318 	and.w	r3, r3, #24
 800267e:	4908      	ldr	r1, [pc, #32]	; (80026a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002680:	40d9      	lsrs	r1, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	400b      	ands	r3, r1
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	0007ffff 	.word	0x0007ffff

080026a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 031f 	and.w	r3, r3, #31
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6093      	str	r3, [r2, #8]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d101      	bne.n	800271a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002764:	d101      	bne.n	800276a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b4:	f043 0202 	orr.w	r2, r3, #2
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <LL_ADC_IsEnabled+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_IsEnabled+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d101      	bne.n	8002806 <LL_ADC_IsDisableOngoing+0x18>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <LL_ADC_IsDisableOngoing+0x1a>
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800284c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002850:	f043 0210 	orr.w	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d101      	bne.n	800287c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800289a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d101      	bne.n	80028ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e139      	b.n	8002b66 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe fe83 	bl	800160c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fef1 	bl	8002700 <LL_ADC_IsDeepPowerDownEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fed7 	bl	80026dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff0c 	bl	8002750 <LL_ADC_IsInternalRegulatorEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d115      	bne.n	800296a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fef0 	bl	8002728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002948:	4b89      	ldr	r3, [pc, #548]	; (8002b70 <HAL_ADC_Init+0x298>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	4a89      	ldr	r2, [pc, #548]	; (8002b74 <HAL_ADC_Init+0x29c>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	3301      	adds	r3, #1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800295c:	e002      	b.n	8002964 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3b01      	subs	r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f9      	bne.n	800295e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff feee 	bl	8002750 <LL_ADC_IsInternalRegulatorEnabled>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff62 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 80029a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80d2 	bne.w	8002b54 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80ce 	bne.w	8002b54 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029c0:	f043 0202 	orr.w	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fefb 	bl	80027c8 <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d115      	bne.n	8002a04 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d8:	4867      	ldr	r0, [pc, #412]	; (8002b78 <HAL_ADC_Init+0x2a0>)
 80029da:	f7ff fef5 	bl	80027c8 <LL_ADC_IsEnabled>
 80029de:	4604      	mov	r4, r0
 80029e0:	4866      	ldr	r0, [pc, #408]	; (8002b7c <HAL_ADC_Init+0x2a4>)
 80029e2:	f7ff fef1 	bl	80027c8 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	431c      	orrs	r4, r3
 80029ea:	4865      	ldr	r0, [pc, #404]	; (8002b80 <HAL_ADC_Init+0x2a8>)
 80029ec:	f7ff feec 	bl	80027c8 <LL_ADC_IsEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4323      	orrs	r3, r4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4619      	mov	r1, r3
 80029fe:	4861      	ldr	r0, [pc, #388]	; (8002b84 <HAL_ADC_Init+0x2ac>)
 8002a00:	f7ff fd26 	bl	8002450 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7e5b      	ldrb	r3, [r3, #25]
 8002a08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d106      	bne.n	8002a40 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	045b      	lsls	r3, r3, #17
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_ADC_Init+0x2b0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fef5 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 8002a7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff16 	bl	80028b2 <LL_ADC_INJ_IsConversionOngoing>
 8002a86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d140      	bne.n	8002b10 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d13d      	bne.n	8002b10 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7e1b      	ldrb	r3, [r3, #24]
 8002a9c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a9e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aa6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab6:	f023 0306 	bic.w	r3, r3, #6
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d118      	bne.n	8002b00 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ae4:	4311      	orrs	r1, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002af0:	430a      	orrs	r2, r1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e007      	b.n	8002b10 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10c      	bne.n	8002b32 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f023 010f 	bic.w	r1, r3, #15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b30:	e007      	b.n	8002b42 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 020f 	bic.w	r2, r2, #15
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	; 0x58
 8002b52:	e007      	b.n	8002b64 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f043 0210 	orr.w	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000
 8002b74:	053e2d63 	.word	0x053e2d63
 8002b78:	50040000 	.word	0x50040000
 8002b7c:	50040100 	.word	0x50040100
 8002b80:	50040200 	.word	0x50040200
 8002b84:	50040300 	.word	0x50040300
 8002b88:	fff0c007 	.word	0xfff0c007

08002b8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b94:	4857      	ldr	r0, [pc, #348]	; (8002cf4 <HAL_ADC_Start+0x168>)
 8002b96:	f7ff fd85 	bl	80026a4 <LL_ADC_GetMultimode>
 8002b9a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe5f 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 809c 	bne.w	8002ce6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_Start+0x30>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e097      	b.n	8002cec <HAL_ADC_Start+0x160>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fe7d 	bl	80038c4 <ADC_Enable>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 8083 	bne.w	8002cdc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a42      	ldr	r2, [pc, #264]	; (8002cf8 <HAL_ADC_Start+0x16c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d002      	beq.n	8002bfa <HAL_ADC_Start+0x6e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	e000      	b.n	8002bfc <HAL_ADC_Start+0x70>
 8002bfa:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_ADC_Start+0x170>)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d002      	beq.n	8002c0a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	d106      	bne.n	8002c32 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f023 0206 	bic.w	r2, r3, #6
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c30:	e002      	b.n	8002c38 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	221c      	movs	r2, #28
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_ADC_Start+0x16c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d002      	beq.n	8002c58 <HAL_ADC_Start+0xcc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_Start+0xce>
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_ADC_Start+0x170>)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d008      	beq.n	8002c74 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d002      	beq.n	8002c74 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d114      	bne.n	8002c9e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fdbc 	bl	8002814 <LL_ADC_REG_StartConversion>
 8002c9c:	e025      	b.n	8002cea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_ADC_Start+0x16c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d002      	beq.n	8002cba <HAL_ADC_Start+0x12e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e000      	b.n	8002cbc <HAL_ADC_Start+0x130>
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_ADC_Start+0x170>)
 8002cbc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00f      	beq.n	8002cea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8002cda:	e006      	b.n	8002cea <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ce4:	e001      	b.n	8002cea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	50040300 	.word	0x50040300
 8002cf8:	50040100 	.word	0x50040100
 8002cfc:	50040000 	.word	0x50040000

08002d00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_Stop+0x16>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e023      	b.n	8002d5e <HAL_ADC_Stop+0x5e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d1e:	2103      	movs	r1, #3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fd13 	bl	800374c <ADC_ConversionStop>
 8002d26:	4603      	mov	r3, r0
 8002d28:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fe29 	bl	8003988 <ADC_Disable>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d72:	4866      	ldr	r0, [pc, #408]	; (8002f0c <HAL_ADC_PollForConversion+0x1a4>)
 8002d74:	f7ff fc96 	bl	80026a4 <LL_ADC_GetMultimode>
 8002d78:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d102      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d82:	2308      	movs	r3, #8
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	e02a      	b.n	8002dde <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d002      	beq.n	8002d9a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b09      	cmp	r3, #9
 8002d98:	d111      	bne.n	8002dbe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0a4      	b.n	8002f02 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002db8:	2304      	movs	r3, #4
 8002dba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002dbc:	e00f      	b.n	8002dde <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002dbe:	4853      	ldr	r0, [pc, #332]	; (8002f0c <HAL_ADC_PollForConversion+0x1a4>)
 8002dc0:	f7ff fc7e 	bl	80026c0 <LL_ADC_GetMultiDMATransfer>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e093      	b.n	8002f02 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002dda:	2304      	movs	r3, #4
 8002ddc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dde:	f7ff fb07 	bl	80023f0 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002de4:	e021      	b.n	8002e2a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dec:	d01d      	beq.n	8002e2a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dee:	f7ff faff 	bl	80023f0 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <HAL_ADC_PollForConversion+0x9c>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d112      	bne.n	8002e2a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f043 0204 	orr.w	r2, r3, #4
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e06b      	b.n	8002f02 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0d6      	beq.n	8002de6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fb9d 	bl	8002588 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01c      	beq.n	8002e8e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7e5b      	ldrb	r3, [r3, #25]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d118      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d111      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_ADC_PollForConversion+0x1a8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d002      	beq.n	8002e9e <HAL_ADC_PollForConversion+0x136>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e000      	b.n	8002ea0 <HAL_ADC_PollForConversion+0x138>
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_ADC_PollForConversion+0x1ac>)
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d008      	beq.n	8002eba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d002      	beq.n	8002eba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	d104      	bne.n	8002ec4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e00c      	b.n	8002ede <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_ADC_PollForConversion+0x1a8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_ADC_PollForConversion+0x16c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADC_PollForConversion+0x16e>
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_ADC_PollForConversion+0x1ac>)
 8002ed6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d104      	bne.n	8002eee <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e008      	b.n	8002f00 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	220c      	movs	r2, #12
 8002efe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	50040300 	.word	0x50040300
 8002f10:	50040100 	.word	0x50040100
 8002f14:	50040000 	.word	0x50040000

08002f18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0b6      	sub	sp, #216	; 0xd8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x22>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e3e3      	b.n	800371e <HAL_ADC_ConfigChannel+0x7ea>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fc7e 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 83c4 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d824      	bhi.n	8002fc2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	3b02      	subs	r3, #2
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d81b      	bhi.n	8002fba <HAL_ADC_ConfigChannel+0x86>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <HAL_ADC_ConfigChannel+0x54>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa1 	.word	0x08002fa1
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fb1 	.word	0x08002fb1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	605a      	str	r2, [r3, #4]
          break;
 8002f9e:	e011      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2212      	movs	r2, #18
 8002fa4:	605a      	str	r2, [r3, #4]
          break;
 8002fa6:	e00d      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2218      	movs	r2, #24
 8002fac:	605a      	str	r2, [r3, #4]
          break;
 8002fae:	e009      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb6:	605a      	str	r2, [r3, #4]
          break;
 8002fb8:	e004      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2206      	movs	r2, #6
 8002fbe:	605a      	str	r2, [r3, #4]
          break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002fc2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f7ff faec 	bl	80025ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fc42 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fc62 	bl	80028b2 <LL_ADC_INJ_IsConversionOngoing>
 8002fee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ff2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 81c1 	bne.w	800337e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 81bc 	bne.w	800337e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800300e:	d10f      	bne.n	8003030 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	4619      	mov	r1, r3
 800301c:	f7ff faf3 	bl	8002606 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fa9a 	bl	8002562 <LL_ADC_SetSamplingTimeCommonConfig>
 800302e:	e00e      	b.n	800304e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	461a      	mov	r2, r3
 800303e:	f7ff fae2 	bl	8002606 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fa8a 	bl	8002562 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d00a      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6919      	ldr	r1, [r3, #16]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003080:	f7ff fa1a 	bl	80024b8 <LL_ADC_SetOffset>
 8003084:	e17b      	b.n	800337e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fa37 	bl	8002500 <LL_ADC_GetOffsetChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x17e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fa2c 	bl	8002500 <LL_ADC_GetOffsetChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	e01e      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1bc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fa21 	bl	8002500 <LL_ADC_GetOffsetChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e004      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80030e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1d4>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	e018      	b.n	800313a <HAL_ADC_ConfigChannel+0x206>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800311c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e004      	b.n	800313a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800313a:	429a      	cmp	r2, r3
 800313c:	d106      	bne.n	800314c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f9f0 	bl	800252c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff f9d4 	bl	8002500 <LL_ADC_GetOffsetChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x244>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f9c9 	bl	8002500 <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	0e9b      	lsrs	r3, r3, #26
 8003172:	f003 021f 	and.w	r2, r3, #31
 8003176:	e01e      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x282>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f9be 	bl	8002500 <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800319a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800319e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e004      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80031aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x29a>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	e018      	b.n	8003200 <HAL_ADC_ConfigChannel+0x2cc>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e004      	b.n	8003200 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80031f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f98d 	bl	800252c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f971 	bl	8002500 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_ADC_ConfigChannel+0x30a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f966 	bl	8002500 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	e01e      	b.n	800327c <HAL_ADC_ConfigChannel+0x348>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2102      	movs	r1, #2
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f95b 	bl	8002500 <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800325c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800326c:	2320      	movs	r3, #32
 800326e:	e004      	b.n	800327a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x360>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0e9b      	lsrs	r3, r3, #26
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	e016      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x38e>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80032ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e004      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80032b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d106      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f92c 	bl	800252c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2103      	movs	r1, #3
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f910 	bl	8002500 <LL_ADC_GetOffsetChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x3cc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2103      	movs	r1, #3
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f905 	bl	8002500 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	f003 021f 	and.w	r2, r3, #31
 80032fe:	e017      	b.n	8003330 <HAL_ADC_ConfigChannel+0x3fc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2103      	movs	r1, #3
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff f8fa 	bl	8002500 <LL_ADC_GetOffsetChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800331a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800331c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x414>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	e011      	b.n	800336c <HAL_ADC_ConfigChannel+0x438>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003358:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800336c:	429a      	cmp	r2, r3
 800336e:	d106      	bne.n	800337e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2200      	movs	r2, #0
 8003376:	2103      	movs	r1, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f8d7 	bl	800252c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fa20 	bl	80027c8 <LL_ADC_IsEnabled>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 8140 	bne.w	8003610 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	f7ff f95d 	bl	800265c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4a8f      	ldr	r2, [pc, #572]	; (80035e4 <HAL_ADC_ConfigChannel+0x6b0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	f040 8131 	bne.w	8003610 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x4a2>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	3301      	adds	r3, #1
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	bf94      	ite	ls
 80033ce:	2301      	movls	r3, #1
 80033d0:	2300      	movhi	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e019      	b.n	800340a <HAL_ADC_ConfigChannel+0x4d6>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80033ee:	2320      	movs	r3, #32
 80033f0:	e003      	b.n	80033fa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80033f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2b09      	cmp	r3, #9
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800340a:	2b00      	cmp	r3, #0
 800340c:	d079      	beq.n	8003502 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_ADC_ConfigChannel+0x4f6>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	3301      	adds	r3, #1
 8003422:	069b      	lsls	r3, r3, #26
 8003424:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003428:	e015      	b.n	8003456 <HAL_ADC_ConfigChannel+0x522>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	069b      	lsls	r3, r3, #26
 8003452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x542>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	3301      	adds	r3, #1
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2101      	movs	r1, #1
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	e017      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x572>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800348e:	2320      	movs	r3, #32
 8003490:	e003      	b.n	800349a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x598>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0e9b      	lsrs	r3, r3, #26
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 021f 	and.w	r2, r3, #31
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	051b      	lsls	r3, r3, #20
 80034ca:	e018      	b.n	80034fe <HAL_ADC_ConfigChannel+0x5ca>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 021f 	and.w	r2, r3, #31
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fe:	430b      	orrs	r3, r1
 8003500:	e081      	b.n	8003606 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_ADC_ConfigChannel+0x5ea>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	0e9b      	lsrs	r3, r3, #26
 8003514:	3301      	adds	r3, #1
 8003516:	069b      	lsls	r3, r3, #26
 8003518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351c:	e015      	b.n	800354a <HAL_ADC_ConfigChannel+0x616>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003536:	2320      	movs	r3, #32
 8003538:	e003      	b.n	8003542 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3301      	adds	r3, #1
 8003544:	069b      	lsls	r3, r3, #26
 8003546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_ADC_ConfigChannel+0x636>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	3301      	adds	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	e017      	b.n	800359a <HAL_ADC_ConfigChannel+0x666>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
  return result;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	ea42 0103 	orr.w	r1, r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x692>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0e9b      	lsrs	r3, r3, #26
 80035b0:	3301      	adds	r3, #1
 80035b2:	f003 021f 	and.w	r2, r3, #31
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	3b1e      	subs	r3, #30
 80035be:	051b      	lsls	r3, r3, #20
 80035c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035c4:	e01e      	b.n	8003604 <HAL_ADC_ConfigChannel+0x6d0>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	613b      	str	r3, [r7, #16]
  return result;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e006      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x6bc>
 80035e2:	bf00      	nop
 80035e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 021f 	and.w	r2, r3, #31
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	3b1e      	subs	r3, #30
 80035fe:	051b      	lsls	r3, r3, #20
 8003600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003604:	430b      	orrs	r3, r1
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	4619      	mov	r1, r3
 800360c:	f7fe fffb 	bl	8002606 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b44      	ldr	r3, [pc, #272]	; (8003728 <HAL_ADC_ConfigChannel+0x7f4>)
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d07a      	beq.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361c:	4843      	ldr	r0, [pc, #268]	; (800372c <HAL_ADC_ConfigChannel+0x7f8>)
 800361e:	f7fe ff3d 	bl	800249c <LL_ADC_GetCommonPathInternalCh>
 8003622:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a41      	ldr	r2, [pc, #260]	; (8003730 <HAL_ADC_ConfigChannel+0x7fc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d12c      	bne.n	800368a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d126      	bne.n	800368a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <HAL_ADC_ConfigChannel+0x800>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x71c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_ADC_ConfigChannel+0x804>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d15d      	bne.n	800370c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003658:	4619      	mov	r1, r3
 800365a:	4834      	ldr	r0, [pc, #208]	; (800372c <HAL_ADC_ConfigChannel+0x7f8>)
 800365c:	f7fe ff0b 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003660:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_ADC_ConfigChannel+0x808>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	4a36      	ldr	r2, [pc, #216]	; (8003740 <HAL_ADC_ConfigChannel+0x80c>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800367a:	e002      	b.n	8003682 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003688:	e040      	b.n	800370c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_ADC_ConfigChannel+0x810>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d118      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x792>
 8003694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d112      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_ADC_ConfigChannel+0x800>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x780>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a22      	ldr	r2, [pc, #136]	; (8003738 <HAL_ADC_ConfigChannel+0x804>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d12d      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036bc:	4619      	mov	r1, r3
 80036be:	481b      	ldr	r0, [pc, #108]	; (800372c <HAL_ADC_ConfigChannel+0x7f8>)
 80036c0:	f7fe fed9 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c4:	e024      	b.n	8003710 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_ADC_ConfigChannel+0x814>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d120      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11a      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <HAL_ADC_ConfigChannel+0x800>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d115      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036ee:	4619      	mov	r1, r3
 80036f0:	480e      	ldr	r0, [pc, #56]	; (800372c <HAL_ADC_ConfigChannel+0x7f8>)
 80036f2:	f7fe fec0 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
 80036f6:	e00c      	b.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800370a:	e002      	b.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003710:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800371a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800371e:	4618      	mov	r0, r3
 8003720:	37d8      	adds	r7, #216	; 0xd8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	80080000 	.word	0x80080000
 800372c:	50040300 	.word	0x50040300
 8003730:	c7520000 	.word	0xc7520000
 8003734:	50040000 	.word	0x50040000
 8003738:	50040200 	.word	0x50040200
 800373c:	20000000 	.word	0x20000000
 8003740:	053e2d63 	.word	0x053e2d63
 8003744:	cb840000 	.word	0xcb840000
 8003748:	80000001 	.word	0x80000001

0800374c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f87e 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 8003768:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff f89f 	bl	80028b2 <LL_ADC_INJ_IsConversionOngoing>
 8003774:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8098 	beq.w	80038b4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02a      	beq.n	80037e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7e5b      	ldrb	r3, [r3, #25]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d126      	bne.n	80037e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7e1b      	ldrb	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d122      	bne.n	80037e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037a6:	e014      	b.n	80037d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4a45      	ldr	r2, [pc, #276]	; (80038c0 <ADC_ConversionStop+0x174>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d90d      	bls.n	80037cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f043 0210 	orr.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e074      	b.n	80038b6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d1e3      	bne.n	80037a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d014      	beq.n	8003818 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f836 	bl	8002864 <LL_ADC_REG_IsConversionOngoing>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fff3 	bl	80027ee <LL_ADC_IsDisableOngoing>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f812 	bl	800283c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d014      	beq.n	8003848 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff f845 	bl	80028b2 <LL_ADC_INJ_IsConversionOngoing>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ffdb 	bl	80027ee <LL_ADC_IsDisableOngoing>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff f821 	bl	800288a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d005      	beq.n	800385a <ADC_ConversionStop+0x10e>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d105      	bne.n	8003860 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003854:	230c      	movs	r3, #12
 8003856:	617b      	str	r3, [r7, #20]
        break;
 8003858:	e005      	b.n	8003866 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800385a:	2308      	movs	r3, #8
 800385c:	617b      	str	r3, [r7, #20]
        break;
 800385e:	e002      	b.n	8003866 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003860:	2304      	movs	r3, #4
 8003862:	617b      	str	r3, [r7, #20]
        break;
 8003864:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003866:	f7fe fdc3 	bl	80023f0 <HAL_GetTick>
 800386a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800386c:	e01b      	b.n	80038a6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800386e:	f7fe fdbf 	bl	80023f0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b05      	cmp	r3, #5
 800387a:	d914      	bls.n	80038a6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e007      	b.n	80038b6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1dc      	bne.n	800386e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	a33fffff 	.word	0xa33fffff

080038c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ff79 	bl	80027c8 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d14d      	bne.n	8003978 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	4b28      	ldr	r3, [pc, #160]	; (8003984 <ADC_Enable+0xc0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e039      	b.n	800397a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe ff34 	bl	8002778 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003910:	f7fe fd6e 	bl	80023f0 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003916:	e028      	b.n	800396a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe ff53 	bl	80027c8 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe ff23 	bl	8002778 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003932:	f7fe fd5d 	bl	80023f0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d914      	bls.n	800396a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d00d      	beq.n	800396a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d1cf      	bne.n	8003918 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	8000003f 	.word	0x8000003f

08003988 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe ff2a 	bl	80027ee <LL_ADC_IsDisableOngoing>
 800399a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ff11 	bl	80027c8 <LL_ADC_IsEnabled>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d047      	beq.n	8003a3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d144      	bne.n	8003a3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030d 	and.w	r3, r3, #13
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10c      	bne.n	80039da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe feeb 	bl	80027a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2203      	movs	r2, #3
 80039d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039d2:	f7fe fd0d 	bl	80023f0 <HAL_GetTick>
 80039d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d8:	e029      	b.n	8003a2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e023      	b.n	8003a3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039f6:	f7fe fcfb 	bl	80023f0 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d914      	bls.n	8003a2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f043 0210 	orr.w	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e007      	b.n	8003a3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1dc      	bne.n	80039f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <LL_ADC_IsEnabled>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <LL_ADC_IsEnabled+0x18>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <LL_ADC_IsEnabled+0x1a>
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_REG_IsConversionOngoing>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d101      	bne.n	8003a84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b0a1      	sub	sp, #132	; 0x84
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e093      	b.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003aba:	2300      	movs	r3, #0
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a47      	ldr	r2, [pc, #284]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e001      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e072      	b.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ffb8 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003afc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffb2 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d154      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d151      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003b16:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02c      	beq.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b32:	035b      	lsls	r3, r3, #13
 8003b34:	430b      	orrs	r3, r1
 8003b36:	431a      	orrs	r2, r3
 8003b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b3c:	4829      	ldr	r0, [pc, #164]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b3e:	f7ff ff82 	bl	8003a46 <LL_ADC_IsEnabled>
 8003b42:	4604      	mov	r4, r0
 8003b44:	4828      	ldr	r0, [pc, #160]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b46:	f7ff ff7e 	bl	8003a46 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	431c      	orrs	r4, r3
 8003b4e:	4828      	ldr	r0, [pc, #160]	; (8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b50:	f7ff ff79 	bl	8003a46 <LL_ADC_IsEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4323      	orrs	r3, r4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d137      	bne.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b64:	f023 030f 	bic.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b78:	e028      	b.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b86:	4817      	ldr	r0, [pc, #92]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b88:	f7ff ff5d 	bl	8003a46 <LL_ADC_IsEnabled>
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	4816      	ldr	r0, [pc, #88]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b90:	f7ff ff59 	bl	8003a46 <LL_ADC_IsEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	431c      	orrs	r4, r3
 8003b98:	4815      	ldr	r0, [pc, #84]	; (8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b9a:	f7ff ff54 	bl	8003a46 <LL_ADC_IsEnabled>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4323      	orrs	r3, r4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d112      	bne.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb6:	e009      	b.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bca:	e000      	b.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003bd6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3784      	adds	r7, #132	; 0x84
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd90      	pop	{r4, r7, pc}
 8003be2:	bf00      	nop
 8003be4:	50040000 	.word	0x50040000
 8003be8:	50040100 	.word	0x50040100
 8003bec:	50040300 	.word	0x50040300
 8003bf0:	50040200 	.word	0x50040200

08003bf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0ed      	b.n	8003de2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fd7a 	bl	800170c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0202 	bic.w	r2, r2, #2
 8003c26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c28:	f7fe fbe2 	bl	80023f0 <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c2e:	e012      	b.n	8003c56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c30:	f7fe fbde 	bl	80023f0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b0a      	cmp	r3, #10
 8003c3c:	d90b      	bls.n	8003c56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2205      	movs	r2, #5
 8003c4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0c5      	b.n	8003de2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c74:	f7fe fbbc 	bl	80023f0 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c7a:	e012      	b.n	8003ca2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c7c:	f7fe fbb8 	bl	80023f0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b0a      	cmp	r3, #10
 8003c88:	d90b      	bls.n	8003ca2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e09f      	b.n	8003de2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0e5      	beq.n	8003c7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7e1b      	ldrb	r3, [r3, #24]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d108      	bne.n	8003cca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e007      	b.n	8003cda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7e5b      	ldrb	r3, [r3, #25]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e007      	b.n	8003d04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7e9b      	ldrb	r3, [r3, #26]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e007      	b.n	8003d2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0220 	bic.w	r2, r2, #32
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7edb      	ldrb	r3, [r3, #27]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d108      	bne.n	8003d48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0210 	bic.w	r2, r2, #16
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e007      	b.n	8003d58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0210 	orr.w	r2, r2, #16
 8003d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7f1b      	ldrb	r3, [r3, #28]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d108      	bne.n	8003d72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0208 	orr.w	r2, r2, #8
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e007      	b.n	8003d82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7f5b      	ldrb	r3, [r3, #29]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d108      	bne.n	8003d9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0204 	orr.w	r2, r2, #4
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e007      	b.n	8003dac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	ea42 0103 	orr.w	r1, r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <__NVIC_SetPriorityGrouping>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1e:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	60d3      	str	r3, [r2, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_GetPriorityGrouping>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <__NVIC_GetPriorityGrouping+0x18>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	f003 0307 	and.w	r3, r3, #7
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <__NVIC_SetPriority>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db0a      	blt.n	8003e7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	490c      	ldr	r1, [pc, #48]	; (8003e9c <__NVIC_SetPriority+0x4c>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	440b      	add	r3, r1
 8003e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e78:	e00a      	b.n	8003e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4908      	ldr	r1, [pc, #32]	; (8003ea0 <__NVIC_SetPriority+0x50>)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3b04      	subs	r3, #4
 8003e88:	0112      	lsls	r2, r2, #4
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	761a      	strb	r2, [r3, #24]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000e100 	.word	0xe000e100
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <NVIC_EncodePriority>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f1c3 0307 	rsb	r3, r3, #7
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	bf28      	it	cs
 8003ec2:	2304      	movcs	r3, #4
 8003ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d902      	bls.n	8003ed4 <NVIC_EncodePriority+0x30>
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3b03      	subs	r3, #3
 8003ed2:	e000      	b.n	8003ed6 <NVIC_EncodePriority+0x32>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	43d9      	mvns	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	4313      	orrs	r3, r2
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	; 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <SysTick_Config>:
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f1c:	d301      	bcc.n	8003f22 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00f      	b.n	8003f42 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <SysTick_Config+0x40>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f30:	f7ff ff8e 	bl	8003e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <SysTick_Config+0x40>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <SysTick_Config+0x40>)
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000e010 	.word	0xe000e010

08003f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff47 	bl	8003dec <__NVIC_SetPriorityGrouping>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f78:	f7ff ff5c 	bl	8003e34 <__NVIC_GetPriorityGrouping>
 8003f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff8e 	bl	8003ea4 <NVIC_EncodePriority>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff5d 	bl	8003e50 <__NVIC_SetPriority>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffb0 	bl	8003f0c <SysTick_Config>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc6:	e166      	b.n	8004296 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8158 	beq.w	8004290 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d00b      	beq.n	8004000 <HAL_GPIO_Init+0x48>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d007      	beq.n	8004000 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff4:	2b11      	cmp	r3, #17
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b12      	cmp	r3, #18
 8003ffe:	d130      	bne.n	8004062 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004036:	2201      	movs	r2, #1
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 0201 	and.w	r2, r3, #1
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_Init+0xea>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b12      	cmp	r3, #18
 80040a0:	d123      	bne.n	80040ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	08da      	lsrs	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3208      	adds	r2, #8
 80040aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	6939      	ldr	r1, [r7, #16]
 80040e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2203      	movs	r2, #3
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0203 	and.w	r2, r3, #3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80b2 	beq.w	8004290 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412c:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	4a60      	ldr	r2, [pc, #384]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6613      	str	r3, [r2, #96]	; 0x60
 8004138:	4b5e      	ldr	r3, [pc, #376]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 800413a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004144:	4a5c      	ldr	r2, [pc, #368]	; (80042b8 <HAL_GPIO_Init+0x300>)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	3302      	adds	r3, #2
 800414c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	220f      	movs	r2, #15
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800416e:	d02b      	beq.n	80041c8 <HAL_GPIO_Init+0x210>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_GPIO_Init+0x304>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d025      	beq.n	80041c4 <HAL_GPIO_Init+0x20c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a51      	ldr	r2, [pc, #324]	; (80042c0 <HAL_GPIO_Init+0x308>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01f      	beq.n	80041c0 <HAL_GPIO_Init+0x208>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_GPIO_Init+0x30c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d019      	beq.n	80041bc <HAL_GPIO_Init+0x204>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_GPIO_Init+0x310>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_GPIO_Init+0x200>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_GPIO_Init+0x314>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00d      	beq.n	80041b4 <HAL_GPIO_Init+0x1fc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_GPIO_Init+0x318>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <HAL_GPIO_Init+0x1f8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a4c      	ldr	r2, [pc, #304]	; (80042d4 <HAL_GPIO_Init+0x31c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_GPIO_Init+0x1f4>
 80041a8:	2307      	movs	r3, #7
 80041aa:	e00e      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041ac:	2308      	movs	r3, #8
 80041ae:	e00c      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041b0:	2306      	movs	r3, #6
 80041b2:	e00a      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041b4:	2305      	movs	r3, #5
 80041b6:	e008      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041b8:	2304      	movs	r3, #4
 80041ba:	e006      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041bc:	2303      	movs	r3, #3
 80041be:	e004      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e002      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041c8:	2300      	movs	r3, #0
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	f002 0203 	and.w	r2, r2, #3
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	4093      	lsls	r3, r2
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041da:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_GPIO_Init+0x300>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_GPIO_Init+0x320>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800420c:	4a32      	ldr	r2, [pc, #200]	; (80042d8 <HAL_GPIO_Init+0x320>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004236:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_GPIO_Init+0x320>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_GPIO_Init+0x320>)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3301      	adds	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f ae91 	bne.w	8003fc8 <HAL_GPIO_Init+0x10>
  }
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40010000 	.word	0x40010000
 80042bc:	48000400 	.word	0x48000400
 80042c0:	48000800 	.word	0x48000800
 80042c4:	48000c00 	.word	0x48000c00
 80042c8:	48001000 	.word	0x48001000
 80042cc:	48001400 	.word	0x48001400
 80042d0:	48001800 	.word	0x48001800
 80042d4:	48001c00 	.word	0x48001c00
 80042d8:	40010400 	.word	0x40010400

080042dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
 80042e8:	4613      	mov	r3, r2
 80042ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042ec:	787b      	ldrb	r3, [r7, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042f8:	e002      	b.n	8004300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e081      	b.n	8004422 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fa8e 	bl	8001854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800436c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	e006      	b.n	8004394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d104      	bne.n	80043a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	ea42 0103 	orr.w	r1, r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b20      	cmp	r3, #32
 8004450:	f040 80f9 	bne.w	8004646 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_I2C_Mem_Write+0x34>
 800445a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0ed      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_I2C_Mem_Write+0x4e>
 8004476:	2302      	movs	r3, #2
 8004478:	e0e6      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004482:	f7fd ffb5 	bl	80023f0 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2319      	movs	r3, #25
 800448e:	2201      	movs	r2, #1
 8004490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fac3 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0d1      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2221      	movs	r2, #33	; 0x21
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a3a      	ldr	r2, [r7, #32]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044cc:	88f8      	ldrh	r0, [r7, #6]
 80044ce:	893a      	ldrh	r2, [r7, #8]
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	4603      	mov	r3, r0
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9d3 	bl	8004888 <I2C_RequestMemoryWrite>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0a9      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2bff      	cmp	r3, #255	; 0xff
 80044fc:	d90e      	bls.n	800451c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22ff      	movs	r2, #255	; 0xff
 8004502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	b2da      	uxtb	r2, r3
 800450a:	8979      	ldrh	r1, [r7, #10]
 800450c:	2300      	movs	r3, #0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fba5 	bl	8004c64 <I2C_TransferConfig>
 800451a:	e00f      	b.n	800453c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	b2da      	uxtb	r2, r3
 800452c:	8979      	ldrh	r1, [r7, #10]
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fb94 	bl	8004c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 faad 	bl	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e07b      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d034      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x1c8>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d130      	bne.n	80045f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa3f 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04d      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2bff      	cmp	r3, #255	; 0xff
 80045b4:	d90e      	bls.n	80045d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	8979      	ldrh	r1, [r7, #10]
 80045c4:	2300      	movs	r3, #0
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fb49 	bl	8004c64 <I2C_TransferConfig>
 80045d2:	e00f      	b.n	80045f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	8979      	ldrh	r1, [r7, #10]
 80045e6:	2300      	movs	r3, #0
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fb38 	bl	8004c64 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d19e      	bne.n	800453c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fa8c 	bl	8004b20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e01a      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2220      	movs	r2, #32
 8004618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <HAL_I2C_Mem_Write+0x224>)
 8004626:	400b      	ands	r3, r1
 8004628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	fe00e800 	.word	0xfe00e800

08004654 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	460b      	mov	r3, r1
 8004668:	813b      	strh	r3, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	f040 80fd 	bne.w	8004876 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_I2C_Mem_Read+0x34>
 8004682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0f1      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x4e>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0ea      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046aa:	f7fd fea1 	bl	80023f0 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	2319      	movs	r3, #25
 80046b6:	2201      	movs	r2, #1
 80046b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f9af 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0d5      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2222      	movs	r2, #34	; 0x22
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2240      	movs	r2, #64	; 0x40
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f4:	88f8      	ldrh	r0, [r7, #6]
 80046f6:	893a      	ldrh	r2, [r7, #8]
 80046f8:	8979      	ldrh	r1, [r7, #10]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4603      	mov	r3, r0
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f913 	bl	8004930 <I2C_RequestMemoryRead>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0ad      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2bff      	cmp	r3, #255	; 0xff
 8004724:	d90e      	bls.n	8004744 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	22ff      	movs	r2, #255	; 0xff
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	b2da      	uxtb	r2, r3
 8004732:	8979      	ldrh	r1, [r7, #10]
 8004734:	4b52      	ldr	r3, [pc, #328]	; (8004880 <HAL_I2C_Mem_Read+0x22c>)
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa91 	bl	8004c64 <I2C_TransferConfig>
 8004742:	e00f      	b.n	8004764 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	b2da      	uxtb	r2, r3
 8004754:	8979      	ldrh	r1, [r7, #10]
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_I2C_Mem_Read+0x22c>)
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fa80 	bl	8004c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	2200      	movs	r2, #0
 800476c:	2104      	movs	r1, #4
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f956 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07c      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d034      	beq.n	8004824 <HAL_I2C_Mem_Read+0x1d0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d130      	bne.n	8004824 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f927 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04d      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2bff      	cmp	r3, #255	; 0xff
 80047e4:	d90e      	bls.n	8004804 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8979      	ldrh	r1, [r7, #10]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa31 	bl	8004c64 <I2C_TransferConfig>
 8004802:	e00f      	b.n	8004824 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	b2da      	uxtb	r2, r3
 8004814:	8979      	ldrh	r1, [r7, #10]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fa20 	bl	8004c64 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d19a      	bne.n	8004764 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f974 	bl	8004b20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e01a      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2220      	movs	r2, #32
 8004848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_I2C_Mem_Read+0x230>)
 8004856:	400b      	ands	r3, r1
 8004858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	80002400 	.word	0x80002400
 8004884:	fe00e800 	.word	0xfe00e800

08004888 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4603      	mov	r3, r0
 8004898:	817b      	strh	r3, [r7, #10]
 800489a:	460b      	mov	r3, r1
 800489c:	813b      	strh	r3, [r7, #8]
 800489e:	4613      	mov	r3, r2
 80048a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	8979      	ldrh	r1, [r7, #10]
 80048a8:	4b20      	ldr	r3, [pc, #128]	; (800492c <I2C_RequestMemoryWrite+0xa4>)
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f9d7 	bl	8004c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	69b9      	ldr	r1, [r7, #24]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f8f0 	bl	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e02c      	b.n	8004924 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	629a      	str	r2, [r3, #40]	; 0x28
 80048da:	e015      	b.n	8004908 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	69b9      	ldr	r1, [r7, #24]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f8d6 	bl	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e012      	b.n	8004924 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048fe:	893b      	ldrh	r3, [r7, #8]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2200      	movs	r2, #0
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f884 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	80002000 	.word	0x80002000

08004930 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	8979      	ldrh	r1, [r7, #10]
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <I2C_RequestMemoryRead+0xa4>)
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f984 	bl	8004c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	69b9      	ldr	r1, [r7, #24]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f89d 	bl	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e02c      	b.n	80049ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004976:	893b      	ldrh	r3, [r7, #8]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
 8004980:	e015      	b.n	80049ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004982:	893b      	ldrh	r3, [r7, #8]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b29b      	uxth	r3, r3
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	69b9      	ldr	r1, [r7, #24]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f883 	bl	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e012      	b.n	80049ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a4:	893b      	ldrh	r3, [r7, #8]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f831 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	80002000 	.word	0x80002000

080049d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d103      	bne.n	80049f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d007      	beq.n	8004a14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	619a      	str	r2, [r3, #24]
  }
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a30:	e022      	b.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a38:	d01e      	beq.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fd fcd9 	bl	80023f0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d113      	bne.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e00f      	b.n	8004a98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d0cd      	beq.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aac:	e02c      	b.n	8004b08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f870 	bl	8004b98 <I2C_IsAcknowledgeFailed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e02a      	b.n	8004b18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac8:	d01e      	beq.n	8004b08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fd fc91 	bl	80023f0 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d113      	bne.n	8004b08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e007      	b.n	8004b18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d1cb      	bne.n	8004aae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b2c:	e028      	b.n	8004b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f830 	bl	8004b98 <I2C_IsAcknowledgeFailed>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e026      	b.n	8004b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b42:	f7fd fc55 	bl	80023f0 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d113      	bne.n	8004b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d1cf      	bne.n	8004b2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d151      	bne.n	8004c56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb2:	e022      	b.n	8004bfa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bba:	d01e      	beq.n	8004bfa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbc:	f7fd fc18 	bl	80023f0 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <I2C_IsAcknowledgeFailed+0x3a>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d113      	bne.n	8004bfa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e02e      	b.n	8004c58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d1d5      	bne.n	8004bb4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2220      	movs	r2, #32
 8004c16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff fedd 	bl	80049d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f043 0204 	orr.w	r2, r3, #4
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	fe00e800 	.word	0xfe00e800

08004c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	817b      	strh	r3, [r7, #10]
 8004c72:	4613      	mov	r3, r2
 8004c74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	0d5b      	lsrs	r3, r3, #21
 8004c80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <I2C_TransferConfig+0x58>)
 8004c86:	430b      	orrs	r3, r1
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	ea02 0103 	and.w	r1, r2, r3
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c94:	7a7b      	ldrb	r3, [r7, #9]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	03ff63ff 	.word	0x03ff63ff

08004cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d138      	bne.n	8004d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e032      	b.n	8004d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2224      	movs	r2, #36	; 0x24
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d139      	bne.n	8004de0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e033      	b.n	8004de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2224      	movs	r2, #36	; 0x24
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004da8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40007000 	.word	0x40007000

08004e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1a:	d130      	bne.n	8004e7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1c:	4b23      	ldr	r3, [pc, #140]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e28:	d038      	beq.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e32:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2232      	movs	r2, #50	; 0x32
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	0c9b      	lsrs	r3, r3, #18
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e50:	e002      	b.n	8004e58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e64:	d102      	bne.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f2      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d110      	bne.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e00f      	b.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d007      	beq.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e94:	4a05      	ldr	r2, [pc, #20]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	20000000 	.word	0x20000000
 8004eb4:	431bde83 	.word	0x431bde83

08004eb8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ec0:	f7fd fa96 	bl	80023f0 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e069      	b.n	8004fa4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fc fcf9 	bl	80018dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004eea:	f241 3188 	movw	r1, #5000	; 0x1388
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f959 	bl	80051a6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	021a      	lsls	r2, r3, #8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2120      	movs	r1, #32
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f951 	bl	80051c2 <QSPI_WaitFlagStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d137      	bne.n	8004f9a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f34:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6852      	ldr	r2, [r2, #4]
 8004f3c:	0611      	lsls	r1, r2, #24
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68d2      	ldr	r2, [r2, #12]
 8004f42:	4311      	orrs	r1, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	69d2      	ldr	r2, [r2, #28]
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a12      	ldr	r2, [r2, #32]
 8004f4e:	4311      	orrs	r1, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <HAL_QSPI_Init+0xf4>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6912      	ldr	r2, [r2, #16]
 8004f66:	0411      	lsls	r1, r2, #16
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6952      	ldr	r2, [r2, #20]
 8004f6c:	4311      	orrs	r1, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6992      	ldr	r2, [r2, #24]
 8004f72:	4311      	orrs	r1, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	ffe0f8fe 	.word	0xffe0f8fe

08004fb0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004fbc:	f7fd fa18 	bl	80023f0 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_QSPI_Command+0x22>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e048      	b.n	8005064 <HAL_QSPI_Command+0xb4>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d137      	bne.n	8005056 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f8df 	bl	80051c2 <QSPI_WaitFlagStateUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d125      	bne.n	800505a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800500e:	2200      	movs	r2, #0
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f90c 	bl	8005230 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2201      	movs	r2, #1
 8005028:	2102      	movs	r1, #2
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f8c9 	bl	80051c2 <QSPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10f      	bne.n	800505a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2202      	movs	r2, #2
 8005040:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800504a:	e006      	b.n	800505a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005054:	e001      	b.n	800505a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800507c:	f7fd f9b8 	bl	80023f0 <HAL_GetTick>
 8005080:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3320      	adds	r3, #32
 8005090:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_QSPI_Receive+0x36>
 800509e:	2302      	movs	r3, #2
 80050a0:	e07d      	b.n	800519e <HAL_QSPI_Receive+0x132>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d16c      	bne.n	8005190 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d05d      	beq.n	800517e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2222      	movs	r2, #34	; 0x22
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80050fa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005104:	e01c      	b.n	8005140 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2201      	movs	r2, #1
 800510e:	2106      	movs	r1, #6
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f856 	bl	80051c2 <QSPI_WaitFlagStateUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800511a:	7ffb      	ldrb	r3, [r7, #31]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d114      	bne.n	800514a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1de      	bne.n	8005106 <HAL_QSPI_Receive+0x9a>
 8005148:	e000      	b.n	800514c <HAL_QSPI_Receive+0xe0>
          break;
 800514a:	bf00      	nop
      }

      if (status == HAL_OK)
 800514c:	7ffb      	ldrb	r3, [r7, #31]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d110      	bne.n	8005174 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2201      	movs	r2, #1
 800515a:	2102      	movs	r1, #2
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f830 	bl	80051c2 <QSPI_WaitFlagStateUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005166:	7ffb      	ldrb	r3, [r7, #31]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d103      	bne.n	8005174 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2202      	movs	r2, #2
 8005172:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800517c:	e00a      	b.n	8005194 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f043 0208 	orr.w	r2, r3, #8
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e001      	b.n	8005194 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005190:	2302      	movs	r3, #2
 8005192:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800519c:	7ffb      	ldrb	r3, [r7, #31]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	649a      	str	r2, [r3, #72]	; 0x48
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051d2:	e01a      	b.n	800520a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051da:	d016      	beq.n	800520a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051dc:	f7fd f908 	bl	80023f0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2204      	movs	r2, #4
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e00e      	b.n	8005228 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	d1d6      	bne.n	80051d4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d009      	beq.n	8005258 <QSPI_Config+0x28>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800524a:	d005      	beq.n	8005258 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3a01      	subs	r2, #1
 8005256:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80b9 	beq.w	80053d4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d05f      	beq.n	800532a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d031      	beq.n	80052e0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	431a      	orrs	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	431a      	orrs	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	431a      	orrs	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	049b      	lsls	r3, r3, #18
 8005298:	431a      	orrs	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	431a      	orrs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	ea42 0103 	orr.w	r1, r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052d0:	f000 812e 	beq.w	8005530 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	6852      	ldr	r2, [r2, #4]
 80052dc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80052de:	e127      	b.n	8005530 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	049b      	lsls	r3, r3, #18
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	431a      	orrs	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	431a      	orrs	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	431a      	orrs	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	ea42 0103 	orr.w	r1, r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	430a      	orrs	r2, r1
 8005326:	615a      	str	r2, [r3, #20]
}
 8005328:	e102      	b.n	8005530 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02e      	beq.n	8005390 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	431a      	orrs	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	431a      	orrs	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	431a      	orrs	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	049b      	lsls	r3, r3, #18
 800534e:	431a      	orrs	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	431a      	orrs	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	431a      	orrs	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	431a      	orrs	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	ea42 0103 	orr.w	r1, r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	430a      	orrs	r2, r1
 8005378:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005380:	f000 80d6 	beq.w	8005530 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	619a      	str	r2, [r3, #24]
}
 800538e:	e0cf      	b.n	8005530 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	431a      	orrs	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	431a      	orrs	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	049b      	lsls	r3, r3, #18
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	ea42 0103 	orr.w	r1, r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	e0ad      	b.n	8005530 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d058      	beq.n	800548e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02d      	beq.n	800544a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	431a      	orrs	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	049b      	lsls	r3, r3, #18
 800540a:	431a      	orrs	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	431a      	orrs	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	431a      	orrs	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	431a      	orrs	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	ea42 0103 	orr.w	r1, r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	430a      	orrs	r2, r1
 8005434:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800543c:	d078      	beq.n	8005530 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	6852      	ldr	r2, [r2, #4]
 8005446:	619a      	str	r2, [r3, #24]
}
 8005448:	e072      	b.n	8005530 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	431a      	orrs	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	431a      	orrs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	049b      	lsls	r3, r3, #18
 8005466:	431a      	orrs	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	431a      	orrs	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	431a      	orrs	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	ea42 0103 	orr.w	r1, r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	430a      	orrs	r2, r1
 800548a:	615a      	str	r2, [r3, #20]
}
 800548c:	e050      	b.n	8005530 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02a      	beq.n	80054ec <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	431a      	orrs	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	049b      	lsls	r3, r3, #18
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	431a      	orrs	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	ea42 0103 	orr.w	r1, r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054de:	d027      	beq.n	8005530 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	619a      	str	r2, [r3, #24]
}
 80054ea:	e021      	b.n	8005530 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01d      	beq.n	8005530 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	431a      	orrs	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	431a      	orrs	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	049b      	lsls	r3, r3, #18
 8005510:	431a      	orrs	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	431a      	orrs	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	431a      	orrs	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	ea42 0103 	orr.w	r1, r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	430a      	orrs	r2, r1
 800552e:	615a      	str	r2, [r3, #20]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f000 bc16 	b.w	8005d7c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005550:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800555a:	4b9e      	ldr	r3, [pc, #632]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80e4 	beq.w	800573a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_RCC_OscConfig+0x4c>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	f040 808b 	bne.w	8005696 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b01      	cmp	r3, #1
 8005584:	f040 8087 	bne.w	8005696 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005588:	4b92      	ldr	r3, [pc, #584]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_OscConfig+0x64>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e3ed      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	4b8b      	ldr	r3, [pc, #556]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_RCC_OscConfig+0x7e>
 80055b0:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b8:	e005      	b.n	80055c6 <HAL_RCC_OscConfig+0x8a>
 80055ba:	4b86      	ldr	r3, [pc, #536]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d223      	bcs.n	8005612 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fd80 	bl	80060d4 <RCC_SetFlashLatencyFromMSIRange>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e3ce      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055de:	4b7d      	ldr	r3, [pc, #500]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a7c      	ldr	r2, [pc, #496]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055e4:	f043 0308 	orr.w	r3, r3, #8
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	4b7a      	ldr	r3, [pc, #488]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4977      	ldr	r1, [pc, #476]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fc:	4b75      	ldr	r3, [pc, #468]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	4972      	ldr	r1, [pc, #456]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	e025      	b.n	800565e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005612:	4b70      	ldr	r3, [pc, #448]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a6f      	ldr	r2, [pc, #444]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4b6d      	ldr	r3, [pc, #436]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	496a      	ldr	r1, [pc, #424]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800562c:	4313      	orrs	r3, r2
 800562e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005630:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	4965      	ldr	r1, [pc, #404]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fd40 	bl	80060d4 <RCC_SetFlashLatencyFromMSIRange>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e38e      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800565e:	f000 fc75 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8005662:	4602      	mov	r2, r0
 8005664:	4b5b      	ldr	r3, [pc, #364]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	495a      	ldr	r1, [pc, #360]	; (80057d8 <HAL_RCC_OscConfig+0x29c>)
 8005670:	5ccb      	ldrb	r3, [r1, r3]
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	fa22 f303 	lsr.w	r3, r2, r3
 800567a:	4a58      	ldr	r2, [pc, #352]	; (80057dc <HAL_RCC_OscConfig+0x2a0>)
 800567c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800567e:	4b58      	ldr	r3, [pc, #352]	; (80057e0 <HAL_RCC_OscConfig+0x2a4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc fe64 	bl	8002350 <HAL_InitTick>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d052      	beq.n	8005738 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	e372      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d032      	beq.n	8005704 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800569e:	4b4d      	ldr	r3, [pc, #308]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4c      	ldr	r2, [pc, #304]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056aa:	f7fc fea1 	bl	80023f0 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056b2:	f7fc fe9d 	bl	80023f0 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e35b      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056c4:	4b43      	ldr	r3, [pc, #268]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d0:	4b40      	ldr	r3, [pc, #256]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a3f      	ldr	r2, [pc, #252]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056d6:	f043 0308 	orr.w	r3, r3, #8
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	493a      	ldr	r1, [pc, #232]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	4935      	ldr	r1, [pc, #212]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	604b      	str	r3, [r1, #4]
 8005702:	e01a      	b.n	800573a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005704:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a32      	ldr	r2, [pc, #200]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005710:	f7fc fe6e 	bl	80023f0 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005718:	f7fc fe6a 	bl	80023f0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e328      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800572a:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0x1dc>
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d073      	beq.n	800582e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b08      	cmp	r3, #8
 800574a:	d005      	beq.n	8005758 <HAL_RCC_OscConfig+0x21c>
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d10e      	bne.n	8005770 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d10b      	bne.n	8005770 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d063      	beq.n	800582c <HAL_RCC_OscConfig+0x2f0>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d15f      	bne.n	800582c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e305      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d106      	bne.n	8005788 <HAL_RCC_OscConfig+0x24c>
 800577a:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e01d      	b.n	80057c4 <HAL_RCC_OscConfig+0x288>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005790:	d10c      	bne.n	80057ac <HAL_RCC_OscConfig+0x270>
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0f      	ldr	r2, [pc, #60]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 8005798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e00b      	b.n	80057c4 <HAL_RCC_OscConfig+0x288>
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <HAL_RCC_OscConfig+0x298>)
 80057be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fc fe10 	bl	80023f0 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d2:	e010      	b.n	80057f6 <HAL_RCC_OscConfig+0x2ba>
 80057d4:	40021000 	.word	0x40021000
 80057d8:	0800c600 	.word	0x0800c600
 80057dc:	20000000 	.word	0x20000000
 80057e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e4:	f7fc fe04 	bl	80023f0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	; 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e2c2      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057f6:	4baf      	ldr	r3, [pc, #700]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0x2a8>
 8005802:	e014      	b.n	800582e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fc fdf4 	bl	80023f0 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800580c:	f7fc fdf0 	bl	80023f0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b64      	cmp	r3, #100	; 0x64
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e2ae      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800581e:	4ba5      	ldr	r3, [pc, #660]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x2d0>
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d060      	beq.n	80058fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d005      	beq.n	800584c <HAL_RCC_OscConfig+0x310>
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d119      	bne.n	800587a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d116      	bne.n	800587a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800584c:	4b99      	ldr	r3, [pc, #612]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_RCC_OscConfig+0x328>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e28b      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005864:	4b93      	ldr	r3, [pc, #588]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	061b      	lsls	r3, r3, #24
 8005872:	4990      	ldr	r1, [pc, #576]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005874:	4313      	orrs	r3, r2
 8005876:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005878:	e040      	b.n	80058fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d023      	beq.n	80058ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005882:	4b8c      	ldr	r3, [pc, #560]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a8b      	ldr	r2, [pc, #556]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fc fdaf 	bl	80023f0 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005896:	f7fc fdab 	bl	80023f0 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e269      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a8:	4b82      	ldr	r3, [pc, #520]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b4:	4b7f      	ldr	r3, [pc, #508]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	497c      	ldr	r1, [pc, #496]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
 80058c8:	e018      	b.n	80058fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ca:	4b7a      	ldr	r3, [pc, #488]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a79      	ldr	r2, [pc, #484]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80058d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fc fd8b 	bl	80023f0 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058de:	f7fc fd87 	bl	80023f0 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e245      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f0:	4b70      	ldr	r3, [pc, #448]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f0      	bne.n	80058de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d03c      	beq.n	8005982 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01c      	beq.n	800594a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005910:	4b68      	ldr	r3, [pc, #416]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005916:	4a67      	ldr	r2, [pc, #412]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fc fd66 	bl	80023f0 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005928:	f7fc fd62 	bl	80023f0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e220      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800593a:	4b5e      	ldr	r3, [pc, #376]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 800593c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ef      	beq.n	8005928 <HAL_RCC_OscConfig+0x3ec>
 8005948:	e01b      	b.n	8005982 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594a:	4b5a      	ldr	r3, [pc, #360]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 800594c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005950:	4a58      	ldr	r2, [pc, #352]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595a:	f7fc fd49 	bl	80023f0 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005962:	f7fc fd45 	bl	80023f0 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e203      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005974:	4b4f      	ldr	r3, [pc, #316]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1ef      	bne.n	8005962 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80a6 	beq.w	8005adc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005990:	2300      	movs	r3, #0
 8005992:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005994:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10d      	bne.n	80059bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a0:	4b44      	ldr	r3, [pc, #272]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	4a43      	ldr	r2, [pc, #268]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80059a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059aa:	6593      	str	r3, [r2, #88]	; 0x58
 80059ac:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b8:	2301      	movs	r3, #1
 80059ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059bc:	4b3e      	ldr	r3, [pc, #248]	; (8005ab8 <HAL_RCC_OscConfig+0x57c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d118      	bne.n	80059fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059c8:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <HAL_RCC_OscConfig+0x57c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a3a      	ldr	r2, [pc, #232]	; (8005ab8 <HAL_RCC_OscConfig+0x57c>)
 80059ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d4:	f7fc fd0c 	bl	80023f0 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059dc:	f7fc fd08 	bl	80023f0 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e1c6      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_RCC_OscConfig+0x57c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d108      	bne.n	8005a14 <HAL_RCC_OscConfig+0x4d8>
 8005a02:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a08:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a12:	e024      	b.n	8005a5e <HAL_RCC_OscConfig+0x522>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b05      	cmp	r3, #5
 8005a1a:	d110      	bne.n	8005a3e <HAL_RCC_OscConfig+0x502>
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	4a24      	ldr	r2, [pc, #144]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a24:	f043 0304 	orr.w	r3, r3, #4
 8005a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a2c:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a3c:	e00f      	b.n	8005a5e <HAL_RCC_OscConfig+0x522>
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a66:	f7fc fcc3 	bl	80023f0 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7fc fcbf 	bl	80023f0 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e17b      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_RCC_OscConfig+0x578>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0ed      	beq.n	8005a6e <HAL_RCC_OscConfig+0x532>
 8005a92:	e01a      	b.n	8005aca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7fc fcac 	bl	80023f0 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a9a:	e00f      	b.n	8005abc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9c:	f7fc fca8 	bl	80023f0 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d906      	bls.n	8005abc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e164      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005abc:	4ba8      	ldr	r3, [pc, #672]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e8      	bne.n	8005a9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d105      	bne.n	8005adc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad0:	4ba3      	ldr	r3, [pc, #652]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad4:	4aa2      	ldr	r2, [pc, #648]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ada:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d03c      	beq.n	8005b62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005af0:	4b9b      	ldr	r3, [pc, #620]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005af6:	4a9a      	ldr	r2, [pc, #616]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc fc76 	bl	80023f0 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b08:	f7fc fc72 	bl	80023f0 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e130      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b1a:	4b91      	ldr	r3, [pc, #580]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0ef      	beq.n	8005b08 <HAL_RCC_OscConfig+0x5cc>
 8005b28:	e01b      	b.n	8005b62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b30:	4a8b      	ldr	r2, [pc, #556]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fc fc59 	bl	80023f0 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b42:	f7fc fc55 	bl	80023f0 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e113      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b54:	4b82      	ldr	r3, [pc, #520]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1ef      	bne.n	8005b42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8107 	beq.w	8005d7a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	f040 80cb 	bne.w	8005d0c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b76:	4b7a      	ldr	r3, [pc, #488]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f003 0203 	and.w	r2, r3, #3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d12c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	3b01      	subs	r3, #1
 8005b96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d123      	bne.n	8005be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d11b      	bne.n	8005be4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d113      	bne.n	8005be4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d109      	bne.n	8005be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d06d      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b0c      	cmp	r3, #12
 8005be8:	d068      	beq.n	8005cbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bea:	4b5d      	ldr	r3, [pc, #372]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bf6:	4b5a      	ldr	r3, [pc, #360]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0ba      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c06:	4b56      	ldr	r3, [pc, #344]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a55      	ldr	r2, [pc, #340]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c12:	f7fc fbed 	bl	80023f0 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c1a:	f7fc fbe9 	bl	80023f0 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e0a7      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2c:	4b4c      	ldr	r3, [pc, #304]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c38:	4b49      	ldr	r3, [pc, #292]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	4b49      	ldr	r3, [pc, #292]	; (8005d64 <HAL_RCC_OscConfig+0x828>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0112      	lsls	r2, r2, #4
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c52:	0212      	lsls	r2, r2, #8
 8005c54:	4311      	orrs	r1, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c5a:	0852      	lsrs	r2, r2, #1
 8005c5c:	3a01      	subs	r2, #1
 8005c5e:	0552      	lsls	r2, r2, #21
 8005c60:	4311      	orrs	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c66:	0852      	lsrs	r2, r2, #1
 8005c68:	3a01      	subs	r2, #1
 8005c6a:	0652      	lsls	r2, r2, #25
 8005c6c:	4311      	orrs	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c72:	06d2      	lsls	r2, r2, #27
 8005c74:	430a      	orrs	r2, r1
 8005c76:	493a      	ldr	r1, [pc, #232]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c7c:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a37      	ldr	r2, [pc, #220]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c88:	4b35      	ldr	r3, [pc, #212]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a34      	ldr	r2, [pc, #208]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c94:	f7fc fbac 	bl	80023f0 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fc fba8 	bl	80023f0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e066      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cba:	e05e      	b.n	8005d7a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e05d      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d156      	bne.n	8005d7a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ccc:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cd8:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ce4:	f7fc fb84 	bl	80023f0 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cec:	f7fc fb80 	bl	80023f0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e03e      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cfe:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0x7b0>
 8005d0a:	e036      	b.n	8005d7a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b0c      	cmp	r3, #12
 8005d10:	d031      	beq.n	8005d76 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d12:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a12      	ldr	r2, [pc, #72]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <HAL_RCC_OscConfig+0x824>)
 8005d3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d44:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d46:	f7fc fb53 	bl	80023f0 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d4c:	e00c      	b.n	8005d68 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4e:	f7fc fb4f 	bl	80023f0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d905      	bls.n	8005d68 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e00d      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
 8005d60:	40021000 	.word	0x40021000
 8005d64:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <HAL_RCC_OscConfig+0x848>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ec      	bne.n	8005d4e <HAL_RCC_OscConfig+0x812>
 8005d74:	e001      	b.n	8005d7a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000

08005d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0c8      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b66      	ldr	r3, [pc, #408]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d910      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b63      	ldr	r3, [pc, #396]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 0207 	bic.w	r2, r3, #7
 8005db2:	4961      	ldr	r1, [pc, #388]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b5f      	ldr	r3, [pc, #380]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0b0      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d04c      	beq.n	8005e72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d107      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de0:	4b56      	ldr	r3, [pc, #344]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d121      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e09e      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d107      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df8:	4b50      	ldr	r3, [pc, #320]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d115      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e092      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e10:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d109      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e086      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e20:	4b46      	ldr	r3, [pc, #280]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e07e      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e30:	4b42      	ldr	r3, [pc, #264]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f023 0203 	bic.w	r2, r3, #3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	493f      	ldr	r1, [pc, #252]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e42:	f7fc fad5 	bl	80023f0 <HAL_GetTick>
 8005e46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e48:	e00a      	b.n	8005e60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e4a:	f7fc fad1 	bl	80023f0 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e066      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 020c 	and.w	r2, r3, #12
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d1eb      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	492c      	ldr	r1, [pc, #176]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e90:	4b29      	ldr	r3, [pc, #164]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d210      	bcs.n	8005ec0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b26      	ldr	r3, [pc, #152]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 0207 	bic.w	r2, r3, #7
 8005ea6:	4924      	ldr	r1, [pc, #144]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eae:	4b22      	ldr	r3, [pc, #136]	; (8005f38 <HAL_RCC_ClockConfig+0x1b0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d001      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e036      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4918      	ldr	r1, [pc, #96]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4910      	ldr	r1, [pc, #64]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005efe:	f000 f825 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <HAL_RCC_ClockConfig+0x1b4>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	490c      	ldr	r1, [pc, #48]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005f10:	5ccb      	ldrb	r3, [r1, r3]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1a:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fc fa14 	bl	8002350 <HAL_InitTick>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	0800c600 	.word	0x0800c600
 8005f44:	20000000 	.word	0x20000000
 8005f48:	20000004 	.word	0x20000004

08005f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5a:	4b3e      	ldr	r3, [pc, #248]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f64:	4b3b      	ldr	r3, [pc, #236]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x34>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d121      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11e      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f80:	4b34      	ldr	r3, [pc, #208]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f8c:	4b31      	ldr	r3, [pc, #196]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f9c:	4b2d      	ldr	r3, [pc, #180]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d102      	bne.n	8005fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fd0:	4b23      	ldr	r3, [pc, #140]	; (8006060 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d134      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fda:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8005ff0:	e005      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff4:	617b      	str	r3, [r7, #20]
      break;
 8005ff6:	e005      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ff8:	4b19      	ldr	r3, [pc, #100]	; (8006060 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ffa:	617b      	str	r3, [r7, #20]
      break;
 8005ffc:	e002      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	617b      	str	r3, [r7, #20]
      break;
 8006002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	3301      	adds	r3, #1
 8006010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	fb02 f203 	mul.w	r2, r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	0e5b      	lsrs	r3, r3, #25
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	3301      	adds	r3, #1
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006044:	69bb      	ldr	r3, [r7, #24]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3724      	adds	r7, #36	; 0x24
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000
 8006058:	0800c618 	.word	0x0800c618
 800605c:	00f42400 	.word	0x00f42400
 8006060:	018cba80 	.word	0x018cba80

08006064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <HAL_RCC_GetHCLKFreq+0x14>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000000 	.word	0x20000000

0800607c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006080:	f7ff fff0 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8006084:	4602      	mov	r2, r0
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4904      	ldr	r1, [pc, #16]	; (80060a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006092:	5ccb      	ldrb	r3, [r1, r3]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800c610 	.word	0x0800c610

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060ac:	f7ff ffda 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0adb      	lsrs	r3, r3, #11
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4904      	ldr	r1, [pc, #16]	; (80060d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800c610 	.word	0x0800c610

080060d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060ec:	f7fe fe80 	bl	8004df0 <HAL_PWREx_GetVoltageRange>
 80060f0:	6178      	str	r0, [r7, #20]
 80060f2:	e014      	b.n	800611e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f8:	4a24      	ldr	r2, [pc, #144]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800610c:	f7fe fe70 	bl	8004df0 <HAL_PWREx_GetVoltageRange>
 8006110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006112:	4b1e      	ldr	r3, [pc, #120]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4a1d      	ldr	r2, [pc, #116]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006124:	d10b      	bne.n	800613e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d919      	bls.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2ba0      	cmp	r3, #160	; 0xa0
 8006130:	d902      	bls.n	8006138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006132:	2302      	movs	r3, #2
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	e013      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006138:	2301      	movs	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	e010      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b80      	cmp	r3, #128	; 0x80
 8006142:	d902      	bls.n	800614a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006144:	2303      	movs	r3, #3
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	e00a      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d102      	bne.n	8006156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006150:	2302      	movs	r3, #2
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e004      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b70      	cmp	r3, #112	; 0x70
 800615a:	d101      	bne.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800615c:	2301      	movs	r3, #1
 800615e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f023 0207 	bic.w	r2, r3, #7
 8006168:	4909      	ldr	r1, [pc, #36]	; (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40021000 	.word	0x40021000
 8006190:	40022000 	.word	0x40022000

08006194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800619c:	2300      	movs	r3, #0
 800619e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061a0:	2300      	movs	r3, #0
 80061a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d041      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061b8:	d02a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061be:	d824      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c4:	d008      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061ca:	d81e      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d4:	d010      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061d6:	e018      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061d8:	4b86      	ldr	r3, [pc, #536]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a85      	ldr	r2, [pc, #532]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e4:	e015      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fb0f 	bl	8006810 <RCCEx_PLLSAI1_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061f6:	e00c      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3320      	adds	r3, #32
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fbf8 	bl	80069f4 <RCCEx_PLLSAI2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	74fb      	strb	r3, [r7, #19]
      break;
 800620e:	e000      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006212:	7cfb      	ldrb	r3, [r7, #19]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006218:	4b76      	ldr	r3, [pc, #472]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006226:	4973      	ldr	r1, [pc, #460]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800622e:	e001      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d041      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006244:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006248:	d02a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800624a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800624e:	d824      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006254:	d008      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800625a:	d81e      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006264:	d010      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006266:	e018      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006268:	4b62      	ldr	r3, [pc, #392]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a61      	ldr	r2, [pc, #388]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800626e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006274:	e015      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3304      	adds	r3, #4
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fac7 	bl	8006810 <RCCEx_PLLSAI1_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006286:	e00c      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3320      	adds	r3, #32
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fbb0 	bl	80069f4 <RCCEx_PLLSAI2_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	74fb      	strb	r3, [r7, #19]
      break;
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a2:	7cfb      	ldrb	r3, [r7, #19]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062a8:	4b52      	ldr	r3, [pc, #328]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	494f      	ldr	r1, [pc, #316]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062be:	e001      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	7cfb      	ldrb	r3, [r7, #19]
 80062c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80a0 	beq.w	8006412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062d2:	2300      	movs	r3, #0
 80062d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062d6:	4b47      	ldr	r3, [pc, #284]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ec:	4b41      	ldr	r3, [pc, #260]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f0:	4a40      	ldr	r2, [pc, #256]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f6:	6593      	str	r3, [r2, #88]	; 0x58
 80062f8:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006304:	2301      	movs	r3, #1
 8006306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006308:	4b3b      	ldr	r3, [pc, #236]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3a      	ldr	r2, [pc, #232]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800630e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006314:	f7fc f86c 	bl	80023f0 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800631a:	e009      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631c:	f7fc f868 	bl	80023f0 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d902      	bls.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	74fb      	strb	r3, [r7, #19]
        break;
 800632e:	e005      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006330:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0ef      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d15c      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006342:	4b2c      	ldr	r3, [pc, #176]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01f      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	429a      	cmp	r2, r3
 800635e:	d019      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006360:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800637c:	4b1d      	ldr	r3, [pc, #116]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fc f827 	bl	80023f0 <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a4:	e00b      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fc f823 	bl	80023f0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d902      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	74fb      	strb	r3, [r7, #19]
            break;
 80063bc:	e006      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ec      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e2:	4904      	ldr	r1, [pc, #16]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063ea:	e009      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	74bb      	strb	r3, [r7, #18]
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80063f2:	bf00      	nop
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006400:	7c7b      	ldrb	r3, [r7, #17]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006406:	4ba6      	ldr	r3, [pc, #664]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	4aa5      	ldr	r2, [pc, #660]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800640c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800641e:	4ba0      	ldr	r3, [pc, #640]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f023 0203 	bic.w	r2, r3, #3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	499c      	ldr	r1, [pc, #624]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006440:	4b97      	ldr	r3, [pc, #604]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f023 020c 	bic.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	4994      	ldr	r1, [pc, #592]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006462:	4b8f      	ldr	r3, [pc, #572]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	498b      	ldr	r1, [pc, #556]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006484:	4b86      	ldr	r3, [pc, #536]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	4983      	ldr	r1, [pc, #524]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064a6:	4b7e      	ldr	r3, [pc, #504]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b4:	497a      	ldr	r1, [pc, #488]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c8:	4b75      	ldr	r3, [pc, #468]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d6:	4972      	ldr	r1, [pc, #456]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ea:	4b6d      	ldr	r3, [pc, #436]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f8:	4969      	ldr	r1, [pc, #420]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800650c:	4b64      	ldr	r3, [pc, #400]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651a:	4961      	ldr	r1, [pc, #388]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800652e:	4b5c      	ldr	r3, [pc, #368]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	4958      	ldr	r1, [pc, #352]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006550:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	4950      	ldr	r1, [pc, #320]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006572:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	4947      	ldr	r1, [pc, #284]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006594:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659a:	f023 0203 	bic.w	r2, r3, #3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a2:	493f      	ldr	r1, [pc, #252]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d028      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b6:	4b3a      	ldr	r3, [pc, #232]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c4:	4936      	ldr	r1, [pc, #216]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d4:	d106      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d6:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	4a31      	ldr	r2, [pc, #196]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e0:	60d3      	str	r3, [r2, #12]
 80065e2:	e011      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ec:	d10c      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	2101      	movs	r1, #1
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f90b 	bl	8006810 <RCCEx_PLLSAI1_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065fe:	7cfb      	ldrb	r3, [r7, #19]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d028      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006614:	4b22      	ldr	r3, [pc, #136]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006622:	491f      	ldr	r1, [pc, #124]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006632:	d106      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006634:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800663a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663e:	60d3      	str	r3, [r2, #12]
 8006640:	e011      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800664a:	d10c      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f8dc 	bl	8006810 <RCCEx_PLLSAI1_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665c:	7cfb      	ldrb	r3, [r7, #19]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006680:	4907      	ldr	r1, [pc, #28]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d108      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006692:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	4a02      	ldr	r2, [pc, #8]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669c:	60d3      	str	r3, [r2, #12]
 800669e:	e013      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80066a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3304      	adds	r3, #4
 80066b2:	2101      	movs	r1, #1
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f8ab 	bl	8006810 <RCCEx_PLLSAI1_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02f      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d4:	4b2c      	ldr	r3, [pc, #176]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e2:	4929      	ldr	r1, [pc, #164]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f2:	d10d      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	2102      	movs	r1, #2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f888 	bl	8006810 <RCCEx_PLLSAI1_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d014      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800670a:	7cfb      	ldrb	r3, [r7, #19]
 800670c:	74bb      	strb	r3, [r7, #18]
 800670e:	e011      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006718:	d10c      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3320      	adds	r3, #32
 800671e:	2102      	movs	r1, #2
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f967 	bl	80069f4 <RCCEx_PLLSAI2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800672a:	7cfb      	ldrb	r3, [r7, #19]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006750:	490d      	ldr	r1, [pc, #52]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006774:	4904      	ldr	r1, [pc, #16]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800677c:	7cbb      	ldrb	r3, [r7, #18]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40021000 	.word	0x40021000

0800678c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <HAL_RCCEx_CRSConfig+0x7c>)
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <HAL_RCCEx_CRSConfig+0x7c>)
 800679a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800679e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <HAL_RCCEx_CRSConfig+0x7c>)
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_RCCEx_CRSConfig+0x7c>)
 80067a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067aa:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80067d4:	4a0d      	ldr	r2, [pc, #52]	; (800680c <HAL_RCCEx_CRSConfig+0x80>)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_RCCEx_CRSConfig+0x80>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	4908      	ldr	r1, [pc, #32]	; (800680c <HAL_RCCEx_CRSConfig+0x80>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80067ee:	4b07      	ldr	r3, [pc, #28]	; (800680c <HAL_RCCEx_CRSConfig+0x80>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a06      	ldr	r2, [pc, #24]	; (800680c <HAL_RCCEx_CRSConfig+0x80>)
 80067f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067f8:	6013      	str	r3, [r2, #0]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	40006000 	.word	0x40006000

08006810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800681e:	4b74      	ldr	r3, [pc, #464]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d018      	beq.n	800685c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800682a:	4b71      	ldr	r3, [pc, #452]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0203 	and.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d10d      	bne.n	8006856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
       ||
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006842:	4b6b      	ldr	r3, [pc, #428]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
       ||
 8006852:	429a      	cmp	r2, r3
 8006854:	d047      	beq.n	80068e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
 800685a:	e044      	b.n	80068e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d018      	beq.n	8006896 <RCCEx_PLLSAI1_Config+0x86>
 8006864:	2b03      	cmp	r3, #3
 8006866:	d825      	bhi.n	80068b4 <RCCEx_PLLSAI1_Config+0xa4>
 8006868:	2b01      	cmp	r3, #1
 800686a:	d002      	beq.n	8006872 <RCCEx_PLLSAI1_Config+0x62>
 800686c:	2b02      	cmp	r3, #2
 800686e:	d009      	beq.n	8006884 <RCCEx_PLLSAI1_Config+0x74>
 8006870:	e020      	b.n	80068b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006872:	4b5f      	ldr	r3, [pc, #380]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11d      	bne.n	80068ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006882:	e01a      	b.n	80068ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006884:	4b5a      	ldr	r3, [pc, #360]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	2b00      	cmp	r3, #0
 800688e:	d116      	bne.n	80068be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006894:	e013      	b.n	80068be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006896:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068a2:	4b53      	ldr	r3, [pc, #332]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068b2:	e006      	b.n	80068c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	e004      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068ba:	bf00      	nop
 80068bc:	e002      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10d      	bne.n	80068e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068ca:	4b49      	ldr	r3, [pc, #292]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6819      	ldr	r1, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	3b01      	subs	r3, #1
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	430b      	orrs	r3, r1
 80068e0:	4943      	ldr	r1, [pc, #268]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d17c      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068ec:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f8:	f7fb fd7a 	bl	80023f0 <HAL_GetTick>
 80068fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068fe:	e009      	b.n	8006914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006900:	f7fb fd76 	bl	80023f0 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d902      	bls.n	8006914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	73fb      	strb	r3, [r7, #15]
        break;
 8006912:	e005      	b.n	8006920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006914:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ef      	bne.n	8006900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d15f      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d110      	bne.n	800694e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800692c:	4b30      	ldr	r3, [pc, #192]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6892      	ldr	r2, [r2, #8]
 800693c:	0211      	lsls	r1, r2, #8
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68d2      	ldr	r2, [r2, #12]
 8006942:	06d2      	lsls	r2, r2, #27
 8006944:	430a      	orrs	r2, r1
 8006946:	492a      	ldr	r1, [pc, #168]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006948:	4313      	orrs	r3, r2
 800694a:	610b      	str	r3, [r1, #16]
 800694c:	e027      	b.n	800699e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d112      	bne.n	800697a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006954:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800695c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6892      	ldr	r2, [r2, #8]
 8006964:	0211      	lsls	r1, r2, #8
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6912      	ldr	r2, [r2, #16]
 800696a:	0852      	lsrs	r2, r2, #1
 800696c:	3a01      	subs	r2, #1
 800696e:	0552      	lsls	r2, r2, #21
 8006970:	430a      	orrs	r2, r1
 8006972:	491f      	ldr	r1, [pc, #124]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006974:	4313      	orrs	r3, r2
 8006976:	610b      	str	r3, [r1, #16]
 8006978:	e011      	b.n	800699e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800697a:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6892      	ldr	r2, [r2, #8]
 800698a:	0211      	lsls	r1, r2, #8
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6952      	ldr	r2, [r2, #20]
 8006990:	0852      	lsrs	r2, r2, #1
 8006992:	3a01      	subs	r2, #1
 8006994:	0652      	lsls	r2, r2, #25
 8006996:	430a      	orrs	r2, r1
 8006998:	4915      	ldr	r1, [pc, #84]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800699e:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069aa:	f7fb fd21 	bl	80023f0 <HAL_GetTick>
 80069ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069b0:	e009      	b.n	80069c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069b2:	f7fb fd1d 	bl	80023f0 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d902      	bls.n	80069c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	73fb      	strb	r3, [r7, #15]
          break;
 80069c4:	e005      	b.n	80069d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0ef      	beq.n	80069b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	4903      	ldr	r1, [pc, #12]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40021000 	.word	0x40021000

080069f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a02:	4b69      	ldr	r3, [pc, #420]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d018      	beq.n	8006a40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a0e:	4b66      	ldr	r3, [pc, #408]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0203 	and.w	r2, r3, #3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d10d      	bne.n	8006a3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
       ||
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006a26:	4b60      	ldr	r3, [pc, #384]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	091b      	lsrs	r3, r3, #4
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
       ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d047      	beq.n	8006aca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
 8006a3e:	e044      	b.n	8006aca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d018      	beq.n	8006a7a <RCCEx_PLLSAI2_Config+0x86>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d825      	bhi.n	8006a98 <RCCEx_PLLSAI2_Config+0xa4>
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d002      	beq.n	8006a56 <RCCEx_PLLSAI2_Config+0x62>
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d009      	beq.n	8006a68 <RCCEx_PLLSAI2_Config+0x74>
 8006a54:	e020      	b.n	8006a98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a56:	4b54      	ldr	r3, [pc, #336]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11d      	bne.n	8006a9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a66:	e01a      	b.n	8006a9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a68:	4b4f      	ldr	r3, [pc, #316]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d116      	bne.n	8006aa2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a78:	e013      	b.n	8006aa2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a7a:	4b4b      	ldr	r3, [pc, #300]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a86:	4b48      	ldr	r3, [pc, #288]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a96:	e006      	b.n	8006aa6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9c:	e004      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10d      	bne.n	8006aca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006aae:	4b3e      	ldr	r3, [pc, #248]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	4938      	ldr	r1, [pc, #224]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d166      	bne.n	8006b9e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ad0:	4b35      	ldr	r3, [pc, #212]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a34      	ldr	r2, [pc, #208]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006adc:	f7fb fc88 	bl	80023f0 <HAL_GetTick>
 8006ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ae2:	e009      	b.n	8006af8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ae4:	f7fb fc84 	bl	80023f0 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d902      	bls.n	8006af8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	73fb      	strb	r3, [r7, #15]
        break;
 8006af6:	e005      	b.n	8006b04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006af8:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1ef      	bne.n	8006ae4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d149      	bne.n	8006b9e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d110      	bne.n	8006b32 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b10:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6892      	ldr	r2, [r2, #8]
 8006b20:	0211      	lsls	r1, r2, #8
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68d2      	ldr	r2, [r2, #12]
 8006b26:	06d2      	lsls	r2, r2, #27
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	491f      	ldr	r1, [pc, #124]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	614b      	str	r3, [r1, #20]
 8006b30:	e011      	b.n	8006b56 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6892      	ldr	r2, [r2, #8]
 8006b42:	0211      	lsls	r1, r2, #8
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6912      	ldr	r2, [r2, #16]
 8006b48:	0852      	lsrs	r2, r2, #1
 8006b4a:	3a01      	subs	r2, #1
 8006b4c:	0652      	lsls	r2, r2, #25
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	4915      	ldr	r1, [pc, #84]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b62:	f7fb fc45 	bl	80023f0 <HAL_GetTick>
 8006b66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b68:	e009      	b.n	8006b7e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b6a:	f7fb fc41 	bl	80023f0 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d902      	bls.n	8006b7e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b7c:	e005      	b.n	8006b8a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0ef      	beq.n	8006b6a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b90:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	4903      	ldr	r1, [pc, #12]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40021000 	.word	0x40021000

08006bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e095      	b.n	8006cea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bce:	d009      	beq.n	8006be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	61da      	str	r2, [r3, #28]
 8006bd6:	e005      	b.n	8006be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fa fede 	bl	80019c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c24:	d902      	bls.n	8006c2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e002      	b.n	8006c32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c3a:	d007      	beq.n	8006c4c <HAL_SPI_Init+0xa0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	ea42 0103 	orr.w	r1, r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	0c1b      	lsrs	r3, r3, #16
 8006ca8:	f003 0204 	and.w	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cc8:	ea42 0103 	orr.w	r1, r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b088      	sub	sp, #32
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_SPI_Transmit+0x22>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e158      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d1c:	f7fb fb68 	bl	80023f0 <HAL_GetTick>
 8006d20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d002      	beq.n	8006d38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d36:	e13d      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_SPI_Transmit+0x52>
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d48:	e134      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	88fa      	ldrh	r2, [r7, #6]
 8006d62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d94:	d10f      	bne.n	8006db6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d007      	beq.n	8006dd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ddc:	d94b      	bls.n	8006e76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_SPI_Transmit+0xfa>
 8006de6:	8afb      	ldrh	r3, [r7, #22]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d13e      	bne.n	8006e6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	881a      	ldrh	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	1c9a      	adds	r2, r3, #2
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e10:	e02b      	b.n	8006e6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d112      	bne.n	8006e46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	1c9a      	adds	r2, r3, #2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e44:	e011      	b.n	8006e6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e46:	f7fb fad3 	bl	80023f0 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d803      	bhi.n	8006e5e <HAL_SPI_Transmit+0x16c>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5c:	d102      	bne.n	8006e64 <HAL_SPI_Transmit+0x172>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e68:	e0a4      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ce      	bne.n	8006e12 <HAL_SPI_Transmit+0x120>
 8006e74:	e07c      	b.n	8006f70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Transmit+0x192>
 8006e7e:	8afb      	ldrh	r3, [r7, #22]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d170      	bne.n	8006f66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d912      	bls.n	8006eb4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	1c9a      	adds	r2, r3, #2
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b02      	subs	r3, #2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb2:	e058      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006eda:	e044      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d12b      	bne.n	8006f42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d912      	bls.n	8006f1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b02      	subs	r3, #2
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f18:	e025      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f40:	e011      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7fb fa55 	bl	80023f0 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <HAL_SPI_Transmit+0x268>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Transmit+0x26e>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f64:	e026      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1b5      	bne.n	8006edc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fcdf 	bl	8007938 <SPI_EndRxTxTransaction>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e000      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b088      	sub	sp, #32
 8006fd2:	af02      	add	r7, sp, #8
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	603b      	str	r3, [r7, #0]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fea:	d112      	bne.n	8007012 <HAL_SPI_Receive+0x44>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10e      	bne.n	8007012 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ffc:	88fa      	ldrh	r2, [r7, #6]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4613      	mov	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f910 	bl	800722e <HAL_SPI_TransmitReceive>
 800700e:	4603      	mov	r3, r0
 8007010:	e109      	b.n	8007226 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_SPI_Receive+0x52>
 800701c:	2302      	movs	r3, #2
 800701e:	e102      	b.n	8007226 <HAL_SPI_Receive+0x258>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007028:	f7fb f9e2 	bl	80023f0 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b01      	cmp	r3, #1
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800703a:	2302      	movs	r3, #2
 800703c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800703e:	e0e9      	b.n	8007214 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_SPI_Receive+0x7e>
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007050:	e0e0      	b.n	8007214 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2204      	movs	r2, #4
 8007056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	88fa      	ldrh	r2, [r7, #6]
 800706a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800709c:	d908      	bls.n	80070b0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	e007      	b.n	80070c0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c8:	d10f      	bne.n	80070ea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d007      	beq.n	8007108 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007106:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007110:	d867      	bhi.n	80071e2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007112:	e030      	b.n	8007176 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d117      	bne.n	8007152 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f103 020c 	add.w	r2, r3, #12
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	7812      	ldrb	r2, [r2, #0]
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007150:	e011      	b.n	8007176 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007152:	f7fb f94d 	bl	80023f0 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d803      	bhi.n	800716a <HAL_SPI_Receive+0x19c>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007168:	d102      	bne.n	8007170 <HAL_SPI_Receive+0x1a2>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007174:	e04e      	b.n	8007214 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1c8      	bne.n	8007114 <HAL_SPI_Receive+0x146>
 8007182:	e034      	b.n	80071ee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d115      	bne.n	80071be <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	b292      	uxth	r2, r2
 800719e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	1c9a      	adds	r2, r3, #2
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071bc:	e011      	b.n	80071e2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071be:	f7fb f917 	bl	80023f0 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d803      	bhi.n	80071d6 <HAL_SPI_Receive+0x208>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071d4:	d102      	bne.n	80071dc <HAL_SPI_Receive+0x20e>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071e0:	e018      	b.n	8007214 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1ca      	bne.n	8007184 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fb48 	bl	8007888 <SPI_EndRxTransaction>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	75fb      	strb	r3, [r7, #23]
 8007210:	e000      	b.n	8007214 <HAL_SPI_Receive+0x246>
  }

error :
 8007212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b08a      	sub	sp, #40	; 0x28
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800723c:	2301      	movs	r3, #1
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x26>
 8007250:	2302      	movs	r3, #2
 8007252:	e1fb      	b.n	800764c <HAL_SPI_TransmitReceive+0x41e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800725c:	f7fb f8c8 	bl	80023f0 <HAL_GetTick>
 8007260:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007268:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007270:	887b      	ldrh	r3, [r7, #2]
 8007272:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007274:	887b      	ldrh	r3, [r7, #2]
 8007276:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007278:	7efb      	ldrb	r3, [r7, #27]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d00e      	beq.n	800729c <HAL_SPI_TransmitReceive+0x6e>
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007284:	d106      	bne.n	8007294 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <HAL_SPI_TransmitReceive+0x66>
 800728e:	7efb      	ldrb	r3, [r7, #27]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d003      	beq.n	800729c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007294:	2302      	movs	r3, #2
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800729a:	e1cd      	b.n	8007638 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_SPI_TransmitReceive+0x80>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <HAL_SPI_TransmitReceive+0x80>
 80072a8:	887b      	ldrh	r3, [r7, #2]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072b4:	e1c0      	b.n	8007638 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d003      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2205      	movs	r2, #5
 80072c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	887a      	ldrh	r2, [r7, #2]
 80072da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	887a      	ldrh	r2, [r7, #2]
 80072e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	887a      	ldrh	r2, [r7, #2]
 80072f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800730c:	d802      	bhi.n	8007314 <HAL_SPI_TransmitReceive+0xe6>
 800730e:	8a3b      	ldrh	r3, [r7, #16]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d908      	bls.n	8007326 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007322:	605a      	str	r2, [r3, #4]
 8007324:	e007      	b.n	8007336 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d007      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735c:	d97c      	bls.n	8007458 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_SPI_TransmitReceive+0x13e>
 8007366:	8a7b      	ldrh	r3, [r7, #18]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d169      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	881a      	ldrh	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	1c9a      	adds	r2, r3, #2
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007390:	e056      	b.n	8007440 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b02      	cmp	r3, #2
 800739e:	d11b      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x1aa>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <HAL_SPI_TransmitReceive+0x1aa>
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d113      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	881a      	ldrh	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	1c9a      	adds	r2, r3, #2
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d11c      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x1f2>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	b292      	uxth	r2, r2
 80073fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	1c9a      	adds	r2, r3, #2
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007420:	f7fa ffe6 	bl	80023f0 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742c:	429a      	cmp	r2, r3
 800742e:	d807      	bhi.n	8007440 <HAL_SPI_TransmitReceive+0x212>
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007436:	d003      	beq.n	8007440 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800743e:	e0fb      	b.n	8007638 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1a3      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x164>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d19d      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x164>
 8007456:	e0df      	b.n	8007618 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x23a>
 8007460:	8a7b      	ldrh	r3, [r7, #18]
 8007462:	2b01      	cmp	r3, #1
 8007464:	f040 80cb 	bne.w	80075fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b01      	cmp	r3, #1
 8007470:	d912      	bls.n	8007498 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	881a      	ldrh	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	1c9a      	adds	r2, r3, #2
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b02      	subs	r3, #2
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007496:	e0b2      	b.n	80075fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	330c      	adds	r3, #12
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074be:	e09e      	b.n	80075fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d134      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x30a>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02f      	beq.n	8007538 <HAL_SPI_TransmitReceive+0x30a>
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d12c      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d912      	bls.n	800750e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	881a      	ldrh	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b02      	subs	r3, #2
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800750c:	e012      	b.n	8007534 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d148      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x3aa>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d042      	beq.n	80075d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d923      	bls.n	80075a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	b292      	uxth	r2, r2
 800756a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	1c9a      	adds	r2, r3, #2
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b02      	subs	r3, #2
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d81f      	bhi.n	80075d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	e016      	b.n	80075d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f103 020c 	add.w	r2, r3, #12
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075d4:	2301      	movs	r3, #1
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075d8:	f7fa ff0a 	bl	80023f0 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d803      	bhi.n	80075f0 <HAL_SPI_TransmitReceive+0x3c2>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ee:	d102      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x3c8>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80075fc:	e01c      	b.n	8007638 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f af5b 	bne.w	80074c0 <HAL_SPI_TransmitReceive+0x292>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	f47f af54 	bne.w	80074c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007618:	69fa      	ldr	r2, [r7, #28]
 800761a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f98b 	bl	8007938 <SPI_EndRxTxTransaction>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d006      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	661a      	str	r2, [r3, #96]	; 0x60
 8007634:	e000      	b.n	8007638 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800764c:	4618      	mov	r0, r3
 800764e:	3728      	adds	r7, #40	; 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	4613      	mov	r3, r2
 8007662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007664:	f7fa fec4 	bl	80023f0 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	4413      	add	r3, r2
 8007672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007674:	f7fa febc 	bl	80023f0 <HAL_GetTick>
 8007678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800767a:	4b39      	ldr	r3, [pc, #228]	; (8007760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	015b      	lsls	r3, r3, #5
 8007680:	0d1b      	lsrs	r3, r3, #20
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	fb02 f303 	mul.w	r3, r2, r3
 8007688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800768a:	e054      	b.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007692:	d050      	beq.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007694:	f7fa feac 	bl	80023f0 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d902      	bls.n	80076aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d13d      	bne.n	8007726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076c2:	d111      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076cc:	d004      	beq.n	80076d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d6:	d107      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f0:	d10f      	bne.n	8007712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e017      	b.n	8007756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	3b01      	subs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	429a      	cmp	r2, r3
 8007752:	d19b      	bne.n	800768c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000000 	.word	0x20000000

08007764 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007772:	f7fa fe3d 	bl	80023f0 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	4413      	add	r3, r2
 8007780:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007782:	f7fa fe35 	bl	80023f0 <HAL_GetTick>
 8007786:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007788:	4b3e      	ldr	r3, [pc, #248]	; (8007884 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	00da      	lsls	r2, r3, #3
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	0d1b      	lsrs	r3, r3, #20
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80077a0:	e062      	b.n	8007868 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077a8:	d109      	bne.n	80077be <SPI_WaitFifoStateUntilTimeout+0x5a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d106      	bne.n	80077be <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	330c      	adds	r3, #12
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80077bc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c4:	d050      	beq.n	8007868 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077c6:	f7fa fe13 	bl	80023f0 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d902      	bls.n	80077dc <SPI_WaitFifoStateUntilTimeout+0x78>
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d13d      	bne.n	8007858 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f4:	d111      	bne.n	800781a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fe:	d004      	beq.n	800780a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007808:	d107      	bne.n	800781a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007822:	d10f      	bne.n	8007844 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007842:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e010      	b.n	800787a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3b01      	subs	r3, #1
 8007866:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4013      	ands	r3, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	429a      	cmp	r2, r3
 8007876:	d194      	bne.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000000 	.word	0x20000000

08007888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800789c:	d111      	bne.n	80078c2 <SPI_EndRxTransaction+0x3a>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078a6:	d004      	beq.n	80078b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b0:	d107      	bne.n	80078c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2200      	movs	r2, #0
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff fec1 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078dc:	f043 0220 	orr.w	r2, r3, #32
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e023      	b.n	8007930 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f0:	d11d      	bne.n	800792e <SPI_EndRxTransaction+0xa6>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fa:	d004      	beq.n	8007906 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007904:	d113      	bne.n	800792e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff ff26 	bl	8007764 <SPI_WaitFifoStateUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007922:	f043 0220 	orr.w	r2, r3, #32
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e000      	b.n	8007930 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af02      	add	r7, sp, #8
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff ff07 	bl	8007764 <SPI_WaitFifoStateUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007960:	f043 0220 	orr.w	r2, r3, #32
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e027      	b.n	80079bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	2180      	movs	r1, #128	; 0x80
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fe6c 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007986:	f043 0220 	orr.w	r2, r3, #32
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e014      	b.n	80079bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff fee0 	bl	8007764 <SPI_WaitFifoStateUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e000      	b.n	80079bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <__errno>:
 80079c4:	4b01      	ldr	r3, [pc, #4]	; (80079cc <__errno+0x8>)
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	2000000c 	.word	0x2000000c

080079d0 <__libc_init_array>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4d0d      	ldr	r5, [pc, #52]	; (8007a08 <__libc_init_array+0x38>)
 80079d4:	4c0d      	ldr	r4, [pc, #52]	; (8007a0c <__libc_init_array+0x3c>)
 80079d6:	1b64      	subs	r4, r4, r5
 80079d8:	10a4      	asrs	r4, r4, #2
 80079da:	2600      	movs	r6, #0
 80079dc:	42a6      	cmp	r6, r4
 80079de:	d109      	bne.n	80079f4 <__libc_init_array+0x24>
 80079e0:	4d0b      	ldr	r5, [pc, #44]	; (8007a10 <__libc_init_array+0x40>)
 80079e2:	4c0c      	ldr	r4, [pc, #48]	; (8007a14 <__libc_init_array+0x44>)
 80079e4:	f004 fcd2 	bl	800c38c <_init>
 80079e8:	1b64      	subs	r4, r4, r5
 80079ea:	10a4      	asrs	r4, r4, #2
 80079ec:	2600      	movs	r6, #0
 80079ee:	42a6      	cmp	r6, r4
 80079f0:	d105      	bne.n	80079fe <__libc_init_array+0x2e>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f8:	4798      	blx	r3
 80079fa:	3601      	adds	r6, #1
 80079fc:	e7ee      	b.n	80079dc <__libc_init_array+0xc>
 80079fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a02:	4798      	blx	r3
 8007a04:	3601      	adds	r6, #1
 8007a06:	e7f2      	b.n	80079ee <__libc_init_array+0x1e>
 8007a08:	0800cb14 	.word	0x0800cb14
 8007a0c:	0800cb14 	.word	0x0800cb14
 8007a10:	0800cb14 	.word	0x0800cb14
 8007a14:	0800cb18 	.word	0x0800cb18

08007a18 <memset>:
 8007a18:	4402      	add	r2, r0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <memset+0xa>
 8007a20:	4770      	bx	lr
 8007a22:	f803 1b01 	strb.w	r1, [r3], #1
 8007a26:	e7f9      	b.n	8007a1c <memset+0x4>

08007a28 <__cvt>:
 8007a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	ec55 4b10 	vmov	r4, r5, d0
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	460e      	mov	r6, r1
 8007a34:	4619      	mov	r1, r3
 8007a36:	462b      	mov	r3, r5
 8007a38:	bfbb      	ittet	lt
 8007a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a3e:	461d      	movlt	r5, r3
 8007a40:	2300      	movge	r3, #0
 8007a42:	232d      	movlt	r3, #45	; 0x2d
 8007a44:	700b      	strb	r3, [r1, #0]
 8007a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a4c:	4691      	mov	r9, r2
 8007a4e:	f023 0820 	bic.w	r8, r3, #32
 8007a52:	bfbc      	itt	lt
 8007a54:	4622      	movlt	r2, r4
 8007a56:	4614      	movlt	r4, r2
 8007a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a5c:	d005      	beq.n	8007a6a <__cvt+0x42>
 8007a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a62:	d100      	bne.n	8007a66 <__cvt+0x3e>
 8007a64:	3601      	adds	r6, #1
 8007a66:	2102      	movs	r1, #2
 8007a68:	e000      	b.n	8007a6c <__cvt+0x44>
 8007a6a:	2103      	movs	r1, #3
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	ab02      	add	r3, sp, #8
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	ec45 4b10 	vmov	d0, r4, r5
 8007a78:	4653      	mov	r3, sl
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	f001 ff04 	bl	8009888 <_dtoa_r>
 8007a80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a84:	4607      	mov	r7, r0
 8007a86:	d102      	bne.n	8007a8e <__cvt+0x66>
 8007a88:	f019 0f01 	tst.w	r9, #1
 8007a8c:	d022      	beq.n	8007ad4 <__cvt+0xac>
 8007a8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a92:	eb07 0906 	add.w	r9, r7, r6
 8007a96:	d110      	bne.n	8007aba <__cvt+0x92>
 8007a98:	783b      	ldrb	r3, [r7, #0]
 8007a9a:	2b30      	cmp	r3, #48	; 0x30
 8007a9c:	d10a      	bne.n	8007ab4 <__cvt+0x8c>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f9 f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aaa:	b918      	cbnz	r0, 8007ab4 <__cvt+0x8c>
 8007aac:	f1c6 0601 	rsb	r6, r6, #1
 8007ab0:	f8ca 6000 	str.w	r6, [sl]
 8007ab4:	f8da 3000 	ldr.w	r3, [sl]
 8007ab8:	4499      	add	r9, r3
 8007aba:	2200      	movs	r2, #0
 8007abc:	2300      	movs	r3, #0
 8007abe:	4620      	mov	r0, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7f9 f811 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ac6:	b108      	cbz	r0, 8007acc <__cvt+0xa4>
 8007ac8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007acc:	2230      	movs	r2, #48	; 0x30
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	454b      	cmp	r3, r9
 8007ad2:	d307      	bcc.n	8007ae4 <__cvt+0xbc>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ad8:	1bdb      	subs	r3, r3, r7
 8007ada:	4638      	mov	r0, r7
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	b004      	add	sp, #16
 8007ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae4:	1c59      	adds	r1, r3, #1
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e7f0      	b.n	8007ace <__cvt+0xa6>

08007aec <__exponent>:
 8007aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aee:	4603      	mov	r3, r0
 8007af0:	2900      	cmp	r1, #0
 8007af2:	bfb8      	it	lt
 8007af4:	4249      	neglt	r1, r1
 8007af6:	f803 2b02 	strb.w	r2, [r3], #2
 8007afa:	bfb4      	ite	lt
 8007afc:	222d      	movlt	r2, #45	; 0x2d
 8007afe:	222b      	movge	r2, #43	; 0x2b
 8007b00:	2909      	cmp	r1, #9
 8007b02:	7042      	strb	r2, [r0, #1]
 8007b04:	dd2a      	ble.n	8007b5c <__exponent+0x70>
 8007b06:	f10d 0407 	add.w	r4, sp, #7
 8007b0a:	46a4      	mov	ip, r4
 8007b0c:	270a      	movs	r7, #10
 8007b0e:	46a6      	mov	lr, r4
 8007b10:	460a      	mov	r2, r1
 8007b12:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b16:	fb07 1516 	mls	r5, r7, r6, r1
 8007b1a:	3530      	adds	r5, #48	; 0x30
 8007b1c:	2a63      	cmp	r2, #99	; 0x63
 8007b1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007b22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b26:	4631      	mov	r1, r6
 8007b28:	dcf1      	bgt.n	8007b0e <__exponent+0x22>
 8007b2a:	3130      	adds	r1, #48	; 0x30
 8007b2c:	f1ae 0502 	sub.w	r5, lr, #2
 8007b30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b34:	1c44      	adds	r4, r0, #1
 8007b36:	4629      	mov	r1, r5
 8007b38:	4561      	cmp	r1, ip
 8007b3a:	d30a      	bcc.n	8007b52 <__exponent+0x66>
 8007b3c:	f10d 0209 	add.w	r2, sp, #9
 8007b40:	eba2 020e 	sub.w	r2, r2, lr
 8007b44:	4565      	cmp	r5, ip
 8007b46:	bf88      	it	hi
 8007b48:	2200      	movhi	r2, #0
 8007b4a:	4413      	add	r3, r2
 8007b4c:	1a18      	subs	r0, r3, r0
 8007b4e:	b003      	add	sp, #12
 8007b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b5a:	e7ed      	b.n	8007b38 <__exponent+0x4c>
 8007b5c:	2330      	movs	r3, #48	; 0x30
 8007b5e:	3130      	adds	r1, #48	; 0x30
 8007b60:	7083      	strb	r3, [r0, #2]
 8007b62:	70c1      	strb	r1, [r0, #3]
 8007b64:	1d03      	adds	r3, r0, #4
 8007b66:	e7f1      	b.n	8007b4c <__exponent+0x60>

08007b68 <_printf_float>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	ed2d 8b02 	vpush	{d8}
 8007b70:	b08d      	sub	sp, #52	; 0x34
 8007b72:	460c      	mov	r4, r1
 8007b74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b78:	4616      	mov	r6, r2
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	f003 f995 	bl	800aeac <_localeconv_r>
 8007b82:	f8d0 a000 	ldr.w	sl, [r0]
 8007b86:	4650      	mov	r0, sl
 8007b88:	f7f8 fb32 	bl	80001f0 <strlen>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	f8d8 3000 	ldr.w	r3, [r8]
 8007b98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b9c:	3307      	adds	r3, #7
 8007b9e:	f023 0307 	bic.w	r3, r3, #7
 8007ba2:	f103 0208 	add.w	r2, r3, #8
 8007ba6:	f8c8 2000 	str.w	r2, [r8]
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bba:	9307      	str	r3, [sp, #28]
 8007bbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bc0:	ee08 0a10 	vmov	s16, r0
 8007bc4:	4b9f      	ldr	r3, [pc, #636]	; (8007e44 <_printf_float+0x2dc>)
 8007bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bce:	f7f8 ffbd 	bl	8000b4c <__aeabi_dcmpun>
 8007bd2:	bb88      	cbnz	r0, 8007c38 <_printf_float+0xd0>
 8007bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bd8:	4b9a      	ldr	r3, [pc, #616]	; (8007e44 <_printf_float+0x2dc>)
 8007bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bde:	f7f8 ff97 	bl	8000b10 <__aeabi_dcmple>
 8007be2:	bb48      	cbnz	r0, 8007c38 <_printf_float+0xd0>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4640      	mov	r0, r8
 8007bea:	4649      	mov	r1, r9
 8007bec:	f7f8 ff86 	bl	8000afc <__aeabi_dcmplt>
 8007bf0:	b110      	cbz	r0, 8007bf8 <_printf_float+0x90>
 8007bf2:	232d      	movs	r3, #45	; 0x2d
 8007bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf8:	4b93      	ldr	r3, [pc, #588]	; (8007e48 <_printf_float+0x2e0>)
 8007bfa:	4894      	ldr	r0, [pc, #592]	; (8007e4c <_printf_float+0x2e4>)
 8007bfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c00:	bf94      	ite	ls
 8007c02:	4698      	movls	r8, r3
 8007c04:	4680      	movhi	r8, r0
 8007c06:	2303      	movs	r3, #3
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	f023 0204 	bic.w	r2, r3, #4
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	f04f 0900 	mov.w	r9, #0
 8007c16:	9700      	str	r7, [sp, #0]
 8007c18:	4633      	mov	r3, r6
 8007c1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f9d8 	bl	8007fd4 <_printf_common>
 8007c24:	3001      	adds	r0, #1
 8007c26:	f040 8090 	bne.w	8007d4a <_printf_float+0x1e2>
 8007c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c2e:	b00d      	add	sp, #52	; 0x34
 8007c30:	ecbd 8b02 	vpop	{d8}
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 ff84 	bl	8000b4c <__aeabi_dcmpun>
 8007c44:	b140      	cbz	r0, 8007c58 <_printf_float+0xf0>
 8007c46:	464b      	mov	r3, r9
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bfbc      	itt	lt
 8007c4c:	232d      	movlt	r3, #45	; 0x2d
 8007c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c52:	487f      	ldr	r0, [pc, #508]	; (8007e50 <_printf_float+0x2e8>)
 8007c54:	4b7f      	ldr	r3, [pc, #508]	; (8007e54 <_printf_float+0x2ec>)
 8007c56:	e7d1      	b.n	8007bfc <_printf_float+0x94>
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c5e:	9206      	str	r2, [sp, #24]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	d13f      	bne.n	8007ce4 <_printf_float+0x17c>
 8007c64:	2306      	movs	r3, #6
 8007c66:	6063      	str	r3, [r4, #4]
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	6861      	ldr	r1, [r4, #4]
 8007c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c70:	2300      	movs	r3, #0
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	ab0a      	add	r3, sp, #40	; 0x28
 8007c76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c7a:	ab09      	add	r3, sp, #36	; 0x24
 8007c7c:	ec49 8b10 	vmov	d0, r8, r9
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fecd 	bl	8007a28 <__cvt>
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c92:	2b47      	cmp	r3, #71	; 0x47
 8007c94:	4680      	mov	r8, r0
 8007c96:	d108      	bne.n	8007caa <_printf_float+0x142>
 8007c98:	1cc8      	adds	r0, r1, #3
 8007c9a:	db02      	blt.n	8007ca2 <_printf_float+0x13a>
 8007c9c:	6863      	ldr	r3, [r4, #4]
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	dd41      	ble.n	8007d26 <_printf_float+0x1be>
 8007ca2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007ca6:	fa5f fb8b 	uxtb.w	fp, fp
 8007caa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cae:	d820      	bhi.n	8007cf2 <_printf_float+0x18a>
 8007cb0:	3901      	subs	r1, #1
 8007cb2:	465a      	mov	r2, fp
 8007cb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8007cba:	f7ff ff17 	bl	8007aec <__exponent>
 8007cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc0:	1813      	adds	r3, r2, r0
 8007cc2:	2a01      	cmp	r2, #1
 8007cc4:	4681      	mov	r9, r0
 8007cc6:	6123      	str	r3, [r4, #16]
 8007cc8:	dc02      	bgt.n	8007cd0 <_printf_float+0x168>
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	07d2      	lsls	r2, r2, #31
 8007cce:	d501      	bpl.n	8007cd4 <_printf_float+0x16c>
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	6123      	str	r3, [r4, #16]
 8007cd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d09c      	beq.n	8007c16 <_printf_float+0xae>
 8007cdc:	232d      	movs	r3, #45	; 0x2d
 8007cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce2:	e798      	b.n	8007c16 <_printf_float+0xae>
 8007ce4:	9a06      	ldr	r2, [sp, #24]
 8007ce6:	2a47      	cmp	r2, #71	; 0x47
 8007ce8:	d1be      	bne.n	8007c68 <_printf_float+0x100>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1bc      	bne.n	8007c68 <_printf_float+0x100>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e7b9      	b.n	8007c66 <_printf_float+0xfe>
 8007cf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007cf6:	d118      	bne.n	8007d2a <_printf_float+0x1c2>
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	6863      	ldr	r3, [r4, #4]
 8007cfc:	dd0b      	ble.n	8007d16 <_printf_float+0x1ae>
 8007cfe:	6121      	str	r1, [r4, #16]
 8007d00:	b913      	cbnz	r3, 8007d08 <_printf_float+0x1a0>
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	07d0      	lsls	r0, r2, #31
 8007d06:	d502      	bpl.n	8007d0e <_printf_float+0x1a6>
 8007d08:	3301      	adds	r3, #1
 8007d0a:	440b      	add	r3, r1
 8007d0c:	6123      	str	r3, [r4, #16]
 8007d0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d10:	f04f 0900 	mov.w	r9, #0
 8007d14:	e7de      	b.n	8007cd4 <_printf_float+0x16c>
 8007d16:	b913      	cbnz	r3, 8007d1e <_printf_float+0x1b6>
 8007d18:	6822      	ldr	r2, [r4, #0]
 8007d1a:	07d2      	lsls	r2, r2, #31
 8007d1c:	d501      	bpl.n	8007d22 <_printf_float+0x1ba>
 8007d1e:	3302      	adds	r3, #2
 8007d20:	e7f4      	b.n	8007d0c <_printf_float+0x1a4>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e7f2      	b.n	8007d0c <_printf_float+0x1a4>
 8007d26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	db05      	blt.n	8007d3c <_printf_float+0x1d4>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	6121      	str	r1, [r4, #16]
 8007d34:	07d8      	lsls	r0, r3, #31
 8007d36:	d5ea      	bpl.n	8007d0e <_printf_float+0x1a6>
 8007d38:	1c4b      	adds	r3, r1, #1
 8007d3a:	e7e7      	b.n	8007d0c <_printf_float+0x1a4>
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	bfd4      	ite	le
 8007d40:	f1c1 0202 	rsble	r2, r1, #2
 8007d44:	2201      	movgt	r2, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	e7e0      	b.n	8007d0c <_printf_float+0x1a4>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	055a      	lsls	r2, r3, #21
 8007d4e:	d407      	bmi.n	8007d60 <_printf_float+0x1f8>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	4642      	mov	r2, r8
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d12c      	bne.n	8007db8 <_printf_float+0x250>
 8007d5e:	e764      	b.n	8007c2a <_printf_float+0xc2>
 8007d60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d64:	f240 80e0 	bls.w	8007f28 <_printf_float+0x3c0>
 8007d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f7f8 feba 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d034      	beq.n	8007de2 <_printf_float+0x27a>
 8007d78:	4a37      	ldr	r2, [pc, #220]	; (8007e58 <_printf_float+0x2f0>)
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	3001      	adds	r0, #1
 8007d84:	f43f af51 	beq.w	8007c2a <_printf_float+0xc2>
 8007d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	db02      	blt.n	8007d96 <_printf_float+0x22e>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	07d8      	lsls	r0, r3, #31
 8007d94:	d510      	bpl.n	8007db8 <_printf_float+0x250>
 8007d96:	ee18 3a10 	vmov	r3, s16
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f af41 	beq.w	8007c2a <_printf_float+0xc2>
 8007da8:	f04f 0800 	mov.w	r8, #0
 8007dac:	f104 091a 	add.w	r9, r4, #26
 8007db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4543      	cmp	r3, r8
 8007db6:	dc09      	bgt.n	8007dcc <_printf_float+0x264>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	079b      	lsls	r3, r3, #30
 8007dbc:	f100 8105 	bmi.w	8007fca <_printf_float+0x462>
 8007dc0:	68e0      	ldr	r0, [r4, #12]
 8007dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc4:	4298      	cmp	r0, r3
 8007dc6:	bfb8      	it	lt
 8007dc8:	4618      	movlt	r0, r3
 8007dca:	e730      	b.n	8007c2e <_printf_float+0xc6>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	464a      	mov	r2, r9
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f43f af27 	beq.w	8007c2a <_printf_float+0xc2>
 8007ddc:	f108 0801 	add.w	r8, r8, #1
 8007de0:	e7e6      	b.n	8007db0 <_printf_float+0x248>
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc39      	bgt.n	8007e5c <_printf_float+0x2f4>
 8007de8:	4a1b      	ldr	r2, [pc, #108]	; (8007e58 <_printf_float+0x2f0>)
 8007dea:	2301      	movs	r3, #1
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f af19 	beq.w	8007c2a <_printf_float+0xc2>
 8007df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	d102      	bne.n	8007e06 <_printf_float+0x29e>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	07d9      	lsls	r1, r3, #31
 8007e04:	d5d8      	bpl.n	8007db8 <_printf_float+0x250>
 8007e06:	ee18 3a10 	vmov	r3, s16
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f af09 	beq.w	8007c2a <_printf_float+0xc2>
 8007e18:	f04f 0900 	mov.w	r9, #0
 8007e1c:	f104 0a1a 	add.w	sl, r4, #26
 8007e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e22:	425b      	negs	r3, r3
 8007e24:	454b      	cmp	r3, r9
 8007e26:	dc01      	bgt.n	8007e2c <_printf_float+0x2c4>
 8007e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2a:	e792      	b.n	8007d52 <_printf_float+0x1ea>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	4652      	mov	r2, sl
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f aef7 	beq.w	8007c2a <_printf_float+0xc2>
 8007e3c:	f109 0901 	add.w	r9, r9, #1
 8007e40:	e7ee      	b.n	8007e20 <_printf_float+0x2b8>
 8007e42:	bf00      	nop
 8007e44:	7fefffff 	.word	0x7fefffff
 8007e48:	0800c660 	.word	0x0800c660
 8007e4c:	0800c664 	.word	0x0800c664
 8007e50:	0800c66c 	.word	0x0800c66c
 8007e54:	0800c668 	.word	0x0800c668
 8007e58:	0800c670 	.word	0x0800c670
 8007e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e60:	429a      	cmp	r2, r3
 8007e62:	bfa8      	it	ge
 8007e64:	461a      	movge	r2, r3
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	4691      	mov	r9, r2
 8007e6a:	dc37      	bgt.n	8007edc <_printf_float+0x374>
 8007e6c:	f04f 0b00 	mov.w	fp, #0
 8007e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e74:	f104 021a 	add.w	r2, r4, #26
 8007e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	eba3 0309 	sub.w	r3, r3, r9
 8007e80:	455b      	cmp	r3, fp
 8007e82:	dc33      	bgt.n	8007eec <_printf_float+0x384>
 8007e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	db3b      	blt.n	8007f04 <_printf_float+0x39c>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	07da      	lsls	r2, r3, #31
 8007e90:	d438      	bmi.n	8007f04 <_printf_float+0x39c>
 8007e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e94:	9b05      	ldr	r3, [sp, #20]
 8007e96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	eba2 0901 	sub.w	r9, r2, r1
 8007e9e:	4599      	cmp	r9, r3
 8007ea0:	bfa8      	it	ge
 8007ea2:	4699      	movge	r9, r3
 8007ea4:	f1b9 0f00 	cmp.w	r9, #0
 8007ea8:	dc35      	bgt.n	8007f16 <_printf_float+0x3ae>
 8007eaa:	f04f 0800 	mov.w	r8, #0
 8007eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eb2:	f104 0a1a 	add.w	sl, r4, #26
 8007eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	eba3 0309 	sub.w	r3, r3, r9
 8007ec0:	4543      	cmp	r3, r8
 8007ec2:	f77f af79 	ble.w	8007db8 <_printf_float+0x250>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4652      	mov	r2, sl
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f43f aeaa 	beq.w	8007c2a <_printf_float+0xc2>
 8007ed6:	f108 0801 	add.w	r8, r8, #1
 8007eda:	e7ec      	b.n	8007eb6 <_printf_float+0x34e>
 8007edc:	4613      	mov	r3, r2
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d1c0      	bne.n	8007e6c <_printf_float+0x304>
 8007eea:	e69e      	b.n	8007c2a <_printf_float+0xc2>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	9205      	str	r2, [sp, #20]
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	f43f ae97 	beq.w	8007c2a <_printf_float+0xc2>
 8007efc:	9a05      	ldr	r2, [sp, #20]
 8007efe:	f10b 0b01 	add.w	fp, fp, #1
 8007f02:	e7b9      	b.n	8007e78 <_printf_float+0x310>
 8007f04:	ee18 3a10 	vmov	r3, s16
 8007f08:	4652      	mov	r2, sl
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	d1be      	bne.n	8007e92 <_printf_float+0x32a>
 8007f14:	e689      	b.n	8007c2a <_printf_float+0xc2>
 8007f16:	9a05      	ldr	r2, [sp, #20]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	4442      	add	r2, r8
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	d1c1      	bne.n	8007eaa <_printf_float+0x342>
 8007f26:	e680      	b.n	8007c2a <_printf_float+0xc2>
 8007f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f2a:	2a01      	cmp	r2, #1
 8007f2c:	dc01      	bgt.n	8007f32 <_printf_float+0x3ca>
 8007f2e:	07db      	lsls	r3, r3, #31
 8007f30:	d538      	bpl.n	8007fa4 <_printf_float+0x43c>
 8007f32:	2301      	movs	r3, #1
 8007f34:	4642      	mov	r2, r8
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b8      	blx	r7
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	f43f ae74 	beq.w	8007c2a <_printf_float+0xc2>
 8007f42:	ee18 3a10 	vmov	r3, s16
 8007f46:	4652      	mov	r2, sl
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f ae6b 	beq.w	8007c2a <_printf_float+0xc2>
 8007f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f7f8 fdc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f60:	b9d8      	cbnz	r0, 8007f9a <_printf_float+0x432>
 8007f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f64:	f108 0201 	add.w	r2, r8, #1
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	d10e      	bne.n	8007f92 <_printf_float+0x42a>
 8007f74:	e659      	b.n	8007c2a <_printf_float+0xc2>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4652      	mov	r2, sl
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	f43f ae52 	beq.w	8007c2a <_printf_float+0xc2>
 8007f86:	f108 0801 	add.w	r8, r8, #1
 8007f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	4543      	cmp	r3, r8
 8007f90:	dcf1      	bgt.n	8007f76 <_printf_float+0x40e>
 8007f92:	464b      	mov	r3, r9
 8007f94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f98:	e6dc      	b.n	8007d54 <_printf_float+0x1ec>
 8007f9a:	f04f 0800 	mov.w	r8, #0
 8007f9e:	f104 0a1a 	add.w	sl, r4, #26
 8007fa2:	e7f2      	b.n	8007f8a <_printf_float+0x422>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	e7df      	b.n	8007f6a <_printf_float+0x402>
 8007faa:	2301      	movs	r3, #1
 8007fac:	464a      	mov	r2, r9
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f43f ae38 	beq.w	8007c2a <_printf_float+0xc2>
 8007fba:	f108 0801 	add.w	r8, r8, #1
 8007fbe:	68e3      	ldr	r3, [r4, #12]
 8007fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fc2:	1a5b      	subs	r3, r3, r1
 8007fc4:	4543      	cmp	r3, r8
 8007fc6:	dcf0      	bgt.n	8007faa <_printf_float+0x442>
 8007fc8:	e6fa      	b.n	8007dc0 <_printf_float+0x258>
 8007fca:	f04f 0800 	mov.w	r8, #0
 8007fce:	f104 0919 	add.w	r9, r4, #25
 8007fd2:	e7f4      	b.n	8007fbe <_printf_float+0x456>

08007fd4 <_printf_common>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	4616      	mov	r6, r2
 8007fda:	4699      	mov	r9, r3
 8007fdc:	688a      	ldr	r2, [r1, #8]
 8007fde:	690b      	ldr	r3, [r1, #16]
 8007fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	bfb8      	it	lt
 8007fe8:	4613      	movlt	r3, r2
 8007fea:	6033      	str	r3, [r6, #0]
 8007fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	b10a      	cbz	r2, 8007ffa <_printf_common+0x26>
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	6033      	str	r3, [r6, #0]
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	0699      	lsls	r1, r3, #26
 8007ffe:	bf42      	ittt	mi
 8008000:	6833      	ldrmi	r3, [r6, #0]
 8008002:	3302      	addmi	r3, #2
 8008004:	6033      	strmi	r3, [r6, #0]
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	f015 0506 	ands.w	r5, r5, #6
 800800c:	d106      	bne.n	800801c <_printf_common+0x48>
 800800e:	f104 0a19 	add.w	sl, r4, #25
 8008012:	68e3      	ldr	r3, [r4, #12]
 8008014:	6832      	ldr	r2, [r6, #0]
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	42ab      	cmp	r3, r5
 800801a:	dc26      	bgt.n	800806a <_printf_common+0x96>
 800801c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008020:	1e13      	subs	r3, r2, #0
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	bf18      	it	ne
 8008026:	2301      	movne	r3, #1
 8008028:	0692      	lsls	r2, r2, #26
 800802a:	d42b      	bmi.n	8008084 <_printf_common+0xb0>
 800802c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008030:	4649      	mov	r1, r9
 8008032:	4638      	mov	r0, r7
 8008034:	47c0      	blx	r8
 8008036:	3001      	adds	r0, #1
 8008038:	d01e      	beq.n	8008078 <_printf_common+0xa4>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	68e5      	ldr	r5, [r4, #12]
 800803e:	6832      	ldr	r2, [r6, #0]
 8008040:	f003 0306 	and.w	r3, r3, #6
 8008044:	2b04      	cmp	r3, #4
 8008046:	bf08      	it	eq
 8008048:	1aad      	subeq	r5, r5, r2
 800804a:	68a3      	ldr	r3, [r4, #8]
 800804c:	6922      	ldr	r2, [r4, #16]
 800804e:	bf0c      	ite	eq
 8008050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008054:	2500      	movne	r5, #0
 8008056:	4293      	cmp	r3, r2
 8008058:	bfc4      	itt	gt
 800805a:	1a9b      	subgt	r3, r3, r2
 800805c:	18ed      	addgt	r5, r5, r3
 800805e:	2600      	movs	r6, #0
 8008060:	341a      	adds	r4, #26
 8008062:	42b5      	cmp	r5, r6
 8008064:	d11a      	bne.n	800809c <_printf_common+0xc8>
 8008066:	2000      	movs	r0, #0
 8008068:	e008      	b.n	800807c <_printf_common+0xa8>
 800806a:	2301      	movs	r3, #1
 800806c:	4652      	mov	r2, sl
 800806e:	4649      	mov	r1, r9
 8008070:	4638      	mov	r0, r7
 8008072:	47c0      	blx	r8
 8008074:	3001      	adds	r0, #1
 8008076:	d103      	bne.n	8008080 <_printf_common+0xac>
 8008078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	3501      	adds	r5, #1
 8008082:	e7c6      	b.n	8008012 <_printf_common+0x3e>
 8008084:	18e1      	adds	r1, r4, r3
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	2030      	movs	r0, #48	; 0x30
 800808a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800808e:	4422      	add	r2, r4
 8008090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008098:	3302      	adds	r3, #2
 800809a:	e7c7      	b.n	800802c <_printf_common+0x58>
 800809c:	2301      	movs	r3, #1
 800809e:	4622      	mov	r2, r4
 80080a0:	4649      	mov	r1, r9
 80080a2:	4638      	mov	r0, r7
 80080a4:	47c0      	blx	r8
 80080a6:	3001      	adds	r0, #1
 80080a8:	d0e6      	beq.n	8008078 <_printf_common+0xa4>
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7d9      	b.n	8008062 <_printf_common+0x8e>
	...

080080b0 <_printf_i>:
 80080b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	460c      	mov	r4, r1
 80080b6:	4691      	mov	r9, r2
 80080b8:	7e27      	ldrb	r7, [r4, #24]
 80080ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080bc:	2f78      	cmp	r7, #120	; 0x78
 80080be:	4680      	mov	r8, r0
 80080c0:	469a      	mov	sl, r3
 80080c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080c6:	d807      	bhi.n	80080d8 <_printf_i+0x28>
 80080c8:	2f62      	cmp	r7, #98	; 0x62
 80080ca:	d80a      	bhi.n	80080e2 <_printf_i+0x32>
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	f000 80d8 	beq.w	8008282 <_printf_i+0x1d2>
 80080d2:	2f58      	cmp	r7, #88	; 0x58
 80080d4:	f000 80a3 	beq.w	800821e <_printf_i+0x16e>
 80080d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080e0:	e03a      	b.n	8008158 <_printf_i+0xa8>
 80080e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080e6:	2b15      	cmp	r3, #21
 80080e8:	d8f6      	bhi.n	80080d8 <_printf_i+0x28>
 80080ea:	a001      	add	r0, pc, #4	; (adr r0, 80080f0 <_printf_i+0x40>)
 80080ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80080f0:	08008149 	.word	0x08008149
 80080f4:	0800815d 	.word	0x0800815d
 80080f8:	080080d9 	.word	0x080080d9
 80080fc:	080080d9 	.word	0x080080d9
 8008100:	080080d9 	.word	0x080080d9
 8008104:	080080d9 	.word	0x080080d9
 8008108:	0800815d 	.word	0x0800815d
 800810c:	080080d9 	.word	0x080080d9
 8008110:	080080d9 	.word	0x080080d9
 8008114:	080080d9 	.word	0x080080d9
 8008118:	080080d9 	.word	0x080080d9
 800811c:	08008269 	.word	0x08008269
 8008120:	0800818d 	.word	0x0800818d
 8008124:	0800824b 	.word	0x0800824b
 8008128:	080080d9 	.word	0x080080d9
 800812c:	080080d9 	.word	0x080080d9
 8008130:	0800828b 	.word	0x0800828b
 8008134:	080080d9 	.word	0x080080d9
 8008138:	0800818d 	.word	0x0800818d
 800813c:	080080d9 	.word	0x080080d9
 8008140:	080080d9 	.word	0x080080d9
 8008144:	08008253 	.word	0x08008253
 8008148:	680b      	ldr	r3, [r1, #0]
 800814a:	1d1a      	adds	r2, r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	600a      	str	r2, [r1, #0]
 8008150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008158:	2301      	movs	r3, #1
 800815a:	e0a3      	b.n	80082a4 <_printf_i+0x1f4>
 800815c:	6825      	ldr	r5, [r4, #0]
 800815e:	6808      	ldr	r0, [r1, #0]
 8008160:	062e      	lsls	r6, r5, #24
 8008162:	f100 0304 	add.w	r3, r0, #4
 8008166:	d50a      	bpl.n	800817e <_printf_i+0xce>
 8008168:	6805      	ldr	r5, [r0, #0]
 800816a:	600b      	str	r3, [r1, #0]
 800816c:	2d00      	cmp	r5, #0
 800816e:	da03      	bge.n	8008178 <_printf_i+0xc8>
 8008170:	232d      	movs	r3, #45	; 0x2d
 8008172:	426d      	negs	r5, r5
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008178:	485e      	ldr	r0, [pc, #376]	; (80082f4 <_printf_i+0x244>)
 800817a:	230a      	movs	r3, #10
 800817c:	e019      	b.n	80081b2 <_printf_i+0x102>
 800817e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008182:	6805      	ldr	r5, [r0, #0]
 8008184:	600b      	str	r3, [r1, #0]
 8008186:	bf18      	it	ne
 8008188:	b22d      	sxthne	r5, r5
 800818a:	e7ef      	b.n	800816c <_printf_i+0xbc>
 800818c:	680b      	ldr	r3, [r1, #0]
 800818e:	6825      	ldr	r5, [r4, #0]
 8008190:	1d18      	adds	r0, r3, #4
 8008192:	6008      	str	r0, [r1, #0]
 8008194:	0628      	lsls	r0, r5, #24
 8008196:	d501      	bpl.n	800819c <_printf_i+0xec>
 8008198:	681d      	ldr	r5, [r3, #0]
 800819a:	e002      	b.n	80081a2 <_printf_i+0xf2>
 800819c:	0669      	lsls	r1, r5, #25
 800819e:	d5fb      	bpl.n	8008198 <_printf_i+0xe8>
 80081a0:	881d      	ldrh	r5, [r3, #0]
 80081a2:	4854      	ldr	r0, [pc, #336]	; (80082f4 <_printf_i+0x244>)
 80081a4:	2f6f      	cmp	r7, #111	; 0x6f
 80081a6:	bf0c      	ite	eq
 80081a8:	2308      	moveq	r3, #8
 80081aa:	230a      	movne	r3, #10
 80081ac:	2100      	movs	r1, #0
 80081ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081b2:	6866      	ldr	r6, [r4, #4]
 80081b4:	60a6      	str	r6, [r4, #8]
 80081b6:	2e00      	cmp	r6, #0
 80081b8:	bfa2      	ittt	ge
 80081ba:	6821      	ldrge	r1, [r4, #0]
 80081bc:	f021 0104 	bicge.w	r1, r1, #4
 80081c0:	6021      	strge	r1, [r4, #0]
 80081c2:	b90d      	cbnz	r5, 80081c8 <_printf_i+0x118>
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	d04d      	beq.n	8008264 <_printf_i+0x1b4>
 80081c8:	4616      	mov	r6, r2
 80081ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ce:	fb03 5711 	mls	r7, r3, r1, r5
 80081d2:	5dc7      	ldrb	r7, [r0, r7]
 80081d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081d8:	462f      	mov	r7, r5
 80081da:	42bb      	cmp	r3, r7
 80081dc:	460d      	mov	r5, r1
 80081de:	d9f4      	bls.n	80081ca <_printf_i+0x11a>
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d10b      	bne.n	80081fc <_printf_i+0x14c>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	07df      	lsls	r7, r3, #31
 80081e8:	d508      	bpl.n	80081fc <_printf_i+0x14c>
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	6861      	ldr	r1, [r4, #4]
 80081ee:	4299      	cmp	r1, r3
 80081f0:	bfde      	ittt	le
 80081f2:	2330      	movle	r3, #48	; 0x30
 80081f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80081fc:	1b92      	subs	r2, r2, r6
 80081fe:	6122      	str	r2, [r4, #16]
 8008200:	f8cd a000 	str.w	sl, [sp]
 8008204:	464b      	mov	r3, r9
 8008206:	aa03      	add	r2, sp, #12
 8008208:	4621      	mov	r1, r4
 800820a:	4640      	mov	r0, r8
 800820c:	f7ff fee2 	bl	8007fd4 <_printf_common>
 8008210:	3001      	adds	r0, #1
 8008212:	d14c      	bne.n	80082ae <_printf_i+0x1fe>
 8008214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008218:	b004      	add	sp, #16
 800821a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821e:	4835      	ldr	r0, [pc, #212]	; (80082f4 <_printf_i+0x244>)
 8008220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	680e      	ldr	r6, [r1, #0]
 8008228:	061f      	lsls	r7, r3, #24
 800822a:	f856 5b04 	ldr.w	r5, [r6], #4
 800822e:	600e      	str	r6, [r1, #0]
 8008230:	d514      	bpl.n	800825c <_printf_i+0x1ac>
 8008232:	07d9      	lsls	r1, r3, #31
 8008234:	bf44      	itt	mi
 8008236:	f043 0320 	orrmi.w	r3, r3, #32
 800823a:	6023      	strmi	r3, [r4, #0]
 800823c:	b91d      	cbnz	r5, 8008246 <_printf_i+0x196>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	f023 0320 	bic.w	r3, r3, #32
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	2310      	movs	r3, #16
 8008248:	e7b0      	b.n	80081ac <_printf_i+0xfc>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	f043 0320 	orr.w	r3, r3, #32
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	2378      	movs	r3, #120	; 0x78
 8008254:	4828      	ldr	r0, [pc, #160]	; (80082f8 <_printf_i+0x248>)
 8008256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800825a:	e7e3      	b.n	8008224 <_printf_i+0x174>
 800825c:	065e      	lsls	r6, r3, #25
 800825e:	bf48      	it	mi
 8008260:	b2ad      	uxthmi	r5, r5
 8008262:	e7e6      	b.n	8008232 <_printf_i+0x182>
 8008264:	4616      	mov	r6, r2
 8008266:	e7bb      	b.n	80081e0 <_printf_i+0x130>
 8008268:	680b      	ldr	r3, [r1, #0]
 800826a:	6826      	ldr	r6, [r4, #0]
 800826c:	6960      	ldr	r0, [r4, #20]
 800826e:	1d1d      	adds	r5, r3, #4
 8008270:	600d      	str	r5, [r1, #0]
 8008272:	0635      	lsls	r5, r6, #24
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	d501      	bpl.n	800827c <_printf_i+0x1cc>
 8008278:	6018      	str	r0, [r3, #0]
 800827a:	e002      	b.n	8008282 <_printf_i+0x1d2>
 800827c:	0671      	lsls	r1, r6, #25
 800827e:	d5fb      	bpl.n	8008278 <_printf_i+0x1c8>
 8008280:	8018      	strh	r0, [r3, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	4616      	mov	r6, r2
 8008288:	e7ba      	b.n	8008200 <_printf_i+0x150>
 800828a:	680b      	ldr	r3, [r1, #0]
 800828c:	1d1a      	adds	r2, r3, #4
 800828e:	600a      	str	r2, [r1, #0]
 8008290:	681e      	ldr	r6, [r3, #0]
 8008292:	6862      	ldr	r2, [r4, #4]
 8008294:	2100      	movs	r1, #0
 8008296:	4630      	mov	r0, r6
 8008298:	f7f7 ffb2 	bl	8000200 <memchr>
 800829c:	b108      	cbz	r0, 80082a2 <_printf_i+0x1f2>
 800829e:	1b80      	subs	r0, r0, r6
 80082a0:	6060      	str	r0, [r4, #4]
 80082a2:	6863      	ldr	r3, [r4, #4]
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	2300      	movs	r3, #0
 80082a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ac:	e7a8      	b.n	8008200 <_printf_i+0x150>
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	4632      	mov	r2, r6
 80082b2:	4649      	mov	r1, r9
 80082b4:	4640      	mov	r0, r8
 80082b6:	47d0      	blx	sl
 80082b8:	3001      	adds	r0, #1
 80082ba:	d0ab      	beq.n	8008214 <_printf_i+0x164>
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	079b      	lsls	r3, r3, #30
 80082c0:	d413      	bmi.n	80082ea <_printf_i+0x23a>
 80082c2:	68e0      	ldr	r0, [r4, #12]
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	4298      	cmp	r0, r3
 80082c8:	bfb8      	it	lt
 80082ca:	4618      	movlt	r0, r3
 80082cc:	e7a4      	b.n	8008218 <_printf_i+0x168>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4632      	mov	r2, r6
 80082d2:	4649      	mov	r1, r9
 80082d4:	4640      	mov	r0, r8
 80082d6:	47d0      	blx	sl
 80082d8:	3001      	adds	r0, #1
 80082da:	d09b      	beq.n	8008214 <_printf_i+0x164>
 80082dc:	3501      	adds	r5, #1
 80082de:	68e3      	ldr	r3, [r4, #12]
 80082e0:	9903      	ldr	r1, [sp, #12]
 80082e2:	1a5b      	subs	r3, r3, r1
 80082e4:	42ab      	cmp	r3, r5
 80082e6:	dcf2      	bgt.n	80082ce <_printf_i+0x21e>
 80082e8:	e7eb      	b.n	80082c2 <_printf_i+0x212>
 80082ea:	2500      	movs	r5, #0
 80082ec:	f104 0619 	add.w	r6, r4, #25
 80082f0:	e7f5      	b.n	80082de <_printf_i+0x22e>
 80082f2:	bf00      	nop
 80082f4:	0800c672 	.word	0x0800c672
 80082f8:	0800c683 	.word	0x0800c683

080082fc <_scanf_float>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	b087      	sub	sp, #28
 8008302:	4617      	mov	r7, r2
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	688b      	ldr	r3, [r1, #8]
 8008308:	1e5a      	subs	r2, r3, #1
 800830a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800830e:	bf83      	ittte	hi
 8008310:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008314:	195b      	addhi	r3, r3, r5
 8008316:	9302      	strhi	r3, [sp, #8]
 8008318:	2300      	movls	r3, #0
 800831a:	bf86      	itte	hi
 800831c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008320:	608b      	strhi	r3, [r1, #8]
 8008322:	9302      	strls	r3, [sp, #8]
 8008324:	680b      	ldr	r3, [r1, #0]
 8008326:	468b      	mov	fp, r1
 8008328:	2500      	movs	r5, #0
 800832a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800832e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008332:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008336:	4680      	mov	r8, r0
 8008338:	460c      	mov	r4, r1
 800833a:	465e      	mov	r6, fp
 800833c:	46aa      	mov	sl, r5
 800833e:	46a9      	mov	r9, r5
 8008340:	9501      	str	r5, [sp, #4]
 8008342:	68a2      	ldr	r2, [r4, #8]
 8008344:	b152      	cbz	r2, 800835c <_scanf_float+0x60>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b4e      	cmp	r3, #78	; 0x4e
 800834c:	d864      	bhi.n	8008418 <_scanf_float+0x11c>
 800834e:	2b40      	cmp	r3, #64	; 0x40
 8008350:	d83c      	bhi.n	80083cc <_scanf_float+0xd0>
 8008352:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008356:	b2c8      	uxtb	r0, r1
 8008358:	280e      	cmp	r0, #14
 800835a:	d93a      	bls.n	80083d2 <_scanf_float+0xd6>
 800835c:	f1b9 0f00 	cmp.w	r9, #0
 8008360:	d003      	beq.n	800836a <_scanf_float+0x6e>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800836e:	f1ba 0f01 	cmp.w	sl, #1
 8008372:	f200 8113 	bhi.w	800859c <_scanf_float+0x2a0>
 8008376:	455e      	cmp	r6, fp
 8008378:	f200 8105 	bhi.w	8008586 <_scanf_float+0x28a>
 800837c:	2501      	movs	r5, #1
 800837e:	4628      	mov	r0, r5
 8008380:	b007      	add	sp, #28
 8008382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008386:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800838a:	2a0d      	cmp	r2, #13
 800838c:	d8e6      	bhi.n	800835c <_scanf_float+0x60>
 800838e:	a101      	add	r1, pc, #4	; (adr r1, 8008394 <_scanf_float+0x98>)
 8008390:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008394:	080084d3 	.word	0x080084d3
 8008398:	0800835d 	.word	0x0800835d
 800839c:	0800835d 	.word	0x0800835d
 80083a0:	0800835d 	.word	0x0800835d
 80083a4:	08008533 	.word	0x08008533
 80083a8:	0800850b 	.word	0x0800850b
 80083ac:	0800835d 	.word	0x0800835d
 80083b0:	0800835d 	.word	0x0800835d
 80083b4:	080084e1 	.word	0x080084e1
 80083b8:	0800835d 	.word	0x0800835d
 80083bc:	0800835d 	.word	0x0800835d
 80083c0:	0800835d 	.word	0x0800835d
 80083c4:	0800835d 	.word	0x0800835d
 80083c8:	08008499 	.word	0x08008499
 80083cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80083d0:	e7db      	b.n	800838a <_scanf_float+0x8e>
 80083d2:	290e      	cmp	r1, #14
 80083d4:	d8c2      	bhi.n	800835c <_scanf_float+0x60>
 80083d6:	a001      	add	r0, pc, #4	; (adr r0, 80083dc <_scanf_float+0xe0>)
 80083d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083dc:	0800848b 	.word	0x0800848b
 80083e0:	0800835d 	.word	0x0800835d
 80083e4:	0800848b 	.word	0x0800848b
 80083e8:	0800851f 	.word	0x0800851f
 80083ec:	0800835d 	.word	0x0800835d
 80083f0:	08008439 	.word	0x08008439
 80083f4:	08008475 	.word	0x08008475
 80083f8:	08008475 	.word	0x08008475
 80083fc:	08008475 	.word	0x08008475
 8008400:	08008475 	.word	0x08008475
 8008404:	08008475 	.word	0x08008475
 8008408:	08008475 	.word	0x08008475
 800840c:	08008475 	.word	0x08008475
 8008410:	08008475 	.word	0x08008475
 8008414:	08008475 	.word	0x08008475
 8008418:	2b6e      	cmp	r3, #110	; 0x6e
 800841a:	d809      	bhi.n	8008430 <_scanf_float+0x134>
 800841c:	2b60      	cmp	r3, #96	; 0x60
 800841e:	d8b2      	bhi.n	8008386 <_scanf_float+0x8a>
 8008420:	2b54      	cmp	r3, #84	; 0x54
 8008422:	d077      	beq.n	8008514 <_scanf_float+0x218>
 8008424:	2b59      	cmp	r3, #89	; 0x59
 8008426:	d199      	bne.n	800835c <_scanf_float+0x60>
 8008428:	2d07      	cmp	r5, #7
 800842a:	d197      	bne.n	800835c <_scanf_float+0x60>
 800842c:	2508      	movs	r5, #8
 800842e:	e029      	b.n	8008484 <_scanf_float+0x188>
 8008430:	2b74      	cmp	r3, #116	; 0x74
 8008432:	d06f      	beq.n	8008514 <_scanf_float+0x218>
 8008434:	2b79      	cmp	r3, #121	; 0x79
 8008436:	e7f6      	b.n	8008426 <_scanf_float+0x12a>
 8008438:	6821      	ldr	r1, [r4, #0]
 800843a:	05c8      	lsls	r0, r1, #23
 800843c:	d51a      	bpl.n	8008474 <_scanf_float+0x178>
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008444:	6021      	str	r1, [r4, #0]
 8008446:	f109 0901 	add.w	r9, r9, #1
 800844a:	b11b      	cbz	r3, 8008454 <_scanf_float+0x158>
 800844c:	3b01      	subs	r3, #1
 800844e:	3201      	adds	r2, #1
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	60a2      	str	r2, [r4, #8]
 8008454:	68a3      	ldr	r3, [r4, #8]
 8008456:	3b01      	subs	r3, #1
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	3301      	adds	r3, #1
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b01      	subs	r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	f340 8084 	ble.w	8008574 <_scanf_float+0x278>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	e766      	b.n	8008342 <_scanf_float+0x46>
 8008474:	eb1a 0f05 	cmn.w	sl, r5
 8008478:	f47f af70 	bne.w	800835c <_scanf_float+0x60>
 800847c:	6822      	ldr	r2, [r4, #0]
 800847e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008482:	6022      	str	r2, [r4, #0]
 8008484:	f806 3b01 	strb.w	r3, [r6], #1
 8008488:	e7e4      	b.n	8008454 <_scanf_float+0x158>
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	0610      	lsls	r0, r2, #24
 800848e:	f57f af65 	bpl.w	800835c <_scanf_float+0x60>
 8008492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008496:	e7f4      	b.n	8008482 <_scanf_float+0x186>
 8008498:	f1ba 0f00 	cmp.w	sl, #0
 800849c:	d10e      	bne.n	80084bc <_scanf_float+0x1c0>
 800849e:	f1b9 0f00 	cmp.w	r9, #0
 80084a2:	d10e      	bne.n	80084c2 <_scanf_float+0x1c6>
 80084a4:	6822      	ldr	r2, [r4, #0]
 80084a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084ae:	d108      	bne.n	80084c2 <_scanf_float+0x1c6>
 80084b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084b4:	6022      	str	r2, [r4, #0]
 80084b6:	f04f 0a01 	mov.w	sl, #1
 80084ba:	e7e3      	b.n	8008484 <_scanf_float+0x188>
 80084bc:	f1ba 0f02 	cmp.w	sl, #2
 80084c0:	d055      	beq.n	800856e <_scanf_float+0x272>
 80084c2:	2d01      	cmp	r5, #1
 80084c4:	d002      	beq.n	80084cc <_scanf_float+0x1d0>
 80084c6:	2d04      	cmp	r5, #4
 80084c8:	f47f af48 	bne.w	800835c <_scanf_float+0x60>
 80084cc:	3501      	adds	r5, #1
 80084ce:	b2ed      	uxtb	r5, r5
 80084d0:	e7d8      	b.n	8008484 <_scanf_float+0x188>
 80084d2:	f1ba 0f01 	cmp.w	sl, #1
 80084d6:	f47f af41 	bne.w	800835c <_scanf_float+0x60>
 80084da:	f04f 0a02 	mov.w	sl, #2
 80084de:	e7d1      	b.n	8008484 <_scanf_float+0x188>
 80084e0:	b97d      	cbnz	r5, 8008502 <_scanf_float+0x206>
 80084e2:	f1b9 0f00 	cmp.w	r9, #0
 80084e6:	f47f af3c 	bne.w	8008362 <_scanf_float+0x66>
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084f4:	f47f af39 	bne.w	800836a <_scanf_float+0x6e>
 80084f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084fc:	6022      	str	r2, [r4, #0]
 80084fe:	2501      	movs	r5, #1
 8008500:	e7c0      	b.n	8008484 <_scanf_float+0x188>
 8008502:	2d03      	cmp	r5, #3
 8008504:	d0e2      	beq.n	80084cc <_scanf_float+0x1d0>
 8008506:	2d05      	cmp	r5, #5
 8008508:	e7de      	b.n	80084c8 <_scanf_float+0x1cc>
 800850a:	2d02      	cmp	r5, #2
 800850c:	f47f af26 	bne.w	800835c <_scanf_float+0x60>
 8008510:	2503      	movs	r5, #3
 8008512:	e7b7      	b.n	8008484 <_scanf_float+0x188>
 8008514:	2d06      	cmp	r5, #6
 8008516:	f47f af21 	bne.w	800835c <_scanf_float+0x60>
 800851a:	2507      	movs	r5, #7
 800851c:	e7b2      	b.n	8008484 <_scanf_float+0x188>
 800851e:	6822      	ldr	r2, [r4, #0]
 8008520:	0591      	lsls	r1, r2, #22
 8008522:	f57f af1b 	bpl.w	800835c <_scanf_float+0x60>
 8008526:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800852a:	6022      	str	r2, [r4, #0]
 800852c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008530:	e7a8      	b.n	8008484 <_scanf_float+0x188>
 8008532:	6822      	ldr	r2, [r4, #0]
 8008534:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800853c:	d006      	beq.n	800854c <_scanf_float+0x250>
 800853e:	0550      	lsls	r0, r2, #21
 8008540:	f57f af0c 	bpl.w	800835c <_scanf_float+0x60>
 8008544:	f1b9 0f00 	cmp.w	r9, #0
 8008548:	f43f af0f 	beq.w	800836a <_scanf_float+0x6e>
 800854c:	0591      	lsls	r1, r2, #22
 800854e:	bf58      	it	pl
 8008550:	9901      	ldrpl	r1, [sp, #4]
 8008552:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008556:	bf58      	it	pl
 8008558:	eba9 0101 	subpl.w	r1, r9, r1
 800855c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008560:	bf58      	it	pl
 8008562:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008566:	6022      	str	r2, [r4, #0]
 8008568:	f04f 0900 	mov.w	r9, #0
 800856c:	e78a      	b.n	8008484 <_scanf_float+0x188>
 800856e:	f04f 0a03 	mov.w	sl, #3
 8008572:	e787      	b.n	8008484 <_scanf_float+0x188>
 8008574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008578:	4639      	mov	r1, r7
 800857a:	4640      	mov	r0, r8
 800857c:	4798      	blx	r3
 800857e:	2800      	cmp	r0, #0
 8008580:	f43f aedf 	beq.w	8008342 <_scanf_float+0x46>
 8008584:	e6ea      	b.n	800835c <_scanf_float+0x60>
 8008586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800858a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800858e:	463a      	mov	r2, r7
 8008590:	4640      	mov	r0, r8
 8008592:	4798      	blx	r3
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	3b01      	subs	r3, #1
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	e6ec      	b.n	8008376 <_scanf_float+0x7a>
 800859c:	1e6b      	subs	r3, r5, #1
 800859e:	2b06      	cmp	r3, #6
 80085a0:	d825      	bhi.n	80085ee <_scanf_float+0x2f2>
 80085a2:	2d02      	cmp	r5, #2
 80085a4:	d836      	bhi.n	8008614 <_scanf_float+0x318>
 80085a6:	455e      	cmp	r6, fp
 80085a8:	f67f aee8 	bls.w	800837c <_scanf_float+0x80>
 80085ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085b4:	463a      	mov	r2, r7
 80085b6:	4640      	mov	r0, r8
 80085b8:	4798      	blx	r3
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	3b01      	subs	r3, #1
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	e7f1      	b.n	80085a6 <_scanf_float+0x2aa>
 80085c2:	9802      	ldr	r0, [sp, #8]
 80085c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80085cc:	9002      	str	r0, [sp, #8]
 80085ce:	463a      	mov	r2, r7
 80085d0:	4640      	mov	r0, r8
 80085d2:	4798      	blx	r3
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80085de:	fa5f fa8a 	uxtb.w	sl, sl
 80085e2:	f1ba 0f02 	cmp.w	sl, #2
 80085e6:	d1ec      	bne.n	80085c2 <_scanf_float+0x2c6>
 80085e8:	3d03      	subs	r5, #3
 80085ea:	b2ed      	uxtb	r5, r5
 80085ec:	1b76      	subs	r6, r6, r5
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	05da      	lsls	r2, r3, #23
 80085f2:	d52f      	bpl.n	8008654 <_scanf_float+0x358>
 80085f4:	055b      	lsls	r3, r3, #21
 80085f6:	d510      	bpl.n	800861a <_scanf_float+0x31e>
 80085f8:	455e      	cmp	r6, fp
 80085fa:	f67f aebf 	bls.w	800837c <_scanf_float+0x80>
 80085fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008602:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008606:	463a      	mov	r2, r7
 8008608:	4640      	mov	r0, r8
 800860a:	4798      	blx	r3
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	3b01      	subs	r3, #1
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	e7f1      	b.n	80085f8 <_scanf_float+0x2fc>
 8008614:	46aa      	mov	sl, r5
 8008616:	9602      	str	r6, [sp, #8]
 8008618:	e7df      	b.n	80085da <_scanf_float+0x2de>
 800861a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	2965      	cmp	r1, #101	; 0x65
 8008622:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008626:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	d00c      	beq.n	8008648 <_scanf_float+0x34c>
 800862e:	2945      	cmp	r1, #69	; 0x45
 8008630:	d00a      	beq.n	8008648 <_scanf_float+0x34c>
 8008632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008636:	463a      	mov	r2, r7
 8008638:	4640      	mov	r0, r8
 800863a:	4798      	blx	r3
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008642:	3b01      	subs	r3, #1
 8008644:	1eb5      	subs	r5, r6, #2
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800864c:	463a      	mov	r2, r7
 800864e:	4640      	mov	r0, r8
 8008650:	4798      	blx	r3
 8008652:	462e      	mov	r6, r5
 8008654:	6825      	ldr	r5, [r4, #0]
 8008656:	f015 0510 	ands.w	r5, r5, #16
 800865a:	d158      	bne.n	800870e <_scanf_float+0x412>
 800865c:	7035      	strb	r5, [r6, #0]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008668:	d11c      	bne.n	80086a4 <_scanf_float+0x3a8>
 800866a:	9b01      	ldr	r3, [sp, #4]
 800866c:	454b      	cmp	r3, r9
 800866e:	eba3 0209 	sub.w	r2, r3, r9
 8008672:	d124      	bne.n	80086be <_scanf_float+0x3c2>
 8008674:	2200      	movs	r2, #0
 8008676:	4659      	mov	r1, fp
 8008678:	4640      	mov	r0, r8
 800867a:	f000 ff2b 	bl	80094d4 <_strtod_r>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	6821      	ldr	r1, [r4, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f011 0f02 	tst.w	r1, #2
 8008688:	ec57 6b10 	vmov	r6, r7, d0
 800868c:	f103 0204 	add.w	r2, r3, #4
 8008690:	d020      	beq.n	80086d4 <_scanf_float+0x3d8>
 8008692:	9903      	ldr	r1, [sp, #12]
 8008694:	600a      	str	r2, [r1, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	e9c3 6700 	strd	r6, r7, [r3]
 800869c:	68e3      	ldr	r3, [r4, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60e3      	str	r3, [r4, #12]
 80086a2:	e66c      	b.n	800837e <_scanf_float+0x82>
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0e4      	beq.n	8008674 <_scanf_float+0x378>
 80086aa:	9905      	ldr	r1, [sp, #20]
 80086ac:	230a      	movs	r3, #10
 80086ae:	462a      	mov	r2, r5
 80086b0:	3101      	adds	r1, #1
 80086b2:	4640      	mov	r0, r8
 80086b4:	f000 ff98 	bl	80095e8 <_strtol_r>
 80086b8:	9b04      	ldr	r3, [sp, #16]
 80086ba:	9e05      	ldr	r6, [sp, #20]
 80086bc:	1ac2      	subs	r2, r0, r3
 80086be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80086c2:	429e      	cmp	r6, r3
 80086c4:	bf28      	it	cs
 80086c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80086ca:	4912      	ldr	r1, [pc, #72]	; (8008714 <_scanf_float+0x418>)
 80086cc:	4630      	mov	r0, r6
 80086ce:	f000 f8b9 	bl	8008844 <siprintf>
 80086d2:	e7cf      	b.n	8008674 <_scanf_float+0x378>
 80086d4:	f011 0f04 	tst.w	r1, #4
 80086d8:	9903      	ldr	r1, [sp, #12]
 80086da:	600a      	str	r2, [r1, #0]
 80086dc:	d1db      	bne.n	8008696 <_scanf_float+0x39a>
 80086de:	f8d3 8000 	ldr.w	r8, [r3]
 80086e2:	ee10 2a10 	vmov	r2, s0
 80086e6:	ee10 0a10 	vmov	r0, s0
 80086ea:	463b      	mov	r3, r7
 80086ec:	4639      	mov	r1, r7
 80086ee:	f7f8 fa2d 	bl	8000b4c <__aeabi_dcmpun>
 80086f2:	b128      	cbz	r0, 8008700 <_scanf_float+0x404>
 80086f4:	4808      	ldr	r0, [pc, #32]	; (8008718 <_scanf_float+0x41c>)
 80086f6:	f000 f89f 	bl	8008838 <nanf>
 80086fa:	ed88 0a00 	vstr	s0, [r8]
 80086fe:	e7cd      	b.n	800869c <_scanf_float+0x3a0>
 8008700:	4630      	mov	r0, r6
 8008702:	4639      	mov	r1, r7
 8008704:	f7f8 fa80 	bl	8000c08 <__aeabi_d2f>
 8008708:	f8c8 0000 	str.w	r0, [r8]
 800870c:	e7c6      	b.n	800869c <_scanf_float+0x3a0>
 800870e:	2500      	movs	r5, #0
 8008710:	e635      	b.n	800837e <_scanf_float+0x82>
 8008712:	bf00      	nop
 8008714:	0800c694 	.word	0x0800c694
 8008718:	0800cb10 	.word	0x0800cb10

0800871c <iprintf>:
 800871c:	b40f      	push	{r0, r1, r2, r3}
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <iprintf+0x2c>)
 8008720:	b513      	push	{r0, r1, r4, lr}
 8008722:	681c      	ldr	r4, [r3, #0]
 8008724:	b124      	cbz	r4, 8008730 <iprintf+0x14>
 8008726:	69a3      	ldr	r3, [r4, #24]
 8008728:	b913      	cbnz	r3, 8008730 <iprintf+0x14>
 800872a:	4620      	mov	r0, r4
 800872c:	f001 ffb2 	bl	800a694 <__sinit>
 8008730:	ab05      	add	r3, sp, #20
 8008732:	9a04      	ldr	r2, [sp, #16]
 8008734:	68a1      	ldr	r1, [r4, #8]
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	4620      	mov	r0, r4
 800873a:	f003 fb45 	bl	800bdc8 <_vfiprintf_r>
 800873e:	b002      	add	sp, #8
 8008740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008744:	b004      	add	sp, #16
 8008746:	4770      	bx	lr
 8008748:	2000000c 	.word	0x2000000c

0800874c <_puts_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	460e      	mov	r6, r1
 8008750:	4605      	mov	r5, r0
 8008752:	b118      	cbz	r0, 800875c <_puts_r+0x10>
 8008754:	6983      	ldr	r3, [r0, #24]
 8008756:	b90b      	cbnz	r3, 800875c <_puts_r+0x10>
 8008758:	f001 ff9c 	bl	800a694 <__sinit>
 800875c:	69ab      	ldr	r3, [r5, #24]
 800875e:	68ac      	ldr	r4, [r5, #8]
 8008760:	b913      	cbnz	r3, 8008768 <_puts_r+0x1c>
 8008762:	4628      	mov	r0, r5
 8008764:	f001 ff96 	bl	800a694 <__sinit>
 8008768:	4b2c      	ldr	r3, [pc, #176]	; (800881c <_puts_r+0xd0>)
 800876a:	429c      	cmp	r4, r3
 800876c:	d120      	bne.n	80087b0 <_puts_r+0x64>
 800876e:	686c      	ldr	r4, [r5, #4]
 8008770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d405      	bmi.n	8008782 <_puts_r+0x36>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	0598      	lsls	r0, r3, #22
 800877a:	d402      	bmi.n	8008782 <_puts_r+0x36>
 800877c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877e:	f002 fb9a 	bl	800aeb6 <__retarget_lock_acquire_recursive>
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	0719      	lsls	r1, r3, #28
 8008786:	d51d      	bpl.n	80087c4 <_puts_r+0x78>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	b1db      	cbz	r3, 80087c4 <_puts_r+0x78>
 800878c:	3e01      	subs	r6, #1
 800878e:	68a3      	ldr	r3, [r4, #8]
 8008790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008794:	3b01      	subs	r3, #1
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	bb39      	cbnz	r1, 80087ea <_puts_r+0x9e>
 800879a:	2b00      	cmp	r3, #0
 800879c:	da38      	bge.n	8008810 <_puts_r+0xc4>
 800879e:	4622      	mov	r2, r4
 80087a0:	210a      	movs	r1, #10
 80087a2:	4628      	mov	r0, r5
 80087a4:	f000 ff22 	bl	80095ec <__swbuf_r>
 80087a8:	3001      	adds	r0, #1
 80087aa:	d011      	beq.n	80087d0 <_puts_r+0x84>
 80087ac:	250a      	movs	r5, #10
 80087ae:	e011      	b.n	80087d4 <_puts_r+0x88>
 80087b0:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <_puts_r+0xd4>)
 80087b2:	429c      	cmp	r4, r3
 80087b4:	d101      	bne.n	80087ba <_puts_r+0x6e>
 80087b6:	68ac      	ldr	r4, [r5, #8]
 80087b8:	e7da      	b.n	8008770 <_puts_r+0x24>
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <_puts_r+0xd8>)
 80087bc:	429c      	cmp	r4, r3
 80087be:	bf08      	it	eq
 80087c0:	68ec      	ldreq	r4, [r5, #12]
 80087c2:	e7d5      	b.n	8008770 <_puts_r+0x24>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 ff62 	bl	8009690 <__swsetup_r>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d0dd      	beq.n	800878c <_puts_r+0x40>
 80087d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80087d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087d6:	07da      	lsls	r2, r3, #31
 80087d8:	d405      	bmi.n	80087e6 <_puts_r+0x9a>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	059b      	lsls	r3, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_puts_r+0x9a>
 80087e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e2:	f002 fb69 	bl	800aeb8 <__retarget_lock_release_recursive>
 80087e6:	4628      	mov	r0, r5
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da04      	bge.n	80087f8 <_puts_r+0xac>
 80087ee:	69a2      	ldr	r2, [r4, #24]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	dc06      	bgt.n	8008802 <_puts_r+0xb6>
 80087f4:	290a      	cmp	r1, #10
 80087f6:	d004      	beq.n	8008802 <_puts_r+0xb6>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	7019      	strb	r1, [r3, #0]
 8008800:	e7c5      	b.n	800878e <_puts_r+0x42>
 8008802:	4622      	mov	r2, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f000 fef1 	bl	80095ec <__swbuf_r>
 800880a:	3001      	adds	r0, #1
 800880c:	d1bf      	bne.n	800878e <_puts_r+0x42>
 800880e:	e7df      	b.n	80087d0 <_puts_r+0x84>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	250a      	movs	r5, #10
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	701d      	strb	r5, [r3, #0]
 800881a:	e7db      	b.n	80087d4 <_puts_r+0x88>
 800881c:	0800c8a8 	.word	0x0800c8a8
 8008820:	0800c8c8 	.word	0x0800c8c8
 8008824:	0800c888 	.word	0x0800c888

08008828 <puts>:
 8008828:	4b02      	ldr	r3, [pc, #8]	; (8008834 <puts+0xc>)
 800882a:	4601      	mov	r1, r0
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	f7ff bf8d 	b.w	800874c <_puts_r>
 8008832:	bf00      	nop
 8008834:	2000000c 	.word	0x2000000c

08008838 <nanf>:
 8008838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008840 <nanf+0x8>
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	7fc00000 	.word	0x7fc00000

08008844 <siprintf>:
 8008844:	b40e      	push	{r1, r2, r3}
 8008846:	b500      	push	{lr}
 8008848:	b09c      	sub	sp, #112	; 0x70
 800884a:	ab1d      	add	r3, sp, #116	; 0x74
 800884c:	9002      	str	r0, [sp, #8]
 800884e:	9006      	str	r0, [sp, #24]
 8008850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008854:	4809      	ldr	r0, [pc, #36]	; (800887c <siprintf+0x38>)
 8008856:	9107      	str	r1, [sp, #28]
 8008858:	9104      	str	r1, [sp, #16]
 800885a:	4909      	ldr	r1, [pc, #36]	; (8008880 <siprintf+0x3c>)
 800885c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008860:	9105      	str	r1, [sp, #20]
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	a902      	add	r1, sp, #8
 8008868:	f003 f984 	bl	800bb74 <_svfiprintf_r>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	b01c      	add	sp, #112	; 0x70
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	2000000c 	.word	0x2000000c
 8008880:	ffff0208 	.word	0xffff0208

08008884 <sulp>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	ec45 4b10 	vmov	d0, r4, r5
 800888e:	4616      	mov	r6, r2
 8008890:	f002 ff0c 	bl	800b6ac <__ulp>
 8008894:	ec51 0b10 	vmov	r0, r1, d0
 8008898:	b17e      	cbz	r6, 80088ba <sulp+0x36>
 800889a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800889e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dd09      	ble.n	80088ba <sulp+0x36>
 80088a6:	051b      	lsls	r3, r3, #20
 80088a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088ac:	2400      	movs	r4, #0
 80088ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088b2:	4622      	mov	r2, r4
 80088b4:	462b      	mov	r3, r5
 80088b6:	f7f7 feaf 	bl	8000618 <__aeabi_dmul>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	0000      	movs	r0, r0
	...

080088c0 <_strtod_l>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	b0a3      	sub	sp, #140	; 0x8c
 80088c6:	461f      	mov	r7, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	931e      	str	r3, [sp, #120]	; 0x78
 80088cc:	4ba4      	ldr	r3, [pc, #656]	; (8008b60 <_strtod_l+0x2a0>)
 80088ce:	9219      	str	r2, [sp, #100]	; 0x64
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	4604      	mov	r4, r0
 80088d6:	4618      	mov	r0, r3
 80088d8:	4688      	mov	r8, r1
 80088da:	f7f7 fc89 	bl	80001f0 <strlen>
 80088de:	f04f 0a00 	mov.w	sl, #0
 80088e2:	4605      	mov	r5, r0
 80088e4:	f04f 0b00 	mov.w	fp, #0
 80088e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80088ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	2a2b      	cmp	r2, #43	; 0x2b
 80088f2:	d04c      	beq.n	800898e <_strtod_l+0xce>
 80088f4:	d839      	bhi.n	800896a <_strtod_l+0xaa>
 80088f6:	2a0d      	cmp	r2, #13
 80088f8:	d832      	bhi.n	8008960 <_strtod_l+0xa0>
 80088fa:	2a08      	cmp	r2, #8
 80088fc:	d832      	bhi.n	8008964 <_strtod_l+0xa4>
 80088fe:	2a00      	cmp	r2, #0
 8008900:	d03c      	beq.n	800897c <_strtod_l+0xbc>
 8008902:	2300      	movs	r3, #0
 8008904:	930e      	str	r3, [sp, #56]	; 0x38
 8008906:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008908:	7833      	ldrb	r3, [r6, #0]
 800890a:	2b30      	cmp	r3, #48	; 0x30
 800890c:	f040 80b4 	bne.w	8008a78 <_strtod_l+0x1b8>
 8008910:	7873      	ldrb	r3, [r6, #1]
 8008912:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008916:	2b58      	cmp	r3, #88	; 0x58
 8008918:	d16c      	bne.n	80089f4 <_strtod_l+0x134>
 800891a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	ab1e      	add	r3, sp, #120	; 0x78
 8008920:	9702      	str	r7, [sp, #8]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4a8f      	ldr	r2, [pc, #572]	; (8008b64 <_strtod_l+0x2a4>)
 8008926:	ab1f      	add	r3, sp, #124	; 0x7c
 8008928:	a91d      	add	r1, sp, #116	; 0x74
 800892a:	4620      	mov	r0, r4
 800892c:	f001 ffb6 	bl	800a89c <__gethex>
 8008930:	f010 0707 	ands.w	r7, r0, #7
 8008934:	4605      	mov	r5, r0
 8008936:	d005      	beq.n	8008944 <_strtod_l+0x84>
 8008938:	2f06      	cmp	r7, #6
 800893a:	d12a      	bne.n	8008992 <_strtod_l+0xd2>
 800893c:	3601      	adds	r6, #1
 800893e:	2300      	movs	r3, #0
 8008940:	961d      	str	r6, [sp, #116]	; 0x74
 8008942:	930e      	str	r3, [sp, #56]	; 0x38
 8008944:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 8596 	bne.w	8009478 <_strtod_l+0xbb8>
 800894c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800894e:	b1db      	cbz	r3, 8008988 <_strtod_l+0xc8>
 8008950:	4652      	mov	r2, sl
 8008952:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008956:	ec43 2b10 	vmov	d0, r2, r3
 800895a:	b023      	add	sp, #140	; 0x8c
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008960:	2a20      	cmp	r2, #32
 8008962:	d1ce      	bne.n	8008902 <_strtod_l+0x42>
 8008964:	3301      	adds	r3, #1
 8008966:	931d      	str	r3, [sp, #116]	; 0x74
 8008968:	e7c0      	b.n	80088ec <_strtod_l+0x2c>
 800896a:	2a2d      	cmp	r2, #45	; 0x2d
 800896c:	d1c9      	bne.n	8008902 <_strtod_l+0x42>
 800896e:	2201      	movs	r2, #1
 8008970:	920e      	str	r2, [sp, #56]	; 0x38
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	921d      	str	r2, [sp, #116]	; 0x74
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1c4      	bne.n	8008906 <_strtod_l+0x46>
 800897c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800897e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008982:	2b00      	cmp	r3, #0
 8008984:	f040 8576 	bne.w	8009474 <_strtod_l+0xbb4>
 8008988:	4652      	mov	r2, sl
 800898a:	465b      	mov	r3, fp
 800898c:	e7e3      	b.n	8008956 <_strtod_l+0x96>
 800898e:	2200      	movs	r2, #0
 8008990:	e7ee      	b.n	8008970 <_strtod_l+0xb0>
 8008992:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008994:	b13a      	cbz	r2, 80089a6 <_strtod_l+0xe6>
 8008996:	2135      	movs	r1, #53	; 0x35
 8008998:	a820      	add	r0, sp, #128	; 0x80
 800899a:	f002 ff92 	bl	800b8c2 <__copybits>
 800899e:	991e      	ldr	r1, [sp, #120]	; 0x78
 80089a0:	4620      	mov	r0, r4
 80089a2:	f002 fb57 	bl	800b054 <_Bfree>
 80089a6:	3f01      	subs	r7, #1
 80089a8:	2f05      	cmp	r7, #5
 80089aa:	d807      	bhi.n	80089bc <_strtod_l+0xfc>
 80089ac:	e8df f007 	tbb	[pc, r7]
 80089b0:	1d180b0e 	.word	0x1d180b0e
 80089b4:	030e      	.short	0x030e
 80089b6:	f04f 0b00 	mov.w	fp, #0
 80089ba:	46da      	mov	sl, fp
 80089bc:	0728      	lsls	r0, r5, #28
 80089be:	d5c1      	bpl.n	8008944 <_strtod_l+0x84>
 80089c0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80089c4:	e7be      	b.n	8008944 <_strtod_l+0x84>
 80089c6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80089ca:	e7f7      	b.n	80089bc <_strtod_l+0xfc>
 80089cc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80089d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80089d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089de:	e7ed      	b.n	80089bc <_strtod_l+0xfc>
 80089e0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008b68 <_strtod_l+0x2a8>
 80089e4:	f04f 0a00 	mov.w	sl, #0
 80089e8:	e7e8      	b.n	80089bc <_strtod_l+0xfc>
 80089ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80089ee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80089f2:	e7e3      	b.n	80089bc <_strtod_l+0xfc>
 80089f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	921d      	str	r2, [sp, #116]	; 0x74
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b30      	cmp	r3, #48	; 0x30
 80089fe:	d0f9      	beq.n	80089f4 <_strtod_l+0x134>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d09f      	beq.n	8008944 <_strtod_l+0x84>
 8008a04:	2301      	movs	r3, #1
 8008a06:	f04f 0900 	mov.w	r9, #0
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a14:	464f      	mov	r7, r9
 8008a16:	220a      	movs	r2, #10
 8008a18:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008a1a:	7806      	ldrb	r6, [r0, #0]
 8008a1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a20:	b2d9      	uxtb	r1, r3
 8008a22:	2909      	cmp	r1, #9
 8008a24:	d92a      	bls.n	8008a7c <_strtod_l+0x1bc>
 8008a26:	9907      	ldr	r1, [sp, #28]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	f003 fb58 	bl	800c0de <strncmp>
 8008a2e:	b398      	cbz	r0, 8008a98 <_strtod_l+0x1d8>
 8008a30:	2000      	movs	r0, #0
 8008a32:	4633      	mov	r3, r6
 8008a34:	463d      	mov	r5, r7
 8008a36:	9007      	str	r0, [sp, #28]
 8008a38:	4602      	mov	r2, r0
 8008a3a:	2b65      	cmp	r3, #101	; 0x65
 8008a3c:	d001      	beq.n	8008a42 <_strtod_l+0x182>
 8008a3e:	2b45      	cmp	r3, #69	; 0x45
 8008a40:	d118      	bne.n	8008a74 <_strtod_l+0x1b4>
 8008a42:	b91d      	cbnz	r5, 8008a4c <_strtod_l+0x18c>
 8008a44:	9b04      	ldr	r3, [sp, #16]
 8008a46:	4303      	orrs	r3, r0
 8008a48:	d098      	beq.n	800897c <_strtod_l+0xbc>
 8008a4a:	2500      	movs	r5, #0
 8008a4c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008a50:	f108 0301 	add.w	r3, r8, #1
 8008a54:	931d      	str	r3, [sp, #116]	; 0x74
 8008a56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008a5a:	2b2b      	cmp	r3, #43	; 0x2b
 8008a5c:	d075      	beq.n	8008b4a <_strtod_l+0x28a>
 8008a5e:	2b2d      	cmp	r3, #45	; 0x2d
 8008a60:	d07b      	beq.n	8008b5a <_strtod_l+0x29a>
 8008a62:	f04f 0c00 	mov.w	ip, #0
 8008a66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008a6a:	2909      	cmp	r1, #9
 8008a6c:	f240 8082 	bls.w	8008b74 <_strtod_l+0x2b4>
 8008a70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008a74:	2600      	movs	r6, #0
 8008a76:	e09d      	b.n	8008bb4 <_strtod_l+0x2f4>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e7c4      	b.n	8008a06 <_strtod_l+0x146>
 8008a7c:	2f08      	cmp	r7, #8
 8008a7e:	bfd8      	it	le
 8008a80:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a82:	f100 0001 	add.w	r0, r0, #1
 8008a86:	bfda      	itte	le
 8008a88:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a8c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008a8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008a92:	3701      	adds	r7, #1
 8008a94:	901d      	str	r0, [sp, #116]	; 0x74
 8008a96:	e7bf      	b.n	8008a18 <_strtod_l+0x158>
 8008a98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a9a:	195a      	adds	r2, r3, r5
 8008a9c:	921d      	str	r2, [sp, #116]	; 0x74
 8008a9e:	5d5b      	ldrb	r3, [r3, r5]
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	d037      	beq.n	8008b14 <_strtod_l+0x254>
 8008aa4:	9007      	str	r0, [sp, #28]
 8008aa6:	463d      	mov	r5, r7
 8008aa8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008aac:	2a09      	cmp	r2, #9
 8008aae:	d912      	bls.n	8008ad6 <_strtod_l+0x216>
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	e7c2      	b.n	8008a3a <_strtod_l+0x17a>
 8008ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	921d      	str	r2, [sp, #116]	; 0x74
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	3001      	adds	r0, #1
 8008abe:	2b30      	cmp	r3, #48	; 0x30
 8008ac0:	d0f8      	beq.n	8008ab4 <_strtod_l+0x1f4>
 8008ac2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008ac6:	2a08      	cmp	r2, #8
 8008ac8:	f200 84db 	bhi.w	8009482 <_strtod_l+0xbc2>
 8008acc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008ace:	9007      	str	r0, [sp, #28]
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	920a      	str	r2, [sp, #40]	; 0x28
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	3b30      	subs	r3, #48	; 0x30
 8008ad8:	f100 0201 	add.w	r2, r0, #1
 8008adc:	d014      	beq.n	8008b08 <_strtod_l+0x248>
 8008ade:	9907      	ldr	r1, [sp, #28]
 8008ae0:	4411      	add	r1, r2
 8008ae2:	9107      	str	r1, [sp, #28]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	eb00 0e05 	add.w	lr, r0, r5
 8008aea:	210a      	movs	r1, #10
 8008aec:	4572      	cmp	r2, lr
 8008aee:	d113      	bne.n	8008b18 <_strtod_l+0x258>
 8008af0:	182a      	adds	r2, r5, r0
 8008af2:	2a08      	cmp	r2, #8
 8008af4:	f105 0501 	add.w	r5, r5, #1
 8008af8:	4405      	add	r5, r0
 8008afa:	dc1c      	bgt.n	8008b36 <_strtod_l+0x276>
 8008afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008afe:	220a      	movs	r2, #10
 8008b00:	fb02 3301 	mla	r3, r2, r1, r3
 8008b04:	9309      	str	r3, [sp, #36]	; 0x24
 8008b06:	2200      	movs	r2, #0
 8008b08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b0a:	1c59      	adds	r1, r3, #1
 8008b0c:	911d      	str	r1, [sp, #116]	; 0x74
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	4610      	mov	r0, r2
 8008b12:	e7c9      	b.n	8008aa8 <_strtod_l+0x1e8>
 8008b14:	4638      	mov	r0, r7
 8008b16:	e7d2      	b.n	8008abe <_strtod_l+0x1fe>
 8008b18:	2a08      	cmp	r2, #8
 8008b1a:	dc04      	bgt.n	8008b26 <_strtod_l+0x266>
 8008b1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b1e:	434e      	muls	r6, r1
 8008b20:	9609      	str	r6, [sp, #36]	; 0x24
 8008b22:	3201      	adds	r2, #1
 8008b24:	e7e2      	b.n	8008aec <_strtod_l+0x22c>
 8008b26:	f102 0c01 	add.w	ip, r2, #1
 8008b2a:	f1bc 0f10 	cmp.w	ip, #16
 8008b2e:	bfd8      	it	le
 8008b30:	fb01 f909 	mulle.w	r9, r1, r9
 8008b34:	e7f5      	b.n	8008b22 <_strtod_l+0x262>
 8008b36:	2d10      	cmp	r5, #16
 8008b38:	bfdc      	itt	le
 8008b3a:	220a      	movle	r2, #10
 8008b3c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008b40:	e7e1      	b.n	8008b06 <_strtod_l+0x246>
 8008b42:	2300      	movs	r3, #0
 8008b44:	9307      	str	r3, [sp, #28]
 8008b46:	2201      	movs	r2, #1
 8008b48:	e77c      	b.n	8008a44 <_strtod_l+0x184>
 8008b4a:	f04f 0c00 	mov.w	ip, #0
 8008b4e:	f108 0302 	add.w	r3, r8, #2
 8008b52:	931d      	str	r3, [sp, #116]	; 0x74
 8008b54:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008b58:	e785      	b.n	8008a66 <_strtod_l+0x1a6>
 8008b5a:	f04f 0c01 	mov.w	ip, #1
 8008b5e:	e7f6      	b.n	8008b4e <_strtod_l+0x28e>
 8008b60:	0800c954 	.word	0x0800c954
 8008b64:	0800c69c 	.word	0x0800c69c
 8008b68:	7ff00000 	.word	0x7ff00000
 8008b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b6e:	1c59      	adds	r1, r3, #1
 8008b70:	911d      	str	r1, [sp, #116]	; 0x74
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b30      	cmp	r3, #48	; 0x30
 8008b76:	d0f9      	beq.n	8008b6c <_strtod_l+0x2ac>
 8008b78:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008b7c:	2908      	cmp	r1, #8
 8008b7e:	f63f af79 	bhi.w	8008a74 <_strtod_l+0x1b4>
 8008b82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008b86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b88:	9308      	str	r3, [sp, #32]
 8008b8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b8c:	1c59      	adds	r1, r3, #1
 8008b8e:	911d      	str	r1, [sp, #116]	; 0x74
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008b96:	2e09      	cmp	r6, #9
 8008b98:	d937      	bls.n	8008c0a <_strtod_l+0x34a>
 8008b9a:	9e08      	ldr	r6, [sp, #32]
 8008b9c:	1b89      	subs	r1, r1, r6
 8008b9e:	2908      	cmp	r1, #8
 8008ba0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ba4:	dc02      	bgt.n	8008bac <_strtod_l+0x2ec>
 8008ba6:	4576      	cmp	r6, lr
 8008ba8:	bfa8      	it	ge
 8008baa:	4676      	movge	r6, lr
 8008bac:	f1bc 0f00 	cmp.w	ip, #0
 8008bb0:	d000      	beq.n	8008bb4 <_strtod_l+0x2f4>
 8008bb2:	4276      	negs	r6, r6
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	d14f      	bne.n	8008c58 <_strtod_l+0x398>
 8008bb8:	9904      	ldr	r1, [sp, #16]
 8008bba:	4301      	orrs	r1, r0
 8008bbc:	f47f aec2 	bne.w	8008944 <_strtod_l+0x84>
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	f47f aedb 	bne.w	800897c <_strtod_l+0xbc>
 8008bc6:	2b69      	cmp	r3, #105	; 0x69
 8008bc8:	d027      	beq.n	8008c1a <_strtod_l+0x35a>
 8008bca:	dc24      	bgt.n	8008c16 <_strtod_l+0x356>
 8008bcc:	2b49      	cmp	r3, #73	; 0x49
 8008bce:	d024      	beq.n	8008c1a <_strtod_l+0x35a>
 8008bd0:	2b4e      	cmp	r3, #78	; 0x4e
 8008bd2:	f47f aed3 	bne.w	800897c <_strtod_l+0xbc>
 8008bd6:	499e      	ldr	r1, [pc, #632]	; (8008e50 <_strtod_l+0x590>)
 8008bd8:	a81d      	add	r0, sp, #116	; 0x74
 8008bda:	f002 f8b7 	bl	800ad4c <__match>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f43f aecc 	beq.w	800897c <_strtod_l+0xbc>
 8008be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b28      	cmp	r3, #40	; 0x28
 8008bea:	d12d      	bne.n	8008c48 <_strtod_l+0x388>
 8008bec:	4999      	ldr	r1, [pc, #612]	; (8008e54 <_strtod_l+0x594>)
 8008bee:	aa20      	add	r2, sp, #128	; 0x80
 8008bf0:	a81d      	add	r0, sp, #116	; 0x74
 8008bf2:	f002 f8bf 	bl	800ad74 <__hexnan>
 8008bf6:	2805      	cmp	r0, #5
 8008bf8:	d126      	bne.n	8008c48 <_strtod_l+0x388>
 8008bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bfc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008c00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008c04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008c08:	e69c      	b.n	8008944 <_strtod_l+0x84>
 8008c0a:	210a      	movs	r1, #10
 8008c0c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008c10:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c14:	e7b9      	b.n	8008b8a <_strtod_l+0x2ca>
 8008c16:	2b6e      	cmp	r3, #110	; 0x6e
 8008c18:	e7db      	b.n	8008bd2 <_strtod_l+0x312>
 8008c1a:	498f      	ldr	r1, [pc, #572]	; (8008e58 <_strtod_l+0x598>)
 8008c1c:	a81d      	add	r0, sp, #116	; 0x74
 8008c1e:	f002 f895 	bl	800ad4c <__match>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f43f aeaa 	beq.w	800897c <_strtod_l+0xbc>
 8008c28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c2a:	498c      	ldr	r1, [pc, #560]	; (8008e5c <_strtod_l+0x59c>)
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	a81d      	add	r0, sp, #116	; 0x74
 8008c30:	931d      	str	r3, [sp, #116]	; 0x74
 8008c32:	f002 f88b 	bl	800ad4c <__match>
 8008c36:	b910      	cbnz	r0, 8008c3e <_strtod_l+0x37e>
 8008c38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	931d      	str	r3, [sp, #116]	; 0x74
 8008c3e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008e6c <_strtod_l+0x5ac>
 8008c42:	f04f 0a00 	mov.w	sl, #0
 8008c46:	e67d      	b.n	8008944 <_strtod_l+0x84>
 8008c48:	4885      	ldr	r0, [pc, #532]	; (8008e60 <_strtod_l+0x5a0>)
 8008c4a:	f003 f9ed 	bl	800c028 <nan>
 8008c4e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008c52:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008c56:	e675      	b.n	8008944 <_strtod_l+0x84>
 8008c58:	9b07      	ldr	r3, [sp, #28]
 8008c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c5c:	1af3      	subs	r3, r6, r3
 8008c5e:	2f00      	cmp	r7, #0
 8008c60:	bf08      	it	eq
 8008c62:	462f      	moveq	r7, r5
 8008c64:	2d10      	cmp	r5, #16
 8008c66:	9308      	str	r3, [sp, #32]
 8008c68:	46a8      	mov	r8, r5
 8008c6a:	bfa8      	it	ge
 8008c6c:	f04f 0810 	movge.w	r8, #16
 8008c70:	f7f7 fc58 	bl	8000524 <__aeabi_ui2d>
 8008c74:	2d09      	cmp	r5, #9
 8008c76:	4682      	mov	sl, r0
 8008c78:	468b      	mov	fp, r1
 8008c7a:	dd13      	ble.n	8008ca4 <_strtod_l+0x3e4>
 8008c7c:	4b79      	ldr	r3, [pc, #484]	; (8008e64 <_strtod_l+0x5a4>)
 8008c7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008c82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c86:	f7f7 fcc7 	bl	8000618 <__aeabi_dmul>
 8008c8a:	4682      	mov	sl, r0
 8008c8c:	4648      	mov	r0, r9
 8008c8e:	468b      	mov	fp, r1
 8008c90:	f7f7 fc48 	bl	8000524 <__aeabi_ui2d>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4650      	mov	r0, sl
 8008c9a:	4659      	mov	r1, fp
 8008c9c:	f7f7 fb06 	bl	80002ac <__adddf3>
 8008ca0:	4682      	mov	sl, r0
 8008ca2:	468b      	mov	fp, r1
 8008ca4:	2d0f      	cmp	r5, #15
 8008ca6:	dc38      	bgt.n	8008d1a <_strtod_l+0x45a>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f43f ae4a 	beq.w	8008944 <_strtod_l+0x84>
 8008cb0:	dd24      	ble.n	8008cfc <_strtod_l+0x43c>
 8008cb2:	2b16      	cmp	r3, #22
 8008cb4:	dc0b      	bgt.n	8008cce <_strtod_l+0x40e>
 8008cb6:	4d6b      	ldr	r5, [pc, #428]	; (8008e64 <_strtod_l+0x5a4>)
 8008cb8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008cbc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008cc0:	4652      	mov	r2, sl
 8008cc2:	465b      	mov	r3, fp
 8008cc4:	f7f7 fca8 	bl	8000618 <__aeabi_dmul>
 8008cc8:	4682      	mov	sl, r0
 8008cca:	468b      	mov	fp, r1
 8008ccc:	e63a      	b.n	8008944 <_strtod_l+0x84>
 8008cce:	9a08      	ldr	r2, [sp, #32]
 8008cd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	db20      	blt.n	8008d1a <_strtod_l+0x45a>
 8008cd8:	4c62      	ldr	r4, [pc, #392]	; (8008e64 <_strtod_l+0x5a4>)
 8008cda:	f1c5 050f 	rsb	r5, r5, #15
 8008cde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	465b      	mov	r3, fp
 8008ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cea:	f7f7 fc95 	bl	8000618 <__aeabi_dmul>
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	1b5d      	subs	r5, r3, r5
 8008cf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cfa:	e7e3      	b.n	8008cc4 <_strtod_l+0x404>
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	3316      	adds	r3, #22
 8008d00:	db0b      	blt.n	8008d1a <_strtod_l+0x45a>
 8008d02:	9b07      	ldr	r3, [sp, #28]
 8008d04:	4a57      	ldr	r2, [pc, #348]	; (8008e64 <_strtod_l+0x5a4>)
 8008d06:	1b9e      	subs	r6, r3, r6
 8008d08:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008d0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d10:	4650      	mov	r0, sl
 8008d12:	4659      	mov	r1, fp
 8008d14:	f7f7 fdaa 	bl	800086c <__aeabi_ddiv>
 8008d18:	e7d6      	b.n	8008cc8 <_strtod_l+0x408>
 8008d1a:	9b08      	ldr	r3, [sp, #32]
 8008d1c:	eba5 0808 	sub.w	r8, r5, r8
 8008d20:	4498      	add	r8, r3
 8008d22:	f1b8 0f00 	cmp.w	r8, #0
 8008d26:	dd71      	ble.n	8008e0c <_strtod_l+0x54c>
 8008d28:	f018 030f 	ands.w	r3, r8, #15
 8008d2c:	d00a      	beq.n	8008d44 <_strtod_l+0x484>
 8008d2e:	494d      	ldr	r1, [pc, #308]	; (8008e64 <_strtod_l+0x5a4>)
 8008d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d34:	4652      	mov	r2, sl
 8008d36:	465b      	mov	r3, fp
 8008d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d3c:	f7f7 fc6c 	bl	8000618 <__aeabi_dmul>
 8008d40:	4682      	mov	sl, r0
 8008d42:	468b      	mov	fp, r1
 8008d44:	f038 080f 	bics.w	r8, r8, #15
 8008d48:	d04d      	beq.n	8008de6 <_strtod_l+0x526>
 8008d4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008d4e:	dd22      	ble.n	8008d96 <_strtod_l+0x4d6>
 8008d50:	2500      	movs	r5, #0
 8008d52:	462e      	mov	r6, r5
 8008d54:	9509      	str	r5, [sp, #36]	; 0x24
 8008d56:	9507      	str	r5, [sp, #28]
 8008d58:	2322      	movs	r3, #34	; 0x22
 8008d5a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008e6c <_strtod_l+0x5ac>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	f04f 0a00 	mov.w	sl, #0
 8008d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f43f adec 	beq.w	8008944 <_strtod_l+0x84>
 8008d6c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f002 f970 	bl	800b054 <_Bfree>
 8008d74:	9907      	ldr	r1, [sp, #28]
 8008d76:	4620      	mov	r0, r4
 8008d78:	f002 f96c 	bl	800b054 <_Bfree>
 8008d7c:	4631      	mov	r1, r6
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f002 f968 	bl	800b054 <_Bfree>
 8008d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d86:	4620      	mov	r0, r4
 8008d88:	f002 f964 	bl	800b054 <_Bfree>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f002 f960 	bl	800b054 <_Bfree>
 8008d94:	e5d6      	b.n	8008944 <_strtod_l+0x84>
 8008d96:	2300      	movs	r3, #0
 8008d98:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	4659      	mov	r1, fp
 8008da0:	4699      	mov	r9, r3
 8008da2:	f1b8 0f01 	cmp.w	r8, #1
 8008da6:	dc21      	bgt.n	8008dec <_strtod_l+0x52c>
 8008da8:	b10b      	cbz	r3, 8008dae <_strtod_l+0x4ee>
 8008daa:	4682      	mov	sl, r0
 8008dac:	468b      	mov	fp, r1
 8008dae:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <_strtod_l+0x5a8>)
 8008db0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008db4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008db8:	4652      	mov	r2, sl
 8008dba:	465b      	mov	r3, fp
 8008dbc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008dc0:	f7f7 fc2a 	bl	8000618 <__aeabi_dmul>
 8008dc4:	4b29      	ldr	r3, [pc, #164]	; (8008e6c <_strtod_l+0x5ac>)
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	400b      	ands	r3, r1
 8008dca:	4929      	ldr	r1, [pc, #164]	; (8008e70 <_strtod_l+0x5b0>)
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	4682      	mov	sl, r0
 8008dd0:	d8be      	bhi.n	8008d50 <_strtod_l+0x490>
 8008dd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dd6:	428b      	cmp	r3, r1
 8008dd8:	bf86      	itte	hi
 8008dda:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008e74 <_strtod_l+0x5b4>
 8008dde:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008de2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008de6:	2300      	movs	r3, #0
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	e081      	b.n	8008ef0 <_strtod_l+0x630>
 8008dec:	f018 0f01 	tst.w	r8, #1
 8008df0:	d007      	beq.n	8008e02 <_strtod_l+0x542>
 8008df2:	4b1d      	ldr	r3, [pc, #116]	; (8008e68 <_strtod_l+0x5a8>)
 8008df4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f7f7 fc0c 	bl	8000618 <__aeabi_dmul>
 8008e00:	2301      	movs	r3, #1
 8008e02:	f109 0901 	add.w	r9, r9, #1
 8008e06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e0a:	e7ca      	b.n	8008da2 <_strtod_l+0x4e2>
 8008e0c:	d0eb      	beq.n	8008de6 <_strtod_l+0x526>
 8008e0e:	f1c8 0800 	rsb	r8, r8, #0
 8008e12:	f018 020f 	ands.w	r2, r8, #15
 8008e16:	d00a      	beq.n	8008e2e <_strtod_l+0x56e>
 8008e18:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <_strtod_l+0x5a4>)
 8008e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e1e:	4650      	mov	r0, sl
 8008e20:	4659      	mov	r1, fp
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fd21 	bl	800086c <__aeabi_ddiv>
 8008e2a:	4682      	mov	sl, r0
 8008e2c:	468b      	mov	fp, r1
 8008e2e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008e32:	d0d8      	beq.n	8008de6 <_strtod_l+0x526>
 8008e34:	f1b8 0f1f 	cmp.w	r8, #31
 8008e38:	dd1e      	ble.n	8008e78 <_strtod_l+0x5b8>
 8008e3a:	2500      	movs	r5, #0
 8008e3c:	462e      	mov	r6, r5
 8008e3e:	9509      	str	r5, [sp, #36]	; 0x24
 8008e40:	9507      	str	r5, [sp, #28]
 8008e42:	2322      	movs	r3, #34	; 0x22
 8008e44:	f04f 0a00 	mov.w	sl, #0
 8008e48:	f04f 0b00 	mov.w	fp, #0
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	e789      	b.n	8008d64 <_strtod_l+0x4a4>
 8008e50:	0800c66d 	.word	0x0800c66d
 8008e54:	0800c6b0 	.word	0x0800c6b0
 8008e58:	0800c665 	.word	0x0800c665
 8008e5c:	0800c7f4 	.word	0x0800c7f4
 8008e60:	0800cb10 	.word	0x0800cb10
 8008e64:	0800c9f0 	.word	0x0800c9f0
 8008e68:	0800c9c8 	.word	0x0800c9c8
 8008e6c:	7ff00000 	.word	0x7ff00000
 8008e70:	7ca00000 	.word	0x7ca00000
 8008e74:	7fefffff 	.word	0x7fefffff
 8008e78:	f018 0310 	ands.w	r3, r8, #16
 8008e7c:	bf18      	it	ne
 8008e7e:	236a      	movne	r3, #106	; 0x6a
 8008e80:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009238 <_strtod_l+0x978>
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	4650      	mov	r0, sl
 8008e88:	4659      	mov	r1, fp
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f018 0f01 	tst.w	r8, #1
 8008e90:	d004      	beq.n	8008e9c <_strtod_l+0x5dc>
 8008e92:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e96:	f7f7 fbbf 	bl	8000618 <__aeabi_dmul>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008ea0:	f109 0908 	add.w	r9, r9, #8
 8008ea4:	d1f2      	bne.n	8008e8c <_strtod_l+0x5cc>
 8008ea6:	b10b      	cbz	r3, 8008eac <_strtod_l+0x5ec>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	b1bb      	cbz	r3, 8008ee0 <_strtod_l+0x620>
 8008eb0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008eb4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	4659      	mov	r1, fp
 8008ebc:	dd10      	ble.n	8008ee0 <_strtod_l+0x620>
 8008ebe:	2b1f      	cmp	r3, #31
 8008ec0:	f340 8128 	ble.w	8009114 <_strtod_l+0x854>
 8008ec4:	2b34      	cmp	r3, #52	; 0x34
 8008ec6:	bfde      	ittt	le
 8008ec8:	3b20      	suble	r3, #32
 8008eca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008ece:	fa02 f303 	lslle.w	r3, r2, r3
 8008ed2:	f04f 0a00 	mov.w	sl, #0
 8008ed6:	bfcc      	ite	gt
 8008ed8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008edc:	ea03 0b01 	andle.w	fp, r3, r1
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	f7f7 fdfe 	bl	8000ae8 <__aeabi_dcmpeq>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1a4      	bne.n	8008e3a <_strtod_l+0x57a>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4620      	mov	r0, r4
 8008efc:	f002 f916 	bl	800b12c <__s2b>
 8008f00:	9009      	str	r0, [sp, #36]	; 0x24
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f43f af24 	beq.w	8008d50 <_strtod_l+0x490>
 8008f08:	9b07      	ldr	r3, [sp, #28]
 8008f0a:	1b9e      	subs	r6, r3, r6
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bfb4      	ite	lt
 8008f12:	4633      	movlt	r3, r6
 8008f14:	2300      	movge	r3, #0
 8008f16:	9310      	str	r3, [sp, #64]	; 0x40
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f20:	9318      	str	r3, [sp, #96]	; 0x60
 8008f22:	462e      	mov	r6, r5
 8008f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f26:	4620      	mov	r0, r4
 8008f28:	6859      	ldr	r1, [r3, #4]
 8008f2a:	f002 f853 	bl	800afd4 <_Balloc>
 8008f2e:	9007      	str	r0, [sp, #28]
 8008f30:	2800      	cmp	r0, #0
 8008f32:	f43f af11 	beq.w	8008d58 <_strtod_l+0x498>
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	3202      	adds	r2, #2
 8008f3c:	f103 010c 	add.w	r1, r3, #12
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	300c      	adds	r0, #12
 8008f44:	f002 f838 	bl	800afb8 <memcpy>
 8008f48:	ec4b ab10 	vmov	d0, sl, fp
 8008f4c:	aa20      	add	r2, sp, #128	; 0x80
 8008f4e:	a91f      	add	r1, sp, #124	; 0x7c
 8008f50:	4620      	mov	r0, r4
 8008f52:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008f56:	f002 fc25 	bl	800b7a4 <__d2b>
 8008f5a:	901e      	str	r0, [sp, #120]	; 0x78
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f43f aefb 	beq.w	8008d58 <_strtod_l+0x498>
 8008f62:	2101      	movs	r1, #1
 8008f64:	4620      	mov	r0, r4
 8008f66:	f002 f97b 	bl	800b260 <__i2b>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f43f aef3 	beq.w	8008d58 <_strtod_l+0x498>
 8008f72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f74:	9904      	ldr	r1, [sp, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfab      	itete	ge
 8008f7a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008f7c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008f7e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008f80:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008f84:	bfac      	ite	ge
 8008f86:	eb03 0902 	addge.w	r9, r3, r2
 8008f8a:	1ad7      	sublt	r7, r2, r3
 8008f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f8e:	eba3 0801 	sub.w	r8, r3, r1
 8008f92:	4490      	add	r8, r2
 8008f94:	4ba3      	ldr	r3, [pc, #652]	; (8009224 <_strtod_l+0x964>)
 8008f96:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008f9a:	4598      	cmp	r8, r3
 8008f9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fa0:	f280 80cc 	bge.w	800913c <_strtod_l+0x87c>
 8008fa4:	eba3 0308 	sub.w	r3, r3, r8
 8008fa8:	2b1f      	cmp	r3, #31
 8008faa:	eba2 0203 	sub.w	r2, r2, r3
 8008fae:	f04f 0101 	mov.w	r1, #1
 8008fb2:	f300 80b6 	bgt.w	8009122 <_strtod_l+0x862>
 8008fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fba:	9311      	str	r3, [sp, #68]	; 0x44
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008fc0:	eb09 0802 	add.w	r8, r9, r2
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	45c1      	cmp	r9, r8
 8008fc8:	4417      	add	r7, r2
 8008fca:	441f      	add	r7, r3
 8008fcc:	464b      	mov	r3, r9
 8008fce:	bfa8      	it	ge
 8008fd0:	4643      	movge	r3, r8
 8008fd2:	42bb      	cmp	r3, r7
 8008fd4:	bfa8      	it	ge
 8008fd6:	463b      	movge	r3, r7
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfc2      	ittt	gt
 8008fdc:	eba8 0803 	subgt.w	r8, r8, r3
 8008fe0:	1aff      	subgt	r7, r7, r3
 8008fe2:	eba9 0903 	subgt.w	r9, r9, r3
 8008fe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dd17      	ble.n	800901c <_strtod_l+0x75c>
 8008fec:	4631      	mov	r1, r6
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f002 f9f1 	bl	800b3d8 <__pow5mult>
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f43f aead 	beq.w	8008d58 <_strtod_l+0x498>
 8008ffe:	4601      	mov	r1, r0
 8009000:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009002:	4620      	mov	r0, r4
 8009004:	f002 f942 	bl	800b28c <__multiply>
 8009008:	900f      	str	r0, [sp, #60]	; 0x3c
 800900a:	2800      	cmp	r0, #0
 800900c:	f43f aea4 	beq.w	8008d58 <_strtod_l+0x498>
 8009010:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009012:	4620      	mov	r0, r4
 8009014:	f002 f81e 	bl	800b054 <_Bfree>
 8009018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800901a:	931e      	str	r3, [sp, #120]	; 0x78
 800901c:	f1b8 0f00 	cmp.w	r8, #0
 8009020:	f300 8091 	bgt.w	8009146 <_strtod_l+0x886>
 8009024:	9b08      	ldr	r3, [sp, #32]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd08      	ble.n	800903c <_strtod_l+0x77c>
 800902a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800902c:	9907      	ldr	r1, [sp, #28]
 800902e:	4620      	mov	r0, r4
 8009030:	f002 f9d2 	bl	800b3d8 <__pow5mult>
 8009034:	9007      	str	r0, [sp, #28]
 8009036:	2800      	cmp	r0, #0
 8009038:	f43f ae8e 	beq.w	8008d58 <_strtod_l+0x498>
 800903c:	2f00      	cmp	r7, #0
 800903e:	dd08      	ble.n	8009052 <_strtod_l+0x792>
 8009040:	9907      	ldr	r1, [sp, #28]
 8009042:	463a      	mov	r2, r7
 8009044:	4620      	mov	r0, r4
 8009046:	f002 fa21 	bl	800b48c <__lshift>
 800904a:	9007      	str	r0, [sp, #28]
 800904c:	2800      	cmp	r0, #0
 800904e:	f43f ae83 	beq.w	8008d58 <_strtod_l+0x498>
 8009052:	f1b9 0f00 	cmp.w	r9, #0
 8009056:	dd08      	ble.n	800906a <_strtod_l+0x7aa>
 8009058:	4631      	mov	r1, r6
 800905a:	464a      	mov	r2, r9
 800905c:	4620      	mov	r0, r4
 800905e:	f002 fa15 	bl	800b48c <__lshift>
 8009062:	4606      	mov	r6, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	f43f ae77 	beq.w	8008d58 <_strtod_l+0x498>
 800906a:	9a07      	ldr	r2, [sp, #28]
 800906c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800906e:	4620      	mov	r0, r4
 8009070:	f002 fa94 	bl	800b59c <__mdiff>
 8009074:	4605      	mov	r5, r0
 8009076:	2800      	cmp	r0, #0
 8009078:	f43f ae6e 	beq.w	8008d58 <_strtod_l+0x498>
 800907c:	68c3      	ldr	r3, [r0, #12]
 800907e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009080:	2300      	movs	r3, #0
 8009082:	60c3      	str	r3, [r0, #12]
 8009084:	4631      	mov	r1, r6
 8009086:	f002 fa6d 	bl	800b564 <__mcmp>
 800908a:	2800      	cmp	r0, #0
 800908c:	da65      	bge.n	800915a <_strtod_l+0x89a>
 800908e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009090:	ea53 030a 	orrs.w	r3, r3, sl
 8009094:	f040 8087 	bne.w	80091a6 <_strtod_l+0x8e6>
 8009098:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800909c:	2b00      	cmp	r3, #0
 800909e:	f040 8082 	bne.w	80091a6 <_strtod_l+0x8e6>
 80090a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090a6:	0d1b      	lsrs	r3, r3, #20
 80090a8:	051b      	lsls	r3, r3, #20
 80090aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090ae:	d97a      	bls.n	80091a6 <_strtod_l+0x8e6>
 80090b0:	696b      	ldr	r3, [r5, #20]
 80090b2:	b913      	cbnz	r3, 80090ba <_strtod_l+0x7fa>
 80090b4:	692b      	ldr	r3, [r5, #16]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	dd75      	ble.n	80091a6 <_strtod_l+0x8e6>
 80090ba:	4629      	mov	r1, r5
 80090bc:	2201      	movs	r2, #1
 80090be:	4620      	mov	r0, r4
 80090c0:	f002 f9e4 	bl	800b48c <__lshift>
 80090c4:	4631      	mov	r1, r6
 80090c6:	4605      	mov	r5, r0
 80090c8:	f002 fa4c 	bl	800b564 <__mcmp>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	dd6a      	ble.n	80091a6 <_strtod_l+0x8e6>
 80090d0:	9904      	ldr	r1, [sp, #16]
 80090d2:	4a55      	ldr	r2, [pc, #340]	; (8009228 <_strtod_l+0x968>)
 80090d4:	465b      	mov	r3, fp
 80090d6:	2900      	cmp	r1, #0
 80090d8:	f000 8085 	beq.w	80091e6 <_strtod_l+0x926>
 80090dc:	ea02 010b 	and.w	r1, r2, fp
 80090e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090e4:	dc7f      	bgt.n	80091e6 <_strtod_l+0x926>
 80090e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090ea:	f77f aeaa 	ble.w	8008e42 <_strtod_l+0x582>
 80090ee:	4a4f      	ldr	r2, [pc, #316]	; (800922c <_strtod_l+0x96c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80090f6:	4650      	mov	r0, sl
 80090f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80090fc:	4659      	mov	r1, fp
 80090fe:	f7f7 fa8b 	bl	8000618 <__aeabi_dmul>
 8009102:	460b      	mov	r3, r1
 8009104:	4303      	orrs	r3, r0
 8009106:	bf08      	it	eq
 8009108:	2322      	moveq	r3, #34	; 0x22
 800910a:	4682      	mov	sl, r0
 800910c:	468b      	mov	fp, r1
 800910e:	bf08      	it	eq
 8009110:	6023      	streq	r3, [r4, #0]
 8009112:	e62b      	b.n	8008d6c <_strtod_l+0x4ac>
 8009114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009118:	fa02 f303 	lsl.w	r3, r2, r3
 800911c:	ea03 0a0a 	and.w	sl, r3, sl
 8009120:	e6de      	b.n	8008ee0 <_strtod_l+0x620>
 8009122:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009126:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800912a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800912e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009132:	fa01 f308 	lsl.w	r3, r1, r8
 8009136:	930c      	str	r3, [sp, #48]	; 0x30
 8009138:	9111      	str	r1, [sp, #68]	; 0x44
 800913a:	e741      	b.n	8008fc0 <_strtod_l+0x700>
 800913c:	2300      	movs	r3, #0
 800913e:	930c      	str	r3, [sp, #48]	; 0x30
 8009140:	2301      	movs	r3, #1
 8009142:	9311      	str	r3, [sp, #68]	; 0x44
 8009144:	e73c      	b.n	8008fc0 <_strtod_l+0x700>
 8009146:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009148:	4642      	mov	r2, r8
 800914a:	4620      	mov	r0, r4
 800914c:	f002 f99e 	bl	800b48c <__lshift>
 8009150:	901e      	str	r0, [sp, #120]	; 0x78
 8009152:	2800      	cmp	r0, #0
 8009154:	f47f af66 	bne.w	8009024 <_strtod_l+0x764>
 8009158:	e5fe      	b.n	8008d58 <_strtod_l+0x498>
 800915a:	465f      	mov	r7, fp
 800915c:	d16e      	bne.n	800923c <_strtod_l+0x97c>
 800915e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009160:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009164:	b342      	cbz	r2, 80091b8 <_strtod_l+0x8f8>
 8009166:	4a32      	ldr	r2, [pc, #200]	; (8009230 <_strtod_l+0x970>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d128      	bne.n	80091be <_strtod_l+0x8fe>
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	4650      	mov	r0, sl
 8009170:	b1eb      	cbz	r3, 80091ae <_strtod_l+0x8ee>
 8009172:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <_strtod_l+0x968>)
 8009174:	403a      	ands	r2, r7
 8009176:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800917a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800917e:	d819      	bhi.n	80091b4 <_strtod_l+0x8f4>
 8009180:	0d12      	lsrs	r2, r2, #20
 8009182:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009186:	fa01 f303 	lsl.w	r3, r1, r3
 800918a:	4298      	cmp	r0, r3
 800918c:	d117      	bne.n	80091be <_strtod_l+0x8fe>
 800918e:	4b29      	ldr	r3, [pc, #164]	; (8009234 <_strtod_l+0x974>)
 8009190:	429f      	cmp	r7, r3
 8009192:	d102      	bne.n	800919a <_strtod_l+0x8da>
 8009194:	3001      	adds	r0, #1
 8009196:	f43f addf 	beq.w	8008d58 <_strtod_l+0x498>
 800919a:	4b23      	ldr	r3, [pc, #140]	; (8009228 <_strtod_l+0x968>)
 800919c:	403b      	ands	r3, r7
 800919e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1a0      	bne.n	80090ee <_strtod_l+0x82e>
 80091ac:	e5de      	b.n	8008d6c <_strtod_l+0x4ac>
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091b2:	e7ea      	b.n	800918a <_strtod_l+0x8ca>
 80091b4:	460b      	mov	r3, r1
 80091b6:	e7e8      	b.n	800918a <_strtod_l+0x8ca>
 80091b8:	ea53 030a 	orrs.w	r3, r3, sl
 80091bc:	d088      	beq.n	80090d0 <_strtod_l+0x810>
 80091be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091c0:	b1db      	cbz	r3, 80091fa <_strtod_l+0x93a>
 80091c2:	423b      	tst	r3, r7
 80091c4:	d0ef      	beq.n	80091a6 <_strtod_l+0x8e6>
 80091c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091c8:	9a04      	ldr	r2, [sp, #16]
 80091ca:	4650      	mov	r0, sl
 80091cc:	4659      	mov	r1, fp
 80091ce:	b1c3      	cbz	r3, 8009202 <_strtod_l+0x942>
 80091d0:	f7ff fb58 	bl	8008884 <sulp>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091dc:	f7f7 f866 	bl	80002ac <__adddf3>
 80091e0:	4682      	mov	sl, r0
 80091e2:	468b      	mov	fp, r1
 80091e4:	e7df      	b.n	80091a6 <_strtod_l+0x8e6>
 80091e6:	4013      	ands	r3, r2
 80091e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80091f8:	e7d5      	b.n	80091a6 <_strtod_l+0x8e6>
 80091fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091fc:	ea13 0f0a 	tst.w	r3, sl
 8009200:	e7e0      	b.n	80091c4 <_strtod_l+0x904>
 8009202:	f7ff fb3f 	bl	8008884 <sulp>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800920e:	f7f7 f84b 	bl	80002a8 <__aeabi_dsub>
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	4682      	mov	sl, r0
 8009218:	468b      	mov	fp, r1
 800921a:	f7f7 fc65 	bl	8000ae8 <__aeabi_dcmpeq>
 800921e:	2800      	cmp	r0, #0
 8009220:	d0c1      	beq.n	80091a6 <_strtod_l+0x8e6>
 8009222:	e60e      	b.n	8008e42 <_strtod_l+0x582>
 8009224:	fffffc02 	.word	0xfffffc02
 8009228:	7ff00000 	.word	0x7ff00000
 800922c:	39500000 	.word	0x39500000
 8009230:	000fffff 	.word	0x000fffff
 8009234:	7fefffff 	.word	0x7fefffff
 8009238:	0800c6c8 	.word	0x0800c6c8
 800923c:	4631      	mov	r1, r6
 800923e:	4628      	mov	r0, r5
 8009240:	f002 fb0c 	bl	800b85c <__ratio>
 8009244:	ec59 8b10 	vmov	r8, r9, d0
 8009248:	ee10 0a10 	vmov	r0, s0
 800924c:	2200      	movs	r2, #0
 800924e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009252:	4649      	mov	r1, r9
 8009254:	f7f7 fc5c 	bl	8000b10 <__aeabi_dcmple>
 8009258:	2800      	cmp	r0, #0
 800925a:	d07c      	beq.n	8009356 <_strtod_l+0xa96>
 800925c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d04c      	beq.n	80092fc <_strtod_l+0xa3c>
 8009262:	4b95      	ldr	r3, [pc, #596]	; (80094b8 <_strtod_l+0xbf8>)
 8009264:	2200      	movs	r2, #0
 8009266:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800926a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80094b8 <_strtod_l+0xbf8>
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	4b92      	ldr	r3, [pc, #584]	; (80094bc <_strtod_l+0xbfc>)
 8009274:	403b      	ands	r3, r7
 8009276:	9311      	str	r3, [sp, #68]	; 0x44
 8009278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800927a:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <_strtod_l+0xc00>)
 800927c:	429a      	cmp	r2, r3
 800927e:	f040 80b2 	bne.w	80093e6 <_strtod_l+0xb26>
 8009282:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800928a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800928e:	ec4b ab10 	vmov	d0, sl, fp
 8009292:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009296:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800929a:	f002 fa07 	bl	800b6ac <__ulp>
 800929e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092a2:	ec53 2b10 	vmov	r2, r3, d0
 80092a6:	f7f7 f9b7 	bl	8000618 <__aeabi_dmul>
 80092aa:	4652      	mov	r2, sl
 80092ac:	465b      	mov	r3, fp
 80092ae:	f7f6 fffd 	bl	80002ac <__adddf3>
 80092b2:	460b      	mov	r3, r1
 80092b4:	4981      	ldr	r1, [pc, #516]	; (80094bc <_strtod_l+0xbfc>)
 80092b6:	4a83      	ldr	r2, [pc, #524]	; (80094c4 <_strtod_l+0xc04>)
 80092b8:	4019      	ands	r1, r3
 80092ba:	4291      	cmp	r1, r2
 80092bc:	4682      	mov	sl, r0
 80092be:	d95e      	bls.n	800937e <_strtod_l+0xabe>
 80092c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d103      	bne.n	80092d2 <_strtod_l+0xa12>
 80092ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092cc:	3301      	adds	r3, #1
 80092ce:	f43f ad43 	beq.w	8008d58 <_strtod_l+0x498>
 80092d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80094d0 <_strtod_l+0xc10>
 80092d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80092da:	991e      	ldr	r1, [sp, #120]	; 0x78
 80092dc:	4620      	mov	r0, r4
 80092de:	f001 feb9 	bl	800b054 <_Bfree>
 80092e2:	9907      	ldr	r1, [sp, #28]
 80092e4:	4620      	mov	r0, r4
 80092e6:	f001 feb5 	bl	800b054 <_Bfree>
 80092ea:	4631      	mov	r1, r6
 80092ec:	4620      	mov	r0, r4
 80092ee:	f001 feb1 	bl	800b054 <_Bfree>
 80092f2:	4629      	mov	r1, r5
 80092f4:	4620      	mov	r0, r4
 80092f6:	f001 fead 	bl	800b054 <_Bfree>
 80092fa:	e613      	b.n	8008f24 <_strtod_l+0x664>
 80092fc:	f1ba 0f00 	cmp.w	sl, #0
 8009300:	d11b      	bne.n	800933a <_strtod_l+0xa7a>
 8009302:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009306:	b9f3      	cbnz	r3, 8009346 <_strtod_l+0xa86>
 8009308:	4b6b      	ldr	r3, [pc, #428]	; (80094b8 <_strtod_l+0xbf8>)
 800930a:	2200      	movs	r2, #0
 800930c:	4640      	mov	r0, r8
 800930e:	4649      	mov	r1, r9
 8009310:	f7f7 fbf4 	bl	8000afc <__aeabi_dcmplt>
 8009314:	b9d0      	cbnz	r0, 800934c <_strtod_l+0xa8c>
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	4b6b      	ldr	r3, [pc, #428]	; (80094c8 <_strtod_l+0xc08>)
 800931c:	2200      	movs	r2, #0
 800931e:	f7f7 f97b 	bl	8000618 <__aeabi_dmul>
 8009322:	4680      	mov	r8, r0
 8009324:	4689      	mov	r9, r1
 8009326:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800932a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800932e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009330:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009334:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009338:	e79b      	b.n	8009272 <_strtod_l+0x9b2>
 800933a:	f1ba 0f01 	cmp.w	sl, #1
 800933e:	d102      	bne.n	8009346 <_strtod_l+0xa86>
 8009340:	2f00      	cmp	r7, #0
 8009342:	f43f ad7e 	beq.w	8008e42 <_strtod_l+0x582>
 8009346:	4b61      	ldr	r3, [pc, #388]	; (80094cc <_strtod_l+0xc0c>)
 8009348:	2200      	movs	r2, #0
 800934a:	e78c      	b.n	8009266 <_strtod_l+0x9a6>
 800934c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80094c8 <_strtod_l+0xc08>
 8009350:	f04f 0800 	mov.w	r8, #0
 8009354:	e7e7      	b.n	8009326 <_strtod_l+0xa66>
 8009356:	4b5c      	ldr	r3, [pc, #368]	; (80094c8 <_strtod_l+0xc08>)
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	2200      	movs	r2, #0
 800935e:	f7f7 f95b 	bl	8000618 <__aeabi_dmul>
 8009362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009364:	4680      	mov	r8, r0
 8009366:	4689      	mov	r9, r1
 8009368:	b933      	cbnz	r3, 8009378 <_strtod_l+0xab8>
 800936a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800936e:	9012      	str	r0, [sp, #72]	; 0x48
 8009370:	9313      	str	r3, [sp, #76]	; 0x4c
 8009372:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009376:	e7dd      	b.n	8009334 <_strtod_l+0xa74>
 8009378:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800937c:	e7f9      	b.n	8009372 <_strtod_l+0xab2>
 800937e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1a8      	bne.n	80092da <_strtod_l+0xa1a>
 8009388:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800938c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800938e:	0d1b      	lsrs	r3, r3, #20
 8009390:	051b      	lsls	r3, r3, #20
 8009392:	429a      	cmp	r2, r3
 8009394:	d1a1      	bne.n	80092da <_strtod_l+0xa1a>
 8009396:	4640      	mov	r0, r8
 8009398:	4649      	mov	r1, r9
 800939a:	f7f7 fc85 	bl	8000ca8 <__aeabi_d2lz>
 800939e:	f7f7 f90d 	bl	80005bc <__aeabi_l2d>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4640      	mov	r0, r8
 80093a8:	4649      	mov	r1, r9
 80093aa:	f7f6 ff7d 	bl	80002a8 <__aeabi_dsub>
 80093ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b4:	ea43 030a 	orr.w	r3, r3, sl
 80093b8:	4313      	orrs	r3, r2
 80093ba:	4680      	mov	r8, r0
 80093bc:	4689      	mov	r9, r1
 80093be:	d053      	beq.n	8009468 <_strtod_l+0xba8>
 80093c0:	a335      	add	r3, pc, #212	; (adr r3, 8009498 <_strtod_l+0xbd8>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 fb99 	bl	8000afc <__aeabi_dcmplt>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f47f acce 	bne.w	8008d6c <_strtod_l+0x4ac>
 80093d0:	a333      	add	r3, pc, #204	; (adr r3, 80094a0 <_strtod_l+0xbe0>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f7 fbad 	bl	8000b38 <__aeabi_dcmpgt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f43f af7b 	beq.w	80092da <_strtod_l+0xa1a>
 80093e4:	e4c2      	b.n	8008d6c <_strtod_l+0x4ac>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	b333      	cbz	r3, 8009438 <_strtod_l+0xb78>
 80093ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093f0:	d822      	bhi.n	8009438 <_strtod_l+0xb78>
 80093f2:	a32d      	add	r3, pc, #180	; (adr r3, 80094a8 <_strtod_l+0xbe8>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 fb88 	bl	8000b10 <__aeabi_dcmple>
 8009400:	b1a0      	cbz	r0, 800942c <_strtod_l+0xb6c>
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	f7f7 fbdf 	bl	8000bc8 <__aeabi_d2uiz>
 800940a:	2801      	cmp	r0, #1
 800940c:	bf38      	it	cc
 800940e:	2001      	movcc	r0, #1
 8009410:	f7f7 f888 	bl	8000524 <__aeabi_ui2d>
 8009414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009416:	4680      	mov	r8, r0
 8009418:	4689      	mov	r9, r1
 800941a:	bb13      	cbnz	r3, 8009462 <_strtod_l+0xba2>
 800941c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009420:	9014      	str	r0, [sp, #80]	; 0x50
 8009422:	9315      	str	r3, [sp, #84]	; 0x54
 8009424:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009428:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800942c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800942e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009430:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	930d      	str	r3, [sp, #52]	; 0x34
 8009438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800943c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009440:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009444:	f002 f932 	bl	800b6ac <__ulp>
 8009448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800944c:	ec53 2b10 	vmov	r2, r3, d0
 8009450:	f7f7 f8e2 	bl	8000618 <__aeabi_dmul>
 8009454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009458:	f7f6 ff28 	bl	80002ac <__adddf3>
 800945c:	4682      	mov	sl, r0
 800945e:	468b      	mov	fp, r1
 8009460:	e78f      	b.n	8009382 <_strtod_l+0xac2>
 8009462:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009466:	e7dd      	b.n	8009424 <_strtod_l+0xb64>
 8009468:	a311      	add	r3, pc, #68	; (adr r3, 80094b0 <_strtod_l+0xbf0>)
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	f7f7 fb45 	bl	8000afc <__aeabi_dcmplt>
 8009472:	e7b4      	b.n	80093de <_strtod_l+0xb1e>
 8009474:	2300      	movs	r3, #0
 8009476:	930e      	str	r3, [sp, #56]	; 0x38
 8009478:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800947a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	f7ff ba65 	b.w	800894c <_strtod_l+0x8c>
 8009482:	2b65      	cmp	r3, #101	; 0x65
 8009484:	f43f ab5d 	beq.w	8008b42 <_strtod_l+0x282>
 8009488:	2b45      	cmp	r3, #69	; 0x45
 800948a:	f43f ab5a 	beq.w	8008b42 <_strtod_l+0x282>
 800948e:	2201      	movs	r2, #1
 8009490:	f7ff bb92 	b.w	8008bb8 <_strtod_l+0x2f8>
 8009494:	f3af 8000 	nop.w
 8009498:	94a03595 	.word	0x94a03595
 800949c:	3fdfffff 	.word	0x3fdfffff
 80094a0:	35afe535 	.word	0x35afe535
 80094a4:	3fe00000 	.word	0x3fe00000
 80094a8:	ffc00000 	.word	0xffc00000
 80094ac:	41dfffff 	.word	0x41dfffff
 80094b0:	94a03595 	.word	0x94a03595
 80094b4:	3fcfffff 	.word	0x3fcfffff
 80094b8:	3ff00000 	.word	0x3ff00000
 80094bc:	7ff00000 	.word	0x7ff00000
 80094c0:	7fe00000 	.word	0x7fe00000
 80094c4:	7c9fffff 	.word	0x7c9fffff
 80094c8:	3fe00000 	.word	0x3fe00000
 80094cc:	bff00000 	.word	0xbff00000
 80094d0:	7fefffff 	.word	0x7fefffff

080094d4 <_strtod_r>:
 80094d4:	4b01      	ldr	r3, [pc, #4]	; (80094dc <_strtod_r+0x8>)
 80094d6:	f7ff b9f3 	b.w	80088c0 <_strtod_l>
 80094da:	bf00      	nop
 80094dc:	20000074 	.word	0x20000074

080094e0 <_strtol_l.isra.0>:
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e6:	d001      	beq.n	80094ec <_strtol_l.isra.0+0xc>
 80094e8:	2b24      	cmp	r3, #36	; 0x24
 80094ea:	d906      	bls.n	80094fa <_strtol_l.isra.0+0x1a>
 80094ec:	f7fe fa6a 	bl	80079c4 <__errno>
 80094f0:	2316      	movs	r3, #22
 80094f2:	6003      	str	r3, [r0, #0]
 80094f4:	2000      	movs	r0, #0
 80094f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fa:	4f3a      	ldr	r7, [pc, #232]	; (80095e4 <_strtol_l.isra.0+0x104>)
 80094fc:	468e      	mov	lr, r1
 80094fe:	4676      	mov	r6, lr
 8009500:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009504:	5de5      	ldrb	r5, [r4, r7]
 8009506:	f015 0508 	ands.w	r5, r5, #8
 800950a:	d1f8      	bne.n	80094fe <_strtol_l.isra.0+0x1e>
 800950c:	2c2d      	cmp	r4, #45	; 0x2d
 800950e:	d134      	bne.n	800957a <_strtol_l.isra.0+0x9a>
 8009510:	f89e 4000 	ldrb.w	r4, [lr]
 8009514:	f04f 0801 	mov.w	r8, #1
 8009518:	f106 0e02 	add.w	lr, r6, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d05c      	beq.n	80095da <_strtol_l.isra.0+0xfa>
 8009520:	2b10      	cmp	r3, #16
 8009522:	d10c      	bne.n	800953e <_strtol_l.isra.0+0x5e>
 8009524:	2c30      	cmp	r4, #48	; 0x30
 8009526:	d10a      	bne.n	800953e <_strtol_l.isra.0+0x5e>
 8009528:	f89e 4000 	ldrb.w	r4, [lr]
 800952c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009530:	2c58      	cmp	r4, #88	; 0x58
 8009532:	d14d      	bne.n	80095d0 <_strtol_l.isra.0+0xf0>
 8009534:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009538:	2310      	movs	r3, #16
 800953a:	f10e 0e02 	add.w	lr, lr, #2
 800953e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009542:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009546:	2600      	movs	r6, #0
 8009548:	fbbc f9f3 	udiv	r9, ip, r3
 800954c:	4635      	mov	r5, r6
 800954e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009552:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009556:	2f09      	cmp	r7, #9
 8009558:	d818      	bhi.n	800958c <_strtol_l.isra.0+0xac>
 800955a:	463c      	mov	r4, r7
 800955c:	42a3      	cmp	r3, r4
 800955e:	dd24      	ble.n	80095aa <_strtol_l.isra.0+0xca>
 8009560:	2e00      	cmp	r6, #0
 8009562:	db1f      	blt.n	80095a4 <_strtol_l.isra.0+0xc4>
 8009564:	45a9      	cmp	r9, r5
 8009566:	d31d      	bcc.n	80095a4 <_strtol_l.isra.0+0xc4>
 8009568:	d101      	bne.n	800956e <_strtol_l.isra.0+0x8e>
 800956a:	45a2      	cmp	sl, r4
 800956c:	db1a      	blt.n	80095a4 <_strtol_l.isra.0+0xc4>
 800956e:	fb05 4503 	mla	r5, r5, r3, r4
 8009572:	2601      	movs	r6, #1
 8009574:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009578:	e7eb      	b.n	8009552 <_strtol_l.isra.0+0x72>
 800957a:	2c2b      	cmp	r4, #43	; 0x2b
 800957c:	bf08      	it	eq
 800957e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009582:	46a8      	mov	r8, r5
 8009584:	bf08      	it	eq
 8009586:	f106 0e02 	addeq.w	lr, r6, #2
 800958a:	e7c7      	b.n	800951c <_strtol_l.isra.0+0x3c>
 800958c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009590:	2f19      	cmp	r7, #25
 8009592:	d801      	bhi.n	8009598 <_strtol_l.isra.0+0xb8>
 8009594:	3c37      	subs	r4, #55	; 0x37
 8009596:	e7e1      	b.n	800955c <_strtol_l.isra.0+0x7c>
 8009598:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800959c:	2f19      	cmp	r7, #25
 800959e:	d804      	bhi.n	80095aa <_strtol_l.isra.0+0xca>
 80095a0:	3c57      	subs	r4, #87	; 0x57
 80095a2:	e7db      	b.n	800955c <_strtol_l.isra.0+0x7c>
 80095a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80095a8:	e7e4      	b.n	8009574 <_strtol_l.isra.0+0x94>
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	da05      	bge.n	80095ba <_strtol_l.isra.0+0xda>
 80095ae:	2322      	movs	r3, #34	; 0x22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	4665      	mov	r5, ip
 80095b4:	b942      	cbnz	r2, 80095c8 <_strtol_l.isra.0+0xe8>
 80095b6:	4628      	mov	r0, r5
 80095b8:	e79d      	b.n	80094f6 <_strtol_l.isra.0+0x16>
 80095ba:	f1b8 0f00 	cmp.w	r8, #0
 80095be:	d000      	beq.n	80095c2 <_strtol_l.isra.0+0xe2>
 80095c0:	426d      	negs	r5, r5
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d0f7      	beq.n	80095b6 <_strtol_l.isra.0+0xd6>
 80095c6:	b10e      	cbz	r6, 80095cc <_strtol_l.isra.0+0xec>
 80095c8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	e7f2      	b.n	80095b6 <_strtol_l.isra.0+0xd6>
 80095d0:	2430      	movs	r4, #48	; 0x30
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1b3      	bne.n	800953e <_strtol_l.isra.0+0x5e>
 80095d6:	2308      	movs	r3, #8
 80095d8:	e7b1      	b.n	800953e <_strtol_l.isra.0+0x5e>
 80095da:	2c30      	cmp	r4, #48	; 0x30
 80095dc:	d0a4      	beq.n	8009528 <_strtol_l.isra.0+0x48>
 80095de:	230a      	movs	r3, #10
 80095e0:	e7ad      	b.n	800953e <_strtol_l.isra.0+0x5e>
 80095e2:	bf00      	nop
 80095e4:	0800c6f1 	.word	0x0800c6f1

080095e8 <_strtol_r>:
 80095e8:	f7ff bf7a 	b.w	80094e0 <_strtol_l.isra.0>

080095ec <__swbuf_r>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	460e      	mov	r6, r1
 80095f0:	4614      	mov	r4, r2
 80095f2:	4605      	mov	r5, r0
 80095f4:	b118      	cbz	r0, 80095fe <__swbuf_r+0x12>
 80095f6:	6983      	ldr	r3, [r0, #24]
 80095f8:	b90b      	cbnz	r3, 80095fe <__swbuf_r+0x12>
 80095fa:	f001 f84b 	bl	800a694 <__sinit>
 80095fe:	4b21      	ldr	r3, [pc, #132]	; (8009684 <__swbuf_r+0x98>)
 8009600:	429c      	cmp	r4, r3
 8009602:	d12b      	bne.n	800965c <__swbuf_r+0x70>
 8009604:	686c      	ldr	r4, [r5, #4]
 8009606:	69a3      	ldr	r3, [r4, #24]
 8009608:	60a3      	str	r3, [r4, #8]
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	071a      	lsls	r2, r3, #28
 800960e:	d52f      	bpl.n	8009670 <__swbuf_r+0x84>
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	b36b      	cbz	r3, 8009670 <__swbuf_r+0x84>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	6820      	ldr	r0, [r4, #0]
 8009618:	1ac0      	subs	r0, r0, r3
 800961a:	6963      	ldr	r3, [r4, #20]
 800961c:	b2f6      	uxtb	r6, r6
 800961e:	4283      	cmp	r3, r0
 8009620:	4637      	mov	r7, r6
 8009622:	dc04      	bgt.n	800962e <__swbuf_r+0x42>
 8009624:	4621      	mov	r1, r4
 8009626:	4628      	mov	r0, r5
 8009628:	f000 ffa0 	bl	800a56c <_fflush_r>
 800962c:	bb30      	cbnz	r0, 800967c <__swbuf_r+0x90>
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	3b01      	subs	r3, #1
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	701e      	strb	r6, [r3, #0]
 800963c:	6963      	ldr	r3, [r4, #20]
 800963e:	3001      	adds	r0, #1
 8009640:	4283      	cmp	r3, r0
 8009642:	d004      	beq.n	800964e <__swbuf_r+0x62>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	07db      	lsls	r3, r3, #31
 8009648:	d506      	bpl.n	8009658 <__swbuf_r+0x6c>
 800964a:	2e0a      	cmp	r6, #10
 800964c:	d104      	bne.n	8009658 <__swbuf_r+0x6c>
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	f000 ff8b 	bl	800a56c <_fflush_r>
 8009656:	b988      	cbnz	r0, 800967c <__swbuf_r+0x90>
 8009658:	4638      	mov	r0, r7
 800965a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <__swbuf_r+0x9c>)
 800965e:	429c      	cmp	r4, r3
 8009660:	d101      	bne.n	8009666 <__swbuf_r+0x7a>
 8009662:	68ac      	ldr	r4, [r5, #8]
 8009664:	e7cf      	b.n	8009606 <__swbuf_r+0x1a>
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <__swbuf_r+0xa0>)
 8009668:	429c      	cmp	r4, r3
 800966a:	bf08      	it	eq
 800966c:	68ec      	ldreq	r4, [r5, #12]
 800966e:	e7ca      	b.n	8009606 <__swbuf_r+0x1a>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	f000 f80c 	bl	8009690 <__swsetup_r>
 8009678:	2800      	cmp	r0, #0
 800967a:	d0cb      	beq.n	8009614 <__swbuf_r+0x28>
 800967c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009680:	e7ea      	b.n	8009658 <__swbuf_r+0x6c>
 8009682:	bf00      	nop
 8009684:	0800c8a8 	.word	0x0800c8a8
 8009688:	0800c8c8 	.word	0x0800c8c8
 800968c:	0800c888 	.word	0x0800c888

08009690 <__swsetup_r>:
 8009690:	4b32      	ldr	r3, [pc, #200]	; (800975c <__swsetup_r+0xcc>)
 8009692:	b570      	push	{r4, r5, r6, lr}
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	4606      	mov	r6, r0
 8009698:	460c      	mov	r4, r1
 800969a:	b125      	cbz	r5, 80096a6 <__swsetup_r+0x16>
 800969c:	69ab      	ldr	r3, [r5, #24]
 800969e:	b913      	cbnz	r3, 80096a6 <__swsetup_r+0x16>
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 fff7 	bl	800a694 <__sinit>
 80096a6:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <__swsetup_r+0xd0>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	d10f      	bne.n	80096cc <__swsetup_r+0x3c>
 80096ac:	686c      	ldr	r4, [r5, #4]
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096b4:	0719      	lsls	r1, r3, #28
 80096b6:	d42c      	bmi.n	8009712 <__swsetup_r+0x82>
 80096b8:	06dd      	lsls	r5, r3, #27
 80096ba:	d411      	bmi.n	80096e0 <__swsetup_r+0x50>
 80096bc:	2309      	movs	r3, #9
 80096be:	6033      	str	r3, [r6, #0]
 80096c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ca:	e03e      	b.n	800974a <__swsetup_r+0xba>
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <__swsetup_r+0xd4>)
 80096ce:	429c      	cmp	r4, r3
 80096d0:	d101      	bne.n	80096d6 <__swsetup_r+0x46>
 80096d2:	68ac      	ldr	r4, [r5, #8]
 80096d4:	e7eb      	b.n	80096ae <__swsetup_r+0x1e>
 80096d6:	4b24      	ldr	r3, [pc, #144]	; (8009768 <__swsetup_r+0xd8>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	bf08      	it	eq
 80096dc:	68ec      	ldreq	r4, [r5, #12]
 80096de:	e7e6      	b.n	80096ae <__swsetup_r+0x1e>
 80096e0:	0758      	lsls	r0, r3, #29
 80096e2:	d512      	bpl.n	800970a <__swsetup_r+0x7a>
 80096e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e6:	b141      	cbz	r1, 80096fa <__swsetup_r+0x6a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__swsetup_r+0x66>
 80096f0:	4630      	mov	r0, r6
 80096f2:	f002 f939 	bl	800b968 <_free_r>
 80096f6:	2300      	movs	r3, #0
 80096f8:	6363      	str	r3, [r4, #52]	; 0x34
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	2300      	movs	r3, #0
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f043 0308 	orr.w	r3, r3, #8
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	b94b      	cbnz	r3, 800972a <__swsetup_r+0x9a>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800971c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009720:	d003      	beq.n	800972a <__swsetup_r+0x9a>
 8009722:	4621      	mov	r1, r4
 8009724:	4630      	mov	r0, r6
 8009726:	f001 fbed 	bl	800af04 <__smakebuf_r>
 800972a:	89a0      	ldrh	r0, [r4, #12]
 800972c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009730:	f010 0301 	ands.w	r3, r0, #1
 8009734:	d00a      	beq.n	800974c <__swsetup_r+0xbc>
 8009736:	2300      	movs	r3, #0
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	6963      	ldr	r3, [r4, #20]
 800973c:	425b      	negs	r3, r3
 800973e:	61a3      	str	r3, [r4, #24]
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	b943      	cbnz	r3, 8009756 <__swsetup_r+0xc6>
 8009744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009748:	d1ba      	bne.n	80096c0 <__swsetup_r+0x30>
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	0781      	lsls	r1, r0, #30
 800974e:	bf58      	it	pl
 8009750:	6963      	ldrpl	r3, [r4, #20]
 8009752:	60a3      	str	r3, [r4, #8]
 8009754:	e7f4      	b.n	8009740 <__swsetup_r+0xb0>
 8009756:	2000      	movs	r0, #0
 8009758:	e7f7      	b.n	800974a <__swsetup_r+0xba>
 800975a:	bf00      	nop
 800975c:	2000000c 	.word	0x2000000c
 8009760:	0800c8a8 	.word	0x0800c8a8
 8009764:	0800c8c8 	.word	0x0800c8c8
 8009768:	0800c888 	.word	0x0800c888

0800976c <quorem>:
 800976c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	6903      	ldr	r3, [r0, #16]
 8009772:	690c      	ldr	r4, [r1, #16]
 8009774:	42a3      	cmp	r3, r4
 8009776:	4607      	mov	r7, r0
 8009778:	f2c0 8081 	blt.w	800987e <quorem+0x112>
 800977c:	3c01      	subs	r4, #1
 800977e:	f101 0814 	add.w	r8, r1, #20
 8009782:	f100 0514 	add.w	r5, r0, #20
 8009786:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009790:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009794:	3301      	adds	r3, #1
 8009796:	429a      	cmp	r2, r3
 8009798:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800979c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80097a4:	d331      	bcc.n	800980a <quorem+0x9e>
 80097a6:	f04f 0e00 	mov.w	lr, #0
 80097aa:	4640      	mov	r0, r8
 80097ac:	46ac      	mov	ip, r5
 80097ae:	46f2      	mov	sl, lr
 80097b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80097b4:	b293      	uxth	r3, r2
 80097b6:	fb06 e303 	mla	r3, r6, r3, lr
 80097ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097be:	b29b      	uxth	r3, r3
 80097c0:	ebaa 0303 	sub.w	r3, sl, r3
 80097c4:	0c12      	lsrs	r2, r2, #16
 80097c6:	f8dc a000 	ldr.w	sl, [ip]
 80097ca:	fb06 e202 	mla	r2, r6, r2, lr
 80097ce:	fa13 f38a 	uxtah	r3, r3, sl
 80097d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097d6:	fa1f fa82 	uxth.w	sl, r2
 80097da:	f8dc 2000 	ldr.w	r2, [ip]
 80097de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80097e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ec:	4581      	cmp	r9, r0
 80097ee:	f84c 3b04 	str.w	r3, [ip], #4
 80097f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097f6:	d2db      	bcs.n	80097b0 <quorem+0x44>
 80097f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80097fc:	b92b      	cbnz	r3, 800980a <quorem+0x9e>
 80097fe:	9b01      	ldr	r3, [sp, #4]
 8009800:	3b04      	subs	r3, #4
 8009802:	429d      	cmp	r5, r3
 8009804:	461a      	mov	r2, r3
 8009806:	d32e      	bcc.n	8009866 <quorem+0xfa>
 8009808:	613c      	str	r4, [r7, #16]
 800980a:	4638      	mov	r0, r7
 800980c:	f001 feaa 	bl	800b564 <__mcmp>
 8009810:	2800      	cmp	r0, #0
 8009812:	db24      	blt.n	800985e <quorem+0xf2>
 8009814:	3601      	adds	r6, #1
 8009816:	4628      	mov	r0, r5
 8009818:	f04f 0c00 	mov.w	ip, #0
 800981c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009820:	f8d0 e000 	ldr.w	lr, [r0]
 8009824:	b293      	uxth	r3, r2
 8009826:	ebac 0303 	sub.w	r3, ip, r3
 800982a:	0c12      	lsrs	r2, r2, #16
 800982c:	fa13 f38e 	uxtah	r3, r3, lr
 8009830:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009834:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009838:	b29b      	uxth	r3, r3
 800983a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800983e:	45c1      	cmp	r9, r8
 8009840:	f840 3b04 	str.w	r3, [r0], #4
 8009844:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009848:	d2e8      	bcs.n	800981c <quorem+0xb0>
 800984a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800984e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009852:	b922      	cbnz	r2, 800985e <quorem+0xf2>
 8009854:	3b04      	subs	r3, #4
 8009856:	429d      	cmp	r5, r3
 8009858:	461a      	mov	r2, r3
 800985a:	d30a      	bcc.n	8009872 <quorem+0x106>
 800985c:	613c      	str	r4, [r7, #16]
 800985e:	4630      	mov	r0, r6
 8009860:	b003      	add	sp, #12
 8009862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	3b04      	subs	r3, #4
 800986a:	2a00      	cmp	r2, #0
 800986c:	d1cc      	bne.n	8009808 <quorem+0x9c>
 800986e:	3c01      	subs	r4, #1
 8009870:	e7c7      	b.n	8009802 <quorem+0x96>
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	3b04      	subs	r3, #4
 8009876:	2a00      	cmp	r2, #0
 8009878:	d1f0      	bne.n	800985c <quorem+0xf0>
 800987a:	3c01      	subs	r4, #1
 800987c:	e7eb      	b.n	8009856 <quorem+0xea>
 800987e:	2000      	movs	r0, #0
 8009880:	e7ee      	b.n	8009860 <quorem+0xf4>
 8009882:	0000      	movs	r0, r0
 8009884:	0000      	movs	r0, r0
	...

08009888 <_dtoa_r>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	ed2d 8b02 	vpush	{d8}
 8009890:	ec57 6b10 	vmov	r6, r7, d0
 8009894:	b095      	sub	sp, #84	; 0x54
 8009896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009898:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800989c:	9105      	str	r1, [sp, #20]
 800989e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80098a2:	4604      	mov	r4, r0
 80098a4:	9209      	str	r2, [sp, #36]	; 0x24
 80098a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098a8:	b975      	cbnz	r5, 80098c8 <_dtoa_r+0x40>
 80098aa:	2010      	movs	r0, #16
 80098ac:	f001 fb6a 	bl	800af84 <malloc>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6260      	str	r0, [r4, #36]	; 0x24
 80098b4:	b920      	cbnz	r0, 80098c0 <_dtoa_r+0x38>
 80098b6:	4bb2      	ldr	r3, [pc, #712]	; (8009b80 <_dtoa_r+0x2f8>)
 80098b8:	21ea      	movs	r1, #234	; 0xea
 80098ba:	48b2      	ldr	r0, [pc, #712]	; (8009b84 <_dtoa_r+0x2fc>)
 80098bc:	f002 fc40 	bl	800c140 <__assert_func>
 80098c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098c4:	6005      	str	r5, [r0, #0]
 80098c6:	60c5      	str	r5, [r0, #12]
 80098c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ca:	6819      	ldr	r1, [r3, #0]
 80098cc:	b151      	cbz	r1, 80098e4 <_dtoa_r+0x5c>
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	604a      	str	r2, [r1, #4]
 80098d2:	2301      	movs	r3, #1
 80098d4:	4093      	lsls	r3, r2
 80098d6:	608b      	str	r3, [r1, #8]
 80098d8:	4620      	mov	r0, r4
 80098da:	f001 fbbb 	bl	800b054 <_Bfree>
 80098de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	1e3b      	subs	r3, r7, #0
 80098e6:	bfb9      	ittee	lt
 80098e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098ec:	9303      	strlt	r3, [sp, #12]
 80098ee:	2300      	movge	r3, #0
 80098f0:	f8c8 3000 	strge.w	r3, [r8]
 80098f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80098f8:	4ba3      	ldr	r3, [pc, #652]	; (8009b88 <_dtoa_r+0x300>)
 80098fa:	bfbc      	itt	lt
 80098fc:	2201      	movlt	r2, #1
 80098fe:	f8c8 2000 	strlt.w	r2, [r8]
 8009902:	ea33 0309 	bics.w	r3, r3, r9
 8009906:	d11b      	bne.n	8009940 <_dtoa_r+0xb8>
 8009908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800990a:	f242 730f 	movw	r3, #9999	; 0x270f
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009914:	4333      	orrs	r3, r6
 8009916:	f000 857a 	beq.w	800a40e <_dtoa_r+0xb86>
 800991a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800991c:	b963      	cbnz	r3, 8009938 <_dtoa_r+0xb0>
 800991e:	4b9b      	ldr	r3, [pc, #620]	; (8009b8c <_dtoa_r+0x304>)
 8009920:	e024      	b.n	800996c <_dtoa_r+0xe4>
 8009922:	4b9b      	ldr	r3, [pc, #620]	; (8009b90 <_dtoa_r+0x308>)
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	3308      	adds	r3, #8
 8009928:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	9800      	ldr	r0, [sp, #0]
 800992e:	b015      	add	sp, #84	; 0x54
 8009930:	ecbd 8b02 	vpop	{d8}
 8009934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009938:	4b94      	ldr	r3, [pc, #592]	; (8009b8c <_dtoa_r+0x304>)
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	3303      	adds	r3, #3
 800993e:	e7f3      	b.n	8009928 <_dtoa_r+0xa0>
 8009940:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009944:	2200      	movs	r2, #0
 8009946:	ec51 0b17 	vmov	r0, r1, d7
 800994a:	2300      	movs	r3, #0
 800994c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009950:	f7f7 f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8009954:	4680      	mov	r8, r0
 8009956:	b158      	cbz	r0, 8009970 <_dtoa_r+0xe8>
 8009958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800995a:	2301      	movs	r3, #1
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 8551 	beq.w	800a408 <_dtoa_r+0xb80>
 8009966:	488b      	ldr	r0, [pc, #556]	; (8009b94 <_dtoa_r+0x30c>)
 8009968:	6018      	str	r0, [r3, #0]
 800996a:	1e43      	subs	r3, r0, #1
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	e7dd      	b.n	800992c <_dtoa_r+0xa4>
 8009970:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009974:	aa12      	add	r2, sp, #72	; 0x48
 8009976:	a913      	add	r1, sp, #76	; 0x4c
 8009978:	4620      	mov	r0, r4
 800997a:	f001 ff13 	bl	800b7a4 <__d2b>
 800997e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009982:	4683      	mov	fp, r0
 8009984:	2d00      	cmp	r5, #0
 8009986:	d07c      	beq.n	8009a82 <_dtoa_r+0x1fa>
 8009988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800998e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009992:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009996:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800999a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800999e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099a2:	4b7d      	ldr	r3, [pc, #500]	; (8009b98 <_dtoa_r+0x310>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fc7d 	bl	80002a8 <__aeabi_dsub>
 80099ae:	a36e      	add	r3, pc, #440	; (adr r3, 8009b68 <_dtoa_r+0x2e0>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f7f6 fe30 	bl	8000618 <__aeabi_dmul>
 80099b8:	a36d      	add	r3, pc, #436	; (adr r3, 8009b70 <_dtoa_r+0x2e8>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc75 	bl	80002ac <__adddf3>
 80099c2:	4606      	mov	r6, r0
 80099c4:	4628      	mov	r0, r5
 80099c6:	460f      	mov	r7, r1
 80099c8:	f7f6 fdbc 	bl	8000544 <__aeabi_i2d>
 80099cc:	a36a      	add	r3, pc, #424	; (adr r3, 8009b78 <_dtoa_r+0x2f0>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7f6 fe21 	bl	8000618 <__aeabi_dmul>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4630      	mov	r0, r6
 80099dc:	4639      	mov	r1, r7
 80099de:	f7f6 fc65 	bl	80002ac <__adddf3>
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	f7f7 f8c7 	bl	8000b78 <__aeabi_d2iz>
 80099ea:	2200      	movs	r2, #0
 80099ec:	4682      	mov	sl, r0
 80099ee:	2300      	movs	r3, #0
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f7 f882 	bl	8000afc <__aeabi_dcmplt>
 80099f8:	b148      	cbz	r0, 8009a0e <_dtoa_r+0x186>
 80099fa:	4650      	mov	r0, sl
 80099fc:	f7f6 fda2 	bl	8000544 <__aeabi_i2d>
 8009a00:	4632      	mov	r2, r6
 8009a02:	463b      	mov	r3, r7
 8009a04:	f7f7 f870 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a08:	b908      	cbnz	r0, 8009a0e <_dtoa_r+0x186>
 8009a0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a0e:	f1ba 0f16 	cmp.w	sl, #22
 8009a12:	d854      	bhi.n	8009abe <_dtoa_r+0x236>
 8009a14:	4b61      	ldr	r3, [pc, #388]	; (8009b9c <_dtoa_r+0x314>)
 8009a16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a22:	f7f7 f86b 	bl	8000afc <__aeabi_dcmplt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d04b      	beq.n	8009ac2 <_dtoa_r+0x23a>
 8009a2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a2e:	2300      	movs	r3, #0
 8009a30:	930e      	str	r3, [sp, #56]	; 0x38
 8009a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a34:	1b5d      	subs	r5, r3, r5
 8009a36:	1e6b      	subs	r3, r5, #1
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	bf43      	ittte	mi
 8009a3c:	2300      	movmi	r3, #0
 8009a3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009a42:	9304      	strmi	r3, [sp, #16]
 8009a44:	f04f 0800 	movpl.w	r8, #0
 8009a48:	f1ba 0f00 	cmp.w	sl, #0
 8009a4c:	db3b      	blt.n	8009ac6 <_dtoa_r+0x23e>
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009a54:	4453      	add	r3, sl
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9306      	str	r3, [sp, #24]
 8009a5c:	9b05      	ldr	r3, [sp, #20]
 8009a5e:	2b09      	cmp	r3, #9
 8009a60:	d869      	bhi.n	8009b36 <_dtoa_r+0x2ae>
 8009a62:	2b05      	cmp	r3, #5
 8009a64:	bfc4      	itt	gt
 8009a66:	3b04      	subgt	r3, #4
 8009a68:	9305      	strgt	r3, [sp, #20]
 8009a6a:	9b05      	ldr	r3, [sp, #20]
 8009a6c:	f1a3 0302 	sub.w	r3, r3, #2
 8009a70:	bfcc      	ite	gt
 8009a72:	2500      	movgt	r5, #0
 8009a74:	2501      	movle	r5, #1
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d869      	bhi.n	8009b4e <_dtoa_r+0x2c6>
 8009a7a:	e8df f003 	tbb	[pc, r3]
 8009a7e:	4e2c      	.short	0x4e2c
 8009a80:	5a4c      	.short	0x5a4c
 8009a82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a86:	441d      	add	r5, r3
 8009a88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	bfc1      	itttt	gt
 8009a90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a98:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009aa0:	bfda      	itte	le
 8009aa2:	f1c3 0320 	rsble	r3, r3, #32
 8009aa6:	fa06 f003 	lslle.w	r0, r6, r3
 8009aaa:	4318      	orrgt	r0, r3
 8009aac:	f7f6 fd3a 	bl	8000524 <__aeabi_ui2d>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ab8:	3d01      	subs	r5, #1
 8009aba:	9310      	str	r3, [sp, #64]	; 0x40
 8009abc:	e771      	b.n	80099a2 <_dtoa_r+0x11a>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e7b6      	b.n	8009a30 <_dtoa_r+0x1a8>
 8009ac2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ac4:	e7b5      	b.n	8009a32 <_dtoa_r+0x1aa>
 8009ac6:	f1ca 0300 	rsb	r3, sl, #0
 8009aca:	9306      	str	r3, [sp, #24]
 8009acc:	2300      	movs	r3, #0
 8009ace:	eba8 080a 	sub.w	r8, r8, sl
 8009ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ad4:	e7c2      	b.n	8009a5c <_dtoa_r+0x1d4>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dc39      	bgt.n	8009b54 <_dtoa_r+0x2cc>
 8009ae0:	f04f 0901 	mov.w	r9, #1
 8009ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ae8:	464b      	mov	r3, r9
 8009aea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009aee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009af0:	2200      	movs	r2, #0
 8009af2:	6042      	str	r2, [r0, #4]
 8009af4:	2204      	movs	r2, #4
 8009af6:	f102 0614 	add.w	r6, r2, #20
 8009afa:	429e      	cmp	r6, r3
 8009afc:	6841      	ldr	r1, [r0, #4]
 8009afe:	d92f      	bls.n	8009b60 <_dtoa_r+0x2d8>
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 fa67 	bl	800afd4 <_Balloc>
 8009b06:	9000      	str	r0, [sp, #0]
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d14b      	bne.n	8009ba4 <_dtoa_r+0x31c>
 8009b0c:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <_dtoa_r+0x318>)
 8009b0e:	4602      	mov	r2, r0
 8009b10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b14:	e6d1      	b.n	80098ba <_dtoa_r+0x32>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e7de      	b.n	8009ad8 <_dtoa_r+0x250>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9308      	str	r3, [sp, #32]
 8009b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b20:	eb0a 0903 	add.w	r9, sl, r3
 8009b24:	f109 0301 	add.w	r3, r9, #1
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	bfb8      	it	lt
 8009b2e:	2301      	movlt	r3, #1
 8009b30:	e7dd      	b.n	8009aee <_dtoa_r+0x266>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e7f2      	b.n	8009b1c <_dtoa_r+0x294>
 8009b36:	2501      	movs	r5, #1
 8009b38:	2300      	movs	r3, #0
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	9508      	str	r5, [sp, #32]
 8009b3e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b48:	2312      	movs	r3, #18
 8009b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4c:	e7cf      	b.n	8009aee <_dtoa_r+0x266>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	9308      	str	r3, [sp, #32]
 8009b52:	e7f4      	b.n	8009b3e <_dtoa_r+0x2b6>
 8009b54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009b58:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	e7c6      	b.n	8009aee <_dtoa_r+0x266>
 8009b60:	3101      	adds	r1, #1
 8009b62:	6041      	str	r1, [r0, #4]
 8009b64:	0052      	lsls	r2, r2, #1
 8009b66:	e7c6      	b.n	8009af6 <_dtoa_r+0x26e>
 8009b68:	636f4361 	.word	0x636f4361
 8009b6c:	3fd287a7 	.word	0x3fd287a7
 8009b70:	8b60c8b3 	.word	0x8b60c8b3
 8009b74:	3fc68a28 	.word	0x3fc68a28
 8009b78:	509f79fb 	.word	0x509f79fb
 8009b7c:	3fd34413 	.word	0x3fd34413
 8009b80:	0800c7fe 	.word	0x0800c7fe
 8009b84:	0800c815 	.word	0x0800c815
 8009b88:	7ff00000 	.word	0x7ff00000
 8009b8c:	0800c7fa 	.word	0x0800c7fa
 8009b90:	0800c7f1 	.word	0x0800c7f1
 8009b94:	0800c671 	.word	0x0800c671
 8009b98:	3ff80000 	.word	0x3ff80000
 8009b9c:	0800c9f0 	.word	0x0800c9f0
 8009ba0:	0800c874 	.word	0x0800c874
 8009ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ba6:	9a00      	ldr	r2, [sp, #0]
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	2b0e      	cmp	r3, #14
 8009bae:	f200 80ad 	bhi.w	8009d0c <_dtoa_r+0x484>
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	f000 80aa 	beq.w	8009d0c <_dtoa_r+0x484>
 8009bb8:	f1ba 0f00 	cmp.w	sl, #0
 8009bbc:	dd36      	ble.n	8009c2c <_dtoa_r+0x3a4>
 8009bbe:	4ac3      	ldr	r2, [pc, #780]	; (8009ecc <_dtoa_r+0x644>)
 8009bc0:	f00a 030f 	and.w	r3, sl, #15
 8009bc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bc8:	ed93 7b00 	vldr	d7, [r3]
 8009bcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009bd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009bd4:	eeb0 8a47 	vmov.f32	s16, s14
 8009bd8:	eef0 8a67 	vmov.f32	s17, s15
 8009bdc:	d016      	beq.n	8009c0c <_dtoa_r+0x384>
 8009bde:	4bbc      	ldr	r3, [pc, #752]	; (8009ed0 <_dtoa_r+0x648>)
 8009be0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009be8:	f7f6 fe40 	bl	800086c <__aeabi_ddiv>
 8009bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf0:	f007 070f 	and.w	r7, r7, #15
 8009bf4:	2503      	movs	r5, #3
 8009bf6:	4eb6      	ldr	r6, [pc, #728]	; (8009ed0 <_dtoa_r+0x648>)
 8009bf8:	b957      	cbnz	r7, 8009c10 <_dtoa_r+0x388>
 8009bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bfe:	ec53 2b18 	vmov	r2, r3, d8
 8009c02:	f7f6 fe33 	bl	800086c <__aeabi_ddiv>
 8009c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c0a:	e029      	b.n	8009c60 <_dtoa_r+0x3d8>
 8009c0c:	2502      	movs	r5, #2
 8009c0e:	e7f2      	b.n	8009bf6 <_dtoa_r+0x36e>
 8009c10:	07f9      	lsls	r1, r7, #31
 8009c12:	d508      	bpl.n	8009c26 <_dtoa_r+0x39e>
 8009c14:	ec51 0b18 	vmov	r0, r1, d8
 8009c18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c1c:	f7f6 fcfc 	bl	8000618 <__aeabi_dmul>
 8009c20:	ec41 0b18 	vmov	d8, r0, r1
 8009c24:	3501      	adds	r5, #1
 8009c26:	107f      	asrs	r7, r7, #1
 8009c28:	3608      	adds	r6, #8
 8009c2a:	e7e5      	b.n	8009bf8 <_dtoa_r+0x370>
 8009c2c:	f000 80a6 	beq.w	8009d7c <_dtoa_r+0x4f4>
 8009c30:	f1ca 0600 	rsb	r6, sl, #0
 8009c34:	4ba5      	ldr	r3, [pc, #660]	; (8009ecc <_dtoa_r+0x644>)
 8009c36:	4fa6      	ldr	r7, [pc, #664]	; (8009ed0 <_dtoa_r+0x648>)
 8009c38:	f006 020f 	and.w	r2, r6, #15
 8009c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c48:	f7f6 fce6 	bl	8000618 <__aeabi_dmul>
 8009c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c50:	1136      	asrs	r6, r6, #4
 8009c52:	2300      	movs	r3, #0
 8009c54:	2502      	movs	r5, #2
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	f040 8085 	bne.w	8009d66 <_dtoa_r+0x4de>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1d2      	bne.n	8009c06 <_dtoa_r+0x37e>
 8009c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 808c 	beq.w	8009d80 <_dtoa_r+0x4f8>
 8009c68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c6c:	4b99      	ldr	r3, [pc, #612]	; (8009ed4 <_dtoa_r+0x64c>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 ff42 	bl	8000afc <__aeabi_dcmplt>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	f000 8081 	beq.w	8009d80 <_dtoa_r+0x4f8>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d07d      	beq.n	8009d80 <_dtoa_r+0x4f8>
 8009c84:	f1b9 0f00 	cmp.w	r9, #0
 8009c88:	dd3c      	ble.n	8009d04 <_dtoa_r+0x47c>
 8009c8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009c8e:	9307      	str	r3, [sp, #28]
 8009c90:	2200      	movs	r2, #0
 8009c92:	4b91      	ldr	r3, [pc, #580]	; (8009ed8 <_dtoa_r+0x650>)
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 fcbe 	bl	8000618 <__aeabi_dmul>
 8009c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009ca6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009caa:	4628      	mov	r0, r5
 8009cac:	f7f6 fc4a 	bl	8000544 <__aeabi_i2d>
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	f7f6 fcb0 	bl	8000618 <__aeabi_dmul>
 8009cb8:	4b88      	ldr	r3, [pc, #544]	; (8009edc <_dtoa_r+0x654>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f7f6 faf6 	bl	80002ac <__adddf3>
 8009cc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d15c      	bne.n	8009d8a <_dtoa_r+0x502>
 8009cd0:	4b83      	ldr	r3, [pc, #524]	; (8009ee0 <_dtoa_r+0x658>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	f7f6 fae6 	bl	80002a8 <__aeabi_dsub>
 8009cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	460f      	mov	r7, r1
 8009ce4:	f7f6 ff28 	bl	8000b38 <__aeabi_dcmpgt>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f040 8296 	bne.w	800a21a <_dtoa_r+0x992>
 8009cee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 feff 	bl	8000afc <__aeabi_dcmplt>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f040 8288 	bne.w	800a214 <_dtoa_r+0x98c>
 8009d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f2c0 8158 	blt.w	8009fc4 <_dtoa_r+0x73c>
 8009d14:	f1ba 0f0e 	cmp.w	sl, #14
 8009d18:	f300 8154 	bgt.w	8009fc4 <_dtoa_r+0x73c>
 8009d1c:	4b6b      	ldr	r3, [pc, #428]	; (8009ecc <_dtoa_r+0x644>)
 8009d1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f280 80e3 	bge.w	8009ef4 <_dtoa_r+0x66c>
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f300 80df 	bgt.w	8009ef4 <_dtoa_r+0x66c>
 8009d36:	f040 826d 	bne.w	800a214 <_dtoa_r+0x98c>
 8009d3a:	4b69      	ldr	r3, [pc, #420]	; (8009ee0 <_dtoa_r+0x658>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4649      	mov	r1, r9
 8009d42:	f7f6 fc69 	bl	8000618 <__aeabi_dmul>
 8009d46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d4a:	f7f6 feeb 	bl	8000b24 <__aeabi_dcmpge>
 8009d4e:	9e01      	ldr	r6, [sp, #4]
 8009d50:	4637      	mov	r7, r6
 8009d52:	2800      	cmp	r0, #0
 8009d54:	f040 8243 	bne.w	800a1de <_dtoa_r+0x956>
 8009d58:	9d00      	ldr	r5, [sp, #0]
 8009d5a:	2331      	movs	r3, #49	; 0x31
 8009d5c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d60:	f10a 0a01 	add.w	sl, sl, #1
 8009d64:	e23f      	b.n	800a1e6 <_dtoa_r+0x95e>
 8009d66:	07f2      	lsls	r2, r6, #31
 8009d68:	d505      	bpl.n	8009d76 <_dtoa_r+0x4ee>
 8009d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d6e:	f7f6 fc53 	bl	8000618 <__aeabi_dmul>
 8009d72:	3501      	adds	r5, #1
 8009d74:	2301      	movs	r3, #1
 8009d76:	1076      	asrs	r6, r6, #1
 8009d78:	3708      	adds	r7, #8
 8009d7a:	e76c      	b.n	8009c56 <_dtoa_r+0x3ce>
 8009d7c:	2502      	movs	r5, #2
 8009d7e:	e76f      	b.n	8009c60 <_dtoa_r+0x3d8>
 8009d80:	9b01      	ldr	r3, [sp, #4]
 8009d82:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d86:	930c      	str	r3, [sp, #48]	; 0x30
 8009d88:	e78d      	b.n	8009ca6 <_dtoa_r+0x41e>
 8009d8a:	9900      	ldr	r1, [sp, #0]
 8009d8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d90:	4b4e      	ldr	r3, [pc, #312]	; (8009ecc <_dtoa_r+0x644>)
 8009d92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d96:	4401      	add	r1, r0
 8009d98:	9102      	str	r1, [sp, #8]
 8009d9a:	9908      	ldr	r1, [sp, #32]
 8009d9c:	eeb0 8a47 	vmov.f32	s16, s14
 8009da0:	eef0 8a67 	vmov.f32	s17, s15
 8009da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dac:	2900      	cmp	r1, #0
 8009dae:	d045      	beq.n	8009e3c <_dtoa_r+0x5b4>
 8009db0:	494c      	ldr	r1, [pc, #304]	; (8009ee4 <_dtoa_r+0x65c>)
 8009db2:	2000      	movs	r0, #0
 8009db4:	f7f6 fd5a 	bl	800086c <__aeabi_ddiv>
 8009db8:	ec53 2b18 	vmov	r2, r3, d8
 8009dbc:	f7f6 fa74 	bl	80002a8 <__aeabi_dsub>
 8009dc0:	9d00      	ldr	r5, [sp, #0]
 8009dc2:	ec41 0b18 	vmov	d8, r0, r1
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f7f6 fed5 	bl	8000b78 <__aeabi_d2iz>
 8009dce:	900c      	str	r0, [sp, #48]	; 0x30
 8009dd0:	f7f6 fbb8 	bl	8000544 <__aeabi_i2d>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 fa64 	bl	80002a8 <__aeabi_dsub>
 8009de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009de2:	3330      	adds	r3, #48	; 0x30
 8009de4:	f805 3b01 	strb.w	r3, [r5], #1
 8009de8:	ec53 2b18 	vmov	r2, r3, d8
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	f7f6 fe84 	bl	8000afc <__aeabi_dcmplt>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d165      	bne.n	8009ec4 <_dtoa_r+0x63c>
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	4935      	ldr	r1, [pc, #212]	; (8009ed4 <_dtoa_r+0x64c>)
 8009dfe:	2000      	movs	r0, #0
 8009e00:	f7f6 fa52 	bl	80002a8 <__aeabi_dsub>
 8009e04:	ec53 2b18 	vmov	r2, r3, d8
 8009e08:	f7f6 fe78 	bl	8000afc <__aeabi_dcmplt>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	f040 80b9 	bne.w	8009f84 <_dtoa_r+0x6fc>
 8009e12:	9b02      	ldr	r3, [sp, #8]
 8009e14:	429d      	cmp	r5, r3
 8009e16:	f43f af75 	beq.w	8009d04 <_dtoa_r+0x47c>
 8009e1a:	4b2f      	ldr	r3, [pc, #188]	; (8009ed8 <_dtoa_r+0x650>)
 8009e1c:	ec51 0b18 	vmov	r0, r1, d8
 8009e20:	2200      	movs	r2, #0
 8009e22:	f7f6 fbf9 	bl	8000618 <__aeabi_dmul>
 8009e26:	4b2c      	ldr	r3, [pc, #176]	; (8009ed8 <_dtoa_r+0x650>)
 8009e28:	ec41 0b18 	vmov	d8, r0, r1
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4630      	mov	r0, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	f7f6 fbf1 	bl	8000618 <__aeabi_dmul>
 8009e36:	4606      	mov	r6, r0
 8009e38:	460f      	mov	r7, r1
 8009e3a:	e7c4      	b.n	8009dc6 <_dtoa_r+0x53e>
 8009e3c:	ec51 0b17 	vmov	r0, r1, d7
 8009e40:	f7f6 fbea 	bl	8000618 <__aeabi_dmul>
 8009e44:	9b02      	ldr	r3, [sp, #8]
 8009e46:	9d00      	ldr	r5, [sp, #0]
 8009e48:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4a:	ec41 0b18 	vmov	d8, r0, r1
 8009e4e:	4639      	mov	r1, r7
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7f6 fe91 	bl	8000b78 <__aeabi_d2iz>
 8009e56:	9011      	str	r0, [sp, #68]	; 0x44
 8009e58:	f7f6 fb74 	bl	8000544 <__aeabi_i2d>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fa20 	bl	80002a8 <__aeabi_dsub>
 8009e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e6a:	3330      	adds	r3, #48	; 0x30
 8009e6c:	f805 3b01 	strb.w	r3, [r5], #1
 8009e70:	9b02      	ldr	r3, [sp, #8]
 8009e72:	429d      	cmp	r5, r3
 8009e74:	4606      	mov	r6, r0
 8009e76:	460f      	mov	r7, r1
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	d134      	bne.n	8009ee8 <_dtoa_r+0x660>
 8009e7e:	4b19      	ldr	r3, [pc, #100]	; (8009ee4 <_dtoa_r+0x65c>)
 8009e80:	ec51 0b18 	vmov	r0, r1, d8
 8009e84:	f7f6 fa12 	bl	80002ac <__adddf3>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fe52 	bl	8000b38 <__aeabi_dcmpgt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d175      	bne.n	8009f84 <_dtoa_r+0x6fc>
 8009e98:	ec53 2b18 	vmov	r2, r3, d8
 8009e9c:	4911      	ldr	r1, [pc, #68]	; (8009ee4 <_dtoa_r+0x65c>)
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f7f6 fa02 	bl	80002a8 <__aeabi_dsub>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 fe26 	bl	8000afc <__aeabi_dcmplt>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	f43f af27 	beq.w	8009d04 <_dtoa_r+0x47c>
 8009eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009eb8:	1e6b      	subs	r3, r5, #1
 8009eba:	930c      	str	r3, [sp, #48]	; 0x30
 8009ebc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ec0:	2b30      	cmp	r3, #48	; 0x30
 8009ec2:	d0f8      	beq.n	8009eb6 <_dtoa_r+0x62e>
 8009ec4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ec8:	e04a      	b.n	8009f60 <_dtoa_r+0x6d8>
 8009eca:	bf00      	nop
 8009ecc:	0800c9f0 	.word	0x0800c9f0
 8009ed0:	0800c9c8 	.word	0x0800c9c8
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	40240000 	.word	0x40240000
 8009edc:	401c0000 	.word	0x401c0000
 8009ee0:	40140000 	.word	0x40140000
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	4baf      	ldr	r3, [pc, #700]	; (800a1a8 <_dtoa_r+0x920>)
 8009eea:	f7f6 fb95 	bl	8000618 <__aeabi_dmul>
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	e7ac      	b.n	8009e4e <_dtoa_r+0x5c6>
 8009ef4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ef8:	9d00      	ldr	r5, [sp, #0]
 8009efa:	4642      	mov	r2, r8
 8009efc:	464b      	mov	r3, r9
 8009efe:	4630      	mov	r0, r6
 8009f00:	4639      	mov	r1, r7
 8009f02:	f7f6 fcb3 	bl	800086c <__aeabi_ddiv>
 8009f06:	f7f6 fe37 	bl	8000b78 <__aeabi_d2iz>
 8009f0a:	9002      	str	r0, [sp, #8]
 8009f0c:	f7f6 fb1a 	bl	8000544 <__aeabi_i2d>
 8009f10:	4642      	mov	r2, r8
 8009f12:	464b      	mov	r3, r9
 8009f14:	f7f6 fb80 	bl	8000618 <__aeabi_dmul>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	4639      	mov	r1, r7
 8009f20:	f7f6 f9c2 	bl	80002a8 <__aeabi_dsub>
 8009f24:	9e02      	ldr	r6, [sp, #8]
 8009f26:	9f01      	ldr	r7, [sp, #4]
 8009f28:	3630      	adds	r6, #48	; 0x30
 8009f2a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f2e:	9e00      	ldr	r6, [sp, #0]
 8009f30:	1bae      	subs	r6, r5, r6
 8009f32:	42b7      	cmp	r7, r6
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	d137      	bne.n	8009faa <_dtoa_r+0x722>
 8009f3a:	f7f6 f9b7 	bl	80002ac <__adddf3>
 8009f3e:	4642      	mov	r2, r8
 8009f40:	464b      	mov	r3, r9
 8009f42:	4606      	mov	r6, r0
 8009f44:	460f      	mov	r7, r1
 8009f46:	f7f6 fdf7 	bl	8000b38 <__aeabi_dcmpgt>
 8009f4a:	b9c8      	cbnz	r0, 8009f80 <_dtoa_r+0x6f8>
 8009f4c:	4642      	mov	r2, r8
 8009f4e:	464b      	mov	r3, r9
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f58:	b110      	cbz	r0, 8009f60 <_dtoa_r+0x6d8>
 8009f5a:	9b02      	ldr	r3, [sp, #8]
 8009f5c:	07d9      	lsls	r1, r3, #31
 8009f5e:	d40f      	bmi.n	8009f80 <_dtoa_r+0x6f8>
 8009f60:	4620      	mov	r0, r4
 8009f62:	4659      	mov	r1, fp
 8009f64:	f001 f876 	bl	800b054 <_Bfree>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	702b      	strb	r3, [r5, #0]
 8009f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f6e:	f10a 0001 	add.w	r0, sl, #1
 8009f72:	6018      	str	r0, [r3, #0]
 8009f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f43f acd8 	beq.w	800992c <_dtoa_r+0xa4>
 8009f7c:	601d      	str	r5, [r3, #0]
 8009f7e:	e4d5      	b.n	800992c <_dtoa_r+0xa4>
 8009f80:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f84:	462b      	mov	r3, r5
 8009f86:	461d      	mov	r5, r3
 8009f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f8c:	2a39      	cmp	r2, #57	; 0x39
 8009f8e:	d108      	bne.n	8009fa2 <_dtoa_r+0x71a>
 8009f90:	9a00      	ldr	r2, [sp, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d1f7      	bne.n	8009f86 <_dtoa_r+0x6fe>
 8009f96:	9a07      	ldr	r2, [sp, #28]
 8009f98:	9900      	ldr	r1, [sp, #0]
 8009f9a:	3201      	adds	r2, #1
 8009f9c:	9207      	str	r2, [sp, #28]
 8009f9e:	2230      	movs	r2, #48	; 0x30
 8009fa0:	700a      	strb	r2, [r1, #0]
 8009fa2:	781a      	ldrb	r2, [r3, #0]
 8009fa4:	3201      	adds	r2, #1
 8009fa6:	701a      	strb	r2, [r3, #0]
 8009fa8:	e78c      	b.n	8009ec4 <_dtoa_r+0x63c>
 8009faa:	4b7f      	ldr	r3, [pc, #508]	; (800a1a8 <_dtoa_r+0x920>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 fb33 	bl	8000618 <__aeabi_dmul>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	f7f6 fd95 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d09b      	beq.n	8009efa <_dtoa_r+0x672>
 8009fc2:	e7cd      	b.n	8009f60 <_dtoa_r+0x6d8>
 8009fc4:	9a08      	ldr	r2, [sp, #32]
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	f000 80c4 	beq.w	800a154 <_dtoa_r+0x8cc>
 8009fcc:	9a05      	ldr	r2, [sp, #20]
 8009fce:	2a01      	cmp	r2, #1
 8009fd0:	f300 80a8 	bgt.w	800a124 <_dtoa_r+0x89c>
 8009fd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	f000 80a0 	beq.w	800a11c <_dtoa_r+0x894>
 8009fdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fe0:	9e06      	ldr	r6, [sp, #24]
 8009fe2:	4645      	mov	r5, r8
 8009fe4:	9a04      	ldr	r2, [sp, #16]
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	441a      	add	r2, r3
 8009fea:	4620      	mov	r0, r4
 8009fec:	4498      	add	r8, r3
 8009fee:	9204      	str	r2, [sp, #16]
 8009ff0:	f001 f936 	bl	800b260 <__i2b>
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	dd0b      	ble.n	800a012 <_dtoa_r+0x78a>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dd08      	ble.n	800a012 <_dtoa_r+0x78a>
 800a000:	42ab      	cmp	r3, r5
 800a002:	9a04      	ldr	r2, [sp, #16]
 800a004:	bfa8      	it	ge
 800a006:	462b      	movge	r3, r5
 800a008:	eba8 0803 	sub.w	r8, r8, r3
 800a00c:	1aed      	subs	r5, r5, r3
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	9b06      	ldr	r3, [sp, #24]
 800a014:	b1fb      	cbz	r3, 800a056 <_dtoa_r+0x7ce>
 800a016:	9b08      	ldr	r3, [sp, #32]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 809f 	beq.w	800a15c <_dtoa_r+0x8d4>
 800a01e:	2e00      	cmp	r6, #0
 800a020:	dd11      	ble.n	800a046 <_dtoa_r+0x7be>
 800a022:	4639      	mov	r1, r7
 800a024:	4632      	mov	r2, r6
 800a026:	4620      	mov	r0, r4
 800a028:	f001 f9d6 	bl	800b3d8 <__pow5mult>
 800a02c:	465a      	mov	r2, fp
 800a02e:	4601      	mov	r1, r0
 800a030:	4607      	mov	r7, r0
 800a032:	4620      	mov	r0, r4
 800a034:	f001 f92a 	bl	800b28c <__multiply>
 800a038:	4659      	mov	r1, fp
 800a03a:	9007      	str	r0, [sp, #28]
 800a03c:	4620      	mov	r0, r4
 800a03e:	f001 f809 	bl	800b054 <_Bfree>
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	469b      	mov	fp, r3
 800a046:	9b06      	ldr	r3, [sp, #24]
 800a048:	1b9a      	subs	r2, r3, r6
 800a04a:	d004      	beq.n	800a056 <_dtoa_r+0x7ce>
 800a04c:	4659      	mov	r1, fp
 800a04e:	4620      	mov	r0, r4
 800a050:	f001 f9c2 	bl	800b3d8 <__pow5mult>
 800a054:	4683      	mov	fp, r0
 800a056:	2101      	movs	r1, #1
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 f901 	bl	800b260 <__i2b>
 800a05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a060:	2b00      	cmp	r3, #0
 800a062:	4606      	mov	r6, r0
 800a064:	dd7c      	ble.n	800a160 <_dtoa_r+0x8d8>
 800a066:	461a      	mov	r2, r3
 800a068:	4601      	mov	r1, r0
 800a06a:	4620      	mov	r0, r4
 800a06c:	f001 f9b4 	bl	800b3d8 <__pow5mult>
 800a070:	9b05      	ldr	r3, [sp, #20]
 800a072:	2b01      	cmp	r3, #1
 800a074:	4606      	mov	r6, r0
 800a076:	dd76      	ble.n	800a166 <_dtoa_r+0x8de>
 800a078:	2300      	movs	r3, #0
 800a07a:	9306      	str	r3, [sp, #24]
 800a07c:	6933      	ldr	r3, [r6, #16]
 800a07e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a082:	6918      	ldr	r0, [r3, #16]
 800a084:	f001 f89c 	bl	800b1c0 <__hi0bits>
 800a088:	f1c0 0020 	rsb	r0, r0, #32
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	4418      	add	r0, r3
 800a090:	f010 001f 	ands.w	r0, r0, #31
 800a094:	f000 8086 	beq.w	800a1a4 <_dtoa_r+0x91c>
 800a098:	f1c0 0320 	rsb	r3, r0, #32
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	dd7f      	ble.n	800a1a0 <_dtoa_r+0x918>
 800a0a0:	f1c0 001c 	rsb	r0, r0, #28
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	4403      	add	r3, r0
 800a0a8:	4480      	add	r8, r0
 800a0aa:	4405      	add	r5, r0
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	f1b8 0f00 	cmp.w	r8, #0
 800a0b2:	dd05      	ble.n	800a0c0 <_dtoa_r+0x838>
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	4642      	mov	r2, r8
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f001 f9e7 	bl	800b48c <__lshift>
 800a0be:	4683      	mov	fp, r0
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd05      	ble.n	800a0d2 <_dtoa_r+0x84a>
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f001 f9de 	bl	800b48c <__lshift>
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d069      	beq.n	800a1ac <_dtoa_r+0x924>
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f001 fa42 	bl	800b564 <__mcmp>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	da63      	bge.n	800a1ac <_dtoa_r+0x924>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4659      	mov	r1, fp
 800a0e8:	220a      	movs	r2, #10
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 ffd4 	bl	800b098 <__multadd>
 800a0f0:	9b08      	ldr	r3, [sp, #32]
 800a0f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0f6:	4683      	mov	fp, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 818f 	beq.w	800a41c <_dtoa_r+0xb94>
 800a0fe:	4639      	mov	r1, r7
 800a100:	2300      	movs	r3, #0
 800a102:	220a      	movs	r2, #10
 800a104:	4620      	mov	r0, r4
 800a106:	f000 ffc7 	bl	800b098 <__multadd>
 800a10a:	f1b9 0f00 	cmp.w	r9, #0
 800a10e:	4607      	mov	r7, r0
 800a110:	f300 808e 	bgt.w	800a230 <_dtoa_r+0x9a8>
 800a114:	9b05      	ldr	r3, [sp, #20]
 800a116:	2b02      	cmp	r3, #2
 800a118:	dc50      	bgt.n	800a1bc <_dtoa_r+0x934>
 800a11a:	e089      	b.n	800a230 <_dtoa_r+0x9a8>
 800a11c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a122:	e75d      	b.n	8009fe0 <_dtoa_r+0x758>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	1e5e      	subs	r6, r3, #1
 800a128:	9b06      	ldr	r3, [sp, #24]
 800a12a:	42b3      	cmp	r3, r6
 800a12c:	bfbf      	itttt	lt
 800a12e:	9b06      	ldrlt	r3, [sp, #24]
 800a130:	9606      	strlt	r6, [sp, #24]
 800a132:	1af2      	sublt	r2, r6, r3
 800a134:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a136:	bfb6      	itet	lt
 800a138:	189b      	addlt	r3, r3, r2
 800a13a:	1b9e      	subge	r6, r3, r6
 800a13c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a13e:	9b01      	ldr	r3, [sp, #4]
 800a140:	bfb8      	it	lt
 800a142:	2600      	movlt	r6, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfb5      	itete	lt
 800a148:	eba8 0503 	sublt.w	r5, r8, r3
 800a14c:	9b01      	ldrge	r3, [sp, #4]
 800a14e:	2300      	movlt	r3, #0
 800a150:	4645      	movge	r5, r8
 800a152:	e747      	b.n	8009fe4 <_dtoa_r+0x75c>
 800a154:	9e06      	ldr	r6, [sp, #24]
 800a156:	9f08      	ldr	r7, [sp, #32]
 800a158:	4645      	mov	r5, r8
 800a15a:	e74c      	b.n	8009ff6 <_dtoa_r+0x76e>
 800a15c:	9a06      	ldr	r2, [sp, #24]
 800a15e:	e775      	b.n	800a04c <_dtoa_r+0x7c4>
 800a160:	9b05      	ldr	r3, [sp, #20]
 800a162:	2b01      	cmp	r3, #1
 800a164:	dc18      	bgt.n	800a198 <_dtoa_r+0x910>
 800a166:	9b02      	ldr	r3, [sp, #8]
 800a168:	b9b3      	cbnz	r3, 800a198 <_dtoa_r+0x910>
 800a16a:	9b03      	ldr	r3, [sp, #12]
 800a16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a170:	b9a3      	cbnz	r3, 800a19c <_dtoa_r+0x914>
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a178:	0d1b      	lsrs	r3, r3, #20
 800a17a:	051b      	lsls	r3, r3, #20
 800a17c:	b12b      	cbz	r3, 800a18a <_dtoa_r+0x902>
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	3301      	adds	r3, #1
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	f108 0801 	add.w	r8, r8, #1
 800a188:	2301      	movs	r3, #1
 800a18a:	9306      	str	r3, [sp, #24]
 800a18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f47f af74 	bne.w	800a07c <_dtoa_r+0x7f4>
 800a194:	2001      	movs	r0, #1
 800a196:	e779      	b.n	800a08c <_dtoa_r+0x804>
 800a198:	2300      	movs	r3, #0
 800a19a:	e7f6      	b.n	800a18a <_dtoa_r+0x902>
 800a19c:	9b02      	ldr	r3, [sp, #8]
 800a19e:	e7f4      	b.n	800a18a <_dtoa_r+0x902>
 800a1a0:	d085      	beq.n	800a0ae <_dtoa_r+0x826>
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	301c      	adds	r0, #28
 800a1a6:	e77d      	b.n	800a0a4 <_dtoa_r+0x81c>
 800a1a8:	40240000 	.word	0x40240000
 800a1ac:	9b01      	ldr	r3, [sp, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	dc38      	bgt.n	800a224 <_dtoa_r+0x99c>
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	dd35      	ble.n	800a224 <_dtoa_r+0x99c>
 800a1b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1bc:	f1b9 0f00 	cmp.w	r9, #0
 800a1c0:	d10d      	bne.n	800a1de <_dtoa_r+0x956>
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	2205      	movs	r2, #5
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 ff65 	bl	800b098 <__multadd>
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f001 f9c6 	bl	800b564 <__mcmp>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f73f adbd 	bgt.w	8009d58 <_dtoa_r+0x4d0>
 800a1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e0:	9d00      	ldr	r5, [sp, #0]
 800a1e2:	ea6f 0a03 	mvn.w	sl, r3
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 ff31 	bl	800b054 <_Bfree>
 800a1f2:	2f00      	cmp	r7, #0
 800a1f4:	f43f aeb4 	beq.w	8009f60 <_dtoa_r+0x6d8>
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	d005      	beq.n	800a20a <_dtoa_r+0x982>
 800a1fe:	45b8      	cmp	r8, r7
 800a200:	d003      	beq.n	800a20a <_dtoa_r+0x982>
 800a202:	4641      	mov	r1, r8
 800a204:	4620      	mov	r0, r4
 800a206:	f000 ff25 	bl	800b054 <_Bfree>
 800a20a:	4639      	mov	r1, r7
 800a20c:	4620      	mov	r0, r4
 800a20e:	f000 ff21 	bl	800b054 <_Bfree>
 800a212:	e6a5      	b.n	8009f60 <_dtoa_r+0x6d8>
 800a214:	2600      	movs	r6, #0
 800a216:	4637      	mov	r7, r6
 800a218:	e7e1      	b.n	800a1de <_dtoa_r+0x956>
 800a21a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a21c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a220:	4637      	mov	r7, r6
 800a222:	e599      	b.n	8009d58 <_dtoa_r+0x4d0>
 800a224:	9b08      	ldr	r3, [sp, #32]
 800a226:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80fd 	beq.w	800a42a <_dtoa_r+0xba2>
 800a230:	2d00      	cmp	r5, #0
 800a232:	dd05      	ble.n	800a240 <_dtoa_r+0x9b8>
 800a234:	4639      	mov	r1, r7
 800a236:	462a      	mov	r2, r5
 800a238:	4620      	mov	r0, r4
 800a23a:	f001 f927 	bl	800b48c <__lshift>
 800a23e:	4607      	mov	r7, r0
 800a240:	9b06      	ldr	r3, [sp, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d05c      	beq.n	800a300 <_dtoa_r+0xa78>
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 fec3 	bl	800afd4 <_Balloc>
 800a24e:	4605      	mov	r5, r0
 800a250:	b928      	cbnz	r0, 800a25e <_dtoa_r+0x9d6>
 800a252:	4b80      	ldr	r3, [pc, #512]	; (800a454 <_dtoa_r+0xbcc>)
 800a254:	4602      	mov	r2, r0
 800a256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a25a:	f7ff bb2e 	b.w	80098ba <_dtoa_r+0x32>
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	3202      	adds	r2, #2
 800a262:	0092      	lsls	r2, r2, #2
 800a264:	f107 010c 	add.w	r1, r7, #12
 800a268:	300c      	adds	r0, #12
 800a26a:	f000 fea5 	bl	800afb8 <memcpy>
 800a26e:	2201      	movs	r2, #1
 800a270:	4629      	mov	r1, r5
 800a272:	4620      	mov	r0, r4
 800a274:	f001 f90a 	bl	800b48c <__lshift>
 800a278:	9b00      	ldr	r3, [sp, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	9b00      	ldr	r3, [sp, #0]
 800a280:	444b      	add	r3, r9
 800a282:	9307      	str	r3, [sp, #28]
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	46b8      	mov	r8, r7
 800a28c:	9306      	str	r3, [sp, #24]
 800a28e:	4607      	mov	r7, r0
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	4631      	mov	r1, r6
 800a294:	3b01      	subs	r3, #1
 800a296:	4658      	mov	r0, fp
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	f7ff fa67 	bl	800976c <quorem>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	3330      	adds	r3, #48	; 0x30
 800a2a2:	9004      	str	r0, [sp, #16]
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	9308      	str	r3, [sp, #32]
 800a2aa:	f001 f95b 	bl	800b564 <__mcmp>
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	4681      	mov	r9, r0
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f001 f971 	bl	800b59c <__mdiff>
 800a2ba:	68c2      	ldr	r2, [r0, #12]
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	4605      	mov	r5, r0
 800a2c0:	bb02      	cbnz	r2, 800a304 <_dtoa_r+0xa7c>
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	4658      	mov	r0, fp
 800a2c6:	f001 f94d 	bl	800b564 <__mcmp>
 800a2ca:	9b08      	ldr	r3, [sp, #32]
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a2d6:	f000 febd 	bl	800b054 <_Bfree>
 800a2da:	9b05      	ldr	r3, [sp, #20]
 800a2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2de:	9d01      	ldr	r5, [sp, #4]
 800a2e0:	ea43 0102 	orr.w	r1, r3, r2
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	d10d      	bne.n	800a308 <_dtoa_r+0xa80>
 800a2ec:	2b39      	cmp	r3, #57	; 0x39
 800a2ee:	d029      	beq.n	800a344 <_dtoa_r+0xabc>
 800a2f0:	f1b9 0f00 	cmp.w	r9, #0
 800a2f4:	dd01      	ble.n	800a2fa <_dtoa_r+0xa72>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	3331      	adds	r3, #49	; 0x31
 800a2fa:	9a02      	ldr	r2, [sp, #8]
 800a2fc:	7013      	strb	r3, [r2, #0]
 800a2fe:	e774      	b.n	800a1ea <_dtoa_r+0x962>
 800a300:	4638      	mov	r0, r7
 800a302:	e7b9      	b.n	800a278 <_dtoa_r+0x9f0>
 800a304:	2201      	movs	r2, #1
 800a306:	e7e2      	b.n	800a2ce <_dtoa_r+0xa46>
 800a308:	f1b9 0f00 	cmp.w	r9, #0
 800a30c:	db06      	blt.n	800a31c <_dtoa_r+0xa94>
 800a30e:	9905      	ldr	r1, [sp, #20]
 800a310:	ea41 0909 	orr.w	r9, r1, r9
 800a314:	9906      	ldr	r1, [sp, #24]
 800a316:	ea59 0101 	orrs.w	r1, r9, r1
 800a31a:	d120      	bne.n	800a35e <_dtoa_r+0xad6>
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	ddec      	ble.n	800a2fa <_dtoa_r+0xa72>
 800a320:	4659      	mov	r1, fp
 800a322:	2201      	movs	r2, #1
 800a324:	4620      	mov	r0, r4
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	f001 f8b0 	bl	800b48c <__lshift>
 800a32c:	4631      	mov	r1, r6
 800a32e:	4683      	mov	fp, r0
 800a330:	f001 f918 	bl	800b564 <__mcmp>
 800a334:	2800      	cmp	r0, #0
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	dc02      	bgt.n	800a340 <_dtoa_r+0xab8>
 800a33a:	d1de      	bne.n	800a2fa <_dtoa_r+0xa72>
 800a33c:	07da      	lsls	r2, r3, #31
 800a33e:	d5dc      	bpl.n	800a2fa <_dtoa_r+0xa72>
 800a340:	2b39      	cmp	r3, #57	; 0x39
 800a342:	d1d8      	bne.n	800a2f6 <_dtoa_r+0xa6e>
 800a344:	9a02      	ldr	r2, [sp, #8]
 800a346:	2339      	movs	r3, #57	; 0x39
 800a348:	7013      	strb	r3, [r2, #0]
 800a34a:	462b      	mov	r3, r5
 800a34c:	461d      	mov	r5, r3
 800a34e:	3b01      	subs	r3, #1
 800a350:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a354:	2a39      	cmp	r2, #57	; 0x39
 800a356:	d050      	beq.n	800a3fa <_dtoa_r+0xb72>
 800a358:	3201      	adds	r2, #1
 800a35a:	701a      	strb	r2, [r3, #0]
 800a35c:	e745      	b.n	800a1ea <_dtoa_r+0x962>
 800a35e:	2a00      	cmp	r2, #0
 800a360:	dd03      	ble.n	800a36a <_dtoa_r+0xae2>
 800a362:	2b39      	cmp	r3, #57	; 0x39
 800a364:	d0ee      	beq.n	800a344 <_dtoa_r+0xabc>
 800a366:	3301      	adds	r3, #1
 800a368:	e7c7      	b.n	800a2fa <_dtoa_r+0xa72>
 800a36a:	9a01      	ldr	r2, [sp, #4]
 800a36c:	9907      	ldr	r1, [sp, #28]
 800a36e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a372:	428a      	cmp	r2, r1
 800a374:	d02a      	beq.n	800a3cc <_dtoa_r+0xb44>
 800a376:	4659      	mov	r1, fp
 800a378:	2300      	movs	r3, #0
 800a37a:	220a      	movs	r2, #10
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 fe8b 	bl	800b098 <__multadd>
 800a382:	45b8      	cmp	r8, r7
 800a384:	4683      	mov	fp, r0
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	f04f 020a 	mov.w	r2, #10
 800a38e:	4641      	mov	r1, r8
 800a390:	4620      	mov	r0, r4
 800a392:	d107      	bne.n	800a3a4 <_dtoa_r+0xb1c>
 800a394:	f000 fe80 	bl	800b098 <__multadd>
 800a398:	4680      	mov	r8, r0
 800a39a:	4607      	mov	r7, r0
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	e775      	b.n	800a290 <_dtoa_r+0xa08>
 800a3a4:	f000 fe78 	bl	800b098 <__multadd>
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	220a      	movs	r2, #10
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fe71 	bl	800b098 <__multadd>
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	e7f0      	b.n	800a39c <_dtoa_r+0xb14>
 800a3ba:	f1b9 0f00 	cmp.w	r9, #0
 800a3be:	9a00      	ldr	r2, [sp, #0]
 800a3c0:	bfcc      	ite	gt
 800a3c2:	464d      	movgt	r5, r9
 800a3c4:	2501      	movle	r5, #1
 800a3c6:	4415      	add	r5, r2
 800a3c8:	f04f 0800 	mov.w	r8, #0
 800a3cc:	4659      	mov	r1, fp
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	f001 f85a 	bl	800b48c <__lshift>
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4683      	mov	fp, r0
 800a3dc:	f001 f8c2 	bl	800b564 <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	dcb2      	bgt.n	800a34a <_dtoa_r+0xac2>
 800a3e4:	d102      	bne.n	800a3ec <_dtoa_r+0xb64>
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	07db      	lsls	r3, r3, #31
 800a3ea:	d4ae      	bmi.n	800a34a <_dtoa_r+0xac2>
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3f4:	2a30      	cmp	r2, #48	; 0x30
 800a3f6:	d0fa      	beq.n	800a3ee <_dtoa_r+0xb66>
 800a3f8:	e6f7      	b.n	800a1ea <_dtoa_r+0x962>
 800a3fa:	9a00      	ldr	r2, [sp, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d1a5      	bne.n	800a34c <_dtoa_r+0xac4>
 800a400:	f10a 0a01 	add.w	sl, sl, #1
 800a404:	2331      	movs	r3, #49	; 0x31
 800a406:	e779      	b.n	800a2fc <_dtoa_r+0xa74>
 800a408:	4b13      	ldr	r3, [pc, #76]	; (800a458 <_dtoa_r+0xbd0>)
 800a40a:	f7ff baaf 	b.w	800996c <_dtoa_r+0xe4>
 800a40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a410:	2b00      	cmp	r3, #0
 800a412:	f47f aa86 	bne.w	8009922 <_dtoa_r+0x9a>
 800a416:	4b11      	ldr	r3, [pc, #68]	; (800a45c <_dtoa_r+0xbd4>)
 800a418:	f7ff baa8 	b.w	800996c <_dtoa_r+0xe4>
 800a41c:	f1b9 0f00 	cmp.w	r9, #0
 800a420:	dc03      	bgt.n	800a42a <_dtoa_r+0xba2>
 800a422:	9b05      	ldr	r3, [sp, #20]
 800a424:	2b02      	cmp	r3, #2
 800a426:	f73f aec9 	bgt.w	800a1bc <_dtoa_r+0x934>
 800a42a:	9d00      	ldr	r5, [sp, #0]
 800a42c:	4631      	mov	r1, r6
 800a42e:	4658      	mov	r0, fp
 800a430:	f7ff f99c 	bl	800976c <quorem>
 800a434:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a438:	f805 3b01 	strb.w	r3, [r5], #1
 800a43c:	9a00      	ldr	r2, [sp, #0]
 800a43e:	1aaa      	subs	r2, r5, r2
 800a440:	4591      	cmp	r9, r2
 800a442:	ddba      	ble.n	800a3ba <_dtoa_r+0xb32>
 800a444:	4659      	mov	r1, fp
 800a446:	2300      	movs	r3, #0
 800a448:	220a      	movs	r2, #10
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 fe24 	bl	800b098 <__multadd>
 800a450:	4683      	mov	fp, r0
 800a452:	e7eb      	b.n	800a42c <_dtoa_r+0xba4>
 800a454:	0800c874 	.word	0x0800c874
 800a458:	0800c670 	.word	0x0800c670
 800a45c:	0800c7f1 	.word	0x0800c7f1

0800a460 <__sflush_r>:
 800a460:	898a      	ldrh	r2, [r1, #12]
 800a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	4605      	mov	r5, r0
 800a468:	0710      	lsls	r0, r2, #28
 800a46a:	460c      	mov	r4, r1
 800a46c:	d458      	bmi.n	800a520 <__sflush_r+0xc0>
 800a46e:	684b      	ldr	r3, [r1, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	dc05      	bgt.n	800a480 <__sflush_r+0x20>
 800a474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	dc02      	bgt.n	800a480 <__sflush_r+0x20>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a482:	2e00      	cmp	r6, #0
 800a484:	d0f9      	beq.n	800a47a <__sflush_r+0x1a>
 800a486:	2300      	movs	r3, #0
 800a488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a48c:	682f      	ldr	r7, [r5, #0]
 800a48e:	602b      	str	r3, [r5, #0]
 800a490:	d032      	beq.n	800a4f8 <__sflush_r+0x98>
 800a492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	075a      	lsls	r2, r3, #29
 800a498:	d505      	bpl.n	800a4a6 <__sflush_r+0x46>
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	1ac0      	subs	r0, r0, r3
 800a49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4a0:	b10b      	cbz	r3, 800a4a6 <__sflush_r+0x46>
 800a4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4a4:	1ac0      	subs	r0, r0, r3
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ac:	6a21      	ldr	r1, [r4, #32]
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	47b0      	blx	r6
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	d106      	bne.n	800a4c6 <__sflush_r+0x66>
 800a4b8:	6829      	ldr	r1, [r5, #0]
 800a4ba:	291d      	cmp	r1, #29
 800a4bc:	d82c      	bhi.n	800a518 <__sflush_r+0xb8>
 800a4be:	4a2a      	ldr	r2, [pc, #168]	; (800a568 <__sflush_r+0x108>)
 800a4c0:	40ca      	lsrs	r2, r1
 800a4c2:	07d6      	lsls	r6, r2, #31
 800a4c4:	d528      	bpl.n	800a518 <__sflush_r+0xb8>
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	6062      	str	r2, [r4, #4]
 800a4ca:	04d9      	lsls	r1, r3, #19
 800a4cc:	6922      	ldr	r2, [r4, #16]
 800a4ce:	6022      	str	r2, [r4, #0]
 800a4d0:	d504      	bpl.n	800a4dc <__sflush_r+0x7c>
 800a4d2:	1c42      	adds	r2, r0, #1
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0x7a>
 800a4d6:	682b      	ldr	r3, [r5, #0]
 800a4d8:	b903      	cbnz	r3, 800a4dc <__sflush_r+0x7c>
 800a4da:	6560      	str	r0, [r4, #84]	; 0x54
 800a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4de:	602f      	str	r7, [r5, #0]
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	d0ca      	beq.n	800a47a <__sflush_r+0x1a>
 800a4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e8:	4299      	cmp	r1, r3
 800a4ea:	d002      	beq.n	800a4f2 <__sflush_r+0x92>
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f001 fa3b 	bl	800b968 <_free_r>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a4f6:	e7c1      	b.n	800a47c <__sflush_r+0x1c>
 800a4f8:	6a21      	ldr	r1, [r4, #32]
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b0      	blx	r6
 800a500:	1c41      	adds	r1, r0, #1
 800a502:	d1c7      	bne.n	800a494 <__sflush_r+0x34>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0c4      	beq.n	800a494 <__sflush_r+0x34>
 800a50a:	2b1d      	cmp	r3, #29
 800a50c:	d001      	beq.n	800a512 <__sflush_r+0xb2>
 800a50e:	2b16      	cmp	r3, #22
 800a510:	d101      	bne.n	800a516 <__sflush_r+0xb6>
 800a512:	602f      	str	r7, [r5, #0]
 800a514:	e7b1      	b.n	800a47a <__sflush_r+0x1a>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51c:	81a3      	strh	r3, [r4, #12]
 800a51e:	e7ad      	b.n	800a47c <__sflush_r+0x1c>
 800a520:	690f      	ldr	r7, [r1, #16]
 800a522:	2f00      	cmp	r7, #0
 800a524:	d0a9      	beq.n	800a47a <__sflush_r+0x1a>
 800a526:	0793      	lsls	r3, r2, #30
 800a528:	680e      	ldr	r6, [r1, #0]
 800a52a:	bf08      	it	eq
 800a52c:	694b      	ldreq	r3, [r1, #20]
 800a52e:	600f      	str	r7, [r1, #0]
 800a530:	bf18      	it	ne
 800a532:	2300      	movne	r3, #0
 800a534:	eba6 0807 	sub.w	r8, r6, r7
 800a538:	608b      	str	r3, [r1, #8]
 800a53a:	f1b8 0f00 	cmp.w	r8, #0
 800a53e:	dd9c      	ble.n	800a47a <__sflush_r+0x1a>
 800a540:	6a21      	ldr	r1, [r4, #32]
 800a542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a544:	4643      	mov	r3, r8
 800a546:	463a      	mov	r2, r7
 800a548:	4628      	mov	r0, r5
 800a54a:	47b0      	blx	r6
 800a54c:	2800      	cmp	r0, #0
 800a54e:	dc06      	bgt.n	800a55e <__sflush_r+0xfe>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a55c:	e78e      	b.n	800a47c <__sflush_r+0x1c>
 800a55e:	4407      	add	r7, r0
 800a560:	eba8 0800 	sub.w	r8, r8, r0
 800a564:	e7e9      	b.n	800a53a <__sflush_r+0xda>
 800a566:	bf00      	nop
 800a568:	20400001 	.word	0x20400001

0800a56c <_fflush_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	690b      	ldr	r3, [r1, #16]
 800a570:	4605      	mov	r5, r0
 800a572:	460c      	mov	r4, r1
 800a574:	b913      	cbnz	r3, 800a57c <_fflush_r+0x10>
 800a576:	2500      	movs	r5, #0
 800a578:	4628      	mov	r0, r5
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	b118      	cbz	r0, 800a586 <_fflush_r+0x1a>
 800a57e:	6983      	ldr	r3, [r0, #24]
 800a580:	b90b      	cbnz	r3, 800a586 <_fflush_r+0x1a>
 800a582:	f000 f887 	bl	800a694 <__sinit>
 800a586:	4b14      	ldr	r3, [pc, #80]	; (800a5d8 <_fflush_r+0x6c>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	d11b      	bne.n	800a5c4 <_fflush_r+0x58>
 800a58c:	686c      	ldr	r4, [r5, #4]
 800a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0ef      	beq.n	800a576 <_fflush_r+0xa>
 800a596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a598:	07d0      	lsls	r0, r2, #31
 800a59a:	d404      	bmi.n	800a5a6 <_fflush_r+0x3a>
 800a59c:	0599      	lsls	r1, r3, #22
 800a59e:	d402      	bmi.n	800a5a6 <_fflush_r+0x3a>
 800a5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a2:	f000 fc88 	bl	800aeb6 <__retarget_lock_acquire_recursive>
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	f7ff ff59 	bl	800a460 <__sflush_r>
 800a5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b0:	07da      	lsls	r2, r3, #31
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	d4e0      	bmi.n	800a578 <_fflush_r+0xc>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	059b      	lsls	r3, r3, #22
 800a5ba:	d4dd      	bmi.n	800a578 <_fflush_r+0xc>
 800a5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5be:	f000 fc7b 	bl	800aeb8 <__retarget_lock_release_recursive>
 800a5c2:	e7d9      	b.n	800a578 <_fflush_r+0xc>
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <_fflush_r+0x70>)
 800a5c6:	429c      	cmp	r4, r3
 800a5c8:	d101      	bne.n	800a5ce <_fflush_r+0x62>
 800a5ca:	68ac      	ldr	r4, [r5, #8]
 800a5cc:	e7df      	b.n	800a58e <_fflush_r+0x22>
 800a5ce:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <_fflush_r+0x74>)
 800a5d0:	429c      	cmp	r4, r3
 800a5d2:	bf08      	it	eq
 800a5d4:	68ec      	ldreq	r4, [r5, #12]
 800a5d6:	e7da      	b.n	800a58e <_fflush_r+0x22>
 800a5d8:	0800c8a8 	.word	0x0800c8a8
 800a5dc:	0800c8c8 	.word	0x0800c8c8
 800a5e0:	0800c888 	.word	0x0800c888

0800a5e4 <std>:
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5f2:	6083      	str	r3, [r0, #8]
 800a5f4:	8181      	strh	r1, [r0, #12]
 800a5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5f8:	81c2      	strh	r2, [r0, #14]
 800a5fa:	6183      	str	r3, [r0, #24]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	2208      	movs	r2, #8
 800a600:	305c      	adds	r0, #92	; 0x5c
 800a602:	f7fd fa09 	bl	8007a18 <memset>
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <std+0x38>)
 800a608:	6263      	str	r3, [r4, #36]	; 0x24
 800a60a:	4b05      	ldr	r3, [pc, #20]	; (800a620 <std+0x3c>)
 800a60c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a60e:	4b05      	ldr	r3, [pc, #20]	; (800a624 <std+0x40>)
 800a610:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <std+0x44>)
 800a614:	6224      	str	r4, [r4, #32]
 800a616:	6323      	str	r3, [r4, #48]	; 0x30
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	bf00      	nop
 800a61c:	0800c059 	.word	0x0800c059
 800a620:	0800c07b 	.word	0x0800c07b
 800a624:	0800c0b3 	.word	0x0800c0b3
 800a628:	0800c0d7 	.word	0x0800c0d7

0800a62c <_cleanup_r>:
 800a62c:	4901      	ldr	r1, [pc, #4]	; (800a634 <_cleanup_r+0x8>)
 800a62e:	f000 b8af 	b.w	800a790 <_fwalk_reent>
 800a632:	bf00      	nop
 800a634:	0800a56d 	.word	0x0800a56d

0800a638 <__sfmoreglue>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	1e4a      	subs	r2, r1, #1
 800a63c:	2568      	movs	r5, #104	; 0x68
 800a63e:	4355      	muls	r5, r2
 800a640:	460e      	mov	r6, r1
 800a642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a646:	f001 f9df 	bl	800ba08 <_malloc_r>
 800a64a:	4604      	mov	r4, r0
 800a64c:	b140      	cbz	r0, 800a660 <__sfmoreglue+0x28>
 800a64e:	2100      	movs	r1, #0
 800a650:	e9c0 1600 	strd	r1, r6, [r0]
 800a654:	300c      	adds	r0, #12
 800a656:	60a0      	str	r0, [r4, #8]
 800a658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a65c:	f7fd f9dc 	bl	8007a18 <memset>
 800a660:	4620      	mov	r0, r4
 800a662:	bd70      	pop	{r4, r5, r6, pc}

0800a664 <__sfp_lock_acquire>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__sfp_lock_acquire+0x8>)
 800a666:	f000 bc26 	b.w	800aeb6 <__retarget_lock_acquire_recursive>
 800a66a:	bf00      	nop
 800a66c:	20000438 	.word	0x20000438

0800a670 <__sfp_lock_release>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__sfp_lock_release+0x8>)
 800a672:	f000 bc21 	b.w	800aeb8 <__retarget_lock_release_recursive>
 800a676:	bf00      	nop
 800a678:	20000438 	.word	0x20000438

0800a67c <__sinit_lock_acquire>:
 800a67c:	4801      	ldr	r0, [pc, #4]	; (800a684 <__sinit_lock_acquire+0x8>)
 800a67e:	f000 bc1a 	b.w	800aeb6 <__retarget_lock_acquire_recursive>
 800a682:	bf00      	nop
 800a684:	20000433 	.word	0x20000433

0800a688 <__sinit_lock_release>:
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <__sinit_lock_release+0x8>)
 800a68a:	f000 bc15 	b.w	800aeb8 <__retarget_lock_release_recursive>
 800a68e:	bf00      	nop
 800a690:	20000433 	.word	0x20000433

0800a694 <__sinit>:
 800a694:	b510      	push	{r4, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	f7ff fff0 	bl	800a67c <__sinit_lock_acquire>
 800a69c:	69a3      	ldr	r3, [r4, #24]
 800a69e:	b11b      	cbz	r3, 800a6a8 <__sinit+0x14>
 800a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a4:	f7ff bff0 	b.w	800a688 <__sinit_lock_release>
 800a6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <__sinit+0x68>)
 800a6b0:	4a13      	ldr	r2, [pc, #76]	; (800a700 <__sinit+0x6c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6b6:	42a3      	cmp	r3, r4
 800a6b8:	bf04      	itt	eq
 800a6ba:	2301      	moveq	r3, #1
 800a6bc:	61a3      	streq	r3, [r4, #24]
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 f820 	bl	800a704 <__sfp>
 800a6c4:	6060      	str	r0, [r4, #4]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 f81c 	bl	800a704 <__sfp>
 800a6cc:	60a0      	str	r0, [r4, #8]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 f818 	bl	800a704 <__sfp>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	60e0      	str	r0, [r4, #12]
 800a6d8:	2104      	movs	r1, #4
 800a6da:	6860      	ldr	r0, [r4, #4]
 800a6dc:	f7ff ff82 	bl	800a5e4 <std>
 800a6e0:	68a0      	ldr	r0, [r4, #8]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	2109      	movs	r1, #9
 800a6e6:	f7ff ff7d 	bl	800a5e4 <std>
 800a6ea:	68e0      	ldr	r0, [r4, #12]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	2112      	movs	r1, #18
 800a6f0:	f7ff ff78 	bl	800a5e4 <std>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	61a3      	str	r3, [r4, #24]
 800a6f8:	e7d2      	b.n	800a6a0 <__sinit+0xc>
 800a6fa:	bf00      	nop
 800a6fc:	0800c65c 	.word	0x0800c65c
 800a700:	0800a62d 	.word	0x0800a62d

0800a704 <__sfp>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	4607      	mov	r7, r0
 800a708:	f7ff ffac 	bl	800a664 <__sfp_lock_acquire>
 800a70c:	4b1e      	ldr	r3, [pc, #120]	; (800a788 <__sfp+0x84>)
 800a70e:	681e      	ldr	r6, [r3, #0]
 800a710:	69b3      	ldr	r3, [r6, #24]
 800a712:	b913      	cbnz	r3, 800a71a <__sfp+0x16>
 800a714:	4630      	mov	r0, r6
 800a716:	f7ff ffbd 	bl	800a694 <__sinit>
 800a71a:	3648      	adds	r6, #72	; 0x48
 800a71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a720:	3b01      	subs	r3, #1
 800a722:	d503      	bpl.n	800a72c <__sfp+0x28>
 800a724:	6833      	ldr	r3, [r6, #0]
 800a726:	b30b      	cbz	r3, 800a76c <__sfp+0x68>
 800a728:	6836      	ldr	r6, [r6, #0]
 800a72a:	e7f7      	b.n	800a71c <__sfp+0x18>
 800a72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a730:	b9d5      	cbnz	r5, 800a768 <__sfp+0x64>
 800a732:	4b16      	ldr	r3, [pc, #88]	; (800a78c <__sfp+0x88>)
 800a734:	60e3      	str	r3, [r4, #12]
 800a736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a73a:	6665      	str	r5, [r4, #100]	; 0x64
 800a73c:	f000 fbba 	bl	800aeb4 <__retarget_lock_init_recursive>
 800a740:	f7ff ff96 	bl	800a670 <__sfp_lock_release>
 800a744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a74c:	6025      	str	r5, [r4, #0]
 800a74e:	61a5      	str	r5, [r4, #24]
 800a750:	2208      	movs	r2, #8
 800a752:	4629      	mov	r1, r5
 800a754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a758:	f7fd f95e 	bl	8007a18 <memset>
 800a75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a764:	4620      	mov	r0, r4
 800a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a768:	3468      	adds	r4, #104	; 0x68
 800a76a:	e7d9      	b.n	800a720 <__sfp+0x1c>
 800a76c:	2104      	movs	r1, #4
 800a76e:	4638      	mov	r0, r7
 800a770:	f7ff ff62 	bl	800a638 <__sfmoreglue>
 800a774:	4604      	mov	r4, r0
 800a776:	6030      	str	r0, [r6, #0]
 800a778:	2800      	cmp	r0, #0
 800a77a:	d1d5      	bne.n	800a728 <__sfp+0x24>
 800a77c:	f7ff ff78 	bl	800a670 <__sfp_lock_release>
 800a780:	230c      	movs	r3, #12
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	e7ee      	b.n	800a764 <__sfp+0x60>
 800a786:	bf00      	nop
 800a788:	0800c65c 	.word	0x0800c65c
 800a78c:	ffff0001 	.word	0xffff0001

0800a790 <_fwalk_reent>:
 800a790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a794:	4606      	mov	r6, r0
 800a796:	4688      	mov	r8, r1
 800a798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a79c:	2700      	movs	r7, #0
 800a79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a6:	d505      	bpl.n	800a7b4 <_fwalk_reent+0x24>
 800a7a8:	6824      	ldr	r4, [r4, #0]
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	d1f7      	bne.n	800a79e <_fwalk_reent+0xe>
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b4:	89ab      	ldrh	r3, [r5, #12]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d907      	bls.n	800a7ca <_fwalk_reent+0x3a>
 800a7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	d003      	beq.n	800a7ca <_fwalk_reent+0x3a>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	47c0      	blx	r8
 800a7c8:	4307      	orrs	r7, r0
 800a7ca:	3568      	adds	r5, #104	; 0x68
 800a7cc:	e7e9      	b.n	800a7a2 <_fwalk_reent+0x12>

0800a7ce <rshift>:
 800a7ce:	6903      	ldr	r3, [r0, #16]
 800a7d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7dc:	f100 0414 	add.w	r4, r0, #20
 800a7e0:	dd45      	ble.n	800a86e <rshift+0xa0>
 800a7e2:	f011 011f 	ands.w	r1, r1, #31
 800a7e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7ee:	d10c      	bne.n	800a80a <rshift+0x3c>
 800a7f0:	f100 0710 	add.w	r7, r0, #16
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	42b1      	cmp	r1, r6
 800a7f8:	d334      	bcc.n	800a864 <rshift+0x96>
 800a7fa:	1a9b      	subs	r3, r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	1eea      	subs	r2, r5, #3
 800a800:	4296      	cmp	r6, r2
 800a802:	bf38      	it	cc
 800a804:	2300      	movcc	r3, #0
 800a806:	4423      	add	r3, r4
 800a808:	e015      	b.n	800a836 <rshift+0x68>
 800a80a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a80e:	f1c1 0820 	rsb	r8, r1, #32
 800a812:	40cf      	lsrs	r7, r1
 800a814:	f105 0e04 	add.w	lr, r5, #4
 800a818:	46a1      	mov	r9, r4
 800a81a:	4576      	cmp	r6, lr
 800a81c:	46f4      	mov	ip, lr
 800a81e:	d815      	bhi.n	800a84c <rshift+0x7e>
 800a820:	1a9b      	subs	r3, r3, r2
 800a822:	009a      	lsls	r2, r3, #2
 800a824:	3a04      	subs	r2, #4
 800a826:	3501      	adds	r5, #1
 800a828:	42ae      	cmp	r6, r5
 800a82a:	bf38      	it	cc
 800a82c:	2200      	movcc	r2, #0
 800a82e:	18a3      	adds	r3, r4, r2
 800a830:	50a7      	str	r7, [r4, r2]
 800a832:	b107      	cbz	r7, 800a836 <rshift+0x68>
 800a834:	3304      	adds	r3, #4
 800a836:	1b1a      	subs	r2, r3, r4
 800a838:	42a3      	cmp	r3, r4
 800a83a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a83e:	bf08      	it	eq
 800a840:	2300      	moveq	r3, #0
 800a842:	6102      	str	r2, [r0, #16]
 800a844:	bf08      	it	eq
 800a846:	6143      	streq	r3, [r0, #20]
 800a848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a84c:	f8dc c000 	ldr.w	ip, [ip]
 800a850:	fa0c fc08 	lsl.w	ip, ip, r8
 800a854:	ea4c 0707 	orr.w	r7, ip, r7
 800a858:	f849 7b04 	str.w	r7, [r9], #4
 800a85c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a860:	40cf      	lsrs	r7, r1
 800a862:	e7da      	b.n	800a81a <rshift+0x4c>
 800a864:	f851 cb04 	ldr.w	ip, [r1], #4
 800a868:	f847 cf04 	str.w	ip, [r7, #4]!
 800a86c:	e7c3      	b.n	800a7f6 <rshift+0x28>
 800a86e:	4623      	mov	r3, r4
 800a870:	e7e1      	b.n	800a836 <rshift+0x68>

0800a872 <__hexdig_fun>:
 800a872:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a876:	2b09      	cmp	r3, #9
 800a878:	d802      	bhi.n	800a880 <__hexdig_fun+0xe>
 800a87a:	3820      	subs	r0, #32
 800a87c:	b2c0      	uxtb	r0, r0
 800a87e:	4770      	bx	lr
 800a880:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a884:	2b05      	cmp	r3, #5
 800a886:	d801      	bhi.n	800a88c <__hexdig_fun+0x1a>
 800a888:	3847      	subs	r0, #71	; 0x47
 800a88a:	e7f7      	b.n	800a87c <__hexdig_fun+0xa>
 800a88c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a890:	2b05      	cmp	r3, #5
 800a892:	d801      	bhi.n	800a898 <__hexdig_fun+0x26>
 800a894:	3827      	subs	r0, #39	; 0x27
 800a896:	e7f1      	b.n	800a87c <__hexdig_fun+0xa>
 800a898:	2000      	movs	r0, #0
 800a89a:	4770      	bx	lr

0800a89c <__gethex>:
 800a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a0:	ed2d 8b02 	vpush	{d8}
 800a8a4:	b089      	sub	sp, #36	; 0x24
 800a8a6:	ee08 0a10 	vmov	s16, r0
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	4bbc      	ldr	r3, [pc, #752]	; (800aba0 <__gethex+0x304>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	468b      	mov	fp, r1
 800a8b6:	4690      	mov	r8, r2
 800a8b8:	f7f5 fc9a 	bl	80001f0 <strlen>
 800a8bc:	9b01      	ldr	r3, [sp, #4]
 800a8be:	f8db 2000 	ldr.w	r2, [fp]
 800a8c2:	4403      	add	r3, r0
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a8ca:	9305      	str	r3, [sp, #20]
 800a8cc:	1c93      	adds	r3, r2, #2
 800a8ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a8d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a8d6:	32fe      	adds	r2, #254	; 0xfe
 800a8d8:	18d1      	adds	r1, r2, r3
 800a8da:	461f      	mov	r7, r3
 800a8dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a8e0:	9100      	str	r1, [sp, #0]
 800a8e2:	2830      	cmp	r0, #48	; 0x30
 800a8e4:	d0f8      	beq.n	800a8d8 <__gethex+0x3c>
 800a8e6:	f7ff ffc4 	bl	800a872 <__hexdig_fun>
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d13a      	bne.n	800a966 <__gethex+0xca>
 800a8f0:	9901      	ldr	r1, [sp, #4]
 800a8f2:	4652      	mov	r2, sl
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f001 fbf2 	bl	800c0de <strncmp>
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d168      	bne.n	800a9d2 <__gethex+0x136>
 800a900:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a904:	eb07 060a 	add.w	r6, r7, sl
 800a908:	f7ff ffb3 	bl	800a872 <__hexdig_fun>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d062      	beq.n	800a9d6 <__gethex+0x13a>
 800a910:	4633      	mov	r3, r6
 800a912:	7818      	ldrb	r0, [r3, #0]
 800a914:	2830      	cmp	r0, #48	; 0x30
 800a916:	461f      	mov	r7, r3
 800a918:	f103 0301 	add.w	r3, r3, #1
 800a91c:	d0f9      	beq.n	800a912 <__gethex+0x76>
 800a91e:	f7ff ffa8 	bl	800a872 <__hexdig_fun>
 800a922:	2301      	movs	r3, #1
 800a924:	fab0 f480 	clz	r4, r0
 800a928:	0964      	lsrs	r4, r4, #5
 800a92a:	4635      	mov	r5, r6
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	463a      	mov	r2, r7
 800a930:	4616      	mov	r6, r2
 800a932:	3201      	adds	r2, #1
 800a934:	7830      	ldrb	r0, [r6, #0]
 800a936:	f7ff ff9c 	bl	800a872 <__hexdig_fun>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d1f8      	bne.n	800a930 <__gethex+0x94>
 800a93e:	9901      	ldr	r1, [sp, #4]
 800a940:	4652      	mov	r2, sl
 800a942:	4630      	mov	r0, r6
 800a944:	f001 fbcb 	bl	800c0de <strncmp>
 800a948:	b980      	cbnz	r0, 800a96c <__gethex+0xd0>
 800a94a:	b94d      	cbnz	r5, 800a960 <__gethex+0xc4>
 800a94c:	eb06 050a 	add.w	r5, r6, sl
 800a950:	462a      	mov	r2, r5
 800a952:	4616      	mov	r6, r2
 800a954:	3201      	adds	r2, #1
 800a956:	7830      	ldrb	r0, [r6, #0]
 800a958:	f7ff ff8b 	bl	800a872 <__hexdig_fun>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d1f8      	bne.n	800a952 <__gethex+0xb6>
 800a960:	1bad      	subs	r5, r5, r6
 800a962:	00ad      	lsls	r5, r5, #2
 800a964:	e004      	b.n	800a970 <__gethex+0xd4>
 800a966:	2400      	movs	r4, #0
 800a968:	4625      	mov	r5, r4
 800a96a:	e7e0      	b.n	800a92e <__gethex+0x92>
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	d1f7      	bne.n	800a960 <__gethex+0xc4>
 800a970:	7833      	ldrb	r3, [r6, #0]
 800a972:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a976:	2b50      	cmp	r3, #80	; 0x50
 800a978:	d13b      	bne.n	800a9f2 <__gethex+0x156>
 800a97a:	7873      	ldrb	r3, [r6, #1]
 800a97c:	2b2b      	cmp	r3, #43	; 0x2b
 800a97e:	d02c      	beq.n	800a9da <__gethex+0x13e>
 800a980:	2b2d      	cmp	r3, #45	; 0x2d
 800a982:	d02e      	beq.n	800a9e2 <__gethex+0x146>
 800a984:	1c71      	adds	r1, r6, #1
 800a986:	f04f 0900 	mov.w	r9, #0
 800a98a:	7808      	ldrb	r0, [r1, #0]
 800a98c:	f7ff ff71 	bl	800a872 <__hexdig_fun>
 800a990:	1e43      	subs	r3, r0, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b18      	cmp	r3, #24
 800a996:	d82c      	bhi.n	800a9f2 <__gethex+0x156>
 800a998:	f1a0 0210 	sub.w	r2, r0, #16
 800a99c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9a0:	f7ff ff67 	bl	800a872 <__hexdig_fun>
 800a9a4:	1e43      	subs	r3, r0, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b18      	cmp	r3, #24
 800a9aa:	d91d      	bls.n	800a9e8 <__gethex+0x14c>
 800a9ac:	f1b9 0f00 	cmp.w	r9, #0
 800a9b0:	d000      	beq.n	800a9b4 <__gethex+0x118>
 800a9b2:	4252      	negs	r2, r2
 800a9b4:	4415      	add	r5, r2
 800a9b6:	f8cb 1000 	str.w	r1, [fp]
 800a9ba:	b1e4      	cbz	r4, 800a9f6 <__gethex+0x15a>
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	bf14      	ite	ne
 800a9c2:	2700      	movne	r7, #0
 800a9c4:	2706      	moveq	r7, #6
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	b009      	add	sp, #36	; 0x24
 800a9ca:	ecbd 8b02 	vpop	{d8}
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	463e      	mov	r6, r7
 800a9d4:	4625      	mov	r5, r4
 800a9d6:	2401      	movs	r4, #1
 800a9d8:	e7ca      	b.n	800a970 <__gethex+0xd4>
 800a9da:	f04f 0900 	mov.w	r9, #0
 800a9de:	1cb1      	adds	r1, r6, #2
 800a9e0:	e7d3      	b.n	800a98a <__gethex+0xee>
 800a9e2:	f04f 0901 	mov.w	r9, #1
 800a9e6:	e7fa      	b.n	800a9de <__gethex+0x142>
 800a9e8:	230a      	movs	r3, #10
 800a9ea:	fb03 0202 	mla	r2, r3, r2, r0
 800a9ee:	3a10      	subs	r2, #16
 800a9f0:	e7d4      	b.n	800a99c <__gethex+0x100>
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	e7df      	b.n	800a9b6 <__gethex+0x11a>
 800a9f6:	1bf3      	subs	r3, r6, r7
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	2b07      	cmp	r3, #7
 800a9fe:	dc0b      	bgt.n	800aa18 <__gethex+0x17c>
 800aa00:	ee18 0a10 	vmov	r0, s16
 800aa04:	f000 fae6 	bl	800afd4 <_Balloc>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	b940      	cbnz	r0, 800aa1e <__gethex+0x182>
 800aa0c:	4b65      	ldr	r3, [pc, #404]	; (800aba4 <__gethex+0x308>)
 800aa0e:	4602      	mov	r2, r0
 800aa10:	21de      	movs	r1, #222	; 0xde
 800aa12:	4865      	ldr	r0, [pc, #404]	; (800aba8 <__gethex+0x30c>)
 800aa14:	f001 fb94 	bl	800c140 <__assert_func>
 800aa18:	3101      	adds	r1, #1
 800aa1a:	105b      	asrs	r3, r3, #1
 800aa1c:	e7ee      	b.n	800a9fc <__gethex+0x160>
 800aa1e:	f100 0914 	add.w	r9, r0, #20
 800aa22:	f04f 0b00 	mov.w	fp, #0
 800aa26:	f1ca 0301 	rsb	r3, sl, #1
 800aa2a:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa2e:	f8cd b000 	str.w	fp, [sp]
 800aa32:	9306      	str	r3, [sp, #24]
 800aa34:	42b7      	cmp	r7, r6
 800aa36:	d340      	bcc.n	800aaba <__gethex+0x21e>
 800aa38:	9802      	ldr	r0, [sp, #8]
 800aa3a:	9b00      	ldr	r3, [sp, #0]
 800aa3c:	f840 3b04 	str.w	r3, [r0], #4
 800aa40:	eba0 0009 	sub.w	r0, r0, r9
 800aa44:	1080      	asrs	r0, r0, #2
 800aa46:	0146      	lsls	r6, r0, #5
 800aa48:	6120      	str	r0, [r4, #16]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fbb8 	bl	800b1c0 <__hi0bits>
 800aa50:	1a30      	subs	r0, r6, r0
 800aa52:	f8d8 6000 	ldr.w	r6, [r8]
 800aa56:	42b0      	cmp	r0, r6
 800aa58:	dd63      	ble.n	800ab22 <__gethex+0x286>
 800aa5a:	1b87      	subs	r7, r0, r6
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 ff52 	bl	800b908 <__any_on>
 800aa64:	4682      	mov	sl, r0
 800aa66:	b1a8      	cbz	r0, 800aa94 <__gethex+0x1f8>
 800aa68:	1e7b      	subs	r3, r7, #1
 800aa6a:	1159      	asrs	r1, r3, #5
 800aa6c:	f003 021f 	and.w	r2, r3, #31
 800aa70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa74:	f04f 0a01 	mov.w	sl, #1
 800aa78:	fa0a f202 	lsl.w	r2, sl, r2
 800aa7c:	420a      	tst	r2, r1
 800aa7e:	d009      	beq.n	800aa94 <__gethex+0x1f8>
 800aa80:	4553      	cmp	r3, sl
 800aa82:	dd05      	ble.n	800aa90 <__gethex+0x1f4>
 800aa84:	1eb9      	subs	r1, r7, #2
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 ff3e 	bl	800b908 <__any_on>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d145      	bne.n	800ab1c <__gethex+0x280>
 800aa90:	f04f 0a02 	mov.w	sl, #2
 800aa94:	4639      	mov	r1, r7
 800aa96:	4620      	mov	r0, r4
 800aa98:	f7ff fe99 	bl	800a7ce <rshift>
 800aa9c:	443d      	add	r5, r7
 800aa9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aaa2:	42ab      	cmp	r3, r5
 800aaa4:	da4c      	bge.n	800ab40 <__gethex+0x2a4>
 800aaa6:	ee18 0a10 	vmov	r0, s16
 800aaaa:	4621      	mov	r1, r4
 800aaac:	f000 fad2 	bl	800b054 <_Bfree>
 800aab0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aab2:	2300      	movs	r3, #0
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	27a3      	movs	r7, #163	; 0xa3
 800aab8:	e785      	b.n	800a9c6 <__gethex+0x12a>
 800aaba:	1e73      	subs	r3, r6, #1
 800aabc:	9a05      	ldr	r2, [sp, #20]
 800aabe:	9303      	str	r3, [sp, #12]
 800aac0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d019      	beq.n	800aafc <__gethex+0x260>
 800aac8:	f1bb 0f20 	cmp.w	fp, #32
 800aacc:	d107      	bne.n	800aade <__gethex+0x242>
 800aace:	9b02      	ldr	r3, [sp, #8]
 800aad0:	9a00      	ldr	r2, [sp, #0]
 800aad2:	f843 2b04 	str.w	r2, [r3], #4
 800aad6:	9302      	str	r3, [sp, #8]
 800aad8:	2300      	movs	r3, #0
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	469b      	mov	fp, r3
 800aade:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aae2:	f7ff fec6 	bl	800a872 <__hexdig_fun>
 800aae6:	9b00      	ldr	r3, [sp, #0]
 800aae8:	f000 000f 	and.w	r0, r0, #15
 800aaec:	fa00 f00b 	lsl.w	r0, r0, fp
 800aaf0:	4303      	orrs	r3, r0
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	f10b 0b04 	add.w	fp, fp, #4
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	e00d      	b.n	800ab18 <__gethex+0x27c>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	9a06      	ldr	r2, [sp, #24]
 800ab00:	4413      	add	r3, r2
 800ab02:	42bb      	cmp	r3, r7
 800ab04:	d3e0      	bcc.n	800aac8 <__gethex+0x22c>
 800ab06:	4618      	mov	r0, r3
 800ab08:	9901      	ldr	r1, [sp, #4]
 800ab0a:	9307      	str	r3, [sp, #28]
 800ab0c:	4652      	mov	r2, sl
 800ab0e:	f001 fae6 	bl	800c0de <strncmp>
 800ab12:	9b07      	ldr	r3, [sp, #28]
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d1d7      	bne.n	800aac8 <__gethex+0x22c>
 800ab18:	461e      	mov	r6, r3
 800ab1a:	e78b      	b.n	800aa34 <__gethex+0x198>
 800ab1c:	f04f 0a03 	mov.w	sl, #3
 800ab20:	e7b8      	b.n	800aa94 <__gethex+0x1f8>
 800ab22:	da0a      	bge.n	800ab3a <__gethex+0x29e>
 800ab24:	1a37      	subs	r7, r6, r0
 800ab26:	4621      	mov	r1, r4
 800ab28:	ee18 0a10 	vmov	r0, s16
 800ab2c:	463a      	mov	r2, r7
 800ab2e:	f000 fcad 	bl	800b48c <__lshift>
 800ab32:	1bed      	subs	r5, r5, r7
 800ab34:	4604      	mov	r4, r0
 800ab36:	f100 0914 	add.w	r9, r0, #20
 800ab3a:	f04f 0a00 	mov.w	sl, #0
 800ab3e:	e7ae      	b.n	800aa9e <__gethex+0x202>
 800ab40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ab44:	42a8      	cmp	r0, r5
 800ab46:	dd72      	ble.n	800ac2e <__gethex+0x392>
 800ab48:	1b45      	subs	r5, r0, r5
 800ab4a:	42ae      	cmp	r6, r5
 800ab4c:	dc36      	bgt.n	800abbc <__gethex+0x320>
 800ab4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d02a      	beq.n	800abac <__gethex+0x310>
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d02c      	beq.n	800abb4 <__gethex+0x318>
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d115      	bne.n	800ab8a <__gethex+0x2ee>
 800ab5e:	42ae      	cmp	r6, r5
 800ab60:	d113      	bne.n	800ab8a <__gethex+0x2ee>
 800ab62:	2e01      	cmp	r6, #1
 800ab64:	d10b      	bne.n	800ab7e <__gethex+0x2e2>
 800ab66:	9a04      	ldr	r2, [sp, #16]
 800ab68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	2301      	movs	r3, #1
 800ab70:	6123      	str	r3, [r4, #16]
 800ab72:	f8c9 3000 	str.w	r3, [r9]
 800ab76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab78:	2762      	movs	r7, #98	; 0x62
 800ab7a:	601c      	str	r4, [r3, #0]
 800ab7c:	e723      	b.n	800a9c6 <__gethex+0x12a>
 800ab7e:	1e71      	subs	r1, r6, #1
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fec1 	bl	800b908 <__any_on>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d1ed      	bne.n	800ab66 <__gethex+0x2ca>
 800ab8a:	ee18 0a10 	vmov	r0, s16
 800ab8e:	4621      	mov	r1, r4
 800ab90:	f000 fa60 	bl	800b054 <_Bfree>
 800ab94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab96:	2300      	movs	r3, #0
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	2750      	movs	r7, #80	; 0x50
 800ab9c:	e713      	b.n	800a9c6 <__gethex+0x12a>
 800ab9e:	bf00      	nop
 800aba0:	0800c954 	.word	0x0800c954
 800aba4:	0800c874 	.word	0x0800c874
 800aba8:	0800c8e8 	.word	0x0800c8e8
 800abac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1eb      	bne.n	800ab8a <__gethex+0x2ee>
 800abb2:	e7d8      	b.n	800ab66 <__gethex+0x2ca>
 800abb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1d5      	bne.n	800ab66 <__gethex+0x2ca>
 800abba:	e7e6      	b.n	800ab8a <__gethex+0x2ee>
 800abbc:	1e6f      	subs	r7, r5, #1
 800abbe:	f1ba 0f00 	cmp.w	sl, #0
 800abc2:	d131      	bne.n	800ac28 <__gethex+0x38c>
 800abc4:	b127      	cbz	r7, 800abd0 <__gethex+0x334>
 800abc6:	4639      	mov	r1, r7
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fe9d 	bl	800b908 <__any_on>
 800abce:	4682      	mov	sl, r0
 800abd0:	117b      	asrs	r3, r7, #5
 800abd2:	2101      	movs	r1, #1
 800abd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800abd8:	f007 071f 	and.w	r7, r7, #31
 800abdc:	fa01 f707 	lsl.w	r7, r1, r7
 800abe0:	421f      	tst	r7, r3
 800abe2:	4629      	mov	r1, r5
 800abe4:	4620      	mov	r0, r4
 800abe6:	bf18      	it	ne
 800abe8:	f04a 0a02 	orrne.w	sl, sl, #2
 800abec:	1b76      	subs	r6, r6, r5
 800abee:	f7ff fdee 	bl	800a7ce <rshift>
 800abf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abf6:	2702      	movs	r7, #2
 800abf8:	f1ba 0f00 	cmp.w	sl, #0
 800abfc:	d048      	beq.n	800ac90 <__gethex+0x3f4>
 800abfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d015      	beq.n	800ac32 <__gethex+0x396>
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d017      	beq.n	800ac3a <__gethex+0x39e>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d109      	bne.n	800ac22 <__gethex+0x386>
 800ac0e:	f01a 0f02 	tst.w	sl, #2
 800ac12:	d006      	beq.n	800ac22 <__gethex+0x386>
 800ac14:	f8d9 0000 	ldr.w	r0, [r9]
 800ac18:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac1c:	f01a 0f01 	tst.w	sl, #1
 800ac20:	d10e      	bne.n	800ac40 <__gethex+0x3a4>
 800ac22:	f047 0710 	orr.w	r7, r7, #16
 800ac26:	e033      	b.n	800ac90 <__gethex+0x3f4>
 800ac28:	f04f 0a01 	mov.w	sl, #1
 800ac2c:	e7d0      	b.n	800abd0 <__gethex+0x334>
 800ac2e:	2701      	movs	r7, #1
 800ac30:	e7e2      	b.n	800abf8 <__gethex+0x35c>
 800ac32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac34:	f1c3 0301 	rsb	r3, r3, #1
 800ac38:	9315      	str	r3, [sp, #84]	; 0x54
 800ac3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0f0      	beq.n	800ac22 <__gethex+0x386>
 800ac40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac44:	f104 0314 	add.w	r3, r4, #20
 800ac48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac50:	f04f 0c00 	mov.w	ip, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ac5e:	d01c      	beq.n	800ac9a <__gethex+0x3fe>
 800ac60:	3201      	adds	r2, #1
 800ac62:	6002      	str	r2, [r0, #0]
 800ac64:	2f02      	cmp	r7, #2
 800ac66:	f104 0314 	add.w	r3, r4, #20
 800ac6a:	d13f      	bne.n	800acec <__gethex+0x450>
 800ac6c:	f8d8 2000 	ldr.w	r2, [r8]
 800ac70:	3a01      	subs	r2, #1
 800ac72:	42b2      	cmp	r2, r6
 800ac74:	d10a      	bne.n	800ac8c <__gethex+0x3f0>
 800ac76:	1171      	asrs	r1, r6, #5
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac7e:	f006 061f 	and.w	r6, r6, #31
 800ac82:	fa02 f606 	lsl.w	r6, r2, r6
 800ac86:	421e      	tst	r6, r3
 800ac88:	bf18      	it	ne
 800ac8a:	4617      	movne	r7, r2
 800ac8c:	f047 0720 	orr.w	r7, r7, #32
 800ac90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac92:	601c      	str	r4, [r3, #0]
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	601d      	str	r5, [r3, #0]
 800ac98:	e695      	b.n	800a9c6 <__gethex+0x12a>
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800aca0:	d8d8      	bhi.n	800ac54 <__gethex+0x3b8>
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	459b      	cmp	fp, r3
 800aca6:	db19      	blt.n	800acdc <__gethex+0x440>
 800aca8:	6861      	ldr	r1, [r4, #4]
 800acaa:	ee18 0a10 	vmov	r0, s16
 800acae:	3101      	adds	r1, #1
 800acb0:	f000 f990 	bl	800afd4 <_Balloc>
 800acb4:	4681      	mov	r9, r0
 800acb6:	b918      	cbnz	r0, 800acc0 <__gethex+0x424>
 800acb8:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <__gethex+0x488>)
 800acba:	4602      	mov	r2, r0
 800acbc:	2184      	movs	r1, #132	; 0x84
 800acbe:	e6a8      	b.n	800aa12 <__gethex+0x176>
 800acc0:	6922      	ldr	r2, [r4, #16]
 800acc2:	3202      	adds	r2, #2
 800acc4:	f104 010c 	add.w	r1, r4, #12
 800acc8:	0092      	lsls	r2, r2, #2
 800acca:	300c      	adds	r0, #12
 800accc:	f000 f974 	bl	800afb8 <memcpy>
 800acd0:	4621      	mov	r1, r4
 800acd2:	ee18 0a10 	vmov	r0, s16
 800acd6:	f000 f9bd 	bl	800b054 <_Bfree>
 800acda:	464c      	mov	r4, r9
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ace4:	6122      	str	r2, [r4, #16]
 800ace6:	2201      	movs	r2, #1
 800ace8:	615a      	str	r2, [r3, #20]
 800acea:	e7bb      	b.n	800ac64 <__gethex+0x3c8>
 800acec:	6922      	ldr	r2, [r4, #16]
 800acee:	455a      	cmp	r2, fp
 800acf0:	dd0b      	ble.n	800ad0a <__gethex+0x46e>
 800acf2:	2101      	movs	r1, #1
 800acf4:	4620      	mov	r0, r4
 800acf6:	f7ff fd6a 	bl	800a7ce <rshift>
 800acfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acfe:	3501      	adds	r5, #1
 800ad00:	42ab      	cmp	r3, r5
 800ad02:	f6ff aed0 	blt.w	800aaa6 <__gethex+0x20a>
 800ad06:	2701      	movs	r7, #1
 800ad08:	e7c0      	b.n	800ac8c <__gethex+0x3f0>
 800ad0a:	f016 061f 	ands.w	r6, r6, #31
 800ad0e:	d0fa      	beq.n	800ad06 <__gethex+0x46a>
 800ad10:	449a      	add	sl, r3
 800ad12:	f1c6 0620 	rsb	r6, r6, #32
 800ad16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ad1a:	f000 fa51 	bl	800b1c0 <__hi0bits>
 800ad1e:	42b0      	cmp	r0, r6
 800ad20:	dbe7      	blt.n	800acf2 <__gethex+0x456>
 800ad22:	e7f0      	b.n	800ad06 <__gethex+0x46a>
 800ad24:	0800c874 	.word	0x0800c874

0800ad28 <L_shift>:
 800ad28:	f1c2 0208 	rsb	r2, r2, #8
 800ad2c:	0092      	lsls	r2, r2, #2
 800ad2e:	b570      	push	{r4, r5, r6, lr}
 800ad30:	f1c2 0620 	rsb	r6, r2, #32
 800ad34:	6843      	ldr	r3, [r0, #4]
 800ad36:	6804      	ldr	r4, [r0, #0]
 800ad38:	fa03 f506 	lsl.w	r5, r3, r6
 800ad3c:	432c      	orrs	r4, r5
 800ad3e:	40d3      	lsrs	r3, r2
 800ad40:	6004      	str	r4, [r0, #0]
 800ad42:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad46:	4288      	cmp	r0, r1
 800ad48:	d3f4      	bcc.n	800ad34 <L_shift+0xc>
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}

0800ad4c <__match>:
 800ad4c:	b530      	push	{r4, r5, lr}
 800ad4e:	6803      	ldr	r3, [r0, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad56:	b914      	cbnz	r4, 800ad5e <__match+0x12>
 800ad58:	6003      	str	r3, [r0, #0]
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	bd30      	pop	{r4, r5, pc}
 800ad5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad66:	2d19      	cmp	r5, #25
 800ad68:	bf98      	it	ls
 800ad6a:	3220      	addls	r2, #32
 800ad6c:	42a2      	cmp	r2, r4
 800ad6e:	d0f0      	beq.n	800ad52 <__match+0x6>
 800ad70:	2000      	movs	r0, #0
 800ad72:	e7f3      	b.n	800ad5c <__match+0x10>

0800ad74 <__hexnan>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	680b      	ldr	r3, [r1, #0]
 800ad7a:	6801      	ldr	r1, [r0, #0]
 800ad7c:	115e      	asrs	r6, r3, #5
 800ad7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad82:	f013 031f 	ands.w	r3, r3, #31
 800ad86:	b087      	sub	sp, #28
 800ad88:	bf18      	it	ne
 800ad8a:	3604      	addne	r6, #4
 800ad8c:	2500      	movs	r5, #0
 800ad8e:	1f37      	subs	r7, r6, #4
 800ad90:	4682      	mov	sl, r0
 800ad92:	4690      	mov	r8, r2
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad9a:	46b9      	mov	r9, r7
 800ad9c:	463c      	mov	r4, r7
 800ad9e:	9502      	str	r5, [sp, #8]
 800ada0:	46ab      	mov	fp, r5
 800ada2:	784a      	ldrb	r2, [r1, #1]
 800ada4:	1c4b      	adds	r3, r1, #1
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	b342      	cbz	r2, 800adfc <__hexnan+0x88>
 800adaa:	4610      	mov	r0, r2
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	9204      	str	r2, [sp, #16]
 800adb0:	f7ff fd5f 	bl	800a872 <__hexdig_fun>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d14f      	bne.n	800ae58 <__hexnan+0xe4>
 800adb8:	9a04      	ldr	r2, [sp, #16]
 800adba:	9905      	ldr	r1, [sp, #20]
 800adbc:	2a20      	cmp	r2, #32
 800adbe:	d818      	bhi.n	800adf2 <__hexnan+0x7e>
 800adc0:	9b02      	ldr	r3, [sp, #8]
 800adc2:	459b      	cmp	fp, r3
 800adc4:	dd13      	ble.n	800adee <__hexnan+0x7a>
 800adc6:	454c      	cmp	r4, r9
 800adc8:	d206      	bcs.n	800add8 <__hexnan+0x64>
 800adca:	2d07      	cmp	r5, #7
 800adcc:	dc04      	bgt.n	800add8 <__hexnan+0x64>
 800adce:	462a      	mov	r2, r5
 800add0:	4649      	mov	r1, r9
 800add2:	4620      	mov	r0, r4
 800add4:	f7ff ffa8 	bl	800ad28 <L_shift>
 800add8:	4544      	cmp	r4, r8
 800adda:	d950      	bls.n	800ae7e <__hexnan+0x10a>
 800addc:	2300      	movs	r3, #0
 800adde:	f1a4 0904 	sub.w	r9, r4, #4
 800ade2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ade6:	f8cd b008 	str.w	fp, [sp, #8]
 800adea:	464c      	mov	r4, r9
 800adec:	461d      	mov	r5, r3
 800adee:	9903      	ldr	r1, [sp, #12]
 800adf0:	e7d7      	b.n	800ada2 <__hexnan+0x2e>
 800adf2:	2a29      	cmp	r2, #41	; 0x29
 800adf4:	d156      	bne.n	800aea4 <__hexnan+0x130>
 800adf6:	3102      	adds	r1, #2
 800adf8:	f8ca 1000 	str.w	r1, [sl]
 800adfc:	f1bb 0f00 	cmp.w	fp, #0
 800ae00:	d050      	beq.n	800aea4 <__hexnan+0x130>
 800ae02:	454c      	cmp	r4, r9
 800ae04:	d206      	bcs.n	800ae14 <__hexnan+0xa0>
 800ae06:	2d07      	cmp	r5, #7
 800ae08:	dc04      	bgt.n	800ae14 <__hexnan+0xa0>
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f7ff ff8a 	bl	800ad28 <L_shift>
 800ae14:	4544      	cmp	r4, r8
 800ae16:	d934      	bls.n	800ae82 <__hexnan+0x10e>
 800ae18:	f1a8 0204 	sub.w	r2, r8, #4
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae22:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae26:	429f      	cmp	r7, r3
 800ae28:	d2f9      	bcs.n	800ae1e <__hexnan+0xaa>
 800ae2a:	1b3b      	subs	r3, r7, r4
 800ae2c:	f023 0303 	bic.w	r3, r3, #3
 800ae30:	3304      	adds	r3, #4
 800ae32:	3401      	adds	r4, #1
 800ae34:	3e03      	subs	r6, #3
 800ae36:	42b4      	cmp	r4, r6
 800ae38:	bf88      	it	hi
 800ae3a:	2304      	movhi	r3, #4
 800ae3c:	4443      	add	r3, r8
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f843 2b04 	str.w	r2, [r3], #4
 800ae44:	429f      	cmp	r7, r3
 800ae46:	d2fb      	bcs.n	800ae40 <__hexnan+0xcc>
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	b91b      	cbnz	r3, 800ae54 <__hexnan+0xe0>
 800ae4c:	4547      	cmp	r7, r8
 800ae4e:	d127      	bne.n	800aea0 <__hexnan+0x12c>
 800ae50:	2301      	movs	r3, #1
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	2005      	movs	r0, #5
 800ae56:	e026      	b.n	800aea6 <__hexnan+0x132>
 800ae58:	3501      	adds	r5, #1
 800ae5a:	2d08      	cmp	r5, #8
 800ae5c:	f10b 0b01 	add.w	fp, fp, #1
 800ae60:	dd06      	ble.n	800ae70 <__hexnan+0xfc>
 800ae62:	4544      	cmp	r4, r8
 800ae64:	d9c3      	bls.n	800adee <__hexnan+0x7a>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae6c:	2501      	movs	r5, #1
 800ae6e:	3c04      	subs	r4, #4
 800ae70:	6822      	ldr	r2, [r4, #0]
 800ae72:	f000 000f 	and.w	r0, r0, #15
 800ae76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	e7b7      	b.n	800adee <__hexnan+0x7a>
 800ae7e:	2508      	movs	r5, #8
 800ae80:	e7b5      	b.n	800adee <__hexnan+0x7a>
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d0df      	beq.n	800ae48 <__hexnan+0xd4>
 800ae88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae8c:	f1c3 0320 	rsb	r3, r3, #32
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
 800ae94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae98:	401a      	ands	r2, r3
 800ae9a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae9e:	e7d3      	b.n	800ae48 <__hexnan+0xd4>
 800aea0:	3f04      	subs	r7, #4
 800aea2:	e7d1      	b.n	800ae48 <__hexnan+0xd4>
 800aea4:	2004      	movs	r0, #4
 800aea6:	b007      	add	sp, #28
 800aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aeac <_localeconv_r>:
 800aeac:	4800      	ldr	r0, [pc, #0]	; (800aeb0 <_localeconv_r+0x4>)
 800aeae:	4770      	bx	lr
 800aeb0:	20000164 	.word	0x20000164

0800aeb4 <__retarget_lock_init_recursive>:
 800aeb4:	4770      	bx	lr

0800aeb6 <__retarget_lock_acquire_recursive>:
 800aeb6:	4770      	bx	lr

0800aeb8 <__retarget_lock_release_recursive>:
 800aeb8:	4770      	bx	lr

0800aeba <__swhatbuf_r>:
 800aeba:	b570      	push	{r4, r5, r6, lr}
 800aebc:	460e      	mov	r6, r1
 800aebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec2:	2900      	cmp	r1, #0
 800aec4:	b096      	sub	sp, #88	; 0x58
 800aec6:	4614      	mov	r4, r2
 800aec8:	461d      	mov	r5, r3
 800aeca:	da07      	bge.n	800aedc <__swhatbuf_r+0x22>
 800aecc:	2300      	movs	r3, #0
 800aece:	602b      	str	r3, [r5, #0]
 800aed0:	89b3      	ldrh	r3, [r6, #12]
 800aed2:	061a      	lsls	r2, r3, #24
 800aed4:	d410      	bmi.n	800aef8 <__swhatbuf_r+0x3e>
 800aed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeda:	e00e      	b.n	800aefa <__swhatbuf_r+0x40>
 800aedc:	466a      	mov	r2, sp
 800aede:	f001 f96f 	bl	800c1c0 <_fstat_r>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	dbf2      	blt.n	800aecc <__swhatbuf_r+0x12>
 800aee6:	9a01      	ldr	r2, [sp, #4]
 800aee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aef0:	425a      	negs	r2, r3
 800aef2:	415a      	adcs	r2, r3
 800aef4:	602a      	str	r2, [r5, #0]
 800aef6:	e7ee      	b.n	800aed6 <__swhatbuf_r+0x1c>
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	2000      	movs	r0, #0
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	b016      	add	sp, #88	; 0x58
 800af00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af04 <__smakebuf_r>:
 800af04:	898b      	ldrh	r3, [r1, #12]
 800af06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af08:	079d      	lsls	r5, r3, #30
 800af0a:	4606      	mov	r6, r0
 800af0c:	460c      	mov	r4, r1
 800af0e:	d507      	bpl.n	800af20 <__smakebuf_r+0x1c>
 800af10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	2301      	movs	r3, #1
 800af1a:	6163      	str	r3, [r4, #20]
 800af1c:	b002      	add	sp, #8
 800af1e:	bd70      	pop	{r4, r5, r6, pc}
 800af20:	ab01      	add	r3, sp, #4
 800af22:	466a      	mov	r2, sp
 800af24:	f7ff ffc9 	bl	800aeba <__swhatbuf_r>
 800af28:	9900      	ldr	r1, [sp, #0]
 800af2a:	4605      	mov	r5, r0
 800af2c:	4630      	mov	r0, r6
 800af2e:	f000 fd6b 	bl	800ba08 <_malloc_r>
 800af32:	b948      	cbnz	r0, 800af48 <__smakebuf_r+0x44>
 800af34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af38:	059a      	lsls	r2, r3, #22
 800af3a:	d4ef      	bmi.n	800af1c <__smakebuf_r+0x18>
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	f043 0302 	orr.w	r3, r3, #2
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	e7e3      	b.n	800af10 <__smakebuf_r+0xc>
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <__smakebuf_r+0x7c>)
 800af4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	6020      	str	r0, [r4, #0]
 800af50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	9b00      	ldr	r3, [sp, #0]
 800af58:	6163      	str	r3, [r4, #20]
 800af5a:	9b01      	ldr	r3, [sp, #4]
 800af5c:	6120      	str	r0, [r4, #16]
 800af5e:	b15b      	cbz	r3, 800af78 <__smakebuf_r+0x74>
 800af60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af64:	4630      	mov	r0, r6
 800af66:	f001 f93d 	bl	800c1e4 <_isatty_r>
 800af6a:	b128      	cbz	r0, 800af78 <__smakebuf_r+0x74>
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	f043 0301 	orr.w	r3, r3, #1
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	89a0      	ldrh	r0, [r4, #12]
 800af7a:	4305      	orrs	r5, r0
 800af7c:	81a5      	strh	r5, [r4, #12]
 800af7e:	e7cd      	b.n	800af1c <__smakebuf_r+0x18>
 800af80:	0800a62d 	.word	0x0800a62d

0800af84 <malloc>:
 800af84:	4b02      	ldr	r3, [pc, #8]	; (800af90 <malloc+0xc>)
 800af86:	4601      	mov	r1, r0
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	f000 bd3d 	b.w	800ba08 <_malloc_r>
 800af8e:	bf00      	nop
 800af90:	2000000c 	.word	0x2000000c

0800af94 <__ascii_mbtowc>:
 800af94:	b082      	sub	sp, #8
 800af96:	b901      	cbnz	r1, 800af9a <__ascii_mbtowc+0x6>
 800af98:	a901      	add	r1, sp, #4
 800af9a:	b142      	cbz	r2, 800afae <__ascii_mbtowc+0x1a>
 800af9c:	b14b      	cbz	r3, 800afb2 <__ascii_mbtowc+0x1e>
 800af9e:	7813      	ldrb	r3, [r2, #0]
 800afa0:	600b      	str	r3, [r1, #0]
 800afa2:	7812      	ldrb	r2, [r2, #0]
 800afa4:	1e10      	subs	r0, r2, #0
 800afa6:	bf18      	it	ne
 800afa8:	2001      	movne	r0, #1
 800afaa:	b002      	add	sp, #8
 800afac:	4770      	bx	lr
 800afae:	4610      	mov	r0, r2
 800afb0:	e7fb      	b.n	800afaa <__ascii_mbtowc+0x16>
 800afb2:	f06f 0001 	mvn.w	r0, #1
 800afb6:	e7f8      	b.n	800afaa <__ascii_mbtowc+0x16>

0800afb8 <memcpy>:
 800afb8:	440a      	add	r2, r1
 800afba:	4291      	cmp	r1, r2
 800afbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800afc0:	d100      	bne.n	800afc4 <memcpy+0xc>
 800afc2:	4770      	bx	lr
 800afc4:	b510      	push	{r4, lr}
 800afc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afce:	4291      	cmp	r1, r2
 800afd0:	d1f9      	bne.n	800afc6 <memcpy+0xe>
 800afd2:	bd10      	pop	{r4, pc}

0800afd4 <_Balloc>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	b976      	cbnz	r6, 800affc <_Balloc+0x28>
 800afde:	2010      	movs	r0, #16
 800afe0:	f7ff ffd0 	bl	800af84 <malloc>
 800afe4:	4602      	mov	r2, r0
 800afe6:	6260      	str	r0, [r4, #36]	; 0x24
 800afe8:	b920      	cbnz	r0, 800aff4 <_Balloc+0x20>
 800afea:	4b18      	ldr	r3, [pc, #96]	; (800b04c <_Balloc+0x78>)
 800afec:	4818      	ldr	r0, [pc, #96]	; (800b050 <_Balloc+0x7c>)
 800afee:	2166      	movs	r1, #102	; 0x66
 800aff0:	f001 f8a6 	bl	800c140 <__assert_func>
 800aff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aff8:	6006      	str	r6, [r0, #0]
 800affa:	60c6      	str	r6, [r0, #12]
 800affc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800affe:	68f3      	ldr	r3, [r6, #12]
 800b000:	b183      	cbz	r3, 800b024 <_Balloc+0x50>
 800b002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b00a:	b9b8      	cbnz	r0, 800b03c <_Balloc+0x68>
 800b00c:	2101      	movs	r1, #1
 800b00e:	fa01 f605 	lsl.w	r6, r1, r5
 800b012:	1d72      	adds	r2, r6, #5
 800b014:	0092      	lsls	r2, r2, #2
 800b016:	4620      	mov	r0, r4
 800b018:	f000 fc97 	bl	800b94a <_calloc_r>
 800b01c:	b160      	cbz	r0, 800b038 <_Balloc+0x64>
 800b01e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b022:	e00e      	b.n	800b042 <_Balloc+0x6e>
 800b024:	2221      	movs	r2, #33	; 0x21
 800b026:	2104      	movs	r1, #4
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fc8e 	bl	800b94a <_calloc_r>
 800b02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b030:	60f0      	str	r0, [r6, #12]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e4      	bne.n	800b002 <_Balloc+0x2e>
 800b038:	2000      	movs	r0, #0
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	6802      	ldr	r2, [r0, #0]
 800b03e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b042:	2300      	movs	r3, #0
 800b044:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b048:	e7f7      	b.n	800b03a <_Balloc+0x66>
 800b04a:	bf00      	nop
 800b04c:	0800c7fe 	.word	0x0800c7fe
 800b050:	0800c968 	.word	0x0800c968

0800b054 <_Bfree>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b058:	4605      	mov	r5, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	b976      	cbnz	r6, 800b07c <_Bfree+0x28>
 800b05e:	2010      	movs	r0, #16
 800b060:	f7ff ff90 	bl	800af84 <malloc>
 800b064:	4602      	mov	r2, r0
 800b066:	6268      	str	r0, [r5, #36]	; 0x24
 800b068:	b920      	cbnz	r0, 800b074 <_Bfree+0x20>
 800b06a:	4b09      	ldr	r3, [pc, #36]	; (800b090 <_Bfree+0x3c>)
 800b06c:	4809      	ldr	r0, [pc, #36]	; (800b094 <_Bfree+0x40>)
 800b06e:	218a      	movs	r1, #138	; 0x8a
 800b070:	f001 f866 	bl	800c140 <__assert_func>
 800b074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b078:	6006      	str	r6, [r0, #0]
 800b07a:	60c6      	str	r6, [r0, #12]
 800b07c:	b13c      	cbz	r4, 800b08e <_Bfree+0x3a>
 800b07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b080:	6862      	ldr	r2, [r4, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b088:	6021      	str	r1, [r4, #0]
 800b08a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	0800c7fe 	.word	0x0800c7fe
 800b094:	0800c968 	.word	0x0800c968

0800b098 <__multadd>:
 800b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09c:	690e      	ldr	r6, [r1, #16]
 800b09e:	4607      	mov	r7, r0
 800b0a0:	4698      	mov	r8, r3
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	f101 0014 	add.w	r0, r1, #20
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	6805      	ldr	r5, [r0, #0]
 800b0ac:	b2a9      	uxth	r1, r5
 800b0ae:	fb02 8101 	mla	r1, r2, r1, r8
 800b0b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b0b6:	0c2d      	lsrs	r5, r5, #16
 800b0b8:	fb02 c505 	mla	r5, r2, r5, ip
 800b0bc:	b289      	uxth	r1, r1
 800b0be:	3301      	adds	r3, #1
 800b0c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b0c4:	429e      	cmp	r6, r3
 800b0c6:	f840 1b04 	str.w	r1, [r0], #4
 800b0ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b0ce:	dcec      	bgt.n	800b0aa <__multadd+0x12>
 800b0d0:	f1b8 0f00 	cmp.w	r8, #0
 800b0d4:	d022      	beq.n	800b11c <__multadd+0x84>
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	42b3      	cmp	r3, r6
 800b0da:	dc19      	bgt.n	800b110 <__multadd+0x78>
 800b0dc:	6861      	ldr	r1, [r4, #4]
 800b0de:	4638      	mov	r0, r7
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	f7ff ff77 	bl	800afd4 <_Balloc>
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	b928      	cbnz	r0, 800b0f6 <__multadd+0x5e>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	; (800b124 <__multadd+0x8c>)
 800b0ee:	480e      	ldr	r0, [pc, #56]	; (800b128 <__multadd+0x90>)
 800b0f0:	21b5      	movs	r1, #181	; 0xb5
 800b0f2:	f001 f825 	bl	800c140 <__assert_func>
 800b0f6:	6922      	ldr	r2, [r4, #16]
 800b0f8:	3202      	adds	r2, #2
 800b0fa:	f104 010c 	add.w	r1, r4, #12
 800b0fe:	0092      	lsls	r2, r2, #2
 800b100:	300c      	adds	r0, #12
 800b102:	f7ff ff59 	bl	800afb8 <memcpy>
 800b106:	4621      	mov	r1, r4
 800b108:	4638      	mov	r0, r7
 800b10a:	f7ff ffa3 	bl	800b054 <_Bfree>
 800b10e:	462c      	mov	r4, r5
 800b110:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b114:	3601      	adds	r6, #1
 800b116:	f8c3 8014 	str.w	r8, [r3, #20]
 800b11a:	6126      	str	r6, [r4, #16]
 800b11c:	4620      	mov	r0, r4
 800b11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b122:	bf00      	nop
 800b124:	0800c874 	.word	0x0800c874
 800b128:	0800c968 	.word	0x0800c968

0800b12c <__s2b>:
 800b12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b130:	460c      	mov	r4, r1
 800b132:	4615      	mov	r5, r2
 800b134:	461f      	mov	r7, r3
 800b136:	2209      	movs	r2, #9
 800b138:	3308      	adds	r3, #8
 800b13a:	4606      	mov	r6, r0
 800b13c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b140:	2100      	movs	r1, #0
 800b142:	2201      	movs	r2, #1
 800b144:	429a      	cmp	r2, r3
 800b146:	db09      	blt.n	800b15c <__s2b+0x30>
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff ff43 	bl	800afd4 <_Balloc>
 800b14e:	b940      	cbnz	r0, 800b162 <__s2b+0x36>
 800b150:	4602      	mov	r2, r0
 800b152:	4b19      	ldr	r3, [pc, #100]	; (800b1b8 <__s2b+0x8c>)
 800b154:	4819      	ldr	r0, [pc, #100]	; (800b1bc <__s2b+0x90>)
 800b156:	21ce      	movs	r1, #206	; 0xce
 800b158:	f000 fff2 	bl	800c140 <__assert_func>
 800b15c:	0052      	lsls	r2, r2, #1
 800b15e:	3101      	adds	r1, #1
 800b160:	e7f0      	b.n	800b144 <__s2b+0x18>
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	6143      	str	r3, [r0, #20]
 800b166:	2d09      	cmp	r5, #9
 800b168:	f04f 0301 	mov.w	r3, #1
 800b16c:	6103      	str	r3, [r0, #16]
 800b16e:	dd16      	ble.n	800b19e <__s2b+0x72>
 800b170:	f104 0909 	add.w	r9, r4, #9
 800b174:	46c8      	mov	r8, r9
 800b176:	442c      	add	r4, r5
 800b178:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b17c:	4601      	mov	r1, r0
 800b17e:	3b30      	subs	r3, #48	; 0x30
 800b180:	220a      	movs	r2, #10
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff88 	bl	800b098 <__multadd>
 800b188:	45a0      	cmp	r8, r4
 800b18a:	d1f5      	bne.n	800b178 <__s2b+0x4c>
 800b18c:	f1a5 0408 	sub.w	r4, r5, #8
 800b190:	444c      	add	r4, r9
 800b192:	1b2d      	subs	r5, r5, r4
 800b194:	1963      	adds	r3, r4, r5
 800b196:	42bb      	cmp	r3, r7
 800b198:	db04      	blt.n	800b1a4 <__s2b+0x78>
 800b19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19e:	340a      	adds	r4, #10
 800b1a0:	2509      	movs	r5, #9
 800b1a2:	e7f6      	b.n	800b192 <__s2b+0x66>
 800b1a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	3b30      	subs	r3, #48	; 0x30
 800b1ac:	220a      	movs	r2, #10
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f7ff ff72 	bl	800b098 <__multadd>
 800b1b4:	e7ee      	b.n	800b194 <__s2b+0x68>
 800b1b6:	bf00      	nop
 800b1b8:	0800c874 	.word	0x0800c874
 800b1bc:	0800c968 	.word	0x0800c968

0800b1c0 <__hi0bits>:
 800b1c0:	0c03      	lsrs	r3, r0, #16
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	b9d3      	cbnz	r3, 800b1fc <__hi0bits+0x3c>
 800b1c6:	0400      	lsls	r0, r0, #16
 800b1c8:	2310      	movs	r3, #16
 800b1ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1ce:	bf04      	itt	eq
 800b1d0:	0200      	lsleq	r0, r0, #8
 800b1d2:	3308      	addeq	r3, #8
 800b1d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1d8:	bf04      	itt	eq
 800b1da:	0100      	lsleq	r0, r0, #4
 800b1dc:	3304      	addeq	r3, #4
 800b1de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1e2:	bf04      	itt	eq
 800b1e4:	0080      	lsleq	r0, r0, #2
 800b1e6:	3302      	addeq	r3, #2
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	db05      	blt.n	800b1f8 <__hi0bits+0x38>
 800b1ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1f0:	f103 0301 	add.w	r3, r3, #1
 800b1f4:	bf08      	it	eq
 800b1f6:	2320      	moveq	r3, #32
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	4770      	bx	lr
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e7e4      	b.n	800b1ca <__hi0bits+0xa>

0800b200 <__lo0bits>:
 800b200:	6803      	ldr	r3, [r0, #0]
 800b202:	f013 0207 	ands.w	r2, r3, #7
 800b206:	4601      	mov	r1, r0
 800b208:	d00b      	beq.n	800b222 <__lo0bits+0x22>
 800b20a:	07da      	lsls	r2, r3, #31
 800b20c:	d424      	bmi.n	800b258 <__lo0bits+0x58>
 800b20e:	0798      	lsls	r0, r3, #30
 800b210:	bf49      	itett	mi
 800b212:	085b      	lsrmi	r3, r3, #1
 800b214:	089b      	lsrpl	r3, r3, #2
 800b216:	2001      	movmi	r0, #1
 800b218:	600b      	strmi	r3, [r1, #0]
 800b21a:	bf5c      	itt	pl
 800b21c:	600b      	strpl	r3, [r1, #0]
 800b21e:	2002      	movpl	r0, #2
 800b220:	4770      	bx	lr
 800b222:	b298      	uxth	r0, r3
 800b224:	b9b0      	cbnz	r0, 800b254 <__lo0bits+0x54>
 800b226:	0c1b      	lsrs	r3, r3, #16
 800b228:	2010      	movs	r0, #16
 800b22a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b22e:	bf04      	itt	eq
 800b230:	0a1b      	lsreq	r3, r3, #8
 800b232:	3008      	addeq	r0, #8
 800b234:	071a      	lsls	r2, r3, #28
 800b236:	bf04      	itt	eq
 800b238:	091b      	lsreq	r3, r3, #4
 800b23a:	3004      	addeq	r0, #4
 800b23c:	079a      	lsls	r2, r3, #30
 800b23e:	bf04      	itt	eq
 800b240:	089b      	lsreq	r3, r3, #2
 800b242:	3002      	addeq	r0, #2
 800b244:	07da      	lsls	r2, r3, #31
 800b246:	d403      	bmi.n	800b250 <__lo0bits+0x50>
 800b248:	085b      	lsrs	r3, r3, #1
 800b24a:	f100 0001 	add.w	r0, r0, #1
 800b24e:	d005      	beq.n	800b25c <__lo0bits+0x5c>
 800b250:	600b      	str	r3, [r1, #0]
 800b252:	4770      	bx	lr
 800b254:	4610      	mov	r0, r2
 800b256:	e7e8      	b.n	800b22a <__lo0bits+0x2a>
 800b258:	2000      	movs	r0, #0
 800b25a:	4770      	bx	lr
 800b25c:	2020      	movs	r0, #32
 800b25e:	4770      	bx	lr

0800b260 <__i2b>:
 800b260:	b510      	push	{r4, lr}
 800b262:	460c      	mov	r4, r1
 800b264:	2101      	movs	r1, #1
 800b266:	f7ff feb5 	bl	800afd4 <_Balloc>
 800b26a:	4602      	mov	r2, r0
 800b26c:	b928      	cbnz	r0, 800b27a <__i2b+0x1a>
 800b26e:	4b05      	ldr	r3, [pc, #20]	; (800b284 <__i2b+0x24>)
 800b270:	4805      	ldr	r0, [pc, #20]	; (800b288 <__i2b+0x28>)
 800b272:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b276:	f000 ff63 	bl	800c140 <__assert_func>
 800b27a:	2301      	movs	r3, #1
 800b27c:	6144      	str	r4, [r0, #20]
 800b27e:	6103      	str	r3, [r0, #16]
 800b280:	bd10      	pop	{r4, pc}
 800b282:	bf00      	nop
 800b284:	0800c874 	.word	0x0800c874
 800b288:	0800c968 	.word	0x0800c968

0800b28c <__multiply>:
 800b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	4614      	mov	r4, r2
 800b292:	690a      	ldr	r2, [r1, #16]
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	429a      	cmp	r2, r3
 800b298:	bfb8      	it	lt
 800b29a:	460b      	movlt	r3, r1
 800b29c:	460d      	mov	r5, r1
 800b29e:	bfbc      	itt	lt
 800b2a0:	4625      	movlt	r5, r4
 800b2a2:	461c      	movlt	r4, r3
 800b2a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b2a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2ac:	68ab      	ldr	r3, [r5, #8]
 800b2ae:	6869      	ldr	r1, [r5, #4]
 800b2b0:	eb0a 0709 	add.w	r7, sl, r9
 800b2b4:	42bb      	cmp	r3, r7
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	bfb8      	it	lt
 800b2ba:	3101      	addlt	r1, #1
 800b2bc:	f7ff fe8a 	bl	800afd4 <_Balloc>
 800b2c0:	b930      	cbnz	r0, 800b2d0 <__multiply+0x44>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	4b42      	ldr	r3, [pc, #264]	; (800b3d0 <__multiply+0x144>)
 800b2c6:	4843      	ldr	r0, [pc, #268]	; (800b3d4 <__multiply+0x148>)
 800b2c8:	f240 115d 	movw	r1, #349	; 0x15d
 800b2cc:	f000 ff38 	bl	800c140 <__assert_func>
 800b2d0:	f100 0614 	add.w	r6, r0, #20
 800b2d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2d8:	4633      	mov	r3, r6
 800b2da:	2200      	movs	r2, #0
 800b2dc:	4543      	cmp	r3, r8
 800b2de:	d31e      	bcc.n	800b31e <__multiply+0x92>
 800b2e0:	f105 0c14 	add.w	ip, r5, #20
 800b2e4:	f104 0314 	add.w	r3, r4, #20
 800b2e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b2ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b2f0:	9202      	str	r2, [sp, #8]
 800b2f2:	ebac 0205 	sub.w	r2, ip, r5
 800b2f6:	3a15      	subs	r2, #21
 800b2f8:	f022 0203 	bic.w	r2, r2, #3
 800b2fc:	3204      	adds	r2, #4
 800b2fe:	f105 0115 	add.w	r1, r5, #21
 800b302:	458c      	cmp	ip, r1
 800b304:	bf38      	it	cc
 800b306:	2204      	movcc	r2, #4
 800b308:	9201      	str	r2, [sp, #4]
 800b30a:	9a02      	ldr	r2, [sp, #8]
 800b30c:	9303      	str	r3, [sp, #12]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d808      	bhi.n	800b324 <__multiply+0x98>
 800b312:	2f00      	cmp	r7, #0
 800b314:	dc55      	bgt.n	800b3c2 <__multiply+0x136>
 800b316:	6107      	str	r7, [r0, #16]
 800b318:	b005      	add	sp, #20
 800b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31e:	f843 2b04 	str.w	r2, [r3], #4
 800b322:	e7db      	b.n	800b2dc <__multiply+0x50>
 800b324:	f8b3 a000 	ldrh.w	sl, [r3]
 800b328:	f1ba 0f00 	cmp.w	sl, #0
 800b32c:	d020      	beq.n	800b370 <__multiply+0xe4>
 800b32e:	f105 0e14 	add.w	lr, r5, #20
 800b332:	46b1      	mov	r9, r6
 800b334:	2200      	movs	r2, #0
 800b336:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b33a:	f8d9 b000 	ldr.w	fp, [r9]
 800b33e:	b2a1      	uxth	r1, r4
 800b340:	fa1f fb8b 	uxth.w	fp, fp
 800b344:	fb0a b101 	mla	r1, sl, r1, fp
 800b348:	4411      	add	r1, r2
 800b34a:	f8d9 2000 	ldr.w	r2, [r9]
 800b34e:	0c24      	lsrs	r4, r4, #16
 800b350:	0c12      	lsrs	r2, r2, #16
 800b352:	fb0a 2404 	mla	r4, sl, r4, r2
 800b356:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b35a:	b289      	uxth	r1, r1
 800b35c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b360:	45f4      	cmp	ip, lr
 800b362:	f849 1b04 	str.w	r1, [r9], #4
 800b366:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b36a:	d8e4      	bhi.n	800b336 <__multiply+0xaa>
 800b36c:	9901      	ldr	r1, [sp, #4]
 800b36e:	5072      	str	r2, [r6, r1]
 800b370:	9a03      	ldr	r2, [sp, #12]
 800b372:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b376:	3304      	adds	r3, #4
 800b378:	f1b9 0f00 	cmp.w	r9, #0
 800b37c:	d01f      	beq.n	800b3be <__multiply+0x132>
 800b37e:	6834      	ldr	r4, [r6, #0]
 800b380:	f105 0114 	add.w	r1, r5, #20
 800b384:	46b6      	mov	lr, r6
 800b386:	f04f 0a00 	mov.w	sl, #0
 800b38a:	880a      	ldrh	r2, [r1, #0]
 800b38c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b390:	fb09 b202 	mla	r2, r9, r2, fp
 800b394:	4492      	add	sl, r2
 800b396:	b2a4      	uxth	r4, r4
 800b398:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b39c:	f84e 4b04 	str.w	r4, [lr], #4
 800b3a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b3a4:	f8be 2000 	ldrh.w	r2, [lr]
 800b3a8:	0c24      	lsrs	r4, r4, #16
 800b3aa:	fb09 2404 	mla	r4, r9, r4, r2
 800b3ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b3b2:	458c      	cmp	ip, r1
 800b3b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b3b8:	d8e7      	bhi.n	800b38a <__multiply+0xfe>
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	50b4      	str	r4, [r6, r2]
 800b3be:	3604      	adds	r6, #4
 800b3c0:	e7a3      	b.n	800b30a <__multiply+0x7e>
 800b3c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1a5      	bne.n	800b316 <__multiply+0x8a>
 800b3ca:	3f01      	subs	r7, #1
 800b3cc:	e7a1      	b.n	800b312 <__multiply+0x86>
 800b3ce:	bf00      	nop
 800b3d0:	0800c874 	.word	0x0800c874
 800b3d4:	0800c968 	.word	0x0800c968

0800b3d8 <__pow5mult>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4615      	mov	r5, r2
 800b3de:	f012 0203 	ands.w	r2, r2, #3
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	460f      	mov	r7, r1
 800b3e6:	d007      	beq.n	800b3f8 <__pow5mult+0x20>
 800b3e8:	4c25      	ldr	r4, [pc, #148]	; (800b480 <__pow5mult+0xa8>)
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3f2:	f7ff fe51 	bl	800b098 <__multadd>
 800b3f6:	4607      	mov	r7, r0
 800b3f8:	10ad      	asrs	r5, r5, #2
 800b3fa:	d03d      	beq.n	800b478 <__pow5mult+0xa0>
 800b3fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3fe:	b97c      	cbnz	r4, 800b420 <__pow5mult+0x48>
 800b400:	2010      	movs	r0, #16
 800b402:	f7ff fdbf 	bl	800af84 <malloc>
 800b406:	4602      	mov	r2, r0
 800b408:	6270      	str	r0, [r6, #36]	; 0x24
 800b40a:	b928      	cbnz	r0, 800b418 <__pow5mult+0x40>
 800b40c:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <__pow5mult+0xac>)
 800b40e:	481e      	ldr	r0, [pc, #120]	; (800b488 <__pow5mult+0xb0>)
 800b410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b414:	f000 fe94 	bl	800c140 <__assert_func>
 800b418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b41c:	6004      	str	r4, [r0, #0]
 800b41e:	60c4      	str	r4, [r0, #12]
 800b420:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b428:	b94c      	cbnz	r4, 800b43e <__pow5mult+0x66>
 800b42a:	f240 2171 	movw	r1, #625	; 0x271
 800b42e:	4630      	mov	r0, r6
 800b430:	f7ff ff16 	bl	800b260 <__i2b>
 800b434:	2300      	movs	r3, #0
 800b436:	f8c8 0008 	str.w	r0, [r8, #8]
 800b43a:	4604      	mov	r4, r0
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	f04f 0900 	mov.w	r9, #0
 800b442:	07eb      	lsls	r3, r5, #31
 800b444:	d50a      	bpl.n	800b45c <__pow5mult+0x84>
 800b446:	4639      	mov	r1, r7
 800b448:	4622      	mov	r2, r4
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ff1e 	bl	800b28c <__multiply>
 800b450:	4639      	mov	r1, r7
 800b452:	4680      	mov	r8, r0
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff fdfd 	bl	800b054 <_Bfree>
 800b45a:	4647      	mov	r7, r8
 800b45c:	106d      	asrs	r5, r5, #1
 800b45e:	d00b      	beq.n	800b478 <__pow5mult+0xa0>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	b938      	cbnz	r0, 800b474 <__pow5mult+0x9c>
 800b464:	4622      	mov	r2, r4
 800b466:	4621      	mov	r1, r4
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff ff0f 	bl	800b28c <__multiply>
 800b46e:	6020      	str	r0, [r4, #0]
 800b470:	f8c0 9000 	str.w	r9, [r0]
 800b474:	4604      	mov	r4, r0
 800b476:	e7e4      	b.n	800b442 <__pow5mult+0x6a>
 800b478:	4638      	mov	r0, r7
 800b47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47e:	bf00      	nop
 800b480:	0800cab8 	.word	0x0800cab8
 800b484:	0800c7fe 	.word	0x0800c7fe
 800b488:	0800c968 	.word	0x0800c968

0800b48c <__lshift>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	460c      	mov	r4, r1
 800b492:	6849      	ldr	r1, [r1, #4]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	4607      	mov	r7, r0
 800b49e:	4691      	mov	r9, r2
 800b4a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4a4:	f108 0601 	add.w	r6, r8, #1
 800b4a8:	42b3      	cmp	r3, r6
 800b4aa:	db0b      	blt.n	800b4c4 <__lshift+0x38>
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f7ff fd91 	bl	800afd4 <_Balloc>
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	b948      	cbnz	r0, 800b4ca <__lshift+0x3e>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b28      	ldr	r3, [pc, #160]	; (800b55c <__lshift+0xd0>)
 800b4ba:	4829      	ldr	r0, [pc, #164]	; (800b560 <__lshift+0xd4>)
 800b4bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4c0:	f000 fe3e 	bl	800c140 <__assert_func>
 800b4c4:	3101      	adds	r1, #1
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	e7ee      	b.n	800b4a8 <__lshift+0x1c>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f100 0114 	add.w	r1, r0, #20
 800b4d0:	f100 0210 	add.w	r2, r0, #16
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	4553      	cmp	r3, sl
 800b4d8:	db33      	blt.n	800b542 <__lshift+0xb6>
 800b4da:	6920      	ldr	r0, [r4, #16]
 800b4dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4e0:	f104 0314 	add.w	r3, r4, #20
 800b4e4:	f019 091f 	ands.w	r9, r9, #31
 800b4e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4f0:	d02b      	beq.n	800b54a <__lshift+0xbe>
 800b4f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b4f6:	468a      	mov	sl, r1
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	6818      	ldr	r0, [r3, #0]
 800b4fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b500:	4302      	orrs	r2, r0
 800b502:	f84a 2b04 	str.w	r2, [sl], #4
 800b506:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50a:	459c      	cmp	ip, r3
 800b50c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b510:	d8f3      	bhi.n	800b4fa <__lshift+0x6e>
 800b512:	ebac 0304 	sub.w	r3, ip, r4
 800b516:	3b15      	subs	r3, #21
 800b518:	f023 0303 	bic.w	r3, r3, #3
 800b51c:	3304      	adds	r3, #4
 800b51e:	f104 0015 	add.w	r0, r4, #21
 800b522:	4584      	cmp	ip, r0
 800b524:	bf38      	it	cc
 800b526:	2304      	movcc	r3, #4
 800b528:	50ca      	str	r2, [r1, r3]
 800b52a:	b10a      	cbz	r2, 800b530 <__lshift+0xa4>
 800b52c:	f108 0602 	add.w	r6, r8, #2
 800b530:	3e01      	subs	r6, #1
 800b532:	4638      	mov	r0, r7
 800b534:	612e      	str	r6, [r5, #16]
 800b536:	4621      	mov	r1, r4
 800b538:	f7ff fd8c 	bl	800b054 <_Bfree>
 800b53c:	4628      	mov	r0, r5
 800b53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b542:	f842 0f04 	str.w	r0, [r2, #4]!
 800b546:	3301      	adds	r3, #1
 800b548:	e7c5      	b.n	800b4d6 <__lshift+0x4a>
 800b54a:	3904      	subs	r1, #4
 800b54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b550:	f841 2f04 	str.w	r2, [r1, #4]!
 800b554:	459c      	cmp	ip, r3
 800b556:	d8f9      	bhi.n	800b54c <__lshift+0xc0>
 800b558:	e7ea      	b.n	800b530 <__lshift+0xa4>
 800b55a:	bf00      	nop
 800b55c:	0800c874 	.word	0x0800c874
 800b560:	0800c968 	.word	0x0800c968

0800b564 <__mcmp>:
 800b564:	b530      	push	{r4, r5, lr}
 800b566:	6902      	ldr	r2, [r0, #16]
 800b568:	690c      	ldr	r4, [r1, #16]
 800b56a:	1b12      	subs	r2, r2, r4
 800b56c:	d10e      	bne.n	800b58c <__mcmp+0x28>
 800b56e:	f100 0314 	add.w	r3, r0, #20
 800b572:	3114      	adds	r1, #20
 800b574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b57c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b584:	42a5      	cmp	r5, r4
 800b586:	d003      	beq.n	800b590 <__mcmp+0x2c>
 800b588:	d305      	bcc.n	800b596 <__mcmp+0x32>
 800b58a:	2201      	movs	r2, #1
 800b58c:	4610      	mov	r0, r2
 800b58e:	bd30      	pop	{r4, r5, pc}
 800b590:	4283      	cmp	r3, r0
 800b592:	d3f3      	bcc.n	800b57c <__mcmp+0x18>
 800b594:	e7fa      	b.n	800b58c <__mcmp+0x28>
 800b596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b59a:	e7f7      	b.n	800b58c <__mcmp+0x28>

0800b59c <__mdiff>:
 800b59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4617      	mov	r7, r2
 800b5aa:	f7ff ffdb 	bl	800b564 <__mcmp>
 800b5ae:	1e05      	subs	r5, r0, #0
 800b5b0:	d110      	bne.n	800b5d4 <__mdiff+0x38>
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff fd0d 	bl	800afd4 <_Balloc>
 800b5ba:	b930      	cbnz	r0, 800b5ca <__mdiff+0x2e>
 800b5bc:	4b39      	ldr	r3, [pc, #228]	; (800b6a4 <__mdiff+0x108>)
 800b5be:	4602      	mov	r2, r0
 800b5c0:	f240 2132 	movw	r1, #562	; 0x232
 800b5c4:	4838      	ldr	r0, [pc, #224]	; (800b6a8 <__mdiff+0x10c>)
 800b5c6:	f000 fdbb 	bl	800c140 <__assert_func>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d4:	bfa4      	itt	ge
 800b5d6:	463b      	movge	r3, r7
 800b5d8:	4627      	movge	r7, r4
 800b5da:	4630      	mov	r0, r6
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	bfa6      	itte	ge
 800b5e0:	461c      	movge	r4, r3
 800b5e2:	2500      	movge	r5, #0
 800b5e4:	2501      	movlt	r5, #1
 800b5e6:	f7ff fcf5 	bl	800afd4 <_Balloc>
 800b5ea:	b920      	cbnz	r0, 800b5f6 <__mdiff+0x5a>
 800b5ec:	4b2d      	ldr	r3, [pc, #180]	; (800b6a4 <__mdiff+0x108>)
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5f4:	e7e6      	b.n	800b5c4 <__mdiff+0x28>
 800b5f6:	693e      	ldr	r6, [r7, #16]
 800b5f8:	60c5      	str	r5, [r0, #12]
 800b5fa:	6925      	ldr	r5, [r4, #16]
 800b5fc:	f107 0114 	add.w	r1, r7, #20
 800b600:	f104 0914 	add.w	r9, r4, #20
 800b604:	f100 0e14 	add.w	lr, r0, #20
 800b608:	f107 0210 	add.w	r2, r7, #16
 800b60c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b610:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b614:	46f2      	mov	sl, lr
 800b616:	2700      	movs	r7, #0
 800b618:	f859 3b04 	ldr.w	r3, [r9], #4
 800b61c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b620:	fa1f f883 	uxth.w	r8, r3
 800b624:	fa17 f78b 	uxtah	r7, r7, fp
 800b628:	0c1b      	lsrs	r3, r3, #16
 800b62a:	eba7 0808 	sub.w	r8, r7, r8
 800b62e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b632:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b636:	fa1f f888 	uxth.w	r8, r8
 800b63a:	141f      	asrs	r7, r3, #16
 800b63c:	454d      	cmp	r5, r9
 800b63e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b642:	f84a 3b04 	str.w	r3, [sl], #4
 800b646:	d8e7      	bhi.n	800b618 <__mdiff+0x7c>
 800b648:	1b2b      	subs	r3, r5, r4
 800b64a:	3b15      	subs	r3, #21
 800b64c:	f023 0303 	bic.w	r3, r3, #3
 800b650:	3304      	adds	r3, #4
 800b652:	3415      	adds	r4, #21
 800b654:	42a5      	cmp	r5, r4
 800b656:	bf38      	it	cc
 800b658:	2304      	movcc	r3, #4
 800b65a:	4419      	add	r1, r3
 800b65c:	4473      	add	r3, lr
 800b65e:	469e      	mov	lr, r3
 800b660:	460d      	mov	r5, r1
 800b662:	4565      	cmp	r5, ip
 800b664:	d30e      	bcc.n	800b684 <__mdiff+0xe8>
 800b666:	f10c 0203 	add.w	r2, ip, #3
 800b66a:	1a52      	subs	r2, r2, r1
 800b66c:	f022 0203 	bic.w	r2, r2, #3
 800b670:	3903      	subs	r1, #3
 800b672:	458c      	cmp	ip, r1
 800b674:	bf38      	it	cc
 800b676:	2200      	movcc	r2, #0
 800b678:	441a      	add	r2, r3
 800b67a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b67e:	b17b      	cbz	r3, 800b6a0 <__mdiff+0x104>
 800b680:	6106      	str	r6, [r0, #16]
 800b682:	e7a5      	b.n	800b5d0 <__mdiff+0x34>
 800b684:	f855 8b04 	ldr.w	r8, [r5], #4
 800b688:	fa17 f488 	uxtah	r4, r7, r8
 800b68c:	1422      	asrs	r2, r4, #16
 800b68e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b692:	b2a4      	uxth	r4, r4
 800b694:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b698:	f84e 4b04 	str.w	r4, [lr], #4
 800b69c:	1417      	asrs	r7, r2, #16
 800b69e:	e7e0      	b.n	800b662 <__mdiff+0xc6>
 800b6a0:	3e01      	subs	r6, #1
 800b6a2:	e7ea      	b.n	800b67a <__mdiff+0xde>
 800b6a4:	0800c874 	.word	0x0800c874
 800b6a8:	0800c968 	.word	0x0800c968

0800b6ac <__ulp>:
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	ed8d 0b00 	vstr	d0, [sp]
 800b6b2:	9b01      	ldr	r3, [sp, #4]
 800b6b4:	4912      	ldr	r1, [pc, #72]	; (800b700 <__ulp+0x54>)
 800b6b6:	4019      	ands	r1, r3
 800b6b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b6bc:	2900      	cmp	r1, #0
 800b6be:	dd05      	ble.n	800b6cc <__ulp+0x20>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	ec43 2b10 	vmov	d0, r2, r3
 800b6c8:	b002      	add	sp, #8
 800b6ca:	4770      	bx	lr
 800b6cc:	4249      	negs	r1, r1
 800b6ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b6d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b6d6:	f04f 0200 	mov.w	r2, #0
 800b6da:	f04f 0300 	mov.w	r3, #0
 800b6de:	da04      	bge.n	800b6ea <__ulp+0x3e>
 800b6e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b6e4:	fa41 f300 	asr.w	r3, r1, r0
 800b6e8:	e7ec      	b.n	800b6c4 <__ulp+0x18>
 800b6ea:	f1a0 0114 	sub.w	r1, r0, #20
 800b6ee:	291e      	cmp	r1, #30
 800b6f0:	bfda      	itte	le
 800b6f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b6f6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b6fa:	2101      	movgt	r1, #1
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	e7e1      	b.n	800b6c4 <__ulp+0x18>
 800b700:	7ff00000 	.word	0x7ff00000

0800b704 <__b2d>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	6905      	ldr	r5, [r0, #16]
 800b708:	f100 0714 	add.w	r7, r0, #20
 800b70c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b710:	1f2e      	subs	r6, r5, #4
 800b712:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b716:	4620      	mov	r0, r4
 800b718:	f7ff fd52 	bl	800b1c0 <__hi0bits>
 800b71c:	f1c0 0320 	rsb	r3, r0, #32
 800b720:	280a      	cmp	r0, #10
 800b722:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b7a0 <__b2d+0x9c>
 800b726:	600b      	str	r3, [r1, #0]
 800b728:	dc14      	bgt.n	800b754 <__b2d+0x50>
 800b72a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b72e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b732:	42b7      	cmp	r7, r6
 800b734:	ea41 030c 	orr.w	r3, r1, ip
 800b738:	bf34      	ite	cc
 800b73a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b73e:	2100      	movcs	r1, #0
 800b740:	3015      	adds	r0, #21
 800b742:	fa04 f000 	lsl.w	r0, r4, r0
 800b746:	fa21 f10e 	lsr.w	r1, r1, lr
 800b74a:	ea40 0201 	orr.w	r2, r0, r1
 800b74e:	ec43 2b10 	vmov	d0, r2, r3
 800b752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b754:	42b7      	cmp	r7, r6
 800b756:	bf3a      	itte	cc
 800b758:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b75c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b760:	2100      	movcs	r1, #0
 800b762:	380b      	subs	r0, #11
 800b764:	d017      	beq.n	800b796 <__b2d+0x92>
 800b766:	f1c0 0c20 	rsb	ip, r0, #32
 800b76a:	fa04 f500 	lsl.w	r5, r4, r0
 800b76e:	42be      	cmp	r6, r7
 800b770:	fa21 f40c 	lsr.w	r4, r1, ip
 800b774:	ea45 0504 	orr.w	r5, r5, r4
 800b778:	bf8c      	ite	hi
 800b77a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b77e:	2400      	movls	r4, #0
 800b780:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b784:	fa01 f000 	lsl.w	r0, r1, r0
 800b788:	fa24 f40c 	lsr.w	r4, r4, ip
 800b78c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b790:	ea40 0204 	orr.w	r2, r0, r4
 800b794:	e7db      	b.n	800b74e <__b2d+0x4a>
 800b796:	ea44 030c 	orr.w	r3, r4, ip
 800b79a:	460a      	mov	r2, r1
 800b79c:	e7d7      	b.n	800b74e <__b2d+0x4a>
 800b79e:	bf00      	nop
 800b7a0:	3ff00000 	.word	0x3ff00000

0800b7a4 <__d2b>:
 800b7a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	ec57 6b10 	vmov	r6, r7, d0
 800b7b0:	4690      	mov	r8, r2
 800b7b2:	f7ff fc0f 	bl	800afd4 <_Balloc>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	b930      	cbnz	r0, 800b7c8 <__d2b+0x24>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b25      	ldr	r3, [pc, #148]	; (800b854 <__d2b+0xb0>)
 800b7be:	4826      	ldr	r0, [pc, #152]	; (800b858 <__d2b+0xb4>)
 800b7c0:	f240 310a 	movw	r1, #778	; 0x30a
 800b7c4:	f000 fcbc 	bl	800c140 <__assert_func>
 800b7c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7d0:	bb35      	cbnz	r5, 800b820 <__d2b+0x7c>
 800b7d2:	2e00      	cmp	r6, #0
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	d028      	beq.n	800b82a <__d2b+0x86>
 800b7d8:	4668      	mov	r0, sp
 800b7da:	9600      	str	r6, [sp, #0]
 800b7dc:	f7ff fd10 	bl	800b200 <__lo0bits>
 800b7e0:	9900      	ldr	r1, [sp, #0]
 800b7e2:	b300      	cbz	r0, 800b826 <__d2b+0x82>
 800b7e4:	9a01      	ldr	r2, [sp, #4]
 800b7e6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ee:	430b      	orrs	r3, r1
 800b7f0:	40c2      	lsrs	r2, r0
 800b7f2:	6163      	str	r3, [r4, #20]
 800b7f4:	9201      	str	r2, [sp, #4]
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	61a3      	str	r3, [r4, #24]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bf14      	ite	ne
 800b7fe:	2202      	movne	r2, #2
 800b800:	2201      	moveq	r2, #1
 800b802:	6122      	str	r2, [r4, #16]
 800b804:	b1d5      	cbz	r5, 800b83c <__d2b+0x98>
 800b806:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b80a:	4405      	add	r5, r0
 800b80c:	f8c9 5000 	str.w	r5, [r9]
 800b810:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b814:	f8c8 0000 	str.w	r0, [r8]
 800b818:	4620      	mov	r0, r4
 800b81a:	b003      	add	sp, #12
 800b81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b824:	e7d5      	b.n	800b7d2 <__d2b+0x2e>
 800b826:	6161      	str	r1, [r4, #20]
 800b828:	e7e5      	b.n	800b7f6 <__d2b+0x52>
 800b82a:	a801      	add	r0, sp, #4
 800b82c:	f7ff fce8 	bl	800b200 <__lo0bits>
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	2201      	movs	r2, #1
 800b836:	6122      	str	r2, [r4, #16]
 800b838:	3020      	adds	r0, #32
 800b83a:	e7e3      	b.n	800b804 <__d2b+0x60>
 800b83c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b844:	f8c9 0000 	str.w	r0, [r9]
 800b848:	6918      	ldr	r0, [r3, #16]
 800b84a:	f7ff fcb9 	bl	800b1c0 <__hi0bits>
 800b84e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b852:	e7df      	b.n	800b814 <__d2b+0x70>
 800b854:	0800c874 	.word	0x0800c874
 800b858:	0800c968 	.word	0x0800c968

0800b85c <__ratio>:
 800b85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	4688      	mov	r8, r1
 800b862:	4669      	mov	r1, sp
 800b864:	4681      	mov	r9, r0
 800b866:	f7ff ff4d 	bl	800b704 <__b2d>
 800b86a:	a901      	add	r1, sp, #4
 800b86c:	4640      	mov	r0, r8
 800b86e:	ec55 4b10 	vmov	r4, r5, d0
 800b872:	f7ff ff47 	bl	800b704 <__b2d>
 800b876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b87a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b87e:	eba3 0c02 	sub.w	ip, r3, r2
 800b882:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b88c:	ec51 0b10 	vmov	r0, r1, d0
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfd6      	itet	le
 800b894:	460a      	movle	r2, r1
 800b896:	462a      	movgt	r2, r5
 800b898:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b89c:	468b      	mov	fp, r1
 800b89e:	462f      	mov	r7, r5
 800b8a0:	bfd4      	ite	le
 800b8a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b8a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	ee10 2a10 	vmov	r2, s0
 800b8b0:	465b      	mov	r3, fp
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f4 ffda 	bl	800086c <__aeabi_ddiv>
 800b8b8:	ec41 0b10 	vmov	d0, r0, r1
 800b8bc:	b003      	add	sp, #12
 800b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8c2 <__copybits>:
 800b8c2:	3901      	subs	r1, #1
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	1149      	asrs	r1, r1, #5
 800b8c8:	6914      	ldr	r4, [r2, #16]
 800b8ca:	3101      	adds	r1, #1
 800b8cc:	f102 0314 	add.w	r3, r2, #20
 800b8d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8d8:	1f05      	subs	r5, r0, #4
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	d30c      	bcc.n	800b8f8 <__copybits+0x36>
 800b8de:	1aa3      	subs	r3, r4, r2
 800b8e0:	3b11      	subs	r3, #17
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	3211      	adds	r2, #17
 800b8e8:	42a2      	cmp	r2, r4
 800b8ea:	bf88      	it	hi
 800b8ec:	2300      	movhi	r3, #0
 800b8ee:	4418      	add	r0, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4288      	cmp	r0, r1
 800b8f4:	d305      	bcc.n	800b902 <__copybits+0x40>
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b900:	e7eb      	b.n	800b8da <__copybits+0x18>
 800b902:	f840 3b04 	str.w	r3, [r0], #4
 800b906:	e7f4      	b.n	800b8f2 <__copybits+0x30>

0800b908 <__any_on>:
 800b908:	f100 0214 	add.w	r2, r0, #20
 800b90c:	6900      	ldr	r0, [r0, #16]
 800b90e:	114b      	asrs	r3, r1, #5
 800b910:	4298      	cmp	r0, r3
 800b912:	b510      	push	{r4, lr}
 800b914:	db11      	blt.n	800b93a <__any_on+0x32>
 800b916:	dd0a      	ble.n	800b92e <__any_on+0x26>
 800b918:	f011 011f 	ands.w	r1, r1, #31
 800b91c:	d007      	beq.n	800b92e <__any_on+0x26>
 800b91e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b922:	fa24 f001 	lsr.w	r0, r4, r1
 800b926:	fa00 f101 	lsl.w	r1, r0, r1
 800b92a:	428c      	cmp	r4, r1
 800b92c:	d10b      	bne.n	800b946 <__any_on+0x3e>
 800b92e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b932:	4293      	cmp	r3, r2
 800b934:	d803      	bhi.n	800b93e <__any_on+0x36>
 800b936:	2000      	movs	r0, #0
 800b938:	bd10      	pop	{r4, pc}
 800b93a:	4603      	mov	r3, r0
 800b93c:	e7f7      	b.n	800b92e <__any_on+0x26>
 800b93e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b942:	2900      	cmp	r1, #0
 800b944:	d0f5      	beq.n	800b932 <__any_on+0x2a>
 800b946:	2001      	movs	r0, #1
 800b948:	e7f6      	b.n	800b938 <__any_on+0x30>

0800b94a <_calloc_r>:
 800b94a:	b513      	push	{r0, r1, r4, lr}
 800b94c:	434a      	muls	r2, r1
 800b94e:	4611      	mov	r1, r2
 800b950:	9201      	str	r2, [sp, #4]
 800b952:	f000 f859 	bl	800ba08 <_malloc_r>
 800b956:	4604      	mov	r4, r0
 800b958:	b118      	cbz	r0, 800b962 <_calloc_r+0x18>
 800b95a:	9a01      	ldr	r2, [sp, #4]
 800b95c:	2100      	movs	r1, #0
 800b95e:	f7fc f85b 	bl	8007a18 <memset>
 800b962:	4620      	mov	r0, r4
 800b964:	b002      	add	sp, #8
 800b966:	bd10      	pop	{r4, pc}

0800b968 <_free_r>:
 800b968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b96a:	2900      	cmp	r1, #0
 800b96c:	d048      	beq.n	800ba00 <_free_r+0x98>
 800b96e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b972:	9001      	str	r0, [sp, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	f1a1 0404 	sub.w	r4, r1, #4
 800b97a:	bfb8      	it	lt
 800b97c:	18e4      	addlt	r4, r4, r3
 800b97e:	f000 fc6d 	bl	800c25c <__malloc_lock>
 800b982:	4a20      	ldr	r2, [pc, #128]	; (800ba04 <_free_r+0x9c>)
 800b984:	9801      	ldr	r0, [sp, #4]
 800b986:	6813      	ldr	r3, [r2, #0]
 800b988:	4615      	mov	r5, r2
 800b98a:	b933      	cbnz	r3, 800b99a <_free_r+0x32>
 800b98c:	6063      	str	r3, [r4, #4]
 800b98e:	6014      	str	r4, [r2, #0]
 800b990:	b003      	add	sp, #12
 800b992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b996:	f000 bc67 	b.w	800c268 <__malloc_unlock>
 800b99a:	42a3      	cmp	r3, r4
 800b99c:	d90b      	bls.n	800b9b6 <_free_r+0x4e>
 800b99e:	6821      	ldr	r1, [r4, #0]
 800b9a0:	1862      	adds	r2, r4, r1
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	bf04      	itt	eq
 800b9a6:	681a      	ldreq	r2, [r3, #0]
 800b9a8:	685b      	ldreq	r3, [r3, #4]
 800b9aa:	6063      	str	r3, [r4, #4]
 800b9ac:	bf04      	itt	eq
 800b9ae:	1852      	addeq	r2, r2, r1
 800b9b0:	6022      	streq	r2, [r4, #0]
 800b9b2:	602c      	str	r4, [r5, #0]
 800b9b4:	e7ec      	b.n	800b990 <_free_r+0x28>
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b10b      	cbz	r3, 800b9c0 <_free_r+0x58>
 800b9bc:	42a3      	cmp	r3, r4
 800b9be:	d9fa      	bls.n	800b9b6 <_free_r+0x4e>
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	1855      	adds	r5, r2, r1
 800b9c4:	42a5      	cmp	r5, r4
 800b9c6:	d10b      	bne.n	800b9e0 <_free_r+0x78>
 800b9c8:	6824      	ldr	r4, [r4, #0]
 800b9ca:	4421      	add	r1, r4
 800b9cc:	1854      	adds	r4, r2, r1
 800b9ce:	42a3      	cmp	r3, r4
 800b9d0:	6011      	str	r1, [r2, #0]
 800b9d2:	d1dd      	bne.n	800b990 <_free_r+0x28>
 800b9d4:	681c      	ldr	r4, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	6053      	str	r3, [r2, #4]
 800b9da:	4421      	add	r1, r4
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	e7d7      	b.n	800b990 <_free_r+0x28>
 800b9e0:	d902      	bls.n	800b9e8 <_free_r+0x80>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	e7d3      	b.n	800b990 <_free_r+0x28>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf04      	itt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	bf04      	itt	eq
 800b9f8:	1949      	addeq	r1, r1, r5
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	6054      	str	r4, [r2, #4]
 800b9fe:	e7c7      	b.n	800b990 <_free_r+0x28>
 800ba00:	b003      	add	sp, #12
 800ba02:	bd30      	pop	{r4, r5, pc}
 800ba04:	20000208 	.word	0x20000208

0800ba08 <_malloc_r>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	1ccd      	adds	r5, r1, #3
 800ba0c:	f025 0503 	bic.w	r5, r5, #3
 800ba10:	3508      	adds	r5, #8
 800ba12:	2d0c      	cmp	r5, #12
 800ba14:	bf38      	it	cc
 800ba16:	250c      	movcc	r5, #12
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	db01      	blt.n	800ba22 <_malloc_r+0x1a>
 800ba1e:	42a9      	cmp	r1, r5
 800ba20:	d903      	bls.n	800ba2a <_malloc_r+0x22>
 800ba22:	230c      	movs	r3, #12
 800ba24:	6033      	str	r3, [r6, #0]
 800ba26:	2000      	movs	r0, #0
 800ba28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2a:	f000 fc17 	bl	800c25c <__malloc_lock>
 800ba2e:	4921      	ldr	r1, [pc, #132]	; (800bab4 <_malloc_r+0xac>)
 800ba30:	680a      	ldr	r2, [r1, #0]
 800ba32:	4614      	mov	r4, r2
 800ba34:	b99c      	cbnz	r4, 800ba5e <_malloc_r+0x56>
 800ba36:	4f20      	ldr	r7, [pc, #128]	; (800bab8 <_malloc_r+0xb0>)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	b923      	cbnz	r3, 800ba46 <_malloc_r+0x3e>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f000 fafa 	bl	800c038 <_sbrk_r>
 800ba44:	6038      	str	r0, [r7, #0]
 800ba46:	4629      	mov	r1, r5
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f000 faf5 	bl	800c038 <_sbrk_r>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	d123      	bne.n	800ba9a <_malloc_r+0x92>
 800ba52:	230c      	movs	r3, #12
 800ba54:	6033      	str	r3, [r6, #0]
 800ba56:	4630      	mov	r0, r6
 800ba58:	f000 fc06 	bl	800c268 <__malloc_unlock>
 800ba5c:	e7e3      	b.n	800ba26 <_malloc_r+0x1e>
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	1b5b      	subs	r3, r3, r5
 800ba62:	d417      	bmi.n	800ba94 <_malloc_r+0x8c>
 800ba64:	2b0b      	cmp	r3, #11
 800ba66:	d903      	bls.n	800ba70 <_malloc_r+0x68>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	441c      	add	r4, r3
 800ba6c:	6025      	str	r5, [r4, #0]
 800ba6e:	e004      	b.n	800ba7a <_malloc_r+0x72>
 800ba70:	6863      	ldr	r3, [r4, #4]
 800ba72:	42a2      	cmp	r2, r4
 800ba74:	bf0c      	ite	eq
 800ba76:	600b      	streq	r3, [r1, #0]
 800ba78:	6053      	strne	r3, [r2, #4]
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f000 fbf4 	bl	800c268 <__malloc_unlock>
 800ba80:	f104 000b 	add.w	r0, r4, #11
 800ba84:	1d23      	adds	r3, r4, #4
 800ba86:	f020 0007 	bic.w	r0, r0, #7
 800ba8a:	1ac2      	subs	r2, r0, r3
 800ba8c:	d0cc      	beq.n	800ba28 <_malloc_r+0x20>
 800ba8e:	1a1b      	subs	r3, r3, r0
 800ba90:	50a3      	str	r3, [r4, r2]
 800ba92:	e7c9      	b.n	800ba28 <_malloc_r+0x20>
 800ba94:	4622      	mov	r2, r4
 800ba96:	6864      	ldr	r4, [r4, #4]
 800ba98:	e7cc      	b.n	800ba34 <_malloc_r+0x2c>
 800ba9a:	1cc4      	adds	r4, r0, #3
 800ba9c:	f024 0403 	bic.w	r4, r4, #3
 800baa0:	42a0      	cmp	r0, r4
 800baa2:	d0e3      	beq.n	800ba6c <_malloc_r+0x64>
 800baa4:	1a21      	subs	r1, r4, r0
 800baa6:	4630      	mov	r0, r6
 800baa8:	f000 fac6 	bl	800c038 <_sbrk_r>
 800baac:	3001      	adds	r0, #1
 800baae:	d1dd      	bne.n	800ba6c <_malloc_r+0x64>
 800bab0:	e7cf      	b.n	800ba52 <_malloc_r+0x4a>
 800bab2:	bf00      	nop
 800bab4:	20000208 	.word	0x20000208
 800bab8:	2000020c 	.word	0x2000020c

0800babc <__ssputs_r>:
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	688e      	ldr	r6, [r1, #8]
 800bac2:	429e      	cmp	r6, r3
 800bac4:	4682      	mov	sl, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	4690      	mov	r8, r2
 800baca:	461f      	mov	r7, r3
 800bacc:	d838      	bhi.n	800bb40 <__ssputs_r+0x84>
 800bace:	898a      	ldrh	r2, [r1, #12]
 800bad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bad4:	d032      	beq.n	800bb3c <__ssputs_r+0x80>
 800bad6:	6825      	ldr	r5, [r4, #0]
 800bad8:	6909      	ldr	r1, [r1, #16]
 800bada:	eba5 0901 	sub.w	r9, r5, r1
 800bade:	6965      	ldr	r5, [r4, #20]
 800bae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bae8:	3301      	adds	r3, #1
 800baea:	444b      	add	r3, r9
 800baec:	106d      	asrs	r5, r5, #1
 800baee:	429d      	cmp	r5, r3
 800baf0:	bf38      	it	cc
 800baf2:	461d      	movcc	r5, r3
 800baf4:	0553      	lsls	r3, r2, #21
 800baf6:	d531      	bpl.n	800bb5c <__ssputs_r+0xa0>
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7ff ff85 	bl	800ba08 <_malloc_r>
 800bafe:	4606      	mov	r6, r0
 800bb00:	b950      	cbnz	r0, 800bb18 <__ssputs_r+0x5c>
 800bb02:	230c      	movs	r3, #12
 800bb04:	f8ca 3000 	str.w	r3, [sl]
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb0e:	81a3      	strh	r3, [r4, #12]
 800bb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb18:	6921      	ldr	r1, [r4, #16]
 800bb1a:	464a      	mov	r2, r9
 800bb1c:	f7ff fa4c 	bl	800afb8 <memcpy>
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	6126      	str	r6, [r4, #16]
 800bb2e:	6165      	str	r5, [r4, #20]
 800bb30:	444e      	add	r6, r9
 800bb32:	eba5 0509 	sub.w	r5, r5, r9
 800bb36:	6026      	str	r6, [r4, #0]
 800bb38:	60a5      	str	r5, [r4, #8]
 800bb3a:	463e      	mov	r6, r7
 800bb3c:	42be      	cmp	r6, r7
 800bb3e:	d900      	bls.n	800bb42 <__ssputs_r+0x86>
 800bb40:	463e      	mov	r6, r7
 800bb42:	4632      	mov	r2, r6
 800bb44:	6820      	ldr	r0, [r4, #0]
 800bb46:	4641      	mov	r1, r8
 800bb48:	f000 fb6e 	bl	800c228 <memmove>
 800bb4c:	68a3      	ldr	r3, [r4, #8]
 800bb4e:	6822      	ldr	r2, [r4, #0]
 800bb50:	1b9b      	subs	r3, r3, r6
 800bb52:	4432      	add	r2, r6
 800bb54:	60a3      	str	r3, [r4, #8]
 800bb56:	6022      	str	r2, [r4, #0]
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e7db      	b.n	800bb14 <__ssputs_r+0x58>
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	f000 fb89 	bl	800c274 <_realloc_r>
 800bb62:	4606      	mov	r6, r0
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d1e1      	bne.n	800bb2c <__ssputs_r+0x70>
 800bb68:	6921      	ldr	r1, [r4, #16]
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	f7ff fefc 	bl	800b968 <_free_r>
 800bb70:	e7c7      	b.n	800bb02 <__ssputs_r+0x46>
	...

0800bb74 <_svfiprintf_r>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	4698      	mov	r8, r3
 800bb7a:	898b      	ldrh	r3, [r1, #12]
 800bb7c:	061b      	lsls	r3, r3, #24
 800bb7e:	b09d      	sub	sp, #116	; 0x74
 800bb80:	4607      	mov	r7, r0
 800bb82:	460d      	mov	r5, r1
 800bb84:	4614      	mov	r4, r2
 800bb86:	d50e      	bpl.n	800bba6 <_svfiprintf_r+0x32>
 800bb88:	690b      	ldr	r3, [r1, #16]
 800bb8a:	b963      	cbnz	r3, 800bba6 <_svfiprintf_r+0x32>
 800bb8c:	2140      	movs	r1, #64	; 0x40
 800bb8e:	f7ff ff3b 	bl	800ba08 <_malloc_r>
 800bb92:	6028      	str	r0, [r5, #0]
 800bb94:	6128      	str	r0, [r5, #16]
 800bb96:	b920      	cbnz	r0, 800bba2 <_svfiprintf_r+0x2e>
 800bb98:	230c      	movs	r3, #12
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bba0:	e0d1      	b.n	800bd46 <_svfiprintf_r+0x1d2>
 800bba2:	2340      	movs	r3, #64	; 0x40
 800bba4:	616b      	str	r3, [r5, #20]
 800bba6:	2300      	movs	r3, #0
 800bba8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbaa:	2320      	movs	r3, #32
 800bbac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbb4:	2330      	movs	r3, #48	; 0x30
 800bbb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd60 <_svfiprintf_r+0x1ec>
 800bbba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbbe:	f04f 0901 	mov.w	r9, #1
 800bbc2:	4623      	mov	r3, r4
 800bbc4:	469a      	mov	sl, r3
 800bbc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbca:	b10a      	cbz	r2, 800bbd0 <_svfiprintf_r+0x5c>
 800bbcc:	2a25      	cmp	r2, #37	; 0x25
 800bbce:	d1f9      	bne.n	800bbc4 <_svfiprintf_r+0x50>
 800bbd0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbd4:	d00b      	beq.n	800bbee <_svfiprintf_r+0x7a>
 800bbd6:	465b      	mov	r3, fp
 800bbd8:	4622      	mov	r2, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7ff ff6d 	bl	800babc <__ssputs_r>
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	f000 80aa 	beq.w	800bd3c <_svfiprintf_r+0x1c8>
 800bbe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbea:	445a      	add	r2, fp
 800bbec:	9209      	str	r2, [sp, #36]	; 0x24
 800bbee:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 80a2 	beq.w	800bd3c <_svfiprintf_r+0x1c8>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc02:	f10a 0a01 	add.w	sl, sl, #1
 800bc06:	9304      	str	r3, [sp, #16]
 800bc08:	9307      	str	r3, [sp, #28]
 800bc0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc0e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc10:	4654      	mov	r4, sl
 800bc12:	2205      	movs	r2, #5
 800bc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc18:	4851      	ldr	r0, [pc, #324]	; (800bd60 <_svfiprintf_r+0x1ec>)
 800bc1a:	f7f4 faf1 	bl	8000200 <memchr>
 800bc1e:	9a04      	ldr	r2, [sp, #16]
 800bc20:	b9d8      	cbnz	r0, 800bc5a <_svfiprintf_r+0xe6>
 800bc22:	06d0      	lsls	r0, r2, #27
 800bc24:	bf44      	itt	mi
 800bc26:	2320      	movmi	r3, #32
 800bc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc2c:	0711      	lsls	r1, r2, #28
 800bc2e:	bf44      	itt	mi
 800bc30:	232b      	movmi	r3, #43	; 0x2b
 800bc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc36:	f89a 3000 	ldrb.w	r3, [sl]
 800bc3a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc3c:	d015      	beq.n	800bc6a <_svfiprintf_r+0xf6>
 800bc3e:	9a07      	ldr	r2, [sp, #28]
 800bc40:	4654      	mov	r4, sl
 800bc42:	2000      	movs	r0, #0
 800bc44:	f04f 0c0a 	mov.w	ip, #10
 800bc48:	4621      	mov	r1, r4
 800bc4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc4e:	3b30      	subs	r3, #48	; 0x30
 800bc50:	2b09      	cmp	r3, #9
 800bc52:	d94e      	bls.n	800bcf2 <_svfiprintf_r+0x17e>
 800bc54:	b1b0      	cbz	r0, 800bc84 <_svfiprintf_r+0x110>
 800bc56:	9207      	str	r2, [sp, #28]
 800bc58:	e014      	b.n	800bc84 <_svfiprintf_r+0x110>
 800bc5a:	eba0 0308 	sub.w	r3, r0, r8
 800bc5e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc62:	4313      	orrs	r3, r2
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	46a2      	mov	sl, r4
 800bc68:	e7d2      	b.n	800bc10 <_svfiprintf_r+0x9c>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	1d19      	adds	r1, r3, #4
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	9103      	str	r1, [sp, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bfbb      	ittet	lt
 800bc76:	425b      	neglt	r3, r3
 800bc78:	f042 0202 	orrlt.w	r2, r2, #2
 800bc7c:	9307      	strge	r3, [sp, #28]
 800bc7e:	9307      	strlt	r3, [sp, #28]
 800bc80:	bfb8      	it	lt
 800bc82:	9204      	strlt	r2, [sp, #16]
 800bc84:	7823      	ldrb	r3, [r4, #0]
 800bc86:	2b2e      	cmp	r3, #46	; 0x2e
 800bc88:	d10c      	bne.n	800bca4 <_svfiprintf_r+0x130>
 800bc8a:	7863      	ldrb	r3, [r4, #1]
 800bc8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc8e:	d135      	bne.n	800bcfc <_svfiprintf_r+0x188>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	1d1a      	adds	r2, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	9203      	str	r2, [sp, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfb8      	it	lt
 800bc9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bca0:	3402      	adds	r4, #2
 800bca2:	9305      	str	r3, [sp, #20]
 800bca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd70 <_svfiprintf_r+0x1fc>
 800bca8:	7821      	ldrb	r1, [r4, #0]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	4650      	mov	r0, sl
 800bcae:	f7f4 faa7 	bl	8000200 <memchr>
 800bcb2:	b140      	cbz	r0, 800bcc6 <_svfiprintf_r+0x152>
 800bcb4:	2340      	movs	r3, #64	; 0x40
 800bcb6:	eba0 000a 	sub.w	r0, r0, sl
 800bcba:	fa03 f000 	lsl.w	r0, r3, r0
 800bcbe:	9b04      	ldr	r3, [sp, #16]
 800bcc0:	4303      	orrs	r3, r0
 800bcc2:	3401      	adds	r4, #1
 800bcc4:	9304      	str	r3, [sp, #16]
 800bcc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcca:	4826      	ldr	r0, [pc, #152]	; (800bd64 <_svfiprintf_r+0x1f0>)
 800bccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcd0:	2206      	movs	r2, #6
 800bcd2:	f7f4 fa95 	bl	8000200 <memchr>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d038      	beq.n	800bd4c <_svfiprintf_r+0x1d8>
 800bcda:	4b23      	ldr	r3, [pc, #140]	; (800bd68 <_svfiprintf_r+0x1f4>)
 800bcdc:	bb1b      	cbnz	r3, 800bd26 <_svfiprintf_r+0x1b2>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	3307      	adds	r3, #7
 800bce2:	f023 0307 	bic.w	r3, r3, #7
 800bce6:	3308      	adds	r3, #8
 800bce8:	9303      	str	r3, [sp, #12]
 800bcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcec:	4433      	add	r3, r6
 800bcee:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf0:	e767      	b.n	800bbc2 <_svfiprintf_r+0x4e>
 800bcf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	e7a5      	b.n	800bc48 <_svfiprintf_r+0xd4>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	3401      	adds	r4, #1
 800bd00:	9305      	str	r3, [sp, #20]
 800bd02:	4619      	mov	r1, r3
 800bd04:	f04f 0c0a 	mov.w	ip, #10
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd0e:	3a30      	subs	r2, #48	; 0x30
 800bd10:	2a09      	cmp	r2, #9
 800bd12:	d903      	bls.n	800bd1c <_svfiprintf_r+0x1a8>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d0c5      	beq.n	800bca4 <_svfiprintf_r+0x130>
 800bd18:	9105      	str	r1, [sp, #20]
 800bd1a:	e7c3      	b.n	800bca4 <_svfiprintf_r+0x130>
 800bd1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd20:	4604      	mov	r4, r0
 800bd22:	2301      	movs	r3, #1
 800bd24:	e7f0      	b.n	800bd08 <_svfiprintf_r+0x194>
 800bd26:	ab03      	add	r3, sp, #12
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <_svfiprintf_r+0x1f8>)
 800bd2e:	a904      	add	r1, sp, #16
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7fb ff19 	bl	8007b68 <_printf_float>
 800bd36:	1c42      	adds	r2, r0, #1
 800bd38:	4606      	mov	r6, r0
 800bd3a:	d1d6      	bne.n	800bcea <_svfiprintf_r+0x176>
 800bd3c:	89ab      	ldrh	r3, [r5, #12]
 800bd3e:	065b      	lsls	r3, r3, #25
 800bd40:	f53f af2c 	bmi.w	800bb9c <_svfiprintf_r+0x28>
 800bd44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd46:	b01d      	add	sp, #116	; 0x74
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4c:	ab03      	add	r3, sp, #12
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	462a      	mov	r2, r5
 800bd52:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <_svfiprintf_r+0x1f8>)
 800bd54:	a904      	add	r1, sp, #16
 800bd56:	4638      	mov	r0, r7
 800bd58:	f7fc f9aa 	bl	80080b0 <_printf_i>
 800bd5c:	e7eb      	b.n	800bd36 <_svfiprintf_r+0x1c2>
 800bd5e:	bf00      	nop
 800bd60:	0800cac4 	.word	0x0800cac4
 800bd64:	0800cace 	.word	0x0800cace
 800bd68:	08007b69 	.word	0x08007b69
 800bd6c:	0800babd 	.word	0x0800babd
 800bd70:	0800caca 	.word	0x0800caca

0800bd74 <__sfputc_r>:
 800bd74:	6893      	ldr	r3, [r2, #8]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	b410      	push	{r4}
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	da08      	bge.n	800bd92 <__sfputc_r+0x1e>
 800bd80:	6994      	ldr	r4, [r2, #24]
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	db01      	blt.n	800bd8a <__sfputc_r+0x16>
 800bd86:	290a      	cmp	r1, #10
 800bd88:	d103      	bne.n	800bd92 <__sfputc_r+0x1e>
 800bd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd8e:	f7fd bc2d 	b.w	80095ec <__swbuf_r>
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	1c58      	adds	r0, r3, #1
 800bd96:	6010      	str	r0, [r2, #0]
 800bd98:	7019      	strb	r1, [r3, #0]
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <__sfputs_r>:
 800bda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4614      	mov	r4, r2
 800bdaa:	18d5      	adds	r5, r2, r3
 800bdac:	42ac      	cmp	r4, r5
 800bdae:	d101      	bne.n	800bdb4 <__sfputs_r+0x12>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e007      	b.n	800bdc4 <__sfputs_r+0x22>
 800bdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb8:	463a      	mov	r2, r7
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff ffda 	bl	800bd74 <__sfputc_r>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d1f3      	bne.n	800bdac <__sfputs_r+0xa>
 800bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc8 <_vfiprintf_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	460d      	mov	r5, r1
 800bdce:	b09d      	sub	sp, #116	; 0x74
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	4698      	mov	r8, r3
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	b118      	cbz	r0, 800bde0 <_vfiprintf_r+0x18>
 800bdd8:	6983      	ldr	r3, [r0, #24]
 800bdda:	b90b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x18>
 800bddc:	f7fe fc5a 	bl	800a694 <__sinit>
 800bde0:	4b89      	ldr	r3, [pc, #548]	; (800c008 <_vfiprintf_r+0x240>)
 800bde2:	429d      	cmp	r5, r3
 800bde4:	d11b      	bne.n	800be1e <_vfiprintf_r+0x56>
 800bde6:	6875      	ldr	r5, [r6, #4]
 800bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x32>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x32>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf6:	f7ff f85e 	bl	800aeb6 <__retarget_lock_acquire_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	d501      	bpl.n	800be04 <_vfiprintf_r+0x3c>
 800be00:	692b      	ldr	r3, [r5, #16]
 800be02:	b9eb      	cbnz	r3, 800be40 <_vfiprintf_r+0x78>
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f7fd fc42 	bl	8009690 <__swsetup_r>
 800be0c:	b1c0      	cbz	r0, 800be40 <_vfiprintf_r+0x78>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be10:	07dc      	lsls	r4, r3, #31
 800be12:	d50e      	bpl.n	800be32 <_vfiprintf_r+0x6a>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be18:	b01d      	add	sp, #116	; 0x74
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	4b7b      	ldr	r3, [pc, #492]	; (800c00c <_vfiprintf_r+0x244>)
 800be20:	429d      	cmp	r5, r3
 800be22:	d101      	bne.n	800be28 <_vfiprintf_r+0x60>
 800be24:	68b5      	ldr	r5, [r6, #8]
 800be26:	e7df      	b.n	800bde8 <_vfiprintf_r+0x20>
 800be28:	4b79      	ldr	r3, [pc, #484]	; (800c010 <_vfiprintf_r+0x248>)
 800be2a:	429d      	cmp	r5, r3
 800be2c:	bf08      	it	eq
 800be2e:	68f5      	ldreq	r5, [r6, #12]
 800be30:	e7da      	b.n	800bde8 <_vfiprintf_r+0x20>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	0598      	lsls	r0, r3, #22
 800be36:	d4ed      	bmi.n	800be14 <_vfiprintf_r+0x4c>
 800be38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be3a:	f7ff f83d 	bl	800aeb8 <__retarget_lock_release_recursive>
 800be3e:	e7e9      	b.n	800be14 <_vfiprintf_r+0x4c>
 800be40:	2300      	movs	r3, #0
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	2320      	movs	r3, #32
 800be46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be4e:	2330      	movs	r3, #48	; 0x30
 800be50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c014 <_vfiprintf_r+0x24c>
 800be54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be58:	f04f 0901 	mov.w	r9, #1
 800be5c:	4623      	mov	r3, r4
 800be5e:	469a      	mov	sl, r3
 800be60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be64:	b10a      	cbz	r2, 800be6a <_vfiprintf_r+0xa2>
 800be66:	2a25      	cmp	r2, #37	; 0x25
 800be68:	d1f9      	bne.n	800be5e <_vfiprintf_r+0x96>
 800be6a:	ebba 0b04 	subs.w	fp, sl, r4
 800be6e:	d00b      	beq.n	800be88 <_vfiprintf_r+0xc0>
 800be70:	465b      	mov	r3, fp
 800be72:	4622      	mov	r2, r4
 800be74:	4629      	mov	r1, r5
 800be76:	4630      	mov	r0, r6
 800be78:	f7ff ff93 	bl	800bda2 <__sfputs_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	f000 80aa 	beq.w	800bfd6 <_vfiprintf_r+0x20e>
 800be82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be84:	445a      	add	r2, fp
 800be86:	9209      	str	r2, [sp, #36]	; 0x24
 800be88:	f89a 3000 	ldrb.w	r3, [sl]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 80a2 	beq.w	800bfd6 <_vfiprintf_r+0x20e>
 800be92:	2300      	movs	r3, #0
 800be94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be9c:	f10a 0a01 	add.w	sl, sl, #1
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	9307      	str	r3, [sp, #28]
 800bea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea8:	931a      	str	r3, [sp, #104]	; 0x68
 800beaa:	4654      	mov	r4, sl
 800beac:	2205      	movs	r2, #5
 800beae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb2:	4858      	ldr	r0, [pc, #352]	; (800c014 <_vfiprintf_r+0x24c>)
 800beb4:	f7f4 f9a4 	bl	8000200 <memchr>
 800beb8:	9a04      	ldr	r2, [sp, #16]
 800beba:	b9d8      	cbnz	r0, 800bef4 <_vfiprintf_r+0x12c>
 800bebc:	06d1      	lsls	r1, r2, #27
 800bebe:	bf44      	itt	mi
 800bec0:	2320      	movmi	r3, #32
 800bec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec6:	0713      	lsls	r3, r2, #28
 800bec8:	bf44      	itt	mi
 800beca:	232b      	movmi	r3, #43	; 0x2b
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed0:	f89a 3000 	ldrb.w	r3, [sl]
 800bed4:	2b2a      	cmp	r3, #42	; 0x2a
 800bed6:	d015      	beq.n	800bf04 <_vfiprintf_r+0x13c>
 800bed8:	9a07      	ldr	r2, [sp, #28]
 800beda:	4654      	mov	r4, sl
 800bedc:	2000      	movs	r0, #0
 800bede:	f04f 0c0a 	mov.w	ip, #10
 800bee2:	4621      	mov	r1, r4
 800bee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee8:	3b30      	subs	r3, #48	; 0x30
 800beea:	2b09      	cmp	r3, #9
 800beec:	d94e      	bls.n	800bf8c <_vfiprintf_r+0x1c4>
 800beee:	b1b0      	cbz	r0, 800bf1e <_vfiprintf_r+0x156>
 800bef0:	9207      	str	r2, [sp, #28]
 800bef2:	e014      	b.n	800bf1e <_vfiprintf_r+0x156>
 800bef4:	eba0 0308 	sub.w	r3, r0, r8
 800bef8:	fa09 f303 	lsl.w	r3, r9, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	46a2      	mov	sl, r4
 800bf02:	e7d2      	b.n	800beaa <_vfiprintf_r+0xe2>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1d19      	adds	r1, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	9103      	str	r1, [sp, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfbb      	ittet	lt
 800bf10:	425b      	neglt	r3, r3
 800bf12:	f042 0202 	orrlt.w	r2, r2, #2
 800bf16:	9307      	strge	r3, [sp, #28]
 800bf18:	9307      	strlt	r3, [sp, #28]
 800bf1a:	bfb8      	it	lt
 800bf1c:	9204      	strlt	r2, [sp, #16]
 800bf1e:	7823      	ldrb	r3, [r4, #0]
 800bf20:	2b2e      	cmp	r3, #46	; 0x2e
 800bf22:	d10c      	bne.n	800bf3e <_vfiprintf_r+0x176>
 800bf24:	7863      	ldrb	r3, [r4, #1]
 800bf26:	2b2a      	cmp	r3, #42	; 0x2a
 800bf28:	d135      	bne.n	800bf96 <_vfiprintf_r+0x1ce>
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	1d1a      	adds	r2, r3, #4
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	9203      	str	r2, [sp, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bfb8      	it	lt
 800bf36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf3a:	3402      	adds	r4, #2
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c024 <_vfiprintf_r+0x25c>
 800bf42:	7821      	ldrb	r1, [r4, #0]
 800bf44:	2203      	movs	r2, #3
 800bf46:	4650      	mov	r0, sl
 800bf48:	f7f4 f95a 	bl	8000200 <memchr>
 800bf4c:	b140      	cbz	r0, 800bf60 <_vfiprintf_r+0x198>
 800bf4e:	2340      	movs	r3, #64	; 0x40
 800bf50:	eba0 000a 	sub.w	r0, r0, sl
 800bf54:	fa03 f000 	lsl.w	r0, r3, r0
 800bf58:	9b04      	ldr	r3, [sp, #16]
 800bf5a:	4303      	orrs	r3, r0
 800bf5c:	3401      	adds	r4, #1
 800bf5e:	9304      	str	r3, [sp, #16]
 800bf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf64:	482c      	ldr	r0, [pc, #176]	; (800c018 <_vfiprintf_r+0x250>)
 800bf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf6a:	2206      	movs	r2, #6
 800bf6c:	f7f4 f948 	bl	8000200 <memchr>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d03f      	beq.n	800bff4 <_vfiprintf_r+0x22c>
 800bf74:	4b29      	ldr	r3, [pc, #164]	; (800c01c <_vfiprintf_r+0x254>)
 800bf76:	bb1b      	cbnz	r3, 800bfc0 <_vfiprintf_r+0x1f8>
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	3307      	adds	r3, #7
 800bf7c:	f023 0307 	bic.w	r3, r3, #7
 800bf80:	3308      	adds	r3, #8
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf86:	443b      	add	r3, r7
 800bf88:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8a:	e767      	b.n	800be5c <_vfiprintf_r+0x94>
 800bf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf90:	460c      	mov	r4, r1
 800bf92:	2001      	movs	r0, #1
 800bf94:	e7a5      	b.n	800bee2 <_vfiprintf_r+0x11a>
 800bf96:	2300      	movs	r3, #0
 800bf98:	3401      	adds	r4, #1
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f04f 0c0a 	mov.w	ip, #10
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa8:	3a30      	subs	r2, #48	; 0x30
 800bfaa:	2a09      	cmp	r2, #9
 800bfac:	d903      	bls.n	800bfb6 <_vfiprintf_r+0x1ee>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0c5      	beq.n	800bf3e <_vfiprintf_r+0x176>
 800bfb2:	9105      	str	r1, [sp, #20]
 800bfb4:	e7c3      	b.n	800bf3e <_vfiprintf_r+0x176>
 800bfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfba:	4604      	mov	r4, r0
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e7f0      	b.n	800bfa2 <_vfiprintf_r+0x1da>
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4b16      	ldr	r3, [pc, #88]	; (800c020 <_vfiprintf_r+0x258>)
 800bfc8:	a904      	add	r1, sp, #16
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7fb fdcc 	bl	8007b68 <_printf_float>
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	1c78      	adds	r0, r7, #1
 800bfd4:	d1d6      	bne.n	800bf84 <_vfiprintf_r+0x1bc>
 800bfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd8:	07d9      	lsls	r1, r3, #31
 800bfda:	d405      	bmi.n	800bfe8 <_vfiprintf_r+0x220>
 800bfdc:	89ab      	ldrh	r3, [r5, #12]
 800bfde:	059a      	lsls	r2, r3, #22
 800bfe0:	d402      	bmi.n	800bfe8 <_vfiprintf_r+0x220>
 800bfe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe4:	f7fe ff68 	bl	800aeb8 <__retarget_lock_release_recursive>
 800bfe8:	89ab      	ldrh	r3, [r5, #12]
 800bfea:	065b      	lsls	r3, r3, #25
 800bfec:	f53f af12 	bmi.w	800be14 <_vfiprintf_r+0x4c>
 800bff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bff2:	e711      	b.n	800be18 <_vfiprintf_r+0x50>
 800bff4:	ab03      	add	r3, sp, #12
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	462a      	mov	r2, r5
 800bffa:	4b09      	ldr	r3, [pc, #36]	; (800c020 <_vfiprintf_r+0x258>)
 800bffc:	a904      	add	r1, sp, #16
 800bffe:	4630      	mov	r0, r6
 800c000:	f7fc f856 	bl	80080b0 <_printf_i>
 800c004:	e7e4      	b.n	800bfd0 <_vfiprintf_r+0x208>
 800c006:	bf00      	nop
 800c008:	0800c8a8 	.word	0x0800c8a8
 800c00c:	0800c8c8 	.word	0x0800c8c8
 800c010:	0800c888 	.word	0x0800c888
 800c014:	0800cac4 	.word	0x0800cac4
 800c018:	0800cace 	.word	0x0800cace
 800c01c:	08007b69 	.word	0x08007b69
 800c020:	0800bda3 	.word	0x0800bda3
 800c024:	0800caca 	.word	0x0800caca

0800c028 <nan>:
 800c028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c030 <nan+0x8>
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	00000000 	.word	0x00000000
 800c034:	7ff80000 	.word	0x7ff80000

0800c038 <_sbrk_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d06      	ldr	r5, [pc, #24]	; (800c054 <_sbrk_r+0x1c>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	f7f5 fd9c 	bl	8001b80 <_sbrk>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_sbrk_r+0x1a>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_sbrk_r+0x1a>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	2000043c 	.word	0x2000043c

0800c058 <__sread>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	460c      	mov	r4, r1
 800c05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c060:	f000 f92e 	bl	800c2c0 <_read_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	bfab      	itete	ge
 800c068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c06a:	89a3      	ldrhlt	r3, [r4, #12]
 800c06c:	181b      	addge	r3, r3, r0
 800c06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c072:	bfac      	ite	ge
 800c074:	6563      	strge	r3, [r4, #84]	; 0x54
 800c076:	81a3      	strhlt	r3, [r4, #12]
 800c078:	bd10      	pop	{r4, pc}

0800c07a <__swrite>:
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	461f      	mov	r7, r3
 800c080:	898b      	ldrh	r3, [r1, #12]
 800c082:	05db      	lsls	r3, r3, #23
 800c084:	4605      	mov	r5, r0
 800c086:	460c      	mov	r4, r1
 800c088:	4616      	mov	r6, r2
 800c08a:	d505      	bpl.n	800c098 <__swrite+0x1e>
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2302      	movs	r3, #2
 800c092:	2200      	movs	r2, #0
 800c094:	f000 f8b6 	bl	800c204 <_lseek_r>
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ae:	f000 b835 	b.w	800c11c <_write_r>

0800c0b2 <__sseek>:
 800c0b2:	b510      	push	{r4, lr}
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ba:	f000 f8a3 	bl	800c204 <_lseek_r>
 800c0be:	1c43      	adds	r3, r0, #1
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	bf15      	itete	ne
 800c0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ce:	81a3      	strheq	r3, [r4, #12]
 800c0d0:	bf18      	it	ne
 800c0d2:	81a3      	strhne	r3, [r4, #12]
 800c0d4:	bd10      	pop	{r4, pc}

0800c0d6 <__sclose>:
 800c0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0da:	f000 b84f 	b.w	800c17c <_close_r>

0800c0de <strncmp>:
 800c0de:	b510      	push	{r4, lr}
 800c0e0:	b16a      	cbz	r2, 800c0fe <strncmp+0x20>
 800c0e2:	3901      	subs	r1, #1
 800c0e4:	1884      	adds	r4, r0, r2
 800c0e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d103      	bne.n	800c0fa <strncmp+0x1c>
 800c0f2:	42a0      	cmp	r0, r4
 800c0f4:	d001      	beq.n	800c0fa <strncmp+0x1c>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1f5      	bne.n	800c0e6 <strncmp+0x8>
 800c0fa:	1a98      	subs	r0, r3, r2
 800c0fc:	bd10      	pop	{r4, pc}
 800c0fe:	4610      	mov	r0, r2
 800c100:	e7fc      	b.n	800c0fc <strncmp+0x1e>

0800c102 <__ascii_wctomb>:
 800c102:	b149      	cbz	r1, 800c118 <__ascii_wctomb+0x16>
 800c104:	2aff      	cmp	r2, #255	; 0xff
 800c106:	bf85      	ittet	hi
 800c108:	238a      	movhi	r3, #138	; 0x8a
 800c10a:	6003      	strhi	r3, [r0, #0]
 800c10c:	700a      	strbls	r2, [r1, #0]
 800c10e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c112:	bf98      	it	ls
 800c114:	2001      	movls	r0, #1
 800c116:	4770      	bx	lr
 800c118:	4608      	mov	r0, r1
 800c11a:	4770      	bx	lr

0800c11c <_write_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d07      	ldr	r5, [pc, #28]	; (800c13c <_write_r+0x20>)
 800c120:	4604      	mov	r4, r0
 800c122:	4608      	mov	r0, r1
 800c124:	4611      	mov	r1, r2
 800c126:	2200      	movs	r2, #0
 800c128:	602a      	str	r2, [r5, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f7f4 fe19 	bl	8000d62 <_write>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_write_r+0x1e>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_write_r+0x1e>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	2000043c 	.word	0x2000043c

0800c140 <__assert_func>:
 800c140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c142:	4614      	mov	r4, r2
 800c144:	461a      	mov	r2, r3
 800c146:	4b09      	ldr	r3, [pc, #36]	; (800c16c <__assert_func+0x2c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4605      	mov	r5, r0
 800c14c:	68d8      	ldr	r0, [r3, #12]
 800c14e:	b14c      	cbz	r4, 800c164 <__assert_func+0x24>
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <__assert_func+0x30>)
 800c152:	9100      	str	r1, [sp, #0]
 800c154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c158:	4906      	ldr	r1, [pc, #24]	; (800c174 <__assert_func+0x34>)
 800c15a:	462b      	mov	r3, r5
 800c15c:	f000 f81e 	bl	800c19c <fiprintf>
 800c160:	f000 f8c0 	bl	800c2e4 <abort>
 800c164:	4b04      	ldr	r3, [pc, #16]	; (800c178 <__assert_func+0x38>)
 800c166:	461c      	mov	r4, r3
 800c168:	e7f3      	b.n	800c152 <__assert_func+0x12>
 800c16a:	bf00      	nop
 800c16c:	2000000c 	.word	0x2000000c
 800c170:	0800cad5 	.word	0x0800cad5
 800c174:	0800cae2 	.word	0x0800cae2
 800c178:	0800cb10 	.word	0x0800cb10

0800c17c <_close_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d06      	ldr	r5, [pc, #24]	; (800c198 <_close_r+0x1c>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	f7f5 fcc5 	bl	8001b16 <_close>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_close_r+0x1a>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_close_r+0x1a>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	2000043c 	.word	0x2000043c

0800c19c <fiprintf>:
 800c19c:	b40e      	push	{r1, r2, r3}
 800c19e:	b503      	push	{r0, r1, lr}
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	ab03      	add	r3, sp, #12
 800c1a4:	4805      	ldr	r0, [pc, #20]	; (800c1bc <fiprintf+0x20>)
 800c1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	f7ff fe0b 	bl	800bdc8 <_vfiprintf_r>
 800c1b2:	b002      	add	sp, #8
 800c1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1b8:	b003      	add	sp, #12
 800c1ba:	4770      	bx	lr
 800c1bc:	2000000c 	.word	0x2000000c

0800c1c0 <_fstat_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d07      	ldr	r5, [pc, #28]	; (800c1e0 <_fstat_r+0x20>)
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	602b      	str	r3, [r5, #0]
 800c1ce:	f7f5 fcae 	bl	8001b2e <_fstat>
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	d102      	bne.n	800c1dc <_fstat_r+0x1c>
 800c1d6:	682b      	ldr	r3, [r5, #0]
 800c1d8:	b103      	cbz	r3, 800c1dc <_fstat_r+0x1c>
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	bd38      	pop	{r3, r4, r5, pc}
 800c1de:	bf00      	nop
 800c1e0:	2000043c 	.word	0x2000043c

0800c1e4 <_isatty_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d06      	ldr	r5, [pc, #24]	; (800c200 <_isatty_r+0x1c>)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	4608      	mov	r0, r1
 800c1ee:	602b      	str	r3, [r5, #0]
 800c1f0:	f7f5 fcad 	bl	8001b4e <_isatty>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_isatty_r+0x1a>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_isatty_r+0x1a>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	2000043c 	.word	0x2000043c

0800c204 <_lseek_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4d07      	ldr	r5, [pc, #28]	; (800c224 <_lseek_r+0x20>)
 800c208:	4604      	mov	r4, r0
 800c20a:	4608      	mov	r0, r1
 800c20c:	4611      	mov	r1, r2
 800c20e:	2200      	movs	r2, #0
 800c210:	602a      	str	r2, [r5, #0]
 800c212:	461a      	mov	r2, r3
 800c214:	f7f5 fca6 	bl	8001b64 <_lseek>
 800c218:	1c43      	adds	r3, r0, #1
 800c21a:	d102      	bne.n	800c222 <_lseek_r+0x1e>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	b103      	cbz	r3, 800c222 <_lseek_r+0x1e>
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	2000043c 	.word	0x2000043c

0800c228 <memmove>:
 800c228:	4288      	cmp	r0, r1
 800c22a:	b510      	push	{r4, lr}
 800c22c:	eb01 0402 	add.w	r4, r1, r2
 800c230:	d902      	bls.n	800c238 <memmove+0x10>
 800c232:	4284      	cmp	r4, r0
 800c234:	4623      	mov	r3, r4
 800c236:	d807      	bhi.n	800c248 <memmove+0x20>
 800c238:	1e43      	subs	r3, r0, #1
 800c23a:	42a1      	cmp	r1, r4
 800c23c:	d008      	beq.n	800c250 <memmove+0x28>
 800c23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c246:	e7f8      	b.n	800c23a <memmove+0x12>
 800c248:	4402      	add	r2, r0
 800c24a:	4601      	mov	r1, r0
 800c24c:	428a      	cmp	r2, r1
 800c24e:	d100      	bne.n	800c252 <memmove+0x2a>
 800c250:	bd10      	pop	{r4, pc}
 800c252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c25a:	e7f7      	b.n	800c24c <memmove+0x24>

0800c25c <__malloc_lock>:
 800c25c:	4801      	ldr	r0, [pc, #4]	; (800c264 <__malloc_lock+0x8>)
 800c25e:	f7fe be2a 	b.w	800aeb6 <__retarget_lock_acquire_recursive>
 800c262:	bf00      	nop
 800c264:	20000434 	.word	0x20000434

0800c268 <__malloc_unlock>:
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <__malloc_unlock+0x8>)
 800c26a:	f7fe be25 	b.w	800aeb8 <__retarget_lock_release_recursive>
 800c26e:	bf00      	nop
 800c270:	20000434 	.word	0x20000434

0800c274 <_realloc_r>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	4607      	mov	r7, r0
 800c278:	4614      	mov	r4, r2
 800c27a:	460e      	mov	r6, r1
 800c27c:	b921      	cbnz	r1, 800c288 <_realloc_r+0x14>
 800c27e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c282:	4611      	mov	r1, r2
 800c284:	f7ff bbc0 	b.w	800ba08 <_malloc_r>
 800c288:	b922      	cbnz	r2, 800c294 <_realloc_r+0x20>
 800c28a:	f7ff fb6d 	bl	800b968 <_free_r>
 800c28e:	4625      	mov	r5, r4
 800c290:	4628      	mov	r0, r5
 800c292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c294:	f000 f82d 	bl	800c2f2 <_malloc_usable_size_r>
 800c298:	42a0      	cmp	r0, r4
 800c29a:	d20f      	bcs.n	800c2bc <_realloc_r+0x48>
 800c29c:	4621      	mov	r1, r4
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff fbb2 	bl	800ba08 <_malloc_r>
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d0f2      	beq.n	800c290 <_realloc_r+0x1c>
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	f7fe fe83 	bl	800afb8 <memcpy>
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f7ff fb57 	bl	800b968 <_free_r>
 800c2ba:	e7e9      	b.n	800c290 <_realloc_r+0x1c>
 800c2bc:	4635      	mov	r5, r6
 800c2be:	e7e7      	b.n	800c290 <_realloc_r+0x1c>

0800c2c0 <_read_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	; (800c2e0 <_read_r+0x20>)
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	4608      	mov	r0, r1
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	602a      	str	r2, [r5, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f7f5 fc04 	bl	8001adc <_read>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_read_r+0x1e>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_read_r+0x1e>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	2000043c 	.word	0x2000043c

0800c2e4 <abort>:
 800c2e4:	b508      	push	{r3, lr}
 800c2e6:	2006      	movs	r0, #6
 800c2e8:	f000 f834 	bl	800c354 <raise>
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	f7f5 fbeb 	bl	8001ac8 <_exit>

0800c2f2 <_malloc_usable_size_r>:
 800c2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f6:	1f18      	subs	r0, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	bfbc      	itt	lt
 800c2fc:	580b      	ldrlt	r3, [r1, r0]
 800c2fe:	18c0      	addlt	r0, r0, r3
 800c300:	4770      	bx	lr

0800c302 <_raise_r>:
 800c302:	291f      	cmp	r1, #31
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4604      	mov	r4, r0
 800c308:	460d      	mov	r5, r1
 800c30a:	d904      	bls.n	800c316 <_raise_r+0x14>
 800c30c:	2316      	movs	r3, #22
 800c30e:	6003      	str	r3, [r0, #0]
 800c310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c314:	bd38      	pop	{r3, r4, r5, pc}
 800c316:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c318:	b112      	cbz	r2, 800c320 <_raise_r+0x1e>
 800c31a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c31e:	b94b      	cbnz	r3, 800c334 <_raise_r+0x32>
 800c320:	4620      	mov	r0, r4
 800c322:	f000 f831 	bl	800c388 <_getpid_r>
 800c326:	462a      	mov	r2, r5
 800c328:	4601      	mov	r1, r0
 800c32a:	4620      	mov	r0, r4
 800c32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c330:	f000 b818 	b.w	800c364 <_kill_r>
 800c334:	2b01      	cmp	r3, #1
 800c336:	d00a      	beq.n	800c34e <_raise_r+0x4c>
 800c338:	1c59      	adds	r1, r3, #1
 800c33a:	d103      	bne.n	800c344 <_raise_r+0x42>
 800c33c:	2316      	movs	r3, #22
 800c33e:	6003      	str	r3, [r0, #0]
 800c340:	2001      	movs	r0, #1
 800c342:	e7e7      	b.n	800c314 <_raise_r+0x12>
 800c344:	2400      	movs	r4, #0
 800c346:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c34a:	4628      	mov	r0, r5
 800c34c:	4798      	blx	r3
 800c34e:	2000      	movs	r0, #0
 800c350:	e7e0      	b.n	800c314 <_raise_r+0x12>
	...

0800c354 <raise>:
 800c354:	4b02      	ldr	r3, [pc, #8]	; (800c360 <raise+0xc>)
 800c356:	4601      	mov	r1, r0
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	f7ff bfd2 	b.w	800c302 <_raise_r>
 800c35e:	bf00      	nop
 800c360:	2000000c 	.word	0x2000000c

0800c364 <_kill_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d07      	ldr	r5, [pc, #28]	; (800c384 <_kill_r+0x20>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	4611      	mov	r1, r2
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	f7f5 fb99 	bl	8001aa8 <_kill>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d102      	bne.n	800c380 <_kill_r+0x1c>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	b103      	cbz	r3, 800c380 <_kill_r+0x1c>
 800c37e:	6023      	str	r3, [r4, #0]
 800c380:	bd38      	pop	{r3, r4, r5, pc}
 800c382:	bf00      	nop
 800c384:	2000043c 	.word	0x2000043c

0800c388 <_getpid_r>:
 800c388:	f7f5 bb86 	b.w	8001a98 <_getpid>

0800c38c <_init>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	bf00      	nop
 800c390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c392:	bc08      	pop	{r3}
 800c394:	469e      	mov	lr, r3
 800c396:	4770      	bx	lr

0800c398 <_fini>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	bf00      	nop
 800c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39e:	bc08      	pop	{r3}
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	4770      	bx	lr
