
VST104-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b764  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800b918  0800b918  0001b918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001e8  0800c230  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800c230  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be82  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d3  00000000  00000000  0003c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  0003f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00040870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011f90  00000000  00000000  00041d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006e58  00000000  00000000  00053cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005ab20  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000074f4  00000000  00000000  0005ab74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b8fc 	.word	0x0800b8fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800b8fc 	.word	0x0800b8fc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001034:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001038:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d013      	beq.n	800106c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001044:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001048:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800104c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001054:	e000      	b.n	8001058 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001056:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001058:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f9      	beq.n	8001056 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001062:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_write>:
static void MX_USART3_UART_Init(void);
static void MX_I2C4_Init(void);
/* USER CODE BEGIN PFP */

// SWD printf() replacement
int _write(int file, char *ptr, int len) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e009      	b.n	80010a0 <_write+0x26>
		ITM_SendChar((*ptr++));
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffc9 	bl	800102c <ITM_SendChar>
	for(int i=0; i<len; i++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf1      	blt.n	800108c <_write+0x12>
	return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f001 f932 	bl	8002322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 f853 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 fbe3 	bl	800188c <MX_GPIO_Init>
  MX_ADC1_Init();
 80010c6:	f000 f90f 	bl	80012e8 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010ca:	f000 f9e9 	bl	80014a0 <MX_CAN1_Init>
  MX_CAN2_Init();
 80010ce:	f000 fa1d 	bl	800150c <MX_CAN2_Init>
  MX_I2C2_Init();
 80010d2:	f000 fa51 	bl	8001578 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80010d6:	f000 fb0f 	bl	80016f8 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80010da:	f000 fb39 	bl	8001750 <MX_SPI1_Init>
  MX_ADC2_Init();
 80010de:	f000 f97b 	bl	80013d8 <MX_ADC2_Init>
  MX_I2C3_Init();
 80010e2:	f000 fa89 	bl	80015f8 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80010e6:	f000 fb71 	bl	80017cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010ea:	f000 fb9f 	bl	800182c <MX_USART3_UART_Init>
  MX_I2C4_Init();
 80010ee:	f000 fac3 	bl	8001678 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

	//test SDW printf()
  	HAL_Delay(1500);
 80010f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f6:	f001 f989 	bl	800240c <HAL_Delay>
	printf("\nProgramm initialized\n\n");
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <main+0xa4>)
 80010fc:	f006 fe74 	bl	8007de8 <puts>

	// assign UART pointers
	log_assignHuart(&huart2, &huart3);
 8001100:	4916      	ldr	r1, [pc, #88]	; (800115c <main+0xa8>)
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <main+0xac>)
 8001104:	f005 fda6 	bl	8006c54 <log_assignHuart>

	// open log isolators
	log_enable();
 8001108:	f005 fdba 	bl	8006c80 <log_enable>


	for(int i=0; i<3; i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e006      	b.n	8001120 <main+0x6c>
		s25fl256l_configure(&hqspi, i);
 8001112:	68f9      	ldr	r1, [r7, #12]
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <main+0xb0>)
 8001116:	f005 fc39 	bl	800698c <s25fl256l_configure>
	for(int i=0; i<3; i++) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b02      	cmp	r3, #2
 8001124:	ddf5      	ble.n	8001112 <main+0x5e>
	}


	for(int i=0; i<3; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e006      	b.n	800113a <main+0x86>
		s25fl256l_readManufac(&hqspi, i);
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <main+0xb0>)
 8001130:	f005 fcc4 	bl	8006abc <s25fl256l_readManufac>
	for(int i=0; i<3; i++) {
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3301      	adds	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b02      	cmp	r3, #2
 800113e:	ddf5      	ble.n	800112c <main+0x78>
	}

	int memmories[] = {0, 1};
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
	s25fl256l_writeSectorRandom(&hqspi, memmories, 2, 0);
 8001148:	4639      	mov	r1, r7
 800114a:	2300      	movs	r3, #0
 800114c:	2202      	movs	r2, #2
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <main+0xb0>)
 8001150:	f005 fb70 	bl	8006834 <s25fl256l_writeSectorRandom>



	while(1) {
 8001154:	e7fe      	b.n	8001154 <main+0xa0>
 8001156:	bf00      	nop
 8001158:	0800b918 	.word	0x0800b918
 800115c:	200002b0 	.word	0x200002b0
 8001160:	200004dc 	.word	0x200004dc
 8001164:	20000588 	.word	0x20000588

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0c0      	sub	sp, #256	; 0x100
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001172:	2244      	movs	r2, #68	; 0x44
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 fec4 	bl	8006f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	228c      	movs	r2, #140	; 0x8c
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f005 feb5 	bl	8006f04 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fa07 	bl	8004600 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 fc42 	bl	8001a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800121a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800121e:	2103      	movs	r1, #3
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fe13 	bl	8004e4c <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800122c:	f000 fc28 	bl	8001a80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <SystemClock_Config+0x178>)
 8001232:	61fb      	str	r3, [r7, #28]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001244:	2300      	movs	r3, #0
 8001246:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800124c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001258:	2308      	movs	r3, #8
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fff0 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800127e:	f000 fbff 	bl	8001a80 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001286:	f002 fd81 	bl	8003d8c <HAL_PWREx_ControlVoltageScaling>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001290:	f000 fbf6 	bl	8001a80 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <SystemClock_Config+0x17c>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <SystemClock_Config+0x17c>)
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129e:	6593      	str	r3, [r2, #88]	; 0x58
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <SystemClock_Config+0x17c>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80012a8:	463b      	mov	r3, r7
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	463b      	mov	r3, r7
 80012ae:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80012b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80012be:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80012c2:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80012c4:	2322      	movs	r3, #34	; 0x22
 80012c6:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80012c8:	2320      	movs	r3, #32
 80012ca:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 fabe 	bl	8005850 <HAL_RCCEx_CRSConfig>
}
 80012d4:	bf00      	nop
 80012d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	00104186 	.word	0x00104186
 80012e4:	40021000 	.word	0x40021000

080012e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <MX_ADC1_Init+0xe4>)
 800130c:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <MX_ADC1_Init+0xe8>)
 800130e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001312:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_ADC1_Init+0xe4>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_ADC1_Init+0xe4>)
 800132c:	2204      	movs	r2, #4
 800132e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001332:	2200      	movs	r2, #0
 8001334:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001338:	2200      	movs	r2, #0
 800133a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_ADC1_Init+0xe4>)
 800133e:	2201      	movs	r2, #1
 8001340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_ADC1_Init+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001352:	2200      	movs	r2, #0
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001360:	2200      	movs	r2, #0
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800136c:	4817      	ldr	r0, [pc, #92]	; (80013cc <MX_ADC1_Init+0xe4>)
 800136e:	f001 fa11 	bl	8002794 <HAL_ADC_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001378:	f000 fb82 	bl	8001a80 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_ADC1_Init+0xe4>)
 8001388:	f001 ff90 	bl	80032ac <HAL_ADCEx_MultiModeConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001392:	f000 fb75 	bl	8001a80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_ADC1_Init+0xec>)
 8001398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139a:	2306      	movs	r3, #6
 800139c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a2:	237f      	movs	r3, #127	; 0x7f
 80013a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a6:	2304      	movs	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_ADC1_Init+0xe4>)
 80013b4:	f001 fb48 	bl	8002a48 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80013be:	f000 fb5f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200003e8 	.word	0x200003e8
 80013d0:	50040000 	.word	0x50040000
 80013d4:	10c00010 	.word	0x10c00010

080013d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <MX_ADC2_Init+0xbc>)
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <MX_ADC2_Init+0xc0>)
 80013f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <MX_ADC2_Init+0xbc>)
 80013f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <MX_ADC2_Init+0xbc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_ADC2_Init+0xbc>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001410:	2204      	movs	r2, #4
 8001412:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001416:	2200      	movs	r2, #0
 8001418:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_ADC2_Init+0xbc>)
 800141c:	2200      	movs	r2, #0
 800141e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001436:	2200      	movs	r2, #0
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_ADC2_Init+0xbc>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_ADC2_Init+0xbc>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001450:	4810      	ldr	r0, [pc, #64]	; (8001494 <MX_ADC2_Init+0xbc>)
 8001452:	f001 f99f 	bl	8002794 <HAL_ADC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800145c:	f000 fb10 	bl	8001a80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_ADC2_Init+0xc4>)
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001464:	2306      	movs	r3, #6
 8001466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800146c:	237f      	movs	r3, #127	; 0x7f
 800146e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001470:	2304      	movs	r3, #4
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_ADC2_Init+0xbc>)
 800147e:	f001 fae3 	bl	8002a48 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001488:	f000 fafa 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000334 	.word	0x20000334
 8001498:	50040100 	.word	0x50040100
 800149c:	0c900008 	.word	0x0c900008

080014a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_CAN1_Init+0x64>)
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <MX_CAN1_Init+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_CAN1_Init+0x64>)
 80014ac:	2210      	movs	r2, #16
 80014ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_CAN1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CAN1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_CAN1_Init+0x64>)
 80014be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CAN1_Init+0x64>)
 80014c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CAN1_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_CAN1_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_CAN1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CAN1_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_CAN1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CAN1_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_CAN1_Init+0x64>)
 80014f2:	f001 ff8b 	bl	800340c <HAL_CAN_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014fc:	f000 fac0 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000560 	.word	0x20000560
 8001508:	40006400 	.word	0x40006400

0800150c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_CAN2_Init+0x64>)
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <MX_CAN2_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_CAN2_Init+0x64>)
 8001518:	2210      	movs	r2, #16
 800151a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_CAN2_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_CAN2_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_CAN2_Init+0x64>)
 800152a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800152e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_CAN2_Init+0x64>)
 8001532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001536:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_CAN2_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_CAN2_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_CAN2_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_CAN2_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_CAN2_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_CAN2_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_CAN2_Init+0x64>)
 800155e:	f001 ff55 	bl	800340c <HAL_CAN_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001568:	f000 fa8a 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000450 	.word	0x20000450
 8001574:	40006800 	.word	0x40006800

08001578 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_I2C2_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_I2C2_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_I2C2_Init+0x74>)
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <MX_I2C2_Init+0x7c>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_I2C2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_I2C2_Init+0x74>)
 8001590:	2201      	movs	r2, #1
 8001592:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_I2C2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_I2C2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C2_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C2_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <MX_I2C2_Init+0x74>)
 80015b4:	f002 fab6 	bl	8003b24 <HAL_I2C_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015be:	f000 fa5f 	bl	8001a80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <MX_I2C2_Init+0x74>)
 80015c6:	f002 fb3c 	bl	8003c42 <HAL_I2CEx_ConfigAnalogFilter>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015d0:	f000 fa56 	bl	8001a80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_I2C2_Init+0x74>)
 80015d8:	f002 fb7e 	bl	8003cd8 <HAL_I2CEx_ConfigDigitalFilter>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f000 fa4d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000039c 	.word	0x2000039c
 80015f0:	40005800 	.word	0x40005800
 80015f4:	10707dbc 	.word	0x10707dbc

080015f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_I2C3_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_I2C3_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_I2C3_Init+0x74>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <MX_I2C3_Init+0x7c>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_I2C3_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_I2C3_Init+0x74>)
 8001610:	2201      	movs	r2, #1
 8001612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_I2C3_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_I2C3_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C3_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C3_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C3_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <MX_I2C3_Init+0x74>)
 8001634:	f002 fa76 	bl	8003b24 <HAL_I2C_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800163e:	f000 fa1f 	bl	8001a80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <MX_I2C3_Init+0x74>)
 8001646:	f002 fafc 	bl	8003c42 <HAL_I2CEx_ConfigAnalogFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001650:	f000 fa16 	bl	8001a80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_I2C3_Init+0x74>)
 8001658:	f002 fb3e 	bl	8003cd8 <HAL_I2CEx_ConfigDigitalFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001662:	f000 fa0d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000218 	.word	0x20000218
 8001670:	40005c00 	.word	0x40005c00
 8001674:	10707dbc 	.word	0x10707dbc

08001678 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_I2C4_Init+0x74>)
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <MX_I2C4_Init+0x78>)
 8001680:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_I2C4_Init+0x74>)
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <MX_I2C4_Init+0x7c>)
 8001686:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_I2C4_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_I2C4_Init+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_I2C4_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_I2C4_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_I2C4_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_I2C4_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_I2C4_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <MX_I2C4_Init+0x74>)
 80016b4:	f002 fa36 	bl	8003b24 <HAL_I2C_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80016be:	f000 f9df 	bl	8001a80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <MX_I2C4_Init+0x74>)
 80016c6:	f002 fabc 	bl	8003c42 <HAL_I2CEx_ConfigAnalogFilter>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80016d0:	f000 f9d6 	bl	8001a80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_I2C4_Init+0x74>)
 80016d8:	f002 fafe 	bl	8003cd8 <HAL_I2CEx_ConfigDigitalFilter>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 f9cd 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000264 	.word	0x20000264
 80016f0:	40008400 	.word	0x40008400
 80016f4:	10707dbc 	.word	0x10707dbc

080016f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_QUADSPI_Init+0x50>)
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <MX_QUADSPI_Init+0x54>)
 8001700:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_QUADSPI_Init+0x50>)
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_QUADSPI_Init+0x50>)
 800170a:	2201      	movs	r2, #1
 800170c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_QUADSPI_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_QUADSPI_Init+0x50>)
 8001716:	221f      	movs	r2, #31
 8001718:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_QUADSPI_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_QUADSPI_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_QUADSPI_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_QUADSPI_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_QUADSPI_Init+0x50>)
 8001734:	f002 fb90 	bl	8003e58 <HAL_QSPI_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800173e:	f000 f99f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000588 	.word	0x20000588
 800174c:	a0001000 	.word	0xa0001000

08001750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_SPI1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_SPI1_Init+0x74>)
 800175c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_SPI1_Init+0x74>)
 800176a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800176e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_SPI1_Init+0x74>)
 800177e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001782:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SPI1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_SPI1_Init+0x74>)
 800179e:	2207      	movs	r2, #7
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_SPI1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_SPI1_Init+0x74>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_SPI1_Init+0x74>)
 80017b0:	f004 fa5e 	bl	8005c70 <HAL_SPI_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 f961 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000478 	.word	0x20000478
 80017c8:	40013000 	.word	0x40013000

080017cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <MX_USART2_UART_Init+0x5c>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017f4:	2208      	movs	r2, #8
 80017f6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <MX_USART2_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_USART2_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <MX_USART2_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_USART2_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_USART2_UART_Init+0x58>)
 8001812:	f004 fad0 	bl	8005db6 <HAL_UART_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 800181c:	f000 f930 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200004dc 	.word	0x200004dc
 8001828:	40004400 	.word	0x40004400

0800182c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001832:	4a15      	ldr	r2, [pc, #84]	; (8001888 <MX_USART3_UART_Init+0x5c>)
 8001834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800183c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_USART3_UART_Init+0x58>)
 800184c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001850:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001854:	2208      	movs	r2, #8
 8001856:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_USART3_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_USART3_UART_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_USART3_UART_Init+0x58>)
 8001872:	f004 faa0 	bl	8005db6 <HAL_UART_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 800187c:	f000 f900 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002b0 	.word	0x200002b0
 8001888:	40004800 	.word	0x40004800

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b71      	ldr	r3, [pc, #452]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a70      	ldr	r2, [pc, #448]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b6e      	ldr	r3, [pc, #440]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d2:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4a64      	ldr	r2, [pc, #400]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <MX_GPIO_Init+0x1dc>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800194a:	f002 fa75 	bl	8003e38 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2102      	movs	r1, #2
 8001952:	4846      	ldr	r0, [pc, #280]	; (8001a6c <MX_GPIO_Init+0x1e0>)
 8001954:	f002 f8ce 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HOLD_Pin|SP1_WP_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2113      	movs	r1, #19
 800195c:	4844      	ldr	r0, [pc, #272]	; (8001a70 <MX_GPIO_Init+0x1e4>)
 800195e:	f002 f8c9 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8001962:	2200      	movs	r2, #0
 8001964:	f240 611b 	movw	r1, #1563	; 0x61b
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f002 f8c2 	bl	8003af4 <HAL_GPIO_WritePin>
                          |TEST2_Pin|TEST1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001976:	483f      	ldr	r0, [pc, #252]	; (8001a74 <MX_GPIO_Init+0x1e8>)
 8001978:	f002 f8bc 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin|I2C3_EN_Pin|I2C2_EN_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4189 	mov.w	r1, #17536	; 0x4480
 8001982:	483d      	ldr	r0, [pc, #244]	; (8001a78 <MX_GPIO_Init+0x1ec>)
 8001984:	f002 f8b6 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_EN_GPIO_Port, UART2_EN_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2104      	movs	r1, #4
 800198c:	483b      	ldr	r0, [pc, #236]	; (8001a7c <MX_GPIO_Init+0x1f0>)
 800198e:	f002 f8b1 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4830      	ldr	r0, [pc, #192]	; (8001a6c <MX_GPIO_Init+0x1e0>)
 80019aa:	f001 ff11 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HOLD_Pin SP1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_HOLD_Pin|SP1_WP_Pin;
 80019ae:	2303      	movs	r3, #3
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	482a      	ldr	r0, [pc, #168]	; (8001a70 <MX_GPIO_Init+0x1e4>)
 80019c6:	f001 ff03 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin SPI1_CS3_Pin SPI1_CS2_Pin
                           TEST2_Pin TEST1_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 80019ca:	f240 631b 	movw	r3, #1563	; 0x61b
 80019ce:	61fb      	str	r3, [r7, #28]
                          |TEST2_Pin|TEST1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e6:	f001 fef3 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 80019ea:	2310      	movs	r3, #16
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	481b      	ldr	r0, [pc, #108]	; (8001a70 <MX_GPIO_Init+0x1e4>)
 8001a02:	f001 fee5 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C4_EN_Pin */
  GPIO_InitStruct.Pin = I2C4_EN_Pin;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(I2C4_EN_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4815      	ldr	r0, [pc, #84]	; (8001a74 <MX_GPIO_Init+0x1e8>)
 8001a20:	f001 fed6 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART3_EN_Pin I2C3_EN_Pin I2C2_EN_Pin */
  GPIO_InitStruct.Pin = UART3_EN_Pin|I2C3_EN_Pin|I2C2_EN_Pin;
 8001a24:	f44f 4389 	mov.w	r3, #17536	; 0x4480
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <MX_GPIO_Init+0x1ec>)
 8001a3e:	f001 fec7 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin;
 8001a42:	2304      	movs	r3, #4
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART2_EN_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <MX_GPIO_Init+0x1f0>)
 8001a5a:	f001 feb9 	bl	80037d0 <HAL_GPIO_Init>

}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	; 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	48001c00 	.word	0x48001c00
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000400 	.word	0x48000400
 8001a78:	48000c00 	.word	0x48000c00
 8001a7c:	48001800 	.word	0x48001800

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a33      	ldr	r2, [pc, #204]	; (8001bc0 <HAL_ADC_MspInit+0xec>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12d      	bne.n	8001b52 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_ADC_MspInit+0xf0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_ADC_MspInit+0xf0>)
 8001afe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_ADC_MspInit+0xf0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2c:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF1_CUR_Pin;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b3c:	230b      	movs	r3, #11
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF1_CUR_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4820      	ldr	r0, [pc, #128]	; (8001bcc <HAL_ADC_MspInit+0xf8>)
 8001b4c:	f001 fe40 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b50:	e031      	b.n	8001bb6 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_ADC_MspInit+0xfc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d12c      	bne.n	8001bb6 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_ADC_MspInit+0xf0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_ADC_MspInit+0xf0>)
 8001b64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_ADC_MspInit+0xf0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d10b      	bne.n	8001b86 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_ADC_MspInit+0xf4>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EF2_CUR_Pin|EF1_CUR_Pin;
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ba2:	230b      	movs	r3, #11
 8001ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <HAL_ADC_MspInit+0xf8>)
 8001bb2:	f001 fe0d 	bl	80037d0 <HAL_GPIO_Init>
}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	50040000 	.word	0x50040000
 8001bc4:	20000204 	.word	0x20000204
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	50040100 	.word	0x50040100

08001bd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_CAN_MspInit+0x134>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d132      	bne.n	8001c5c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bf6:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <HAL_CAN_MspInit+0x138>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_CAN_MspInit+0x138>)
 8001bfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_CAN_MspInit+0x138>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10b      	bne.n	8001c20 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c12:	6593      	str	r3, [r2, #88]	; 0x58
 8001c14:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2c:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c4a:	2309      	movs	r3, #9
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	482f      	ldr	r0, [pc, #188]	; (8001d14 <HAL_CAN_MspInit+0x140>)
 8001c56:	f001 fdbb 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c5a:	e051      	b.n	8001d00 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <HAL_CAN_MspInit+0x144>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d14c      	bne.n	8001d00 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_CAN_MspInit+0x138>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <HAL_CAN_MspInit+0x138>)
 8001c86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_CAN_MspInit+0x138>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_CAN_MspInit+0x13c>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480e      	ldr	r0, [pc, #56]	; (8001d14 <HAL_CAN_MspInit+0x140>)
 8001cdc:	f001 fd78 	bl	80037d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce0:	2340      	movs	r3, #64	; 0x40
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <HAL_CAN_MspInit+0x140>)
 8001cfc:	f001 fd68 	bl	80037d0 <HAL_GPIO_Init>
}
 8001d00:	bf00      	nop
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40006400 	.word	0x40006400
 8001d0c:	20000208 	.word	0x20000208
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400
 8001d18:	40006800 	.word	0x40006800

08001d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a47      	ldr	r2, [pc, #284]	; (8001e58 <HAL_I2C_MspInit+0x13c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d128      	bne.n	8001d90 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d56:	2303      	movs	r3, #3
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5a:	2312      	movs	r3, #18
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d66:	2304      	movs	r3, #4
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	483b      	ldr	r0, [pc, #236]	; (8001e60 <HAL_I2C_MspInit+0x144>)
 8001d72:	f001 fd2d 	bl	80037d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a38      	ldr	r2, [pc, #224]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d8e:	e05e      	b.n	8001e4e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <HAL_I2C_MspInit+0x148>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12b      	bne.n	8001df2 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001db2:	f002 f841 	bl	8003e38 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001db6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4825      	ldr	r0, [pc, #148]	; (8001e68 <HAL_I2C_MspInit+0x14c>)
 8001dd4:	f001 fcfc 	bl	80037d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de2:	6593      	str	r3, [r2, #88]	; 0x58
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]
}
 8001df0:	e02d      	b.n	8001e4e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_I2C_MspInit+0x150>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d128      	bne.n	8001e4e <HAL_I2C_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1a:	2312      	movs	r3, #18
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001e26:	2303      	movs	r3, #3
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480f      	ldr	r0, [pc, #60]	; (8001e70 <HAL_I2C_MspInit+0x154>)
 8001e32:	f001 fccd 	bl	80037d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_I2C_MspInit+0x140>)
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005800 	.word	0x40005800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48001400 	.word	0x48001400
 8001e64:	40005c00 	.word	0x40005c00
 8001e68:	48001800 	.word	0x48001800
 8001e6c:	40008400 	.word	0x40008400
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_QSPI_MspInit+0xd8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d156      	bne.n	8001f44 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6513      	str	r3, [r2, #80]	; 0x50
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001eb4:	f043 0320 	orr.w	r3, r3, #32
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_QSPI_MspInit+0xdc>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO0_Pin|QSPI_BK1_I1_Pin;
 8001ede:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4816      	ldr	r0, [pc, #88]	; (8001f54 <HAL_QSPI_MspInit+0xe0>)
 8001efc:	f001 fc68 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 8001f12:	2303      	movs	r3, #3
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <HAL_QSPI_MspInit+0xe0>)
 8001f1e:	f001 fc57 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CS3_Pin;
 8001f22:	2304      	movs	r3, #4
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f32:	230a      	movs	r3, #10
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CS3_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f001 fc46 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	a0001000 	.word	0xa0001000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48001400 	.word	0x48001400

08001f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_SPI_MspInit+0x7c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d128      	bne.n	8001fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f84:	6613      	str	r3, [r2, #96]	; 0x60
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001faa:	23e0      	movs	r3, #224	; 0xe0
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f001 fc02 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40013000 	.word	0x40013000
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	; (80020b4 <HAL_UART_MspInit+0xd8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	4a2d      	ldr	r2, [pc, #180]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 800202e:	2360      	movs	r3, #96	; 0x60
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203e:	2307      	movs	r3, #7
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	481c      	ldr	r0, [pc, #112]	; (80020bc <HAL_UART_MspInit+0xe0>)
 800204a:	f001 fbc1 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800204e:	e02d      	b.n	80020ac <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d128      	bne.n	80020ac <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_UART_MspInit+0xdc>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 800208a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209c:	2307      	movs	r3, #7
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_UART_MspInit+0xe0>)
 80020a8:	f001 fb92 	bl	80037d0 <HAL_GPIO_Init>
}
 80020ac:	bf00      	nop
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40004400 	.word	0x40004400
 80020b8:	40021000 	.word	0x40021000
 80020bc:	48000c00 	.word	0x48000c00
 80020c0:	40004800 	.word	0x40004800

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <NMI_Handler+0x4>

080020ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <MemManage_Handler+0x4>

080020d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002110:	f000 f95c 	bl	80023cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
	return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_kill>:

int _kill(int pid, int sig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002132:	f004 febd 	bl	8006eb0 <__errno>
 8002136:	4603      	mov	r3, r0
 8002138:	2216      	movs	r2, #22
 800213a:	601a      	str	r2, [r3, #0]
	return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_exit>:

void _exit (int status)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ffe7 	bl	8002128 <_kill>
	while (1) {}		/* Make sure we hang here */
 800215a:	e7fe      	b.n	800215a <_exit+0x12>

0800215c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e00a      	b.n	8002184 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800216e:	f3af 8000 	nop.w
 8002172:	4601      	mov	r1, r0
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	b2ca      	uxtb	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf0      	blt.n	800216e <_read+0x12>
	}

return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
	return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021be:	605a      	str	r2, [r3, #4]
	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_isatty>:

int _isatty(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
	return 1;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f004 fe3e 	bl	8006eb0 <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20050000 	.word	0x20050000
 8002260:	00000400 	.word	0x00000400
 8002264:	2000020c 	.word	0x2000020c
 8002268:	200005f0 	.word	0x200005f0

0800226c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <SystemInit+0x5c>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <SystemInit+0x5c>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <SystemInit+0x60>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <SystemInit+0x60>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <SystemInit+0x60>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <SystemInit+0x60>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <SystemInit+0x60>)
 8002298:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800229c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <SystemInit+0x60>)
 80022a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <SystemInit+0x60>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <SystemInit+0x60>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SystemInit+0x60>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	40021000 	.word	0x40021000

080022d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff ffca 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022da:	e003      	b.n	80022e4 <LoopCopyDataInit>

080022dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022e2:	3104      	adds	r1, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022ec:	d3f6      	bcc.n	80022dc <CopyDataInit>
	ldr	r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022f0:	e002      	b.n	80022f8 <LoopFillZerobss>

080022f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022f4:	f842 3b04 	str.w	r3, [r2], #4

080022f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <LoopForever+0x16>)
	cmp	r2, r3
 80022fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022fc:	d3f9      	bcc.n	80022f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f004 fddd 	bl	8006ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002302:	f7fe fed7 	bl	80010b4 <main>

08002306 <LoopForever>:

LoopForever:
    b LoopForever
 8002306:	e7fe      	b.n	8002306 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002308:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 800230c:	0800c048 	.word	0x0800c048
	ldr	r0, =_sdata
 8002310:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002314:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8002318:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 800231c:	200005f0 	.word	0x200005f0

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>

08002322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f001 fa1b 	bl	8003768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f80e 	bl	8002354 <HAL_InitTick>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	e001      	b.n	8002348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002344:	f7ff fba2 	bl	8001a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002348:	79fb      	ldrb	r3, [r7, #7]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_InitTick+0x6c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_InitTick+0x70>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_InitTick+0x6c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002376:	fbb3 f3f1 	udiv	r3, r3, r1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fa19 	bl	80037b6 <HAL_SYSTICK_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d809      	bhi.n	80023a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002398:	f001 f9f1 	bl	800377e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_InitTick+0x74>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e007      	b.n	80023b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e004      	b.n	80023b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e001      	b.n	80023b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	200005d4 	.word	0x200005d4

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200005d4 	.word	0x200005d4

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002424:	d005      	beq.n	8002432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_Delay+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002432:	bf00      	nop
 8002434:	f7ff ffde 	bl	80023f4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d8f7      	bhi.n	8002434 <HAL_Delay+0x28>
  {
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008

08002454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <LL_ADC_SetOffset+0x44>)
 80024de:	4013      	ands	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	03fff000 	.word	0x03fff000

08002504 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	461a      	mov	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	615a      	str	r2, [r3, #20]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3330      	adds	r3, #48	; 0x30
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	211f      	movs	r1, #31
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	401a      	ands	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 011f 	and.w	r1, r3, #31
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	431a      	orrs	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3314      	adds	r3, #20
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0e5b      	lsrs	r3, r3, #25
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	0d1b      	lsrs	r3, r3, #20
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2107      	movs	r1, #7
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	401a      	ands	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	0d1b      	lsrs	r3, r3, #20
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	43db      	mvns	r3, r3
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0318 	and.w	r3, r3, #24
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002660:	40d9      	lsrs	r1, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	400b      	ands	r3, r1
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	0007ffff 	.word	0x0007ffff

08002684 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6093      	str	r3, [r2, #8]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d101      	bne.n	80026c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800270c:	d101      	bne.n	8002712 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <LL_ADC_IsEnabled+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_ADC_IsEnabled+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d101      	bne.n	800275e <LL_ADC_REG_IsConversionOngoing+0x18>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e139      	b.n	8002a22 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff f989 	bl	8001ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff67 	bl	80026a8 <LL_ADC_IsDeepPowerDownEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff4d 	bl	8002684 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff82 	bl	80026f8 <LL_ADC_IsInternalRegulatorEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff66 	bl	80026d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002804:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_ADC_Init+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	4a89      	ldr	r2, [pc, #548]	; (8002a30 <HAL_ADC_Init+0x29c>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff64 	bl	80026f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff75 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 800285c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 80d2 	bne.w	8002a10 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 80ce 	bne.w	8002a10 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800287c:	f043 0202 	orr.w	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff49 	bl	8002720 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d115      	bne.n	80028c0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	4867      	ldr	r0, [pc, #412]	; (8002a34 <HAL_ADC_Init+0x2a0>)
 8002896:	f7ff ff43 	bl	8002720 <LL_ADC_IsEnabled>
 800289a:	4604      	mov	r4, r0
 800289c:	4866      	ldr	r0, [pc, #408]	; (8002a38 <HAL_ADC_Init+0x2a4>)
 800289e:	f7ff ff3f 	bl	8002720 <LL_ADC_IsEnabled>
 80028a2:	4603      	mov	r3, r0
 80028a4:	431c      	orrs	r4, r3
 80028a6:	4865      	ldr	r0, [pc, #404]	; (8002a3c <HAL_ADC_Init+0x2a8>)
 80028a8:	f7ff ff3a 	bl	8002720 <LL_ADC_IsEnabled>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4323      	orrs	r3, r4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	4861      	ldr	r0, [pc, #388]	; (8002a40 <HAL_ADC_Init+0x2ac>)
 80028bc:	f7ff fdca 	bl	8002454 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7e5b      	ldrb	r3, [r3, #25]
 80028c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	3b01      	subs	r3, #1
 80028f4:	045b      	lsls	r3, r3, #17
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_ADC_Init+0x2b0>)
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	430b      	orrs	r3, r1
 800292a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff08 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002936:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff15 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 8002942:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d140      	bne.n	80029cc <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13d      	bne.n	80029cc <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7e1b      	ldrb	r3, [r3, #24]
 8002958:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800295a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002962:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002972:	f023 0306 	bic.w	r3, r3, #6
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	430b      	orrs	r3, r1
 800297e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002986:	2b01      	cmp	r3, #1
 8002988:	d118      	bne.n	80029bc <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ac:	430a      	orrs	r2, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
 80029ba:	e007      	b.n	80029cc <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10c      	bne.n	80029ee <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f023 010f 	bic.w	r1, r3, #15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
 80029ec:	e007      	b.n	80029fe <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 020f 	bic.w	r2, r2, #15
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0e:	e007      	b.n	8002a20 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f043 0210 	orr.w	r2, r3, #16
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	053e2d63 	.word	0x053e2d63
 8002a34:	50040000 	.word	0x50040000
 8002a38:	50040100 	.word	0x50040100
 8002a3c:	50040200 	.word	0x50040200
 8002a40:	50040300 	.word	0x50040300
 8002a44:	fff0c007 	.word	0xfff0c007

08002a48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0b6      	sub	sp, #216	; 0xd8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x22>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e3e3      	b.n	8003232 <HAL_ADC_ConfigChannel+0x7ea>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe65 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 83c4 	bne.w	800320c <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d824      	bhi.n	8002ad6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	3b02      	subs	r3, #2
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d81b      	bhi.n	8002ace <HAL_ADC_ConfigChannel+0x86>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <HAL_ADC_ConfigChannel+0x54>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002ab5 	.word	0x08002ab5
 8002aa4:	08002abd 	.word	0x08002abd
 8002aa8:	08002ac5 	.word	0x08002ac5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	220c      	movs	r2, #12
 8002ab0:	605a      	str	r2, [r3, #4]
          break;
 8002ab2:	e011      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2212      	movs	r2, #18
 8002ab8:	605a      	str	r2, [r3, #4]
          break;
 8002aba:	e00d      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2218      	movs	r2, #24
 8002ac0:	605a      	str	r2, [r3, #4]
          break;
 8002ac2:	e009      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aca:	605a      	str	r2, [r3, #4]
          break;
 8002acc:	e004      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2206      	movs	r2, #6
 8002ad2:	605a      	str	r2, [r3, #4]
          break;
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002ad6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f7ff fd51 	bl	800258c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fe29 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002af4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fe35 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 8002b02:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 81c1 	bne.w	8002e92 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 81bc 	bne.w	8002e92 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b22:	d10f      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7ff fd58 	bl	80025e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fd12 	bl	8002566 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b42:	e00e      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff fd47 	bl	80025e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fd02 	bl	8002566 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d00a      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6919      	ldr	r1, [r3, #16]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b94:	f7ff fc92 	bl	80024bc <LL_ADC_SetOffset>
 8002b98:	e17b      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fcaf 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x17e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fca4 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	e01e      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x1bc>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fc99 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e004      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d4>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	e018      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x206>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e004      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d106      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fc68 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fc4c 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x244>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fc41 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	0e9b      	lsrs	r3, r3, #26
 8002c86:	f003 021f 	and.w	r2, r3, #31
 8002c8a:	e01e      	b.n	8002cca <HAL_ADC_ConfigChannel+0x282>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fc36 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e004      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x29a>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	e018      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x2cc>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e004      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d106      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fc05 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fbe9 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x30a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fbde 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	e01e      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x348>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2102      	movs	r1, #2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fbd3 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e004      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x360>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	e016      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x38e>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e004      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	2102      	movs	r1, #2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fba4 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2103      	movs	r1, #3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fb88 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x3cc>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2103      	movs	r1, #3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fb7d 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	e017      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x3fc>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2103      	movs	r1, #3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fb72 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x414>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	e011      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x438>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e003      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d106      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fb4f 	bl	8002530 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fc42 	bl	8002720 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 8140 	bne.w	8003124 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f7ff fbc3 	bl	800263c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4a8f      	ldr	r2, [pc, #572]	; (80030f8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f040 8131 	bne.w	8003124 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x4a2>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2b09      	cmp	r3, #9
 8002ee0:	bf94      	ite	ls
 8002ee2:	2301      	movls	r3, #1
 8002ee4:	2300      	movhi	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e019      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x4d6>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002efa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002f02:	2320      	movs	r3, #32
 8002f04:	e003      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2b09      	cmp	r3, #9
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d079      	beq.n	8003016 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x4f6>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	069b      	lsls	r3, r3, #26
 8002f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f3c:	e015      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x522>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002f56:	2320      	movs	r3, #32
 8002f58:	e003      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	069b      	lsls	r3, r3, #26
 8002f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x542>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e9b      	lsrs	r3, r3, #26
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	e017      	b.n	8002fba <HAL_ADC_ConfigChannel+0x572>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e003      	b.n	8002fae <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	ea42 0103 	orr.w	r1, r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x598>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 021f 	and.w	r2, r3, #31
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	e018      	b.n	8003012 <HAL_ADC_ConfigChannel+0x5ca>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3301      	adds	r3, #1
 8003006:	f003 021f 	and.w	r2, r3, #31
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003012:	430b      	orrs	r3, r1
 8003014:	e081      	b.n	800311a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x5ea>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	3301      	adds	r3, #1
 800302a:	069b      	lsls	r3, r3, #26
 800302c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003030:	e015      	b.n	800305e <HAL_ADC_ConfigChannel+0x616>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800304a:	2320      	movs	r3, #32
 800304c:	e003      	b.n	8003056 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	3301      	adds	r3, #1
 8003058:	069b      	lsls	r3, r3, #26
 800305a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_ADC_ConfigChannel+0x636>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0e9b      	lsrs	r3, r3, #26
 8003070:	3301      	adds	r3, #1
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	e017      	b.n	80030ae <HAL_ADC_ConfigChannel+0x666>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	61fb      	str	r3, [r7, #28]
  return result;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e003      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_ADC_ConfigChannel+0x692>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	3301      	adds	r3, #1
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	3b1e      	subs	r3, #30
 80030d2:	051b      	lsls	r3, r3, #20
 80030d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d8:	e01e      	b.n	8003118 <HAL_ADC_ConfigChannel+0x6d0>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	613b      	str	r3, [r7, #16]
  return result;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e006      	b.n	8003104 <HAL_ADC_ConfigChannel+0x6bc>
 80030f6:	bf00      	nop
 80030f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	3b1e      	subs	r3, #30
 8003112:	051b      	lsls	r3, r3, #20
 8003114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003118:	430b      	orrs	r3, r1
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	4619      	mov	r1, r3
 8003120:	f7ff fa60 	bl	80025e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <HAL_ADC_ConfigChannel+0x7f4>)
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d07a      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003130:	4843      	ldr	r0, [pc, #268]	; (8003240 <HAL_ADC_ConfigChannel+0x7f8>)
 8003132:	f7ff f9b5 	bl	80024a0 <LL_ADC_GetCommonPathInternalCh>
 8003136:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a41      	ldr	r2, [pc, #260]	; (8003244 <HAL_ADC_ConfigChannel+0x7fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d12c      	bne.n	800319e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d126      	bne.n	800319e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_ADC_ConfigChannel+0x800>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_ADC_ConfigChannel+0x71c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <HAL_ADC_ConfigChannel+0x804>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d15d      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003168:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800316c:	4619      	mov	r1, r3
 800316e:	4834      	ldr	r0, [pc, #208]	; (8003240 <HAL_ADC_ConfigChannel+0x7f8>)
 8003170:	f7ff f983 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_ADC_ConfigChannel+0x808>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	4a36      	ldr	r2, [pc, #216]	; (8003254 <HAL_ADC_ConfigChannel+0x80c>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800318e:	e002      	b.n	8003196 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3b01      	subs	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f9      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800319c:	e040      	b.n	8003220 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_ADC_ConfigChannel+0x810>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d118      	bne.n	80031da <HAL_ADC_ConfigChannel+0x792>
 80031a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d112      	bne.n	80031da <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_ADC_ConfigChannel+0x800>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x780>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a22      	ldr	r2, [pc, #136]	; (800324c <HAL_ADC_ConfigChannel+0x804>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d12d      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d0:	4619      	mov	r1, r3
 80031d2:	481b      	ldr	r0, [pc, #108]	; (8003240 <HAL_ADC_ConfigChannel+0x7f8>)
 80031d4:	f7ff f951 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d8:	e024      	b.n	8003224 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <HAL_ADC_ConfigChannel+0x814>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d120      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <HAL_ADC_ConfigChannel+0x800>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d115      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003202:	4619      	mov	r1, r3
 8003204:	480e      	ldr	r0, [pc, #56]	; (8003240 <HAL_ADC_ConfigChannel+0x7f8>)
 8003206:	f7ff f938 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
 800320a:	e00c      	b.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800321e:	e002      	b.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003224:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800322e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003232:	4618      	mov	r0, r3
 8003234:	37d8      	adds	r7, #216	; 0xd8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	80080000 	.word	0x80080000
 8003240:	50040300 	.word	0x50040300
 8003244:	c7520000 	.word	0xc7520000
 8003248:	50040000 	.word	0x50040000
 800324c:	50040200 	.word	0x50040200
 8003250:	20000000 	.word	0x20000000
 8003254:	053e2d63 	.word	0x053e2d63
 8003258:	cb840000 	.word	0xcb840000
 800325c:	80000001 	.word	0x80000001

08003260 <LL_ADC_IsEnabled>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsEnabled+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsEnabled+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b0a1      	sub	sp, #132	; 0x84
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e093      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032d2:	2300      	movs	r3, #0
 80032d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032d6:	2300      	movs	r3, #0
 80032d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a47      	ldr	r2, [pc, #284]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d102      	bne.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e001      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e072      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ffb9 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003314:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ffb3 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d154      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003328:	2b00      	cmp	r3, #0
 800332a:	d151      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800332e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02c      	beq.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800334a:	035b      	lsls	r3, r3, #13
 800334c:	430b      	orrs	r3, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003352:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003354:	4829      	ldr	r0, [pc, #164]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003356:	f7ff ff83 	bl	8003260 <LL_ADC_IsEnabled>
 800335a:	4604      	mov	r4, r0
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800335e:	f7ff ff7f 	bl	8003260 <LL_ADC_IsEnabled>
 8003362:	4603      	mov	r3, r0
 8003364:	431c      	orrs	r4, r3
 8003366:	4828      	ldr	r0, [pc, #160]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003368:	f7ff ff7a 	bl	8003260 <LL_ADC_IsEnabled>
 800336c:	4603      	mov	r3, r0
 800336e:	4323      	orrs	r3, r4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d137      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800337c:	f023 030f 	bic.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	6811      	ldr	r1, [r2, #0]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	430a      	orrs	r2, r1
 800338a:	431a      	orrs	r2, r3
 800338c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003390:	e028      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339e:	4817      	ldr	r0, [pc, #92]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033a0:	f7ff ff5e 	bl	8003260 <LL_ADC_IsEnabled>
 80033a4:	4604      	mov	r4, r0
 80033a6:	4816      	ldr	r0, [pc, #88]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033a8:	f7ff ff5a 	bl	8003260 <LL_ADC_IsEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	431c      	orrs	r4, r3
 80033b0:	4815      	ldr	r0, [pc, #84]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033b2:	f7ff ff55 	bl	8003260 <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4323      	orrs	r3, r4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d112      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033c6:	f023 030f 	bic.w	r3, r3, #15
 80033ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033cc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ce:	e009      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033e2:	e000      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80033ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3784      	adds	r7, #132	; 0x84
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	50040000 	.word	0x50040000
 8003400:	50040100 	.word	0x50040100
 8003404:	50040300 	.word	0x50040300
 8003408:	50040200 	.word	0x50040200

0800340c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e0ed      	b.n	80035fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fbd2 	bl	8001bd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0202 	bic.w	r2, r2, #2
 800343e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003440:	f7fe ffd8 	bl	80023f4 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003446:	e012      	b.n	800346e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003448:	f7fe ffd4 	bl	80023f4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b0a      	cmp	r3, #10
 8003454:	d90b      	bls.n	800346e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2205      	movs	r2, #5
 8003466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0c5      	b.n	80035fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800348c:	f7fe ffb2 	bl	80023f4 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003492:	e012      	b.n	80034ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003494:	f7fe ffae 	bl	80023f4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b0a      	cmp	r3, #10
 80034a0:	d90b      	bls.n	80034ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e09f      	b.n	80035fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0e5      	beq.n	8003494 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7e1b      	ldrb	r3, [r3, #24]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d108      	bne.n	80034e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e007      	b.n	80034f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7e5b      	ldrb	r3, [r3, #25]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d108      	bne.n	800350c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e007      	b.n	800351c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7e9b      	ldrb	r3, [r3, #26]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d108      	bne.n	8003536 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e007      	b.n	8003546 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0220 	bic.w	r2, r2, #32
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7edb      	ldrb	r3, [r3, #27]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d108      	bne.n	8003560 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0210 	bic.w	r2, r2, #16
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e007      	b.n	8003570 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0210 	orr.w	r2, r2, #16
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7f1b      	ldrb	r3, [r3, #28]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e007      	b.n	800359a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0208 	bic.w	r2, r2, #8
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7f5b      	ldrb	r3, [r3, #29]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0204 	orr.w	r2, r2, #4
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e007      	b.n	80035c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0204 	bic.w	r2, r2, #4
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	ea42 0103 	orr.w	r1, r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <__NVIC_SetPriorityGrouping>:
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800362c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_GetPriorityGrouping>:
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <__NVIC_GetPriorityGrouping+0x18>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 0307 	and.w	r3, r3, #7
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_SetPriority>:
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db0a      	blt.n	8003692 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	490c      	ldr	r1, [pc, #48]	; (80036b4 <__NVIC_SetPriority+0x4c>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003690:	e00a      	b.n	80036a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <__NVIC_SetPriority+0x50>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3b04      	subs	r3, #4
 80036a0:	0112      	lsls	r2, r2, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	440b      	add	r3, r1
 80036a6:	761a      	strb	r2, [r3, #24]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <NVIC_EncodePriority>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf28      	it	cs
 80036da:	2304      	movcs	r3, #4
 80036dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d902      	bls.n	80036ec <NVIC_EncodePriority+0x30>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	e000      	b.n	80036ee <NVIC_EncodePriority+0x32>
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	401a      	ands	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43d9      	mvns	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	4313      	orrs	r3, r2
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <SysTick_Config>:
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003734:	d301      	bcc.n	800373a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003736:	2301      	movs	r3, #1
 8003738:	e00f      	b.n	800375a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <SysTick_Config+0x40>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003742:	210f      	movs	r1, #15
 8003744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003748:	f7ff ff8e 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SysTick_Config+0x40>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <SysTick_Config+0x40>)
 8003754:	2207      	movs	r2, #7
 8003756:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010

08003768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff47 	bl	8003604 <__NVIC_SetPriorityGrouping>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003790:	f7ff ff5c 	bl	800364c <__NVIC_GetPriorityGrouping>
 8003794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	6978      	ldr	r0, [r7, #20]
 800379c:	f7ff ff8e 	bl	80036bc <NVIC_EncodePriority>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff5d 	bl	8003668 <__NVIC_SetPriority>
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ffb0 	bl	8003724 <SysTick_Config>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e166      	b.n	8003aae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8158 	beq.w	8003aa8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d00b      	beq.n	8003818 <HAL_GPIO_Init+0x48>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d007      	beq.n	8003818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800380c:	2b11      	cmp	r3, #17
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b12      	cmp	r3, #18
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0201 	and.w	r2, r3, #1
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0xea>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b12      	cmp	r3, #18
 80038b8:	d123      	bne.n	8003902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80b2 	beq.w	8003aa8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003944:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_GPIO_Init+0x2fc>)
 8003946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003948:	4a60      	ldr	r2, [pc, #384]	; (8003acc <HAL_GPIO_Init+0x2fc>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6613      	str	r3, [r2, #96]	; 0x60
 8003950:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <HAL_GPIO_Init+0x2fc>)
 8003952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800395c:	4a5c      	ldr	r2, [pc, #368]	; (8003ad0 <HAL_GPIO_Init+0x300>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003986:	d02b      	beq.n	80039e0 <HAL_GPIO_Init+0x210>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_GPIO_Init+0x304>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d025      	beq.n	80039dc <HAL_GPIO_Init+0x20c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a51      	ldr	r2, [pc, #324]	; (8003ad8 <HAL_GPIO_Init+0x308>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d01f      	beq.n	80039d8 <HAL_GPIO_Init+0x208>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a50      	ldr	r2, [pc, #320]	; (8003adc <HAL_GPIO_Init+0x30c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d019      	beq.n	80039d4 <HAL_GPIO_Init+0x204>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a4f      	ldr	r2, [pc, #316]	; (8003ae0 <HAL_GPIO_Init+0x310>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <HAL_GPIO_Init+0x200>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a4e      	ldr	r2, [pc, #312]	; (8003ae4 <HAL_GPIO_Init+0x314>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00d      	beq.n	80039cc <HAL_GPIO_Init+0x1fc>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <HAL_GPIO_Init+0x318>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <HAL_GPIO_Init+0x1f8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a4c      	ldr	r2, [pc, #304]	; (8003aec <HAL_GPIO_Init+0x31c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_GPIO_Init+0x1f4>
 80039c0:	2307      	movs	r3, #7
 80039c2:	e00e      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039c4:	2308      	movs	r3, #8
 80039c6:	e00c      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039c8:	2306      	movs	r3, #6
 80039ca:	e00a      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039cc:	2305      	movs	r3, #5
 80039ce:	e008      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039d0:	2304      	movs	r3, #4
 80039d2:	e006      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039d4:	2303      	movs	r3, #3
 80039d6:	e004      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039d8:	2302      	movs	r3, #2
 80039da:	e002      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_GPIO_Init+0x212>
 80039e0:	2300      	movs	r3, #0
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	f002 0203 	and.w	r2, r2, #3
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	4093      	lsls	r3, r2
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039f2:	4937      	ldr	r1, [pc, #220]	; (8003ad0 <HAL_GPIO_Init+0x300>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	3302      	adds	r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a24:	4a32      	ldr	r2, [pc, #200]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a4e:	4a28      	ldr	r2, [pc, #160]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <HAL_GPIO_Init+0x320>)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f ae91 	bne.w	80037e0 <HAL_GPIO_Init+0x10>
  }
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	48000400 	.word	0x48000400
 8003ad8:	48000800 	.word	0x48000800
 8003adc:	48000c00 	.word	0x48000c00
 8003ae0:	48001000 	.word	0x48001000
 8003ae4:	48001400 	.word	0x48001400
 8003ae8:	48001800 	.word	0x48001800
 8003aec:	48001c00 	.word	0x48001c00
 8003af0:	40010400 	.word	0x40010400

08003af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
 8003b00:	4613      	mov	r3, r2
 8003b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b04:	787b      	ldrb	r3, [r7, #1]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b10:	e002      	b.n	8003b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e081      	b.n	8003c3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe f8e6 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	e006      	b.n	8003bac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d104      	bne.n	8003bbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69d9      	ldr	r1, [r3, #28]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d138      	bne.n	8003cca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e032      	b.n	8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2224      	movs	r2, #36	; 0x24
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0201 	bic.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d139      	bne.n	8003d62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e033      	b.n	8003d64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40007000 	.word	0x40007000

08003d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9a:	d130      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d038      	beq.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2232      	movs	r2, #50	; 0x32
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd0:	e002      	b.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d102      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f2      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d110      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e00f      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d007      	beq.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e14:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	20000000 	.word	0x20000000
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e46:	6053      	str	r3, [r2, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40007000 	.word	0x40007000

08003e58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7fe fac8 	bl	80023f4 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e069      	b.n	8003f44 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd fff5 	bl	8001e74 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9eb 	bl	800426a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2120      	movs	r1, #32
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9e3 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d137      	bne.n	8003f3a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ed4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6852      	ldr	r2, [r2, #4]
 8003edc:	0611      	lsls	r1, r2, #24
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68d2      	ldr	r2, [r2, #12]
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	69d2      	ldr	r2, [r2, #28]
 8003ee8:	4311      	orrs	r1, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6a12      	ldr	r2, [r2, #32]
 8003eee:	4311      	orrs	r1, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_QSPI_Init+0xf4>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6912      	ldr	r2, [r2, #16]
 8003f06:	0411      	lsls	r1, r2, #16
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6952      	ldr	r2, [r2, #20]
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6992      	ldr	r2, [r2, #24]
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003f42:	7afb      	ldrb	r3, [r7, #11]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	ffe0f8fe 	.word	0xffe0f8fe

08003f50 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7fe fa4a 	bl	80023f4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_QSPI_Command+0x22>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e048      	b.n	8004004 <HAL_QSPI_Command+0xb4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d137      	bne.n	8003ff6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f971 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d125      	bne.n	8003ffa <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f99e 	bl	80042f4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d115      	bne.n	8003fec <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2102      	movs	r1, #2
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f95b 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fea:	e006      	b.n	8003ffa <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff4:	e001      	b.n	8003ffa <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800401c:	f7fe f9ea 	bl	80023f4 <HAL_GetTick>
 8004020:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3320      	adds	r3, #32
 8004028:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_QSPI_Transmit+0x2e>
 8004036:	2302      	movs	r3, #2
 8004038:	e076      	b.n	8004128 <HAL_QSPI_Transmit+0x11c>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d165      	bne.n	800411a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d056      	beq.n	8004108 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2212      	movs	r2, #18
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800408e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004090:	e01b      	b.n	80040ca <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2201      	movs	r2, #1
 800409a:	2104      	movs	r1, #4
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f8f2 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1df      	bne.n	8004092 <HAL_QSPI_Transmit+0x86>
 80040d2:	e000      	b.n	80040d6 <HAL_QSPI_Transmit+0xca>
          break;
 80040d4:	bf00      	nop
      }

      if (status == HAL_OK)
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d110      	bne.n	80040fe <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2201      	movs	r2, #1
 80040e4:	2102      	movs	r1, #2
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f8cd 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2202      	movs	r2, #2
 80040fc:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004106:	e00a      	b.n	800411e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	f043 0208 	orr.w	r2, r3, #8
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e001      	b.n	800411e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800411a:	2302      	movs	r3, #2
 800411c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004126:	7ffb      	ldrb	r3, [r7, #31]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004140:	f7fe f958 	bl	80023f4 <HAL_GetTick>
 8004144:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3320      	adds	r3, #32
 8004154:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_QSPI_Receive+0x36>
 8004162:	2302      	movs	r3, #2
 8004164:	e07d      	b.n	8004262 <HAL_QSPI_Receive+0x132>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d16c      	bne.n	8004254 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d05d      	beq.n	8004242 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2222      	movs	r2, #34	; 0x22
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041be:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80041c8:	e01c      	b.n	8004204 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2201      	movs	r2, #1
 80041d2:	2106      	movs	r1, #6
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f856 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80041de:	7ffb      	ldrb	r3, [r7, #31]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d114      	bne.n	800420e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	7812      	ldrb	r2, [r2, #0]
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1de      	bne.n	80041ca <HAL_QSPI_Receive+0x9a>
 800420c:	e000      	b.n	8004210 <HAL_QSPI_Receive+0xe0>
          break;
 800420e:	bf00      	nop
      }

      if (status == HAL_OK)
 8004210:	7ffb      	ldrb	r3, [r7, #31]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d110      	bne.n	8004238 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2201      	movs	r2, #1
 800421e:	2102      	movs	r1, #2
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f830 	bl	8004286 <QSPI_WaitFlagStateUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2202      	movs	r2, #2
 8004236:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004240:	e00a      	b.n	8004258 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f043 0208 	orr.w	r2, r3, #8
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e001      	b.n	8004258 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004260:	7ffb      	ldrb	r3, [r7, #31]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	649a      	str	r2, [r3, #72]	; 0x48
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004296:	e01a      	b.n	80042ce <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429e:	d016      	beq.n	80042ce <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fe f8a8 	bl	80023f4 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2204      	movs	r2, #4
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00e      	b.n	80042ec <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d1d6      	bne.n	8004298 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <QSPI_Config+0x28>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800430e:	d005      	beq.n	800431c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3a01      	subs	r2, #1
 800431a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80b9 	beq.w	8004498 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d05f      	beq.n	80043ee <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	6892      	ldr	r2, [r2, #8]
 8004336:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d031      	beq.n	80043a4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	431a      	orrs	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	431a      	orrs	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	431a      	orrs	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	049b      	lsls	r3, r3, #18
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	431a      	orrs	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	431a      	orrs	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	431a      	orrs	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	431a      	orrs	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	ea42 0103 	orr.w	r1, r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	430a      	orrs	r2, r1
 800438c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004394:	f000 812e 	beq.w	80045f4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	6852      	ldr	r2, [r2, #4]
 80043a0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80043a2:	e127      	b.n	80045f4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	049b      	lsls	r3, r3, #18
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	431a      	orrs	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	ea42 0103 	orr.w	r1, r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	615a      	str	r2, [r3, #20]
}
 80043ec:	e102      	b.n	80045f4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02e      	beq.n	8004454 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	431a      	orrs	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	431a      	orrs	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	431a      	orrs	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	049b      	lsls	r3, r3, #18
 8004412:	431a      	orrs	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	431a      	orrs	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	431a      	orrs	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	431a      	orrs	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	431a      	orrs	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	ea42 0103 	orr.w	r1, r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	430a      	orrs	r2, r1
 800443c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004444:	f000 80d6 	beq.w	80045f4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	6852      	ldr	r2, [r2, #4]
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	e0cf      	b.n	80045f4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	431a      	orrs	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	431a      	orrs	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	431a      	orrs	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	049b      	lsls	r3, r3, #18
 8004470:	431a      	orrs	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	431a      	orrs	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	431a      	orrs	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	ea42 0103 	orr.w	r1, r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	430a      	orrs	r2, r1
 8004494:	615a      	str	r2, [r3, #20]
}
 8004496:	e0ad      	b.n	80045f4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d058      	beq.n	8004552 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02d      	beq.n	800450e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	049b      	lsls	r3, r3, #18
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	431a      	orrs	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	ea42 0103 	orr.w	r1, r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004500:	d078      	beq.n	80045f4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	6852      	ldr	r2, [r2, #4]
 800450a:	619a      	str	r2, [r3, #24]
}
 800450c:	e072      	b.n	80045f4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	431a      	orrs	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	431a      	orrs	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	049b      	lsls	r3, r3, #18
 800452a:	431a      	orrs	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	431a      	orrs	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	431a      	orrs	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	ea42 0103 	orr.w	r1, r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	430a      	orrs	r2, r1
 800454e:	615a      	str	r2, [r3, #20]
}
 8004550:	e050      	b.n	80045f4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d02a      	beq.n	80045b0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	431a      	orrs	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	431a      	orrs	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	431a      	orrs	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	049b      	lsls	r3, r3, #18
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	431a      	orrs	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	431a      	orrs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	431a      	orrs	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	ea42 0103 	orr.w	r1, r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	430a      	orrs	r2, r1
 800459a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045a2:	d027      	beq.n	80045f4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	6852      	ldr	r2, [r2, #4]
 80045ac:	619a      	str	r2, [r3, #24]
}
 80045ae:	e021      	b.n	80045f4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01d      	beq.n	80045f4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	431a      	orrs	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	049b      	lsls	r3, r3, #18
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	431a      	orrs	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	ea42 0103 	orr.w	r1, r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	615a      	str	r2, [r3, #20]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f000 bc16 	b.w	8004e40 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004614:	4ba0      	ldr	r3, [pc, #640]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800461e:	4b9e      	ldr	r3, [pc, #632]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80e4 	beq.w	80047fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_RCC_OscConfig+0x4c>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	f040 808b 	bne.w	800475a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b01      	cmp	r3, #1
 8004648:	f040 8087 	bne.w	800475a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800464c:	4b92      	ldr	r3, [pc, #584]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_OscConfig+0x64>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e3ed      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	4b8b      	ldr	r3, [pc, #556]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <HAL_RCC_OscConfig+0x7e>
 8004674:	4b88      	ldr	r3, [pc, #544]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467c:	e005      	b.n	800468a <HAL_RCC_OscConfig+0x8a>
 800467e:	4b86      	ldr	r3, [pc, #536]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468a:	4293      	cmp	r3, r2
 800468c:	d223      	bcs.n	80046d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fd80 	bl	8005198 <RCC_SetFlashLatencyFromMSIRange>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e3ce      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a2:	4b7d      	ldr	r3, [pc, #500]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b7a      	ldr	r3, [pc, #488]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4977      	ldr	r1, [pc, #476]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c0:	4b75      	ldr	r3, [pc, #468]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	4972      	ldr	r1, [pc, #456]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
 80046d4:	e025      	b.n	8004722 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d6:	4b70      	ldr	r3, [pc, #448]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6f      	ldr	r2, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	496a      	ldr	r1, [pc, #424]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f4:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	4965      	ldr	r1, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fd40 	bl	8005198 <RCC_SetFlashLatencyFromMSIRange>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e38e      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004722:	f000 fc75 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004726:	4602      	mov	r2, r0
 8004728:	4b5b      	ldr	r3, [pc, #364]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	495a      	ldr	r1, [pc, #360]	; (800489c <HAL_RCC_OscConfig+0x29c>)
 8004734:	5ccb      	ldrb	r3, [r1, r3]
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	fa22 f303 	lsr.w	r3, r2, r3
 800473e:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_RCC_OscConfig+0x2a0>)
 8004740:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004742:	4b58      	ldr	r3, [pc, #352]	; (80048a4 <HAL_RCC_OscConfig+0x2a4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd fe04 	bl	8002354 <HAL_InitTick>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d052      	beq.n	80047fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	e372      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d032      	beq.n	80047c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004762:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4c      	ldr	r2, [pc, #304]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800476e:	f7fd fe41 	bl	80023f4 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004776:	f7fd fe3d 	bl	80023f4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e35b      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004788:	4b43      	ldr	r3, [pc, #268]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004794:	4b40      	ldr	r3, [pc, #256]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a3f      	ldr	r2, [pc, #252]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800479a:	f043 0308 	orr.w	r3, r3, #8
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	493a      	ldr	r1, [pc, #232]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	4935      	ldr	r1, [pc, #212]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
 80047c6:	e01a      	b.n	80047fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047c8:	4b33      	ldr	r3, [pc, #204]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a32      	ldr	r2, [pc, #200]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047d4:	f7fd fe0e 	bl	80023f4 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047dc:	f7fd fe0a 	bl	80023f4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e328      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1dc>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d073      	beq.n	80048f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x21c>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d10e      	bne.n	8004834 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d063      	beq.n	80048f0 <HAL_RCC_OscConfig+0x2f0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d15f      	bne.n	80048f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e305      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x24c>
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0x288>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x270>
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x288>
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a08      	ldr	r2, [pc, #32]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a05      	ldr	r2, [pc, #20]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fdb0 	bl	80023f4 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004896:	e010      	b.n	80048ba <HAL_RCC_OscConfig+0x2ba>
 8004898:	40021000 	.word	0x40021000
 800489c:	0800ba88 	.word	0x0800ba88
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fd fda4 	bl	80023f4 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e2c2      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ba:	4baf      	ldr	r3, [pc, #700]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2a8>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fd fd94 	bl	80023f4 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fd fd90 	bl	80023f4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e2ae      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e2:	4ba5      	ldr	r3, [pc, #660]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2d0>
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d060      	beq.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x310>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d119      	bne.n	800493e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d116      	bne.n	800493e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004910:	4b99      	ldr	r3, [pc, #612]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x328>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e28b      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b93      	ldr	r3, [pc, #588]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	4990      	ldr	r1, [pc, #576]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800493c:	e040      	b.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d023      	beq.n	800498e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004946:	4b8c      	ldr	r3, [pc, #560]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a8b      	ldr	r2, [pc, #556]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004952:	f7fd fd4f 	bl	80023f4 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495a:	f7fd fd4b 	bl	80023f4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e269      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496c:	4b82      	ldr	r3, [pc, #520]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004978:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	497c      	ldr	r1, [pc, #496]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a79      	ldr	r2, [pc, #484]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd fd2b 	bl	80023f4 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fd fd27 	bl	80023f4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e245      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b4:	4b70      	ldr	r3, [pc, #448]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d03c      	beq.n	8004a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01c      	beq.n	8004a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d4:	4b68      	ldr	r3, [pc, #416]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	4a67      	ldr	r2, [pc, #412]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fd fd06 	bl	80023f4 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ec:	f7fd fd02 	bl	80023f4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e220      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049fe:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ef      	beq.n	80049ec <HAL_RCC_OscConfig+0x3ec>
 8004a0c:	e01b      	b.n	8004a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0e:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fce9 	bl	80023f4 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a26:	f7fd fce5 	bl	80023f4 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e203      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a38:	4b4f      	ldr	r3, [pc, #316]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ef      	bne.n	8004a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80a6 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a58:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a64:	4b44      	ldr	r3, [pc, #272]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a70:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a80:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d118      	bne.n	8004abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3a      	ldr	r2, [pc, #232]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a98:	f7fd fcac 	bl	80023f4 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa0:	f7fd fca8 	bl	80023f4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e1c6      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab2:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d108      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4d8>
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad6:	e024      	b.n	8004b22 <HAL_RCC_OscConfig+0x522>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d110      	bne.n	8004b02 <HAL_RCC_OscConfig+0x502>
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af0:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	4a20      	ldr	r2, [pc, #128]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b00:	e00f      	b.n	8004b22 <HAL_RCC_OscConfig+0x522>
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b1a:	f023 0304 	bic.w	r3, r3, #4
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2a:	f7fd fc63 	bl	80023f4 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fd fc5f 	bl	80023f4 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e17b      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ed      	beq.n	8004b32 <HAL_RCC_OscConfig+0x532>
 8004b56:	e01a      	b.n	8004b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd fc4c 	bl	80023f4 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5e:	e00f      	b.n	8004b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd fc48 	bl	80023f4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d906      	bls.n	8004b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e164      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b80:	4ba8      	ldr	r3, [pc, #672]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e8      	bne.n	8004b60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b94:	4ba3      	ldr	r3, [pc, #652]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	4aa2      	ldr	r2, [pc, #648]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d03c      	beq.n	8004c26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01c      	beq.n	8004bee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bb4:	4b9b      	ldr	r3, [pc, #620]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bba:	4a9a      	ldr	r2, [pc, #616]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fd fc16 	bl	80023f4 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bcc:	f7fd fc12 	bl	80023f4 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e130      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bde:	4b91      	ldr	r3, [pc, #580]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ef      	beq.n	8004bcc <HAL_RCC_OscConfig+0x5cc>
 8004bec:	e01b      	b.n	8004c26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bee:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf4:	4a8b      	ldr	r2, [pc, #556]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fbf9 	bl	80023f4 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c06:	f7fd fbf5 	bl	80023f4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e113      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c18:	4b82      	ldr	r3, [pc, #520]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ef      	bne.n	8004c06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8107 	beq.w	8004e3e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	f040 80cb 	bne.w	8004dd0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 0203 	and.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d12c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d123      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d113      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d109      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d06d      	beq.n	8004d84 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d068      	beq.n	8004d80 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004cae:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d105      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cba:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0ba      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cca:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a55      	ldr	r2, [pc, #340]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cd6:	f7fd fb8d 	bl	80023f4 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cde:	f7fd fb89 	bl	80023f4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0a7      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf0:	4b4c      	ldr	r3, [pc, #304]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cfc:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	4b49      	ldr	r3, [pc, #292]	; (8004e28 <HAL_RCC_OscConfig+0x828>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d16:	0212      	lsls	r2, r2, #8
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d1e:	0852      	lsrs	r2, r2, #1
 8004d20:	3a01      	subs	r2, #1
 8004d22:	0552      	lsls	r2, r2, #21
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d2a:	0852      	lsrs	r2, r2, #1
 8004d2c:	3a01      	subs	r2, #1
 8004d2e:	0652      	lsls	r2, r2, #25
 8004d30:	4311      	orrs	r1, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d36:	06d2      	lsls	r2, r2, #27
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	493a      	ldr	r1, [pc, #232]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d40:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d4c:	4b35      	ldr	r3, [pc, #212]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a34      	ldr	r2, [pc, #208]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d58:	f7fd fb4c 	bl	80023f4 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fb48 	bl	80023f4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e066      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d72:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d7e:	e05e      	b.n	8004e3e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e05d      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d84:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d156      	bne.n	8004e3e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004da6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004da8:	f7fd fb24 	bl	80023f4 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fd fb20 	bl	80023f4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e03e      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x7b0>
 8004dce:	e036      	b.n	8004e3e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b0c      	cmp	r3, #12
 8004dd4:	d031      	beq.n	8004e3a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a12      	ldr	r2, [pc, #72]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_OscConfig+0x824>)
 8004e00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fd faf3 	bl	80023f4 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e10:	e00c      	b.n	8004e2c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fd faef 	bl	80023f4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d905      	bls.n	8004e2c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e00d      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
 8004e24:	40021000 	.word	0x40021000
 8004e28:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_RCC_OscConfig+0x848>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ec      	bne.n	8004e12 <HAL_RCC_OscConfig+0x812>
 8004e38:	e001      	b.n	8004e3e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0c8      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e60:	4b66      	ldr	r3, [pc, #408]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d910      	bls.n	8004e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b63      	ldr	r3, [pc, #396]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0207 	bic.w	r2, r3, #7
 8004e76:	4961      	ldr	r1, [pc, #388]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	4b5f      	ldr	r3, [pc, #380]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0b0      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d04c      	beq.n	8004f36 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea4:	4b56      	ldr	r3, [pc, #344]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d121      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e09e      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d115      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e092      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ed4:	4b4a      	ldr	r3, [pc, #296]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e086      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee4:	4b46      	ldr	r3, [pc, #280]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e07e      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f023 0203 	bic.w	r2, r3, #3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	493f      	ldr	r1, [pc, #252]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f06:	f7fd fa75 	bl	80023f4 <HAL_GetTick>
 8004f0a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0c:	e00a      	b.n	8004f24 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0e:	f7fd fa71 	bl	80023f4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e066      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f24:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 020c 	and.w	r2, r3, #12
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d1eb      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f42:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	492c      	ldr	r1, [pc, #176]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f54:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d210      	bcs.n	8004f84 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 0207 	bic.w	r2, r3, #7
 8004f6a:	4924      	ldr	r1, [pc, #144]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_RCC_ClockConfig+0x1b0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e036      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4918      	ldr	r1, [pc, #96]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fae:	4b14      	ldr	r3, [pc, #80]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4910      	ldr	r1, [pc, #64]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fc2:	f000 f825 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_RCC_ClockConfig+0x1b4>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	490c      	ldr	r1, [pc, #48]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	5ccb      	ldrb	r3, [r1, r3]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd f9b4 	bl	8002354 <HAL_InitTick>
 8004fec:	4603      	mov	r3, r0
 8004fee:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40022000 	.word	0x40022000
 8005000:	40021000 	.word	0x40021000
 8005004:	0800ba88 	.word	0x0800ba88
 8005008:	20000000 	.word	0x20000000
 800500c:	20000004 	.word	0x20000004

08005010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501e:	4b3e      	ldr	r3, [pc, #248]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005028:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x34>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d121      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d11e      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005044:	4b34      	ldr	r3, [pc, #208]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005050:	4b31      	ldr	r3, [pc, #196]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e005      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800506c:	4a2b      	ldr	r2, [pc, #172]	; (800511c <HAL_RCC_GetSysClockFreq+0x10c>)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10d      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d102      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <HAL_RCC_GetSysClockFreq+0x110>)
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e004      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d101      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005094:	4b23      	ldr	r3, [pc, #140]	; (8005124 <HAL_RCC_GetSysClockFreq+0x114>)
 8005096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d134      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d003      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d003      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0xac>
 80050b4:	e005      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_RCC_GetSysClockFreq+0x110>)
 80050b8:	617b      	str	r3, [r7, #20]
      break;
 80050ba:	e005      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_RCC_GetSysClockFreq+0x114>)
 80050be:	617b      	str	r3, [r7, #20]
      break;
 80050c0:	e002      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	617b      	str	r3, [r7, #20]
      break;
 80050c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	3301      	adds	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	fb02 f203 	mul.w	r2, r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	0e5b      	lsrs	r3, r3, #25
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	3301      	adds	r3, #1
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005108:	69bb      	ldr	r3, [r7, #24]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3724      	adds	r7, #36	; 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	0800baa0 	.word	0x0800baa0
 8005120:	00f42400 	.word	0x00f42400
 8005124:	018cba80 	.word	0x018cba80

08005128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_GetHCLKFreq+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000000 	.word	0x20000000

08005140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005144:	f7ff fff0 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	0800ba98 	.word	0x0800ba98

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005170:	f7ff ffda 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0adb      	lsrs	r3, r3, #11
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	0800ba98 	.word	0x0800ba98

08005198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051b0:	f7fe fdde 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 80051b4:	6178      	str	r0, [r7, #20]
 80051b6:	e014      	b.n	80051e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4a24      	ldr	r2, [pc, #144]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	; 0x58
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051d0:	f7fe fdce 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 80051d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e8:	d10b      	bne.n	8005202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b80      	cmp	r3, #128	; 0x80
 80051ee:	d919      	bls.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2ba0      	cmp	r3, #160	; 0xa0
 80051f4:	d902      	bls.n	80051fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051f6:	2302      	movs	r3, #2
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e013      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051fc:	2301      	movs	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e010      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b80      	cmp	r3, #128	; 0x80
 8005206:	d902      	bls.n	800520e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005208:	2303      	movs	r3, #3
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	e00a      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b80      	cmp	r3, #128	; 0x80
 8005212:	d102      	bne.n	800521a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005214:	2302      	movs	r3, #2
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	e004      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b70      	cmp	r3, #112	; 0x70
 800521e:	d101      	bne.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005220:	2301      	movs	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 0207 	bic.w	r2, r3, #7
 800522c:	4909      	ldr	r1, [pc, #36]	; (8005254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	40022000 	.word	0x40022000

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005260:	2300      	movs	r3, #0
 8005262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005264:	2300      	movs	r3, #0
 8005266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005270:	2b00      	cmp	r3, #0
 8005272:	d041      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005278:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800527c:	d02a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800527e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005282:	d824      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005288:	d008      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800528a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528e:	d81e      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005298:	d010      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800529a:	e018      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800529c:	4b86      	ldr	r3, [pc, #536]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4a85      	ldr	r2, [pc, #532]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052a8:	e015      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3304      	adds	r3, #4
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fb0f 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052ba:	e00c      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3320      	adds	r3, #32
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fbf8 	bl	8005ab8 <RCCEx_PLLSAI2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052cc:	e003      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	74fb      	strb	r3, [r7, #19]
      break;
 80052d2:	e000      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052dc:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ea:	4973      	ldr	r1, [pc, #460]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052f2:	e001      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d041      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005308:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800530c:	d02a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800530e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005312:	d824      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005318:	d008      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800531a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800531e:	d81e      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005328:	d010      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800532a:	e018      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800532c:	4b62      	ldr	r3, [pc, #392]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a61      	ldr	r2, [pc, #388]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005338:	e015      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fac7 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800534a:	e00c      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3320      	adds	r3, #32
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fbb0 	bl	8005ab8 <RCCEx_PLLSAI2_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	74fb      	strb	r3, [r7, #19]
      break;
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800536c:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537a:	494f      	ldr	r1, [pc, #316]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005382:	e001      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a0 	beq.w	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005396:	2300      	movs	r3, #0
 8005398:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800539a:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b0:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6593      	str	r3, [r2, #88]	; 0x58
 80053bc:	4b3e      	ldr	r3, [pc, #248]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c8:	2301      	movs	r3, #1
 80053ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053cc:	4b3b      	ldr	r3, [pc, #236]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3a      	ldr	r2, [pc, #232]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d8:	f7fd f80c 	bl	80023f4 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053de:	e009      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fd f808 	bl	80023f4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	74fb      	strb	r3, [r7, #19]
        break;
 80053f2:	e005      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ef      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d15c      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005410:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	d019      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005430:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fc ffc7 	bl	80023f4 <HAL_GetTick>
 8005466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005468:	e00b      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fc ffc3 	bl	80023f4 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d902      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	74fb      	strb	r3, [r7, #19]
            break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ec      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054ae:	e009      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	74bb      	strb	r3, [r7, #18]
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	7cfb      	ldrb	r3, [r7, #19]
 80054c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c4:	7c7b      	ldrb	r3, [r7, #17]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4ba6      	ldr	r3, [pc, #664]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	4aa5      	ldr	r2, [pc, #660]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054e2:	4ba0      	ldr	r3, [pc, #640]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	f023 0203 	bic.w	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	499c      	ldr	r1, [pc, #624]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005504:	4b97      	ldr	r3, [pc, #604]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f023 020c 	bic.w	r2, r3, #12
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	4994      	ldr	r1, [pc, #592]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005526:	4b8f      	ldr	r3, [pc, #572]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	498b      	ldr	r1, [pc, #556]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005548:	4b86      	ldr	r3, [pc, #536]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	4983      	ldr	r1, [pc, #524]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800556a:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	497a      	ldr	r1, [pc, #488]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800558c:	4b75      	ldr	r3, [pc, #468]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	4972      	ldr	r1, [pc, #456]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ae:	4b6d      	ldr	r3, [pc, #436]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055bc:	4969      	ldr	r1, [pc, #420]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055d0:	4b64      	ldr	r3, [pc, #400]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055de:	4961      	ldr	r1, [pc, #388]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f2:	4b5c      	ldr	r3, [pc, #368]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	4958      	ldr	r1, [pc, #352]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005614:	4b53      	ldr	r3, [pc, #332]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	4950      	ldr	r1, [pc, #320]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005636:	4b4b      	ldr	r3, [pc, #300]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	4947      	ldr	r1, [pc, #284]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005658:	4b42      	ldr	r3, [pc, #264]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800565a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	493f      	ldr	r1, [pc, #252]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d028      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567a:	4b3a      	ldr	r3, [pc, #232]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4936      	ldr	r1, [pc, #216]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005698:	d106      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569a:	4b32      	ldr	r3, [pc, #200]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	4a31      	ldr	r2, [pc, #196]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a4:	60d3      	str	r3, [r2, #12]
 80056a6:	e011      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056b0:	d10c      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	2101      	movs	r1, #1
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f90b 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d028      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056d8:	4b22      	ldr	r3, [pc, #136]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	491f      	ldr	r1, [pc, #124]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f6:	d106      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f8:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005702:	60d3      	str	r3, [r2, #12]
 8005704:	e011      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800570e:	d10c      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2101      	movs	r1, #1
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f8dc 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005744:	4907      	ldr	r1, [pc, #28]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005754:	d108      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005756:	4b03      	ldr	r3, [pc, #12]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a02      	ldr	r2, [pc, #8]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800575c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005760:	60d3      	str	r3, [r2, #12]
 8005762:	e013      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005764:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005770:	d10c      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
 8005776:	2101      	movs	r1, #1
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f8ab 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 800577e:	4603      	mov	r3, r0
 8005780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02f      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005798:	4b2c      	ldr	r3, [pc, #176]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a6:	4929      	ldr	r1, [pc, #164]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b6:	d10d      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	2102      	movs	r1, #2
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f888 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d014      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80057ce:	7cfb      	ldrb	r3, [r7, #19]
 80057d0:	74bb      	strb	r3, [r7, #18]
 80057d2:	e011      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3320      	adds	r3, #32
 80057e2:	2102      	movs	r1, #2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f967 	bl	8005ab8 <RCCEx_PLLSAI2_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ee:	7cfb      	ldrb	r3, [r7, #19]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005814:	490d      	ldr	r1, [pc, #52]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005838:	4904      	ldr	r1, [pc, #16]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005840:	7cbb      	ldrb	r3, [r7, #18]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000

08005850 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005858:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <HAL_RCCEx_CRSConfig+0x7c>)
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_RCCEx_CRSConfig+0x7c>)
 800585e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005862:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCCEx_CRSConfig+0x7c>)
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	4a18      	ldr	r2, [pc, #96]	; (80058cc <HAL_RCCEx_CRSConfig+0x7c>)
 800586a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586e:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005898:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <HAL_RCCEx_CRSConfig+0x80>)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <HAL_RCCEx_CRSConfig+0x80>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	4908      	ldr	r1, [pc, #32]	; (80058d0 <HAL_RCCEx_CRSConfig+0x80>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <HAL_RCCEx_CRSConfig+0x80>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a06      	ldr	r2, [pc, #24]	; (80058d0 <HAL_RCCEx_CRSConfig+0x80>)
 80058b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058bc:	6013      	str	r3, [r2, #0]
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000
 80058d0:	40006000 	.word	0x40006000

080058d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058e2:	4b74      	ldr	r3, [pc, #464]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058ee:	4b71      	ldr	r3, [pc, #452]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0203 	and.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d10d      	bne.n	800591a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
       ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005906:	4b6b      	ldr	r3, [pc, #428]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
       ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d047      	beq.n	80059aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
 800591e:	e044      	b.n	80059aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d018      	beq.n	800595a <RCCEx_PLLSAI1_Config+0x86>
 8005928:	2b03      	cmp	r3, #3
 800592a:	d825      	bhi.n	8005978 <RCCEx_PLLSAI1_Config+0xa4>
 800592c:	2b01      	cmp	r3, #1
 800592e:	d002      	beq.n	8005936 <RCCEx_PLLSAI1_Config+0x62>
 8005930:	2b02      	cmp	r3, #2
 8005932:	d009      	beq.n	8005948 <RCCEx_PLLSAI1_Config+0x74>
 8005934:	e020      	b.n	8005978 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005936:	4b5f      	ldr	r3, [pc, #380]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d11d      	bne.n	800597e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005946:	e01a      	b.n	800597e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005948:	4b5a      	ldr	r3, [pc, #360]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d116      	bne.n	8005982 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005958:	e013      	b.n	8005982 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800595a:	4b56      	ldr	r3, [pc, #344]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005966:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005976:	e006      	b.n	8005986 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e004      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005986:	bf00      	nop
    }

    if(status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800598e:	4b49      	ldr	r3, [pc, #292]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	3b01      	subs	r3, #1
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	430b      	orrs	r3, r1
 80059a4:	4943      	ldr	r1, [pc, #268]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d17c      	bne.n	8005aaa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059b0:	4b40      	ldr	r3, [pc, #256]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3f      	ldr	r2, [pc, #252]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059bc:	f7fc fd1a 	bl	80023f4 <HAL_GetTick>
 80059c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059c2:	e009      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059c4:	f7fc fd16 	bl	80023f4 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d902      	bls.n	80059d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	73fb      	strb	r3, [r7, #15]
        break;
 80059d6:	e005      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d8:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ef      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d15f      	bne.n	8005aaa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d110      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059f0:	4b30      	ldr	r3, [pc, #192]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6892      	ldr	r2, [r2, #8]
 8005a00:	0211      	lsls	r1, r2, #8
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	06d2      	lsls	r2, r2, #27
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	492a      	ldr	r1, [pc, #168]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]
 8005a10:	e027      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d112      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a18:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6892      	ldr	r2, [r2, #8]
 8005a28:	0211      	lsls	r1, r2, #8
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6912      	ldr	r2, [r2, #16]
 8005a2e:	0852      	lsrs	r2, r2, #1
 8005a30:	3a01      	subs	r2, #1
 8005a32:	0552      	lsls	r2, r2, #21
 8005a34:	430a      	orrs	r2, r1
 8005a36:	491f      	ldr	r1, [pc, #124]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]
 8005a3c:	e011      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6892      	ldr	r2, [r2, #8]
 8005a4e:	0211      	lsls	r1, r2, #8
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6952      	ldr	r2, [r2, #20]
 8005a54:	0852      	lsrs	r2, r2, #1
 8005a56:	3a01      	subs	r2, #1
 8005a58:	0652      	lsls	r2, r2, #25
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	4915      	ldr	r1, [pc, #84]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a62:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6e:	f7fc fcc1 	bl	80023f4 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a74:	e009      	b.n	8005a8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a76:	f7fc fcbd 	bl	80023f4 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d902      	bls.n	8005a8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	73fb      	strb	r3, [r7, #15]
          break;
 8005a88:	e005      	b.n	8005a96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ef      	beq.n	8005a76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40021000 	.word	0x40021000

08005ab8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ac6:	4b69      	ldr	r3, [pc, #420]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ad2:	4b66      	ldr	r3, [pc, #408]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0203 	and.w	r2, r3, #3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d10d      	bne.n	8005afe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aea:	4b60      	ldr	r3, [pc, #384]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
       ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d047      	beq.n	8005b8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
 8005b02:	e044      	b.n	8005b8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d018      	beq.n	8005b3e <RCCEx_PLLSAI2_Config+0x86>
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d825      	bhi.n	8005b5c <RCCEx_PLLSAI2_Config+0xa4>
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d002      	beq.n	8005b1a <RCCEx_PLLSAI2_Config+0x62>
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d009      	beq.n	8005b2c <RCCEx_PLLSAI2_Config+0x74>
 8005b18:	e020      	b.n	8005b5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b1a:	4b54      	ldr	r3, [pc, #336]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11d      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2a:	e01a      	b.n	8005b62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b2c:	4b4f      	ldr	r3, [pc, #316]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d116      	bne.n	8005b66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3c:	e013      	b.n	8005b66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b3e:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b4a:	4b48      	ldr	r3, [pc, #288]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b5a:	e006      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e004      	b.n	8005b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b62:	bf00      	nop
 8005b64:	e002      	b.n	8005b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10d      	bne.n	8005b8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b72:	4b3e      	ldr	r3, [pc, #248]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	430b      	orrs	r3, r1
 8005b88:	4938      	ldr	r1, [pc, #224]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d166      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b94:	4b35      	ldr	r3, [pc, #212]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba0:	f7fc fc28 	bl	80023f4 <HAL_GetTick>
 8005ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ba6:	e009      	b.n	8005bbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba8:	f7fc fc24 	bl	80023f4 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d902      	bls.n	8005bbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bba:	e005      	b.n	8005bc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1ef      	bne.n	8005ba8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d149      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d110      	bne.n	8005bf6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bd4:	4b25      	ldr	r3, [pc, #148]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	0211      	lsls	r1, r2, #8
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68d2      	ldr	r2, [r2, #12]
 8005bea:	06d2      	lsls	r2, r2, #27
 8005bec:	430a      	orrs	r2, r1
 8005bee:	491f      	ldr	r1, [pc, #124]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	614b      	str	r3, [r1, #20]
 8005bf4:	e011      	b.n	8005c1a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6892      	ldr	r2, [r2, #8]
 8005c06:	0211      	lsls	r1, r2, #8
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6912      	ldr	r2, [r2, #16]
 8005c0c:	0852      	lsrs	r2, r2, #1
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	0652      	lsls	r2, r2, #25
 8005c12:	430a      	orrs	r2, r1
 8005c14:	4915      	ldr	r1, [pc, #84]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fc fbe5 	bl	80023f4 <HAL_GetTick>
 8005c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2c:	e009      	b.n	8005c42 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c2e:	f7fc fbe1 	bl	80023f4 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d902      	bls.n	8005c42 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c40:	e005      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0ef      	beq.n	8005c2e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4903      	ldr	r1, [pc, #12]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40021000 	.word	0x40021000

08005c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e095      	b.n	8005dae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d108      	bne.n	8005c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c92:	d009      	beq.n	8005ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	61da      	str	r2, [r3, #28]
 8005c9a:	e005      	b.n	8005ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc f948 	bl	8001f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce8:	d902      	bls.n	8005cf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e002      	b.n	8005cf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cfe:	d007      	beq.n	8005d10 <HAL_SPI_Init+0xa0>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d08:	d002      	beq.n	8005d10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	ea42 0103 	orr.w	r1, r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	0c1b      	lsrs	r3, r3, #16
 8005d6c:	f003 0204 	and.w	r2, r3, #4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d8c:	ea42 0103 	orr.w	r1, r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e040      	b.n	8005e4a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fc f8ff 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2224      	movs	r2, #36	; 0x24
 8005de2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8c1 	bl	8005f7c <UART_SetConfig>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e022      	b.n	8005e4a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb3f 	bl	8006490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fbc6 	bl	80065d4 <UART_CheckIdleState>
 8005e48:	4603      	mov	r3, r0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b08a      	sub	sp, #40	; 0x28
 8005e56:	af02      	add	r7, sp, #8
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	f040 8082 	bne.w	8005f70 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_UART_Transmit+0x26>
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e07a      	b.n	8005f72 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Transmit+0x38>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e073      	b.n	8005f72 <HAL_UART_Transmit+0x120>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2221      	movs	r2, #33	; 0x21
 8005e9e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ea0:	f7fc faa8 	bl	80023f4 <HAL_GetTick>
 8005ea4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d108      	bne.n	8005ed2 <HAL_UART_Transmit+0x80>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	e003      	b.n	8005eda <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ee2:	e02d      	b.n	8005f40 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	2180      	movs	r1, #128	; 0x80
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fbb9 	bl	8006666 <UART_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e039      	b.n	8005f72 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f10:	b292      	uxth	r2, r2
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	3302      	adds	r3, #2
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e008      	b.n	8005f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	781a      	ldrb	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b292      	uxth	r2, r2
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1cb      	bne.n	8005ee4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	2140      	movs	r1, #64	; 0x40
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fb85 	bl	8006666 <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e005      	b.n	8005f72 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	b5b0      	push	{r4, r5, r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4bad      	ldr	r3, [pc, #692]	; (800625c <UART_SetConfig+0x2e0>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	69f9      	ldr	r1, [r7, #28]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4aa2      	ldr	r2, [pc, #648]	; (8006260 <UART_SetConfig+0x2e4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a99      	ldr	r2, [pc, #612]	; (8006264 <UART_SetConfig+0x2e8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d121      	bne.n	8006046 <UART_SetConfig+0xca>
 8006002:	4b99      	ldr	r3, [pc, #612]	; (8006268 <UART_SetConfig+0x2ec>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b03      	cmp	r3, #3
 800600e:	d817      	bhi.n	8006040 <UART_SetConfig+0xc4>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x9c>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006029 	.word	0x08006029
 800601c:	08006035 	.word	0x08006035
 8006020:	0800602f 	.word	0x0800602f
 8006024:	0800603b 	.word	0x0800603b
 8006028:	2301      	movs	r3, #1
 800602a:	76fb      	strb	r3, [r7, #27]
 800602c:	e0e7      	b.n	80061fe <UART_SetConfig+0x282>
 800602e:	2302      	movs	r3, #2
 8006030:	76fb      	strb	r3, [r7, #27]
 8006032:	e0e4      	b.n	80061fe <UART_SetConfig+0x282>
 8006034:	2304      	movs	r3, #4
 8006036:	76fb      	strb	r3, [r7, #27]
 8006038:	e0e1      	b.n	80061fe <UART_SetConfig+0x282>
 800603a:	2308      	movs	r3, #8
 800603c:	76fb      	strb	r3, [r7, #27]
 800603e:	e0de      	b.n	80061fe <UART_SetConfig+0x282>
 8006040:	2310      	movs	r3, #16
 8006042:	76fb      	strb	r3, [r7, #27]
 8006044:	e0db      	b.n	80061fe <UART_SetConfig+0x282>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a88      	ldr	r2, [pc, #544]	; (800626c <UART_SetConfig+0x2f0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d132      	bne.n	80060b6 <UART_SetConfig+0x13a>
 8006050:	4b85      	ldr	r3, [pc, #532]	; (8006268 <UART_SetConfig+0x2ec>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	f003 030c 	and.w	r3, r3, #12
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d828      	bhi.n	80060b0 <UART_SetConfig+0x134>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0xe8>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006099 	.word	0x08006099
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060a5 	.word	0x080060a5
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060b1 	.word	0x080060b1
 8006084:	0800609f 	.word	0x0800609f
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060ab 	.word	0x080060ab
 8006098:	2300      	movs	r3, #0
 800609a:	76fb      	strb	r3, [r7, #27]
 800609c:	e0af      	b.n	80061fe <UART_SetConfig+0x282>
 800609e:	2302      	movs	r3, #2
 80060a0:	76fb      	strb	r3, [r7, #27]
 80060a2:	e0ac      	b.n	80061fe <UART_SetConfig+0x282>
 80060a4:	2304      	movs	r3, #4
 80060a6:	76fb      	strb	r3, [r7, #27]
 80060a8:	e0a9      	b.n	80061fe <UART_SetConfig+0x282>
 80060aa:	2308      	movs	r3, #8
 80060ac:	76fb      	strb	r3, [r7, #27]
 80060ae:	e0a6      	b.n	80061fe <UART_SetConfig+0x282>
 80060b0:	2310      	movs	r3, #16
 80060b2:	76fb      	strb	r3, [r7, #27]
 80060b4:	e0a3      	b.n	80061fe <UART_SetConfig+0x282>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a6d      	ldr	r2, [pc, #436]	; (8006270 <UART_SetConfig+0x2f4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d120      	bne.n	8006102 <UART_SetConfig+0x186>
 80060c0:	4b69      	ldr	r3, [pc, #420]	; (8006268 <UART_SetConfig+0x2ec>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ca:	2b30      	cmp	r3, #48	; 0x30
 80060cc:	d013      	beq.n	80060f6 <UART_SetConfig+0x17a>
 80060ce:	2b30      	cmp	r3, #48	; 0x30
 80060d0:	d814      	bhi.n	80060fc <UART_SetConfig+0x180>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d009      	beq.n	80060ea <UART_SetConfig+0x16e>
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d810      	bhi.n	80060fc <UART_SetConfig+0x180>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <UART_SetConfig+0x168>
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d006      	beq.n	80060f0 <UART_SetConfig+0x174>
 80060e2:	e00b      	b.n	80060fc <UART_SetConfig+0x180>
 80060e4:	2300      	movs	r3, #0
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e089      	b.n	80061fe <UART_SetConfig+0x282>
 80060ea:	2302      	movs	r3, #2
 80060ec:	76fb      	strb	r3, [r7, #27]
 80060ee:	e086      	b.n	80061fe <UART_SetConfig+0x282>
 80060f0:	2304      	movs	r3, #4
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e083      	b.n	80061fe <UART_SetConfig+0x282>
 80060f6:	2308      	movs	r3, #8
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e080      	b.n	80061fe <UART_SetConfig+0x282>
 80060fc:	2310      	movs	r3, #16
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e07d      	b.n	80061fe <UART_SetConfig+0x282>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5b      	ldr	r2, [pc, #364]	; (8006274 <UART_SetConfig+0x2f8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d120      	bne.n	800614e <UART_SetConfig+0x1d2>
 800610c:	4b56      	ldr	r3, [pc, #344]	; (8006268 <UART_SetConfig+0x2ec>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006116:	2bc0      	cmp	r3, #192	; 0xc0
 8006118:	d013      	beq.n	8006142 <UART_SetConfig+0x1c6>
 800611a:	2bc0      	cmp	r3, #192	; 0xc0
 800611c:	d814      	bhi.n	8006148 <UART_SetConfig+0x1cc>
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d009      	beq.n	8006136 <UART_SetConfig+0x1ba>
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d810      	bhi.n	8006148 <UART_SetConfig+0x1cc>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <UART_SetConfig+0x1b4>
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d006      	beq.n	800613c <UART_SetConfig+0x1c0>
 800612e:	e00b      	b.n	8006148 <UART_SetConfig+0x1cc>
 8006130:	2300      	movs	r3, #0
 8006132:	76fb      	strb	r3, [r7, #27]
 8006134:	e063      	b.n	80061fe <UART_SetConfig+0x282>
 8006136:	2302      	movs	r3, #2
 8006138:	76fb      	strb	r3, [r7, #27]
 800613a:	e060      	b.n	80061fe <UART_SetConfig+0x282>
 800613c:	2304      	movs	r3, #4
 800613e:	76fb      	strb	r3, [r7, #27]
 8006140:	e05d      	b.n	80061fe <UART_SetConfig+0x282>
 8006142:	2308      	movs	r3, #8
 8006144:	76fb      	strb	r3, [r7, #27]
 8006146:	e05a      	b.n	80061fe <UART_SetConfig+0x282>
 8006148:	2310      	movs	r3, #16
 800614a:	76fb      	strb	r3, [r7, #27]
 800614c:	e057      	b.n	80061fe <UART_SetConfig+0x282>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a49      	ldr	r2, [pc, #292]	; (8006278 <UART_SetConfig+0x2fc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d125      	bne.n	80061a4 <UART_SetConfig+0x228>
 8006158:	4b43      	ldr	r3, [pc, #268]	; (8006268 <UART_SetConfig+0x2ec>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006166:	d017      	beq.n	8006198 <UART_SetConfig+0x21c>
 8006168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800616c:	d817      	bhi.n	800619e <UART_SetConfig+0x222>
 800616e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006172:	d00b      	beq.n	800618c <UART_SetConfig+0x210>
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	d811      	bhi.n	800619e <UART_SetConfig+0x222>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <UART_SetConfig+0x20a>
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d006      	beq.n	8006192 <UART_SetConfig+0x216>
 8006184:	e00b      	b.n	800619e <UART_SetConfig+0x222>
 8006186:	2300      	movs	r3, #0
 8006188:	76fb      	strb	r3, [r7, #27]
 800618a:	e038      	b.n	80061fe <UART_SetConfig+0x282>
 800618c:	2302      	movs	r3, #2
 800618e:	76fb      	strb	r3, [r7, #27]
 8006190:	e035      	b.n	80061fe <UART_SetConfig+0x282>
 8006192:	2304      	movs	r3, #4
 8006194:	76fb      	strb	r3, [r7, #27]
 8006196:	e032      	b.n	80061fe <UART_SetConfig+0x282>
 8006198:	2308      	movs	r3, #8
 800619a:	76fb      	strb	r3, [r7, #27]
 800619c:	e02f      	b.n	80061fe <UART_SetConfig+0x282>
 800619e:	2310      	movs	r3, #16
 80061a0:	76fb      	strb	r3, [r7, #27]
 80061a2:	e02c      	b.n	80061fe <UART_SetConfig+0x282>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <UART_SetConfig+0x2e4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d125      	bne.n	80061fa <UART_SetConfig+0x27e>
 80061ae:	4b2e      	ldr	r3, [pc, #184]	; (8006268 <UART_SetConfig+0x2ec>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061bc:	d017      	beq.n	80061ee <UART_SetConfig+0x272>
 80061be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c2:	d817      	bhi.n	80061f4 <UART_SetConfig+0x278>
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c8:	d00b      	beq.n	80061e2 <UART_SetConfig+0x266>
 80061ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ce:	d811      	bhi.n	80061f4 <UART_SetConfig+0x278>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <UART_SetConfig+0x260>
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d8:	d006      	beq.n	80061e8 <UART_SetConfig+0x26c>
 80061da:	e00b      	b.n	80061f4 <UART_SetConfig+0x278>
 80061dc:	2300      	movs	r3, #0
 80061de:	76fb      	strb	r3, [r7, #27]
 80061e0:	e00d      	b.n	80061fe <UART_SetConfig+0x282>
 80061e2:	2302      	movs	r3, #2
 80061e4:	76fb      	strb	r3, [r7, #27]
 80061e6:	e00a      	b.n	80061fe <UART_SetConfig+0x282>
 80061e8:	2304      	movs	r3, #4
 80061ea:	76fb      	strb	r3, [r7, #27]
 80061ec:	e007      	b.n	80061fe <UART_SetConfig+0x282>
 80061ee:	2308      	movs	r3, #8
 80061f0:	76fb      	strb	r3, [r7, #27]
 80061f2:	e004      	b.n	80061fe <UART_SetConfig+0x282>
 80061f4:	2310      	movs	r3, #16
 80061f6:	76fb      	strb	r3, [r7, #27]
 80061f8:	e001      	b.n	80061fe <UART_SetConfig+0x282>
 80061fa:	2310      	movs	r3, #16
 80061fc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <UART_SetConfig+0x2e4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	f040 8087 	bne.w	8006318 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800620a:	7efb      	ldrb	r3, [r7, #27]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d837      	bhi.n	8006280 <UART_SetConfig+0x304>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x29c>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006281 	.word	0x08006281
 8006220:	08006245 	.word	0x08006245
 8006224:	08006281 	.word	0x08006281
 8006228:	0800624b 	.word	0x0800624b
 800622c:	08006281 	.word	0x08006281
 8006230:	08006281 	.word	0x08006281
 8006234:	08006281 	.word	0x08006281
 8006238:	08006253 	.word	0x08006253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623c:	f7fe ff80 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8006240:	6178      	str	r0, [r7, #20]
        break;
 8006242:	e022      	b.n	800628a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006244:	4b0d      	ldr	r3, [pc, #52]	; (800627c <UART_SetConfig+0x300>)
 8006246:	617b      	str	r3, [r7, #20]
        break;
 8006248:	e01f      	b.n	800628a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624a:	f7fe fee1 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 800624e:	6178      	str	r0, [r7, #20]
        break;
 8006250:	e01b      	b.n	800628a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e017      	b.n	800628a <UART_SetConfig+0x30e>
 800625a:	bf00      	nop
 800625c:	efff69f3 	.word	0xefff69f3
 8006260:	40008000 	.word	0x40008000
 8006264:	40013800 	.word	0x40013800
 8006268:	40021000 	.word	0x40021000
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	40004c00 	.word	0x40004c00
 8006278:	40005000 	.word	0x40005000
 800627c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	76bb      	strb	r3, [r7, #26]
        break;
 8006288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80f1 	beq.w	8006474 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4413      	add	r3, r2
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d305      	bcc.n	80062ae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d902      	bls.n	80062b4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	76bb      	strb	r3, [r7, #26]
 80062b2:	e0df      	b.n	8006474 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	020b      	lsls	r3, r1, #8
 80062c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062ca:	0202      	lsls	r2, r0, #8
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	6849      	ldr	r1, [r1, #4]
 80062d0:	0849      	lsrs	r1, r1, #1
 80062d2:	4608      	mov	r0, r1
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	1814      	adds	r4, r2, r0
 80062da:	eb43 0501 	adc.w	r5, r3, r1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	4620      	mov	r0, r4
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7fa fcec 	bl	8000cc8 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4613      	mov	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062fe:	d308      	bcc.n	8006312 <UART_SetConfig+0x396>
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d204      	bcs.n	8006312 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	e0b0      	b.n	8006474 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	76bb      	strb	r3, [r7, #26]
 8006316:	e0ad      	b.n	8006474 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	d15c      	bne.n	80063dc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006322:	7efb      	ldrb	r3, [r7, #27]
 8006324:	2b08      	cmp	r3, #8
 8006326:	d828      	bhi.n	800637a <UART_SetConfig+0x3fe>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <UART_SetConfig+0x3b4>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006355 	.word	0x08006355
 8006334:	0800635d 	.word	0x0800635d
 8006338:	08006365 	.word	0x08006365
 800633c:	0800637b 	.word	0x0800637b
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800637b 	.word	0x0800637b
 8006348:	0800637b 	.word	0x0800637b
 800634c:	0800637b 	.word	0x0800637b
 8006350:	08006373 	.word	0x08006373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006354:	f7fe fef4 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8006358:	6178      	str	r0, [r7, #20]
        break;
 800635a:	e013      	b.n	8006384 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7fe ff06 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8006360:	6178      	str	r0, [r7, #20]
        break;
 8006362:	e00f      	b.n	8006384 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006364:	4b49      	ldr	r3, [pc, #292]	; (800648c <UART_SetConfig+0x510>)
 8006366:	617b      	str	r3, [r7, #20]
        break;
 8006368:	e00c      	b.n	8006384 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636a:	f7fe fe51 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 800636e:	6178      	str	r0, [r7, #20]
        break;
 8006370:	e008      	b.n	8006384 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006376:	617b      	str	r3, [r7, #20]
        break;
 8006378:	e004      	b.n	8006384 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	76bb      	strb	r3, [r7, #26]
        break;
 8006382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d074      	beq.n	8006474 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	005a      	lsls	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	441a      	add	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	d916      	bls.n	80063d6 <UART_SetConfig+0x45a>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ae:	d212      	bcs.n	80063d6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f023 030f 	bic.w	r3, r3, #15
 80063b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	89fb      	ldrh	r3, [r7, #14]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	89fa      	ldrh	r2, [r7, #14]
 80063d2:	60da      	str	r2, [r3, #12]
 80063d4:	e04e      	b.n	8006474 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	76bb      	strb	r3, [r7, #26]
 80063da:	e04b      	b.n	8006474 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063dc:	7efb      	ldrb	r3, [r7, #27]
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d827      	bhi.n	8006432 <UART_SetConfig+0x4b6>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <UART_SetConfig+0x46c>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	08006415 	.word	0x08006415
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	08006433 	.word	0x08006433
 80063f8:	08006423 	.word	0x08006423
 80063fc:	08006433 	.word	0x08006433
 8006400:	08006433 	.word	0x08006433
 8006404:	08006433 	.word	0x08006433
 8006408:	0800642b 	.word	0x0800642b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fe fe98 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8006410:	6178      	str	r0, [r7, #20]
        break;
 8006412:	e013      	b.n	800643c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006414:	f7fe feaa 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8006418:	6178      	str	r0, [r7, #20]
        break;
 800641a:	e00f      	b.n	800643c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800641c:	4b1b      	ldr	r3, [pc, #108]	; (800648c <UART_SetConfig+0x510>)
 800641e:	617b      	str	r3, [r7, #20]
        break;
 8006420:	e00c      	b.n	800643c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006422:	f7fe fdf5 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006426:	6178      	str	r0, [r7, #20]
        break;
 8006428:	e008      	b.n	800643c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	617b      	str	r3, [r7, #20]
        break;
 8006430:	e004      	b.n	800643c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	76bb      	strb	r3, [r7, #26]
        break;
 800643a:	bf00      	nop
    }

    if (pclk != 0U)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d018      	beq.n	8006474 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085a      	lsrs	r2, r3, #1
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	441a      	add	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	b29b      	uxth	r3, r3
 8006456:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d908      	bls.n	8006470 <UART_SetConfig+0x4f4>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d204      	bcs.n	8006470 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e001      	b.n	8006474 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006480:	7ebb      	ldrb	r3, [r7, #26]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bdb0      	pop	{r4, r5, r7, pc}
 800648a:	bf00      	nop
 800648c:	00f42400 	.word	0x00f42400

08006490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658e:	d10a      	bne.n	80065a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af02      	add	r7, sp, #8
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e4:	f7fb ff06 	bl	80023f4 <HAL_GetTick>
 80065e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d10e      	bne.n	8006616 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f82d 	bl	8006666 <UART_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e023      	b.n	800665e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b04      	cmp	r3, #4
 8006622:	d10e      	bne.n	8006642 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f817 	bl	8006666 <UART_WaitOnFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e00d      	b.n	800665e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	4613      	mov	r3, r2
 8006674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006676:	e05e      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667e:	d05a      	beq.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006680:	f7fb feb8 	bl	80023f4 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	429a      	cmp	r2, r3
 800668e:	d302      	bcc.n	8006696 <UART_WaitOnFlagUntilTimeout+0x30>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11b      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0201 	bic.w	r2, r2, #1
 80066b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e043      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02c      	beq.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ea:	d124      	bne.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006704:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e00f      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4013      	ands	r3, r2
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	429a      	cmp	r2, r3
 8006744:	bf0c      	ite	eq
 8006746:	2301      	moveq	r3, #1
 8006748:	2300      	movne	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	429a      	cmp	r2, r3
 8006752:	d091      	beq.n	8006678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <s25fl256l_defaultCommand>:
static uint8_t CMD_RUID		= 0x4B;


/* SUPPORT FUNCTIONS */

void s25fl256l_defaultCommand(QSPI_CommandTypeDef *command) {
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
	command->InstructionMode   	= QSPI_INSTRUCTION_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	619a      	str	r2, [r3, #24]
	command->DataMode          	= QSPI_DATA_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
	command->AddressMode       	= QSPI_ADDRESS_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	61da      	str	r2, [r3, #28]
	command->AddressSize       	= QSPI_ADDRESS_32_BITS;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800677e:	60da      	str	r2, [r3, #12]

	command->AlternateByteMode 	= QSPI_ALTERNATE_BYTES_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	621a      	str	r2, [r3, #32]
	command->NbData            	= 1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	629a      	str	r2, [r3, #40]	; 0x28
	command->DummyCycles       	= 0;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	615a      	str	r2, [r3, #20]

	command->DdrMode           	= QSPI_DDR_MODE_DISABLE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c
	command->DdrHoldHalfCycle  	= QSPI_DDR_HHC_ANALOG_DELAY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
	command->SIOOMode          	= QSPI_SIOO_INST_EVERY_CMD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <s25fl256l_sendCommand>:


int s25fl256l_sendCommand(QSPI_HandleTypeDef *hand, QSPI_CommandTypeDef *cmd, int dev) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;

	// set all devices
	HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin | QSPI_CS2_Pin | QSPI_CS3_Pin, GPIO_PIN_SET);
 80067bc:	2201      	movs	r2, #1
 80067be:	2107      	movs	r1, #7
 80067c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067c4:	f7fd f996 	bl	8003af4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80067c8:	2005      	movs	r0, #5
 80067ca:	f7fb fe1f 	bl	800240c <HAL_Delay>

	// reset appropriate device
	if(dev == 0) 		HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin, GPIO_PIN_RESET);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <s25fl256l_sendCommand+0x32>
 80067d4:	2200      	movs	r2, #0
 80067d6:	2101      	movs	r1, #1
 80067d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067dc:	f7fd f98a 	bl	8003af4 <HAL_GPIO_WritePin>
 80067e0:	e00f      	b.n	8006802 <s25fl256l_sendCommand+0x52>
	else if(dev == 1) 	HAL_GPIO_WritePin(GPIOA, QSPI_CS2_Pin, GPIO_PIN_RESET);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d106      	bne.n	80067f6 <s25fl256l_sendCommand+0x46>
 80067e8:	2200      	movs	r2, #0
 80067ea:	2102      	movs	r1, #2
 80067ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067f0:	f7fd f980 	bl	8003af4 <HAL_GPIO_WritePin>
 80067f4:	e005      	b.n	8006802 <s25fl256l_sendCommand+0x52>
	else 				HAL_GPIO_WritePin(GPIOA, QSPI_CS3_Pin, GPIO_PIN_RESET);
 80067f6:	2200      	movs	r2, #0
 80067f8:	2104      	movs	r1, #4
 80067fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067fe:	f7fd f979 	bl	8003af4 <HAL_GPIO_WritePin>

	// send command
	ret = HAL_QSPI_Command(hand, cmd, QSPI_TIMEOUT);
 8006802:	2264      	movs	r2, #100	; 0x64
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7fd fba2 	bl	8003f50 <HAL_QSPI_Command>
 800680c:	4603      	mov	r3, r0
 800680e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) {
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d007      	beq.n	8006826 <s25fl256l_sendCommand+0x76>
		log_error("s25fl256l_sendCommand", dev, 0, ret);
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2200      	movs	r2, #0
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4804      	ldr	r0, [pc, #16]	; (8006830 <s25fl256l_sendCommand+0x80>)
 800681e:	f000 faa9 	bl	8006d74 <log_error>
		return 1;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <s25fl256l_sendCommand+0x78>
	}

	return 0;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	0800b930 	.word	0x0800b930

08006834 <s25fl256l_writeSectorRandom>:


void s25fl256l_writeSectorRandom(QSPI_HandleTypeDef *hand, int *dev, int devSize, int sector) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b096      	sub	sp, #88	; 0x58
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
	QSPI_CommandTypeDef command; HAL_StatusTypeDef ret;

	// create vanilla command
	s25fl256l_defaultCommand(&command);
 8006842:	f107 0310 	add.w	r3, r7, #16
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ff89 	bl	800675e <s25fl256l_defaultCommand>
	command.InstructionMode	= QSPI_INSTRUCTION_4_LINES;
 800684c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
	command.AddressMode		= QSPI_ADDRESS_4_LINES;
 8006852:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
	command.NbData          = 1;
 8006858:	2301      	movs	r3, #1
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
	command.DummyCycles     = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	; 0x24

	// generate random 4kB array
	uint8_t *buff = calloc(500, sizeof(uint8_t));
 8006860:	2101      	movs	r1, #1
 8006862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006866:	f000 fb1b 	bl	8006ea0 <calloc>
 800686a:	4603      	mov	r3, r0
 800686c:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i=0; i<500; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	657b      	str	r3, [r7, #84]	; 0x54
 8006872:	e00a      	b.n	800688a <s25fl256l_writeSectorRandom+0x56>
		buff[i] = rand();
 8006874:	f001 fac0 	bl	8007df8 <rand>
 8006878:	4601      	mov	r1, r0
 800687a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800687e:	4413      	add	r3, r2
 8006880:	b2ca      	uxtb	r2, r1
 8006882:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<500; i++)
 8006884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006886:	3301      	adds	r3, #1
 8006888:	657b      	str	r3, [r7, #84]	; 0x54
 800688a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006890:	dbf0      	blt.n	8006874 <s25fl256l_writeSectorRandom+0x40>

	// loop thru every device
	for(int i=0; i<devSize; i++) {
 8006892:	2300      	movs	r3, #0
 8006894:	653b      	str	r3, [r7, #80]	; 0x50
 8006896:	e069      	b.n	800696c <s25fl256l_writeSectorRandom+0x138>
		// erase sector
		command.Instruction	= CMD_4SE;
 8006898:	4b39      	ldr	r3, [pc, #228]	; (8006980 <s25fl256l_writeSectorRandom+0x14c>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	613b      	str	r3, [r7, #16]
		command.Address		= (uint32_t)sector * SEC_ADDR;
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	617b      	str	r3, [r7, #20]

		ret = s25fl256l_sendCommand(hand, &command, dev[i]);
 80068aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4413      	add	r3, r2
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	f107 0310 	add.w	r3, r7, #16
 80068b8:	4619      	mov	r1, r3
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff ff78 	bl	80067b0 <s25fl256l_sendCommand>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(ret != 0) log_error("s25fl256l_writeRandomSector", dev[i], 0, HAL_QSPI);
 80068c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <s25fl256l_writeSectorRandom+0xae>
 80068ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4413      	add	r3, r2
 80068d6:	6819      	ldr	r1, [r3, #0]
 80068d8:	2305      	movs	r3, #5
 80068da:	2200      	movs	r2, #0
 80068dc:	4829      	ldr	r0, [pc, #164]	; (8006984 <s25fl256l_writeSectorRandom+0x150>)
 80068de:	f000 fa49 	bl	8006d74 <log_error>

		// write to sector
		command.Instruction	= CMD_4QPP;
 80068e2:	4b29      	ldr	r3, [pc, #164]	; (8006988 <s25fl256l_writeSectorRandom+0x154>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	613b      	str	r3, [r7, #16]
		command.Address		= (uint32_t)sector * SEC_ADDR;
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	617b      	str	r3, [r7, #20]
		command.DataMode	= QSPI_DATA_4_LINES;
 80068f4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
		command.NbData      = 500;
 80068fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068fe:	63bb      	str	r3, [r7, #56]	; 0x38

		ret = s25fl256l_sendCommand(hand, &command, dev[i]);
 8006900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	4413      	add	r3, r2
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	f107 0310 	add.w	r3, r7, #16
 800690e:	4619      	mov	r1, r3
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff ff4d 	bl	80067b0 <s25fl256l_sendCommand>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(ret != 0) log_error("s25fl256l_writeRandomSector", dev[i], 1, HAL_QSPI);
 800691c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <s25fl256l_writeSectorRandom+0x104>
 8006924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	4413      	add	r3, r2
 800692c:	6819      	ldr	r1, [r3, #0]
 800692e:	2305      	movs	r3, #5
 8006930:	2201      	movs	r2, #1
 8006932:	4814      	ldr	r0, [pc, #80]	; (8006984 <s25fl256l_writeSectorRandom+0x150>)
 8006934:	f000 fa1e 	bl	8006d74 <log_error>

		// transmit data
		ret = HAL_QSPI_Transmit(hand, buff, QSPI_TIMEOUT);
 8006938:	2264      	movs	r2, #100	; 0x64
 800693a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7fd fb65 	bl	800400c <HAL_QSPI_Transmit>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(ret != HAL_OK) log_error("s25fl256l_writeRandomSector", dev[i], 2, ret);
 8006948:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <s25fl256l_writeSectorRandom+0x132>
 8006950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4413      	add	r3, r2
 8006958:	6819      	ldr	r1, [r3, #0]
 800695a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800695e:	2202      	movs	r2, #2
 8006960:	4808      	ldr	r0, [pc, #32]	; (8006984 <s25fl256l_writeSectorRandom+0x150>)
 8006962:	f000 fa07 	bl	8006d74 <log_error>
	for(int i=0; i<devSize; i++) {
 8006966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006968:	3301      	adds	r3, #1
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
 800696c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	db91      	blt.n	8006898 <s25fl256l_writeSectorRandom+0x64>
	}
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3758      	adds	r7, #88	; 0x58
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	2000000c 	.word	0x2000000c
 8006984:	0800b948 	.word	0x0800b948
 8006988:	2000000d 	.word	0x2000000d

0800698c <s25fl256l_configure>:


/* MAIN FUNCTIONS */

void s25fl256l_configure(QSPI_HandleTypeDef *hand, int dev) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b092      	sub	sp, #72	; 0x48
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef command; HAL_StatusTypeDef ret;

	// erase chip
	s25fl256l_defaultCommand(&command);
 8006996:	f107 030c 	add.w	r3, r7, #12
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fedf 	bl	800675e <s25fl256l_defaultCommand>
	command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80069a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
	command.Instruction       = CMD_CE;
 80069a6:	4b3f      	ldr	r3, [pc, #252]	; (8006aa4 <s25fl256l_configure+0x118>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
	command.NbData            = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
	command.DummyCycles       = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	623b      	str	r3, [r7, #32]

	ret = s25fl256l_sendCommand(hand, &command, dev);
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fef7 	bl	80067b0 <s25fl256l_sendCommand>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != 0) log_error("s25fl256l_configure", dev, 0, HAL_QSPI);
 80069c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <s25fl256l_configure+0x50>
 80069d0:	2305      	movs	r3, #5
 80069d2:	2200      	movs	r2, #0
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	4834      	ldr	r0, [pc, #208]	; (8006aa8 <s25fl256l_configure+0x11c>)
 80069d8:	f000 f9cc 	bl	8006d74 <log_error>

	// enable write
	command.Instruction = CMD_WREN;
 80069dc:	4b33      	ldr	r3, [pc, #204]	; (8006aac <s25fl256l_configure+0x120>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]

	ret = s25fl256l_sendCommand(hand, &command, dev);
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fee0 	bl	80067b0 <s25fl256l_sendCommand>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != 0) log_error("s25fl256l_configure", dev, 1, HAL_QSPI);
 80069f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <s25fl256l_configure+0x7e>
 80069fe:	2305      	movs	r3, #5
 8006a00:	2201      	movs	r2, #1
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	4828      	ldr	r0, [pc, #160]	; (8006aa8 <s25fl256l_configure+0x11c>)
 8006a06:	f000 f9b5 	bl	8006d74 <log_error>

	// enable volatile write
	command.Instruction = CMD_WRENV;
 8006a0a:	4b29      	ldr	r3, [pc, #164]	; (8006ab0 <s25fl256l_configure+0x124>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]

	ret = s25fl256l_sendCommand(hand, &command, dev);
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fec9 	bl	80067b0 <s25fl256l_sendCommand>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != 0) log_error("s25fl256l_configure", dev, 2, HAL_QSPI);
 8006a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <s25fl256l_configure+0xac>
 8006a2c:	2305      	movs	r3, #5
 8006a2e:	2202      	movs	r2, #2
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	481d      	ldr	r0, [pc, #116]	; (8006aa8 <s25fl256l_configure+0x11c>)
 8006a34:	f000 f99e 	bl	8006d74 <log_error>

	// switch to 4B address mode
	command.Instruction = CMD_4BEN;
 8006a38:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <s25fl256l_configure+0x128>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]

	ret = s25fl256l_sendCommand(hand, &command, dev);
 8006a3e:	f107 030c 	add.w	r3, r7, #12
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff feb2 	bl	80067b0 <s25fl256l_sendCommand>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != 0) log_error("s25fl256l_configure", dev, 3, HAL_QSPI);
 8006a52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <s25fl256l_configure+0xda>
 8006a5a:	2305      	movs	r3, #5
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	4811      	ldr	r0, [pc, #68]	; (8006aa8 <s25fl256l_configure+0x11c>)
 8006a62:	f000 f987 	bl	8006d74 <log_error>

	// switch to QSPI
	command.Instruction = CMD_QPIEN;
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <s25fl256l_configure+0x12c>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

	ret = s25fl256l_sendCommand(hand, &command, dev);
 8006a6c:	f107 030c 	add.w	r3, r7, #12
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fe9b 	bl	80067b0 <s25fl256l_sendCommand>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != 0) log_error("s25fl256l_configure", dev, 4, HAL_QSPI);
 8006a80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <s25fl256l_configure+0x108>
 8006a88:	2305      	movs	r3, #5
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	4806      	ldr	r0, [pc, #24]	; (8006aa8 <s25fl256l_configure+0x11c>)
 8006a90:	f000 f970 	bl	8006d74 <log_error>

	log_info("s25fl256l_configure", dev);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	4804      	ldr	r0, [pc, #16]	; (8006aa8 <s25fl256l_configure+0x11c>)
 8006a98:	f000 f94c 	bl	8006d34 <log_info>
}
 8006a9c:	bf00      	nop
 8006a9e:	3748      	adds	r7, #72	; 0x48
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	2000000b 	.word	0x2000000b
 8006aa8:	0800b964 	.word	0x0800b964
 8006aac:	2000000e 	.word	0x2000000e
 8006ab0:	2000000f 	.word	0x2000000f
 8006ab4:	2000000a 	.word	0x2000000a
 8006ab8:	20000009 	.word	0x20000009

08006abc <s25fl256l_readManufac>:


void s25fl256l_readManufac(QSPI_HandleTypeDef *hand, int dev) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b098      	sub	sp, #96	; 0x60
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef command; HAL_StatusTypeDef ret; uint8_t buff[8];

	// request and read manufacturer device type
	s25fl256l_defaultCommand(&command);
 8006ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fe47 	bl	800675e <s25fl256l_defaultCommand>
	command.InstructionMode   	= QSPI_INSTRUCTION_4_LINES;
 8006ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
	command.Instruction       	= CMD_RDID;
 8006ad6:	4b44      	ldr	r3, [pc, #272]	; (8006be8 <s25fl256l_readManufac+0x12c>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
	command.DataMode          	= QSPI_DATA_4_LINES;
 8006adc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
	command.NbData            	= 3;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
	command.DummyCycles       	= 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	63bb      	str	r3, [r7, #56]	; 0x38

	ret = s25fl256l_sendCommand(hand, &command, dev);
 8006aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fe5c 	bl	80067b0 <s25fl256l_sendCommand>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(ret != 0) log_error("s25fl256l_readManufac", dev, 0, HAL_QSPI);
 8006afe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <s25fl256l_readManufac+0x56>
 8006b06:	2305      	movs	r3, #5
 8006b08:	2200      	movs	r2, #0
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	4837      	ldr	r0, [pc, #220]	; (8006bec <s25fl256l_readManufac+0x130>)
 8006b0e:	f000 f931 	bl	8006d74 <log_error>

	ret = HAL_QSPI_Receive(hand, buff, QSPI_TIMEOUT);
 8006b12:	f107 031c 	add.w	r3, r7, #28
 8006b16:	2264      	movs	r2, #100	; 0x64
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fd fb08 	bl	8004130 <HAL_QSPI_Receive>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(ret != HAL_OK) log_error("s25fl256l_readManufac", dev, 1, ret);
 8006b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <s25fl256l_readManufac+0x80>
 8006b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b32:	2201      	movs	r2, #1
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	482d      	ldr	r0, [pc, #180]	; (8006bec <s25fl256l_readManufac+0x130>)
 8006b38:	f000 f91c 	bl	8006d74 <log_error>

	// convert address to string
	char tmp[17];
	addr2str(buff, 3, tmp);
 8006b3c:	f107 0208 	add.w	r2, r7, #8
 8006b40:	f107 031c 	add.w	r3, r7, #28
 8006b44:	2103      	movs	r1, #3
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f85c 	bl	8006c04 <addr2str>
	log_data("s25fl256l", dev, "dev_manufac", tmp, NAN);
 8006b4c:	f107 0308 	add.w	r3, r7, #8
 8006b50:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8006bf0 <s25fl256l_readManufac+0x134>
 8006b54:	4a27      	ldr	r2, [pc, #156]	; (8006bf4 <s25fl256l_readManufac+0x138>)
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	4827      	ldr	r0, [pc, #156]	; (8006bf8 <s25fl256l_readManufac+0x13c>)
 8006b5a:	f000 f943 	bl	8006de4 <log_data>

	// request and read unique device ID
	command.Instruction 		= CMD_RUID;
 8006b5e:	4b27      	ldr	r3, [pc, #156]	; (8006bfc <s25fl256l_readManufac+0x140>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
	command.NbData          	= 8;
 8006b64:	2308      	movs	r3, #8
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
	command.DummyCycles     	= 31;
 8006b68:	231f      	movs	r3, #31
 8006b6a:	63bb      	str	r3, [r7, #56]	; 0x38

	ret = s25fl256l_sendCommand(hand, &command, dev);
 8006b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fe1b 	bl	80067b0 <s25fl256l_sendCommand>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(ret != 0) log_error("s25fl256l_readManufac", dev, 2, HAL_QSPI);
 8006b80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <s25fl256l_readManufac+0xd8>
 8006b88:	2305      	movs	r3, #5
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	4817      	ldr	r0, [pc, #92]	; (8006bec <s25fl256l_readManufac+0x130>)
 8006b90:	f000 f8f0 	bl	8006d74 <log_error>

	ret = HAL_QSPI_Receive(hand, buff, QSPI_TIMEOUT);
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	2264      	movs	r2, #100	; 0x64
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fd fac7 	bl	8004130 <HAL_QSPI_Receive>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(ret != HAL_OK) log_error("s25fl256l_readManufac", dev, 3, ret);
 8006ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <s25fl256l_readManufac+0x102>
 8006bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	480c      	ldr	r0, [pc, #48]	; (8006bec <s25fl256l_readManufac+0x130>)
 8006bba:	f000 f8db 	bl	8006d74 <log_error>

	// convert address to string
	addr2str(buff, 8, tmp);
 8006bbe:	f107 0208 	add.w	r2, r7, #8
 8006bc2:	f107 031c 	add.w	r3, r7, #28
 8006bc6:	2108      	movs	r1, #8
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 f81b 	bl	8006c04 <addr2str>
	log_data("s25fl256l", dev, "dev_id", tmp, NAN);
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006bf0 <s25fl256l_readManufac+0x134>
 8006bd6:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <s25fl256l_readManufac+0x144>)
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	4807      	ldr	r0, [pc, #28]	; (8006bf8 <s25fl256l_readManufac+0x13c>)
 8006bdc:	f000 f902 	bl	8006de4 <log_data>
}
 8006be0:	bf00      	nop
 8006be2:	3760      	adds	r7, #96	; 0x60
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000010 	.word	0x20000010
 8006bec:	0800b978 	.word	0x0800b978
 8006bf0:	7fc00000 	.word	0x7fc00000
 8006bf4:	0800b990 	.word	0x0800b990
 8006bf8:	0800b99c 	.word	0x0800b99c
 8006bfc:	20000011 	.word	0x20000011
 8006c00:	0800b9a8 	.word	0x0800b9a8

08006c04 <addr2str>:
	}
	printf("Scanning completed\n");
}


void addr2str(uint8_t *addr, int addr_len, char *str) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
	int index = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	e011      	b.n	8006c3e <addr2str+0x3a>
	   index += sprintf(&str[index], "%02X", addr[i]);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	18d0      	adds	r0, r2, r3
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4909      	ldr	r1, [pc, #36]	; (8006c50 <addr2str+0x4c>)
 8006c2c:	f001 f93a 	bl	8007ea4 <siprintf>
 8006c30:	4602      	mov	r2, r0
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4413      	add	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	dbe9      	blt.n	8006c1a <addr2str+0x16>
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	0800b9e0 	.word	0x0800b9e0

08006c54 <log_assignHuart>:


/* LOG FUNCTIONS */

void log_assignHuart(UART_HandleTypeDef* hand1, UART_HandleTypeDef* hand2) {
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	huart_A = hand1;
 8006c5e:	4a06      	ldr	r2, [pc, #24]	; (8006c78 <log_assignHuart+0x24>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6013      	str	r3, [r2, #0]
	huart_B = hand2;
 8006c64:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <log_assignHuart+0x28>)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6013      	str	r3, [r2, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	200005d8 	.word	0x200005d8
 8006c7c:	200005dc 	.word	0x200005dc

08006c80 <log_enable>:


void log_enable() {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, UART2_EN_Pin, GPIO_PIN_SET);
 8006c84:	2201      	movs	r2, #1
 8006c86:	2104      	movs	r1, #4
 8006c88:	4805      	ldr	r0, [pc, #20]	; (8006ca0 <log_enable+0x20>)
 8006c8a:	f7fc ff33 	bl	8003af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin, GPIO_PIN_SET);
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c94:	4803      	ldr	r0, [pc, #12]	; (8006ca4 <log_enable+0x24>)
 8006c96:	f7fc ff2d 	bl	8003af4 <HAL_GPIO_WritePin>
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	48001800 	.word	0x48001800
 8006ca4:	48000c00 	.word	0x48000c00

08006ca8 <log_send>:


void log_send(char *buff, int lenght) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	ret = HAL_UART_Transmit(huart_A, (uint8_t *)buff, lenght, UART_TIMEOUT);
 8006cb2:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <log_send+0x78>)
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	2332      	movs	r3, #50	; 0x32
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	f7ff f8c8 	bl	8005e52 <HAL_UART_Transmit>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) printf("ERROR: UART-A %s\n", STATUS[ret]);
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <log_send+0x3c>
 8006ccc:	7bfa      	ldrb	r2, [r7, #15]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <log_send+0x7c>)
 8006cda:	4413      	add	r3, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4812      	ldr	r0, [pc, #72]	; (8006d28 <log_send+0x80>)
 8006ce0:	f000 fffc 	bl	8007cdc <iprintf>

	ret = HAL_UART_Transmit(huart_B, (uint8_t *)buff, lenght, UART_TIMEOUT);
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <log_send+0x84>)
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	2332      	movs	r3, #50	; 0x32
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	f7ff f8af 	bl	8005e52 <HAL_UART_Transmit>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) printf("ERROR: UART-B %s\n", STATUS[ret]);
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <log_send+0x6e>
 8006cfe:	7bfa      	ldrb	r2, [r7, #15]
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	4a06      	ldr	r2, [pc, #24]	; (8006d24 <log_send+0x7c>)
 8006d0c:	4413      	add	r3, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4807      	ldr	r0, [pc, #28]	; (8006d30 <log_send+0x88>)
 8006d12:	f000 ffe3 	bl	8007cdc <iprintf>
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	200005d8 	.word	0x200005d8
 8006d24:	0800bad0 	.word	0x0800bad0
 8006d28:	0800b9e8 	.word	0x0800b9e8
 8006d2c:	200005dc 	.word	0x200005dc
 8006d30:	0800b9fc 	.word	0x0800b9fc

08006d34 <log_info>:


void log_info(char *identity, int device) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b0c4      	sub	sp, #272	; 0x110
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	6018      	str	r0, [r3, #0]
 8006d3e:	463b      	mov	r3, r7
 8006d40:	6019      	str	r1, [r3, #0]
	char buff[256];
	int lenght = sprintf(buff, "INF -i %s -d %d\n", identity, device);
 8006d42:	463b      	mov	r3, r7
 8006d44:	1d3a      	adds	r2, r7, #4
 8006d46:	f107 000c 	add.w	r0, r7, #12
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	4908      	ldr	r1, [pc, #32]	; (8006d70 <log_info+0x3c>)
 8006d50:	f001 f8a8 	bl	8007ea4 <siprintf>
 8006d54:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	log_send(buff, lenght);
 8006d58:	f107 030c 	add.w	r3, r7, #12
 8006d5c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff ffa1 	bl	8006ca8 <log_send>
}
 8006d66:	bf00      	nop
 8006d68:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	0800ba10 	.word	0x0800ba10

08006d74 <log_error>:


void log_error(char *identity, int device, int fcnId, HAL_StatusTypeDef errId) {
 8006d74:	b590      	push	{r4, r7, lr}
 8006d76:	b0c9      	sub	sp, #292	; 0x124
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	f107 040c 	add.w	r4, r7, #12
 8006d7e:	6020      	str	r0, [r4, #0]
 8006d80:	f107 0008 	add.w	r0, r7, #8
 8006d84:	6001      	str	r1, [r0, #0]
 8006d86:	1d39      	adds	r1, r7, #4
 8006d88:	600a      	str	r2, [r1, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	1cfb      	adds	r3, r7, #3
 8006d8e:	701a      	strb	r2, [r3, #0]
	char buff[256];
	int lenght = sprintf(buff, "ERR -i %s -d %d -f %d -h %s\n", identity, device, fcnId, STATUS[errId]);
 8006d90:	1cfb      	adds	r3, r7, #3
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4a0f      	ldr	r2, [pc, #60]	; (8006ddc <log_error+0x68>)
 8006da0:	1899      	adds	r1, r3, r2
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	f107 020c 	add.w	r2, r7, #12
 8006daa:	f107 0014 	add.w	r0, r7, #20
 8006dae:	9101      	str	r1, [sp, #4]
 8006db0:	1d39      	adds	r1, r7, #4
 8006db2:	6809      	ldr	r1, [r1, #0]
 8006db4:	9100      	str	r1, [sp, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	4909      	ldr	r1, [pc, #36]	; (8006de0 <log_error+0x6c>)
 8006dbc:	f001 f872 	bl	8007ea4 <siprintf>
 8006dc0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
	log_send(buff, lenght);
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ff6b 	bl	8006ca8 <log_send>
}
 8006dd2:	bf00      	nop
 8006dd4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd90      	pop	{r4, r7, pc}
 8006ddc:	0800bad0 	.word	0x0800bad0
 8006de0:	0800ba24 	.word	0x0800ba24

08006de4 <log_data>:


void log_data(char *identity, int device, char *valType, char *valStr, float valFlt) {
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b0cd      	sub	sp, #308	; 0x134
 8006de8:	af04      	add	r7, sp, #16
 8006dea:	f107 0414 	add.w	r4, r7, #20
 8006dee:	6020      	str	r0, [r4, #0]
 8006df0:	f107 0010 	add.w	r0, r7, #16
 8006df4:	6001      	str	r1, [r0, #0]
 8006df6:	f107 010c 	add.w	r1, r7, #12
 8006dfa:	600a      	str	r2, [r1, #0]
 8006dfc:	f107 0208 	add.w	r2, r7, #8
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	ed83 0a00 	vstr	s0, [r3]
	char buff[256]; int lenght;

	// print string or float value
	if(strcmp(valStr, "NA"))
 8006e08:	f107 0308 	add.w	r3, r7, #8
 8006e0c:	4921      	ldr	r1, [pc, #132]	; (8006e94 <log_data+0xb0>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	f7f9 f9ee 	bl	80001f0 <strcmp>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d015      	beq.n	8006e46 <log_data+0x62>
		lenght = sprintf(buff, "DAT -i %s -d %d -t %s -s %s\n", identity, device, valType, valStr);
 8006e1a:	f107 0310 	add.w	r3, r7, #16
 8006e1e:	f107 0214 	add.w	r2, r7, #20
 8006e22:	f107 001c 	add.w	r0, r7, #28
 8006e26:	f107 0108 	add.w	r1, r7, #8
 8006e2a:	6809      	ldr	r1, [r1, #0]
 8006e2c:	9101      	str	r1, [sp, #4]
 8006e2e:	f107 010c 	add.w	r1, r7, #12
 8006e32:	6809      	ldr	r1, [r1, #0]
 8006e34:	9100      	str	r1, [sp, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	4917      	ldr	r1, [pc, #92]	; (8006e98 <log_data+0xb4>)
 8006e3c:	f001 f832 	bl	8007ea4 <siprintf>
 8006e40:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8006e44:	e019      	b.n	8006e7a <log_data+0x96>
	else
		lenght = sprintf(buff, "DAT -i %s -d %d -t %s -f %f\n", identity, device, valType, valFlt);
 8006e46:	1d3b      	adds	r3, r7, #4
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f7f9 fb9d 	bl	8000588 <__aeabi_f2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	f107 0010 	add.w	r0, r7, #16
 8006e56:	f107 0114 	add.w	r1, r7, #20
 8006e5a:	f107 041c 	add.w	r4, r7, #28
 8006e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	6803      	ldr	r3, [r0, #0]
 8006e6c:	680a      	ldr	r2, [r1, #0]
 8006e6e:	490b      	ldr	r1, [pc, #44]	; (8006e9c <log_data+0xb8>)
 8006e70:	4620      	mov	r0, r4
 8006e72:	f001 f817 	bl	8007ea4 <siprintf>
 8006e76:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	// send to UART
	log_send(buff, lenght);
 8006e7a:	f107 031c 	add.w	r3, r7, #28
 8006e7e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff ff10 	bl	8006ca8 <log_send>
}
 8006e88:	bf00      	nop
 8006e8a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	0800ba44 	.word	0x0800ba44
 8006e98:	0800ba48 	.word	0x0800ba48
 8006e9c:	0800ba68 	.word	0x0800ba68

08006ea0 <calloc>:
 8006ea0:	4b02      	ldr	r3, [pc, #8]	; (8006eac <calloc+0xc>)
 8006ea2:	460a      	mov	r2, r1
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	f000 b834 	b.w	8006f14 <_calloc_r>
 8006eac:	20000014 	.word	0x20000014

08006eb0 <__errno>:
 8006eb0:	4b01      	ldr	r3, [pc, #4]	; (8006eb8 <__errno+0x8>)
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000014 	.word	0x20000014

08006ebc <__libc_init_array>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	4d0d      	ldr	r5, [pc, #52]	; (8006ef4 <__libc_init_array+0x38>)
 8006ec0:	4c0d      	ldr	r4, [pc, #52]	; (8006ef8 <__libc_init_array+0x3c>)
 8006ec2:	1b64      	subs	r4, r4, r5
 8006ec4:	10a4      	asrs	r4, r4, #2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	42a6      	cmp	r6, r4
 8006eca:	d109      	bne.n	8006ee0 <__libc_init_array+0x24>
 8006ecc:	4d0b      	ldr	r5, [pc, #44]	; (8006efc <__libc_init_array+0x40>)
 8006ece:	4c0c      	ldr	r4, [pc, #48]	; (8006f00 <__libc_init_array+0x44>)
 8006ed0:	f004 fd14 	bl	800b8fc <_init>
 8006ed4:	1b64      	subs	r4, r4, r5
 8006ed6:	10a4      	asrs	r4, r4, #2
 8006ed8:	2600      	movs	r6, #0
 8006eda:	42a6      	cmp	r6, r4
 8006edc:	d105      	bne.n	8006eea <__libc_init_array+0x2e>
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee4:	4798      	blx	r3
 8006ee6:	3601      	adds	r6, #1
 8006ee8:	e7ee      	b.n	8006ec8 <__libc_init_array+0xc>
 8006eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eee:	4798      	blx	r3
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	e7f2      	b.n	8006eda <__libc_init_array+0x1e>
 8006ef4:	0800c040 	.word	0x0800c040
 8006ef8:	0800c040 	.word	0x0800c040
 8006efc:	0800c040 	.word	0x0800c040
 8006f00:	0800c044 	.word	0x0800c044

08006f04 <memset>:
 8006f04:	4402      	add	r2, r0
 8006f06:	4603      	mov	r3, r0
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d100      	bne.n	8006f0e <memset+0xa>
 8006f0c:	4770      	bx	lr
 8006f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f12:	e7f9      	b.n	8006f08 <memset+0x4>

08006f14 <_calloc_r>:
 8006f14:	b513      	push	{r0, r1, r4, lr}
 8006f16:	434a      	muls	r2, r1
 8006f18:	4611      	mov	r1, r2
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	f000 f80a 	bl	8006f34 <_malloc_r>
 8006f20:	4604      	mov	r4, r0
 8006f22:	b118      	cbz	r0, 8006f2c <_calloc_r+0x18>
 8006f24:	9a01      	ldr	r2, [sp, #4]
 8006f26:	2100      	movs	r1, #0
 8006f28:	f7ff ffec 	bl	8006f04 <memset>
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	b002      	add	sp, #8
 8006f30:	bd10      	pop	{r4, pc}
	...

08006f34 <_malloc_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	1ccd      	adds	r5, r1, #3
 8006f38:	f025 0503 	bic.w	r5, r5, #3
 8006f3c:	3508      	adds	r5, #8
 8006f3e:	2d0c      	cmp	r5, #12
 8006f40:	bf38      	it	cc
 8006f42:	250c      	movcc	r5, #12
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	4606      	mov	r6, r0
 8006f48:	db01      	blt.n	8006f4e <_malloc_r+0x1a>
 8006f4a:	42a9      	cmp	r1, r5
 8006f4c:	d903      	bls.n	8006f56 <_malloc_r+0x22>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	2000      	movs	r0, #0
 8006f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f56:	f003 fb9b 	bl	800a690 <__malloc_lock>
 8006f5a:	4921      	ldr	r1, [pc, #132]	; (8006fe0 <_malloc_r+0xac>)
 8006f5c:	680a      	ldr	r2, [r1, #0]
 8006f5e:	4614      	mov	r4, r2
 8006f60:	b99c      	cbnz	r4, 8006f8a <_malloc_r+0x56>
 8006f62:	4f20      	ldr	r7, [pc, #128]	; (8006fe4 <_malloc_r+0xb0>)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	b923      	cbnz	r3, 8006f72 <_malloc_r+0x3e>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 ff84 	bl	8007e78 <_sbrk_r>
 8006f70:	6038      	str	r0, [r7, #0]
 8006f72:	4629      	mov	r1, r5
 8006f74:	4630      	mov	r0, r6
 8006f76:	f000 ff7f 	bl	8007e78 <_sbrk_r>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d123      	bne.n	8006fc6 <_malloc_r+0x92>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	4630      	mov	r0, r6
 8006f84:	f003 fb8a 	bl	800a69c <__malloc_unlock>
 8006f88:	e7e3      	b.n	8006f52 <_malloc_r+0x1e>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	1b5b      	subs	r3, r3, r5
 8006f8e:	d417      	bmi.n	8006fc0 <_malloc_r+0x8c>
 8006f90:	2b0b      	cmp	r3, #11
 8006f92:	d903      	bls.n	8006f9c <_malloc_r+0x68>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	441c      	add	r4, r3
 8006f98:	6025      	str	r5, [r4, #0]
 8006f9a:	e004      	b.n	8006fa6 <_malloc_r+0x72>
 8006f9c:	6863      	ldr	r3, [r4, #4]
 8006f9e:	42a2      	cmp	r2, r4
 8006fa0:	bf0c      	ite	eq
 8006fa2:	600b      	streq	r3, [r1, #0]
 8006fa4:	6053      	strne	r3, [r2, #4]
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f003 fb78 	bl	800a69c <__malloc_unlock>
 8006fac:	f104 000b 	add.w	r0, r4, #11
 8006fb0:	1d23      	adds	r3, r4, #4
 8006fb2:	f020 0007 	bic.w	r0, r0, #7
 8006fb6:	1ac2      	subs	r2, r0, r3
 8006fb8:	d0cc      	beq.n	8006f54 <_malloc_r+0x20>
 8006fba:	1a1b      	subs	r3, r3, r0
 8006fbc:	50a3      	str	r3, [r4, r2]
 8006fbe:	e7c9      	b.n	8006f54 <_malloc_r+0x20>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	6864      	ldr	r4, [r4, #4]
 8006fc4:	e7cc      	b.n	8006f60 <_malloc_r+0x2c>
 8006fc6:	1cc4      	adds	r4, r0, #3
 8006fc8:	f024 0403 	bic.w	r4, r4, #3
 8006fcc:	42a0      	cmp	r0, r4
 8006fce:	d0e3      	beq.n	8006f98 <_malloc_r+0x64>
 8006fd0:	1a21      	subs	r1, r4, r0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 ff50 	bl	8007e78 <_sbrk_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d1dd      	bne.n	8006f98 <_malloc_r+0x64>
 8006fdc:	e7cf      	b.n	8006f7e <_malloc_r+0x4a>
 8006fde:	bf00      	nop
 8006fe0:	20000210 	.word	0x20000210
 8006fe4:	20000214 	.word	0x20000214

08006fe8 <__cvt>:
 8006fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	ec55 4b10 	vmov	r4, r5, d0
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	bfbb      	ittet	lt
 8006ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ffe:	461d      	movlt	r5, r3
 8007000:	2300      	movge	r3, #0
 8007002:	232d      	movlt	r3, #45	; 0x2d
 8007004:	700b      	strb	r3, [r1, #0]
 8007006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800700c:	4691      	mov	r9, r2
 800700e:	f023 0820 	bic.w	r8, r3, #32
 8007012:	bfbc      	itt	lt
 8007014:	4622      	movlt	r2, r4
 8007016:	4614      	movlt	r4, r2
 8007018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800701c:	d005      	beq.n	800702a <__cvt+0x42>
 800701e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007022:	d100      	bne.n	8007026 <__cvt+0x3e>
 8007024:	3601      	adds	r6, #1
 8007026:	2102      	movs	r1, #2
 8007028:	e000      	b.n	800702c <__cvt+0x44>
 800702a:	2103      	movs	r1, #3
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	ab02      	add	r3, sp, #8
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	ec45 4b10 	vmov	d0, r4, r5
 8007038:	4653      	mov	r3, sl
 800703a:	4632      	mov	r2, r6
 800703c:	f001 ff70 	bl	8008f20 <_dtoa_r>
 8007040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007044:	4607      	mov	r7, r0
 8007046:	d102      	bne.n	800704e <__cvt+0x66>
 8007048:	f019 0f01 	tst.w	r9, #1
 800704c:	d022      	beq.n	8007094 <__cvt+0xac>
 800704e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007052:	eb07 0906 	add.w	r9, r7, r6
 8007056:	d110      	bne.n	800707a <__cvt+0x92>
 8007058:	783b      	ldrb	r3, [r7, #0]
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d10a      	bne.n	8007074 <__cvt+0x8c>
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800706a:	b918      	cbnz	r0, 8007074 <__cvt+0x8c>
 800706c:	f1c6 0601 	rsb	r6, r6, #1
 8007070:	f8ca 6000 	str.w	r6, [sl]
 8007074:	f8da 3000 	ldr.w	r3, [sl]
 8007078:	4499      	add	r9, r3
 800707a:	2200      	movs	r2, #0
 800707c:	2300      	movs	r3, #0
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 8007086:	b108      	cbz	r0, 800708c <__cvt+0xa4>
 8007088:	f8cd 900c 	str.w	r9, [sp, #12]
 800708c:	2230      	movs	r2, #48	; 0x30
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	454b      	cmp	r3, r9
 8007092:	d307      	bcc.n	80070a4 <__cvt+0xbc>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007098:	1bdb      	subs	r3, r3, r7
 800709a:	4638      	mov	r0, r7
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	b004      	add	sp, #16
 80070a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a4:	1c59      	adds	r1, r3, #1
 80070a6:	9103      	str	r1, [sp, #12]
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e7f0      	b.n	800708e <__cvt+0xa6>

080070ac <__exponent>:
 80070ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ae:	4603      	mov	r3, r0
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfb8      	it	lt
 80070b4:	4249      	neglt	r1, r1
 80070b6:	f803 2b02 	strb.w	r2, [r3], #2
 80070ba:	bfb4      	ite	lt
 80070bc:	222d      	movlt	r2, #45	; 0x2d
 80070be:	222b      	movge	r2, #43	; 0x2b
 80070c0:	2909      	cmp	r1, #9
 80070c2:	7042      	strb	r2, [r0, #1]
 80070c4:	dd2a      	ble.n	800711c <__exponent+0x70>
 80070c6:	f10d 0407 	add.w	r4, sp, #7
 80070ca:	46a4      	mov	ip, r4
 80070cc:	270a      	movs	r7, #10
 80070ce:	46a6      	mov	lr, r4
 80070d0:	460a      	mov	r2, r1
 80070d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80070d6:	fb07 1516 	mls	r5, r7, r6, r1
 80070da:	3530      	adds	r5, #48	; 0x30
 80070dc:	2a63      	cmp	r2, #99	; 0x63
 80070de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80070e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070e6:	4631      	mov	r1, r6
 80070e8:	dcf1      	bgt.n	80070ce <__exponent+0x22>
 80070ea:	3130      	adds	r1, #48	; 0x30
 80070ec:	f1ae 0502 	sub.w	r5, lr, #2
 80070f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070f4:	1c44      	adds	r4, r0, #1
 80070f6:	4629      	mov	r1, r5
 80070f8:	4561      	cmp	r1, ip
 80070fa:	d30a      	bcc.n	8007112 <__exponent+0x66>
 80070fc:	f10d 0209 	add.w	r2, sp, #9
 8007100:	eba2 020e 	sub.w	r2, r2, lr
 8007104:	4565      	cmp	r5, ip
 8007106:	bf88      	it	hi
 8007108:	2200      	movhi	r2, #0
 800710a:	4413      	add	r3, r2
 800710c:	1a18      	subs	r0, r3, r0
 800710e:	b003      	add	sp, #12
 8007110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007116:	f804 2f01 	strb.w	r2, [r4, #1]!
 800711a:	e7ed      	b.n	80070f8 <__exponent+0x4c>
 800711c:	2330      	movs	r3, #48	; 0x30
 800711e:	3130      	adds	r1, #48	; 0x30
 8007120:	7083      	strb	r3, [r0, #2]
 8007122:	70c1      	strb	r1, [r0, #3]
 8007124:	1d03      	adds	r3, r0, #4
 8007126:	e7f1      	b.n	800710c <__exponent+0x60>

08007128 <_printf_float>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	ed2d 8b02 	vpush	{d8}
 8007130:	b08d      	sub	sp, #52	; 0x34
 8007132:	460c      	mov	r4, r1
 8007134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007138:	4616      	mov	r6, r2
 800713a:	461f      	mov	r7, r3
 800713c:	4605      	mov	r5, r0
 800713e:	f003 fa13 	bl	800a568 <_localeconv_r>
 8007142:	f8d0 a000 	ldr.w	sl, [r0]
 8007146:	4650      	mov	r0, sl
 8007148:	f7f9 f85c 	bl	8000204 <strlen>
 800714c:	2300      	movs	r3, #0
 800714e:	930a      	str	r3, [sp, #40]	; 0x28
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	f8d8 3000 	ldr.w	r3, [r8]
 8007158:	f894 b018 	ldrb.w	fp, [r4, #24]
 800715c:	3307      	adds	r3, #7
 800715e:	f023 0307 	bic.w	r3, r3, #7
 8007162:	f103 0208 	add.w	r2, r3, #8
 8007166:	f8c8 2000 	str.w	r2, [r8]
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007172:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800717a:	9307      	str	r3, [sp, #28]
 800717c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007180:	ee08 0a10 	vmov	s16, r0
 8007184:	4b9f      	ldr	r3, [pc, #636]	; (8007404 <_printf_float+0x2dc>)
 8007186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800718e:	f7f9 fced 	bl	8000b6c <__aeabi_dcmpun>
 8007192:	bb88      	cbnz	r0, 80071f8 <_printf_float+0xd0>
 8007194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007198:	4b9a      	ldr	r3, [pc, #616]	; (8007404 <_printf_float+0x2dc>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800719e:	f7f9 fcc7 	bl	8000b30 <__aeabi_dcmple>
 80071a2:	bb48      	cbnz	r0, 80071f8 <_printf_float+0xd0>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4640      	mov	r0, r8
 80071aa:	4649      	mov	r1, r9
 80071ac:	f7f9 fcb6 	bl	8000b1c <__aeabi_dcmplt>
 80071b0:	b110      	cbz	r0, 80071b8 <_printf_float+0x90>
 80071b2:	232d      	movs	r3, #45	; 0x2d
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b8:	4b93      	ldr	r3, [pc, #588]	; (8007408 <_printf_float+0x2e0>)
 80071ba:	4894      	ldr	r0, [pc, #592]	; (800740c <_printf_float+0x2e4>)
 80071bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071c0:	bf94      	ite	ls
 80071c2:	4698      	movls	r8, r3
 80071c4:	4680      	movhi	r8, r0
 80071c6:	2303      	movs	r3, #3
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	9b05      	ldr	r3, [sp, #20]
 80071cc:	f023 0204 	bic.w	r2, r3, #4
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	f04f 0900 	mov.w	r9, #0
 80071d6:	9700      	str	r7, [sp, #0]
 80071d8:	4633      	mov	r3, r6
 80071da:	aa0b      	add	r2, sp, #44	; 0x2c
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f9d8 	bl	8007594 <_printf_common>
 80071e4:	3001      	adds	r0, #1
 80071e6:	f040 8090 	bne.w	800730a <_printf_float+0x1e2>
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071ee:	b00d      	add	sp, #52	; 0x34
 80071f0:	ecbd 8b02 	vpop	{d8}
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7f9 fcb4 	bl	8000b6c <__aeabi_dcmpun>
 8007204:	b140      	cbz	r0, 8007218 <_printf_float+0xf0>
 8007206:	464b      	mov	r3, r9
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfbc      	itt	lt
 800720c:	232d      	movlt	r3, #45	; 0x2d
 800720e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007212:	487f      	ldr	r0, [pc, #508]	; (8007410 <_printf_float+0x2e8>)
 8007214:	4b7f      	ldr	r3, [pc, #508]	; (8007414 <_printf_float+0x2ec>)
 8007216:	e7d1      	b.n	80071bc <_printf_float+0x94>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800721e:	9206      	str	r2, [sp, #24]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	d13f      	bne.n	80072a4 <_printf_float+0x17c>
 8007224:	2306      	movs	r3, #6
 8007226:	6063      	str	r3, [r4, #4]
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	6861      	ldr	r1, [r4, #4]
 800722c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007230:	2300      	movs	r3, #0
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	ab0a      	add	r3, sp, #40	; 0x28
 8007236:	e9cd b301 	strd	fp, r3, [sp, #4]
 800723a:	ab09      	add	r3, sp, #36	; 0x24
 800723c:	ec49 8b10 	vmov	d0, r8, r9
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007248:	4628      	mov	r0, r5
 800724a:	f7ff fecd 	bl	8006fe8 <__cvt>
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007252:	2b47      	cmp	r3, #71	; 0x47
 8007254:	4680      	mov	r8, r0
 8007256:	d108      	bne.n	800726a <_printf_float+0x142>
 8007258:	1cc8      	adds	r0, r1, #3
 800725a:	db02      	blt.n	8007262 <_printf_float+0x13a>
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	4299      	cmp	r1, r3
 8007260:	dd41      	ble.n	80072e6 <_printf_float+0x1be>
 8007262:	f1ab 0b02 	sub.w	fp, fp, #2
 8007266:	fa5f fb8b 	uxtb.w	fp, fp
 800726a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800726e:	d820      	bhi.n	80072b2 <_printf_float+0x18a>
 8007270:	3901      	subs	r1, #1
 8007272:	465a      	mov	r2, fp
 8007274:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007278:	9109      	str	r1, [sp, #36]	; 0x24
 800727a:	f7ff ff17 	bl	80070ac <__exponent>
 800727e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007280:	1813      	adds	r3, r2, r0
 8007282:	2a01      	cmp	r2, #1
 8007284:	4681      	mov	r9, r0
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	dc02      	bgt.n	8007290 <_printf_float+0x168>
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	07d2      	lsls	r2, r2, #31
 800728e:	d501      	bpl.n	8007294 <_printf_float+0x16c>
 8007290:	3301      	adds	r3, #1
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007298:	2b00      	cmp	r3, #0
 800729a:	d09c      	beq.n	80071d6 <_printf_float+0xae>
 800729c:	232d      	movs	r3, #45	; 0x2d
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	e798      	b.n	80071d6 <_printf_float+0xae>
 80072a4:	9a06      	ldr	r2, [sp, #24]
 80072a6:	2a47      	cmp	r2, #71	; 0x47
 80072a8:	d1be      	bne.n	8007228 <_printf_float+0x100>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1bc      	bne.n	8007228 <_printf_float+0x100>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e7b9      	b.n	8007226 <_printf_float+0xfe>
 80072b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072b6:	d118      	bne.n	80072ea <_printf_float+0x1c2>
 80072b8:	2900      	cmp	r1, #0
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	dd0b      	ble.n	80072d6 <_printf_float+0x1ae>
 80072be:	6121      	str	r1, [r4, #16]
 80072c0:	b913      	cbnz	r3, 80072c8 <_printf_float+0x1a0>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	07d0      	lsls	r0, r2, #31
 80072c6:	d502      	bpl.n	80072ce <_printf_float+0x1a6>
 80072c8:	3301      	adds	r3, #1
 80072ca:	440b      	add	r3, r1
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	e7de      	b.n	8007294 <_printf_float+0x16c>
 80072d6:	b913      	cbnz	r3, 80072de <_printf_float+0x1b6>
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	07d2      	lsls	r2, r2, #31
 80072dc:	d501      	bpl.n	80072e2 <_printf_float+0x1ba>
 80072de:	3302      	adds	r3, #2
 80072e0:	e7f4      	b.n	80072cc <_printf_float+0x1a4>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e7f2      	b.n	80072cc <_printf_float+0x1a4>
 80072e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ec:	4299      	cmp	r1, r3
 80072ee:	db05      	blt.n	80072fc <_printf_float+0x1d4>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	6121      	str	r1, [r4, #16]
 80072f4:	07d8      	lsls	r0, r3, #31
 80072f6:	d5ea      	bpl.n	80072ce <_printf_float+0x1a6>
 80072f8:	1c4b      	adds	r3, r1, #1
 80072fa:	e7e7      	b.n	80072cc <_printf_float+0x1a4>
 80072fc:	2900      	cmp	r1, #0
 80072fe:	bfd4      	ite	le
 8007300:	f1c1 0202 	rsble	r2, r1, #2
 8007304:	2201      	movgt	r2, #1
 8007306:	4413      	add	r3, r2
 8007308:	e7e0      	b.n	80072cc <_printf_float+0x1a4>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	055a      	lsls	r2, r3, #21
 800730e:	d407      	bmi.n	8007320 <_printf_float+0x1f8>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	4642      	mov	r2, r8
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d12c      	bne.n	8007378 <_printf_float+0x250>
 800731e:	e764      	b.n	80071ea <_printf_float+0xc2>
 8007320:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007324:	f240 80e0 	bls.w	80074e8 <_printf_float+0x3c0>
 8007328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	f7f9 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 8007334:	2800      	cmp	r0, #0
 8007336:	d034      	beq.n	80073a2 <_printf_float+0x27a>
 8007338:	4a37      	ldr	r2, [pc, #220]	; (8007418 <_printf_float+0x2f0>)
 800733a:	2301      	movs	r3, #1
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f af51 	beq.w	80071ea <_printf_float+0xc2>
 8007348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800734c:	429a      	cmp	r2, r3
 800734e:	db02      	blt.n	8007356 <_printf_float+0x22e>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	07d8      	lsls	r0, r3, #31
 8007354:	d510      	bpl.n	8007378 <_printf_float+0x250>
 8007356:	ee18 3a10 	vmov	r3, s16
 800735a:	4652      	mov	r2, sl
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f af41 	beq.w	80071ea <_printf_float+0xc2>
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	f104 091a 	add.w	r9, r4, #26
 8007370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007372:	3b01      	subs	r3, #1
 8007374:	4543      	cmp	r3, r8
 8007376:	dc09      	bgt.n	800738c <_printf_float+0x264>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	f100 8105 	bmi.w	800758a <_printf_float+0x462>
 8007380:	68e0      	ldr	r0, [r4, #12]
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	4298      	cmp	r0, r3
 8007386:	bfb8      	it	lt
 8007388:	4618      	movlt	r0, r3
 800738a:	e730      	b.n	80071ee <_printf_float+0xc6>
 800738c:	2301      	movs	r3, #1
 800738e:	464a      	mov	r2, r9
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f af27 	beq.w	80071ea <_printf_float+0xc2>
 800739c:	f108 0801 	add.w	r8, r8, #1
 80073a0:	e7e6      	b.n	8007370 <_printf_float+0x248>
 80073a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dc39      	bgt.n	800741c <_printf_float+0x2f4>
 80073a8:	4a1b      	ldr	r2, [pc, #108]	; (8007418 <_printf_float+0x2f0>)
 80073aa:	2301      	movs	r3, #1
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af19 	beq.w	80071ea <_printf_float+0xc2>
 80073b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073bc:	4313      	orrs	r3, r2
 80073be:	d102      	bne.n	80073c6 <_printf_float+0x29e>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07d9      	lsls	r1, r3, #31
 80073c4:	d5d8      	bpl.n	8007378 <_printf_float+0x250>
 80073c6:	ee18 3a10 	vmov	r3, s16
 80073ca:	4652      	mov	r2, sl
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af09 	beq.w	80071ea <_printf_float+0xc2>
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	f104 0a1a 	add.w	sl, r4, #26
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	425b      	negs	r3, r3
 80073e4:	454b      	cmp	r3, r9
 80073e6:	dc01      	bgt.n	80073ec <_printf_float+0x2c4>
 80073e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ea:	e792      	b.n	8007312 <_printf_float+0x1ea>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f aef7 	beq.w	80071ea <_printf_float+0xc2>
 80073fc:	f109 0901 	add.w	r9, r9, #1
 8007400:	e7ee      	b.n	80073e0 <_printf_float+0x2b8>
 8007402:	bf00      	nop
 8007404:	7fefffff 	.word	0x7fefffff
 8007408:	0800bb24 	.word	0x0800bb24
 800740c:	0800bb28 	.word	0x0800bb28
 8007410:	0800bb30 	.word	0x0800bb30
 8007414:	0800bb2c 	.word	0x0800bb2c
 8007418:	0800bb34 	.word	0x0800bb34
 800741c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007420:	429a      	cmp	r2, r3
 8007422:	bfa8      	it	ge
 8007424:	461a      	movge	r2, r3
 8007426:	2a00      	cmp	r2, #0
 8007428:	4691      	mov	r9, r2
 800742a:	dc37      	bgt.n	800749c <_printf_float+0x374>
 800742c:	f04f 0b00 	mov.w	fp, #0
 8007430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007434:	f104 021a 	add.w	r2, r4, #26
 8007438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	eba3 0309 	sub.w	r3, r3, r9
 8007440:	455b      	cmp	r3, fp
 8007442:	dc33      	bgt.n	80074ac <_printf_float+0x384>
 8007444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007448:	429a      	cmp	r2, r3
 800744a:	db3b      	blt.n	80074c4 <_printf_float+0x39c>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d438      	bmi.n	80074c4 <_printf_float+0x39c>
 8007452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007454:	9b05      	ldr	r3, [sp, #20]
 8007456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	eba2 0901 	sub.w	r9, r2, r1
 800745e:	4599      	cmp	r9, r3
 8007460:	bfa8      	it	ge
 8007462:	4699      	movge	r9, r3
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	dc35      	bgt.n	80074d6 <_printf_float+0x3ae>
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007472:	f104 0a1a 	add.w	sl, r4, #26
 8007476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	eba3 0309 	sub.w	r3, r3, r9
 8007480:	4543      	cmp	r3, r8
 8007482:	f77f af79 	ble.w	8007378 <_printf_float+0x250>
 8007486:	2301      	movs	r3, #1
 8007488:	4652      	mov	r2, sl
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f aeaa 	beq.w	80071ea <_printf_float+0xc2>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	e7ec      	b.n	8007476 <_printf_float+0x34e>
 800749c:	4613      	mov	r3, r2
 800749e:	4631      	mov	r1, r6
 80074a0:	4642      	mov	r2, r8
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	d1c0      	bne.n	800742c <_printf_float+0x304>
 80074aa:	e69e      	b.n	80071ea <_printf_float+0xc2>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	9205      	str	r2, [sp, #20]
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f ae97 	beq.w	80071ea <_printf_float+0xc2>
 80074bc:	9a05      	ldr	r2, [sp, #20]
 80074be:	f10b 0b01 	add.w	fp, fp, #1
 80074c2:	e7b9      	b.n	8007438 <_printf_float+0x310>
 80074c4:	ee18 3a10 	vmov	r3, s16
 80074c8:	4652      	mov	r2, sl
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	d1be      	bne.n	8007452 <_printf_float+0x32a>
 80074d4:	e689      	b.n	80071ea <_printf_float+0xc2>
 80074d6:	9a05      	ldr	r2, [sp, #20]
 80074d8:	464b      	mov	r3, r9
 80074da:	4442      	add	r2, r8
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	d1c1      	bne.n	800746a <_printf_float+0x342>
 80074e6:	e680      	b.n	80071ea <_printf_float+0xc2>
 80074e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	dc01      	bgt.n	80074f2 <_printf_float+0x3ca>
 80074ee:	07db      	lsls	r3, r3, #31
 80074f0:	d538      	bpl.n	8007564 <_printf_float+0x43c>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f ae74 	beq.w	80071ea <_printf_float+0xc2>
 8007502:	ee18 3a10 	vmov	r3, s16
 8007506:	4652      	mov	r2, sl
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	f43f ae6b 	beq.w	80071ea <_printf_float+0xc2>
 8007514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007518:	2200      	movs	r2, #0
 800751a:	2300      	movs	r3, #0
 800751c:	f7f9 faf4 	bl	8000b08 <__aeabi_dcmpeq>
 8007520:	b9d8      	cbnz	r0, 800755a <_printf_float+0x432>
 8007522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007524:	f108 0201 	add.w	r2, r8, #1
 8007528:	3b01      	subs	r3, #1
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	d10e      	bne.n	8007552 <_printf_float+0x42a>
 8007534:	e659      	b.n	80071ea <_printf_float+0xc2>
 8007536:	2301      	movs	r3, #1
 8007538:	4652      	mov	r2, sl
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f ae52 	beq.w	80071ea <_printf_float+0xc2>
 8007546:	f108 0801 	add.w	r8, r8, #1
 800754a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754c:	3b01      	subs	r3, #1
 800754e:	4543      	cmp	r3, r8
 8007550:	dcf1      	bgt.n	8007536 <_printf_float+0x40e>
 8007552:	464b      	mov	r3, r9
 8007554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007558:	e6dc      	b.n	8007314 <_printf_float+0x1ec>
 800755a:	f04f 0800 	mov.w	r8, #0
 800755e:	f104 0a1a 	add.w	sl, r4, #26
 8007562:	e7f2      	b.n	800754a <_printf_float+0x422>
 8007564:	2301      	movs	r3, #1
 8007566:	4642      	mov	r2, r8
 8007568:	e7df      	b.n	800752a <_printf_float+0x402>
 800756a:	2301      	movs	r3, #1
 800756c:	464a      	mov	r2, r9
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae38 	beq.w	80071ea <_printf_float+0xc2>
 800757a:	f108 0801 	add.w	r8, r8, #1
 800757e:	68e3      	ldr	r3, [r4, #12]
 8007580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007582:	1a5b      	subs	r3, r3, r1
 8007584:	4543      	cmp	r3, r8
 8007586:	dcf0      	bgt.n	800756a <_printf_float+0x442>
 8007588:	e6fa      	b.n	8007380 <_printf_float+0x258>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f104 0919 	add.w	r9, r4, #25
 8007592:	e7f4      	b.n	800757e <_printf_float+0x456>

08007594 <_printf_common>:
 8007594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	4616      	mov	r6, r2
 800759a:	4699      	mov	r9, r3
 800759c:	688a      	ldr	r2, [r1, #8]
 800759e:	690b      	ldr	r3, [r1, #16]
 80075a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	bfb8      	it	lt
 80075a8:	4613      	movlt	r3, r2
 80075aa:	6033      	str	r3, [r6, #0]
 80075ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b0:	4607      	mov	r7, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b10a      	cbz	r2, 80075ba <_printf_common+0x26>
 80075b6:	3301      	adds	r3, #1
 80075b8:	6033      	str	r3, [r6, #0]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	0699      	lsls	r1, r3, #26
 80075be:	bf42      	ittt	mi
 80075c0:	6833      	ldrmi	r3, [r6, #0]
 80075c2:	3302      	addmi	r3, #2
 80075c4:	6033      	strmi	r3, [r6, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	f015 0506 	ands.w	r5, r5, #6
 80075cc:	d106      	bne.n	80075dc <_printf_common+0x48>
 80075ce:	f104 0a19 	add.w	sl, r4, #25
 80075d2:	68e3      	ldr	r3, [r4, #12]
 80075d4:	6832      	ldr	r2, [r6, #0]
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	42ab      	cmp	r3, r5
 80075da:	dc26      	bgt.n	800762a <_printf_common+0x96>
 80075dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075e0:	1e13      	subs	r3, r2, #0
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	bf18      	it	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	0692      	lsls	r2, r2, #26
 80075ea:	d42b      	bmi.n	8007644 <_printf_common+0xb0>
 80075ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075f0:	4649      	mov	r1, r9
 80075f2:	4638      	mov	r0, r7
 80075f4:	47c0      	blx	r8
 80075f6:	3001      	adds	r0, #1
 80075f8:	d01e      	beq.n	8007638 <_printf_common+0xa4>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	68e5      	ldr	r5, [r4, #12]
 80075fe:	6832      	ldr	r2, [r6, #0]
 8007600:	f003 0306 	and.w	r3, r3, #6
 8007604:	2b04      	cmp	r3, #4
 8007606:	bf08      	it	eq
 8007608:	1aad      	subeq	r5, r5, r2
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	6922      	ldr	r2, [r4, #16]
 800760e:	bf0c      	ite	eq
 8007610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007614:	2500      	movne	r5, #0
 8007616:	4293      	cmp	r3, r2
 8007618:	bfc4      	itt	gt
 800761a:	1a9b      	subgt	r3, r3, r2
 800761c:	18ed      	addgt	r5, r5, r3
 800761e:	2600      	movs	r6, #0
 8007620:	341a      	adds	r4, #26
 8007622:	42b5      	cmp	r5, r6
 8007624:	d11a      	bne.n	800765c <_printf_common+0xc8>
 8007626:	2000      	movs	r0, #0
 8007628:	e008      	b.n	800763c <_printf_common+0xa8>
 800762a:	2301      	movs	r3, #1
 800762c:	4652      	mov	r2, sl
 800762e:	4649      	mov	r1, r9
 8007630:	4638      	mov	r0, r7
 8007632:	47c0      	blx	r8
 8007634:	3001      	adds	r0, #1
 8007636:	d103      	bne.n	8007640 <_printf_common+0xac>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007640:	3501      	adds	r5, #1
 8007642:	e7c6      	b.n	80075d2 <_printf_common+0x3e>
 8007644:	18e1      	adds	r1, r4, r3
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	2030      	movs	r0, #48	; 0x30
 800764a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800764e:	4422      	add	r2, r4
 8007650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007658:	3302      	adds	r3, #2
 800765a:	e7c7      	b.n	80075ec <_printf_common+0x58>
 800765c:	2301      	movs	r3, #1
 800765e:	4622      	mov	r2, r4
 8007660:	4649      	mov	r1, r9
 8007662:	4638      	mov	r0, r7
 8007664:	47c0      	blx	r8
 8007666:	3001      	adds	r0, #1
 8007668:	d0e6      	beq.n	8007638 <_printf_common+0xa4>
 800766a:	3601      	adds	r6, #1
 800766c:	e7d9      	b.n	8007622 <_printf_common+0x8e>
	...

08007670 <_printf_i>:
 8007670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	460c      	mov	r4, r1
 8007676:	4691      	mov	r9, r2
 8007678:	7e27      	ldrb	r7, [r4, #24]
 800767a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800767c:	2f78      	cmp	r7, #120	; 0x78
 800767e:	4680      	mov	r8, r0
 8007680:	469a      	mov	sl, r3
 8007682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007686:	d807      	bhi.n	8007698 <_printf_i+0x28>
 8007688:	2f62      	cmp	r7, #98	; 0x62
 800768a:	d80a      	bhi.n	80076a2 <_printf_i+0x32>
 800768c:	2f00      	cmp	r7, #0
 800768e:	f000 80d8 	beq.w	8007842 <_printf_i+0x1d2>
 8007692:	2f58      	cmp	r7, #88	; 0x58
 8007694:	f000 80a3 	beq.w	80077de <_printf_i+0x16e>
 8007698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800769c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076a0:	e03a      	b.n	8007718 <_printf_i+0xa8>
 80076a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076a6:	2b15      	cmp	r3, #21
 80076a8:	d8f6      	bhi.n	8007698 <_printf_i+0x28>
 80076aa:	a001      	add	r0, pc, #4	; (adr r0, 80076b0 <_printf_i+0x40>)
 80076ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80076b0:	08007709 	.word	0x08007709
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	08007699 	.word	0x08007699
 80076bc:	08007699 	.word	0x08007699
 80076c0:	08007699 	.word	0x08007699
 80076c4:	08007699 	.word	0x08007699
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007699 	.word	0x08007699
 80076d0:	08007699 	.word	0x08007699
 80076d4:	08007699 	.word	0x08007699
 80076d8:	08007699 	.word	0x08007699
 80076dc:	08007829 	.word	0x08007829
 80076e0:	0800774d 	.word	0x0800774d
 80076e4:	0800780b 	.word	0x0800780b
 80076e8:	08007699 	.word	0x08007699
 80076ec:	08007699 	.word	0x08007699
 80076f0:	0800784b 	.word	0x0800784b
 80076f4:	08007699 	.word	0x08007699
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	08007699 	.word	0x08007699
 8007700:	08007699 	.word	0x08007699
 8007704:	08007813 	.word	0x08007813
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	600a      	str	r2, [r1, #0]
 8007710:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007718:	2301      	movs	r3, #1
 800771a:	e0a3      	b.n	8007864 <_printf_i+0x1f4>
 800771c:	6825      	ldr	r5, [r4, #0]
 800771e:	6808      	ldr	r0, [r1, #0]
 8007720:	062e      	lsls	r6, r5, #24
 8007722:	f100 0304 	add.w	r3, r0, #4
 8007726:	d50a      	bpl.n	800773e <_printf_i+0xce>
 8007728:	6805      	ldr	r5, [r0, #0]
 800772a:	600b      	str	r3, [r1, #0]
 800772c:	2d00      	cmp	r5, #0
 800772e:	da03      	bge.n	8007738 <_printf_i+0xc8>
 8007730:	232d      	movs	r3, #45	; 0x2d
 8007732:	426d      	negs	r5, r5
 8007734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007738:	485e      	ldr	r0, [pc, #376]	; (80078b4 <_printf_i+0x244>)
 800773a:	230a      	movs	r3, #10
 800773c:	e019      	b.n	8007772 <_printf_i+0x102>
 800773e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007742:	6805      	ldr	r5, [r0, #0]
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	bf18      	it	ne
 8007748:	b22d      	sxthne	r5, r5
 800774a:	e7ef      	b.n	800772c <_printf_i+0xbc>
 800774c:	680b      	ldr	r3, [r1, #0]
 800774e:	6825      	ldr	r5, [r4, #0]
 8007750:	1d18      	adds	r0, r3, #4
 8007752:	6008      	str	r0, [r1, #0]
 8007754:	0628      	lsls	r0, r5, #24
 8007756:	d501      	bpl.n	800775c <_printf_i+0xec>
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	e002      	b.n	8007762 <_printf_i+0xf2>
 800775c:	0669      	lsls	r1, r5, #25
 800775e:	d5fb      	bpl.n	8007758 <_printf_i+0xe8>
 8007760:	881d      	ldrh	r5, [r3, #0]
 8007762:	4854      	ldr	r0, [pc, #336]	; (80078b4 <_printf_i+0x244>)
 8007764:	2f6f      	cmp	r7, #111	; 0x6f
 8007766:	bf0c      	ite	eq
 8007768:	2308      	moveq	r3, #8
 800776a:	230a      	movne	r3, #10
 800776c:	2100      	movs	r1, #0
 800776e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007772:	6866      	ldr	r6, [r4, #4]
 8007774:	60a6      	str	r6, [r4, #8]
 8007776:	2e00      	cmp	r6, #0
 8007778:	bfa2      	ittt	ge
 800777a:	6821      	ldrge	r1, [r4, #0]
 800777c:	f021 0104 	bicge.w	r1, r1, #4
 8007780:	6021      	strge	r1, [r4, #0]
 8007782:	b90d      	cbnz	r5, 8007788 <_printf_i+0x118>
 8007784:	2e00      	cmp	r6, #0
 8007786:	d04d      	beq.n	8007824 <_printf_i+0x1b4>
 8007788:	4616      	mov	r6, r2
 800778a:	fbb5 f1f3 	udiv	r1, r5, r3
 800778e:	fb03 5711 	mls	r7, r3, r1, r5
 8007792:	5dc7      	ldrb	r7, [r0, r7]
 8007794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007798:	462f      	mov	r7, r5
 800779a:	42bb      	cmp	r3, r7
 800779c:	460d      	mov	r5, r1
 800779e:	d9f4      	bls.n	800778a <_printf_i+0x11a>
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10b      	bne.n	80077bc <_printf_i+0x14c>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	d508      	bpl.n	80077bc <_printf_i+0x14c>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bfde      	ittt	le
 80077b2:	2330      	movle	r3, #48	; 0x30
 80077b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80077bc:	1b92      	subs	r2, r2, r6
 80077be:	6122      	str	r2, [r4, #16]
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	464b      	mov	r3, r9
 80077c6:	aa03      	add	r2, sp, #12
 80077c8:	4621      	mov	r1, r4
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fee2 	bl	8007594 <_printf_common>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d14c      	bne.n	800786e <_printf_i+0x1fe>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077d8:	b004      	add	sp, #16
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	4835      	ldr	r0, [pc, #212]	; (80078b4 <_printf_i+0x244>)
 80077e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	680e      	ldr	r6, [r1, #0]
 80077e8:	061f      	lsls	r7, r3, #24
 80077ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80077ee:	600e      	str	r6, [r1, #0]
 80077f0:	d514      	bpl.n	800781c <_printf_i+0x1ac>
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	bf44      	itt	mi
 80077f6:	f043 0320 	orrmi.w	r3, r3, #32
 80077fa:	6023      	strmi	r3, [r4, #0]
 80077fc:	b91d      	cbnz	r5, 8007806 <_printf_i+0x196>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	f023 0320 	bic.w	r3, r3, #32
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	2310      	movs	r3, #16
 8007808:	e7b0      	b.n	800776c <_printf_i+0xfc>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	f043 0320 	orr.w	r3, r3, #32
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	2378      	movs	r3, #120	; 0x78
 8007814:	4828      	ldr	r0, [pc, #160]	; (80078b8 <_printf_i+0x248>)
 8007816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800781a:	e7e3      	b.n	80077e4 <_printf_i+0x174>
 800781c:	065e      	lsls	r6, r3, #25
 800781e:	bf48      	it	mi
 8007820:	b2ad      	uxthmi	r5, r5
 8007822:	e7e6      	b.n	80077f2 <_printf_i+0x182>
 8007824:	4616      	mov	r6, r2
 8007826:	e7bb      	b.n	80077a0 <_printf_i+0x130>
 8007828:	680b      	ldr	r3, [r1, #0]
 800782a:	6826      	ldr	r6, [r4, #0]
 800782c:	6960      	ldr	r0, [r4, #20]
 800782e:	1d1d      	adds	r5, r3, #4
 8007830:	600d      	str	r5, [r1, #0]
 8007832:	0635      	lsls	r5, r6, #24
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	d501      	bpl.n	800783c <_printf_i+0x1cc>
 8007838:	6018      	str	r0, [r3, #0]
 800783a:	e002      	b.n	8007842 <_printf_i+0x1d2>
 800783c:	0671      	lsls	r1, r6, #25
 800783e:	d5fb      	bpl.n	8007838 <_printf_i+0x1c8>
 8007840:	8018      	strh	r0, [r3, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	4616      	mov	r6, r2
 8007848:	e7ba      	b.n	80077c0 <_printf_i+0x150>
 800784a:	680b      	ldr	r3, [r1, #0]
 800784c:	1d1a      	adds	r2, r3, #4
 800784e:	600a      	str	r2, [r1, #0]
 8007850:	681e      	ldr	r6, [r3, #0]
 8007852:	6862      	ldr	r2, [r4, #4]
 8007854:	2100      	movs	r1, #0
 8007856:	4630      	mov	r0, r6
 8007858:	f7f8 fce2 	bl	8000220 <memchr>
 800785c:	b108      	cbz	r0, 8007862 <_printf_i+0x1f2>
 800785e:	1b80      	subs	r0, r0, r6
 8007860:	6060      	str	r0, [r4, #4]
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	6123      	str	r3, [r4, #16]
 8007866:	2300      	movs	r3, #0
 8007868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800786c:	e7a8      	b.n	80077c0 <_printf_i+0x150>
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	4632      	mov	r2, r6
 8007872:	4649      	mov	r1, r9
 8007874:	4640      	mov	r0, r8
 8007876:	47d0      	blx	sl
 8007878:	3001      	adds	r0, #1
 800787a:	d0ab      	beq.n	80077d4 <_printf_i+0x164>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	079b      	lsls	r3, r3, #30
 8007880:	d413      	bmi.n	80078aa <_printf_i+0x23a>
 8007882:	68e0      	ldr	r0, [r4, #12]
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	4298      	cmp	r0, r3
 8007888:	bfb8      	it	lt
 800788a:	4618      	movlt	r0, r3
 800788c:	e7a4      	b.n	80077d8 <_printf_i+0x168>
 800788e:	2301      	movs	r3, #1
 8007890:	4632      	mov	r2, r6
 8007892:	4649      	mov	r1, r9
 8007894:	4640      	mov	r0, r8
 8007896:	47d0      	blx	sl
 8007898:	3001      	adds	r0, #1
 800789a:	d09b      	beq.n	80077d4 <_printf_i+0x164>
 800789c:	3501      	adds	r5, #1
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	9903      	ldr	r1, [sp, #12]
 80078a2:	1a5b      	subs	r3, r3, r1
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dcf2      	bgt.n	800788e <_printf_i+0x21e>
 80078a8:	e7eb      	b.n	8007882 <_printf_i+0x212>
 80078aa:	2500      	movs	r5, #0
 80078ac:	f104 0619 	add.w	r6, r4, #25
 80078b0:	e7f5      	b.n	800789e <_printf_i+0x22e>
 80078b2:	bf00      	nop
 80078b4:	0800bb36 	.word	0x0800bb36
 80078b8:	0800bb47 	.word	0x0800bb47

080078bc <_scanf_float>:
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	b087      	sub	sp, #28
 80078c2:	4617      	mov	r7, r2
 80078c4:	9303      	str	r3, [sp, #12]
 80078c6:	688b      	ldr	r3, [r1, #8]
 80078c8:	1e5a      	subs	r2, r3, #1
 80078ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80078ce:	bf83      	ittte	hi
 80078d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80078d4:	195b      	addhi	r3, r3, r5
 80078d6:	9302      	strhi	r3, [sp, #8]
 80078d8:	2300      	movls	r3, #0
 80078da:	bf86      	itte	hi
 80078dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80078e0:	608b      	strhi	r3, [r1, #8]
 80078e2:	9302      	strls	r3, [sp, #8]
 80078e4:	680b      	ldr	r3, [r1, #0]
 80078e6:	468b      	mov	fp, r1
 80078e8:	2500      	movs	r5, #0
 80078ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80078ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80078f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078f6:	4680      	mov	r8, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	465e      	mov	r6, fp
 80078fc:	46aa      	mov	sl, r5
 80078fe:	46a9      	mov	r9, r5
 8007900:	9501      	str	r5, [sp, #4]
 8007902:	68a2      	ldr	r2, [r4, #8]
 8007904:	b152      	cbz	r2, 800791c <_scanf_float+0x60>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b4e      	cmp	r3, #78	; 0x4e
 800790c:	d864      	bhi.n	80079d8 <_scanf_float+0x11c>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d83c      	bhi.n	800798c <_scanf_float+0xd0>
 8007912:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007916:	b2c8      	uxtb	r0, r1
 8007918:	280e      	cmp	r0, #14
 800791a:	d93a      	bls.n	8007992 <_scanf_float+0xd6>
 800791c:	f1b9 0f00 	cmp.w	r9, #0
 8007920:	d003      	beq.n	800792a <_scanf_float+0x6e>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800792e:	f1ba 0f01 	cmp.w	sl, #1
 8007932:	f200 8113 	bhi.w	8007b5c <_scanf_float+0x2a0>
 8007936:	455e      	cmp	r6, fp
 8007938:	f200 8105 	bhi.w	8007b46 <_scanf_float+0x28a>
 800793c:	2501      	movs	r5, #1
 800793e:	4628      	mov	r0, r5
 8007940:	b007      	add	sp, #28
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800794a:	2a0d      	cmp	r2, #13
 800794c:	d8e6      	bhi.n	800791c <_scanf_float+0x60>
 800794e:	a101      	add	r1, pc, #4	; (adr r1, 8007954 <_scanf_float+0x98>)
 8007950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007954:	08007a93 	.word	0x08007a93
 8007958:	0800791d 	.word	0x0800791d
 800795c:	0800791d 	.word	0x0800791d
 8007960:	0800791d 	.word	0x0800791d
 8007964:	08007af3 	.word	0x08007af3
 8007968:	08007acb 	.word	0x08007acb
 800796c:	0800791d 	.word	0x0800791d
 8007970:	0800791d 	.word	0x0800791d
 8007974:	08007aa1 	.word	0x08007aa1
 8007978:	0800791d 	.word	0x0800791d
 800797c:	0800791d 	.word	0x0800791d
 8007980:	0800791d 	.word	0x0800791d
 8007984:	0800791d 	.word	0x0800791d
 8007988:	08007a59 	.word	0x08007a59
 800798c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007990:	e7db      	b.n	800794a <_scanf_float+0x8e>
 8007992:	290e      	cmp	r1, #14
 8007994:	d8c2      	bhi.n	800791c <_scanf_float+0x60>
 8007996:	a001      	add	r0, pc, #4	; (adr r0, 800799c <_scanf_float+0xe0>)
 8007998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800799c:	08007a4b 	.word	0x08007a4b
 80079a0:	0800791d 	.word	0x0800791d
 80079a4:	08007a4b 	.word	0x08007a4b
 80079a8:	08007adf 	.word	0x08007adf
 80079ac:	0800791d 	.word	0x0800791d
 80079b0:	080079f9 	.word	0x080079f9
 80079b4:	08007a35 	.word	0x08007a35
 80079b8:	08007a35 	.word	0x08007a35
 80079bc:	08007a35 	.word	0x08007a35
 80079c0:	08007a35 	.word	0x08007a35
 80079c4:	08007a35 	.word	0x08007a35
 80079c8:	08007a35 	.word	0x08007a35
 80079cc:	08007a35 	.word	0x08007a35
 80079d0:	08007a35 	.word	0x08007a35
 80079d4:	08007a35 	.word	0x08007a35
 80079d8:	2b6e      	cmp	r3, #110	; 0x6e
 80079da:	d809      	bhi.n	80079f0 <_scanf_float+0x134>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d8b2      	bhi.n	8007946 <_scanf_float+0x8a>
 80079e0:	2b54      	cmp	r3, #84	; 0x54
 80079e2:	d077      	beq.n	8007ad4 <_scanf_float+0x218>
 80079e4:	2b59      	cmp	r3, #89	; 0x59
 80079e6:	d199      	bne.n	800791c <_scanf_float+0x60>
 80079e8:	2d07      	cmp	r5, #7
 80079ea:	d197      	bne.n	800791c <_scanf_float+0x60>
 80079ec:	2508      	movs	r5, #8
 80079ee:	e029      	b.n	8007a44 <_scanf_float+0x188>
 80079f0:	2b74      	cmp	r3, #116	; 0x74
 80079f2:	d06f      	beq.n	8007ad4 <_scanf_float+0x218>
 80079f4:	2b79      	cmp	r3, #121	; 0x79
 80079f6:	e7f6      	b.n	80079e6 <_scanf_float+0x12a>
 80079f8:	6821      	ldr	r1, [r4, #0]
 80079fa:	05c8      	lsls	r0, r1, #23
 80079fc:	d51a      	bpl.n	8007a34 <_scanf_float+0x178>
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007a04:	6021      	str	r1, [r4, #0]
 8007a06:	f109 0901 	add.w	r9, r9, #1
 8007a0a:	b11b      	cbz	r3, 8007a14 <_scanf_float+0x158>
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	3201      	adds	r2, #1
 8007a10:	9302      	str	r3, [sp, #8]
 8007a12:	60a2      	str	r2, [r4, #8]
 8007a14:	68a3      	ldr	r3, [r4, #8]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	60a3      	str	r3, [r4, #8]
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	f340 8084 	ble.w	8007b34 <_scanf_float+0x278>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	603b      	str	r3, [r7, #0]
 8007a32:	e766      	b.n	8007902 <_scanf_float+0x46>
 8007a34:	eb1a 0f05 	cmn.w	sl, r5
 8007a38:	f47f af70 	bne.w	800791c <_scanf_float+0x60>
 8007a3c:	6822      	ldr	r2, [r4, #0]
 8007a3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	f806 3b01 	strb.w	r3, [r6], #1
 8007a48:	e7e4      	b.n	8007a14 <_scanf_float+0x158>
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	0610      	lsls	r0, r2, #24
 8007a4e:	f57f af65 	bpl.w	800791c <_scanf_float+0x60>
 8007a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a56:	e7f4      	b.n	8007a42 <_scanf_float+0x186>
 8007a58:	f1ba 0f00 	cmp.w	sl, #0
 8007a5c:	d10e      	bne.n	8007a7c <_scanf_float+0x1c0>
 8007a5e:	f1b9 0f00 	cmp.w	r9, #0
 8007a62:	d10e      	bne.n	8007a82 <_scanf_float+0x1c6>
 8007a64:	6822      	ldr	r2, [r4, #0]
 8007a66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a6e:	d108      	bne.n	8007a82 <_scanf_float+0x1c6>
 8007a70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a74:	6022      	str	r2, [r4, #0]
 8007a76:	f04f 0a01 	mov.w	sl, #1
 8007a7a:	e7e3      	b.n	8007a44 <_scanf_float+0x188>
 8007a7c:	f1ba 0f02 	cmp.w	sl, #2
 8007a80:	d055      	beq.n	8007b2e <_scanf_float+0x272>
 8007a82:	2d01      	cmp	r5, #1
 8007a84:	d002      	beq.n	8007a8c <_scanf_float+0x1d0>
 8007a86:	2d04      	cmp	r5, #4
 8007a88:	f47f af48 	bne.w	800791c <_scanf_float+0x60>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	b2ed      	uxtb	r5, r5
 8007a90:	e7d8      	b.n	8007a44 <_scanf_float+0x188>
 8007a92:	f1ba 0f01 	cmp.w	sl, #1
 8007a96:	f47f af41 	bne.w	800791c <_scanf_float+0x60>
 8007a9a:	f04f 0a02 	mov.w	sl, #2
 8007a9e:	e7d1      	b.n	8007a44 <_scanf_float+0x188>
 8007aa0:	b97d      	cbnz	r5, 8007ac2 <_scanf_float+0x206>
 8007aa2:	f1b9 0f00 	cmp.w	r9, #0
 8007aa6:	f47f af3c 	bne.w	8007922 <_scanf_float+0x66>
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ab0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ab4:	f47f af39 	bne.w	800792a <_scanf_float+0x6e>
 8007ab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	2501      	movs	r5, #1
 8007ac0:	e7c0      	b.n	8007a44 <_scanf_float+0x188>
 8007ac2:	2d03      	cmp	r5, #3
 8007ac4:	d0e2      	beq.n	8007a8c <_scanf_float+0x1d0>
 8007ac6:	2d05      	cmp	r5, #5
 8007ac8:	e7de      	b.n	8007a88 <_scanf_float+0x1cc>
 8007aca:	2d02      	cmp	r5, #2
 8007acc:	f47f af26 	bne.w	800791c <_scanf_float+0x60>
 8007ad0:	2503      	movs	r5, #3
 8007ad2:	e7b7      	b.n	8007a44 <_scanf_float+0x188>
 8007ad4:	2d06      	cmp	r5, #6
 8007ad6:	f47f af21 	bne.w	800791c <_scanf_float+0x60>
 8007ada:	2507      	movs	r5, #7
 8007adc:	e7b2      	b.n	8007a44 <_scanf_float+0x188>
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	0591      	lsls	r1, r2, #22
 8007ae2:	f57f af1b 	bpl.w	800791c <_scanf_float+0x60>
 8007ae6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007aea:	6022      	str	r2, [r4, #0]
 8007aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8007af0:	e7a8      	b.n	8007a44 <_scanf_float+0x188>
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007af8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007afc:	d006      	beq.n	8007b0c <_scanf_float+0x250>
 8007afe:	0550      	lsls	r0, r2, #21
 8007b00:	f57f af0c 	bpl.w	800791c <_scanf_float+0x60>
 8007b04:	f1b9 0f00 	cmp.w	r9, #0
 8007b08:	f43f af0f 	beq.w	800792a <_scanf_float+0x6e>
 8007b0c:	0591      	lsls	r1, r2, #22
 8007b0e:	bf58      	it	pl
 8007b10:	9901      	ldrpl	r1, [sp, #4]
 8007b12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b16:	bf58      	it	pl
 8007b18:	eba9 0101 	subpl.w	r1, r9, r1
 8007b1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007b20:	bf58      	it	pl
 8007b22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b26:	6022      	str	r2, [r4, #0]
 8007b28:	f04f 0900 	mov.w	r9, #0
 8007b2c:	e78a      	b.n	8007a44 <_scanf_float+0x188>
 8007b2e:	f04f 0a03 	mov.w	sl, #3
 8007b32:	e787      	b.n	8007a44 <_scanf_float+0x188>
 8007b34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	4798      	blx	r3
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f43f aedf 	beq.w	8007902 <_scanf_float+0x46>
 8007b44:	e6ea      	b.n	800791c <_scanf_float+0x60>
 8007b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b4e:	463a      	mov	r2, r7
 8007b50:	4640      	mov	r0, r8
 8007b52:	4798      	blx	r3
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	6123      	str	r3, [r4, #16]
 8007b5a:	e6ec      	b.n	8007936 <_scanf_float+0x7a>
 8007b5c:	1e6b      	subs	r3, r5, #1
 8007b5e:	2b06      	cmp	r3, #6
 8007b60:	d825      	bhi.n	8007bae <_scanf_float+0x2f2>
 8007b62:	2d02      	cmp	r5, #2
 8007b64:	d836      	bhi.n	8007bd4 <_scanf_float+0x318>
 8007b66:	455e      	cmp	r6, fp
 8007b68:	f67f aee8 	bls.w	800793c <_scanf_float+0x80>
 8007b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b74:	463a      	mov	r2, r7
 8007b76:	4640      	mov	r0, r8
 8007b78:	4798      	blx	r3
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	e7f1      	b.n	8007b66 <_scanf_float+0x2aa>
 8007b82:	9802      	ldr	r0, [sp, #8]
 8007b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b8c:	9002      	str	r0, [sp, #8]
 8007b8e:	463a      	mov	r2, r7
 8007b90:	4640      	mov	r0, r8
 8007b92:	4798      	blx	r3
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	6123      	str	r3, [r4, #16]
 8007b9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b9e:	fa5f fa8a 	uxtb.w	sl, sl
 8007ba2:	f1ba 0f02 	cmp.w	sl, #2
 8007ba6:	d1ec      	bne.n	8007b82 <_scanf_float+0x2c6>
 8007ba8:	3d03      	subs	r5, #3
 8007baa:	b2ed      	uxtb	r5, r5
 8007bac:	1b76      	subs	r6, r6, r5
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	05da      	lsls	r2, r3, #23
 8007bb2:	d52f      	bpl.n	8007c14 <_scanf_float+0x358>
 8007bb4:	055b      	lsls	r3, r3, #21
 8007bb6:	d510      	bpl.n	8007bda <_scanf_float+0x31e>
 8007bb8:	455e      	cmp	r6, fp
 8007bba:	f67f aebf 	bls.w	800793c <_scanf_float+0x80>
 8007bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bc6:	463a      	mov	r2, r7
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4798      	blx	r3
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	e7f1      	b.n	8007bb8 <_scanf_float+0x2fc>
 8007bd4:	46aa      	mov	sl, r5
 8007bd6:	9602      	str	r6, [sp, #8]
 8007bd8:	e7df      	b.n	8007b9a <_scanf_float+0x2de>
 8007bda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	2965      	cmp	r1, #101	; 0x65
 8007be2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007be6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	d00c      	beq.n	8007c08 <_scanf_float+0x34c>
 8007bee:	2945      	cmp	r1, #69	; 0x45
 8007bf0:	d00a      	beq.n	8007c08 <_scanf_float+0x34c>
 8007bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bf6:	463a      	mov	r2, r7
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	4798      	blx	r3
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	1eb5      	subs	r5, r6, #2
 8007c06:	6123      	str	r3, [r4, #16]
 8007c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4798      	blx	r3
 8007c12:	462e      	mov	r6, r5
 8007c14:	6825      	ldr	r5, [r4, #0]
 8007c16:	f015 0510 	ands.w	r5, r5, #16
 8007c1a:	d158      	bne.n	8007cce <_scanf_float+0x412>
 8007c1c:	7035      	strb	r5, [r6, #0]
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c28:	d11c      	bne.n	8007c64 <_scanf_float+0x3a8>
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	454b      	cmp	r3, r9
 8007c2e:	eba3 0209 	sub.w	r2, r3, r9
 8007c32:	d124      	bne.n	8007c7e <_scanf_float+0x3c2>
 8007c34:	2200      	movs	r2, #0
 8007c36:	4659      	mov	r1, fp
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f000 ff7b 	bl	8008b34 <_strtod_r>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	6821      	ldr	r1, [r4, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f011 0f02 	tst.w	r1, #2
 8007c48:	ec57 6b10 	vmov	r6, r7, d0
 8007c4c:	f103 0204 	add.w	r2, r3, #4
 8007c50:	d020      	beq.n	8007c94 <_scanf_float+0x3d8>
 8007c52:	9903      	ldr	r1, [sp, #12]
 8007c54:	600a      	str	r2, [r1, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	e9c3 6700 	strd	r6, r7, [r3]
 8007c5c:	68e3      	ldr	r3, [r4, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60e3      	str	r3, [r4, #12]
 8007c62:	e66c      	b.n	800793e <_scanf_float+0x82>
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0e4      	beq.n	8007c34 <_scanf_float+0x378>
 8007c6a:	9905      	ldr	r1, [sp, #20]
 8007c6c:	230a      	movs	r3, #10
 8007c6e:	462a      	mov	r2, r5
 8007c70:	3101      	adds	r1, #1
 8007c72:	4640      	mov	r0, r8
 8007c74:	f000 ffe8 	bl	8008c48 <_strtol_r>
 8007c78:	9b04      	ldr	r3, [sp, #16]
 8007c7a:	9e05      	ldr	r6, [sp, #20]
 8007c7c:	1ac2      	subs	r2, r0, r3
 8007c7e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c82:	429e      	cmp	r6, r3
 8007c84:	bf28      	it	cs
 8007c86:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c8a:	4912      	ldr	r1, [pc, #72]	; (8007cd4 <_scanf_float+0x418>)
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 f909 	bl	8007ea4 <siprintf>
 8007c92:	e7cf      	b.n	8007c34 <_scanf_float+0x378>
 8007c94:	f011 0f04 	tst.w	r1, #4
 8007c98:	9903      	ldr	r1, [sp, #12]
 8007c9a:	600a      	str	r2, [r1, #0]
 8007c9c:	d1db      	bne.n	8007c56 <_scanf_float+0x39a>
 8007c9e:	f8d3 8000 	ldr.w	r8, [r3]
 8007ca2:	ee10 2a10 	vmov	r2, s0
 8007ca6:	ee10 0a10 	vmov	r0, s0
 8007caa:	463b      	mov	r3, r7
 8007cac:	4639      	mov	r1, r7
 8007cae:	f7f8 ff5d 	bl	8000b6c <__aeabi_dcmpun>
 8007cb2:	b128      	cbz	r0, 8007cc0 <_scanf_float+0x404>
 8007cb4:	4808      	ldr	r0, [pc, #32]	; (8007cd8 <_scanf_float+0x41c>)
 8007cb6:	f000 f8ef 	bl	8007e98 <nanf>
 8007cba:	ed88 0a00 	vstr	s0, [r8]
 8007cbe:	e7cd      	b.n	8007c5c <_scanf_float+0x3a0>
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 ffb0 	bl	8000c28 <__aeabi_d2f>
 8007cc8:	f8c8 0000 	str.w	r0, [r8]
 8007ccc:	e7c6      	b.n	8007c5c <_scanf_float+0x3a0>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	e635      	b.n	800793e <_scanf_float+0x82>
 8007cd2:	bf00      	nop
 8007cd4:	0800bb58 	.word	0x0800bb58
 8007cd8:	0800bc63 	.word	0x0800bc63

08007cdc <iprintf>:
 8007cdc:	b40f      	push	{r0, r1, r2, r3}
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <iprintf+0x2c>)
 8007ce0:	b513      	push	{r0, r1, r4, lr}
 8007ce2:	681c      	ldr	r4, [r3, #0]
 8007ce4:	b124      	cbz	r4, 8007cf0 <iprintf+0x14>
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	b913      	cbnz	r3, 8007cf0 <iprintf+0x14>
 8007cea:	4620      	mov	r0, r4
 8007cec:	f002 f81e 	bl	8009d2c <__sinit>
 8007cf0:	ab05      	add	r3, sp, #20
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	68a1      	ldr	r1, [r4, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f003 fb67 	bl	800b3cc <_vfiprintf_r>
 8007cfe:	b002      	add	sp, #8
 8007d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d04:	b004      	add	sp, #16
 8007d06:	4770      	bx	lr
 8007d08:	20000014 	.word	0x20000014

08007d0c <_puts_r>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	460e      	mov	r6, r1
 8007d10:	4605      	mov	r5, r0
 8007d12:	b118      	cbz	r0, 8007d1c <_puts_r+0x10>
 8007d14:	6983      	ldr	r3, [r0, #24]
 8007d16:	b90b      	cbnz	r3, 8007d1c <_puts_r+0x10>
 8007d18:	f002 f808 	bl	8009d2c <__sinit>
 8007d1c:	69ab      	ldr	r3, [r5, #24]
 8007d1e:	68ac      	ldr	r4, [r5, #8]
 8007d20:	b913      	cbnz	r3, 8007d28 <_puts_r+0x1c>
 8007d22:	4628      	mov	r0, r5
 8007d24:	f002 f802 	bl	8009d2c <__sinit>
 8007d28:	4b2c      	ldr	r3, [pc, #176]	; (8007ddc <_puts_r+0xd0>)
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d120      	bne.n	8007d70 <_puts_r+0x64>
 8007d2e:	686c      	ldr	r4, [r5, #4]
 8007d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d32:	07db      	lsls	r3, r3, #31
 8007d34:	d405      	bmi.n	8007d42 <_puts_r+0x36>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	0598      	lsls	r0, r3, #22
 8007d3a:	d402      	bmi.n	8007d42 <_puts_r+0x36>
 8007d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3e:	f002 fc18 	bl	800a572 <__retarget_lock_acquire_recursive>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	0719      	lsls	r1, r3, #28
 8007d46:	d51d      	bpl.n	8007d84 <_puts_r+0x78>
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	b1db      	cbz	r3, 8007d84 <_puts_r+0x78>
 8007d4c:	3e01      	subs	r6, #1
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d54:	3b01      	subs	r3, #1
 8007d56:	60a3      	str	r3, [r4, #8]
 8007d58:	bb39      	cbnz	r1, 8007daa <_puts_r+0x9e>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da38      	bge.n	8007dd0 <_puts_r+0xc4>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	210a      	movs	r1, #10
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 ff72 	bl	8008c4c <__swbuf_r>
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d011      	beq.n	8007d90 <_puts_r+0x84>
 8007d6c:	250a      	movs	r5, #10
 8007d6e:	e011      	b.n	8007d94 <_puts_r+0x88>
 8007d70:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <_puts_r+0xd4>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <_puts_r+0x6e>
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	e7da      	b.n	8007d30 <_puts_r+0x24>
 8007d7a:	4b1a      	ldr	r3, [pc, #104]	; (8007de4 <_puts_r+0xd8>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	bf08      	it	eq
 8007d80:	68ec      	ldreq	r4, [r5, #12]
 8007d82:	e7d5      	b.n	8007d30 <_puts_r+0x24>
 8007d84:	4621      	mov	r1, r4
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 ffb2 	bl	8008cf0 <__swsetup_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d0dd      	beq.n	8007d4c <_puts_r+0x40>
 8007d90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d96:	07da      	lsls	r2, r3, #31
 8007d98:	d405      	bmi.n	8007da6 <_puts_r+0x9a>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	059b      	lsls	r3, r3, #22
 8007d9e:	d402      	bmi.n	8007da6 <_puts_r+0x9a>
 8007da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da2:	f002 fbe7 	bl	800a574 <__retarget_lock_release_recursive>
 8007da6:	4628      	mov	r0, r5
 8007da8:	bd70      	pop	{r4, r5, r6, pc}
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	da04      	bge.n	8007db8 <_puts_r+0xac>
 8007dae:	69a2      	ldr	r2, [r4, #24]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	dc06      	bgt.n	8007dc2 <_puts_r+0xb6>
 8007db4:	290a      	cmp	r1, #10
 8007db6:	d004      	beq.n	8007dc2 <_puts_r+0xb6>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	7019      	strb	r1, [r3, #0]
 8007dc0:	e7c5      	b.n	8007d4e <_puts_r+0x42>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 ff41 	bl	8008c4c <__swbuf_r>
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d1bf      	bne.n	8007d4e <_puts_r+0x42>
 8007dce:	e7df      	b.n	8007d90 <_puts_r+0x84>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	250a      	movs	r5, #10
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	701d      	strb	r5, [r3, #0]
 8007dda:	e7db      	b.n	8007d94 <_puts_r+0x88>
 8007ddc:	0800be04 	.word	0x0800be04
 8007de0:	0800be24 	.word	0x0800be24
 8007de4:	0800bde4 	.word	0x0800bde4

08007de8 <puts>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <puts+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f7ff bf8d 	b.w	8007d0c <_puts_r>
 8007df2:	bf00      	nop
 8007df4:	20000014 	.word	0x20000014

08007df8 <rand>:
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <rand+0x60>)
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	681c      	ldr	r4, [r3, #0]
 8007dfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e00:	b9b3      	cbnz	r3, 8007e30 <rand+0x38>
 8007e02:	2018      	movs	r0, #24
 8007e04:	f002 fc1c 	bl	800a640 <malloc>
 8007e08:	63a0      	str	r0, [r4, #56]	; 0x38
 8007e0a:	b928      	cbnz	r0, 8007e18 <rand+0x20>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <rand+0x64>)
 8007e10:	4813      	ldr	r0, [pc, #76]	; (8007e60 <rand+0x68>)
 8007e12:	214e      	movs	r1, #78	; 0x4e
 8007e14:	f000 ffda 	bl	8008dcc <__assert_func>
 8007e18:	4a12      	ldr	r2, [pc, #72]	; (8007e64 <rand+0x6c>)
 8007e1a:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <rand+0x70>)
 8007e1c:	e9c0 2300 	strd	r2, r3, [r0]
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <rand+0x74>)
 8007e22:	6083      	str	r3, [r0, #8]
 8007e24:	230b      	movs	r3, #11
 8007e26:	8183      	strh	r3, [r0, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007e30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e32:	480f      	ldr	r0, [pc, #60]	; (8007e70 <rand+0x78>)
 8007e34:	690a      	ldr	r2, [r1, #16]
 8007e36:	694b      	ldr	r3, [r1, #20]
 8007e38:	4c0e      	ldr	r4, [pc, #56]	; (8007e74 <rand+0x7c>)
 8007e3a:	4350      	muls	r0, r2
 8007e3c:	fb04 0003 	mla	r0, r4, r3, r0
 8007e40:	fba2 3404 	umull	r3, r4, r2, r4
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	4404      	add	r4, r0
 8007e48:	f144 0000 	adc.w	r0, r4, #0
 8007e4c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007e50:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	bf00      	nop
 8007e58:	20000014 	.word	0x20000014
 8007e5c:	0800bb5d 	.word	0x0800bb5d
 8007e60:	0800bb74 	.word	0x0800bb74
 8007e64:	abcd330e 	.word	0xabcd330e
 8007e68:	e66d1234 	.word	0xe66d1234
 8007e6c:	0005deec 	.word	0x0005deec
 8007e70:	5851f42d 	.word	0x5851f42d
 8007e74:	4c957f2d 	.word	0x4c957f2d

08007e78 <_sbrk_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d06      	ldr	r5, [pc, #24]	; (8007e94 <_sbrk_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7fa f9bc 	bl	8002200 <_sbrk>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_sbrk_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_sbrk_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	200005ec 	.word	0x200005ec

08007e98 <nanf>:
 8007e98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ea0 <nanf+0x8>
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	7fc00000 	.word	0x7fc00000

08007ea4 <siprintf>:
 8007ea4:	b40e      	push	{r1, r2, r3}
 8007ea6:	b500      	push	{lr}
 8007ea8:	b09c      	sub	sp, #112	; 0x70
 8007eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8007eac:	9002      	str	r0, [sp, #8]
 8007eae:	9006      	str	r0, [sp, #24]
 8007eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb4:	4809      	ldr	r0, [pc, #36]	; (8007edc <siprintf+0x38>)
 8007eb6:	9107      	str	r1, [sp, #28]
 8007eb8:	9104      	str	r1, [sp, #16]
 8007eba:	4909      	ldr	r1, [pc, #36]	; (8007ee0 <siprintf+0x3c>)
 8007ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	6800      	ldr	r0, [r0, #0]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	a902      	add	r1, sp, #8
 8007ec8:	f003 f956 	bl	800b178 <_svfiprintf_r>
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	b01c      	add	sp, #112	; 0x70
 8007ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed8:	b003      	add	sp, #12
 8007eda:	4770      	bx	lr
 8007edc:	20000014 	.word	0x20000014
 8007ee0:	ffff0208 	.word	0xffff0208

08007ee4 <sulp>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	ec45 4b10 	vmov	d0, r4, r5
 8007eee:	4616      	mov	r6, r2
 8007ef0:	f002 ff46 	bl	800ad80 <__ulp>
 8007ef4:	ec51 0b10 	vmov	r0, r1, d0
 8007ef8:	b17e      	cbz	r6, 8007f1a <sulp+0x36>
 8007efa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007efe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dd09      	ble.n	8007f1a <sulp+0x36>
 8007f06:	051b      	lsls	r3, r3, #20
 8007f08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f0c:	2400      	movs	r4, #0
 8007f0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f12:	4622      	mov	r2, r4
 8007f14:	462b      	mov	r3, r5
 8007f16:	f7f8 fb8f 	bl	8000638 <__aeabi_dmul>
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	0000      	movs	r0, r0
	...

08007f20 <_strtod_l>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	b0a3      	sub	sp, #140	; 0x8c
 8007f26:	461f      	mov	r7, r3
 8007f28:	2300      	movs	r3, #0
 8007f2a:	931e      	str	r3, [sp, #120]	; 0x78
 8007f2c:	4ba4      	ldr	r3, [pc, #656]	; (80081c0 <_strtod_l+0x2a0>)
 8007f2e:	9219      	str	r2, [sp, #100]	; 0x64
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	9307      	str	r3, [sp, #28]
 8007f34:	4604      	mov	r4, r0
 8007f36:	4618      	mov	r0, r3
 8007f38:	4688      	mov	r8, r1
 8007f3a:	f7f8 f963 	bl	8000204 <strlen>
 8007f3e:	f04f 0a00 	mov.w	sl, #0
 8007f42:	4605      	mov	r5, r0
 8007f44:	f04f 0b00 	mov.w	fp, #0
 8007f48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	2a2b      	cmp	r2, #43	; 0x2b
 8007f52:	d04c      	beq.n	8007fee <_strtod_l+0xce>
 8007f54:	d839      	bhi.n	8007fca <_strtod_l+0xaa>
 8007f56:	2a0d      	cmp	r2, #13
 8007f58:	d832      	bhi.n	8007fc0 <_strtod_l+0xa0>
 8007f5a:	2a08      	cmp	r2, #8
 8007f5c:	d832      	bhi.n	8007fc4 <_strtod_l+0xa4>
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d03c      	beq.n	8007fdc <_strtod_l+0xbc>
 8007f62:	2300      	movs	r3, #0
 8007f64:	930e      	str	r3, [sp, #56]	; 0x38
 8007f66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007f68:	7833      	ldrb	r3, [r6, #0]
 8007f6a:	2b30      	cmp	r3, #48	; 0x30
 8007f6c:	f040 80b4 	bne.w	80080d8 <_strtod_l+0x1b8>
 8007f70:	7873      	ldrb	r3, [r6, #1]
 8007f72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f76:	2b58      	cmp	r3, #88	; 0x58
 8007f78:	d16c      	bne.n	8008054 <_strtod_l+0x134>
 8007f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	ab1e      	add	r3, sp, #120	; 0x78
 8007f80:	9702      	str	r7, [sp, #8]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4a8f      	ldr	r2, [pc, #572]	; (80081c4 <_strtod_l+0x2a4>)
 8007f86:	ab1f      	add	r3, sp, #124	; 0x7c
 8007f88:	a91d      	add	r1, sp, #116	; 0x74
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f001 ffe4 	bl	8009f58 <__gethex>
 8007f90:	f010 0707 	ands.w	r7, r0, #7
 8007f94:	4605      	mov	r5, r0
 8007f96:	d005      	beq.n	8007fa4 <_strtod_l+0x84>
 8007f98:	2f06      	cmp	r7, #6
 8007f9a:	d12a      	bne.n	8007ff2 <_strtod_l+0xd2>
 8007f9c:	3601      	adds	r6, #1
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	961d      	str	r6, [sp, #116]	; 0x74
 8007fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8007fa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 8596 	bne.w	8008ad8 <_strtod_l+0xbb8>
 8007fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fae:	b1db      	cbz	r3, 8007fe8 <_strtod_l+0xc8>
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007fb6:	ec43 2b10 	vmov	d0, r2, r3
 8007fba:	b023      	add	sp, #140	; 0x8c
 8007fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc0:	2a20      	cmp	r2, #32
 8007fc2:	d1ce      	bne.n	8007f62 <_strtod_l+0x42>
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	931d      	str	r3, [sp, #116]	; 0x74
 8007fc8:	e7c0      	b.n	8007f4c <_strtod_l+0x2c>
 8007fca:	2a2d      	cmp	r2, #45	; 0x2d
 8007fcc:	d1c9      	bne.n	8007f62 <_strtod_l+0x42>
 8007fce:	2201      	movs	r2, #1
 8007fd0:	920e      	str	r2, [sp, #56]	; 0x38
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	921d      	str	r2, [sp, #116]	; 0x74
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1c4      	bne.n	8007f66 <_strtod_l+0x46>
 8007fdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fde:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f040 8576 	bne.w	8008ad4 <_strtod_l+0xbb4>
 8007fe8:	4652      	mov	r2, sl
 8007fea:	465b      	mov	r3, fp
 8007fec:	e7e3      	b.n	8007fb6 <_strtod_l+0x96>
 8007fee:	2200      	movs	r2, #0
 8007ff0:	e7ee      	b.n	8007fd0 <_strtod_l+0xb0>
 8007ff2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ff4:	b13a      	cbz	r2, 8008006 <_strtod_l+0xe6>
 8007ff6:	2135      	movs	r1, #53	; 0x35
 8007ff8:	a820      	add	r0, sp, #128	; 0x80
 8007ffa:	f002 ffcc 	bl	800af96 <__copybits>
 8007ffe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008000:	4620      	mov	r0, r4
 8008002:	f002 fb91 	bl	800a728 <_Bfree>
 8008006:	3f01      	subs	r7, #1
 8008008:	2f05      	cmp	r7, #5
 800800a:	d807      	bhi.n	800801c <_strtod_l+0xfc>
 800800c:	e8df f007 	tbb	[pc, r7]
 8008010:	1d180b0e 	.word	0x1d180b0e
 8008014:	030e      	.short	0x030e
 8008016:	f04f 0b00 	mov.w	fp, #0
 800801a:	46da      	mov	sl, fp
 800801c:	0728      	lsls	r0, r5, #28
 800801e:	d5c1      	bpl.n	8007fa4 <_strtod_l+0x84>
 8008020:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008024:	e7be      	b.n	8007fa4 <_strtod_l+0x84>
 8008026:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800802a:	e7f7      	b.n	800801c <_strtod_l+0xfc>
 800802c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008030:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008032:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008036:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800803a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800803e:	e7ed      	b.n	800801c <_strtod_l+0xfc>
 8008040:	f8df b184 	ldr.w	fp, [pc, #388]	; 80081c8 <_strtod_l+0x2a8>
 8008044:	f04f 0a00 	mov.w	sl, #0
 8008048:	e7e8      	b.n	800801c <_strtod_l+0xfc>
 800804a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800804e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008052:	e7e3      	b.n	800801c <_strtod_l+0xfc>
 8008054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	921d      	str	r2, [sp, #116]	; 0x74
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b30      	cmp	r3, #48	; 0x30
 800805e:	d0f9      	beq.n	8008054 <_strtod_l+0x134>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d09f      	beq.n	8007fa4 <_strtod_l+0x84>
 8008064:	2301      	movs	r3, #1
 8008066:	f04f 0900 	mov.w	r9, #0
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800806e:	930a      	str	r3, [sp, #40]	; 0x28
 8008070:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008074:	464f      	mov	r7, r9
 8008076:	220a      	movs	r2, #10
 8008078:	981d      	ldr	r0, [sp, #116]	; 0x74
 800807a:	7806      	ldrb	r6, [r0, #0]
 800807c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008080:	b2d9      	uxtb	r1, r3
 8008082:	2909      	cmp	r1, #9
 8008084:	d92a      	bls.n	80080dc <_strtod_l+0x1bc>
 8008086:	9907      	ldr	r1, [sp, #28]
 8008088:	462a      	mov	r2, r5
 800808a:	f003 fb1c 	bl	800b6c6 <strncmp>
 800808e:	b398      	cbz	r0, 80080f8 <_strtod_l+0x1d8>
 8008090:	2000      	movs	r0, #0
 8008092:	4633      	mov	r3, r6
 8008094:	463d      	mov	r5, r7
 8008096:	9007      	str	r0, [sp, #28]
 8008098:	4602      	mov	r2, r0
 800809a:	2b65      	cmp	r3, #101	; 0x65
 800809c:	d001      	beq.n	80080a2 <_strtod_l+0x182>
 800809e:	2b45      	cmp	r3, #69	; 0x45
 80080a0:	d118      	bne.n	80080d4 <_strtod_l+0x1b4>
 80080a2:	b91d      	cbnz	r5, 80080ac <_strtod_l+0x18c>
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	4303      	orrs	r3, r0
 80080a8:	d098      	beq.n	8007fdc <_strtod_l+0xbc>
 80080aa:	2500      	movs	r5, #0
 80080ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80080b0:	f108 0301 	add.w	r3, r8, #1
 80080b4:	931d      	str	r3, [sp, #116]	; 0x74
 80080b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080ba:	2b2b      	cmp	r3, #43	; 0x2b
 80080bc:	d075      	beq.n	80081aa <_strtod_l+0x28a>
 80080be:	2b2d      	cmp	r3, #45	; 0x2d
 80080c0:	d07b      	beq.n	80081ba <_strtod_l+0x29a>
 80080c2:	f04f 0c00 	mov.w	ip, #0
 80080c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80080ca:	2909      	cmp	r1, #9
 80080cc:	f240 8082 	bls.w	80081d4 <_strtod_l+0x2b4>
 80080d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80080d4:	2600      	movs	r6, #0
 80080d6:	e09d      	b.n	8008214 <_strtod_l+0x2f4>
 80080d8:	2300      	movs	r3, #0
 80080da:	e7c4      	b.n	8008066 <_strtod_l+0x146>
 80080dc:	2f08      	cmp	r7, #8
 80080de:	bfd8      	it	le
 80080e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80080e2:	f100 0001 	add.w	r0, r0, #1
 80080e6:	bfda      	itte	le
 80080e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80080ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80080ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80080f2:	3701      	adds	r7, #1
 80080f4:	901d      	str	r0, [sp, #116]	; 0x74
 80080f6:	e7bf      	b.n	8008078 <_strtod_l+0x158>
 80080f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080fa:	195a      	adds	r2, r3, r5
 80080fc:	921d      	str	r2, [sp, #116]	; 0x74
 80080fe:	5d5b      	ldrb	r3, [r3, r5]
 8008100:	2f00      	cmp	r7, #0
 8008102:	d037      	beq.n	8008174 <_strtod_l+0x254>
 8008104:	9007      	str	r0, [sp, #28]
 8008106:	463d      	mov	r5, r7
 8008108:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800810c:	2a09      	cmp	r2, #9
 800810e:	d912      	bls.n	8008136 <_strtod_l+0x216>
 8008110:	2201      	movs	r2, #1
 8008112:	e7c2      	b.n	800809a <_strtod_l+0x17a>
 8008114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	921d      	str	r2, [sp, #116]	; 0x74
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	3001      	adds	r0, #1
 800811e:	2b30      	cmp	r3, #48	; 0x30
 8008120:	d0f8      	beq.n	8008114 <_strtod_l+0x1f4>
 8008122:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008126:	2a08      	cmp	r2, #8
 8008128:	f200 84db 	bhi.w	8008ae2 <_strtod_l+0xbc2>
 800812c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800812e:	9007      	str	r0, [sp, #28]
 8008130:	2000      	movs	r0, #0
 8008132:	920a      	str	r2, [sp, #40]	; 0x28
 8008134:	4605      	mov	r5, r0
 8008136:	3b30      	subs	r3, #48	; 0x30
 8008138:	f100 0201 	add.w	r2, r0, #1
 800813c:	d014      	beq.n	8008168 <_strtod_l+0x248>
 800813e:	9907      	ldr	r1, [sp, #28]
 8008140:	4411      	add	r1, r2
 8008142:	9107      	str	r1, [sp, #28]
 8008144:	462a      	mov	r2, r5
 8008146:	eb00 0e05 	add.w	lr, r0, r5
 800814a:	210a      	movs	r1, #10
 800814c:	4572      	cmp	r2, lr
 800814e:	d113      	bne.n	8008178 <_strtod_l+0x258>
 8008150:	182a      	adds	r2, r5, r0
 8008152:	2a08      	cmp	r2, #8
 8008154:	f105 0501 	add.w	r5, r5, #1
 8008158:	4405      	add	r5, r0
 800815a:	dc1c      	bgt.n	8008196 <_strtod_l+0x276>
 800815c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800815e:	220a      	movs	r2, #10
 8008160:	fb02 3301 	mla	r3, r2, r1, r3
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	2200      	movs	r2, #0
 8008168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	911d      	str	r1, [sp, #116]	; 0x74
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	4610      	mov	r0, r2
 8008172:	e7c9      	b.n	8008108 <_strtod_l+0x1e8>
 8008174:	4638      	mov	r0, r7
 8008176:	e7d2      	b.n	800811e <_strtod_l+0x1fe>
 8008178:	2a08      	cmp	r2, #8
 800817a:	dc04      	bgt.n	8008186 <_strtod_l+0x266>
 800817c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800817e:	434e      	muls	r6, r1
 8008180:	9609      	str	r6, [sp, #36]	; 0x24
 8008182:	3201      	adds	r2, #1
 8008184:	e7e2      	b.n	800814c <_strtod_l+0x22c>
 8008186:	f102 0c01 	add.w	ip, r2, #1
 800818a:	f1bc 0f10 	cmp.w	ip, #16
 800818e:	bfd8      	it	le
 8008190:	fb01 f909 	mulle.w	r9, r1, r9
 8008194:	e7f5      	b.n	8008182 <_strtod_l+0x262>
 8008196:	2d10      	cmp	r5, #16
 8008198:	bfdc      	itt	le
 800819a:	220a      	movle	r2, #10
 800819c:	fb02 3909 	mlale	r9, r2, r9, r3
 80081a0:	e7e1      	b.n	8008166 <_strtod_l+0x246>
 80081a2:	2300      	movs	r3, #0
 80081a4:	9307      	str	r3, [sp, #28]
 80081a6:	2201      	movs	r2, #1
 80081a8:	e77c      	b.n	80080a4 <_strtod_l+0x184>
 80081aa:	f04f 0c00 	mov.w	ip, #0
 80081ae:	f108 0302 	add.w	r3, r8, #2
 80081b2:	931d      	str	r3, [sp, #116]	; 0x74
 80081b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80081b8:	e785      	b.n	80080c6 <_strtod_l+0x1a6>
 80081ba:	f04f 0c01 	mov.w	ip, #1
 80081be:	e7f6      	b.n	80081ae <_strtod_l+0x28e>
 80081c0:	0800beb0 	.word	0x0800beb0
 80081c4:	0800bbd4 	.word	0x0800bbd4
 80081c8:	7ff00000 	.word	0x7ff00000
 80081cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081ce:	1c59      	adds	r1, r3, #1
 80081d0:	911d      	str	r1, [sp, #116]	; 0x74
 80081d2:	785b      	ldrb	r3, [r3, #1]
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d0f9      	beq.n	80081cc <_strtod_l+0x2ac>
 80081d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80081dc:	2908      	cmp	r1, #8
 80081de:	f63f af79 	bhi.w	80080d4 <_strtod_l+0x1b4>
 80081e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80081e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081e8:	9308      	str	r3, [sp, #32]
 80081ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081ec:	1c59      	adds	r1, r3, #1
 80081ee:	911d      	str	r1, [sp, #116]	; 0x74
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80081f6:	2e09      	cmp	r6, #9
 80081f8:	d937      	bls.n	800826a <_strtod_l+0x34a>
 80081fa:	9e08      	ldr	r6, [sp, #32]
 80081fc:	1b89      	subs	r1, r1, r6
 80081fe:	2908      	cmp	r1, #8
 8008200:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008204:	dc02      	bgt.n	800820c <_strtod_l+0x2ec>
 8008206:	4576      	cmp	r6, lr
 8008208:	bfa8      	it	ge
 800820a:	4676      	movge	r6, lr
 800820c:	f1bc 0f00 	cmp.w	ip, #0
 8008210:	d000      	beq.n	8008214 <_strtod_l+0x2f4>
 8008212:	4276      	negs	r6, r6
 8008214:	2d00      	cmp	r5, #0
 8008216:	d14f      	bne.n	80082b8 <_strtod_l+0x398>
 8008218:	9904      	ldr	r1, [sp, #16]
 800821a:	4301      	orrs	r1, r0
 800821c:	f47f aec2 	bne.w	8007fa4 <_strtod_l+0x84>
 8008220:	2a00      	cmp	r2, #0
 8008222:	f47f aedb 	bne.w	8007fdc <_strtod_l+0xbc>
 8008226:	2b69      	cmp	r3, #105	; 0x69
 8008228:	d027      	beq.n	800827a <_strtod_l+0x35a>
 800822a:	dc24      	bgt.n	8008276 <_strtod_l+0x356>
 800822c:	2b49      	cmp	r3, #73	; 0x49
 800822e:	d024      	beq.n	800827a <_strtod_l+0x35a>
 8008230:	2b4e      	cmp	r3, #78	; 0x4e
 8008232:	f47f aed3 	bne.w	8007fdc <_strtod_l+0xbc>
 8008236:	499e      	ldr	r1, [pc, #632]	; (80084b0 <_strtod_l+0x590>)
 8008238:	a81d      	add	r0, sp, #116	; 0x74
 800823a:	f002 f8e5 	bl	800a408 <__match>
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f aecc 	beq.w	8007fdc <_strtod_l+0xbc>
 8008244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b28      	cmp	r3, #40	; 0x28
 800824a:	d12d      	bne.n	80082a8 <_strtod_l+0x388>
 800824c:	4999      	ldr	r1, [pc, #612]	; (80084b4 <_strtod_l+0x594>)
 800824e:	aa20      	add	r2, sp, #128	; 0x80
 8008250:	a81d      	add	r0, sp, #116	; 0x74
 8008252:	f002 f8ed 	bl	800a430 <__hexnan>
 8008256:	2805      	cmp	r0, #5
 8008258:	d126      	bne.n	80082a8 <_strtod_l+0x388>
 800825a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800825c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008260:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008264:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008268:	e69c      	b.n	8007fa4 <_strtod_l+0x84>
 800826a:	210a      	movs	r1, #10
 800826c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008270:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008274:	e7b9      	b.n	80081ea <_strtod_l+0x2ca>
 8008276:	2b6e      	cmp	r3, #110	; 0x6e
 8008278:	e7db      	b.n	8008232 <_strtod_l+0x312>
 800827a:	498f      	ldr	r1, [pc, #572]	; (80084b8 <_strtod_l+0x598>)
 800827c:	a81d      	add	r0, sp, #116	; 0x74
 800827e:	f002 f8c3 	bl	800a408 <__match>
 8008282:	2800      	cmp	r0, #0
 8008284:	f43f aeaa 	beq.w	8007fdc <_strtod_l+0xbc>
 8008288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800828a:	498c      	ldr	r1, [pc, #560]	; (80084bc <_strtod_l+0x59c>)
 800828c:	3b01      	subs	r3, #1
 800828e:	a81d      	add	r0, sp, #116	; 0x74
 8008290:	931d      	str	r3, [sp, #116]	; 0x74
 8008292:	f002 f8b9 	bl	800a408 <__match>
 8008296:	b910      	cbnz	r0, 800829e <_strtod_l+0x37e>
 8008298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800829a:	3301      	adds	r3, #1
 800829c:	931d      	str	r3, [sp, #116]	; 0x74
 800829e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80084cc <_strtod_l+0x5ac>
 80082a2:	f04f 0a00 	mov.w	sl, #0
 80082a6:	e67d      	b.n	8007fa4 <_strtod_l+0x84>
 80082a8:	4885      	ldr	r0, [pc, #532]	; (80084c0 <_strtod_l+0x5a0>)
 80082aa:	f003 f9c1 	bl	800b630 <nan>
 80082ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 80082b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80082b6:	e675      	b.n	8007fa4 <_strtod_l+0x84>
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082bc:	1af3      	subs	r3, r6, r3
 80082be:	2f00      	cmp	r7, #0
 80082c0:	bf08      	it	eq
 80082c2:	462f      	moveq	r7, r5
 80082c4:	2d10      	cmp	r5, #16
 80082c6:	9308      	str	r3, [sp, #32]
 80082c8:	46a8      	mov	r8, r5
 80082ca:	bfa8      	it	ge
 80082cc:	f04f 0810 	movge.w	r8, #16
 80082d0:	f7f8 f938 	bl	8000544 <__aeabi_ui2d>
 80082d4:	2d09      	cmp	r5, #9
 80082d6:	4682      	mov	sl, r0
 80082d8:	468b      	mov	fp, r1
 80082da:	dd13      	ble.n	8008304 <_strtod_l+0x3e4>
 80082dc:	4b79      	ldr	r3, [pc, #484]	; (80084c4 <_strtod_l+0x5a4>)
 80082de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80082e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082e6:	f7f8 f9a7 	bl	8000638 <__aeabi_dmul>
 80082ea:	4682      	mov	sl, r0
 80082ec:	4648      	mov	r0, r9
 80082ee:	468b      	mov	fp, r1
 80082f0:	f7f8 f928 	bl	8000544 <__aeabi_ui2d>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4650      	mov	r0, sl
 80082fa:	4659      	mov	r1, fp
 80082fc:	f7f7 ffe6 	bl	80002cc <__adddf3>
 8008300:	4682      	mov	sl, r0
 8008302:	468b      	mov	fp, r1
 8008304:	2d0f      	cmp	r5, #15
 8008306:	dc38      	bgt.n	800837a <_strtod_l+0x45a>
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f43f ae4a 	beq.w	8007fa4 <_strtod_l+0x84>
 8008310:	dd24      	ble.n	800835c <_strtod_l+0x43c>
 8008312:	2b16      	cmp	r3, #22
 8008314:	dc0b      	bgt.n	800832e <_strtod_l+0x40e>
 8008316:	4d6b      	ldr	r5, [pc, #428]	; (80084c4 <_strtod_l+0x5a4>)
 8008318:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800831c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008320:	4652      	mov	r2, sl
 8008322:	465b      	mov	r3, fp
 8008324:	f7f8 f988 	bl	8000638 <__aeabi_dmul>
 8008328:	4682      	mov	sl, r0
 800832a:	468b      	mov	fp, r1
 800832c:	e63a      	b.n	8007fa4 <_strtod_l+0x84>
 800832e:	9a08      	ldr	r2, [sp, #32]
 8008330:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008334:	4293      	cmp	r3, r2
 8008336:	db20      	blt.n	800837a <_strtod_l+0x45a>
 8008338:	4c62      	ldr	r4, [pc, #392]	; (80084c4 <_strtod_l+0x5a4>)
 800833a:	f1c5 050f 	rsb	r5, r5, #15
 800833e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008342:	4652      	mov	r2, sl
 8008344:	465b      	mov	r3, fp
 8008346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834a:	f7f8 f975 	bl	8000638 <__aeabi_dmul>
 800834e:	9b08      	ldr	r3, [sp, #32]
 8008350:	1b5d      	subs	r5, r3, r5
 8008352:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008356:	e9d4 2300 	ldrd	r2, r3, [r4]
 800835a:	e7e3      	b.n	8008324 <_strtod_l+0x404>
 800835c:	9b08      	ldr	r3, [sp, #32]
 800835e:	3316      	adds	r3, #22
 8008360:	db0b      	blt.n	800837a <_strtod_l+0x45a>
 8008362:	9b07      	ldr	r3, [sp, #28]
 8008364:	4a57      	ldr	r2, [pc, #348]	; (80084c4 <_strtod_l+0x5a4>)
 8008366:	1b9e      	subs	r6, r3, r6
 8008368:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800836c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008370:	4650      	mov	r0, sl
 8008372:	4659      	mov	r1, fp
 8008374:	f7f8 fa8a 	bl	800088c <__aeabi_ddiv>
 8008378:	e7d6      	b.n	8008328 <_strtod_l+0x408>
 800837a:	9b08      	ldr	r3, [sp, #32]
 800837c:	eba5 0808 	sub.w	r8, r5, r8
 8008380:	4498      	add	r8, r3
 8008382:	f1b8 0f00 	cmp.w	r8, #0
 8008386:	dd71      	ble.n	800846c <_strtod_l+0x54c>
 8008388:	f018 030f 	ands.w	r3, r8, #15
 800838c:	d00a      	beq.n	80083a4 <_strtod_l+0x484>
 800838e:	494d      	ldr	r1, [pc, #308]	; (80084c4 <_strtod_l+0x5a4>)
 8008390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008394:	4652      	mov	r2, sl
 8008396:	465b      	mov	r3, fp
 8008398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800839c:	f7f8 f94c 	bl	8000638 <__aeabi_dmul>
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	f038 080f 	bics.w	r8, r8, #15
 80083a8:	d04d      	beq.n	8008446 <_strtod_l+0x526>
 80083aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80083ae:	dd22      	ble.n	80083f6 <_strtod_l+0x4d6>
 80083b0:	2500      	movs	r5, #0
 80083b2:	462e      	mov	r6, r5
 80083b4:	9509      	str	r5, [sp, #36]	; 0x24
 80083b6:	9507      	str	r5, [sp, #28]
 80083b8:	2322      	movs	r3, #34	; 0x22
 80083ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 80084cc <_strtod_l+0x5ac>
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	f04f 0a00 	mov.w	sl, #0
 80083c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f43f adec 	beq.w	8007fa4 <_strtod_l+0x84>
 80083cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80083ce:	4620      	mov	r0, r4
 80083d0:	f002 f9aa 	bl	800a728 <_Bfree>
 80083d4:	9907      	ldr	r1, [sp, #28]
 80083d6:	4620      	mov	r0, r4
 80083d8:	f002 f9a6 	bl	800a728 <_Bfree>
 80083dc:	4631      	mov	r1, r6
 80083de:	4620      	mov	r0, r4
 80083e0:	f002 f9a2 	bl	800a728 <_Bfree>
 80083e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e6:	4620      	mov	r0, r4
 80083e8:	f002 f99e 	bl	800a728 <_Bfree>
 80083ec:	4629      	mov	r1, r5
 80083ee:	4620      	mov	r0, r4
 80083f0:	f002 f99a 	bl	800a728 <_Bfree>
 80083f4:	e5d6      	b.n	8007fa4 <_strtod_l+0x84>
 80083f6:	2300      	movs	r3, #0
 80083f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80083fc:	4650      	mov	r0, sl
 80083fe:	4659      	mov	r1, fp
 8008400:	4699      	mov	r9, r3
 8008402:	f1b8 0f01 	cmp.w	r8, #1
 8008406:	dc21      	bgt.n	800844c <_strtod_l+0x52c>
 8008408:	b10b      	cbz	r3, 800840e <_strtod_l+0x4ee>
 800840a:	4682      	mov	sl, r0
 800840c:	468b      	mov	fp, r1
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <_strtod_l+0x5a8>)
 8008410:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008414:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008418:	4652      	mov	r2, sl
 800841a:	465b      	mov	r3, fp
 800841c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008420:	f7f8 f90a 	bl	8000638 <__aeabi_dmul>
 8008424:	4b29      	ldr	r3, [pc, #164]	; (80084cc <_strtod_l+0x5ac>)
 8008426:	460a      	mov	r2, r1
 8008428:	400b      	ands	r3, r1
 800842a:	4929      	ldr	r1, [pc, #164]	; (80084d0 <_strtod_l+0x5b0>)
 800842c:	428b      	cmp	r3, r1
 800842e:	4682      	mov	sl, r0
 8008430:	d8be      	bhi.n	80083b0 <_strtod_l+0x490>
 8008432:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008436:	428b      	cmp	r3, r1
 8008438:	bf86      	itte	hi
 800843a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80084d4 <_strtod_l+0x5b4>
 800843e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008442:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008446:	2300      	movs	r3, #0
 8008448:	9304      	str	r3, [sp, #16]
 800844a:	e081      	b.n	8008550 <_strtod_l+0x630>
 800844c:	f018 0f01 	tst.w	r8, #1
 8008450:	d007      	beq.n	8008462 <_strtod_l+0x542>
 8008452:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <_strtod_l+0x5a8>)
 8008454:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f8 f8ec 	bl	8000638 <__aeabi_dmul>
 8008460:	2301      	movs	r3, #1
 8008462:	f109 0901 	add.w	r9, r9, #1
 8008466:	ea4f 0868 	mov.w	r8, r8, asr #1
 800846a:	e7ca      	b.n	8008402 <_strtod_l+0x4e2>
 800846c:	d0eb      	beq.n	8008446 <_strtod_l+0x526>
 800846e:	f1c8 0800 	rsb	r8, r8, #0
 8008472:	f018 020f 	ands.w	r2, r8, #15
 8008476:	d00a      	beq.n	800848e <_strtod_l+0x56e>
 8008478:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <_strtod_l+0x5a4>)
 800847a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800847e:	4650      	mov	r0, sl
 8008480:	4659      	mov	r1, fp
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f7f8 fa01 	bl	800088c <__aeabi_ddiv>
 800848a:	4682      	mov	sl, r0
 800848c:	468b      	mov	fp, r1
 800848e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008492:	d0d8      	beq.n	8008446 <_strtod_l+0x526>
 8008494:	f1b8 0f1f 	cmp.w	r8, #31
 8008498:	dd1e      	ble.n	80084d8 <_strtod_l+0x5b8>
 800849a:	2500      	movs	r5, #0
 800849c:	462e      	mov	r6, r5
 800849e:	9509      	str	r5, [sp, #36]	; 0x24
 80084a0:	9507      	str	r5, [sp, #28]
 80084a2:	2322      	movs	r3, #34	; 0x22
 80084a4:	f04f 0a00 	mov.w	sl, #0
 80084a8:	f04f 0b00 	mov.w	fp, #0
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	e789      	b.n	80083c4 <_strtod_l+0x4a4>
 80084b0:	0800bb31 	.word	0x0800bb31
 80084b4:	0800bbe8 	.word	0x0800bbe8
 80084b8:	0800bb29 	.word	0x0800bb29
 80084bc:	0800bd68 	.word	0x0800bd68
 80084c0:	0800bc63 	.word	0x0800bc63
 80084c4:	0800bf50 	.word	0x0800bf50
 80084c8:	0800bf28 	.word	0x0800bf28
 80084cc:	7ff00000 	.word	0x7ff00000
 80084d0:	7ca00000 	.word	0x7ca00000
 80084d4:	7fefffff 	.word	0x7fefffff
 80084d8:	f018 0310 	ands.w	r3, r8, #16
 80084dc:	bf18      	it	ne
 80084de:	236a      	movne	r3, #106	; 0x6a
 80084e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008898 <_strtod_l+0x978>
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	4650      	mov	r0, sl
 80084e8:	4659      	mov	r1, fp
 80084ea:	2300      	movs	r3, #0
 80084ec:	f018 0f01 	tst.w	r8, #1
 80084f0:	d004      	beq.n	80084fc <_strtod_l+0x5dc>
 80084f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80084f6:	f7f8 f89f 	bl	8000638 <__aeabi_dmul>
 80084fa:	2301      	movs	r3, #1
 80084fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008500:	f109 0908 	add.w	r9, r9, #8
 8008504:	d1f2      	bne.n	80084ec <_strtod_l+0x5cc>
 8008506:	b10b      	cbz	r3, 800850c <_strtod_l+0x5ec>
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	b1bb      	cbz	r3, 8008540 <_strtod_l+0x620>
 8008510:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008514:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008518:	2b00      	cmp	r3, #0
 800851a:	4659      	mov	r1, fp
 800851c:	dd10      	ble.n	8008540 <_strtod_l+0x620>
 800851e:	2b1f      	cmp	r3, #31
 8008520:	f340 8128 	ble.w	8008774 <_strtod_l+0x854>
 8008524:	2b34      	cmp	r3, #52	; 0x34
 8008526:	bfde      	ittt	le
 8008528:	3b20      	suble	r3, #32
 800852a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800852e:	fa02 f303 	lslle.w	r3, r2, r3
 8008532:	f04f 0a00 	mov.w	sl, #0
 8008536:	bfcc      	ite	gt
 8008538:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800853c:	ea03 0b01 	andle.w	fp, r3, r1
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	f7f8 fade 	bl	8000b08 <__aeabi_dcmpeq>
 800854c:	2800      	cmp	r0, #0
 800854e:	d1a4      	bne.n	800849a <_strtod_l+0x57a>
 8008550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008556:	462b      	mov	r3, r5
 8008558:	463a      	mov	r2, r7
 800855a:	4620      	mov	r0, r4
 800855c:	f002 f950 	bl	800a800 <__s2b>
 8008560:	9009      	str	r0, [sp, #36]	; 0x24
 8008562:	2800      	cmp	r0, #0
 8008564:	f43f af24 	beq.w	80083b0 <_strtod_l+0x490>
 8008568:	9b07      	ldr	r3, [sp, #28]
 800856a:	1b9e      	subs	r6, r3, r6
 800856c:	9b08      	ldr	r3, [sp, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb4      	ite	lt
 8008572:	4633      	movlt	r3, r6
 8008574:	2300      	movge	r3, #0
 8008576:	9310      	str	r3, [sp, #64]	; 0x40
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	2500      	movs	r5, #0
 800857c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008580:	9318      	str	r3, [sp, #96]	; 0x60
 8008582:	462e      	mov	r6, r5
 8008584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008586:	4620      	mov	r0, r4
 8008588:	6859      	ldr	r1, [r3, #4]
 800858a:	f002 f88d 	bl	800a6a8 <_Balloc>
 800858e:	9007      	str	r0, [sp, #28]
 8008590:	2800      	cmp	r0, #0
 8008592:	f43f af11 	beq.w	80083b8 <_strtod_l+0x498>
 8008596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	3202      	adds	r2, #2
 800859c:	f103 010c 	add.w	r1, r3, #12
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	300c      	adds	r0, #12
 80085a4:	f002 f866 	bl	800a674 <memcpy>
 80085a8:	ec4b ab10 	vmov	d0, sl, fp
 80085ac:	aa20      	add	r2, sp, #128	; 0x80
 80085ae:	a91f      	add	r1, sp, #124	; 0x7c
 80085b0:	4620      	mov	r0, r4
 80085b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80085b6:	f002 fc5f 	bl	800ae78 <__d2b>
 80085ba:	901e      	str	r0, [sp, #120]	; 0x78
 80085bc:	2800      	cmp	r0, #0
 80085be:	f43f aefb 	beq.w	80083b8 <_strtod_l+0x498>
 80085c2:	2101      	movs	r1, #1
 80085c4:	4620      	mov	r0, r4
 80085c6:	f002 f9b5 	bl	800a934 <__i2b>
 80085ca:	4606      	mov	r6, r0
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f43f aef3 	beq.w	80083b8 <_strtod_l+0x498>
 80085d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085d4:	9904      	ldr	r1, [sp, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfab      	itete	ge
 80085da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80085dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80085de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80085e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80085e4:	bfac      	ite	ge
 80085e6:	eb03 0902 	addge.w	r9, r3, r2
 80085ea:	1ad7      	sublt	r7, r2, r3
 80085ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80085ee:	eba3 0801 	sub.w	r8, r3, r1
 80085f2:	4490      	add	r8, r2
 80085f4:	4ba3      	ldr	r3, [pc, #652]	; (8008884 <_strtod_l+0x964>)
 80085f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80085fa:	4598      	cmp	r8, r3
 80085fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008600:	f280 80cc 	bge.w	800879c <_strtod_l+0x87c>
 8008604:	eba3 0308 	sub.w	r3, r3, r8
 8008608:	2b1f      	cmp	r3, #31
 800860a:	eba2 0203 	sub.w	r2, r2, r3
 800860e:	f04f 0101 	mov.w	r1, #1
 8008612:	f300 80b6 	bgt.w	8008782 <_strtod_l+0x862>
 8008616:	fa01 f303 	lsl.w	r3, r1, r3
 800861a:	9311      	str	r3, [sp, #68]	; 0x44
 800861c:	2300      	movs	r3, #0
 800861e:	930c      	str	r3, [sp, #48]	; 0x30
 8008620:	eb09 0802 	add.w	r8, r9, r2
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	45c1      	cmp	r9, r8
 8008628:	4417      	add	r7, r2
 800862a:	441f      	add	r7, r3
 800862c:	464b      	mov	r3, r9
 800862e:	bfa8      	it	ge
 8008630:	4643      	movge	r3, r8
 8008632:	42bb      	cmp	r3, r7
 8008634:	bfa8      	it	ge
 8008636:	463b      	movge	r3, r7
 8008638:	2b00      	cmp	r3, #0
 800863a:	bfc2      	ittt	gt
 800863c:	eba8 0803 	subgt.w	r8, r8, r3
 8008640:	1aff      	subgt	r7, r7, r3
 8008642:	eba9 0903 	subgt.w	r9, r9, r3
 8008646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	dd17      	ble.n	800867c <_strtod_l+0x75c>
 800864c:	4631      	mov	r1, r6
 800864e:	461a      	mov	r2, r3
 8008650:	4620      	mov	r0, r4
 8008652:	f002 fa2b 	bl	800aaac <__pow5mult>
 8008656:	4606      	mov	r6, r0
 8008658:	2800      	cmp	r0, #0
 800865a:	f43f aead 	beq.w	80083b8 <_strtod_l+0x498>
 800865e:	4601      	mov	r1, r0
 8008660:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008662:	4620      	mov	r0, r4
 8008664:	f002 f97c 	bl	800a960 <__multiply>
 8008668:	900f      	str	r0, [sp, #60]	; 0x3c
 800866a:	2800      	cmp	r0, #0
 800866c:	f43f aea4 	beq.w	80083b8 <_strtod_l+0x498>
 8008670:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008672:	4620      	mov	r0, r4
 8008674:	f002 f858 	bl	800a728 <_Bfree>
 8008678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800867a:	931e      	str	r3, [sp, #120]	; 0x78
 800867c:	f1b8 0f00 	cmp.w	r8, #0
 8008680:	f300 8091 	bgt.w	80087a6 <_strtod_l+0x886>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd08      	ble.n	800869c <_strtod_l+0x77c>
 800868a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800868c:	9907      	ldr	r1, [sp, #28]
 800868e:	4620      	mov	r0, r4
 8008690:	f002 fa0c 	bl	800aaac <__pow5mult>
 8008694:	9007      	str	r0, [sp, #28]
 8008696:	2800      	cmp	r0, #0
 8008698:	f43f ae8e 	beq.w	80083b8 <_strtod_l+0x498>
 800869c:	2f00      	cmp	r7, #0
 800869e:	dd08      	ble.n	80086b2 <_strtod_l+0x792>
 80086a0:	9907      	ldr	r1, [sp, #28]
 80086a2:	463a      	mov	r2, r7
 80086a4:	4620      	mov	r0, r4
 80086a6:	f002 fa5b 	bl	800ab60 <__lshift>
 80086aa:	9007      	str	r0, [sp, #28]
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f43f ae83 	beq.w	80083b8 <_strtod_l+0x498>
 80086b2:	f1b9 0f00 	cmp.w	r9, #0
 80086b6:	dd08      	ble.n	80086ca <_strtod_l+0x7aa>
 80086b8:	4631      	mov	r1, r6
 80086ba:	464a      	mov	r2, r9
 80086bc:	4620      	mov	r0, r4
 80086be:	f002 fa4f 	bl	800ab60 <__lshift>
 80086c2:	4606      	mov	r6, r0
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f43f ae77 	beq.w	80083b8 <_strtod_l+0x498>
 80086ca:	9a07      	ldr	r2, [sp, #28]
 80086cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80086ce:	4620      	mov	r0, r4
 80086d0:	f002 face 	bl	800ac70 <__mdiff>
 80086d4:	4605      	mov	r5, r0
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f43f ae6e 	beq.w	80083b8 <_strtod_l+0x498>
 80086dc:	68c3      	ldr	r3, [r0, #12]
 80086de:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e0:	2300      	movs	r3, #0
 80086e2:	60c3      	str	r3, [r0, #12]
 80086e4:	4631      	mov	r1, r6
 80086e6:	f002 faa7 	bl	800ac38 <__mcmp>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	da65      	bge.n	80087ba <_strtod_l+0x89a>
 80086ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f0:	ea53 030a 	orrs.w	r3, r3, sl
 80086f4:	f040 8087 	bne.w	8008806 <_strtod_l+0x8e6>
 80086f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f040 8082 	bne.w	8008806 <_strtod_l+0x8e6>
 8008702:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008706:	0d1b      	lsrs	r3, r3, #20
 8008708:	051b      	lsls	r3, r3, #20
 800870a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800870e:	d97a      	bls.n	8008806 <_strtod_l+0x8e6>
 8008710:	696b      	ldr	r3, [r5, #20]
 8008712:	b913      	cbnz	r3, 800871a <_strtod_l+0x7fa>
 8008714:	692b      	ldr	r3, [r5, #16]
 8008716:	2b01      	cmp	r3, #1
 8008718:	dd75      	ble.n	8008806 <_strtod_l+0x8e6>
 800871a:	4629      	mov	r1, r5
 800871c:	2201      	movs	r2, #1
 800871e:	4620      	mov	r0, r4
 8008720:	f002 fa1e 	bl	800ab60 <__lshift>
 8008724:	4631      	mov	r1, r6
 8008726:	4605      	mov	r5, r0
 8008728:	f002 fa86 	bl	800ac38 <__mcmp>
 800872c:	2800      	cmp	r0, #0
 800872e:	dd6a      	ble.n	8008806 <_strtod_l+0x8e6>
 8008730:	9904      	ldr	r1, [sp, #16]
 8008732:	4a55      	ldr	r2, [pc, #340]	; (8008888 <_strtod_l+0x968>)
 8008734:	465b      	mov	r3, fp
 8008736:	2900      	cmp	r1, #0
 8008738:	f000 8085 	beq.w	8008846 <_strtod_l+0x926>
 800873c:	ea02 010b 	and.w	r1, r2, fp
 8008740:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008744:	dc7f      	bgt.n	8008846 <_strtod_l+0x926>
 8008746:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800874a:	f77f aeaa 	ble.w	80084a2 <_strtod_l+0x582>
 800874e:	4a4f      	ldr	r2, [pc, #316]	; (800888c <_strtod_l+0x96c>)
 8008750:	2300      	movs	r3, #0
 8008752:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008756:	4650      	mov	r0, sl
 8008758:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800875c:	4659      	mov	r1, fp
 800875e:	f7f7 ff6b 	bl	8000638 <__aeabi_dmul>
 8008762:	460b      	mov	r3, r1
 8008764:	4303      	orrs	r3, r0
 8008766:	bf08      	it	eq
 8008768:	2322      	moveq	r3, #34	; 0x22
 800876a:	4682      	mov	sl, r0
 800876c:	468b      	mov	fp, r1
 800876e:	bf08      	it	eq
 8008770:	6023      	streq	r3, [r4, #0]
 8008772:	e62b      	b.n	80083cc <_strtod_l+0x4ac>
 8008774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	ea03 0a0a 	and.w	sl, r3, sl
 8008780:	e6de      	b.n	8008540 <_strtod_l+0x620>
 8008782:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008786:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800878a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800878e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008792:	fa01 f308 	lsl.w	r3, r1, r8
 8008796:	930c      	str	r3, [sp, #48]	; 0x30
 8008798:	9111      	str	r1, [sp, #68]	; 0x44
 800879a:	e741      	b.n	8008620 <_strtod_l+0x700>
 800879c:	2300      	movs	r3, #0
 800879e:	930c      	str	r3, [sp, #48]	; 0x30
 80087a0:	2301      	movs	r3, #1
 80087a2:	9311      	str	r3, [sp, #68]	; 0x44
 80087a4:	e73c      	b.n	8008620 <_strtod_l+0x700>
 80087a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80087a8:	4642      	mov	r2, r8
 80087aa:	4620      	mov	r0, r4
 80087ac:	f002 f9d8 	bl	800ab60 <__lshift>
 80087b0:	901e      	str	r0, [sp, #120]	; 0x78
 80087b2:	2800      	cmp	r0, #0
 80087b4:	f47f af66 	bne.w	8008684 <_strtod_l+0x764>
 80087b8:	e5fe      	b.n	80083b8 <_strtod_l+0x498>
 80087ba:	465f      	mov	r7, fp
 80087bc:	d16e      	bne.n	800889c <_strtod_l+0x97c>
 80087be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087c4:	b342      	cbz	r2, 8008818 <_strtod_l+0x8f8>
 80087c6:	4a32      	ldr	r2, [pc, #200]	; (8008890 <_strtod_l+0x970>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d128      	bne.n	800881e <_strtod_l+0x8fe>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	4650      	mov	r0, sl
 80087d0:	b1eb      	cbz	r3, 800880e <_strtod_l+0x8ee>
 80087d2:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <_strtod_l+0x968>)
 80087d4:	403a      	ands	r2, r7
 80087d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80087da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087de:	d819      	bhi.n	8008814 <_strtod_l+0x8f4>
 80087e0:	0d12      	lsrs	r2, r2, #20
 80087e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80087e6:	fa01 f303 	lsl.w	r3, r1, r3
 80087ea:	4298      	cmp	r0, r3
 80087ec:	d117      	bne.n	800881e <_strtod_l+0x8fe>
 80087ee:	4b29      	ldr	r3, [pc, #164]	; (8008894 <_strtod_l+0x974>)
 80087f0:	429f      	cmp	r7, r3
 80087f2:	d102      	bne.n	80087fa <_strtod_l+0x8da>
 80087f4:	3001      	adds	r0, #1
 80087f6:	f43f addf 	beq.w	80083b8 <_strtod_l+0x498>
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <_strtod_l+0x968>)
 80087fc:	403b      	ands	r3, r7
 80087fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008802:	f04f 0a00 	mov.w	sl, #0
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1a0      	bne.n	800874e <_strtod_l+0x82e>
 800880c:	e5de      	b.n	80083cc <_strtod_l+0x4ac>
 800880e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008812:	e7ea      	b.n	80087ea <_strtod_l+0x8ca>
 8008814:	460b      	mov	r3, r1
 8008816:	e7e8      	b.n	80087ea <_strtod_l+0x8ca>
 8008818:	ea53 030a 	orrs.w	r3, r3, sl
 800881c:	d088      	beq.n	8008730 <_strtod_l+0x810>
 800881e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008820:	b1db      	cbz	r3, 800885a <_strtod_l+0x93a>
 8008822:	423b      	tst	r3, r7
 8008824:	d0ef      	beq.n	8008806 <_strtod_l+0x8e6>
 8008826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	b1c3      	cbz	r3, 8008862 <_strtod_l+0x942>
 8008830:	f7ff fb58 	bl	8007ee4 <sulp>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800883c:	f7f7 fd46 	bl	80002cc <__adddf3>
 8008840:	4682      	mov	sl, r0
 8008842:	468b      	mov	fp, r1
 8008844:	e7df      	b.n	8008806 <_strtod_l+0x8e6>
 8008846:	4013      	ands	r3, r2
 8008848:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800884c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008850:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008854:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008858:	e7d5      	b.n	8008806 <_strtod_l+0x8e6>
 800885a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800885c:	ea13 0f0a 	tst.w	r3, sl
 8008860:	e7e0      	b.n	8008824 <_strtod_l+0x904>
 8008862:	f7ff fb3f 	bl	8007ee4 <sulp>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800886e:	f7f7 fd2b 	bl	80002c8 <__aeabi_dsub>
 8008872:	2200      	movs	r2, #0
 8008874:	2300      	movs	r3, #0
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	f7f8 f945 	bl	8000b08 <__aeabi_dcmpeq>
 800887e:	2800      	cmp	r0, #0
 8008880:	d0c1      	beq.n	8008806 <_strtod_l+0x8e6>
 8008882:	e60e      	b.n	80084a2 <_strtod_l+0x582>
 8008884:	fffffc02 	.word	0xfffffc02
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	39500000 	.word	0x39500000
 8008890:	000fffff 	.word	0x000fffff
 8008894:	7fefffff 	.word	0x7fefffff
 8008898:	0800bc00 	.word	0x0800bc00
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	f002 fb46 	bl	800af30 <__ratio>
 80088a4:	ec59 8b10 	vmov	r8, r9, d0
 80088a8:	ee10 0a10 	vmov	r0, s0
 80088ac:	2200      	movs	r2, #0
 80088ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f8 f93c 	bl	8000b30 <__aeabi_dcmple>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d07c      	beq.n	80089b6 <_strtod_l+0xa96>
 80088bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d04c      	beq.n	800895c <_strtod_l+0xa3c>
 80088c2:	4b95      	ldr	r3, [pc, #596]	; (8008b18 <_strtod_l+0xbf8>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80088ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008b18 <_strtod_l+0xbf8>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	4b92      	ldr	r3, [pc, #584]	; (8008b1c <_strtod_l+0xbfc>)
 80088d4:	403b      	ands	r3, r7
 80088d6:	9311      	str	r3, [sp, #68]	; 0x44
 80088d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088da:	4b91      	ldr	r3, [pc, #580]	; (8008b20 <_strtod_l+0xc00>)
 80088dc:	429a      	cmp	r2, r3
 80088de:	f040 80b2 	bne.w	8008a46 <_strtod_l+0xb26>
 80088e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80088e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80088ee:	ec4b ab10 	vmov	d0, sl, fp
 80088f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80088f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80088fa:	f002 fa41 	bl	800ad80 <__ulp>
 80088fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008902:	ec53 2b10 	vmov	r2, r3, d0
 8008906:	f7f7 fe97 	bl	8000638 <__aeabi_dmul>
 800890a:	4652      	mov	r2, sl
 800890c:	465b      	mov	r3, fp
 800890e:	f7f7 fcdd 	bl	80002cc <__adddf3>
 8008912:	460b      	mov	r3, r1
 8008914:	4981      	ldr	r1, [pc, #516]	; (8008b1c <_strtod_l+0xbfc>)
 8008916:	4a83      	ldr	r2, [pc, #524]	; (8008b24 <_strtod_l+0xc04>)
 8008918:	4019      	ands	r1, r3
 800891a:	4291      	cmp	r1, r2
 800891c:	4682      	mov	sl, r0
 800891e:	d95e      	bls.n	80089de <_strtod_l+0xabe>
 8008920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008922:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008926:	4293      	cmp	r3, r2
 8008928:	d103      	bne.n	8008932 <_strtod_l+0xa12>
 800892a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892c:	3301      	adds	r3, #1
 800892e:	f43f ad43 	beq.w	80083b8 <_strtod_l+0x498>
 8008932:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008b30 <_strtod_l+0xc10>
 8008936:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800893a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800893c:	4620      	mov	r0, r4
 800893e:	f001 fef3 	bl	800a728 <_Bfree>
 8008942:	9907      	ldr	r1, [sp, #28]
 8008944:	4620      	mov	r0, r4
 8008946:	f001 feef 	bl	800a728 <_Bfree>
 800894a:	4631      	mov	r1, r6
 800894c:	4620      	mov	r0, r4
 800894e:	f001 feeb 	bl	800a728 <_Bfree>
 8008952:	4629      	mov	r1, r5
 8008954:	4620      	mov	r0, r4
 8008956:	f001 fee7 	bl	800a728 <_Bfree>
 800895a:	e613      	b.n	8008584 <_strtod_l+0x664>
 800895c:	f1ba 0f00 	cmp.w	sl, #0
 8008960:	d11b      	bne.n	800899a <_strtod_l+0xa7a>
 8008962:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008966:	b9f3      	cbnz	r3, 80089a6 <_strtod_l+0xa86>
 8008968:	4b6b      	ldr	r3, [pc, #428]	; (8008b18 <_strtod_l+0xbf8>)
 800896a:	2200      	movs	r2, #0
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f8 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8008974:	b9d0      	cbnz	r0, 80089ac <_strtod_l+0xa8c>
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	4b6b      	ldr	r3, [pc, #428]	; (8008b28 <_strtod_l+0xc08>)
 800897c:	2200      	movs	r2, #0
 800897e:	f7f7 fe5b 	bl	8000638 <__aeabi_dmul>
 8008982:	4680      	mov	r8, r0
 8008984:	4689      	mov	r9, r1
 8008986:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800898a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800898e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008990:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008994:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008998:	e79b      	b.n	80088d2 <_strtod_l+0x9b2>
 800899a:	f1ba 0f01 	cmp.w	sl, #1
 800899e:	d102      	bne.n	80089a6 <_strtod_l+0xa86>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f43f ad7e 	beq.w	80084a2 <_strtod_l+0x582>
 80089a6:	4b61      	ldr	r3, [pc, #388]	; (8008b2c <_strtod_l+0xc0c>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	e78c      	b.n	80088c6 <_strtod_l+0x9a6>
 80089ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b28 <_strtod_l+0xc08>
 80089b0:	f04f 0800 	mov.w	r8, #0
 80089b4:	e7e7      	b.n	8008986 <_strtod_l+0xa66>
 80089b6:	4b5c      	ldr	r3, [pc, #368]	; (8008b28 <_strtod_l+0xc08>)
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	2200      	movs	r2, #0
 80089be:	f7f7 fe3b 	bl	8000638 <__aeabi_dmul>
 80089c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089c4:	4680      	mov	r8, r0
 80089c6:	4689      	mov	r9, r1
 80089c8:	b933      	cbnz	r3, 80089d8 <_strtod_l+0xab8>
 80089ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089ce:	9012      	str	r0, [sp, #72]	; 0x48
 80089d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80089d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80089d6:	e7dd      	b.n	8008994 <_strtod_l+0xa74>
 80089d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80089dc:	e7f9      	b.n	80089d2 <_strtod_l+0xab2>
 80089de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80089e2:	9b04      	ldr	r3, [sp, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1a8      	bne.n	800893a <_strtod_l+0xa1a>
 80089e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089ee:	0d1b      	lsrs	r3, r3, #20
 80089f0:	051b      	lsls	r3, r3, #20
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d1a1      	bne.n	800893a <_strtod_l+0xa1a>
 80089f6:	4640      	mov	r0, r8
 80089f8:	4649      	mov	r1, r9
 80089fa:	f7f8 f97d 	bl	8000cf8 <__aeabi_d2lz>
 80089fe:	f7f7 fded 	bl	80005dc <__aeabi_l2d>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f7 fc5d 	bl	80002c8 <__aeabi_dsub>
 8008a0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a14:	ea43 030a 	orr.w	r3, r3, sl
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4689      	mov	r9, r1
 8008a1e:	d053      	beq.n	8008ac8 <_strtod_l+0xba8>
 8008a20:	a335      	add	r3, pc, #212	; (adr r3, 8008af8 <_strtod_l+0xbd8>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f8 f879 	bl	8000b1c <__aeabi_dcmplt>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f47f acce 	bne.w	80083cc <_strtod_l+0x4ac>
 8008a30:	a333      	add	r3, pc, #204	; (adr r3, 8008b00 <_strtod_l+0xbe0>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	f7f8 f88d 	bl	8000b58 <__aeabi_dcmpgt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f43f af7b 	beq.w	800893a <_strtod_l+0xa1a>
 8008a44:	e4c2      	b.n	80083cc <_strtod_l+0x4ac>
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	b333      	cbz	r3, 8008a98 <_strtod_l+0xb78>
 8008a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a50:	d822      	bhi.n	8008a98 <_strtod_l+0xb78>
 8008a52:	a32d      	add	r3, pc, #180	; (adr r3, 8008b08 <_strtod_l+0xbe8>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	4640      	mov	r0, r8
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	f7f8 f868 	bl	8000b30 <__aeabi_dcmple>
 8008a60:	b1a0      	cbz	r0, 8008a8c <_strtod_l+0xb6c>
 8008a62:	4649      	mov	r1, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	f7f8 f8bf 	bl	8000be8 <__aeabi_d2uiz>
 8008a6a:	2801      	cmp	r0, #1
 8008a6c:	bf38      	it	cc
 8008a6e:	2001      	movcc	r0, #1
 8008a70:	f7f7 fd68 	bl	8000544 <__aeabi_ui2d>
 8008a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a76:	4680      	mov	r8, r0
 8008a78:	4689      	mov	r9, r1
 8008a7a:	bb13      	cbnz	r3, 8008ac2 <_strtod_l+0xba2>
 8008a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a80:	9014      	str	r0, [sp, #80]	; 0x50
 8008a82:	9315      	str	r3, [sp, #84]	; 0x54
 8008a84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008a88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	930d      	str	r3, [sp, #52]	; 0x34
 8008a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008aa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008aa4:	f002 f96c 	bl	800ad80 <__ulp>
 8008aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aac:	ec53 2b10 	vmov	r2, r3, d0
 8008ab0:	f7f7 fdc2 	bl	8000638 <__aeabi_dmul>
 8008ab4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ab8:	f7f7 fc08 	bl	80002cc <__adddf3>
 8008abc:	4682      	mov	sl, r0
 8008abe:	468b      	mov	fp, r1
 8008ac0:	e78f      	b.n	80089e2 <_strtod_l+0xac2>
 8008ac2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008ac6:	e7dd      	b.n	8008a84 <_strtod_l+0xb64>
 8008ac8:	a311      	add	r3, pc, #68	; (adr r3, 8008b10 <_strtod_l+0xbf0>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	f7f8 f825 	bl	8000b1c <__aeabi_dcmplt>
 8008ad2:	e7b4      	b.n	8008a3e <_strtod_l+0xb1e>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	f7ff ba65 	b.w	8007fac <_strtod_l+0x8c>
 8008ae2:	2b65      	cmp	r3, #101	; 0x65
 8008ae4:	f43f ab5d 	beq.w	80081a2 <_strtod_l+0x282>
 8008ae8:	2b45      	cmp	r3, #69	; 0x45
 8008aea:	f43f ab5a 	beq.w	80081a2 <_strtod_l+0x282>
 8008aee:	2201      	movs	r2, #1
 8008af0:	f7ff bb92 	b.w	8008218 <_strtod_l+0x2f8>
 8008af4:	f3af 8000 	nop.w
 8008af8:	94a03595 	.word	0x94a03595
 8008afc:	3fdfffff 	.word	0x3fdfffff
 8008b00:	35afe535 	.word	0x35afe535
 8008b04:	3fe00000 	.word	0x3fe00000
 8008b08:	ffc00000 	.word	0xffc00000
 8008b0c:	41dfffff 	.word	0x41dfffff
 8008b10:	94a03595 	.word	0x94a03595
 8008b14:	3fcfffff 	.word	0x3fcfffff
 8008b18:	3ff00000 	.word	0x3ff00000
 8008b1c:	7ff00000 	.word	0x7ff00000
 8008b20:	7fe00000 	.word	0x7fe00000
 8008b24:	7c9fffff 	.word	0x7c9fffff
 8008b28:	3fe00000 	.word	0x3fe00000
 8008b2c:	bff00000 	.word	0xbff00000
 8008b30:	7fefffff 	.word	0x7fefffff

08008b34 <_strtod_r>:
 8008b34:	4b01      	ldr	r3, [pc, #4]	; (8008b3c <_strtod_r+0x8>)
 8008b36:	f7ff b9f3 	b.w	8007f20 <_strtod_l>
 8008b3a:	bf00      	nop
 8008b3c:	2000007c 	.word	0x2000007c

08008b40 <_strtol_l.isra.0>:
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b46:	d001      	beq.n	8008b4c <_strtol_l.isra.0+0xc>
 8008b48:	2b24      	cmp	r3, #36	; 0x24
 8008b4a:	d906      	bls.n	8008b5a <_strtol_l.isra.0+0x1a>
 8008b4c:	f7fe f9b0 	bl	8006eb0 <__errno>
 8008b50:	2316      	movs	r3, #22
 8008b52:	6003      	str	r3, [r0, #0]
 8008b54:	2000      	movs	r0, #0
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	4f3a      	ldr	r7, [pc, #232]	; (8008c44 <_strtol_l.isra.0+0x104>)
 8008b5c:	468e      	mov	lr, r1
 8008b5e:	4676      	mov	r6, lr
 8008b60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008b64:	5de5      	ldrb	r5, [r4, r7]
 8008b66:	f015 0508 	ands.w	r5, r5, #8
 8008b6a:	d1f8      	bne.n	8008b5e <_strtol_l.isra.0+0x1e>
 8008b6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b6e:	d134      	bne.n	8008bda <_strtol_l.isra.0+0x9a>
 8008b70:	f89e 4000 	ldrb.w	r4, [lr]
 8008b74:	f04f 0801 	mov.w	r8, #1
 8008b78:	f106 0e02 	add.w	lr, r6, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d05c      	beq.n	8008c3a <_strtol_l.isra.0+0xfa>
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d10c      	bne.n	8008b9e <_strtol_l.isra.0+0x5e>
 8008b84:	2c30      	cmp	r4, #48	; 0x30
 8008b86:	d10a      	bne.n	8008b9e <_strtol_l.isra.0+0x5e>
 8008b88:	f89e 4000 	ldrb.w	r4, [lr]
 8008b8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b90:	2c58      	cmp	r4, #88	; 0x58
 8008b92:	d14d      	bne.n	8008c30 <_strtol_l.isra.0+0xf0>
 8008b94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f10e 0e02 	add.w	lr, lr, #2
 8008b9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008ba2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	fbbc f9f3 	udiv	r9, ip, r3
 8008bac:	4635      	mov	r5, r6
 8008bae:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008bb6:	2f09      	cmp	r7, #9
 8008bb8:	d818      	bhi.n	8008bec <_strtol_l.isra.0+0xac>
 8008bba:	463c      	mov	r4, r7
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	dd24      	ble.n	8008c0a <_strtol_l.isra.0+0xca>
 8008bc0:	2e00      	cmp	r6, #0
 8008bc2:	db1f      	blt.n	8008c04 <_strtol_l.isra.0+0xc4>
 8008bc4:	45a9      	cmp	r9, r5
 8008bc6:	d31d      	bcc.n	8008c04 <_strtol_l.isra.0+0xc4>
 8008bc8:	d101      	bne.n	8008bce <_strtol_l.isra.0+0x8e>
 8008bca:	45a2      	cmp	sl, r4
 8008bcc:	db1a      	blt.n	8008c04 <_strtol_l.isra.0+0xc4>
 8008bce:	fb05 4503 	mla	r5, r5, r3, r4
 8008bd2:	2601      	movs	r6, #1
 8008bd4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008bd8:	e7eb      	b.n	8008bb2 <_strtol_l.isra.0+0x72>
 8008bda:	2c2b      	cmp	r4, #43	; 0x2b
 8008bdc:	bf08      	it	eq
 8008bde:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008be2:	46a8      	mov	r8, r5
 8008be4:	bf08      	it	eq
 8008be6:	f106 0e02 	addeq.w	lr, r6, #2
 8008bea:	e7c7      	b.n	8008b7c <_strtol_l.isra.0+0x3c>
 8008bec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008bf0:	2f19      	cmp	r7, #25
 8008bf2:	d801      	bhi.n	8008bf8 <_strtol_l.isra.0+0xb8>
 8008bf4:	3c37      	subs	r4, #55	; 0x37
 8008bf6:	e7e1      	b.n	8008bbc <_strtol_l.isra.0+0x7c>
 8008bf8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008bfc:	2f19      	cmp	r7, #25
 8008bfe:	d804      	bhi.n	8008c0a <_strtol_l.isra.0+0xca>
 8008c00:	3c57      	subs	r4, #87	; 0x57
 8008c02:	e7db      	b.n	8008bbc <_strtol_l.isra.0+0x7c>
 8008c04:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008c08:	e7e4      	b.n	8008bd4 <_strtol_l.isra.0+0x94>
 8008c0a:	2e00      	cmp	r6, #0
 8008c0c:	da05      	bge.n	8008c1a <_strtol_l.isra.0+0xda>
 8008c0e:	2322      	movs	r3, #34	; 0x22
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	4665      	mov	r5, ip
 8008c14:	b942      	cbnz	r2, 8008c28 <_strtol_l.isra.0+0xe8>
 8008c16:	4628      	mov	r0, r5
 8008c18:	e79d      	b.n	8008b56 <_strtol_l.isra.0+0x16>
 8008c1a:	f1b8 0f00 	cmp.w	r8, #0
 8008c1e:	d000      	beq.n	8008c22 <_strtol_l.isra.0+0xe2>
 8008c20:	426d      	negs	r5, r5
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d0f7      	beq.n	8008c16 <_strtol_l.isra.0+0xd6>
 8008c26:	b10e      	cbz	r6, 8008c2c <_strtol_l.isra.0+0xec>
 8008c28:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	e7f2      	b.n	8008c16 <_strtol_l.isra.0+0xd6>
 8008c30:	2430      	movs	r4, #48	; 0x30
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1b3      	bne.n	8008b9e <_strtol_l.isra.0+0x5e>
 8008c36:	2308      	movs	r3, #8
 8008c38:	e7b1      	b.n	8008b9e <_strtol_l.isra.0+0x5e>
 8008c3a:	2c30      	cmp	r4, #48	; 0x30
 8008c3c:	d0a4      	beq.n	8008b88 <_strtol_l.isra.0+0x48>
 8008c3e:	230a      	movs	r3, #10
 8008c40:	e7ad      	b.n	8008b9e <_strtol_l.isra.0+0x5e>
 8008c42:	bf00      	nop
 8008c44:	0800bc65 	.word	0x0800bc65

08008c48 <_strtol_r>:
 8008c48:	f7ff bf7a 	b.w	8008b40 <_strtol_l.isra.0>

08008c4c <__swbuf_r>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	460e      	mov	r6, r1
 8008c50:	4614      	mov	r4, r2
 8008c52:	4605      	mov	r5, r0
 8008c54:	b118      	cbz	r0, 8008c5e <__swbuf_r+0x12>
 8008c56:	6983      	ldr	r3, [r0, #24]
 8008c58:	b90b      	cbnz	r3, 8008c5e <__swbuf_r+0x12>
 8008c5a:	f001 f867 	bl	8009d2c <__sinit>
 8008c5e:	4b21      	ldr	r3, [pc, #132]	; (8008ce4 <__swbuf_r+0x98>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	d12b      	bne.n	8008cbc <__swbuf_r+0x70>
 8008c64:	686c      	ldr	r4, [r5, #4]
 8008c66:	69a3      	ldr	r3, [r4, #24]
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	071a      	lsls	r2, r3, #28
 8008c6e:	d52f      	bpl.n	8008cd0 <__swbuf_r+0x84>
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	b36b      	cbz	r3, 8008cd0 <__swbuf_r+0x84>
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	6820      	ldr	r0, [r4, #0]
 8008c78:	1ac0      	subs	r0, r0, r3
 8008c7a:	6963      	ldr	r3, [r4, #20]
 8008c7c:	b2f6      	uxtb	r6, r6
 8008c7e:	4283      	cmp	r3, r0
 8008c80:	4637      	mov	r7, r6
 8008c82:	dc04      	bgt.n	8008c8e <__swbuf_r+0x42>
 8008c84:	4621      	mov	r1, r4
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 ffbc 	bl	8009c04 <_fflush_r>
 8008c8c:	bb30      	cbnz	r0, 8008cdc <__swbuf_r+0x90>
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	60a3      	str	r3, [r4, #8]
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	701e      	strb	r6, [r3, #0]
 8008c9c:	6963      	ldr	r3, [r4, #20]
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	4283      	cmp	r3, r0
 8008ca2:	d004      	beq.n	8008cae <__swbuf_r+0x62>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	07db      	lsls	r3, r3, #31
 8008ca8:	d506      	bpl.n	8008cb8 <__swbuf_r+0x6c>
 8008caa:	2e0a      	cmp	r6, #10
 8008cac:	d104      	bne.n	8008cb8 <__swbuf_r+0x6c>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 ffa7 	bl	8009c04 <_fflush_r>
 8008cb6:	b988      	cbnz	r0, 8008cdc <__swbuf_r+0x90>
 8008cb8:	4638      	mov	r0, r7
 8008cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <__swbuf_r+0x9c>)
 8008cbe:	429c      	cmp	r4, r3
 8008cc0:	d101      	bne.n	8008cc6 <__swbuf_r+0x7a>
 8008cc2:	68ac      	ldr	r4, [r5, #8]
 8008cc4:	e7cf      	b.n	8008c66 <__swbuf_r+0x1a>
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <__swbuf_r+0xa0>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	bf08      	it	eq
 8008ccc:	68ec      	ldreq	r4, [r5, #12]
 8008cce:	e7ca      	b.n	8008c66 <__swbuf_r+0x1a>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f80c 	bl	8008cf0 <__swsetup_r>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d0cb      	beq.n	8008c74 <__swbuf_r+0x28>
 8008cdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ce0:	e7ea      	b.n	8008cb8 <__swbuf_r+0x6c>
 8008ce2:	bf00      	nop
 8008ce4:	0800be04 	.word	0x0800be04
 8008ce8:	0800be24 	.word	0x0800be24
 8008cec:	0800bde4 	.word	0x0800bde4

08008cf0 <__swsetup_r>:
 8008cf0:	4b32      	ldr	r3, [pc, #200]	; (8008dbc <__swsetup_r+0xcc>)
 8008cf2:	b570      	push	{r4, r5, r6, lr}
 8008cf4:	681d      	ldr	r5, [r3, #0]
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	b125      	cbz	r5, 8008d06 <__swsetup_r+0x16>
 8008cfc:	69ab      	ldr	r3, [r5, #24]
 8008cfe:	b913      	cbnz	r3, 8008d06 <__swsetup_r+0x16>
 8008d00:	4628      	mov	r0, r5
 8008d02:	f001 f813 	bl	8009d2c <__sinit>
 8008d06:	4b2e      	ldr	r3, [pc, #184]	; (8008dc0 <__swsetup_r+0xd0>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d10f      	bne.n	8008d2c <__swsetup_r+0x3c>
 8008d0c:	686c      	ldr	r4, [r5, #4]
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d14:	0719      	lsls	r1, r3, #28
 8008d16:	d42c      	bmi.n	8008d72 <__swsetup_r+0x82>
 8008d18:	06dd      	lsls	r5, r3, #27
 8008d1a:	d411      	bmi.n	8008d40 <__swsetup_r+0x50>
 8008d1c:	2309      	movs	r3, #9
 8008d1e:	6033      	str	r3, [r6, #0]
 8008d20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2a:	e03e      	b.n	8008daa <__swsetup_r+0xba>
 8008d2c:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <__swsetup_r+0xd4>)
 8008d2e:	429c      	cmp	r4, r3
 8008d30:	d101      	bne.n	8008d36 <__swsetup_r+0x46>
 8008d32:	68ac      	ldr	r4, [r5, #8]
 8008d34:	e7eb      	b.n	8008d0e <__swsetup_r+0x1e>
 8008d36:	4b24      	ldr	r3, [pc, #144]	; (8008dc8 <__swsetup_r+0xd8>)
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	bf08      	it	eq
 8008d3c:	68ec      	ldreq	r4, [r5, #12]
 8008d3e:	e7e6      	b.n	8008d0e <__swsetup_r+0x1e>
 8008d40:	0758      	lsls	r0, r3, #29
 8008d42:	d512      	bpl.n	8008d6a <__swsetup_r+0x7a>
 8008d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d46:	b141      	cbz	r1, 8008d5a <__swsetup_r+0x6a>
 8008d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	d002      	beq.n	8008d56 <__swsetup_r+0x66>
 8008d50:	4630      	mov	r0, r6
 8008d52:	f002 f965 	bl	800b020 <_free_r>
 8008d56:	2300      	movs	r3, #0
 8008d58:	6363      	str	r3, [r4, #52]	; 0x34
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d60:	81a3      	strh	r3, [r4, #12]
 8008d62:	2300      	movs	r3, #0
 8008d64:	6063      	str	r3, [r4, #4]
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	f043 0308 	orr.w	r3, r3, #8
 8008d70:	81a3      	strh	r3, [r4, #12]
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	b94b      	cbnz	r3, 8008d8a <__swsetup_r+0x9a>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d80:	d003      	beq.n	8008d8a <__swsetup_r+0x9a>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4630      	mov	r0, r6
 8008d86:	f001 fc1b 	bl	800a5c0 <__smakebuf_r>
 8008d8a:	89a0      	ldrh	r0, [r4, #12]
 8008d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d90:	f010 0301 	ands.w	r3, r0, #1
 8008d94:	d00a      	beq.n	8008dac <__swsetup_r+0xbc>
 8008d96:	2300      	movs	r3, #0
 8008d98:	60a3      	str	r3, [r4, #8]
 8008d9a:	6963      	ldr	r3, [r4, #20]
 8008d9c:	425b      	negs	r3, r3
 8008d9e:	61a3      	str	r3, [r4, #24]
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	b943      	cbnz	r3, 8008db6 <__swsetup_r+0xc6>
 8008da4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008da8:	d1ba      	bne.n	8008d20 <__swsetup_r+0x30>
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	0781      	lsls	r1, r0, #30
 8008dae:	bf58      	it	pl
 8008db0:	6963      	ldrpl	r3, [r4, #20]
 8008db2:	60a3      	str	r3, [r4, #8]
 8008db4:	e7f4      	b.n	8008da0 <__swsetup_r+0xb0>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e7f7      	b.n	8008daa <__swsetup_r+0xba>
 8008dba:	bf00      	nop
 8008dbc:	20000014 	.word	0x20000014
 8008dc0:	0800be04 	.word	0x0800be04
 8008dc4:	0800be24 	.word	0x0800be24
 8008dc8:	0800bde4 	.word	0x0800bde4

08008dcc <__assert_func>:
 8008dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dce:	4614      	mov	r4, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <__assert_func+0x2c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	68d8      	ldr	r0, [r3, #12]
 8008dda:	b14c      	cbz	r4, 8008df0 <__assert_func+0x24>
 8008ddc:	4b07      	ldr	r3, [pc, #28]	; (8008dfc <__assert_func+0x30>)
 8008dde:	9100      	str	r1, [sp, #0]
 8008de0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008de4:	4906      	ldr	r1, [pc, #24]	; (8008e00 <__assert_func+0x34>)
 8008de6:	462b      	mov	r3, r5
 8008de8:	f001 f81e 	bl	8009e28 <fiprintf>
 8008dec:	f002 fc9c 	bl	800b728 <abort>
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <__assert_func+0x38>)
 8008df2:	461c      	mov	r4, r3
 8008df4:	e7f3      	b.n	8008dde <__assert_func+0x12>
 8008df6:	bf00      	nop
 8008df8:	20000014 	.word	0x20000014
 8008dfc:	0800bc28 	.word	0x0800bc28
 8008e00:	0800bc35 	.word	0x0800bc35
 8008e04:	0800bc63 	.word	0x0800bc63

08008e08 <quorem>:
 8008e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	6903      	ldr	r3, [r0, #16]
 8008e0e:	690c      	ldr	r4, [r1, #16]
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	4607      	mov	r7, r0
 8008e14:	f2c0 8081 	blt.w	8008f1a <quorem+0x112>
 8008e18:	3c01      	subs	r4, #1
 8008e1a:	f101 0814 	add.w	r8, r1, #20
 8008e1e:	f100 0514 	add.w	r5, r0, #20
 8008e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e30:	3301      	adds	r3, #1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e40:	d331      	bcc.n	8008ea6 <quorem+0x9e>
 8008e42:	f04f 0e00 	mov.w	lr, #0
 8008e46:	4640      	mov	r0, r8
 8008e48:	46ac      	mov	ip, r5
 8008e4a:	46f2      	mov	sl, lr
 8008e4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e50:	b293      	uxth	r3, r2
 8008e52:	fb06 e303 	mla	r3, r6, r3, lr
 8008e56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e60:	0c12      	lsrs	r2, r2, #16
 8008e62:	f8dc a000 	ldr.w	sl, [ip]
 8008e66:	fb06 e202 	mla	r2, r6, r2, lr
 8008e6a:	fa13 f38a 	uxtah	r3, r3, sl
 8008e6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e72:	fa1f fa82 	uxth.w	sl, r2
 8008e76:	f8dc 2000 	ldr.w	r2, [ip]
 8008e7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008e7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e88:	4581      	cmp	r9, r0
 8008e8a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e92:	d2db      	bcs.n	8008e4c <quorem+0x44>
 8008e94:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e98:	b92b      	cbnz	r3, 8008ea6 <quorem+0x9e>
 8008e9a:	9b01      	ldr	r3, [sp, #4]
 8008e9c:	3b04      	subs	r3, #4
 8008e9e:	429d      	cmp	r5, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	d32e      	bcc.n	8008f02 <quorem+0xfa>
 8008ea4:	613c      	str	r4, [r7, #16]
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f001 fec6 	bl	800ac38 <__mcmp>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	db24      	blt.n	8008efa <quorem+0xf2>
 8008eb0:	3601      	adds	r6, #1
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f04f 0c00 	mov.w	ip, #0
 8008eb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ebc:	f8d0 e000 	ldr.w	lr, [r0]
 8008ec0:	b293      	uxth	r3, r2
 8008ec2:	ebac 0303 	sub.w	r3, ip, r3
 8008ec6:	0c12      	lsrs	r2, r2, #16
 8008ec8:	fa13 f38e 	uxtah	r3, r3, lr
 8008ecc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eda:	45c1      	cmp	r9, r8
 8008edc:	f840 3b04 	str.w	r3, [r0], #4
 8008ee0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ee4:	d2e8      	bcs.n	8008eb8 <quorem+0xb0>
 8008ee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eee:	b922      	cbnz	r2, 8008efa <quorem+0xf2>
 8008ef0:	3b04      	subs	r3, #4
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	d30a      	bcc.n	8008f0e <quorem+0x106>
 8008ef8:	613c      	str	r4, [r7, #16]
 8008efa:	4630      	mov	r0, r6
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f02:	6812      	ldr	r2, [r2, #0]
 8008f04:	3b04      	subs	r3, #4
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	d1cc      	bne.n	8008ea4 <quorem+0x9c>
 8008f0a:	3c01      	subs	r4, #1
 8008f0c:	e7c7      	b.n	8008e9e <quorem+0x96>
 8008f0e:	6812      	ldr	r2, [r2, #0]
 8008f10:	3b04      	subs	r3, #4
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	d1f0      	bne.n	8008ef8 <quorem+0xf0>
 8008f16:	3c01      	subs	r4, #1
 8008f18:	e7eb      	b.n	8008ef2 <quorem+0xea>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7ee      	b.n	8008efc <quorem+0xf4>
	...

08008f20 <_dtoa_r>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	ed2d 8b02 	vpush	{d8}
 8008f28:	ec57 6b10 	vmov	r6, r7, d0
 8008f2c:	b095      	sub	sp, #84	; 0x54
 8008f2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f34:	9105      	str	r1, [sp, #20]
 8008f36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f40:	b975      	cbnz	r5, 8008f60 <_dtoa_r+0x40>
 8008f42:	2010      	movs	r0, #16
 8008f44:	f001 fb7c 	bl	800a640 <malloc>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	6260      	str	r0, [r4, #36]	; 0x24
 8008f4c:	b920      	cbnz	r0, 8008f58 <_dtoa_r+0x38>
 8008f4e:	4bb2      	ldr	r3, [pc, #712]	; (8009218 <_dtoa_r+0x2f8>)
 8008f50:	21ea      	movs	r1, #234	; 0xea
 8008f52:	48b2      	ldr	r0, [pc, #712]	; (800921c <_dtoa_r+0x2fc>)
 8008f54:	f7ff ff3a 	bl	8008dcc <__assert_func>
 8008f58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f5c:	6005      	str	r5, [r0, #0]
 8008f5e:	60c5      	str	r5, [r0, #12]
 8008f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f62:	6819      	ldr	r1, [r3, #0]
 8008f64:	b151      	cbz	r1, 8008f7c <_dtoa_r+0x5c>
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	604a      	str	r2, [r1, #4]
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4093      	lsls	r3, r2
 8008f6e:	608b      	str	r3, [r1, #8]
 8008f70:	4620      	mov	r0, r4
 8008f72:	f001 fbd9 	bl	800a728 <_Bfree>
 8008f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	1e3b      	subs	r3, r7, #0
 8008f7e:	bfb9      	ittee	lt
 8008f80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f84:	9303      	strlt	r3, [sp, #12]
 8008f86:	2300      	movge	r3, #0
 8008f88:	f8c8 3000 	strge.w	r3, [r8]
 8008f8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008f90:	4ba3      	ldr	r3, [pc, #652]	; (8009220 <_dtoa_r+0x300>)
 8008f92:	bfbc      	itt	lt
 8008f94:	2201      	movlt	r2, #1
 8008f96:	f8c8 2000 	strlt.w	r2, [r8]
 8008f9a:	ea33 0309 	bics.w	r3, r3, r9
 8008f9e:	d11b      	bne.n	8008fd8 <_dtoa_r+0xb8>
 8008fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fac:	4333      	orrs	r3, r6
 8008fae:	f000 857a 	beq.w	8009aa6 <_dtoa_r+0xb86>
 8008fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb4:	b963      	cbnz	r3, 8008fd0 <_dtoa_r+0xb0>
 8008fb6:	4b9b      	ldr	r3, [pc, #620]	; (8009224 <_dtoa_r+0x304>)
 8008fb8:	e024      	b.n	8009004 <_dtoa_r+0xe4>
 8008fba:	4b9b      	ldr	r3, [pc, #620]	; (8009228 <_dtoa_r+0x308>)
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	9800      	ldr	r0, [sp, #0]
 8008fc6:	b015      	add	sp, #84	; 0x54
 8008fc8:	ecbd 8b02 	vpop	{d8}
 8008fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd0:	4b94      	ldr	r3, [pc, #592]	; (8009224 <_dtoa_r+0x304>)
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	3303      	adds	r3, #3
 8008fd6:	e7f3      	b.n	8008fc0 <_dtoa_r+0xa0>
 8008fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	ec51 0b17 	vmov	r0, r1, d7
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008fe8:	f7f7 fd8e 	bl	8000b08 <__aeabi_dcmpeq>
 8008fec:	4680      	mov	r8, r0
 8008fee:	b158      	cbz	r0, 8009008 <_dtoa_r+0xe8>
 8008ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8551 	beq.w	8009aa0 <_dtoa_r+0xb80>
 8008ffe:	488b      	ldr	r0, [pc, #556]	; (800922c <_dtoa_r+0x30c>)
 8009000:	6018      	str	r0, [r3, #0]
 8009002:	1e43      	subs	r3, r0, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	e7dd      	b.n	8008fc4 <_dtoa_r+0xa4>
 8009008:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800900c:	aa12      	add	r2, sp, #72	; 0x48
 800900e:	a913      	add	r1, sp, #76	; 0x4c
 8009010:	4620      	mov	r0, r4
 8009012:	f001 ff31 	bl	800ae78 <__d2b>
 8009016:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800901a:	4683      	mov	fp, r0
 800901c:	2d00      	cmp	r5, #0
 800901e:	d07c      	beq.n	800911a <_dtoa_r+0x1fa>
 8009020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009022:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800902a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800902e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800903a:	4b7d      	ldr	r3, [pc, #500]	; (8009230 <_dtoa_r+0x310>)
 800903c:	2200      	movs	r2, #0
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 f941 	bl	80002c8 <__aeabi_dsub>
 8009046:	a36e      	add	r3, pc, #440	; (adr r3, 8009200 <_dtoa_r+0x2e0>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 faf4 	bl	8000638 <__aeabi_dmul>
 8009050:	a36d      	add	r3, pc, #436	; (adr r3, 8009208 <_dtoa_r+0x2e8>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 f939 	bl	80002cc <__adddf3>
 800905a:	4606      	mov	r6, r0
 800905c:	4628      	mov	r0, r5
 800905e:	460f      	mov	r7, r1
 8009060:	f7f7 fa80 	bl	8000564 <__aeabi_i2d>
 8009064:	a36a      	add	r3, pc, #424	; (adr r3, 8009210 <_dtoa_r+0x2f0>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 fae5 	bl	8000638 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4630      	mov	r0, r6
 8009074:	4639      	mov	r1, r7
 8009076:	f7f7 f929 	bl	80002cc <__adddf3>
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	f7f7 fd8b 	bl	8000b98 <__aeabi_d2iz>
 8009082:	2200      	movs	r2, #0
 8009084:	4682      	mov	sl, r0
 8009086:	2300      	movs	r3, #0
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 fd46 	bl	8000b1c <__aeabi_dcmplt>
 8009090:	b148      	cbz	r0, 80090a6 <_dtoa_r+0x186>
 8009092:	4650      	mov	r0, sl
 8009094:	f7f7 fa66 	bl	8000564 <__aeabi_i2d>
 8009098:	4632      	mov	r2, r6
 800909a:	463b      	mov	r3, r7
 800909c:	f7f7 fd34 	bl	8000b08 <__aeabi_dcmpeq>
 80090a0:	b908      	cbnz	r0, 80090a6 <_dtoa_r+0x186>
 80090a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80090a6:	f1ba 0f16 	cmp.w	sl, #22
 80090aa:	d854      	bhi.n	8009156 <_dtoa_r+0x236>
 80090ac:	4b61      	ldr	r3, [pc, #388]	; (8009234 <_dtoa_r+0x314>)
 80090ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090ba:	f7f7 fd2f 	bl	8000b1c <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d04b      	beq.n	800915a <_dtoa_r+0x23a>
 80090c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80090c6:	2300      	movs	r3, #0
 80090c8:	930e      	str	r3, [sp, #56]	; 0x38
 80090ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090cc:	1b5d      	subs	r5, r3, r5
 80090ce:	1e6b      	subs	r3, r5, #1
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	bf43      	ittte	mi
 80090d4:	2300      	movmi	r3, #0
 80090d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80090da:	9304      	strmi	r3, [sp, #16]
 80090dc:	f04f 0800 	movpl.w	r8, #0
 80090e0:	f1ba 0f00 	cmp.w	sl, #0
 80090e4:	db3b      	blt.n	800915e <_dtoa_r+0x23e>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80090ec:	4453      	add	r3, sl
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	2300      	movs	r3, #0
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	9b05      	ldr	r3, [sp, #20]
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d869      	bhi.n	80091ce <_dtoa_r+0x2ae>
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	bfc4      	itt	gt
 80090fe:	3b04      	subgt	r3, #4
 8009100:	9305      	strgt	r3, [sp, #20]
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	f1a3 0302 	sub.w	r3, r3, #2
 8009108:	bfcc      	ite	gt
 800910a:	2500      	movgt	r5, #0
 800910c:	2501      	movle	r5, #1
 800910e:	2b03      	cmp	r3, #3
 8009110:	d869      	bhi.n	80091e6 <_dtoa_r+0x2c6>
 8009112:	e8df f003 	tbb	[pc, r3]
 8009116:	4e2c      	.short	0x4e2c
 8009118:	5a4c      	.short	0x5a4c
 800911a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800911e:	441d      	add	r5, r3
 8009120:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009124:	2b20      	cmp	r3, #32
 8009126:	bfc1      	itttt	gt
 8009128:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800912c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009130:	fa09 f303 	lslgt.w	r3, r9, r3
 8009134:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009138:	bfda      	itte	le
 800913a:	f1c3 0320 	rsble	r3, r3, #32
 800913e:	fa06 f003 	lslle.w	r0, r6, r3
 8009142:	4318      	orrgt	r0, r3
 8009144:	f7f7 f9fe 	bl	8000544 <__aeabi_ui2d>
 8009148:	2301      	movs	r3, #1
 800914a:	4606      	mov	r6, r0
 800914c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009150:	3d01      	subs	r5, #1
 8009152:	9310      	str	r3, [sp, #64]	; 0x40
 8009154:	e771      	b.n	800903a <_dtoa_r+0x11a>
 8009156:	2301      	movs	r3, #1
 8009158:	e7b6      	b.n	80090c8 <_dtoa_r+0x1a8>
 800915a:	900e      	str	r0, [sp, #56]	; 0x38
 800915c:	e7b5      	b.n	80090ca <_dtoa_r+0x1aa>
 800915e:	f1ca 0300 	rsb	r3, sl, #0
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	2300      	movs	r3, #0
 8009166:	eba8 080a 	sub.w	r8, r8, sl
 800916a:	930d      	str	r3, [sp, #52]	; 0x34
 800916c:	e7c2      	b.n	80090f4 <_dtoa_r+0x1d4>
 800916e:	2300      	movs	r3, #0
 8009170:	9308      	str	r3, [sp, #32]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc39      	bgt.n	80091ec <_dtoa_r+0x2cc>
 8009178:	f04f 0901 	mov.w	r9, #1
 800917c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009180:	464b      	mov	r3, r9
 8009182:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009186:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009188:	2200      	movs	r2, #0
 800918a:	6042      	str	r2, [r0, #4]
 800918c:	2204      	movs	r2, #4
 800918e:	f102 0614 	add.w	r6, r2, #20
 8009192:	429e      	cmp	r6, r3
 8009194:	6841      	ldr	r1, [r0, #4]
 8009196:	d92f      	bls.n	80091f8 <_dtoa_r+0x2d8>
 8009198:	4620      	mov	r0, r4
 800919a:	f001 fa85 	bl	800a6a8 <_Balloc>
 800919e:	9000      	str	r0, [sp, #0]
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d14b      	bne.n	800923c <_dtoa_r+0x31c>
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <_dtoa_r+0x318>)
 80091a6:	4602      	mov	r2, r0
 80091a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091ac:	e6d1      	b.n	8008f52 <_dtoa_r+0x32>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e7de      	b.n	8009170 <_dtoa_r+0x250>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	eb0a 0903 	add.w	r9, sl, r3
 80091bc:	f109 0301 	add.w	r3, r9, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	bfb8      	it	lt
 80091c6:	2301      	movlt	r3, #1
 80091c8:	e7dd      	b.n	8009186 <_dtoa_r+0x266>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7f2      	b.n	80091b4 <_dtoa_r+0x294>
 80091ce:	2501      	movs	r5, #1
 80091d0:	2300      	movs	r3, #0
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	9508      	str	r5, [sp, #32]
 80091d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80091da:	2200      	movs	r2, #0
 80091dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80091e0:	2312      	movs	r3, #18
 80091e2:	9209      	str	r2, [sp, #36]	; 0x24
 80091e4:	e7cf      	b.n	8009186 <_dtoa_r+0x266>
 80091e6:	2301      	movs	r3, #1
 80091e8:	9308      	str	r3, [sp, #32]
 80091ea:	e7f4      	b.n	80091d6 <_dtoa_r+0x2b6>
 80091ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80091f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80091f4:	464b      	mov	r3, r9
 80091f6:	e7c6      	b.n	8009186 <_dtoa_r+0x266>
 80091f8:	3101      	adds	r1, #1
 80091fa:	6041      	str	r1, [r0, #4]
 80091fc:	0052      	lsls	r2, r2, #1
 80091fe:	e7c6      	b.n	800918e <_dtoa_r+0x26e>
 8009200:	636f4361 	.word	0x636f4361
 8009204:	3fd287a7 	.word	0x3fd287a7
 8009208:	8b60c8b3 	.word	0x8b60c8b3
 800920c:	3fc68a28 	.word	0x3fc68a28
 8009210:	509f79fb 	.word	0x509f79fb
 8009214:	3fd34413 	.word	0x3fd34413
 8009218:	0800bb5d 	.word	0x0800bb5d
 800921c:	0800bd72 	.word	0x0800bd72
 8009220:	7ff00000 	.word	0x7ff00000
 8009224:	0800bd6e 	.word	0x0800bd6e
 8009228:	0800bd65 	.word	0x0800bd65
 800922c:	0800bb35 	.word	0x0800bb35
 8009230:	3ff80000 	.word	0x3ff80000
 8009234:	0800bf50 	.word	0x0800bf50
 8009238:	0800bdd1 	.word	0x0800bdd1
 800923c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800923e:	9a00      	ldr	r2, [sp, #0]
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	2b0e      	cmp	r3, #14
 8009246:	f200 80ad 	bhi.w	80093a4 <_dtoa_r+0x484>
 800924a:	2d00      	cmp	r5, #0
 800924c:	f000 80aa 	beq.w	80093a4 <_dtoa_r+0x484>
 8009250:	f1ba 0f00 	cmp.w	sl, #0
 8009254:	dd36      	ble.n	80092c4 <_dtoa_r+0x3a4>
 8009256:	4ac3      	ldr	r2, [pc, #780]	; (8009564 <_dtoa_r+0x644>)
 8009258:	f00a 030f 	and.w	r3, sl, #15
 800925c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009260:	ed93 7b00 	vldr	d7, [r3]
 8009264:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009268:	ea4f 172a 	mov.w	r7, sl, asr #4
 800926c:	eeb0 8a47 	vmov.f32	s16, s14
 8009270:	eef0 8a67 	vmov.f32	s17, s15
 8009274:	d016      	beq.n	80092a4 <_dtoa_r+0x384>
 8009276:	4bbc      	ldr	r3, [pc, #752]	; (8009568 <_dtoa_r+0x648>)
 8009278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800927c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009280:	f7f7 fb04 	bl	800088c <__aeabi_ddiv>
 8009284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009288:	f007 070f 	and.w	r7, r7, #15
 800928c:	2503      	movs	r5, #3
 800928e:	4eb6      	ldr	r6, [pc, #728]	; (8009568 <_dtoa_r+0x648>)
 8009290:	b957      	cbnz	r7, 80092a8 <_dtoa_r+0x388>
 8009292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009296:	ec53 2b18 	vmov	r2, r3, d8
 800929a:	f7f7 faf7 	bl	800088c <__aeabi_ddiv>
 800929e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a2:	e029      	b.n	80092f8 <_dtoa_r+0x3d8>
 80092a4:	2502      	movs	r5, #2
 80092a6:	e7f2      	b.n	800928e <_dtoa_r+0x36e>
 80092a8:	07f9      	lsls	r1, r7, #31
 80092aa:	d508      	bpl.n	80092be <_dtoa_r+0x39e>
 80092ac:	ec51 0b18 	vmov	r0, r1, d8
 80092b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092b4:	f7f7 f9c0 	bl	8000638 <__aeabi_dmul>
 80092b8:	ec41 0b18 	vmov	d8, r0, r1
 80092bc:	3501      	adds	r5, #1
 80092be:	107f      	asrs	r7, r7, #1
 80092c0:	3608      	adds	r6, #8
 80092c2:	e7e5      	b.n	8009290 <_dtoa_r+0x370>
 80092c4:	f000 80a6 	beq.w	8009414 <_dtoa_r+0x4f4>
 80092c8:	f1ca 0600 	rsb	r6, sl, #0
 80092cc:	4ba5      	ldr	r3, [pc, #660]	; (8009564 <_dtoa_r+0x644>)
 80092ce:	4fa6      	ldr	r7, [pc, #664]	; (8009568 <_dtoa_r+0x648>)
 80092d0:	f006 020f 	and.w	r2, r6, #15
 80092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092e0:	f7f7 f9aa 	bl	8000638 <__aeabi_dmul>
 80092e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e8:	1136      	asrs	r6, r6, #4
 80092ea:	2300      	movs	r3, #0
 80092ec:	2502      	movs	r5, #2
 80092ee:	2e00      	cmp	r6, #0
 80092f0:	f040 8085 	bne.w	80093fe <_dtoa_r+0x4de>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1d2      	bne.n	800929e <_dtoa_r+0x37e>
 80092f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 808c 	beq.w	8009418 <_dtoa_r+0x4f8>
 8009300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009304:	4b99      	ldr	r3, [pc, #612]	; (800956c <_dtoa_r+0x64c>)
 8009306:	2200      	movs	r2, #0
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f7 fc06 	bl	8000b1c <__aeabi_dcmplt>
 8009310:	2800      	cmp	r0, #0
 8009312:	f000 8081 	beq.w	8009418 <_dtoa_r+0x4f8>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d07d      	beq.n	8009418 <_dtoa_r+0x4f8>
 800931c:	f1b9 0f00 	cmp.w	r9, #0
 8009320:	dd3c      	ble.n	800939c <_dtoa_r+0x47c>
 8009322:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	2200      	movs	r2, #0
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <_dtoa_r+0x650>)
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 f982 	bl	8000638 <__aeabi_dmul>
 8009334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009338:	3501      	adds	r5, #1
 800933a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800933e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009342:	4628      	mov	r0, r5
 8009344:	f7f7 f90e 	bl	8000564 <__aeabi_i2d>
 8009348:	4632      	mov	r2, r6
 800934a:	463b      	mov	r3, r7
 800934c:	f7f7 f974 	bl	8000638 <__aeabi_dmul>
 8009350:	4b88      	ldr	r3, [pc, #544]	; (8009574 <_dtoa_r+0x654>)
 8009352:	2200      	movs	r2, #0
 8009354:	f7f6 ffba 	bl	80002cc <__adddf3>
 8009358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800935c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009364:	2b00      	cmp	r3, #0
 8009366:	d15c      	bne.n	8009422 <_dtoa_r+0x502>
 8009368:	4b83      	ldr	r3, [pc, #524]	; (8009578 <_dtoa_r+0x658>)
 800936a:	2200      	movs	r2, #0
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7f6 ffaa 	bl	80002c8 <__aeabi_dsub>
 8009374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009378:	4606      	mov	r6, r0
 800937a:	460f      	mov	r7, r1
 800937c:	f7f7 fbec 	bl	8000b58 <__aeabi_dcmpgt>
 8009380:	2800      	cmp	r0, #0
 8009382:	f040 8296 	bne.w	80098b2 <_dtoa_r+0x992>
 8009386:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800938a:	4630      	mov	r0, r6
 800938c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009390:	4639      	mov	r1, r7
 8009392:	f7f7 fbc3 	bl	8000b1c <__aeabi_dcmplt>
 8009396:	2800      	cmp	r0, #0
 8009398:	f040 8288 	bne.w	80098ac <_dtoa_r+0x98c>
 800939c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f2c0 8158 	blt.w	800965c <_dtoa_r+0x73c>
 80093ac:	f1ba 0f0e 	cmp.w	sl, #14
 80093b0:	f300 8154 	bgt.w	800965c <_dtoa_r+0x73c>
 80093b4:	4b6b      	ldr	r3, [pc, #428]	; (8009564 <_dtoa_r+0x644>)
 80093b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f280 80e3 	bge.w	800958c <_dtoa_r+0x66c>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f300 80df 	bgt.w	800958c <_dtoa_r+0x66c>
 80093ce:	f040 826d 	bne.w	80098ac <_dtoa_r+0x98c>
 80093d2:	4b69      	ldr	r3, [pc, #420]	; (8009578 <_dtoa_r+0x658>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f7 f92d 	bl	8000638 <__aeabi_dmul>
 80093de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e2:	f7f7 fbaf 	bl	8000b44 <__aeabi_dcmpge>
 80093e6:	9e01      	ldr	r6, [sp, #4]
 80093e8:	4637      	mov	r7, r6
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f040 8243 	bne.w	8009876 <_dtoa_r+0x956>
 80093f0:	9d00      	ldr	r5, [sp, #0]
 80093f2:	2331      	movs	r3, #49	; 0x31
 80093f4:	f805 3b01 	strb.w	r3, [r5], #1
 80093f8:	f10a 0a01 	add.w	sl, sl, #1
 80093fc:	e23f      	b.n	800987e <_dtoa_r+0x95e>
 80093fe:	07f2      	lsls	r2, r6, #31
 8009400:	d505      	bpl.n	800940e <_dtoa_r+0x4ee>
 8009402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	3501      	adds	r5, #1
 800940c:	2301      	movs	r3, #1
 800940e:	1076      	asrs	r6, r6, #1
 8009410:	3708      	adds	r7, #8
 8009412:	e76c      	b.n	80092ee <_dtoa_r+0x3ce>
 8009414:	2502      	movs	r5, #2
 8009416:	e76f      	b.n	80092f8 <_dtoa_r+0x3d8>
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	f8cd a01c 	str.w	sl, [sp, #28]
 800941e:	930c      	str	r3, [sp, #48]	; 0x30
 8009420:	e78d      	b.n	800933e <_dtoa_r+0x41e>
 8009422:	9900      	ldr	r1, [sp, #0]
 8009424:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009428:	4b4e      	ldr	r3, [pc, #312]	; (8009564 <_dtoa_r+0x644>)
 800942a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800942e:	4401      	add	r1, r0
 8009430:	9102      	str	r1, [sp, #8]
 8009432:	9908      	ldr	r1, [sp, #32]
 8009434:	eeb0 8a47 	vmov.f32	s16, s14
 8009438:	eef0 8a67 	vmov.f32	s17, s15
 800943c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009440:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009444:	2900      	cmp	r1, #0
 8009446:	d045      	beq.n	80094d4 <_dtoa_r+0x5b4>
 8009448:	494c      	ldr	r1, [pc, #304]	; (800957c <_dtoa_r+0x65c>)
 800944a:	2000      	movs	r0, #0
 800944c:	f7f7 fa1e 	bl	800088c <__aeabi_ddiv>
 8009450:	ec53 2b18 	vmov	r2, r3, d8
 8009454:	f7f6 ff38 	bl	80002c8 <__aeabi_dsub>
 8009458:	9d00      	ldr	r5, [sp, #0]
 800945a:	ec41 0b18 	vmov	d8, r0, r1
 800945e:	4639      	mov	r1, r7
 8009460:	4630      	mov	r0, r6
 8009462:	f7f7 fb99 	bl	8000b98 <__aeabi_d2iz>
 8009466:	900c      	str	r0, [sp, #48]	; 0x30
 8009468:	f7f7 f87c 	bl	8000564 <__aeabi_i2d>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f6 ff28 	bl	80002c8 <__aeabi_dsub>
 8009478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800947a:	3330      	adds	r3, #48	; 0x30
 800947c:	f805 3b01 	strb.w	r3, [r5], #1
 8009480:	ec53 2b18 	vmov	r2, r3, d8
 8009484:	4606      	mov	r6, r0
 8009486:	460f      	mov	r7, r1
 8009488:	f7f7 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800948c:	2800      	cmp	r0, #0
 800948e:	d165      	bne.n	800955c <_dtoa_r+0x63c>
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	4935      	ldr	r1, [pc, #212]	; (800956c <_dtoa_r+0x64c>)
 8009496:	2000      	movs	r0, #0
 8009498:	f7f6 ff16 	bl	80002c8 <__aeabi_dsub>
 800949c:	ec53 2b18 	vmov	r2, r3, d8
 80094a0:	f7f7 fb3c 	bl	8000b1c <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f040 80b9 	bne.w	800961c <_dtoa_r+0x6fc>
 80094aa:	9b02      	ldr	r3, [sp, #8]
 80094ac:	429d      	cmp	r5, r3
 80094ae:	f43f af75 	beq.w	800939c <_dtoa_r+0x47c>
 80094b2:	4b2f      	ldr	r3, [pc, #188]	; (8009570 <_dtoa_r+0x650>)
 80094b4:	ec51 0b18 	vmov	r0, r1, d8
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8bd 	bl	8000638 <__aeabi_dmul>
 80094be:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <_dtoa_r+0x650>)
 80094c0:	ec41 0b18 	vmov	d8, r0, r1
 80094c4:	2200      	movs	r2, #0
 80094c6:	4630      	mov	r0, r6
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f7 f8b5 	bl	8000638 <__aeabi_dmul>
 80094ce:	4606      	mov	r6, r0
 80094d0:	460f      	mov	r7, r1
 80094d2:	e7c4      	b.n	800945e <_dtoa_r+0x53e>
 80094d4:	ec51 0b17 	vmov	r0, r1, d7
 80094d8:	f7f7 f8ae 	bl	8000638 <__aeabi_dmul>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	9d00      	ldr	r5, [sp, #0]
 80094e0:	930c      	str	r3, [sp, #48]	; 0x30
 80094e2:	ec41 0b18 	vmov	d8, r0, r1
 80094e6:	4639      	mov	r1, r7
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7f7 fb55 	bl	8000b98 <__aeabi_d2iz>
 80094ee:	9011      	str	r0, [sp, #68]	; 0x44
 80094f0:	f7f7 f838 	bl	8000564 <__aeabi_i2d>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	f7f6 fee4 	bl	80002c8 <__aeabi_dsub>
 8009500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009502:	3330      	adds	r3, #48	; 0x30
 8009504:	f805 3b01 	strb.w	r3, [r5], #1
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	429d      	cmp	r5, r3
 800950c:	4606      	mov	r6, r0
 800950e:	460f      	mov	r7, r1
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	d134      	bne.n	8009580 <_dtoa_r+0x660>
 8009516:	4b19      	ldr	r3, [pc, #100]	; (800957c <_dtoa_r+0x65c>)
 8009518:	ec51 0b18 	vmov	r0, r1, d8
 800951c:	f7f6 fed6 	bl	80002cc <__adddf3>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 fb16 	bl	8000b58 <__aeabi_dcmpgt>
 800952c:	2800      	cmp	r0, #0
 800952e:	d175      	bne.n	800961c <_dtoa_r+0x6fc>
 8009530:	ec53 2b18 	vmov	r2, r3, d8
 8009534:	4911      	ldr	r1, [pc, #68]	; (800957c <_dtoa_r+0x65c>)
 8009536:	2000      	movs	r0, #0
 8009538:	f7f6 fec6 	bl	80002c8 <__aeabi_dsub>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 faea 	bl	8000b1c <__aeabi_dcmplt>
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f af27 	beq.w	800939c <_dtoa_r+0x47c>
 800954e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009550:	1e6b      	subs	r3, r5, #1
 8009552:	930c      	str	r3, [sp, #48]	; 0x30
 8009554:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009558:	2b30      	cmp	r3, #48	; 0x30
 800955a:	d0f8      	beq.n	800954e <_dtoa_r+0x62e>
 800955c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009560:	e04a      	b.n	80095f8 <_dtoa_r+0x6d8>
 8009562:	bf00      	nop
 8009564:	0800bf50 	.word	0x0800bf50
 8009568:	0800bf28 	.word	0x0800bf28
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	40240000 	.word	0x40240000
 8009574:	401c0000 	.word	0x401c0000
 8009578:	40140000 	.word	0x40140000
 800957c:	3fe00000 	.word	0x3fe00000
 8009580:	4baf      	ldr	r3, [pc, #700]	; (8009840 <_dtoa_r+0x920>)
 8009582:	f7f7 f859 	bl	8000638 <__aeabi_dmul>
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	e7ac      	b.n	80094e6 <_dtoa_r+0x5c6>
 800958c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009590:	9d00      	ldr	r5, [sp, #0]
 8009592:	4642      	mov	r2, r8
 8009594:	464b      	mov	r3, r9
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 f977 	bl	800088c <__aeabi_ddiv>
 800959e:	f7f7 fafb 	bl	8000b98 <__aeabi_d2iz>
 80095a2:	9002      	str	r0, [sp, #8]
 80095a4:	f7f6 ffde 	bl	8000564 <__aeabi_i2d>
 80095a8:	4642      	mov	r2, r8
 80095aa:	464b      	mov	r3, r9
 80095ac:	f7f7 f844 	bl	8000638 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	f7f6 fe86 	bl	80002c8 <__aeabi_dsub>
 80095bc:	9e02      	ldr	r6, [sp, #8]
 80095be:	9f01      	ldr	r7, [sp, #4]
 80095c0:	3630      	adds	r6, #48	; 0x30
 80095c2:	f805 6b01 	strb.w	r6, [r5], #1
 80095c6:	9e00      	ldr	r6, [sp, #0]
 80095c8:	1bae      	subs	r6, r5, r6
 80095ca:	42b7      	cmp	r7, r6
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	d137      	bne.n	8009642 <_dtoa_r+0x722>
 80095d2:	f7f6 fe7b 	bl	80002cc <__adddf3>
 80095d6:	4642      	mov	r2, r8
 80095d8:	464b      	mov	r3, r9
 80095da:	4606      	mov	r6, r0
 80095dc:	460f      	mov	r7, r1
 80095de:	f7f7 fabb 	bl	8000b58 <__aeabi_dcmpgt>
 80095e2:	b9c8      	cbnz	r0, 8009618 <_dtoa_r+0x6f8>
 80095e4:	4642      	mov	r2, r8
 80095e6:	464b      	mov	r3, r9
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 80095f0:	b110      	cbz	r0, 80095f8 <_dtoa_r+0x6d8>
 80095f2:	9b02      	ldr	r3, [sp, #8]
 80095f4:	07d9      	lsls	r1, r3, #31
 80095f6:	d40f      	bmi.n	8009618 <_dtoa_r+0x6f8>
 80095f8:	4620      	mov	r0, r4
 80095fa:	4659      	mov	r1, fp
 80095fc:	f001 f894 	bl	800a728 <_Bfree>
 8009600:	2300      	movs	r3, #0
 8009602:	702b      	strb	r3, [r5, #0]
 8009604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009606:	f10a 0001 	add.w	r0, sl, #1
 800960a:	6018      	str	r0, [r3, #0]
 800960c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800960e:	2b00      	cmp	r3, #0
 8009610:	f43f acd8 	beq.w	8008fc4 <_dtoa_r+0xa4>
 8009614:	601d      	str	r5, [r3, #0]
 8009616:	e4d5      	b.n	8008fc4 <_dtoa_r+0xa4>
 8009618:	f8cd a01c 	str.w	sl, [sp, #28]
 800961c:	462b      	mov	r3, r5
 800961e:	461d      	mov	r5, r3
 8009620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009624:	2a39      	cmp	r2, #57	; 0x39
 8009626:	d108      	bne.n	800963a <_dtoa_r+0x71a>
 8009628:	9a00      	ldr	r2, [sp, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d1f7      	bne.n	800961e <_dtoa_r+0x6fe>
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	9900      	ldr	r1, [sp, #0]
 8009632:	3201      	adds	r2, #1
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	2230      	movs	r2, #48	; 0x30
 8009638:	700a      	strb	r2, [r1, #0]
 800963a:	781a      	ldrb	r2, [r3, #0]
 800963c:	3201      	adds	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
 8009640:	e78c      	b.n	800955c <_dtoa_r+0x63c>
 8009642:	4b7f      	ldr	r3, [pc, #508]	; (8009840 <_dtoa_r+0x920>)
 8009644:	2200      	movs	r2, #0
 8009646:	f7f6 fff7 	bl	8000638 <__aeabi_dmul>
 800964a:	2200      	movs	r2, #0
 800964c:	2300      	movs	r3, #0
 800964e:	4606      	mov	r6, r0
 8009650:	460f      	mov	r7, r1
 8009652:	f7f7 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 8009656:	2800      	cmp	r0, #0
 8009658:	d09b      	beq.n	8009592 <_dtoa_r+0x672>
 800965a:	e7cd      	b.n	80095f8 <_dtoa_r+0x6d8>
 800965c:	9a08      	ldr	r2, [sp, #32]
 800965e:	2a00      	cmp	r2, #0
 8009660:	f000 80c4 	beq.w	80097ec <_dtoa_r+0x8cc>
 8009664:	9a05      	ldr	r2, [sp, #20]
 8009666:	2a01      	cmp	r2, #1
 8009668:	f300 80a8 	bgt.w	80097bc <_dtoa_r+0x89c>
 800966c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800966e:	2a00      	cmp	r2, #0
 8009670:	f000 80a0 	beq.w	80097b4 <_dtoa_r+0x894>
 8009674:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009678:	9e06      	ldr	r6, [sp, #24]
 800967a:	4645      	mov	r5, r8
 800967c:	9a04      	ldr	r2, [sp, #16]
 800967e:	2101      	movs	r1, #1
 8009680:	441a      	add	r2, r3
 8009682:	4620      	mov	r0, r4
 8009684:	4498      	add	r8, r3
 8009686:	9204      	str	r2, [sp, #16]
 8009688:	f001 f954 	bl	800a934 <__i2b>
 800968c:	4607      	mov	r7, r0
 800968e:	2d00      	cmp	r5, #0
 8009690:	dd0b      	ble.n	80096aa <_dtoa_r+0x78a>
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	dd08      	ble.n	80096aa <_dtoa_r+0x78a>
 8009698:	42ab      	cmp	r3, r5
 800969a:	9a04      	ldr	r2, [sp, #16]
 800969c:	bfa8      	it	ge
 800969e:	462b      	movge	r3, r5
 80096a0:	eba8 0803 	sub.w	r8, r8, r3
 80096a4:	1aed      	subs	r5, r5, r3
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	9b06      	ldr	r3, [sp, #24]
 80096ac:	b1fb      	cbz	r3, 80096ee <_dtoa_r+0x7ce>
 80096ae:	9b08      	ldr	r3, [sp, #32]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 809f 	beq.w	80097f4 <_dtoa_r+0x8d4>
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	dd11      	ble.n	80096de <_dtoa_r+0x7be>
 80096ba:	4639      	mov	r1, r7
 80096bc:	4632      	mov	r2, r6
 80096be:	4620      	mov	r0, r4
 80096c0:	f001 f9f4 	bl	800aaac <__pow5mult>
 80096c4:	465a      	mov	r2, fp
 80096c6:	4601      	mov	r1, r0
 80096c8:	4607      	mov	r7, r0
 80096ca:	4620      	mov	r0, r4
 80096cc:	f001 f948 	bl	800a960 <__multiply>
 80096d0:	4659      	mov	r1, fp
 80096d2:	9007      	str	r0, [sp, #28]
 80096d4:	4620      	mov	r0, r4
 80096d6:	f001 f827 	bl	800a728 <_Bfree>
 80096da:	9b07      	ldr	r3, [sp, #28]
 80096dc:	469b      	mov	fp, r3
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	1b9a      	subs	r2, r3, r6
 80096e2:	d004      	beq.n	80096ee <_dtoa_r+0x7ce>
 80096e4:	4659      	mov	r1, fp
 80096e6:	4620      	mov	r0, r4
 80096e8:	f001 f9e0 	bl	800aaac <__pow5mult>
 80096ec:	4683      	mov	fp, r0
 80096ee:	2101      	movs	r1, #1
 80096f0:	4620      	mov	r0, r4
 80096f2:	f001 f91f 	bl	800a934 <__i2b>
 80096f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	4606      	mov	r6, r0
 80096fc:	dd7c      	ble.n	80097f8 <_dtoa_r+0x8d8>
 80096fe:	461a      	mov	r2, r3
 8009700:	4601      	mov	r1, r0
 8009702:	4620      	mov	r0, r4
 8009704:	f001 f9d2 	bl	800aaac <__pow5mult>
 8009708:	9b05      	ldr	r3, [sp, #20]
 800970a:	2b01      	cmp	r3, #1
 800970c:	4606      	mov	r6, r0
 800970e:	dd76      	ble.n	80097fe <_dtoa_r+0x8de>
 8009710:	2300      	movs	r3, #0
 8009712:	9306      	str	r3, [sp, #24]
 8009714:	6933      	ldr	r3, [r6, #16]
 8009716:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800971a:	6918      	ldr	r0, [r3, #16]
 800971c:	f001 f8ba 	bl	800a894 <__hi0bits>
 8009720:	f1c0 0020 	rsb	r0, r0, #32
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	4418      	add	r0, r3
 8009728:	f010 001f 	ands.w	r0, r0, #31
 800972c:	f000 8086 	beq.w	800983c <_dtoa_r+0x91c>
 8009730:	f1c0 0320 	rsb	r3, r0, #32
 8009734:	2b04      	cmp	r3, #4
 8009736:	dd7f      	ble.n	8009838 <_dtoa_r+0x918>
 8009738:	f1c0 001c 	rsb	r0, r0, #28
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	4403      	add	r3, r0
 8009740:	4480      	add	r8, r0
 8009742:	4405      	add	r5, r0
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	f1b8 0f00 	cmp.w	r8, #0
 800974a:	dd05      	ble.n	8009758 <_dtoa_r+0x838>
 800974c:	4659      	mov	r1, fp
 800974e:	4642      	mov	r2, r8
 8009750:	4620      	mov	r0, r4
 8009752:	f001 fa05 	bl	800ab60 <__lshift>
 8009756:	4683      	mov	fp, r0
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd05      	ble.n	800976a <_dtoa_r+0x84a>
 800975e:	4631      	mov	r1, r6
 8009760:	461a      	mov	r2, r3
 8009762:	4620      	mov	r0, r4
 8009764:	f001 f9fc 	bl	800ab60 <__lshift>
 8009768:	4606      	mov	r6, r0
 800976a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d069      	beq.n	8009844 <_dtoa_r+0x924>
 8009770:	4631      	mov	r1, r6
 8009772:	4658      	mov	r0, fp
 8009774:	f001 fa60 	bl	800ac38 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	da63      	bge.n	8009844 <_dtoa_r+0x924>
 800977c:	2300      	movs	r3, #0
 800977e:	4659      	mov	r1, fp
 8009780:	220a      	movs	r2, #10
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fff2 	bl	800a76c <__multadd>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800978e:	4683      	mov	fp, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 818f 	beq.w	8009ab4 <_dtoa_r+0xb94>
 8009796:	4639      	mov	r1, r7
 8009798:	2300      	movs	r3, #0
 800979a:	220a      	movs	r2, #10
 800979c:	4620      	mov	r0, r4
 800979e:	f000 ffe5 	bl	800a76c <__multadd>
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	4607      	mov	r7, r0
 80097a8:	f300 808e 	bgt.w	80098c8 <_dtoa_r+0x9a8>
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	dc50      	bgt.n	8009854 <_dtoa_r+0x934>
 80097b2:	e089      	b.n	80098c8 <_dtoa_r+0x9a8>
 80097b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097ba:	e75d      	b.n	8009678 <_dtoa_r+0x758>
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	1e5e      	subs	r6, r3, #1
 80097c0:	9b06      	ldr	r3, [sp, #24]
 80097c2:	42b3      	cmp	r3, r6
 80097c4:	bfbf      	itttt	lt
 80097c6:	9b06      	ldrlt	r3, [sp, #24]
 80097c8:	9606      	strlt	r6, [sp, #24]
 80097ca:	1af2      	sublt	r2, r6, r3
 80097cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80097ce:	bfb6      	itet	lt
 80097d0:	189b      	addlt	r3, r3, r2
 80097d2:	1b9e      	subge	r6, r3, r6
 80097d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	bfb8      	it	lt
 80097da:	2600      	movlt	r6, #0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfb5      	itete	lt
 80097e0:	eba8 0503 	sublt.w	r5, r8, r3
 80097e4:	9b01      	ldrge	r3, [sp, #4]
 80097e6:	2300      	movlt	r3, #0
 80097e8:	4645      	movge	r5, r8
 80097ea:	e747      	b.n	800967c <_dtoa_r+0x75c>
 80097ec:	9e06      	ldr	r6, [sp, #24]
 80097ee:	9f08      	ldr	r7, [sp, #32]
 80097f0:	4645      	mov	r5, r8
 80097f2:	e74c      	b.n	800968e <_dtoa_r+0x76e>
 80097f4:	9a06      	ldr	r2, [sp, #24]
 80097f6:	e775      	b.n	80096e4 <_dtoa_r+0x7c4>
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	dc18      	bgt.n	8009830 <_dtoa_r+0x910>
 80097fe:	9b02      	ldr	r3, [sp, #8]
 8009800:	b9b3      	cbnz	r3, 8009830 <_dtoa_r+0x910>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009808:	b9a3      	cbnz	r3, 8009834 <_dtoa_r+0x914>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009810:	0d1b      	lsrs	r3, r3, #20
 8009812:	051b      	lsls	r3, r3, #20
 8009814:	b12b      	cbz	r3, 8009822 <_dtoa_r+0x902>
 8009816:	9b04      	ldr	r3, [sp, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	f108 0801 	add.w	r8, r8, #1
 8009820:	2301      	movs	r3, #1
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009826:	2b00      	cmp	r3, #0
 8009828:	f47f af74 	bne.w	8009714 <_dtoa_r+0x7f4>
 800982c:	2001      	movs	r0, #1
 800982e:	e779      	b.n	8009724 <_dtoa_r+0x804>
 8009830:	2300      	movs	r3, #0
 8009832:	e7f6      	b.n	8009822 <_dtoa_r+0x902>
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	e7f4      	b.n	8009822 <_dtoa_r+0x902>
 8009838:	d085      	beq.n	8009746 <_dtoa_r+0x826>
 800983a:	4618      	mov	r0, r3
 800983c:	301c      	adds	r0, #28
 800983e:	e77d      	b.n	800973c <_dtoa_r+0x81c>
 8009840:	40240000 	.word	0x40240000
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc38      	bgt.n	80098bc <_dtoa_r+0x99c>
 800984a:	9b05      	ldr	r3, [sp, #20]
 800984c:	2b02      	cmp	r3, #2
 800984e:	dd35      	ble.n	80098bc <_dtoa_r+0x99c>
 8009850:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d10d      	bne.n	8009876 <_dtoa_r+0x956>
 800985a:	4631      	mov	r1, r6
 800985c:	464b      	mov	r3, r9
 800985e:	2205      	movs	r2, #5
 8009860:	4620      	mov	r0, r4
 8009862:	f000 ff83 	bl	800a76c <__multadd>
 8009866:	4601      	mov	r1, r0
 8009868:	4606      	mov	r6, r0
 800986a:	4658      	mov	r0, fp
 800986c:	f001 f9e4 	bl	800ac38 <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	f73f adbd 	bgt.w	80093f0 <_dtoa_r+0x4d0>
 8009876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009878:	9d00      	ldr	r5, [sp, #0]
 800987a:	ea6f 0a03 	mvn.w	sl, r3
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	4631      	mov	r1, r6
 8009884:	4620      	mov	r0, r4
 8009886:	f000 ff4f 	bl	800a728 <_Bfree>
 800988a:	2f00      	cmp	r7, #0
 800988c:	f43f aeb4 	beq.w	80095f8 <_dtoa_r+0x6d8>
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	d005      	beq.n	80098a2 <_dtoa_r+0x982>
 8009896:	45b8      	cmp	r8, r7
 8009898:	d003      	beq.n	80098a2 <_dtoa_r+0x982>
 800989a:	4641      	mov	r1, r8
 800989c:	4620      	mov	r0, r4
 800989e:	f000 ff43 	bl	800a728 <_Bfree>
 80098a2:	4639      	mov	r1, r7
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 ff3f 	bl	800a728 <_Bfree>
 80098aa:	e6a5      	b.n	80095f8 <_dtoa_r+0x6d8>
 80098ac:	2600      	movs	r6, #0
 80098ae:	4637      	mov	r7, r6
 80098b0:	e7e1      	b.n	8009876 <_dtoa_r+0x956>
 80098b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80098b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80098b8:	4637      	mov	r7, r6
 80098ba:	e599      	b.n	80093f0 <_dtoa_r+0x4d0>
 80098bc:	9b08      	ldr	r3, [sp, #32]
 80098be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80fd 	beq.w	8009ac2 <_dtoa_r+0xba2>
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	dd05      	ble.n	80098d8 <_dtoa_r+0x9b8>
 80098cc:	4639      	mov	r1, r7
 80098ce:	462a      	mov	r2, r5
 80098d0:	4620      	mov	r0, r4
 80098d2:	f001 f945 	bl	800ab60 <__lshift>
 80098d6:	4607      	mov	r7, r0
 80098d8:	9b06      	ldr	r3, [sp, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d05c      	beq.n	8009998 <_dtoa_r+0xa78>
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fee1 	bl	800a6a8 <_Balloc>
 80098e6:	4605      	mov	r5, r0
 80098e8:	b928      	cbnz	r0, 80098f6 <_dtoa_r+0x9d6>
 80098ea:	4b80      	ldr	r3, [pc, #512]	; (8009aec <_dtoa_r+0xbcc>)
 80098ec:	4602      	mov	r2, r0
 80098ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80098f2:	f7ff bb2e 	b.w	8008f52 <_dtoa_r+0x32>
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	3202      	adds	r2, #2
 80098fa:	0092      	lsls	r2, r2, #2
 80098fc:	f107 010c 	add.w	r1, r7, #12
 8009900:	300c      	adds	r0, #12
 8009902:	f000 feb7 	bl	800a674 <memcpy>
 8009906:	2201      	movs	r2, #1
 8009908:	4629      	mov	r1, r5
 800990a:	4620      	mov	r0, r4
 800990c:	f001 f928 	bl	800ab60 <__lshift>
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	3301      	adds	r3, #1
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	9b00      	ldr	r3, [sp, #0]
 8009918:	444b      	add	r3, r9
 800991a:	9307      	str	r3, [sp, #28]
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	46b8      	mov	r8, r7
 8009924:	9306      	str	r3, [sp, #24]
 8009926:	4607      	mov	r7, r0
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	4631      	mov	r1, r6
 800992c:	3b01      	subs	r3, #1
 800992e:	4658      	mov	r0, fp
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	f7ff fa69 	bl	8008e08 <quorem>
 8009936:	4603      	mov	r3, r0
 8009938:	3330      	adds	r3, #48	; 0x30
 800993a:	9004      	str	r0, [sp, #16]
 800993c:	4641      	mov	r1, r8
 800993e:	4658      	mov	r0, fp
 8009940:	9308      	str	r3, [sp, #32]
 8009942:	f001 f979 	bl	800ac38 <__mcmp>
 8009946:	463a      	mov	r2, r7
 8009948:	4681      	mov	r9, r0
 800994a:	4631      	mov	r1, r6
 800994c:	4620      	mov	r0, r4
 800994e:	f001 f98f 	bl	800ac70 <__mdiff>
 8009952:	68c2      	ldr	r2, [r0, #12]
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	4605      	mov	r5, r0
 8009958:	bb02      	cbnz	r2, 800999c <_dtoa_r+0xa7c>
 800995a:	4601      	mov	r1, r0
 800995c:	4658      	mov	r0, fp
 800995e:	f001 f96b 	bl	800ac38 <__mcmp>
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	4602      	mov	r2, r0
 8009966:	4629      	mov	r1, r5
 8009968:	4620      	mov	r0, r4
 800996a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800996e:	f000 fedb 	bl	800a728 <_Bfree>
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009976:	9d01      	ldr	r5, [sp, #4]
 8009978:	ea43 0102 	orr.w	r1, r3, r2
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	430b      	orrs	r3, r1
 8009980:	9b08      	ldr	r3, [sp, #32]
 8009982:	d10d      	bne.n	80099a0 <_dtoa_r+0xa80>
 8009984:	2b39      	cmp	r3, #57	; 0x39
 8009986:	d029      	beq.n	80099dc <_dtoa_r+0xabc>
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	dd01      	ble.n	8009992 <_dtoa_r+0xa72>
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	3331      	adds	r3, #49	; 0x31
 8009992:	9a02      	ldr	r2, [sp, #8]
 8009994:	7013      	strb	r3, [r2, #0]
 8009996:	e774      	b.n	8009882 <_dtoa_r+0x962>
 8009998:	4638      	mov	r0, r7
 800999a:	e7b9      	b.n	8009910 <_dtoa_r+0x9f0>
 800999c:	2201      	movs	r2, #1
 800999e:	e7e2      	b.n	8009966 <_dtoa_r+0xa46>
 80099a0:	f1b9 0f00 	cmp.w	r9, #0
 80099a4:	db06      	blt.n	80099b4 <_dtoa_r+0xa94>
 80099a6:	9905      	ldr	r1, [sp, #20]
 80099a8:	ea41 0909 	orr.w	r9, r1, r9
 80099ac:	9906      	ldr	r1, [sp, #24]
 80099ae:	ea59 0101 	orrs.w	r1, r9, r1
 80099b2:	d120      	bne.n	80099f6 <_dtoa_r+0xad6>
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	ddec      	ble.n	8009992 <_dtoa_r+0xa72>
 80099b8:	4659      	mov	r1, fp
 80099ba:	2201      	movs	r2, #1
 80099bc:	4620      	mov	r0, r4
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	f001 f8ce 	bl	800ab60 <__lshift>
 80099c4:	4631      	mov	r1, r6
 80099c6:	4683      	mov	fp, r0
 80099c8:	f001 f936 	bl	800ac38 <__mcmp>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	dc02      	bgt.n	80099d8 <_dtoa_r+0xab8>
 80099d2:	d1de      	bne.n	8009992 <_dtoa_r+0xa72>
 80099d4:	07da      	lsls	r2, r3, #31
 80099d6:	d5dc      	bpl.n	8009992 <_dtoa_r+0xa72>
 80099d8:	2b39      	cmp	r3, #57	; 0x39
 80099da:	d1d8      	bne.n	800998e <_dtoa_r+0xa6e>
 80099dc:	9a02      	ldr	r2, [sp, #8]
 80099de:	2339      	movs	r3, #57	; 0x39
 80099e0:	7013      	strb	r3, [r2, #0]
 80099e2:	462b      	mov	r3, r5
 80099e4:	461d      	mov	r5, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099ec:	2a39      	cmp	r2, #57	; 0x39
 80099ee:	d050      	beq.n	8009a92 <_dtoa_r+0xb72>
 80099f0:	3201      	adds	r2, #1
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	e745      	b.n	8009882 <_dtoa_r+0x962>
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	dd03      	ble.n	8009a02 <_dtoa_r+0xae2>
 80099fa:	2b39      	cmp	r3, #57	; 0x39
 80099fc:	d0ee      	beq.n	80099dc <_dtoa_r+0xabc>
 80099fe:	3301      	adds	r3, #1
 8009a00:	e7c7      	b.n	8009992 <_dtoa_r+0xa72>
 8009a02:	9a01      	ldr	r2, [sp, #4]
 8009a04:	9907      	ldr	r1, [sp, #28]
 8009a06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a0a:	428a      	cmp	r2, r1
 8009a0c:	d02a      	beq.n	8009a64 <_dtoa_r+0xb44>
 8009a0e:	4659      	mov	r1, fp
 8009a10:	2300      	movs	r3, #0
 8009a12:	220a      	movs	r2, #10
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 fea9 	bl	800a76c <__multadd>
 8009a1a:	45b8      	cmp	r8, r7
 8009a1c:	4683      	mov	fp, r0
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	f04f 020a 	mov.w	r2, #10
 8009a26:	4641      	mov	r1, r8
 8009a28:	4620      	mov	r0, r4
 8009a2a:	d107      	bne.n	8009a3c <_dtoa_r+0xb1c>
 8009a2c:	f000 fe9e 	bl	800a76c <__multadd>
 8009a30:	4680      	mov	r8, r0
 8009a32:	4607      	mov	r7, r0
 8009a34:	9b01      	ldr	r3, [sp, #4]
 8009a36:	3301      	adds	r3, #1
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	e775      	b.n	8009928 <_dtoa_r+0xa08>
 8009a3c:	f000 fe96 	bl	800a76c <__multadd>
 8009a40:	4639      	mov	r1, r7
 8009a42:	4680      	mov	r8, r0
 8009a44:	2300      	movs	r3, #0
 8009a46:	220a      	movs	r2, #10
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fe8f 	bl	800a76c <__multadd>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	e7f0      	b.n	8009a34 <_dtoa_r+0xb14>
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	9a00      	ldr	r2, [sp, #0]
 8009a58:	bfcc      	ite	gt
 8009a5a:	464d      	movgt	r5, r9
 8009a5c:	2501      	movle	r5, #1
 8009a5e:	4415      	add	r5, r2
 8009a60:	f04f 0800 	mov.w	r8, #0
 8009a64:	4659      	mov	r1, fp
 8009a66:	2201      	movs	r2, #1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	f001 f878 	bl	800ab60 <__lshift>
 8009a70:	4631      	mov	r1, r6
 8009a72:	4683      	mov	fp, r0
 8009a74:	f001 f8e0 	bl	800ac38 <__mcmp>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	dcb2      	bgt.n	80099e2 <_dtoa_r+0xac2>
 8009a7c:	d102      	bne.n	8009a84 <_dtoa_r+0xb64>
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	07db      	lsls	r3, r3, #31
 8009a82:	d4ae      	bmi.n	80099e2 <_dtoa_r+0xac2>
 8009a84:	462b      	mov	r3, r5
 8009a86:	461d      	mov	r5, r3
 8009a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a8c:	2a30      	cmp	r2, #48	; 0x30
 8009a8e:	d0fa      	beq.n	8009a86 <_dtoa_r+0xb66>
 8009a90:	e6f7      	b.n	8009882 <_dtoa_r+0x962>
 8009a92:	9a00      	ldr	r2, [sp, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d1a5      	bne.n	80099e4 <_dtoa_r+0xac4>
 8009a98:	f10a 0a01 	add.w	sl, sl, #1
 8009a9c:	2331      	movs	r3, #49	; 0x31
 8009a9e:	e779      	b.n	8009994 <_dtoa_r+0xa74>
 8009aa0:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <_dtoa_r+0xbd0>)
 8009aa2:	f7ff baaf 	b.w	8009004 <_dtoa_r+0xe4>
 8009aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f47f aa86 	bne.w	8008fba <_dtoa_r+0x9a>
 8009aae:	4b11      	ldr	r3, [pc, #68]	; (8009af4 <_dtoa_r+0xbd4>)
 8009ab0:	f7ff baa8 	b.w	8009004 <_dtoa_r+0xe4>
 8009ab4:	f1b9 0f00 	cmp.w	r9, #0
 8009ab8:	dc03      	bgt.n	8009ac2 <_dtoa_r+0xba2>
 8009aba:	9b05      	ldr	r3, [sp, #20]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	f73f aec9 	bgt.w	8009854 <_dtoa_r+0x934>
 8009ac2:	9d00      	ldr	r5, [sp, #0]
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	f7ff f99e 	bl	8008e08 <quorem>
 8009acc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009ad0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ad4:	9a00      	ldr	r2, [sp, #0]
 8009ad6:	1aaa      	subs	r2, r5, r2
 8009ad8:	4591      	cmp	r9, r2
 8009ada:	ddba      	ble.n	8009a52 <_dtoa_r+0xb32>
 8009adc:	4659      	mov	r1, fp
 8009ade:	2300      	movs	r3, #0
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 fe42 	bl	800a76c <__multadd>
 8009ae8:	4683      	mov	fp, r0
 8009aea:	e7eb      	b.n	8009ac4 <_dtoa_r+0xba4>
 8009aec:	0800bdd1 	.word	0x0800bdd1
 8009af0:	0800bb34 	.word	0x0800bb34
 8009af4:	0800bd65 	.word	0x0800bd65

08009af8 <__sflush_r>:
 8009af8:	898a      	ldrh	r2, [r1, #12]
 8009afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afe:	4605      	mov	r5, r0
 8009b00:	0710      	lsls	r0, r2, #28
 8009b02:	460c      	mov	r4, r1
 8009b04:	d458      	bmi.n	8009bb8 <__sflush_r+0xc0>
 8009b06:	684b      	ldr	r3, [r1, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dc05      	bgt.n	8009b18 <__sflush_r+0x20>
 8009b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dc02      	bgt.n	8009b18 <__sflush_r+0x20>
 8009b12:	2000      	movs	r0, #0
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	d0f9      	beq.n	8009b12 <__sflush_r+0x1a>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b24:	682f      	ldr	r7, [r5, #0]
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	d032      	beq.n	8009b90 <__sflush_r+0x98>
 8009b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	075a      	lsls	r2, r3, #29
 8009b30:	d505      	bpl.n	8009b3e <__sflush_r+0x46>
 8009b32:	6863      	ldr	r3, [r4, #4]
 8009b34:	1ac0      	subs	r0, r0, r3
 8009b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b38:	b10b      	cbz	r3, 8009b3e <__sflush_r+0x46>
 8009b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b3c:	1ac0      	subs	r0, r0, r3
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4602      	mov	r2, r0
 8009b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b44:	6a21      	ldr	r1, [r4, #32]
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b0      	blx	r6
 8009b4a:	1c43      	adds	r3, r0, #1
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	d106      	bne.n	8009b5e <__sflush_r+0x66>
 8009b50:	6829      	ldr	r1, [r5, #0]
 8009b52:	291d      	cmp	r1, #29
 8009b54:	d82c      	bhi.n	8009bb0 <__sflush_r+0xb8>
 8009b56:	4a2a      	ldr	r2, [pc, #168]	; (8009c00 <__sflush_r+0x108>)
 8009b58:	40ca      	lsrs	r2, r1
 8009b5a:	07d6      	lsls	r6, r2, #31
 8009b5c:	d528      	bpl.n	8009bb0 <__sflush_r+0xb8>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	6062      	str	r2, [r4, #4]
 8009b62:	04d9      	lsls	r1, r3, #19
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	d504      	bpl.n	8009b74 <__sflush_r+0x7c>
 8009b6a:	1c42      	adds	r2, r0, #1
 8009b6c:	d101      	bne.n	8009b72 <__sflush_r+0x7a>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b903      	cbnz	r3, 8009b74 <__sflush_r+0x7c>
 8009b72:	6560      	str	r0, [r4, #84]	; 0x54
 8009b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b76:	602f      	str	r7, [r5, #0]
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d0ca      	beq.n	8009b12 <__sflush_r+0x1a>
 8009b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b80:	4299      	cmp	r1, r3
 8009b82:	d002      	beq.n	8009b8a <__sflush_r+0x92>
 8009b84:	4628      	mov	r0, r5
 8009b86:	f001 fa4b 	bl	800b020 <_free_r>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b8e:	e7c1      	b.n	8009b14 <__sflush_r+0x1c>
 8009b90:	6a21      	ldr	r1, [r4, #32]
 8009b92:	2301      	movs	r3, #1
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b0      	blx	r6
 8009b98:	1c41      	adds	r1, r0, #1
 8009b9a:	d1c7      	bne.n	8009b2c <__sflush_r+0x34>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0c4      	beq.n	8009b2c <__sflush_r+0x34>
 8009ba2:	2b1d      	cmp	r3, #29
 8009ba4:	d001      	beq.n	8009baa <__sflush_r+0xb2>
 8009ba6:	2b16      	cmp	r3, #22
 8009ba8:	d101      	bne.n	8009bae <__sflush_r+0xb6>
 8009baa:	602f      	str	r7, [r5, #0]
 8009bac:	e7b1      	b.n	8009b12 <__sflush_r+0x1a>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb4:	81a3      	strh	r3, [r4, #12]
 8009bb6:	e7ad      	b.n	8009b14 <__sflush_r+0x1c>
 8009bb8:	690f      	ldr	r7, [r1, #16]
 8009bba:	2f00      	cmp	r7, #0
 8009bbc:	d0a9      	beq.n	8009b12 <__sflush_r+0x1a>
 8009bbe:	0793      	lsls	r3, r2, #30
 8009bc0:	680e      	ldr	r6, [r1, #0]
 8009bc2:	bf08      	it	eq
 8009bc4:	694b      	ldreq	r3, [r1, #20]
 8009bc6:	600f      	str	r7, [r1, #0]
 8009bc8:	bf18      	it	ne
 8009bca:	2300      	movne	r3, #0
 8009bcc:	eba6 0807 	sub.w	r8, r6, r7
 8009bd0:	608b      	str	r3, [r1, #8]
 8009bd2:	f1b8 0f00 	cmp.w	r8, #0
 8009bd6:	dd9c      	ble.n	8009b12 <__sflush_r+0x1a>
 8009bd8:	6a21      	ldr	r1, [r4, #32]
 8009bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bdc:	4643      	mov	r3, r8
 8009bde:	463a      	mov	r2, r7
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b0      	blx	r6
 8009be4:	2800      	cmp	r0, #0
 8009be6:	dc06      	bgt.n	8009bf6 <__sflush_r+0xfe>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bf4:	e78e      	b.n	8009b14 <__sflush_r+0x1c>
 8009bf6:	4407      	add	r7, r0
 8009bf8:	eba8 0800 	sub.w	r8, r8, r0
 8009bfc:	e7e9      	b.n	8009bd2 <__sflush_r+0xda>
 8009bfe:	bf00      	nop
 8009c00:	20400001 	.word	0x20400001

08009c04 <_fflush_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	690b      	ldr	r3, [r1, #16]
 8009c08:	4605      	mov	r5, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	b913      	cbnz	r3, 8009c14 <_fflush_r+0x10>
 8009c0e:	2500      	movs	r5, #0
 8009c10:	4628      	mov	r0, r5
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	b118      	cbz	r0, 8009c1e <_fflush_r+0x1a>
 8009c16:	6983      	ldr	r3, [r0, #24]
 8009c18:	b90b      	cbnz	r3, 8009c1e <_fflush_r+0x1a>
 8009c1a:	f000 f887 	bl	8009d2c <__sinit>
 8009c1e:	4b14      	ldr	r3, [pc, #80]	; (8009c70 <_fflush_r+0x6c>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	d11b      	bne.n	8009c5c <_fflush_r+0x58>
 8009c24:	686c      	ldr	r4, [r5, #4]
 8009c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0ef      	beq.n	8009c0e <_fflush_r+0xa>
 8009c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c30:	07d0      	lsls	r0, r2, #31
 8009c32:	d404      	bmi.n	8009c3e <_fflush_r+0x3a>
 8009c34:	0599      	lsls	r1, r3, #22
 8009c36:	d402      	bmi.n	8009c3e <_fflush_r+0x3a>
 8009c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3a:	f000 fc9a 	bl	800a572 <__retarget_lock_acquire_recursive>
 8009c3e:	4628      	mov	r0, r5
 8009c40:	4621      	mov	r1, r4
 8009c42:	f7ff ff59 	bl	8009af8 <__sflush_r>
 8009c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c48:	07da      	lsls	r2, r3, #31
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	d4e0      	bmi.n	8009c10 <_fflush_r+0xc>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	059b      	lsls	r3, r3, #22
 8009c52:	d4dd      	bmi.n	8009c10 <_fflush_r+0xc>
 8009c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c56:	f000 fc8d 	bl	800a574 <__retarget_lock_release_recursive>
 8009c5a:	e7d9      	b.n	8009c10 <_fflush_r+0xc>
 8009c5c:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <_fflush_r+0x70>)
 8009c5e:	429c      	cmp	r4, r3
 8009c60:	d101      	bne.n	8009c66 <_fflush_r+0x62>
 8009c62:	68ac      	ldr	r4, [r5, #8]
 8009c64:	e7df      	b.n	8009c26 <_fflush_r+0x22>
 8009c66:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <_fflush_r+0x74>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	bf08      	it	eq
 8009c6c:	68ec      	ldreq	r4, [r5, #12]
 8009c6e:	e7da      	b.n	8009c26 <_fflush_r+0x22>
 8009c70:	0800be04 	.word	0x0800be04
 8009c74:	0800be24 	.word	0x0800be24
 8009c78:	0800bde4 	.word	0x0800bde4

08009c7c <std>:
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	e9c0 3300 	strd	r3, r3, [r0]
 8009c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c8a:	6083      	str	r3, [r0, #8]
 8009c8c:	8181      	strh	r1, [r0, #12]
 8009c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c90:	81c2      	strh	r2, [r0, #14]
 8009c92:	6183      	str	r3, [r0, #24]
 8009c94:	4619      	mov	r1, r3
 8009c96:	2208      	movs	r2, #8
 8009c98:	305c      	adds	r0, #92	; 0x5c
 8009c9a:	f7fd f933 	bl	8006f04 <memset>
 8009c9e:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <std+0x38>)
 8009ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ca2:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <std+0x3c>)
 8009ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <std+0x40>)
 8009ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <std+0x44>)
 8009cac:	6224      	str	r4, [r4, #32]
 8009cae:	6323      	str	r3, [r4, #48]	; 0x30
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800b641 	.word	0x0800b641
 8009cb8:	0800b663 	.word	0x0800b663
 8009cbc:	0800b69b 	.word	0x0800b69b
 8009cc0:	0800b6bf 	.word	0x0800b6bf

08009cc4 <_cleanup_r>:
 8009cc4:	4901      	ldr	r1, [pc, #4]	; (8009ccc <_cleanup_r+0x8>)
 8009cc6:	f000 b8c1 	b.w	8009e4c <_fwalk_reent>
 8009cca:	bf00      	nop
 8009ccc:	08009c05 	.word	0x08009c05

08009cd0 <__sfmoreglue>:
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	1e4a      	subs	r2, r1, #1
 8009cd4:	2568      	movs	r5, #104	; 0x68
 8009cd6:	4355      	muls	r5, r2
 8009cd8:	460e      	mov	r6, r1
 8009cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cde:	f7fd f929 	bl	8006f34 <_malloc_r>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	b140      	cbz	r0, 8009cf8 <__sfmoreglue+0x28>
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8009cec:	300c      	adds	r0, #12
 8009cee:	60a0      	str	r0, [r4, #8]
 8009cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cf4:	f7fd f906 	bl	8006f04 <memset>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}

08009cfc <__sfp_lock_acquire>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__sfp_lock_acquire+0x8>)
 8009cfe:	f000 bc38 	b.w	800a572 <__retarget_lock_acquire_recursive>
 8009d02:	bf00      	nop
 8009d04:	200005e8 	.word	0x200005e8

08009d08 <__sfp_lock_release>:
 8009d08:	4801      	ldr	r0, [pc, #4]	; (8009d10 <__sfp_lock_release+0x8>)
 8009d0a:	f000 bc33 	b.w	800a574 <__retarget_lock_release_recursive>
 8009d0e:	bf00      	nop
 8009d10:	200005e8 	.word	0x200005e8

08009d14 <__sinit_lock_acquire>:
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__sinit_lock_acquire+0x8>)
 8009d16:	f000 bc2c 	b.w	800a572 <__retarget_lock_acquire_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	200005e3 	.word	0x200005e3

08009d20 <__sinit_lock_release>:
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__sinit_lock_release+0x8>)
 8009d22:	f000 bc27 	b.w	800a574 <__retarget_lock_release_recursive>
 8009d26:	bf00      	nop
 8009d28:	200005e3 	.word	0x200005e3

08009d2c <__sinit>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	f7ff fff0 	bl	8009d14 <__sinit_lock_acquire>
 8009d34:	69a3      	ldr	r3, [r4, #24]
 8009d36:	b11b      	cbz	r3, 8009d40 <__sinit+0x14>
 8009d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3c:	f7ff bff0 	b.w	8009d20 <__sinit_lock_release>
 8009d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d44:	6523      	str	r3, [r4, #80]	; 0x50
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <__sinit+0x68>)
 8009d48:	4a13      	ldr	r2, [pc, #76]	; (8009d98 <__sinit+0x6c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	bf04      	itt	eq
 8009d52:	2301      	moveq	r3, #1
 8009d54:	61a3      	streq	r3, [r4, #24]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 f820 	bl	8009d9c <__sfp>
 8009d5c:	6060      	str	r0, [r4, #4]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 f81c 	bl	8009d9c <__sfp>
 8009d64:	60a0      	str	r0, [r4, #8]
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 f818 	bl	8009d9c <__sfp>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	60e0      	str	r0, [r4, #12]
 8009d70:	2104      	movs	r1, #4
 8009d72:	6860      	ldr	r0, [r4, #4]
 8009d74:	f7ff ff82 	bl	8009c7c <std>
 8009d78:	68a0      	ldr	r0, [r4, #8]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	2109      	movs	r1, #9
 8009d7e:	f7ff ff7d 	bl	8009c7c <std>
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	2202      	movs	r2, #2
 8009d86:	2112      	movs	r1, #18
 8009d88:	f7ff ff78 	bl	8009c7c <std>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	61a3      	str	r3, [r4, #24]
 8009d90:	e7d2      	b.n	8009d38 <__sinit+0xc>
 8009d92:	bf00      	nop
 8009d94:	0800bb20 	.word	0x0800bb20
 8009d98:	08009cc5 	.word	0x08009cc5

08009d9c <__sfp>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	4607      	mov	r7, r0
 8009da0:	f7ff ffac 	bl	8009cfc <__sfp_lock_acquire>
 8009da4:	4b1e      	ldr	r3, [pc, #120]	; (8009e20 <__sfp+0x84>)
 8009da6:	681e      	ldr	r6, [r3, #0]
 8009da8:	69b3      	ldr	r3, [r6, #24]
 8009daa:	b913      	cbnz	r3, 8009db2 <__sfp+0x16>
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7ff ffbd 	bl	8009d2c <__sinit>
 8009db2:	3648      	adds	r6, #72	; 0x48
 8009db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	d503      	bpl.n	8009dc4 <__sfp+0x28>
 8009dbc:	6833      	ldr	r3, [r6, #0]
 8009dbe:	b30b      	cbz	r3, 8009e04 <__sfp+0x68>
 8009dc0:	6836      	ldr	r6, [r6, #0]
 8009dc2:	e7f7      	b.n	8009db4 <__sfp+0x18>
 8009dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009dc8:	b9d5      	cbnz	r5, 8009e00 <__sfp+0x64>
 8009dca:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <__sfp+0x88>)
 8009dcc:	60e3      	str	r3, [r4, #12]
 8009dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8009dd4:	f000 fbcc 	bl	800a570 <__retarget_lock_init_recursive>
 8009dd8:	f7ff ff96 	bl	8009d08 <__sfp_lock_release>
 8009ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009de4:	6025      	str	r5, [r4, #0]
 8009de6:	61a5      	str	r5, [r4, #24]
 8009de8:	2208      	movs	r2, #8
 8009dea:	4629      	mov	r1, r5
 8009dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009df0:	f7fd f888 	bl	8006f04 <memset>
 8009df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e00:	3468      	adds	r4, #104	; 0x68
 8009e02:	e7d9      	b.n	8009db8 <__sfp+0x1c>
 8009e04:	2104      	movs	r1, #4
 8009e06:	4638      	mov	r0, r7
 8009e08:	f7ff ff62 	bl	8009cd0 <__sfmoreglue>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	6030      	str	r0, [r6, #0]
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1d5      	bne.n	8009dc0 <__sfp+0x24>
 8009e14:	f7ff ff78 	bl	8009d08 <__sfp_lock_release>
 8009e18:	230c      	movs	r3, #12
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	e7ee      	b.n	8009dfc <__sfp+0x60>
 8009e1e:	bf00      	nop
 8009e20:	0800bb20 	.word	0x0800bb20
 8009e24:	ffff0001 	.word	0xffff0001

08009e28 <fiprintf>:
 8009e28:	b40e      	push	{r1, r2, r3}
 8009e2a:	b503      	push	{r0, r1, lr}
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	ab03      	add	r3, sp, #12
 8009e30:	4805      	ldr	r0, [pc, #20]	; (8009e48 <fiprintf+0x20>)
 8009e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e36:	6800      	ldr	r0, [r0, #0]
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	f001 fac7 	bl	800b3cc <_vfiprintf_r>
 8009e3e:	b002      	add	sp, #8
 8009e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e44:	b003      	add	sp, #12
 8009e46:	4770      	bx	lr
 8009e48:	20000014 	.word	0x20000014

08009e4c <_fwalk_reent>:
 8009e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e50:	4606      	mov	r6, r0
 8009e52:	4688      	mov	r8, r1
 8009e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e58:	2700      	movs	r7, #0
 8009e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8009e62:	d505      	bpl.n	8009e70 <_fwalk_reent+0x24>
 8009e64:	6824      	ldr	r4, [r4, #0]
 8009e66:	2c00      	cmp	r4, #0
 8009e68:	d1f7      	bne.n	8009e5a <_fwalk_reent+0xe>
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e70:	89ab      	ldrh	r3, [r5, #12]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d907      	bls.n	8009e86 <_fwalk_reent+0x3a>
 8009e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	d003      	beq.n	8009e86 <_fwalk_reent+0x3a>
 8009e7e:	4629      	mov	r1, r5
 8009e80:	4630      	mov	r0, r6
 8009e82:	47c0      	blx	r8
 8009e84:	4307      	orrs	r7, r0
 8009e86:	3568      	adds	r5, #104	; 0x68
 8009e88:	e7e9      	b.n	8009e5e <_fwalk_reent+0x12>

08009e8a <rshift>:
 8009e8a:	6903      	ldr	r3, [r0, #16]
 8009e8c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e94:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e98:	f100 0414 	add.w	r4, r0, #20
 8009e9c:	dd45      	ble.n	8009f2a <rshift+0xa0>
 8009e9e:	f011 011f 	ands.w	r1, r1, #31
 8009ea2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ea6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009eaa:	d10c      	bne.n	8009ec6 <rshift+0x3c>
 8009eac:	f100 0710 	add.w	r7, r0, #16
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	42b1      	cmp	r1, r6
 8009eb4:	d334      	bcc.n	8009f20 <rshift+0x96>
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	1eea      	subs	r2, r5, #3
 8009ebc:	4296      	cmp	r6, r2
 8009ebe:	bf38      	it	cc
 8009ec0:	2300      	movcc	r3, #0
 8009ec2:	4423      	add	r3, r4
 8009ec4:	e015      	b.n	8009ef2 <rshift+0x68>
 8009ec6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009eca:	f1c1 0820 	rsb	r8, r1, #32
 8009ece:	40cf      	lsrs	r7, r1
 8009ed0:	f105 0e04 	add.w	lr, r5, #4
 8009ed4:	46a1      	mov	r9, r4
 8009ed6:	4576      	cmp	r6, lr
 8009ed8:	46f4      	mov	ip, lr
 8009eda:	d815      	bhi.n	8009f08 <rshift+0x7e>
 8009edc:	1a9b      	subs	r3, r3, r2
 8009ede:	009a      	lsls	r2, r3, #2
 8009ee0:	3a04      	subs	r2, #4
 8009ee2:	3501      	adds	r5, #1
 8009ee4:	42ae      	cmp	r6, r5
 8009ee6:	bf38      	it	cc
 8009ee8:	2200      	movcc	r2, #0
 8009eea:	18a3      	adds	r3, r4, r2
 8009eec:	50a7      	str	r7, [r4, r2]
 8009eee:	b107      	cbz	r7, 8009ef2 <rshift+0x68>
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	1b1a      	subs	r2, r3, r4
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009efa:	bf08      	it	eq
 8009efc:	2300      	moveq	r3, #0
 8009efe:	6102      	str	r2, [r0, #16]
 8009f00:	bf08      	it	eq
 8009f02:	6143      	streq	r3, [r0, #20]
 8009f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f08:	f8dc c000 	ldr.w	ip, [ip]
 8009f0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f10:	ea4c 0707 	orr.w	r7, ip, r7
 8009f14:	f849 7b04 	str.w	r7, [r9], #4
 8009f18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f1c:	40cf      	lsrs	r7, r1
 8009f1e:	e7da      	b.n	8009ed6 <rshift+0x4c>
 8009f20:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f24:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f28:	e7c3      	b.n	8009eb2 <rshift+0x28>
 8009f2a:	4623      	mov	r3, r4
 8009f2c:	e7e1      	b.n	8009ef2 <rshift+0x68>

08009f2e <__hexdig_fun>:
 8009f2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f32:	2b09      	cmp	r3, #9
 8009f34:	d802      	bhi.n	8009f3c <__hexdig_fun+0xe>
 8009f36:	3820      	subs	r0, #32
 8009f38:	b2c0      	uxtb	r0, r0
 8009f3a:	4770      	bx	lr
 8009f3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f40:	2b05      	cmp	r3, #5
 8009f42:	d801      	bhi.n	8009f48 <__hexdig_fun+0x1a>
 8009f44:	3847      	subs	r0, #71	; 0x47
 8009f46:	e7f7      	b.n	8009f38 <__hexdig_fun+0xa>
 8009f48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d801      	bhi.n	8009f54 <__hexdig_fun+0x26>
 8009f50:	3827      	subs	r0, #39	; 0x27
 8009f52:	e7f1      	b.n	8009f38 <__hexdig_fun+0xa>
 8009f54:	2000      	movs	r0, #0
 8009f56:	4770      	bx	lr

08009f58 <__gethex>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	ed2d 8b02 	vpush	{d8}
 8009f60:	b089      	sub	sp, #36	; 0x24
 8009f62:	ee08 0a10 	vmov	s16, r0
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	4bbc      	ldr	r3, [pc, #752]	; (800a25c <__gethex+0x304>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	468b      	mov	fp, r1
 8009f72:	4690      	mov	r8, r2
 8009f74:	f7f6 f946 	bl	8000204 <strlen>
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	f8db 2000 	ldr.w	r2, [fp]
 8009f7e:	4403      	add	r3, r0
 8009f80:	4682      	mov	sl, r0
 8009f82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	1c93      	adds	r3, r2, #2
 8009f8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f92:	32fe      	adds	r2, #254	; 0xfe
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	461f      	mov	r7, r3
 8009f98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f9c:	9100      	str	r1, [sp, #0]
 8009f9e:	2830      	cmp	r0, #48	; 0x30
 8009fa0:	d0f8      	beq.n	8009f94 <__gethex+0x3c>
 8009fa2:	f7ff ffc4 	bl	8009f2e <__hexdig_fun>
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d13a      	bne.n	800a022 <__gethex+0xca>
 8009fac:	9901      	ldr	r1, [sp, #4]
 8009fae:	4652      	mov	r2, sl
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f001 fb88 	bl	800b6c6 <strncmp>
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d168      	bne.n	800a08e <__gethex+0x136>
 8009fbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009fc0:	eb07 060a 	add.w	r6, r7, sl
 8009fc4:	f7ff ffb3 	bl	8009f2e <__hexdig_fun>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d062      	beq.n	800a092 <__gethex+0x13a>
 8009fcc:	4633      	mov	r3, r6
 8009fce:	7818      	ldrb	r0, [r3, #0]
 8009fd0:	2830      	cmp	r0, #48	; 0x30
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	f103 0301 	add.w	r3, r3, #1
 8009fd8:	d0f9      	beq.n	8009fce <__gethex+0x76>
 8009fda:	f7ff ffa8 	bl	8009f2e <__hexdig_fun>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	fab0 f480 	clz	r4, r0
 8009fe4:	0964      	lsrs	r4, r4, #5
 8009fe6:	4635      	mov	r5, r6
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	463a      	mov	r2, r7
 8009fec:	4616      	mov	r6, r2
 8009fee:	3201      	adds	r2, #1
 8009ff0:	7830      	ldrb	r0, [r6, #0]
 8009ff2:	f7ff ff9c 	bl	8009f2e <__hexdig_fun>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d1f8      	bne.n	8009fec <__gethex+0x94>
 8009ffa:	9901      	ldr	r1, [sp, #4]
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4630      	mov	r0, r6
 800a000:	f001 fb61 	bl	800b6c6 <strncmp>
 800a004:	b980      	cbnz	r0, 800a028 <__gethex+0xd0>
 800a006:	b94d      	cbnz	r5, 800a01c <__gethex+0xc4>
 800a008:	eb06 050a 	add.w	r5, r6, sl
 800a00c:	462a      	mov	r2, r5
 800a00e:	4616      	mov	r6, r2
 800a010:	3201      	adds	r2, #1
 800a012:	7830      	ldrb	r0, [r6, #0]
 800a014:	f7ff ff8b 	bl	8009f2e <__hexdig_fun>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1f8      	bne.n	800a00e <__gethex+0xb6>
 800a01c:	1bad      	subs	r5, r5, r6
 800a01e:	00ad      	lsls	r5, r5, #2
 800a020:	e004      	b.n	800a02c <__gethex+0xd4>
 800a022:	2400      	movs	r4, #0
 800a024:	4625      	mov	r5, r4
 800a026:	e7e0      	b.n	8009fea <__gethex+0x92>
 800a028:	2d00      	cmp	r5, #0
 800a02a:	d1f7      	bne.n	800a01c <__gethex+0xc4>
 800a02c:	7833      	ldrb	r3, [r6, #0]
 800a02e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a032:	2b50      	cmp	r3, #80	; 0x50
 800a034:	d13b      	bne.n	800a0ae <__gethex+0x156>
 800a036:	7873      	ldrb	r3, [r6, #1]
 800a038:	2b2b      	cmp	r3, #43	; 0x2b
 800a03a:	d02c      	beq.n	800a096 <__gethex+0x13e>
 800a03c:	2b2d      	cmp	r3, #45	; 0x2d
 800a03e:	d02e      	beq.n	800a09e <__gethex+0x146>
 800a040:	1c71      	adds	r1, r6, #1
 800a042:	f04f 0900 	mov.w	r9, #0
 800a046:	7808      	ldrb	r0, [r1, #0]
 800a048:	f7ff ff71 	bl	8009f2e <__hexdig_fun>
 800a04c:	1e43      	subs	r3, r0, #1
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b18      	cmp	r3, #24
 800a052:	d82c      	bhi.n	800a0ae <__gethex+0x156>
 800a054:	f1a0 0210 	sub.w	r2, r0, #16
 800a058:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a05c:	f7ff ff67 	bl	8009f2e <__hexdig_fun>
 800a060:	1e43      	subs	r3, r0, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b18      	cmp	r3, #24
 800a066:	d91d      	bls.n	800a0a4 <__gethex+0x14c>
 800a068:	f1b9 0f00 	cmp.w	r9, #0
 800a06c:	d000      	beq.n	800a070 <__gethex+0x118>
 800a06e:	4252      	negs	r2, r2
 800a070:	4415      	add	r5, r2
 800a072:	f8cb 1000 	str.w	r1, [fp]
 800a076:	b1e4      	cbz	r4, 800a0b2 <__gethex+0x15a>
 800a078:	9b00      	ldr	r3, [sp, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bf14      	ite	ne
 800a07e:	2700      	movne	r7, #0
 800a080:	2706      	moveq	r7, #6
 800a082:	4638      	mov	r0, r7
 800a084:	b009      	add	sp, #36	; 0x24
 800a086:	ecbd 8b02 	vpop	{d8}
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	463e      	mov	r6, r7
 800a090:	4625      	mov	r5, r4
 800a092:	2401      	movs	r4, #1
 800a094:	e7ca      	b.n	800a02c <__gethex+0xd4>
 800a096:	f04f 0900 	mov.w	r9, #0
 800a09a:	1cb1      	adds	r1, r6, #2
 800a09c:	e7d3      	b.n	800a046 <__gethex+0xee>
 800a09e:	f04f 0901 	mov.w	r9, #1
 800a0a2:	e7fa      	b.n	800a09a <__gethex+0x142>
 800a0a4:	230a      	movs	r3, #10
 800a0a6:	fb03 0202 	mla	r2, r3, r2, r0
 800a0aa:	3a10      	subs	r2, #16
 800a0ac:	e7d4      	b.n	800a058 <__gethex+0x100>
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	e7df      	b.n	800a072 <__gethex+0x11a>
 800a0b2:	1bf3      	subs	r3, r6, r7
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	2b07      	cmp	r3, #7
 800a0ba:	dc0b      	bgt.n	800a0d4 <__gethex+0x17c>
 800a0bc:	ee18 0a10 	vmov	r0, s16
 800a0c0:	f000 faf2 	bl	800a6a8 <_Balloc>
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	b940      	cbnz	r0, 800a0da <__gethex+0x182>
 800a0c8:	4b65      	ldr	r3, [pc, #404]	; (800a260 <__gethex+0x308>)
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	21de      	movs	r1, #222	; 0xde
 800a0ce:	4865      	ldr	r0, [pc, #404]	; (800a264 <__gethex+0x30c>)
 800a0d0:	f7fe fe7c 	bl	8008dcc <__assert_func>
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	105b      	asrs	r3, r3, #1
 800a0d8:	e7ee      	b.n	800a0b8 <__gethex+0x160>
 800a0da:	f100 0914 	add.w	r9, r0, #20
 800a0de:	f04f 0b00 	mov.w	fp, #0
 800a0e2:	f1ca 0301 	rsb	r3, sl, #1
 800a0e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0ea:	f8cd b000 	str.w	fp, [sp]
 800a0ee:	9306      	str	r3, [sp, #24]
 800a0f0:	42b7      	cmp	r7, r6
 800a0f2:	d340      	bcc.n	800a176 <__gethex+0x21e>
 800a0f4:	9802      	ldr	r0, [sp, #8]
 800a0f6:	9b00      	ldr	r3, [sp, #0]
 800a0f8:	f840 3b04 	str.w	r3, [r0], #4
 800a0fc:	eba0 0009 	sub.w	r0, r0, r9
 800a100:	1080      	asrs	r0, r0, #2
 800a102:	0146      	lsls	r6, r0, #5
 800a104:	6120      	str	r0, [r4, #16]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fbc4 	bl	800a894 <__hi0bits>
 800a10c:	1a30      	subs	r0, r6, r0
 800a10e:	f8d8 6000 	ldr.w	r6, [r8]
 800a112:	42b0      	cmp	r0, r6
 800a114:	dd63      	ble.n	800a1de <__gethex+0x286>
 800a116:	1b87      	subs	r7, r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 ff5e 	bl	800afdc <__any_on>
 800a120:	4682      	mov	sl, r0
 800a122:	b1a8      	cbz	r0, 800a150 <__gethex+0x1f8>
 800a124:	1e7b      	subs	r3, r7, #1
 800a126:	1159      	asrs	r1, r3, #5
 800a128:	f003 021f 	and.w	r2, r3, #31
 800a12c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a130:	f04f 0a01 	mov.w	sl, #1
 800a134:	fa0a f202 	lsl.w	r2, sl, r2
 800a138:	420a      	tst	r2, r1
 800a13a:	d009      	beq.n	800a150 <__gethex+0x1f8>
 800a13c:	4553      	cmp	r3, sl
 800a13e:	dd05      	ble.n	800a14c <__gethex+0x1f4>
 800a140:	1eb9      	subs	r1, r7, #2
 800a142:	4620      	mov	r0, r4
 800a144:	f000 ff4a 	bl	800afdc <__any_on>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d145      	bne.n	800a1d8 <__gethex+0x280>
 800a14c:	f04f 0a02 	mov.w	sl, #2
 800a150:	4639      	mov	r1, r7
 800a152:	4620      	mov	r0, r4
 800a154:	f7ff fe99 	bl	8009e8a <rshift>
 800a158:	443d      	add	r5, r7
 800a15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a15e:	42ab      	cmp	r3, r5
 800a160:	da4c      	bge.n	800a1fc <__gethex+0x2a4>
 800a162:	ee18 0a10 	vmov	r0, s16
 800a166:	4621      	mov	r1, r4
 800a168:	f000 fade 	bl	800a728 <_Bfree>
 800a16c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a16e:	2300      	movs	r3, #0
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	27a3      	movs	r7, #163	; 0xa3
 800a174:	e785      	b.n	800a082 <__gethex+0x12a>
 800a176:	1e73      	subs	r3, r6, #1
 800a178:	9a05      	ldr	r2, [sp, #20]
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a180:	4293      	cmp	r3, r2
 800a182:	d019      	beq.n	800a1b8 <__gethex+0x260>
 800a184:	f1bb 0f20 	cmp.w	fp, #32
 800a188:	d107      	bne.n	800a19a <__gethex+0x242>
 800a18a:	9b02      	ldr	r3, [sp, #8]
 800a18c:	9a00      	ldr	r2, [sp, #0]
 800a18e:	f843 2b04 	str.w	r2, [r3], #4
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	2300      	movs	r3, #0
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	469b      	mov	fp, r3
 800a19a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a19e:	f7ff fec6 	bl	8009f2e <__hexdig_fun>
 800a1a2:	9b00      	ldr	r3, [sp, #0]
 800a1a4:	f000 000f 	and.w	r0, r0, #15
 800a1a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	f10b 0b04 	add.w	fp, fp, #4
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	e00d      	b.n	800a1d4 <__gethex+0x27c>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	9a06      	ldr	r2, [sp, #24]
 800a1bc:	4413      	add	r3, r2
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	d3e0      	bcc.n	800a184 <__gethex+0x22c>
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	9901      	ldr	r1, [sp, #4]
 800a1c6:	9307      	str	r3, [sp, #28]
 800a1c8:	4652      	mov	r2, sl
 800a1ca:	f001 fa7c 	bl	800b6c6 <strncmp>
 800a1ce:	9b07      	ldr	r3, [sp, #28]
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d1d7      	bne.n	800a184 <__gethex+0x22c>
 800a1d4:	461e      	mov	r6, r3
 800a1d6:	e78b      	b.n	800a0f0 <__gethex+0x198>
 800a1d8:	f04f 0a03 	mov.w	sl, #3
 800a1dc:	e7b8      	b.n	800a150 <__gethex+0x1f8>
 800a1de:	da0a      	bge.n	800a1f6 <__gethex+0x29e>
 800a1e0:	1a37      	subs	r7, r6, r0
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	ee18 0a10 	vmov	r0, s16
 800a1e8:	463a      	mov	r2, r7
 800a1ea:	f000 fcb9 	bl	800ab60 <__lshift>
 800a1ee:	1bed      	subs	r5, r5, r7
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	f100 0914 	add.w	r9, r0, #20
 800a1f6:	f04f 0a00 	mov.w	sl, #0
 800a1fa:	e7ae      	b.n	800a15a <__gethex+0x202>
 800a1fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a200:	42a8      	cmp	r0, r5
 800a202:	dd72      	ble.n	800a2ea <__gethex+0x392>
 800a204:	1b45      	subs	r5, r0, r5
 800a206:	42ae      	cmp	r6, r5
 800a208:	dc36      	bgt.n	800a278 <__gethex+0x320>
 800a20a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d02a      	beq.n	800a268 <__gethex+0x310>
 800a212:	2b03      	cmp	r3, #3
 800a214:	d02c      	beq.n	800a270 <__gethex+0x318>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d115      	bne.n	800a246 <__gethex+0x2ee>
 800a21a:	42ae      	cmp	r6, r5
 800a21c:	d113      	bne.n	800a246 <__gethex+0x2ee>
 800a21e:	2e01      	cmp	r6, #1
 800a220:	d10b      	bne.n	800a23a <__gethex+0x2e2>
 800a222:	9a04      	ldr	r2, [sp, #16]
 800a224:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	2301      	movs	r3, #1
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	f8c9 3000 	str.w	r3, [r9]
 800a232:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a234:	2762      	movs	r7, #98	; 0x62
 800a236:	601c      	str	r4, [r3, #0]
 800a238:	e723      	b.n	800a082 <__gethex+0x12a>
 800a23a:	1e71      	subs	r1, r6, #1
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 fecd 	bl	800afdc <__any_on>
 800a242:	2800      	cmp	r0, #0
 800a244:	d1ed      	bne.n	800a222 <__gethex+0x2ca>
 800a246:	ee18 0a10 	vmov	r0, s16
 800a24a:	4621      	mov	r1, r4
 800a24c:	f000 fa6c 	bl	800a728 <_Bfree>
 800a250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a252:	2300      	movs	r3, #0
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	2750      	movs	r7, #80	; 0x50
 800a258:	e713      	b.n	800a082 <__gethex+0x12a>
 800a25a:	bf00      	nop
 800a25c:	0800beb0 	.word	0x0800beb0
 800a260:	0800bdd1 	.word	0x0800bdd1
 800a264:	0800be44 	.word	0x0800be44
 800a268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1eb      	bne.n	800a246 <__gethex+0x2ee>
 800a26e:	e7d8      	b.n	800a222 <__gethex+0x2ca>
 800a270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1d5      	bne.n	800a222 <__gethex+0x2ca>
 800a276:	e7e6      	b.n	800a246 <__gethex+0x2ee>
 800a278:	1e6f      	subs	r7, r5, #1
 800a27a:	f1ba 0f00 	cmp.w	sl, #0
 800a27e:	d131      	bne.n	800a2e4 <__gethex+0x38c>
 800a280:	b127      	cbz	r7, 800a28c <__gethex+0x334>
 800a282:	4639      	mov	r1, r7
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fea9 	bl	800afdc <__any_on>
 800a28a:	4682      	mov	sl, r0
 800a28c:	117b      	asrs	r3, r7, #5
 800a28e:	2101      	movs	r1, #1
 800a290:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a294:	f007 071f 	and.w	r7, r7, #31
 800a298:	fa01 f707 	lsl.w	r7, r1, r7
 800a29c:	421f      	tst	r7, r3
 800a29e:	4629      	mov	r1, r5
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	bf18      	it	ne
 800a2a4:	f04a 0a02 	orrne.w	sl, sl, #2
 800a2a8:	1b76      	subs	r6, r6, r5
 800a2aa:	f7ff fdee 	bl	8009e8a <rshift>
 800a2ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a2b2:	2702      	movs	r7, #2
 800a2b4:	f1ba 0f00 	cmp.w	sl, #0
 800a2b8:	d048      	beq.n	800a34c <__gethex+0x3f4>
 800a2ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d015      	beq.n	800a2ee <__gethex+0x396>
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d017      	beq.n	800a2f6 <__gethex+0x39e>
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d109      	bne.n	800a2de <__gethex+0x386>
 800a2ca:	f01a 0f02 	tst.w	sl, #2
 800a2ce:	d006      	beq.n	800a2de <__gethex+0x386>
 800a2d0:	f8d9 0000 	ldr.w	r0, [r9]
 800a2d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800a2d8:	f01a 0f01 	tst.w	sl, #1
 800a2dc:	d10e      	bne.n	800a2fc <__gethex+0x3a4>
 800a2de:	f047 0710 	orr.w	r7, r7, #16
 800a2e2:	e033      	b.n	800a34c <__gethex+0x3f4>
 800a2e4:	f04f 0a01 	mov.w	sl, #1
 800a2e8:	e7d0      	b.n	800a28c <__gethex+0x334>
 800a2ea:	2701      	movs	r7, #1
 800a2ec:	e7e2      	b.n	800a2b4 <__gethex+0x35c>
 800a2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2f0:	f1c3 0301 	rsb	r3, r3, #1
 800a2f4:	9315      	str	r3, [sp, #84]	; 0x54
 800a2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d0f0      	beq.n	800a2de <__gethex+0x386>
 800a2fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a300:	f104 0314 	add.w	r3, r4, #20
 800a304:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a308:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a30c:	f04f 0c00 	mov.w	ip, #0
 800a310:	4618      	mov	r0, r3
 800a312:	f853 2b04 	ldr.w	r2, [r3], #4
 800a316:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a31a:	d01c      	beq.n	800a356 <__gethex+0x3fe>
 800a31c:	3201      	adds	r2, #1
 800a31e:	6002      	str	r2, [r0, #0]
 800a320:	2f02      	cmp	r7, #2
 800a322:	f104 0314 	add.w	r3, r4, #20
 800a326:	d13f      	bne.n	800a3a8 <__gethex+0x450>
 800a328:	f8d8 2000 	ldr.w	r2, [r8]
 800a32c:	3a01      	subs	r2, #1
 800a32e:	42b2      	cmp	r2, r6
 800a330:	d10a      	bne.n	800a348 <__gethex+0x3f0>
 800a332:	1171      	asrs	r1, r6, #5
 800a334:	2201      	movs	r2, #1
 800a336:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a33a:	f006 061f 	and.w	r6, r6, #31
 800a33e:	fa02 f606 	lsl.w	r6, r2, r6
 800a342:	421e      	tst	r6, r3
 800a344:	bf18      	it	ne
 800a346:	4617      	movne	r7, r2
 800a348:	f047 0720 	orr.w	r7, r7, #32
 800a34c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a34e:	601c      	str	r4, [r3, #0]
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	601d      	str	r5, [r3, #0]
 800a354:	e695      	b.n	800a082 <__gethex+0x12a>
 800a356:	4299      	cmp	r1, r3
 800a358:	f843 cc04 	str.w	ip, [r3, #-4]
 800a35c:	d8d8      	bhi.n	800a310 <__gethex+0x3b8>
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	459b      	cmp	fp, r3
 800a362:	db19      	blt.n	800a398 <__gethex+0x440>
 800a364:	6861      	ldr	r1, [r4, #4]
 800a366:	ee18 0a10 	vmov	r0, s16
 800a36a:	3101      	adds	r1, #1
 800a36c:	f000 f99c 	bl	800a6a8 <_Balloc>
 800a370:	4681      	mov	r9, r0
 800a372:	b918      	cbnz	r0, 800a37c <__gethex+0x424>
 800a374:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <__gethex+0x488>)
 800a376:	4602      	mov	r2, r0
 800a378:	2184      	movs	r1, #132	; 0x84
 800a37a:	e6a8      	b.n	800a0ce <__gethex+0x176>
 800a37c:	6922      	ldr	r2, [r4, #16]
 800a37e:	3202      	adds	r2, #2
 800a380:	f104 010c 	add.w	r1, r4, #12
 800a384:	0092      	lsls	r2, r2, #2
 800a386:	300c      	adds	r0, #12
 800a388:	f000 f974 	bl	800a674 <memcpy>
 800a38c:	4621      	mov	r1, r4
 800a38e:	ee18 0a10 	vmov	r0, s16
 800a392:	f000 f9c9 	bl	800a728 <_Bfree>
 800a396:	464c      	mov	r4, r9
 800a398:	6923      	ldr	r3, [r4, #16]
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3a0:	6122      	str	r2, [r4, #16]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	615a      	str	r2, [r3, #20]
 800a3a6:	e7bb      	b.n	800a320 <__gethex+0x3c8>
 800a3a8:	6922      	ldr	r2, [r4, #16]
 800a3aa:	455a      	cmp	r2, fp
 800a3ac:	dd0b      	ble.n	800a3c6 <__gethex+0x46e>
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7ff fd6a 	bl	8009e8a <rshift>
 800a3b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	42ab      	cmp	r3, r5
 800a3be:	f6ff aed0 	blt.w	800a162 <__gethex+0x20a>
 800a3c2:	2701      	movs	r7, #1
 800a3c4:	e7c0      	b.n	800a348 <__gethex+0x3f0>
 800a3c6:	f016 061f 	ands.w	r6, r6, #31
 800a3ca:	d0fa      	beq.n	800a3c2 <__gethex+0x46a>
 800a3cc:	449a      	add	sl, r3
 800a3ce:	f1c6 0620 	rsb	r6, r6, #32
 800a3d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a3d6:	f000 fa5d 	bl	800a894 <__hi0bits>
 800a3da:	42b0      	cmp	r0, r6
 800a3dc:	dbe7      	blt.n	800a3ae <__gethex+0x456>
 800a3de:	e7f0      	b.n	800a3c2 <__gethex+0x46a>
 800a3e0:	0800bdd1 	.word	0x0800bdd1

0800a3e4 <L_shift>:
 800a3e4:	f1c2 0208 	rsb	r2, r2, #8
 800a3e8:	0092      	lsls	r2, r2, #2
 800a3ea:	b570      	push	{r4, r5, r6, lr}
 800a3ec:	f1c2 0620 	rsb	r6, r2, #32
 800a3f0:	6843      	ldr	r3, [r0, #4]
 800a3f2:	6804      	ldr	r4, [r0, #0]
 800a3f4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3f8:	432c      	orrs	r4, r5
 800a3fa:	40d3      	lsrs	r3, r2
 800a3fc:	6004      	str	r4, [r0, #0]
 800a3fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800a402:	4288      	cmp	r0, r1
 800a404:	d3f4      	bcc.n	800a3f0 <L_shift+0xc>
 800a406:	bd70      	pop	{r4, r5, r6, pc}

0800a408 <__match>:
 800a408:	b530      	push	{r4, r5, lr}
 800a40a:	6803      	ldr	r3, [r0, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a412:	b914      	cbnz	r4, 800a41a <__match+0x12>
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	2001      	movs	r0, #1
 800a418:	bd30      	pop	{r4, r5, pc}
 800a41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a422:	2d19      	cmp	r5, #25
 800a424:	bf98      	it	ls
 800a426:	3220      	addls	r2, #32
 800a428:	42a2      	cmp	r2, r4
 800a42a:	d0f0      	beq.n	800a40e <__match+0x6>
 800a42c:	2000      	movs	r0, #0
 800a42e:	e7f3      	b.n	800a418 <__match+0x10>

0800a430 <__hexnan>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	680b      	ldr	r3, [r1, #0]
 800a436:	6801      	ldr	r1, [r0, #0]
 800a438:	115e      	asrs	r6, r3, #5
 800a43a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a43e:	f013 031f 	ands.w	r3, r3, #31
 800a442:	b087      	sub	sp, #28
 800a444:	bf18      	it	ne
 800a446:	3604      	addne	r6, #4
 800a448:	2500      	movs	r5, #0
 800a44a:	1f37      	subs	r7, r6, #4
 800a44c:	4682      	mov	sl, r0
 800a44e:	4690      	mov	r8, r2
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	f846 5c04 	str.w	r5, [r6, #-4]
 800a456:	46b9      	mov	r9, r7
 800a458:	463c      	mov	r4, r7
 800a45a:	9502      	str	r5, [sp, #8]
 800a45c:	46ab      	mov	fp, r5
 800a45e:	784a      	ldrb	r2, [r1, #1]
 800a460:	1c4b      	adds	r3, r1, #1
 800a462:	9303      	str	r3, [sp, #12]
 800a464:	b342      	cbz	r2, 800a4b8 <__hexnan+0x88>
 800a466:	4610      	mov	r0, r2
 800a468:	9105      	str	r1, [sp, #20]
 800a46a:	9204      	str	r2, [sp, #16]
 800a46c:	f7ff fd5f 	bl	8009f2e <__hexdig_fun>
 800a470:	2800      	cmp	r0, #0
 800a472:	d14f      	bne.n	800a514 <__hexnan+0xe4>
 800a474:	9a04      	ldr	r2, [sp, #16]
 800a476:	9905      	ldr	r1, [sp, #20]
 800a478:	2a20      	cmp	r2, #32
 800a47a:	d818      	bhi.n	800a4ae <__hexnan+0x7e>
 800a47c:	9b02      	ldr	r3, [sp, #8]
 800a47e:	459b      	cmp	fp, r3
 800a480:	dd13      	ble.n	800a4aa <__hexnan+0x7a>
 800a482:	454c      	cmp	r4, r9
 800a484:	d206      	bcs.n	800a494 <__hexnan+0x64>
 800a486:	2d07      	cmp	r5, #7
 800a488:	dc04      	bgt.n	800a494 <__hexnan+0x64>
 800a48a:	462a      	mov	r2, r5
 800a48c:	4649      	mov	r1, r9
 800a48e:	4620      	mov	r0, r4
 800a490:	f7ff ffa8 	bl	800a3e4 <L_shift>
 800a494:	4544      	cmp	r4, r8
 800a496:	d950      	bls.n	800a53a <__hexnan+0x10a>
 800a498:	2300      	movs	r3, #0
 800a49a:	f1a4 0904 	sub.w	r9, r4, #4
 800a49e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4a2:	f8cd b008 	str.w	fp, [sp, #8]
 800a4a6:	464c      	mov	r4, r9
 800a4a8:	461d      	mov	r5, r3
 800a4aa:	9903      	ldr	r1, [sp, #12]
 800a4ac:	e7d7      	b.n	800a45e <__hexnan+0x2e>
 800a4ae:	2a29      	cmp	r2, #41	; 0x29
 800a4b0:	d156      	bne.n	800a560 <__hexnan+0x130>
 800a4b2:	3102      	adds	r1, #2
 800a4b4:	f8ca 1000 	str.w	r1, [sl]
 800a4b8:	f1bb 0f00 	cmp.w	fp, #0
 800a4bc:	d050      	beq.n	800a560 <__hexnan+0x130>
 800a4be:	454c      	cmp	r4, r9
 800a4c0:	d206      	bcs.n	800a4d0 <__hexnan+0xa0>
 800a4c2:	2d07      	cmp	r5, #7
 800a4c4:	dc04      	bgt.n	800a4d0 <__hexnan+0xa0>
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7ff ff8a 	bl	800a3e4 <L_shift>
 800a4d0:	4544      	cmp	r4, r8
 800a4d2:	d934      	bls.n	800a53e <__hexnan+0x10e>
 800a4d4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4d8:	4623      	mov	r3, r4
 800a4da:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4de:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4e2:	429f      	cmp	r7, r3
 800a4e4:	d2f9      	bcs.n	800a4da <__hexnan+0xaa>
 800a4e6:	1b3b      	subs	r3, r7, r4
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	3401      	adds	r4, #1
 800a4f0:	3e03      	subs	r6, #3
 800a4f2:	42b4      	cmp	r4, r6
 800a4f4:	bf88      	it	hi
 800a4f6:	2304      	movhi	r3, #4
 800a4f8:	4443      	add	r3, r8
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f843 2b04 	str.w	r2, [r3], #4
 800a500:	429f      	cmp	r7, r3
 800a502:	d2fb      	bcs.n	800a4fc <__hexnan+0xcc>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	b91b      	cbnz	r3, 800a510 <__hexnan+0xe0>
 800a508:	4547      	cmp	r7, r8
 800a50a:	d127      	bne.n	800a55c <__hexnan+0x12c>
 800a50c:	2301      	movs	r3, #1
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	2005      	movs	r0, #5
 800a512:	e026      	b.n	800a562 <__hexnan+0x132>
 800a514:	3501      	adds	r5, #1
 800a516:	2d08      	cmp	r5, #8
 800a518:	f10b 0b01 	add.w	fp, fp, #1
 800a51c:	dd06      	ble.n	800a52c <__hexnan+0xfc>
 800a51e:	4544      	cmp	r4, r8
 800a520:	d9c3      	bls.n	800a4aa <__hexnan+0x7a>
 800a522:	2300      	movs	r3, #0
 800a524:	f844 3c04 	str.w	r3, [r4, #-4]
 800a528:	2501      	movs	r5, #1
 800a52a:	3c04      	subs	r4, #4
 800a52c:	6822      	ldr	r2, [r4, #0]
 800a52e:	f000 000f 	and.w	r0, r0, #15
 800a532:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a536:	6022      	str	r2, [r4, #0]
 800a538:	e7b7      	b.n	800a4aa <__hexnan+0x7a>
 800a53a:	2508      	movs	r5, #8
 800a53c:	e7b5      	b.n	800a4aa <__hexnan+0x7a>
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0df      	beq.n	800a504 <__hexnan+0xd4>
 800a544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a548:	f1c3 0320 	rsb	r3, r3, #32
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
 800a550:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a554:	401a      	ands	r2, r3
 800a556:	f846 2c04 	str.w	r2, [r6, #-4]
 800a55a:	e7d3      	b.n	800a504 <__hexnan+0xd4>
 800a55c:	3f04      	subs	r7, #4
 800a55e:	e7d1      	b.n	800a504 <__hexnan+0xd4>
 800a560:	2004      	movs	r0, #4
 800a562:	b007      	add	sp, #28
 800a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a568 <_localeconv_r>:
 800a568:	4800      	ldr	r0, [pc, #0]	; (800a56c <_localeconv_r+0x4>)
 800a56a:	4770      	bx	lr
 800a56c:	2000016c 	.word	0x2000016c

0800a570 <__retarget_lock_init_recursive>:
 800a570:	4770      	bx	lr

0800a572 <__retarget_lock_acquire_recursive>:
 800a572:	4770      	bx	lr

0800a574 <__retarget_lock_release_recursive>:
 800a574:	4770      	bx	lr

0800a576 <__swhatbuf_r>:
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	460e      	mov	r6, r1
 800a57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57e:	2900      	cmp	r1, #0
 800a580:	b096      	sub	sp, #88	; 0x58
 800a582:	4614      	mov	r4, r2
 800a584:	461d      	mov	r5, r3
 800a586:	da07      	bge.n	800a598 <__swhatbuf_r+0x22>
 800a588:	2300      	movs	r3, #0
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	89b3      	ldrh	r3, [r6, #12]
 800a58e:	061a      	lsls	r2, r3, #24
 800a590:	d410      	bmi.n	800a5b4 <__swhatbuf_r+0x3e>
 800a592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a596:	e00e      	b.n	800a5b6 <__swhatbuf_r+0x40>
 800a598:	466a      	mov	r2, sp
 800a59a:	f001 f8dd 	bl	800b758 <_fstat_r>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	dbf2      	blt.n	800a588 <__swhatbuf_r+0x12>
 800a5a2:	9a01      	ldr	r2, [sp, #4]
 800a5a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5ac:	425a      	negs	r2, r3
 800a5ae:	415a      	adcs	r2, r3
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	e7ee      	b.n	800a592 <__swhatbuf_r+0x1c>
 800a5b4:	2340      	movs	r3, #64	; 0x40
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	b016      	add	sp, #88	; 0x58
 800a5bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5c0 <__smakebuf_r>:
 800a5c0:	898b      	ldrh	r3, [r1, #12]
 800a5c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5c4:	079d      	lsls	r5, r3, #30
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	d507      	bpl.n	800a5dc <__smakebuf_r+0x1c>
 800a5cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	6123      	str	r3, [r4, #16]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	6163      	str	r3, [r4, #20]
 800a5d8:	b002      	add	sp, #8
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	ab01      	add	r3, sp, #4
 800a5de:	466a      	mov	r2, sp
 800a5e0:	f7ff ffc9 	bl	800a576 <__swhatbuf_r>
 800a5e4:	9900      	ldr	r1, [sp, #0]
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7fc fca3 	bl	8006f34 <_malloc_r>
 800a5ee:	b948      	cbnz	r0, 800a604 <__smakebuf_r+0x44>
 800a5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f4:	059a      	lsls	r2, r3, #22
 800a5f6:	d4ef      	bmi.n	800a5d8 <__smakebuf_r+0x18>
 800a5f8:	f023 0303 	bic.w	r3, r3, #3
 800a5fc:	f043 0302 	orr.w	r3, r3, #2
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	e7e3      	b.n	800a5cc <__smakebuf_r+0xc>
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <__smakebuf_r+0x7c>)
 800a606:	62b3      	str	r3, [r6, #40]	; 0x28
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	6020      	str	r0, [r4, #0]
 800a60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	6163      	str	r3, [r4, #20]
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	6120      	str	r0, [r4, #16]
 800a61a:	b15b      	cbz	r3, 800a634 <__smakebuf_r+0x74>
 800a61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a620:	4630      	mov	r0, r6
 800a622:	f001 f8ab 	bl	800b77c <_isatty_r>
 800a626:	b128      	cbz	r0, 800a634 <__smakebuf_r+0x74>
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	f023 0303 	bic.w	r3, r3, #3
 800a62e:	f043 0301 	orr.w	r3, r3, #1
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	89a0      	ldrh	r0, [r4, #12]
 800a636:	4305      	orrs	r5, r0
 800a638:	81a5      	strh	r5, [r4, #12]
 800a63a:	e7cd      	b.n	800a5d8 <__smakebuf_r+0x18>
 800a63c:	08009cc5 	.word	0x08009cc5

0800a640 <malloc>:
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <malloc+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f7fc bc75 	b.w	8006f34 <_malloc_r>
 800a64a:	bf00      	nop
 800a64c:	20000014 	.word	0x20000014

0800a650 <__ascii_mbtowc>:
 800a650:	b082      	sub	sp, #8
 800a652:	b901      	cbnz	r1, 800a656 <__ascii_mbtowc+0x6>
 800a654:	a901      	add	r1, sp, #4
 800a656:	b142      	cbz	r2, 800a66a <__ascii_mbtowc+0x1a>
 800a658:	b14b      	cbz	r3, 800a66e <__ascii_mbtowc+0x1e>
 800a65a:	7813      	ldrb	r3, [r2, #0]
 800a65c:	600b      	str	r3, [r1, #0]
 800a65e:	7812      	ldrb	r2, [r2, #0]
 800a660:	1e10      	subs	r0, r2, #0
 800a662:	bf18      	it	ne
 800a664:	2001      	movne	r0, #1
 800a666:	b002      	add	sp, #8
 800a668:	4770      	bx	lr
 800a66a:	4610      	mov	r0, r2
 800a66c:	e7fb      	b.n	800a666 <__ascii_mbtowc+0x16>
 800a66e:	f06f 0001 	mvn.w	r0, #1
 800a672:	e7f8      	b.n	800a666 <__ascii_mbtowc+0x16>

0800a674 <memcpy>:
 800a674:	440a      	add	r2, r1
 800a676:	4291      	cmp	r1, r2
 800a678:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a67c:	d100      	bne.n	800a680 <memcpy+0xc>
 800a67e:	4770      	bx	lr
 800a680:	b510      	push	{r4, lr}
 800a682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a68a:	4291      	cmp	r1, r2
 800a68c:	d1f9      	bne.n	800a682 <memcpy+0xe>
 800a68e:	bd10      	pop	{r4, pc}

0800a690 <__malloc_lock>:
 800a690:	4801      	ldr	r0, [pc, #4]	; (800a698 <__malloc_lock+0x8>)
 800a692:	f7ff bf6e 	b.w	800a572 <__retarget_lock_acquire_recursive>
 800a696:	bf00      	nop
 800a698:	200005e4 	.word	0x200005e4

0800a69c <__malloc_unlock>:
 800a69c:	4801      	ldr	r0, [pc, #4]	; (800a6a4 <__malloc_unlock+0x8>)
 800a69e:	f7ff bf69 	b.w	800a574 <__retarget_lock_release_recursive>
 800a6a2:	bf00      	nop
 800a6a4:	200005e4 	.word	0x200005e4

0800a6a8 <_Balloc>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	b976      	cbnz	r6, 800a6d0 <_Balloc+0x28>
 800a6b2:	2010      	movs	r0, #16
 800a6b4:	f7ff ffc4 	bl	800a640 <malloc>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	6260      	str	r0, [r4, #36]	; 0x24
 800a6bc:	b920      	cbnz	r0, 800a6c8 <_Balloc+0x20>
 800a6be:	4b18      	ldr	r3, [pc, #96]	; (800a720 <_Balloc+0x78>)
 800a6c0:	4818      	ldr	r0, [pc, #96]	; (800a724 <_Balloc+0x7c>)
 800a6c2:	2166      	movs	r1, #102	; 0x66
 800a6c4:	f7fe fb82 	bl	8008dcc <__assert_func>
 800a6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6cc:	6006      	str	r6, [r0, #0]
 800a6ce:	60c6      	str	r6, [r0, #12]
 800a6d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6d2:	68f3      	ldr	r3, [r6, #12]
 800a6d4:	b183      	cbz	r3, 800a6f8 <_Balloc+0x50>
 800a6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6de:	b9b8      	cbnz	r0, 800a710 <_Balloc+0x68>
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	fa01 f605 	lsl.w	r6, r1, r5
 800a6e6:	1d72      	adds	r2, r6, #5
 800a6e8:	0092      	lsls	r2, r2, #2
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7fc fc12 	bl	8006f14 <_calloc_r>
 800a6f0:	b160      	cbz	r0, 800a70c <_Balloc+0x64>
 800a6f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6f6:	e00e      	b.n	800a716 <_Balloc+0x6e>
 800a6f8:	2221      	movs	r2, #33	; 0x21
 800a6fa:	2104      	movs	r1, #4
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7fc fc09 	bl	8006f14 <_calloc_r>
 800a702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a704:	60f0      	str	r0, [r6, #12]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e4      	bne.n	800a6d6 <_Balloc+0x2e>
 800a70c:	2000      	movs	r0, #0
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	6802      	ldr	r2, [r0, #0]
 800a712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a716:	2300      	movs	r3, #0
 800a718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a71c:	e7f7      	b.n	800a70e <_Balloc+0x66>
 800a71e:	bf00      	nop
 800a720:	0800bb5d 	.word	0x0800bb5d
 800a724:	0800bec4 	.word	0x0800bec4

0800a728 <_Bfree>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a72c:	4605      	mov	r5, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	b976      	cbnz	r6, 800a750 <_Bfree+0x28>
 800a732:	2010      	movs	r0, #16
 800a734:	f7ff ff84 	bl	800a640 <malloc>
 800a738:	4602      	mov	r2, r0
 800a73a:	6268      	str	r0, [r5, #36]	; 0x24
 800a73c:	b920      	cbnz	r0, 800a748 <_Bfree+0x20>
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <_Bfree+0x3c>)
 800a740:	4809      	ldr	r0, [pc, #36]	; (800a768 <_Bfree+0x40>)
 800a742:	218a      	movs	r1, #138	; 0x8a
 800a744:	f7fe fb42 	bl	8008dcc <__assert_func>
 800a748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a74c:	6006      	str	r6, [r0, #0]
 800a74e:	60c6      	str	r6, [r0, #12]
 800a750:	b13c      	cbz	r4, 800a762 <_Bfree+0x3a>
 800a752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a754:	6862      	ldr	r2, [r4, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a75c:	6021      	str	r1, [r4, #0]
 800a75e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	0800bb5d 	.word	0x0800bb5d
 800a768:	0800bec4 	.word	0x0800bec4

0800a76c <__multadd>:
 800a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a770:	690e      	ldr	r6, [r1, #16]
 800a772:	4607      	mov	r7, r0
 800a774:	4698      	mov	r8, r3
 800a776:	460c      	mov	r4, r1
 800a778:	f101 0014 	add.w	r0, r1, #20
 800a77c:	2300      	movs	r3, #0
 800a77e:	6805      	ldr	r5, [r0, #0]
 800a780:	b2a9      	uxth	r1, r5
 800a782:	fb02 8101 	mla	r1, r2, r1, r8
 800a786:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a78a:	0c2d      	lsrs	r5, r5, #16
 800a78c:	fb02 c505 	mla	r5, r2, r5, ip
 800a790:	b289      	uxth	r1, r1
 800a792:	3301      	adds	r3, #1
 800a794:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a798:	429e      	cmp	r6, r3
 800a79a:	f840 1b04 	str.w	r1, [r0], #4
 800a79e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a7a2:	dcec      	bgt.n	800a77e <__multadd+0x12>
 800a7a4:	f1b8 0f00 	cmp.w	r8, #0
 800a7a8:	d022      	beq.n	800a7f0 <__multadd+0x84>
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	42b3      	cmp	r3, r6
 800a7ae:	dc19      	bgt.n	800a7e4 <__multadd+0x78>
 800a7b0:	6861      	ldr	r1, [r4, #4]
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	3101      	adds	r1, #1
 800a7b6:	f7ff ff77 	bl	800a6a8 <_Balloc>
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	b928      	cbnz	r0, 800a7ca <__multadd+0x5e>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	; (800a7f8 <__multadd+0x8c>)
 800a7c2:	480e      	ldr	r0, [pc, #56]	; (800a7fc <__multadd+0x90>)
 800a7c4:	21b5      	movs	r1, #181	; 0xb5
 800a7c6:	f7fe fb01 	bl	8008dcc <__assert_func>
 800a7ca:	6922      	ldr	r2, [r4, #16]
 800a7cc:	3202      	adds	r2, #2
 800a7ce:	f104 010c 	add.w	r1, r4, #12
 800a7d2:	0092      	lsls	r2, r2, #2
 800a7d4:	300c      	adds	r0, #12
 800a7d6:	f7ff ff4d 	bl	800a674 <memcpy>
 800a7da:	4621      	mov	r1, r4
 800a7dc:	4638      	mov	r0, r7
 800a7de:	f7ff ffa3 	bl	800a728 <_Bfree>
 800a7e2:	462c      	mov	r4, r5
 800a7e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800a7ee:	6126      	str	r6, [r4, #16]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800bdd1 	.word	0x0800bdd1
 800a7fc:	0800bec4 	.word	0x0800bec4

0800a800 <__s2b>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	460c      	mov	r4, r1
 800a806:	4615      	mov	r5, r2
 800a808:	461f      	mov	r7, r3
 800a80a:	2209      	movs	r2, #9
 800a80c:	3308      	adds	r3, #8
 800a80e:	4606      	mov	r6, r0
 800a810:	fb93 f3f2 	sdiv	r3, r3, r2
 800a814:	2100      	movs	r1, #0
 800a816:	2201      	movs	r2, #1
 800a818:	429a      	cmp	r2, r3
 800a81a:	db09      	blt.n	800a830 <__s2b+0x30>
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff ff43 	bl	800a6a8 <_Balloc>
 800a822:	b940      	cbnz	r0, 800a836 <__s2b+0x36>
 800a824:	4602      	mov	r2, r0
 800a826:	4b19      	ldr	r3, [pc, #100]	; (800a88c <__s2b+0x8c>)
 800a828:	4819      	ldr	r0, [pc, #100]	; (800a890 <__s2b+0x90>)
 800a82a:	21ce      	movs	r1, #206	; 0xce
 800a82c:	f7fe face 	bl	8008dcc <__assert_func>
 800a830:	0052      	lsls	r2, r2, #1
 800a832:	3101      	adds	r1, #1
 800a834:	e7f0      	b.n	800a818 <__s2b+0x18>
 800a836:	9b08      	ldr	r3, [sp, #32]
 800a838:	6143      	str	r3, [r0, #20]
 800a83a:	2d09      	cmp	r5, #9
 800a83c:	f04f 0301 	mov.w	r3, #1
 800a840:	6103      	str	r3, [r0, #16]
 800a842:	dd16      	ble.n	800a872 <__s2b+0x72>
 800a844:	f104 0909 	add.w	r9, r4, #9
 800a848:	46c8      	mov	r8, r9
 800a84a:	442c      	add	r4, r5
 800a84c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a850:	4601      	mov	r1, r0
 800a852:	3b30      	subs	r3, #48	; 0x30
 800a854:	220a      	movs	r2, #10
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff88 	bl	800a76c <__multadd>
 800a85c:	45a0      	cmp	r8, r4
 800a85e:	d1f5      	bne.n	800a84c <__s2b+0x4c>
 800a860:	f1a5 0408 	sub.w	r4, r5, #8
 800a864:	444c      	add	r4, r9
 800a866:	1b2d      	subs	r5, r5, r4
 800a868:	1963      	adds	r3, r4, r5
 800a86a:	42bb      	cmp	r3, r7
 800a86c:	db04      	blt.n	800a878 <__s2b+0x78>
 800a86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a872:	340a      	adds	r4, #10
 800a874:	2509      	movs	r5, #9
 800a876:	e7f6      	b.n	800a866 <__s2b+0x66>
 800a878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a87c:	4601      	mov	r1, r0
 800a87e:	3b30      	subs	r3, #48	; 0x30
 800a880:	220a      	movs	r2, #10
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ff72 	bl	800a76c <__multadd>
 800a888:	e7ee      	b.n	800a868 <__s2b+0x68>
 800a88a:	bf00      	nop
 800a88c:	0800bdd1 	.word	0x0800bdd1
 800a890:	0800bec4 	.word	0x0800bec4

0800a894 <__hi0bits>:
 800a894:	0c03      	lsrs	r3, r0, #16
 800a896:	041b      	lsls	r3, r3, #16
 800a898:	b9d3      	cbnz	r3, 800a8d0 <__hi0bits+0x3c>
 800a89a:	0400      	lsls	r0, r0, #16
 800a89c:	2310      	movs	r3, #16
 800a89e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8a2:	bf04      	itt	eq
 800a8a4:	0200      	lsleq	r0, r0, #8
 800a8a6:	3308      	addeq	r3, #8
 800a8a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8ac:	bf04      	itt	eq
 800a8ae:	0100      	lsleq	r0, r0, #4
 800a8b0:	3304      	addeq	r3, #4
 800a8b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8b6:	bf04      	itt	eq
 800a8b8:	0080      	lsleq	r0, r0, #2
 800a8ba:	3302      	addeq	r3, #2
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	db05      	blt.n	800a8cc <__hi0bits+0x38>
 800a8c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8c4:	f103 0301 	add.w	r3, r3, #1
 800a8c8:	bf08      	it	eq
 800a8ca:	2320      	moveq	r3, #32
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	4770      	bx	lr
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e7e4      	b.n	800a89e <__hi0bits+0xa>

0800a8d4 <__lo0bits>:
 800a8d4:	6803      	ldr	r3, [r0, #0]
 800a8d6:	f013 0207 	ands.w	r2, r3, #7
 800a8da:	4601      	mov	r1, r0
 800a8dc:	d00b      	beq.n	800a8f6 <__lo0bits+0x22>
 800a8de:	07da      	lsls	r2, r3, #31
 800a8e0:	d424      	bmi.n	800a92c <__lo0bits+0x58>
 800a8e2:	0798      	lsls	r0, r3, #30
 800a8e4:	bf49      	itett	mi
 800a8e6:	085b      	lsrmi	r3, r3, #1
 800a8e8:	089b      	lsrpl	r3, r3, #2
 800a8ea:	2001      	movmi	r0, #1
 800a8ec:	600b      	strmi	r3, [r1, #0]
 800a8ee:	bf5c      	itt	pl
 800a8f0:	600b      	strpl	r3, [r1, #0]
 800a8f2:	2002      	movpl	r0, #2
 800a8f4:	4770      	bx	lr
 800a8f6:	b298      	uxth	r0, r3
 800a8f8:	b9b0      	cbnz	r0, 800a928 <__lo0bits+0x54>
 800a8fa:	0c1b      	lsrs	r3, r3, #16
 800a8fc:	2010      	movs	r0, #16
 800a8fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a902:	bf04      	itt	eq
 800a904:	0a1b      	lsreq	r3, r3, #8
 800a906:	3008      	addeq	r0, #8
 800a908:	071a      	lsls	r2, r3, #28
 800a90a:	bf04      	itt	eq
 800a90c:	091b      	lsreq	r3, r3, #4
 800a90e:	3004      	addeq	r0, #4
 800a910:	079a      	lsls	r2, r3, #30
 800a912:	bf04      	itt	eq
 800a914:	089b      	lsreq	r3, r3, #2
 800a916:	3002      	addeq	r0, #2
 800a918:	07da      	lsls	r2, r3, #31
 800a91a:	d403      	bmi.n	800a924 <__lo0bits+0x50>
 800a91c:	085b      	lsrs	r3, r3, #1
 800a91e:	f100 0001 	add.w	r0, r0, #1
 800a922:	d005      	beq.n	800a930 <__lo0bits+0x5c>
 800a924:	600b      	str	r3, [r1, #0]
 800a926:	4770      	bx	lr
 800a928:	4610      	mov	r0, r2
 800a92a:	e7e8      	b.n	800a8fe <__lo0bits+0x2a>
 800a92c:	2000      	movs	r0, #0
 800a92e:	4770      	bx	lr
 800a930:	2020      	movs	r0, #32
 800a932:	4770      	bx	lr

0800a934 <__i2b>:
 800a934:	b510      	push	{r4, lr}
 800a936:	460c      	mov	r4, r1
 800a938:	2101      	movs	r1, #1
 800a93a:	f7ff feb5 	bl	800a6a8 <_Balloc>
 800a93e:	4602      	mov	r2, r0
 800a940:	b928      	cbnz	r0, 800a94e <__i2b+0x1a>
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <__i2b+0x24>)
 800a944:	4805      	ldr	r0, [pc, #20]	; (800a95c <__i2b+0x28>)
 800a946:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a94a:	f7fe fa3f 	bl	8008dcc <__assert_func>
 800a94e:	2301      	movs	r3, #1
 800a950:	6144      	str	r4, [r0, #20]
 800a952:	6103      	str	r3, [r0, #16]
 800a954:	bd10      	pop	{r4, pc}
 800a956:	bf00      	nop
 800a958:	0800bdd1 	.word	0x0800bdd1
 800a95c:	0800bec4 	.word	0x0800bec4

0800a960 <__multiply>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	4614      	mov	r4, r2
 800a966:	690a      	ldr	r2, [r1, #16]
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	bfb8      	it	lt
 800a96e:	460b      	movlt	r3, r1
 800a970:	460d      	mov	r5, r1
 800a972:	bfbc      	itt	lt
 800a974:	4625      	movlt	r5, r4
 800a976:	461c      	movlt	r4, r3
 800a978:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a97c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a980:	68ab      	ldr	r3, [r5, #8]
 800a982:	6869      	ldr	r1, [r5, #4]
 800a984:	eb0a 0709 	add.w	r7, sl, r9
 800a988:	42bb      	cmp	r3, r7
 800a98a:	b085      	sub	sp, #20
 800a98c:	bfb8      	it	lt
 800a98e:	3101      	addlt	r1, #1
 800a990:	f7ff fe8a 	bl	800a6a8 <_Balloc>
 800a994:	b930      	cbnz	r0, 800a9a4 <__multiply+0x44>
 800a996:	4602      	mov	r2, r0
 800a998:	4b42      	ldr	r3, [pc, #264]	; (800aaa4 <__multiply+0x144>)
 800a99a:	4843      	ldr	r0, [pc, #268]	; (800aaa8 <__multiply+0x148>)
 800a99c:	f240 115d 	movw	r1, #349	; 0x15d
 800a9a0:	f7fe fa14 	bl	8008dcc <__assert_func>
 800a9a4:	f100 0614 	add.w	r6, r0, #20
 800a9a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a9ac:	4633      	mov	r3, r6
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4543      	cmp	r3, r8
 800a9b2:	d31e      	bcc.n	800a9f2 <__multiply+0x92>
 800a9b4:	f105 0c14 	add.w	ip, r5, #20
 800a9b8:	f104 0314 	add.w	r3, r4, #20
 800a9bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a9c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a9c4:	9202      	str	r2, [sp, #8]
 800a9c6:	ebac 0205 	sub.w	r2, ip, r5
 800a9ca:	3a15      	subs	r2, #21
 800a9cc:	f022 0203 	bic.w	r2, r2, #3
 800a9d0:	3204      	adds	r2, #4
 800a9d2:	f105 0115 	add.w	r1, r5, #21
 800a9d6:	458c      	cmp	ip, r1
 800a9d8:	bf38      	it	cc
 800a9da:	2204      	movcc	r2, #4
 800a9dc:	9201      	str	r2, [sp, #4]
 800a9de:	9a02      	ldr	r2, [sp, #8]
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d808      	bhi.n	800a9f8 <__multiply+0x98>
 800a9e6:	2f00      	cmp	r7, #0
 800a9e8:	dc55      	bgt.n	800aa96 <__multiply+0x136>
 800a9ea:	6107      	str	r7, [r0, #16]
 800a9ec:	b005      	add	sp, #20
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	f843 2b04 	str.w	r2, [r3], #4
 800a9f6:	e7db      	b.n	800a9b0 <__multiply+0x50>
 800a9f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9fc:	f1ba 0f00 	cmp.w	sl, #0
 800aa00:	d020      	beq.n	800aa44 <__multiply+0xe4>
 800aa02:	f105 0e14 	add.w	lr, r5, #20
 800aa06:	46b1      	mov	r9, r6
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa0e:	f8d9 b000 	ldr.w	fp, [r9]
 800aa12:	b2a1      	uxth	r1, r4
 800aa14:	fa1f fb8b 	uxth.w	fp, fp
 800aa18:	fb0a b101 	mla	r1, sl, r1, fp
 800aa1c:	4411      	add	r1, r2
 800aa1e:	f8d9 2000 	ldr.w	r2, [r9]
 800aa22:	0c24      	lsrs	r4, r4, #16
 800aa24:	0c12      	lsrs	r2, r2, #16
 800aa26:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa2e:	b289      	uxth	r1, r1
 800aa30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa34:	45f4      	cmp	ip, lr
 800aa36:	f849 1b04 	str.w	r1, [r9], #4
 800aa3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa3e:	d8e4      	bhi.n	800aa0a <__multiply+0xaa>
 800aa40:	9901      	ldr	r1, [sp, #4]
 800aa42:	5072      	str	r2, [r6, r1]
 800aa44:	9a03      	ldr	r2, [sp, #12]
 800aa46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	f1b9 0f00 	cmp.w	r9, #0
 800aa50:	d01f      	beq.n	800aa92 <__multiply+0x132>
 800aa52:	6834      	ldr	r4, [r6, #0]
 800aa54:	f105 0114 	add.w	r1, r5, #20
 800aa58:	46b6      	mov	lr, r6
 800aa5a:	f04f 0a00 	mov.w	sl, #0
 800aa5e:	880a      	ldrh	r2, [r1, #0]
 800aa60:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa64:	fb09 b202 	mla	r2, r9, r2, fp
 800aa68:	4492      	add	sl, r2
 800aa6a:	b2a4      	uxth	r4, r4
 800aa6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa70:	f84e 4b04 	str.w	r4, [lr], #4
 800aa74:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa78:	f8be 2000 	ldrh.w	r2, [lr]
 800aa7c:	0c24      	lsrs	r4, r4, #16
 800aa7e:	fb09 2404 	mla	r4, r9, r4, r2
 800aa82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa86:	458c      	cmp	ip, r1
 800aa88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa8c:	d8e7      	bhi.n	800aa5e <__multiply+0xfe>
 800aa8e:	9a01      	ldr	r2, [sp, #4]
 800aa90:	50b4      	str	r4, [r6, r2]
 800aa92:	3604      	adds	r6, #4
 800aa94:	e7a3      	b.n	800a9de <__multiply+0x7e>
 800aa96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1a5      	bne.n	800a9ea <__multiply+0x8a>
 800aa9e:	3f01      	subs	r7, #1
 800aaa0:	e7a1      	b.n	800a9e6 <__multiply+0x86>
 800aaa2:	bf00      	nop
 800aaa4:	0800bdd1 	.word	0x0800bdd1
 800aaa8:	0800bec4 	.word	0x0800bec4

0800aaac <__pow5mult>:
 800aaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	4615      	mov	r5, r2
 800aab2:	f012 0203 	ands.w	r2, r2, #3
 800aab6:	4606      	mov	r6, r0
 800aab8:	460f      	mov	r7, r1
 800aaba:	d007      	beq.n	800aacc <__pow5mult+0x20>
 800aabc:	4c25      	ldr	r4, [pc, #148]	; (800ab54 <__pow5mult+0xa8>)
 800aabe:	3a01      	subs	r2, #1
 800aac0:	2300      	movs	r3, #0
 800aac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aac6:	f7ff fe51 	bl	800a76c <__multadd>
 800aaca:	4607      	mov	r7, r0
 800aacc:	10ad      	asrs	r5, r5, #2
 800aace:	d03d      	beq.n	800ab4c <__pow5mult+0xa0>
 800aad0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aad2:	b97c      	cbnz	r4, 800aaf4 <__pow5mult+0x48>
 800aad4:	2010      	movs	r0, #16
 800aad6:	f7ff fdb3 	bl	800a640 <malloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	6270      	str	r0, [r6, #36]	; 0x24
 800aade:	b928      	cbnz	r0, 800aaec <__pow5mult+0x40>
 800aae0:	4b1d      	ldr	r3, [pc, #116]	; (800ab58 <__pow5mult+0xac>)
 800aae2:	481e      	ldr	r0, [pc, #120]	; (800ab5c <__pow5mult+0xb0>)
 800aae4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aae8:	f7fe f970 	bl	8008dcc <__assert_func>
 800aaec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaf0:	6004      	str	r4, [r0, #0]
 800aaf2:	60c4      	str	r4, [r0, #12]
 800aaf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aaf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aafc:	b94c      	cbnz	r4, 800ab12 <__pow5mult+0x66>
 800aafe:	f240 2171 	movw	r1, #625	; 0x271
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7ff ff16 	bl	800a934 <__i2b>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab0e:	4604      	mov	r4, r0
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	07eb      	lsls	r3, r5, #31
 800ab18:	d50a      	bpl.n	800ab30 <__pow5mult+0x84>
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7ff ff1e 	bl	800a960 <__multiply>
 800ab24:	4639      	mov	r1, r7
 800ab26:	4680      	mov	r8, r0
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff fdfd 	bl	800a728 <_Bfree>
 800ab2e:	4647      	mov	r7, r8
 800ab30:	106d      	asrs	r5, r5, #1
 800ab32:	d00b      	beq.n	800ab4c <__pow5mult+0xa0>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	b938      	cbnz	r0, 800ab48 <__pow5mult+0x9c>
 800ab38:	4622      	mov	r2, r4
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f7ff ff0f 	bl	800a960 <__multiply>
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	f8c0 9000 	str.w	r9, [r0]
 800ab48:	4604      	mov	r4, r0
 800ab4a:	e7e4      	b.n	800ab16 <__pow5mult+0x6a>
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab52:	bf00      	nop
 800ab54:	0800c018 	.word	0x0800c018
 800ab58:	0800bb5d 	.word	0x0800bb5d
 800ab5c:	0800bec4 	.word	0x0800bec4

0800ab60 <__lshift>:
 800ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	460c      	mov	r4, r1
 800ab66:	6849      	ldr	r1, [r1, #4]
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	4607      	mov	r7, r0
 800ab72:	4691      	mov	r9, r2
 800ab74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab78:	f108 0601 	add.w	r6, r8, #1
 800ab7c:	42b3      	cmp	r3, r6
 800ab7e:	db0b      	blt.n	800ab98 <__lshift+0x38>
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7ff fd91 	bl	800a6a8 <_Balloc>
 800ab86:	4605      	mov	r5, r0
 800ab88:	b948      	cbnz	r0, 800ab9e <__lshift+0x3e>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <__lshift+0xd0>)
 800ab8e:	4829      	ldr	r0, [pc, #164]	; (800ac34 <__lshift+0xd4>)
 800ab90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab94:	f7fe f91a 	bl	8008dcc <__assert_func>
 800ab98:	3101      	adds	r1, #1
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	e7ee      	b.n	800ab7c <__lshift+0x1c>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f100 0114 	add.w	r1, r0, #20
 800aba4:	f100 0210 	add.w	r2, r0, #16
 800aba8:	4618      	mov	r0, r3
 800abaa:	4553      	cmp	r3, sl
 800abac:	db33      	blt.n	800ac16 <__lshift+0xb6>
 800abae:	6920      	ldr	r0, [r4, #16]
 800abb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abb4:	f104 0314 	add.w	r3, r4, #20
 800abb8:	f019 091f 	ands.w	r9, r9, #31
 800abbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abc4:	d02b      	beq.n	800ac1e <__lshift+0xbe>
 800abc6:	f1c9 0e20 	rsb	lr, r9, #32
 800abca:	468a      	mov	sl, r1
 800abcc:	2200      	movs	r2, #0
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	fa00 f009 	lsl.w	r0, r0, r9
 800abd4:	4302      	orrs	r2, r0
 800abd6:	f84a 2b04 	str.w	r2, [sl], #4
 800abda:	f853 2b04 	ldr.w	r2, [r3], #4
 800abde:	459c      	cmp	ip, r3
 800abe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800abe4:	d8f3      	bhi.n	800abce <__lshift+0x6e>
 800abe6:	ebac 0304 	sub.w	r3, ip, r4
 800abea:	3b15      	subs	r3, #21
 800abec:	f023 0303 	bic.w	r3, r3, #3
 800abf0:	3304      	adds	r3, #4
 800abf2:	f104 0015 	add.w	r0, r4, #21
 800abf6:	4584      	cmp	ip, r0
 800abf8:	bf38      	it	cc
 800abfa:	2304      	movcc	r3, #4
 800abfc:	50ca      	str	r2, [r1, r3]
 800abfe:	b10a      	cbz	r2, 800ac04 <__lshift+0xa4>
 800ac00:	f108 0602 	add.w	r6, r8, #2
 800ac04:	3e01      	subs	r6, #1
 800ac06:	4638      	mov	r0, r7
 800ac08:	612e      	str	r6, [r5, #16]
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	f7ff fd8c 	bl	800a728 <_Bfree>
 800ac10:	4628      	mov	r0, r5
 800ac12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	e7c5      	b.n	800abaa <__lshift+0x4a>
 800ac1e:	3904      	subs	r1, #4
 800ac20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac24:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac28:	459c      	cmp	ip, r3
 800ac2a:	d8f9      	bhi.n	800ac20 <__lshift+0xc0>
 800ac2c:	e7ea      	b.n	800ac04 <__lshift+0xa4>
 800ac2e:	bf00      	nop
 800ac30:	0800bdd1 	.word	0x0800bdd1
 800ac34:	0800bec4 	.word	0x0800bec4

0800ac38 <__mcmp>:
 800ac38:	b530      	push	{r4, r5, lr}
 800ac3a:	6902      	ldr	r2, [r0, #16]
 800ac3c:	690c      	ldr	r4, [r1, #16]
 800ac3e:	1b12      	subs	r2, r2, r4
 800ac40:	d10e      	bne.n	800ac60 <__mcmp+0x28>
 800ac42:	f100 0314 	add.w	r3, r0, #20
 800ac46:	3114      	adds	r1, #20
 800ac48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac58:	42a5      	cmp	r5, r4
 800ac5a:	d003      	beq.n	800ac64 <__mcmp+0x2c>
 800ac5c:	d305      	bcc.n	800ac6a <__mcmp+0x32>
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4610      	mov	r0, r2
 800ac62:	bd30      	pop	{r4, r5, pc}
 800ac64:	4283      	cmp	r3, r0
 800ac66:	d3f3      	bcc.n	800ac50 <__mcmp+0x18>
 800ac68:	e7fa      	b.n	800ac60 <__mcmp+0x28>
 800ac6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac6e:	e7f7      	b.n	800ac60 <__mcmp+0x28>

0800ac70 <__mdiff>:
 800ac70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	460c      	mov	r4, r1
 800ac76:	4606      	mov	r6, r0
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	4617      	mov	r7, r2
 800ac7e:	f7ff ffdb 	bl	800ac38 <__mcmp>
 800ac82:	1e05      	subs	r5, r0, #0
 800ac84:	d110      	bne.n	800aca8 <__mdiff+0x38>
 800ac86:	4629      	mov	r1, r5
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f7ff fd0d 	bl	800a6a8 <_Balloc>
 800ac8e:	b930      	cbnz	r0, 800ac9e <__mdiff+0x2e>
 800ac90:	4b39      	ldr	r3, [pc, #228]	; (800ad78 <__mdiff+0x108>)
 800ac92:	4602      	mov	r2, r0
 800ac94:	f240 2132 	movw	r1, #562	; 0x232
 800ac98:	4838      	ldr	r0, [pc, #224]	; (800ad7c <__mdiff+0x10c>)
 800ac9a:	f7fe f897 	bl	8008dcc <__assert_func>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca8:	bfa4      	itt	ge
 800acaa:	463b      	movge	r3, r7
 800acac:	4627      	movge	r7, r4
 800acae:	4630      	mov	r0, r6
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	bfa6      	itte	ge
 800acb4:	461c      	movge	r4, r3
 800acb6:	2500      	movge	r5, #0
 800acb8:	2501      	movlt	r5, #1
 800acba:	f7ff fcf5 	bl	800a6a8 <_Balloc>
 800acbe:	b920      	cbnz	r0, 800acca <__mdiff+0x5a>
 800acc0:	4b2d      	ldr	r3, [pc, #180]	; (800ad78 <__mdiff+0x108>)
 800acc2:	4602      	mov	r2, r0
 800acc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800acc8:	e7e6      	b.n	800ac98 <__mdiff+0x28>
 800acca:	693e      	ldr	r6, [r7, #16]
 800accc:	60c5      	str	r5, [r0, #12]
 800acce:	6925      	ldr	r5, [r4, #16]
 800acd0:	f107 0114 	add.w	r1, r7, #20
 800acd4:	f104 0914 	add.w	r9, r4, #20
 800acd8:	f100 0e14 	add.w	lr, r0, #20
 800acdc:	f107 0210 	add.w	r2, r7, #16
 800ace0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ace4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ace8:	46f2      	mov	sl, lr
 800acea:	2700      	movs	r7, #0
 800acec:	f859 3b04 	ldr.w	r3, [r9], #4
 800acf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800acf4:	fa1f f883 	uxth.w	r8, r3
 800acf8:	fa17 f78b 	uxtah	r7, r7, fp
 800acfc:	0c1b      	lsrs	r3, r3, #16
 800acfe:	eba7 0808 	sub.w	r8, r7, r8
 800ad02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad0a:	fa1f f888 	uxth.w	r8, r8
 800ad0e:	141f      	asrs	r7, r3, #16
 800ad10:	454d      	cmp	r5, r9
 800ad12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad16:	f84a 3b04 	str.w	r3, [sl], #4
 800ad1a:	d8e7      	bhi.n	800acec <__mdiff+0x7c>
 800ad1c:	1b2b      	subs	r3, r5, r4
 800ad1e:	3b15      	subs	r3, #21
 800ad20:	f023 0303 	bic.w	r3, r3, #3
 800ad24:	3304      	adds	r3, #4
 800ad26:	3415      	adds	r4, #21
 800ad28:	42a5      	cmp	r5, r4
 800ad2a:	bf38      	it	cc
 800ad2c:	2304      	movcc	r3, #4
 800ad2e:	4419      	add	r1, r3
 800ad30:	4473      	add	r3, lr
 800ad32:	469e      	mov	lr, r3
 800ad34:	460d      	mov	r5, r1
 800ad36:	4565      	cmp	r5, ip
 800ad38:	d30e      	bcc.n	800ad58 <__mdiff+0xe8>
 800ad3a:	f10c 0203 	add.w	r2, ip, #3
 800ad3e:	1a52      	subs	r2, r2, r1
 800ad40:	f022 0203 	bic.w	r2, r2, #3
 800ad44:	3903      	subs	r1, #3
 800ad46:	458c      	cmp	ip, r1
 800ad48:	bf38      	it	cc
 800ad4a:	2200      	movcc	r2, #0
 800ad4c:	441a      	add	r2, r3
 800ad4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad52:	b17b      	cbz	r3, 800ad74 <__mdiff+0x104>
 800ad54:	6106      	str	r6, [r0, #16]
 800ad56:	e7a5      	b.n	800aca4 <__mdiff+0x34>
 800ad58:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad5c:	fa17 f488 	uxtah	r4, r7, r8
 800ad60:	1422      	asrs	r2, r4, #16
 800ad62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad66:	b2a4      	uxth	r4, r4
 800ad68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad6c:	f84e 4b04 	str.w	r4, [lr], #4
 800ad70:	1417      	asrs	r7, r2, #16
 800ad72:	e7e0      	b.n	800ad36 <__mdiff+0xc6>
 800ad74:	3e01      	subs	r6, #1
 800ad76:	e7ea      	b.n	800ad4e <__mdiff+0xde>
 800ad78:	0800bdd1 	.word	0x0800bdd1
 800ad7c:	0800bec4 	.word	0x0800bec4

0800ad80 <__ulp>:
 800ad80:	b082      	sub	sp, #8
 800ad82:	ed8d 0b00 	vstr	d0, [sp]
 800ad86:	9b01      	ldr	r3, [sp, #4]
 800ad88:	4912      	ldr	r1, [pc, #72]	; (800add4 <__ulp+0x54>)
 800ad8a:	4019      	ands	r1, r3
 800ad8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ad90:	2900      	cmp	r1, #0
 800ad92:	dd05      	ble.n	800ada0 <__ulp+0x20>
 800ad94:	2200      	movs	r2, #0
 800ad96:	460b      	mov	r3, r1
 800ad98:	ec43 2b10 	vmov	d0, r2, r3
 800ad9c:	b002      	add	sp, #8
 800ad9e:	4770      	bx	lr
 800ada0:	4249      	negs	r1, r1
 800ada2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ada6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800adaa:	f04f 0200 	mov.w	r2, #0
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	da04      	bge.n	800adbe <__ulp+0x3e>
 800adb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800adb8:	fa41 f300 	asr.w	r3, r1, r0
 800adbc:	e7ec      	b.n	800ad98 <__ulp+0x18>
 800adbe:	f1a0 0114 	sub.w	r1, r0, #20
 800adc2:	291e      	cmp	r1, #30
 800adc4:	bfda      	itte	le
 800adc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800adca:	fa20 f101 	lsrle.w	r1, r0, r1
 800adce:	2101      	movgt	r1, #1
 800add0:	460a      	mov	r2, r1
 800add2:	e7e1      	b.n	800ad98 <__ulp+0x18>
 800add4:	7ff00000 	.word	0x7ff00000

0800add8 <__b2d>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	6905      	ldr	r5, [r0, #16]
 800addc:	f100 0714 	add.w	r7, r0, #20
 800ade0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ade4:	1f2e      	subs	r6, r5, #4
 800ade6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800adea:	4620      	mov	r0, r4
 800adec:	f7ff fd52 	bl	800a894 <__hi0bits>
 800adf0:	f1c0 0320 	rsb	r3, r0, #32
 800adf4:	280a      	cmp	r0, #10
 800adf6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ae74 <__b2d+0x9c>
 800adfa:	600b      	str	r3, [r1, #0]
 800adfc:	dc14      	bgt.n	800ae28 <__b2d+0x50>
 800adfe:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae02:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae06:	42b7      	cmp	r7, r6
 800ae08:	ea41 030c 	orr.w	r3, r1, ip
 800ae0c:	bf34      	ite	cc
 800ae0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae12:	2100      	movcs	r1, #0
 800ae14:	3015      	adds	r0, #21
 800ae16:	fa04 f000 	lsl.w	r0, r4, r0
 800ae1a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae1e:	ea40 0201 	orr.w	r2, r0, r1
 800ae22:	ec43 2b10 	vmov	d0, r2, r3
 800ae26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae28:	42b7      	cmp	r7, r6
 800ae2a:	bf3a      	itte	cc
 800ae2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae30:	f1a5 0608 	subcc.w	r6, r5, #8
 800ae34:	2100      	movcs	r1, #0
 800ae36:	380b      	subs	r0, #11
 800ae38:	d017      	beq.n	800ae6a <__b2d+0x92>
 800ae3a:	f1c0 0c20 	rsb	ip, r0, #32
 800ae3e:	fa04 f500 	lsl.w	r5, r4, r0
 800ae42:	42be      	cmp	r6, r7
 800ae44:	fa21 f40c 	lsr.w	r4, r1, ip
 800ae48:	ea45 0504 	orr.w	r5, r5, r4
 800ae4c:	bf8c      	ite	hi
 800ae4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae52:	2400      	movls	r4, #0
 800ae54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ae58:	fa01 f000 	lsl.w	r0, r1, r0
 800ae5c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ae60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae64:	ea40 0204 	orr.w	r2, r0, r4
 800ae68:	e7db      	b.n	800ae22 <__b2d+0x4a>
 800ae6a:	ea44 030c 	orr.w	r3, r4, ip
 800ae6e:	460a      	mov	r2, r1
 800ae70:	e7d7      	b.n	800ae22 <__b2d+0x4a>
 800ae72:	bf00      	nop
 800ae74:	3ff00000 	.word	0x3ff00000

0800ae78 <__d2b>:
 800ae78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae7c:	4689      	mov	r9, r1
 800ae7e:	2101      	movs	r1, #1
 800ae80:	ec57 6b10 	vmov	r6, r7, d0
 800ae84:	4690      	mov	r8, r2
 800ae86:	f7ff fc0f 	bl	800a6a8 <_Balloc>
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	b930      	cbnz	r0, 800ae9c <__d2b+0x24>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	4b25      	ldr	r3, [pc, #148]	; (800af28 <__d2b+0xb0>)
 800ae92:	4826      	ldr	r0, [pc, #152]	; (800af2c <__d2b+0xb4>)
 800ae94:	f240 310a 	movw	r1, #778	; 0x30a
 800ae98:	f7fd ff98 	bl	8008dcc <__assert_func>
 800ae9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aea4:	bb35      	cbnz	r5, 800aef4 <__d2b+0x7c>
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	d028      	beq.n	800aefe <__d2b+0x86>
 800aeac:	4668      	mov	r0, sp
 800aeae:	9600      	str	r6, [sp, #0]
 800aeb0:	f7ff fd10 	bl	800a8d4 <__lo0bits>
 800aeb4:	9900      	ldr	r1, [sp, #0]
 800aeb6:	b300      	cbz	r0, 800aefa <__d2b+0x82>
 800aeb8:	9a01      	ldr	r2, [sp, #4]
 800aeba:	f1c0 0320 	rsb	r3, r0, #32
 800aebe:	fa02 f303 	lsl.w	r3, r2, r3
 800aec2:	430b      	orrs	r3, r1
 800aec4:	40c2      	lsrs	r2, r0
 800aec6:	6163      	str	r3, [r4, #20]
 800aec8:	9201      	str	r2, [sp, #4]
 800aeca:	9b01      	ldr	r3, [sp, #4]
 800aecc:	61a3      	str	r3, [r4, #24]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bf14      	ite	ne
 800aed2:	2202      	movne	r2, #2
 800aed4:	2201      	moveq	r2, #1
 800aed6:	6122      	str	r2, [r4, #16]
 800aed8:	b1d5      	cbz	r5, 800af10 <__d2b+0x98>
 800aeda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aede:	4405      	add	r5, r0
 800aee0:	f8c9 5000 	str.w	r5, [r9]
 800aee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aee8:	f8c8 0000 	str.w	r0, [r8]
 800aeec:	4620      	mov	r0, r4
 800aeee:	b003      	add	sp, #12
 800aef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aef8:	e7d5      	b.n	800aea6 <__d2b+0x2e>
 800aefa:	6161      	str	r1, [r4, #20]
 800aefc:	e7e5      	b.n	800aeca <__d2b+0x52>
 800aefe:	a801      	add	r0, sp, #4
 800af00:	f7ff fce8 	bl	800a8d4 <__lo0bits>
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	6163      	str	r3, [r4, #20]
 800af08:	2201      	movs	r2, #1
 800af0a:	6122      	str	r2, [r4, #16]
 800af0c:	3020      	adds	r0, #32
 800af0e:	e7e3      	b.n	800aed8 <__d2b+0x60>
 800af10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af18:	f8c9 0000 	str.w	r0, [r9]
 800af1c:	6918      	ldr	r0, [r3, #16]
 800af1e:	f7ff fcb9 	bl	800a894 <__hi0bits>
 800af22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af26:	e7df      	b.n	800aee8 <__d2b+0x70>
 800af28:	0800bdd1 	.word	0x0800bdd1
 800af2c:	0800bec4 	.word	0x0800bec4

0800af30 <__ratio>:
 800af30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	4688      	mov	r8, r1
 800af36:	4669      	mov	r1, sp
 800af38:	4681      	mov	r9, r0
 800af3a:	f7ff ff4d 	bl	800add8 <__b2d>
 800af3e:	a901      	add	r1, sp, #4
 800af40:	4640      	mov	r0, r8
 800af42:	ec55 4b10 	vmov	r4, r5, d0
 800af46:	f7ff ff47 	bl	800add8 <__b2d>
 800af4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800af52:	eba3 0c02 	sub.w	ip, r3, r2
 800af56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af5a:	1a9b      	subs	r3, r3, r2
 800af5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800af60:	ec51 0b10 	vmov	r0, r1, d0
 800af64:	2b00      	cmp	r3, #0
 800af66:	bfd6      	itet	le
 800af68:	460a      	movle	r2, r1
 800af6a:	462a      	movgt	r2, r5
 800af6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af70:	468b      	mov	fp, r1
 800af72:	462f      	mov	r7, r5
 800af74:	bfd4      	ite	le
 800af76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800af7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af7e:	4620      	mov	r0, r4
 800af80:	ee10 2a10 	vmov	r2, s0
 800af84:	465b      	mov	r3, fp
 800af86:	4639      	mov	r1, r7
 800af88:	f7f5 fc80 	bl	800088c <__aeabi_ddiv>
 800af8c:	ec41 0b10 	vmov	d0, r0, r1
 800af90:	b003      	add	sp, #12
 800af92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af96 <__copybits>:
 800af96:	3901      	subs	r1, #1
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	1149      	asrs	r1, r1, #5
 800af9c:	6914      	ldr	r4, [r2, #16]
 800af9e:	3101      	adds	r1, #1
 800afa0:	f102 0314 	add.w	r3, r2, #20
 800afa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800afa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800afac:	1f05      	subs	r5, r0, #4
 800afae:	42a3      	cmp	r3, r4
 800afb0:	d30c      	bcc.n	800afcc <__copybits+0x36>
 800afb2:	1aa3      	subs	r3, r4, r2
 800afb4:	3b11      	subs	r3, #17
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	3211      	adds	r2, #17
 800afbc:	42a2      	cmp	r2, r4
 800afbe:	bf88      	it	hi
 800afc0:	2300      	movhi	r3, #0
 800afc2:	4418      	add	r0, r3
 800afc4:	2300      	movs	r3, #0
 800afc6:	4288      	cmp	r0, r1
 800afc8:	d305      	bcc.n	800afd6 <__copybits+0x40>
 800afca:	bd70      	pop	{r4, r5, r6, pc}
 800afcc:	f853 6b04 	ldr.w	r6, [r3], #4
 800afd0:	f845 6f04 	str.w	r6, [r5, #4]!
 800afd4:	e7eb      	b.n	800afae <__copybits+0x18>
 800afd6:	f840 3b04 	str.w	r3, [r0], #4
 800afda:	e7f4      	b.n	800afc6 <__copybits+0x30>

0800afdc <__any_on>:
 800afdc:	f100 0214 	add.w	r2, r0, #20
 800afe0:	6900      	ldr	r0, [r0, #16]
 800afe2:	114b      	asrs	r3, r1, #5
 800afe4:	4298      	cmp	r0, r3
 800afe6:	b510      	push	{r4, lr}
 800afe8:	db11      	blt.n	800b00e <__any_on+0x32>
 800afea:	dd0a      	ble.n	800b002 <__any_on+0x26>
 800afec:	f011 011f 	ands.w	r1, r1, #31
 800aff0:	d007      	beq.n	800b002 <__any_on+0x26>
 800aff2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aff6:	fa24 f001 	lsr.w	r0, r4, r1
 800affa:	fa00 f101 	lsl.w	r1, r0, r1
 800affe:	428c      	cmp	r4, r1
 800b000:	d10b      	bne.n	800b01a <__any_on+0x3e>
 800b002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b006:	4293      	cmp	r3, r2
 800b008:	d803      	bhi.n	800b012 <__any_on+0x36>
 800b00a:	2000      	movs	r0, #0
 800b00c:	bd10      	pop	{r4, pc}
 800b00e:	4603      	mov	r3, r0
 800b010:	e7f7      	b.n	800b002 <__any_on+0x26>
 800b012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b016:	2900      	cmp	r1, #0
 800b018:	d0f5      	beq.n	800b006 <__any_on+0x2a>
 800b01a:	2001      	movs	r0, #1
 800b01c:	e7f6      	b.n	800b00c <__any_on+0x30>
	...

0800b020 <_free_r>:
 800b020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b022:	2900      	cmp	r1, #0
 800b024:	d048      	beq.n	800b0b8 <_free_r+0x98>
 800b026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02a:	9001      	str	r0, [sp, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f1a1 0404 	sub.w	r4, r1, #4
 800b032:	bfb8      	it	lt
 800b034:	18e4      	addlt	r4, r4, r3
 800b036:	f7ff fb2b 	bl	800a690 <__malloc_lock>
 800b03a:	4a20      	ldr	r2, [pc, #128]	; (800b0bc <_free_r+0x9c>)
 800b03c:	9801      	ldr	r0, [sp, #4]
 800b03e:	6813      	ldr	r3, [r2, #0]
 800b040:	4615      	mov	r5, r2
 800b042:	b933      	cbnz	r3, 800b052 <_free_r+0x32>
 800b044:	6063      	str	r3, [r4, #4]
 800b046:	6014      	str	r4, [r2, #0]
 800b048:	b003      	add	sp, #12
 800b04a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b04e:	f7ff bb25 	b.w	800a69c <__malloc_unlock>
 800b052:	42a3      	cmp	r3, r4
 800b054:	d90b      	bls.n	800b06e <_free_r+0x4e>
 800b056:	6821      	ldr	r1, [r4, #0]
 800b058:	1862      	adds	r2, r4, r1
 800b05a:	4293      	cmp	r3, r2
 800b05c:	bf04      	itt	eq
 800b05e:	681a      	ldreq	r2, [r3, #0]
 800b060:	685b      	ldreq	r3, [r3, #4]
 800b062:	6063      	str	r3, [r4, #4]
 800b064:	bf04      	itt	eq
 800b066:	1852      	addeq	r2, r2, r1
 800b068:	6022      	streq	r2, [r4, #0]
 800b06a:	602c      	str	r4, [r5, #0]
 800b06c:	e7ec      	b.n	800b048 <_free_r+0x28>
 800b06e:	461a      	mov	r2, r3
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	b10b      	cbz	r3, 800b078 <_free_r+0x58>
 800b074:	42a3      	cmp	r3, r4
 800b076:	d9fa      	bls.n	800b06e <_free_r+0x4e>
 800b078:	6811      	ldr	r1, [r2, #0]
 800b07a:	1855      	adds	r5, r2, r1
 800b07c:	42a5      	cmp	r5, r4
 800b07e:	d10b      	bne.n	800b098 <_free_r+0x78>
 800b080:	6824      	ldr	r4, [r4, #0]
 800b082:	4421      	add	r1, r4
 800b084:	1854      	adds	r4, r2, r1
 800b086:	42a3      	cmp	r3, r4
 800b088:	6011      	str	r1, [r2, #0]
 800b08a:	d1dd      	bne.n	800b048 <_free_r+0x28>
 800b08c:	681c      	ldr	r4, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	6053      	str	r3, [r2, #4]
 800b092:	4421      	add	r1, r4
 800b094:	6011      	str	r1, [r2, #0]
 800b096:	e7d7      	b.n	800b048 <_free_r+0x28>
 800b098:	d902      	bls.n	800b0a0 <_free_r+0x80>
 800b09a:	230c      	movs	r3, #12
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	e7d3      	b.n	800b048 <_free_r+0x28>
 800b0a0:	6825      	ldr	r5, [r4, #0]
 800b0a2:	1961      	adds	r1, r4, r5
 800b0a4:	428b      	cmp	r3, r1
 800b0a6:	bf04      	itt	eq
 800b0a8:	6819      	ldreq	r1, [r3, #0]
 800b0aa:	685b      	ldreq	r3, [r3, #4]
 800b0ac:	6063      	str	r3, [r4, #4]
 800b0ae:	bf04      	itt	eq
 800b0b0:	1949      	addeq	r1, r1, r5
 800b0b2:	6021      	streq	r1, [r4, #0]
 800b0b4:	6054      	str	r4, [r2, #4]
 800b0b6:	e7c7      	b.n	800b048 <_free_r+0x28>
 800b0b8:	b003      	add	sp, #12
 800b0ba:	bd30      	pop	{r4, r5, pc}
 800b0bc:	20000210 	.word	0x20000210

0800b0c0 <__ssputs_r>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	688e      	ldr	r6, [r1, #8]
 800b0c6:	429e      	cmp	r6, r3
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4690      	mov	r8, r2
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	d838      	bhi.n	800b144 <__ssputs_r+0x84>
 800b0d2:	898a      	ldrh	r2, [r1, #12]
 800b0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0d8:	d032      	beq.n	800b140 <__ssputs_r+0x80>
 800b0da:	6825      	ldr	r5, [r4, #0]
 800b0dc:	6909      	ldr	r1, [r1, #16]
 800b0de:	eba5 0901 	sub.w	r9, r5, r1
 800b0e2:	6965      	ldr	r5, [r4, #20]
 800b0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	444b      	add	r3, r9
 800b0f0:	106d      	asrs	r5, r5, #1
 800b0f2:	429d      	cmp	r5, r3
 800b0f4:	bf38      	it	cc
 800b0f6:	461d      	movcc	r5, r3
 800b0f8:	0553      	lsls	r3, r2, #21
 800b0fa:	d531      	bpl.n	800b160 <__ssputs_r+0xa0>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7fb ff19 	bl	8006f34 <_malloc_r>
 800b102:	4606      	mov	r6, r0
 800b104:	b950      	cbnz	r0, 800b11c <__ssputs_r+0x5c>
 800b106:	230c      	movs	r3, #12
 800b108:	f8ca 3000 	str.w	r3, [sl]
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11c:	6921      	ldr	r1, [r4, #16]
 800b11e:	464a      	mov	r2, r9
 800b120:	f7ff faa8 	bl	800a674 <memcpy>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	6126      	str	r6, [r4, #16]
 800b132:	6165      	str	r5, [r4, #20]
 800b134:	444e      	add	r6, r9
 800b136:	eba5 0509 	sub.w	r5, r5, r9
 800b13a:	6026      	str	r6, [r4, #0]
 800b13c:	60a5      	str	r5, [r4, #8]
 800b13e:	463e      	mov	r6, r7
 800b140:	42be      	cmp	r6, r7
 800b142:	d900      	bls.n	800b146 <__ssputs_r+0x86>
 800b144:	463e      	mov	r6, r7
 800b146:	4632      	mov	r2, r6
 800b148:	6820      	ldr	r0, [r4, #0]
 800b14a:	4641      	mov	r1, r8
 800b14c:	f000 fb38 	bl	800b7c0 <memmove>
 800b150:	68a3      	ldr	r3, [r4, #8]
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	1b9b      	subs	r3, r3, r6
 800b156:	4432      	add	r2, r6
 800b158:	60a3      	str	r3, [r4, #8]
 800b15a:	6022      	str	r2, [r4, #0]
 800b15c:	2000      	movs	r0, #0
 800b15e:	e7db      	b.n	800b118 <__ssputs_r+0x58>
 800b160:	462a      	mov	r2, r5
 800b162:	f000 fb47 	bl	800b7f4 <_realloc_r>
 800b166:	4606      	mov	r6, r0
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1e1      	bne.n	800b130 <__ssputs_r+0x70>
 800b16c:	6921      	ldr	r1, [r4, #16]
 800b16e:	4650      	mov	r0, sl
 800b170:	f7ff ff56 	bl	800b020 <_free_r>
 800b174:	e7c7      	b.n	800b106 <__ssputs_r+0x46>
	...

0800b178 <_svfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4698      	mov	r8, r3
 800b17e:	898b      	ldrh	r3, [r1, #12]
 800b180:	061b      	lsls	r3, r3, #24
 800b182:	b09d      	sub	sp, #116	; 0x74
 800b184:	4607      	mov	r7, r0
 800b186:	460d      	mov	r5, r1
 800b188:	4614      	mov	r4, r2
 800b18a:	d50e      	bpl.n	800b1aa <_svfiprintf_r+0x32>
 800b18c:	690b      	ldr	r3, [r1, #16]
 800b18e:	b963      	cbnz	r3, 800b1aa <_svfiprintf_r+0x32>
 800b190:	2140      	movs	r1, #64	; 0x40
 800b192:	f7fb fecf 	bl	8006f34 <_malloc_r>
 800b196:	6028      	str	r0, [r5, #0]
 800b198:	6128      	str	r0, [r5, #16]
 800b19a:	b920      	cbnz	r0, 800b1a6 <_svfiprintf_r+0x2e>
 800b19c:	230c      	movs	r3, #12
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1a4:	e0d1      	b.n	800b34a <_svfiprintf_r+0x1d2>
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	616b      	str	r3, [r5, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b8:	2330      	movs	r3, #48	; 0x30
 800b1ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b364 <_svfiprintf_r+0x1ec>
 800b1be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c2:	f04f 0901 	mov.w	r9, #1
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ce:	b10a      	cbz	r2, 800b1d4 <_svfiprintf_r+0x5c>
 800b1d0:	2a25      	cmp	r2, #37	; 0x25
 800b1d2:	d1f9      	bne.n	800b1c8 <_svfiprintf_r+0x50>
 800b1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d8:	d00b      	beq.n	800b1f2 <_svfiprintf_r+0x7a>
 800b1da:	465b      	mov	r3, fp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ff6d 	bl	800b0c0 <__ssputs_r>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f000 80aa 	beq.w	800b340 <_svfiprintf_r+0x1c8>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ee:	445a      	add	r2, fp
 800b1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80a2 	beq.w	800b340 <_svfiprintf_r+0x1c8>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b206:	f10a 0a01 	add.w	sl, sl, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b212:	931a      	str	r3, [sp, #104]	; 0x68
 800b214:	4654      	mov	r4, sl
 800b216:	2205      	movs	r2, #5
 800b218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21c:	4851      	ldr	r0, [pc, #324]	; (800b364 <_svfiprintf_r+0x1ec>)
 800b21e:	f7f4 ffff 	bl	8000220 <memchr>
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	b9d8      	cbnz	r0, 800b25e <_svfiprintf_r+0xe6>
 800b226:	06d0      	lsls	r0, r2, #27
 800b228:	bf44      	itt	mi
 800b22a:	2320      	movmi	r3, #32
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b230:	0711      	lsls	r1, r2, #28
 800b232:	bf44      	itt	mi
 800b234:	232b      	movmi	r3, #43	; 0x2b
 800b236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b2a      	cmp	r3, #42	; 0x2a
 800b240:	d015      	beq.n	800b26e <_svfiprintf_r+0xf6>
 800b242:	9a07      	ldr	r2, [sp, #28]
 800b244:	4654      	mov	r4, sl
 800b246:	2000      	movs	r0, #0
 800b248:	f04f 0c0a 	mov.w	ip, #10
 800b24c:	4621      	mov	r1, r4
 800b24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b252:	3b30      	subs	r3, #48	; 0x30
 800b254:	2b09      	cmp	r3, #9
 800b256:	d94e      	bls.n	800b2f6 <_svfiprintf_r+0x17e>
 800b258:	b1b0      	cbz	r0, 800b288 <_svfiprintf_r+0x110>
 800b25a:	9207      	str	r2, [sp, #28]
 800b25c:	e014      	b.n	800b288 <_svfiprintf_r+0x110>
 800b25e:	eba0 0308 	sub.w	r3, r0, r8
 800b262:	fa09 f303 	lsl.w	r3, r9, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	46a2      	mov	sl, r4
 800b26c:	e7d2      	b.n	800b214 <_svfiprintf_r+0x9c>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9103      	str	r1, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbb      	ittet	lt
 800b27a:	425b      	neglt	r3, r3
 800b27c:	f042 0202 	orrlt.w	r2, r2, #2
 800b280:	9307      	strge	r3, [sp, #28]
 800b282:	9307      	strlt	r3, [sp, #28]
 800b284:	bfb8      	it	lt
 800b286:	9204      	strlt	r2, [sp, #16]
 800b288:	7823      	ldrb	r3, [r4, #0]
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d10c      	bne.n	800b2a8 <_svfiprintf_r+0x130>
 800b28e:	7863      	ldrb	r3, [r4, #1]
 800b290:	2b2a      	cmp	r3, #42	; 0x2a
 800b292:	d135      	bne.n	800b300 <_svfiprintf_r+0x188>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	1d1a      	adds	r2, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	9203      	str	r2, [sp, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfb8      	it	lt
 800b2a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2a4:	3402      	adds	r4, #2
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b374 <_svfiprintf_r+0x1fc>
 800b2ac:	7821      	ldrb	r1, [r4, #0]
 800b2ae:	2203      	movs	r2, #3
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	f7f4 ffb5 	bl	8000220 <memchr>
 800b2b6:	b140      	cbz	r0, 800b2ca <_svfiprintf_r+0x152>
 800b2b8:	2340      	movs	r3, #64	; 0x40
 800b2ba:	eba0 000a 	sub.w	r0, r0, sl
 800b2be:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	4303      	orrs	r3, r0
 800b2c6:	3401      	adds	r4, #1
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	4826      	ldr	r0, [pc, #152]	; (800b368 <_svfiprintf_r+0x1f0>)
 800b2d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d4:	2206      	movs	r2, #6
 800b2d6:	f7f4 ffa3 	bl	8000220 <memchr>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d038      	beq.n	800b350 <_svfiprintf_r+0x1d8>
 800b2de:	4b23      	ldr	r3, [pc, #140]	; (800b36c <_svfiprintf_r+0x1f4>)
 800b2e0:	bb1b      	cbnz	r3, 800b32a <_svfiprintf_r+0x1b2>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	3307      	adds	r3, #7
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	4433      	add	r3, r6
 800b2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f4:	e767      	b.n	800b1c6 <_svfiprintf_r+0x4e>
 800b2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7a5      	b.n	800b24c <_svfiprintf_r+0xd4>
 800b300:	2300      	movs	r3, #0
 800b302:	3401      	adds	r4, #1
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	4619      	mov	r1, r3
 800b308:	f04f 0c0a 	mov.w	ip, #10
 800b30c:	4620      	mov	r0, r4
 800b30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b312:	3a30      	subs	r2, #48	; 0x30
 800b314:	2a09      	cmp	r2, #9
 800b316:	d903      	bls.n	800b320 <_svfiprintf_r+0x1a8>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0c5      	beq.n	800b2a8 <_svfiprintf_r+0x130>
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	e7c3      	b.n	800b2a8 <_svfiprintf_r+0x130>
 800b320:	fb0c 2101 	mla	r1, ip, r1, r2
 800b324:	4604      	mov	r4, r0
 800b326:	2301      	movs	r3, #1
 800b328:	e7f0      	b.n	800b30c <_svfiprintf_r+0x194>
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	462a      	mov	r2, r5
 800b330:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b332:	a904      	add	r1, sp, #16
 800b334:	4638      	mov	r0, r7
 800b336:	f7fb fef7 	bl	8007128 <_printf_float>
 800b33a:	1c42      	adds	r2, r0, #1
 800b33c:	4606      	mov	r6, r0
 800b33e:	d1d6      	bne.n	800b2ee <_svfiprintf_r+0x176>
 800b340:	89ab      	ldrh	r3, [r5, #12]
 800b342:	065b      	lsls	r3, r3, #25
 800b344:	f53f af2c 	bmi.w	800b1a0 <_svfiprintf_r+0x28>
 800b348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34a:	b01d      	add	sp, #116	; 0x74
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	ab03      	add	r3, sp, #12
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	462a      	mov	r2, r5
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_svfiprintf_r+0x1f8>)
 800b358:	a904      	add	r1, sp, #16
 800b35a:	4638      	mov	r0, r7
 800b35c:	f7fc f988 	bl	8007670 <_printf_i>
 800b360:	e7eb      	b.n	800b33a <_svfiprintf_r+0x1c2>
 800b362:	bf00      	nop
 800b364:	0800c024 	.word	0x0800c024
 800b368:	0800c02e 	.word	0x0800c02e
 800b36c:	08007129 	.word	0x08007129
 800b370:	0800b0c1 	.word	0x0800b0c1
 800b374:	0800c02a 	.word	0x0800c02a

0800b378 <__sfputc_r>:
 800b378:	6893      	ldr	r3, [r2, #8]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	b410      	push	{r4}
 800b380:	6093      	str	r3, [r2, #8]
 800b382:	da08      	bge.n	800b396 <__sfputc_r+0x1e>
 800b384:	6994      	ldr	r4, [r2, #24]
 800b386:	42a3      	cmp	r3, r4
 800b388:	db01      	blt.n	800b38e <__sfputc_r+0x16>
 800b38a:	290a      	cmp	r1, #10
 800b38c:	d103      	bne.n	800b396 <__sfputc_r+0x1e>
 800b38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b392:	f7fd bc5b 	b.w	8008c4c <__swbuf_r>
 800b396:	6813      	ldr	r3, [r2, #0]
 800b398:	1c58      	adds	r0, r3, #1
 800b39a:	6010      	str	r0, [r2, #0]
 800b39c:	7019      	strb	r1, [r3, #0]
 800b39e:	4608      	mov	r0, r1
 800b3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <__sfputs_r>:
 800b3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	460f      	mov	r7, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	18d5      	adds	r5, r2, r3
 800b3b0:	42ac      	cmp	r4, r5
 800b3b2:	d101      	bne.n	800b3b8 <__sfputs_r+0x12>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	e007      	b.n	800b3c8 <__sfputs_r+0x22>
 800b3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3bc:	463a      	mov	r2, r7
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7ff ffda 	bl	800b378 <__sfputc_r>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d1f3      	bne.n	800b3b0 <__sfputs_r+0xa>
 800b3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3cc <_vfiprintf_r>:
 800b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	b09d      	sub	sp, #116	; 0x74
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	4698      	mov	r8, r3
 800b3d8:	4606      	mov	r6, r0
 800b3da:	b118      	cbz	r0, 800b3e4 <_vfiprintf_r+0x18>
 800b3dc:	6983      	ldr	r3, [r0, #24]
 800b3de:	b90b      	cbnz	r3, 800b3e4 <_vfiprintf_r+0x18>
 800b3e0:	f7fe fca4 	bl	8009d2c <__sinit>
 800b3e4:	4b89      	ldr	r3, [pc, #548]	; (800b60c <_vfiprintf_r+0x240>)
 800b3e6:	429d      	cmp	r5, r3
 800b3e8:	d11b      	bne.n	800b422 <_vfiprintf_r+0x56>
 800b3ea:	6875      	ldr	r5, [r6, #4]
 800b3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ee:	07d9      	lsls	r1, r3, #31
 800b3f0:	d405      	bmi.n	800b3fe <_vfiprintf_r+0x32>
 800b3f2:	89ab      	ldrh	r3, [r5, #12]
 800b3f4:	059a      	lsls	r2, r3, #22
 800b3f6:	d402      	bmi.n	800b3fe <_vfiprintf_r+0x32>
 800b3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3fa:	f7ff f8ba 	bl	800a572 <__retarget_lock_acquire_recursive>
 800b3fe:	89ab      	ldrh	r3, [r5, #12]
 800b400:	071b      	lsls	r3, r3, #28
 800b402:	d501      	bpl.n	800b408 <_vfiprintf_r+0x3c>
 800b404:	692b      	ldr	r3, [r5, #16]
 800b406:	b9eb      	cbnz	r3, 800b444 <_vfiprintf_r+0x78>
 800b408:	4629      	mov	r1, r5
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7fd fc70 	bl	8008cf0 <__swsetup_r>
 800b410:	b1c0      	cbz	r0, 800b444 <_vfiprintf_r+0x78>
 800b412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b414:	07dc      	lsls	r4, r3, #31
 800b416:	d50e      	bpl.n	800b436 <_vfiprintf_r+0x6a>
 800b418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b41c:	b01d      	add	sp, #116	; 0x74
 800b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b422:	4b7b      	ldr	r3, [pc, #492]	; (800b610 <_vfiprintf_r+0x244>)
 800b424:	429d      	cmp	r5, r3
 800b426:	d101      	bne.n	800b42c <_vfiprintf_r+0x60>
 800b428:	68b5      	ldr	r5, [r6, #8]
 800b42a:	e7df      	b.n	800b3ec <_vfiprintf_r+0x20>
 800b42c:	4b79      	ldr	r3, [pc, #484]	; (800b614 <_vfiprintf_r+0x248>)
 800b42e:	429d      	cmp	r5, r3
 800b430:	bf08      	it	eq
 800b432:	68f5      	ldreq	r5, [r6, #12]
 800b434:	e7da      	b.n	800b3ec <_vfiprintf_r+0x20>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	0598      	lsls	r0, r3, #22
 800b43a:	d4ed      	bmi.n	800b418 <_vfiprintf_r+0x4c>
 800b43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43e:	f7ff f899 	bl	800a574 <__retarget_lock_release_recursive>
 800b442:	e7e9      	b.n	800b418 <_vfiprintf_r+0x4c>
 800b444:	2300      	movs	r3, #0
 800b446:	9309      	str	r3, [sp, #36]	; 0x24
 800b448:	2320      	movs	r3, #32
 800b44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b452:	2330      	movs	r3, #48	; 0x30
 800b454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b618 <_vfiprintf_r+0x24c>
 800b458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b45c:	f04f 0901 	mov.w	r9, #1
 800b460:	4623      	mov	r3, r4
 800b462:	469a      	mov	sl, r3
 800b464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b468:	b10a      	cbz	r2, 800b46e <_vfiprintf_r+0xa2>
 800b46a:	2a25      	cmp	r2, #37	; 0x25
 800b46c:	d1f9      	bne.n	800b462 <_vfiprintf_r+0x96>
 800b46e:	ebba 0b04 	subs.w	fp, sl, r4
 800b472:	d00b      	beq.n	800b48c <_vfiprintf_r+0xc0>
 800b474:	465b      	mov	r3, fp
 800b476:	4622      	mov	r2, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7ff ff93 	bl	800b3a6 <__sfputs_r>
 800b480:	3001      	adds	r0, #1
 800b482:	f000 80aa 	beq.w	800b5da <_vfiprintf_r+0x20e>
 800b486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b488:	445a      	add	r2, fp
 800b48a:	9209      	str	r2, [sp, #36]	; 0x24
 800b48c:	f89a 3000 	ldrb.w	r3, [sl]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 80a2 	beq.w	800b5da <_vfiprintf_r+0x20e>
 800b496:	2300      	movs	r3, #0
 800b498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a0:	f10a 0a01 	add.w	sl, sl, #1
 800b4a4:	9304      	str	r3, [sp, #16]
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ae:	4654      	mov	r4, sl
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b6:	4858      	ldr	r0, [pc, #352]	; (800b618 <_vfiprintf_r+0x24c>)
 800b4b8:	f7f4 feb2 	bl	8000220 <memchr>
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	b9d8      	cbnz	r0, 800b4f8 <_vfiprintf_r+0x12c>
 800b4c0:	06d1      	lsls	r1, r2, #27
 800b4c2:	bf44      	itt	mi
 800b4c4:	2320      	movmi	r3, #32
 800b4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ca:	0713      	lsls	r3, r2, #28
 800b4cc:	bf44      	itt	mi
 800b4ce:	232b      	movmi	r3, #43	; 0x2b
 800b4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4da:	d015      	beq.n	800b508 <_vfiprintf_r+0x13c>
 800b4dc:	9a07      	ldr	r2, [sp, #28]
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ec:	3b30      	subs	r3, #48	; 0x30
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	d94e      	bls.n	800b590 <_vfiprintf_r+0x1c4>
 800b4f2:	b1b0      	cbz	r0, 800b522 <_vfiprintf_r+0x156>
 800b4f4:	9207      	str	r2, [sp, #28]
 800b4f6:	e014      	b.n	800b522 <_vfiprintf_r+0x156>
 800b4f8:	eba0 0308 	sub.w	r3, r0, r8
 800b4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	46a2      	mov	sl, r4
 800b506:	e7d2      	b.n	800b4ae <_vfiprintf_r+0xe2>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	1d19      	adds	r1, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	9103      	str	r1, [sp, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfbb      	ittet	lt
 800b514:	425b      	neglt	r3, r3
 800b516:	f042 0202 	orrlt.w	r2, r2, #2
 800b51a:	9307      	strge	r3, [sp, #28]
 800b51c:	9307      	strlt	r3, [sp, #28]
 800b51e:	bfb8      	it	lt
 800b520:	9204      	strlt	r2, [sp, #16]
 800b522:	7823      	ldrb	r3, [r4, #0]
 800b524:	2b2e      	cmp	r3, #46	; 0x2e
 800b526:	d10c      	bne.n	800b542 <_vfiprintf_r+0x176>
 800b528:	7863      	ldrb	r3, [r4, #1]
 800b52a:	2b2a      	cmp	r3, #42	; 0x2a
 800b52c:	d135      	bne.n	800b59a <_vfiprintf_r+0x1ce>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9203      	str	r2, [sp, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfb8      	it	lt
 800b53a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b53e:	3402      	adds	r4, #2
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b628 <_vfiprintf_r+0x25c>
 800b546:	7821      	ldrb	r1, [r4, #0]
 800b548:	2203      	movs	r2, #3
 800b54a:	4650      	mov	r0, sl
 800b54c:	f7f4 fe68 	bl	8000220 <memchr>
 800b550:	b140      	cbz	r0, 800b564 <_vfiprintf_r+0x198>
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	eba0 000a 	sub.w	r0, r0, sl
 800b558:	fa03 f000 	lsl.w	r0, r3, r0
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	4303      	orrs	r3, r0
 800b560:	3401      	adds	r4, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b568:	482c      	ldr	r0, [pc, #176]	; (800b61c <_vfiprintf_r+0x250>)
 800b56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b56e:	2206      	movs	r2, #6
 800b570:	f7f4 fe56 	bl	8000220 <memchr>
 800b574:	2800      	cmp	r0, #0
 800b576:	d03f      	beq.n	800b5f8 <_vfiprintf_r+0x22c>
 800b578:	4b29      	ldr	r3, [pc, #164]	; (800b620 <_vfiprintf_r+0x254>)
 800b57a:	bb1b      	cbnz	r3, 800b5c4 <_vfiprintf_r+0x1f8>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	3307      	adds	r3, #7
 800b580:	f023 0307 	bic.w	r3, r3, #7
 800b584:	3308      	adds	r3, #8
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58a:	443b      	add	r3, r7
 800b58c:	9309      	str	r3, [sp, #36]	; 0x24
 800b58e:	e767      	b.n	800b460 <_vfiprintf_r+0x94>
 800b590:	fb0c 3202 	mla	r2, ip, r2, r3
 800b594:	460c      	mov	r4, r1
 800b596:	2001      	movs	r0, #1
 800b598:	e7a5      	b.n	800b4e6 <_vfiprintf_r+0x11a>
 800b59a:	2300      	movs	r3, #0
 800b59c:	3401      	adds	r4, #1
 800b59e:	9305      	str	r3, [sp, #20]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	f04f 0c0a 	mov.w	ip, #10
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ac:	3a30      	subs	r2, #48	; 0x30
 800b5ae:	2a09      	cmp	r2, #9
 800b5b0:	d903      	bls.n	800b5ba <_vfiprintf_r+0x1ee>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0c5      	beq.n	800b542 <_vfiprintf_r+0x176>
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	e7c3      	b.n	800b542 <_vfiprintf_r+0x176>
 800b5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5be:	4604      	mov	r4, r0
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e7f0      	b.n	800b5a6 <_vfiprintf_r+0x1da>
 800b5c4:	ab03      	add	r3, sp, #12
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <_vfiprintf_r+0x258>)
 800b5cc:	a904      	add	r1, sp, #16
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7fb fdaa 	bl	8007128 <_printf_float>
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	1c78      	adds	r0, r7, #1
 800b5d8:	d1d6      	bne.n	800b588 <_vfiprintf_r+0x1bc>
 800b5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5dc:	07d9      	lsls	r1, r3, #31
 800b5de:	d405      	bmi.n	800b5ec <_vfiprintf_r+0x220>
 800b5e0:	89ab      	ldrh	r3, [r5, #12]
 800b5e2:	059a      	lsls	r2, r3, #22
 800b5e4:	d402      	bmi.n	800b5ec <_vfiprintf_r+0x220>
 800b5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e8:	f7fe ffc4 	bl	800a574 <__retarget_lock_release_recursive>
 800b5ec:	89ab      	ldrh	r3, [r5, #12]
 800b5ee:	065b      	lsls	r3, r3, #25
 800b5f0:	f53f af12 	bmi.w	800b418 <_vfiprintf_r+0x4c>
 800b5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f6:	e711      	b.n	800b41c <_vfiprintf_r+0x50>
 800b5f8:	ab03      	add	r3, sp, #12
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <_vfiprintf_r+0x258>)
 800b600:	a904      	add	r1, sp, #16
 800b602:	4630      	mov	r0, r6
 800b604:	f7fc f834 	bl	8007670 <_printf_i>
 800b608:	e7e4      	b.n	800b5d4 <_vfiprintf_r+0x208>
 800b60a:	bf00      	nop
 800b60c:	0800be04 	.word	0x0800be04
 800b610:	0800be24 	.word	0x0800be24
 800b614:	0800bde4 	.word	0x0800bde4
 800b618:	0800c024 	.word	0x0800c024
 800b61c:	0800c02e 	.word	0x0800c02e
 800b620:	08007129 	.word	0x08007129
 800b624:	0800b3a7 	.word	0x0800b3a7
 800b628:	0800c02a 	.word	0x0800c02a
 800b62c:	00000000 	.word	0x00000000

0800b630 <nan>:
 800b630:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b638 <nan+0x8>
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	00000000 	.word	0x00000000
 800b63c:	7ff80000 	.word	0x7ff80000

0800b640 <__sread>:
 800b640:	b510      	push	{r4, lr}
 800b642:	460c      	mov	r4, r1
 800b644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b648:	f000 f8fa 	bl	800b840 <_read_r>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	bfab      	itete	ge
 800b650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b652:	89a3      	ldrhlt	r3, [r4, #12]
 800b654:	181b      	addge	r3, r3, r0
 800b656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b65a:	bfac      	ite	ge
 800b65c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b65e:	81a3      	strhlt	r3, [r4, #12]
 800b660:	bd10      	pop	{r4, pc}

0800b662 <__swrite>:
 800b662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	461f      	mov	r7, r3
 800b668:	898b      	ldrh	r3, [r1, #12]
 800b66a:	05db      	lsls	r3, r3, #23
 800b66c:	4605      	mov	r5, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	4616      	mov	r6, r2
 800b672:	d505      	bpl.n	800b680 <__swrite+0x1e>
 800b674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b678:	2302      	movs	r3, #2
 800b67a:	2200      	movs	r2, #0
 800b67c:	f000 f88e 	bl	800b79c <_lseek_r>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b68a:	81a3      	strh	r3, [r4, #12]
 800b68c:	4632      	mov	r2, r6
 800b68e:	463b      	mov	r3, r7
 800b690:	4628      	mov	r0, r5
 800b692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b696:	f000 b835 	b.w	800b704 <_write_r>

0800b69a <__sseek>:
 800b69a:	b510      	push	{r4, lr}
 800b69c:	460c      	mov	r4, r1
 800b69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a2:	f000 f87b 	bl	800b79c <_lseek_r>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	bf15      	itete	ne
 800b6ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6b6:	81a3      	strheq	r3, [r4, #12]
 800b6b8:	bf18      	it	ne
 800b6ba:	81a3      	strhne	r3, [r4, #12]
 800b6bc:	bd10      	pop	{r4, pc}

0800b6be <__sclose>:
 800b6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c2:	f000 b839 	b.w	800b738 <_close_r>

0800b6c6 <strncmp>:
 800b6c6:	b510      	push	{r4, lr}
 800b6c8:	b16a      	cbz	r2, 800b6e6 <strncmp+0x20>
 800b6ca:	3901      	subs	r1, #1
 800b6cc:	1884      	adds	r4, r0, r2
 800b6ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d103      	bne.n	800b6e2 <strncmp+0x1c>
 800b6da:	42a0      	cmp	r0, r4
 800b6dc:	d001      	beq.n	800b6e2 <strncmp+0x1c>
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1f5      	bne.n	800b6ce <strncmp+0x8>
 800b6e2:	1a98      	subs	r0, r3, r2
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	e7fc      	b.n	800b6e4 <strncmp+0x1e>

0800b6ea <__ascii_wctomb>:
 800b6ea:	b149      	cbz	r1, 800b700 <__ascii_wctomb+0x16>
 800b6ec:	2aff      	cmp	r2, #255	; 0xff
 800b6ee:	bf85      	ittet	hi
 800b6f0:	238a      	movhi	r3, #138	; 0x8a
 800b6f2:	6003      	strhi	r3, [r0, #0]
 800b6f4:	700a      	strbls	r2, [r1, #0]
 800b6f6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b6fa:	bf98      	it	ls
 800b6fc:	2001      	movls	r0, #1
 800b6fe:	4770      	bx	lr
 800b700:	4608      	mov	r0, r1
 800b702:	4770      	bx	lr

0800b704 <_write_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_write_r+0x20>)
 800b708:	4604      	mov	r4, r0
 800b70a:	4608      	mov	r0, r1
 800b70c:	4611      	mov	r1, r2
 800b70e:	2200      	movs	r2, #0
 800b710:	602a      	str	r2, [r5, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	f7f5 fcb1 	bl	800107a <_write>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_write_r+0x1e>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_write_r+0x1e>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	200005ec 	.word	0x200005ec

0800b728 <abort>:
 800b728:	b508      	push	{r3, lr}
 800b72a:	2006      	movs	r0, #6
 800b72c:	f000 f8c2 	bl	800b8b4 <raise>
 800b730:	2001      	movs	r0, #1
 800b732:	f7f6 fd09 	bl	8002148 <_exit>
	...

0800b738 <_close_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d06      	ldr	r5, [pc, #24]	; (800b754 <_close_r+0x1c>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f7f6 fd27 	bl	8002196 <_close>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_close_r+0x1a>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_close_r+0x1a>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	200005ec 	.word	0x200005ec

0800b758 <_fstat_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_fstat_r+0x20>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	4608      	mov	r0, r1
 800b762:	4611      	mov	r1, r2
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	f7f6 fd22 	bl	80021ae <_fstat>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d102      	bne.n	800b774 <_fstat_r+0x1c>
 800b76e:	682b      	ldr	r3, [r5, #0]
 800b770:	b103      	cbz	r3, 800b774 <_fstat_r+0x1c>
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	bd38      	pop	{r3, r4, r5, pc}
 800b776:	bf00      	nop
 800b778:	200005ec 	.word	0x200005ec

0800b77c <_isatty_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d06      	ldr	r5, [pc, #24]	; (800b798 <_isatty_r+0x1c>)
 800b780:	2300      	movs	r3, #0
 800b782:	4604      	mov	r4, r0
 800b784:	4608      	mov	r0, r1
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	f7f6 fd21 	bl	80021ce <_isatty>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_isatty_r+0x1a>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b103      	cbz	r3, 800b796 <_isatty_r+0x1a>
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	200005ec 	.word	0x200005ec

0800b79c <_lseek_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d07      	ldr	r5, [pc, #28]	; (800b7bc <_lseek_r+0x20>)
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	602a      	str	r2, [r5, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f7f6 fd1a 	bl	80021e4 <_lseek>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_lseek_r+0x1e>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_lseek_r+0x1e>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	200005ec 	.word	0x200005ec

0800b7c0 <memmove>:
 800b7c0:	4288      	cmp	r0, r1
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	eb01 0402 	add.w	r4, r1, r2
 800b7c8:	d902      	bls.n	800b7d0 <memmove+0x10>
 800b7ca:	4284      	cmp	r4, r0
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	d807      	bhi.n	800b7e0 <memmove+0x20>
 800b7d0:	1e43      	subs	r3, r0, #1
 800b7d2:	42a1      	cmp	r1, r4
 800b7d4:	d008      	beq.n	800b7e8 <memmove+0x28>
 800b7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7de:	e7f8      	b.n	800b7d2 <memmove+0x12>
 800b7e0:	4402      	add	r2, r0
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	428a      	cmp	r2, r1
 800b7e6:	d100      	bne.n	800b7ea <memmove+0x2a>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7f2:	e7f7      	b.n	800b7e4 <memmove+0x24>

0800b7f4 <_realloc_r>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	4614      	mov	r4, r2
 800b7fa:	460e      	mov	r6, r1
 800b7fc:	b921      	cbnz	r1, 800b808 <_realloc_r+0x14>
 800b7fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b802:	4611      	mov	r1, r2
 800b804:	f7fb bb96 	b.w	8006f34 <_malloc_r>
 800b808:	b922      	cbnz	r2, 800b814 <_realloc_r+0x20>
 800b80a:	f7ff fc09 	bl	800b020 <_free_r>
 800b80e:	4625      	mov	r5, r4
 800b810:	4628      	mov	r0, r5
 800b812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b814:	f000 f86a 	bl	800b8ec <_malloc_usable_size_r>
 800b818:	42a0      	cmp	r0, r4
 800b81a:	d20f      	bcs.n	800b83c <_realloc_r+0x48>
 800b81c:	4621      	mov	r1, r4
 800b81e:	4638      	mov	r0, r7
 800b820:	f7fb fb88 	bl	8006f34 <_malloc_r>
 800b824:	4605      	mov	r5, r0
 800b826:	2800      	cmp	r0, #0
 800b828:	d0f2      	beq.n	800b810 <_realloc_r+0x1c>
 800b82a:	4631      	mov	r1, r6
 800b82c:	4622      	mov	r2, r4
 800b82e:	f7fe ff21 	bl	800a674 <memcpy>
 800b832:	4631      	mov	r1, r6
 800b834:	4638      	mov	r0, r7
 800b836:	f7ff fbf3 	bl	800b020 <_free_r>
 800b83a:	e7e9      	b.n	800b810 <_realloc_r+0x1c>
 800b83c:	4635      	mov	r5, r6
 800b83e:	e7e7      	b.n	800b810 <_realloc_r+0x1c>

0800b840 <_read_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d07      	ldr	r5, [pc, #28]	; (800b860 <_read_r+0x20>)
 800b844:	4604      	mov	r4, r0
 800b846:	4608      	mov	r0, r1
 800b848:	4611      	mov	r1, r2
 800b84a:	2200      	movs	r2, #0
 800b84c:	602a      	str	r2, [r5, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	f7f6 fc84 	bl	800215c <_read>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_read_r+0x1e>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_read_r+0x1e>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	200005ec 	.word	0x200005ec

0800b864 <_raise_r>:
 800b864:	291f      	cmp	r1, #31
 800b866:	b538      	push	{r3, r4, r5, lr}
 800b868:	4604      	mov	r4, r0
 800b86a:	460d      	mov	r5, r1
 800b86c:	d904      	bls.n	800b878 <_raise_r+0x14>
 800b86e:	2316      	movs	r3, #22
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b87a:	b112      	cbz	r2, 800b882 <_raise_r+0x1e>
 800b87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b880:	b94b      	cbnz	r3, 800b896 <_raise_r+0x32>
 800b882:	4620      	mov	r0, r4
 800b884:	f000 f830 	bl	800b8e8 <_getpid_r>
 800b888:	462a      	mov	r2, r5
 800b88a:	4601      	mov	r1, r0
 800b88c:	4620      	mov	r0, r4
 800b88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b892:	f000 b817 	b.w	800b8c4 <_kill_r>
 800b896:	2b01      	cmp	r3, #1
 800b898:	d00a      	beq.n	800b8b0 <_raise_r+0x4c>
 800b89a:	1c59      	adds	r1, r3, #1
 800b89c:	d103      	bne.n	800b8a6 <_raise_r+0x42>
 800b89e:	2316      	movs	r3, #22
 800b8a0:	6003      	str	r3, [r0, #0]
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	e7e7      	b.n	800b876 <_raise_r+0x12>
 800b8a6:	2400      	movs	r4, #0
 800b8a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	4798      	blx	r3
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	e7e0      	b.n	800b876 <_raise_r+0x12>

0800b8b4 <raise>:
 800b8b4:	4b02      	ldr	r3, [pc, #8]	; (800b8c0 <raise+0xc>)
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	f7ff bfd3 	b.w	800b864 <_raise_r>
 800b8be:	bf00      	nop
 800b8c0:	20000014 	.word	0x20000014

0800b8c4 <_kill_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_kill_r+0x20>)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	f7f6 fc29 	bl	8002128 <_kill>
 800b8d6:	1c43      	adds	r3, r0, #1
 800b8d8:	d102      	bne.n	800b8e0 <_kill_r+0x1c>
 800b8da:	682b      	ldr	r3, [r5, #0]
 800b8dc:	b103      	cbz	r3, 800b8e0 <_kill_r+0x1c>
 800b8de:	6023      	str	r3, [r4, #0]
 800b8e0:	bd38      	pop	{r3, r4, r5, pc}
 800b8e2:	bf00      	nop
 800b8e4:	200005ec 	.word	0x200005ec

0800b8e8 <_getpid_r>:
 800b8e8:	f7f6 bc16 	b.w	8002118 <_getpid>

0800b8ec <_malloc_usable_size_r>:
 800b8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8f0:	1f18      	subs	r0, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfbc      	itt	lt
 800b8f6:	580b      	ldrlt	r3, [r1, r0]
 800b8f8:	18c0      	addlt	r0, r0, r3
 800b8fa:	4770      	bx	lr

0800b8fc <_init>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr

0800b908 <_fini>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	bf00      	nop
 800b90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90e:	bc08      	pop	{r3}
 800b910:	469e      	mov	lr, r3
 800b912:	4770      	bx	lr
