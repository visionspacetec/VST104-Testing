
VST104-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800ae88  0800ae88  0001ae88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b56c  0800b56c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b56c  0800b56c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b56c  0800b56c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001e4  0800b758  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800b758  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a920  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031da  00000000  00000000  0003ab34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0003dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010a9a  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000064ff  00000000  00000000  00050dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000572d1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000069cc  00000000  00000000  00057324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ae6c 	.word	0x0800ae6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800ae6c 	.word	0x0800ae6c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d013      	beq.n	8000d54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00b      	beq.n	8000d54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d3c:	e000      	b.n	8000d40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_write>:
static void MX_ADC2_Init(void);
static void MX_I2C3_Init(void);
/* USER CODE BEGIN PFP */

// SWD printf() replacement
int _write(int file, char *ptr, int len) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffc9 	bl	8000d14 <ITM_SendChar>
	for(int i=0; i<len; i++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf1      	blt.n	8000d74 <_write+0x12>
	return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f000 ffae 	bl	8001d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 f85f 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f000 fb35 	bl	8001418 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dae:	f000 f901 	bl	8000fb4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000db2:	f000 f9db 	bl	800116c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000db6:	f000 fa0f 	bl	80011d8 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000dba:	f000 fa43 	bl	8001244 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000dbe:	f000 fac1 	bl	8001344 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000dc2:	f000 faeb 	bl	800139c <MX_SPI1_Init>
  MX_ADC2_Init();
 8000dc6:	f000 f96d 	bl	80010a4 <MX_ADC2_Init>
  MX_I2C3_Init();
 8000dca:	f000 fa7b 	bl	80012c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

	//test SDW printf
  	HAL_Delay(1500);
 8000dce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000dd2:	f001 f80b 	bl	8001dec <HAL_Delay>
	printf("\nSDW printf() initialized\n\n");
 8000dd6:	4821      	ldr	r0, [pc, #132]	; (8000e5c <main+0xc0>)
 8000dd8:	f006 fa98 	bl	800730c <puts>

	// MCP reset power
	mcp9804_powerReset();
 8000ddc:	f004 fdde 	bl	800599c <mcp9804_powerReset>

	// MCP configure
	for(int i=0; i<7; i++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e006      	b.n	8000df4 <main+0x58>
		mcp9804_configure(&hi2c2, i);
 8000de6:	68f9      	ldr	r1, [r7, #12]
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <main+0xc4>)
 8000dea:	f004 fdfd 	bl	80059e8 <mcp9804_configure>
	for(int i=0; i<7; i++)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	ddf5      	ble.n	8000de6 <main+0x4a>

	// MCP read manufacturer
	for(int i=0; i<7; i++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	e006      	b.n	8000e0e <main+0x72>
		mcp9884_readManufac(&hi2c2, i);
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	4817      	ldr	r0, [pc, #92]	; (8000e60 <main+0xc4>)
 8000e04:	f004 fe08 	bl	8005a18 <mcp9884_readManufac>
	for(int i=0; i<7; i++)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	ddf5      	ble.n	8000e00 <main+0x64>

	// MMC reset power
	mmc5883_powerReset();
 8000e14:	f004 ff00 	bl	8005c18 <mmc5883_powerReset>

	// MMC configure
	mmc5883_configure(&hi2c3, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4812      	ldr	r0, [pc, #72]	; (8000e64 <main+0xc8>)
 8000e1c:	f004 ff7a 	bl	8005d14 <mmc5883_configure>

	// MMC read manufacturer
	mmc5883_readManufac(&hi2c3, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	4810      	ldr	r0, [pc, #64]	; (8000e64 <main+0xc8>)
 8000e24:	f004 ffce 	bl	8005dc4 <mmc5883_readManufac>

	// initial 0.5s wait
	HAL_Delay(500);
 8000e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2c:	f000 ffde 	bl	8001dec <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//scanI2Caddr(&hi2c3);

	for(int i=0; i<7; i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	e006      	b.n	8000e44 <main+0xa8>
		mcp9884_readData(&hi2c2, i);
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <main+0xc4>)
 8000e3a:	f004 fe7b 	bl	8005b34 <mcp9884_readData>
	for(int i=0; i<7; i++)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	ddf5      	ble.n	8000e36 <main+0x9a>

	mmc5883_readTempData(&hi2c3, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <main+0xc8>)
 8000e4e:	f004 fff7 	bl	8005e40 <mmc5883_readTempData>
	mmc5883_readMagData(&hi2c3, 0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <main+0xc8>)
 8000e56:	f005 f8a1 	bl	8005f9c <mmc5883_readMagData>

	// development loop
	while(1) {
 8000e5a:	e7fe      	b.n	8000e5a <main+0xbe>
 8000e5c:	0800ae88 	.word	0x0800ae88
 8000e60:	200002cc 	.word	0x200002cc
 8000e64:	20000218 	.word	0x20000218

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0c0      	sub	sp, #256	; 0x100
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e72:	2244      	movs	r2, #68	; 0x44
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fb40 	bl	80064fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	228c      	movs	r2, #140	; 0x8c
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 fb31 	bl	80064fc <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 f9c3 	bl	8004254 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000ed4:	f000 fb6c 	bl	80015b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 fdcf 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f08:	f000 fb52 	bl	80015b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
 8000f0c:	f44f 4383 	mov.w	r3, #16768	; 0x4180
 8000f10:	61fb      	str	r3, [r7, #28]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 ff79 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000f50:	f000 fb2e 	bl	80015b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f58:	f003 f854 	bl	8004004 <HAL_PWREx_ControlVoltageScaling>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000f62:	f000 fb25 	bl	80015b0 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <SystemClock_Config+0x148>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <SystemClock_Config+0x148>)
 8000f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <SystemClock_Config+0x148>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	463b      	mov	r3, r7
 8000f80:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000f86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8000f90:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000f96:	2322      	movs	r3, #34	; 0x22
 8000f98:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 fa47 	bl	8005434 <HAL_RCCEx_CRSConfig>
}
 8000fa6:	bf00      	nop
 8000fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000fde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fe2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_ADC1_Init+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001004:	2200      	movs	r2, #0
 8001006:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_ADC1_Init+0xe4>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_ADC1_Init+0xe4>)
 800101e:	2200      	movs	r2, #0
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_ADC1_Init+0xe4>)
 800102c:	2200      	movs	r2, #0
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <MX_ADC1_Init+0xe4>)
 800103a:	f001 f89b 	bl	8002174 <HAL_ADC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001044:	f000 fab4 	bl	80015b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001054:	f001 fe1a 	bl	8002c8c <HAL_ADCEx_MultiModeConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800105e:	f000 faa7 	bl	80015b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001066:	2306      	movs	r3, #6
 8001068:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106e:	237f      	movs	r3, #127	; 0x7f
 8001070:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001072:	2304      	movs	r3, #4
 8001074:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_ADC1_Init+0xe4>)
 8001080:	f001 f9d2 	bl	8002428 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800108a:	f000 fa91 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000318 	.word	0x20000318
 800109c:	50040000 	.word	0x50040000
 80010a0:	10c00010 	.word	0x10c00010

080010a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010dc:	2204      	movs	r2, #4
 80010de:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_ADC2_Init+0xbc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_ADC2_Init+0xbc>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_ADC2_Init+0xbc>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_ADC2_Init+0xbc>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_ADC2_Init+0xbc>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800111c:	4810      	ldr	r0, [pc, #64]	; (8001160 <MX_ADC2_Init+0xbc>)
 800111e:	f001 f829 	bl	8002174 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001128:	f000 fa42 	bl	80015b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_ADC2_Init+0xc4>)
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001130:	2306      	movs	r3, #6
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001138:	237f      	movs	r3, #127	; 0x7f
 800113a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113c:	2304      	movs	r3, #4
 800113e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_ADC2_Init+0xbc>)
 800114a:	f001 f96d 	bl	8002428 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001154:	f000 fa2c 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000264 	.word	0x20000264
 8001164:	50040100 	.word	0x50040100
 8001168:	0c900008 	.word	0x0c900008

0800116c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <MX_CAN1_Init+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001178:	2210      	movs	r2, #16
 800117a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_CAN1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_CAN1_Init+0x64>)
 800118a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001196:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_CAN1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011be:	f001 fe15 	bl	8002dec <HAL_CAN_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011c8:	f000 f9f2 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000040c 	.word	0x2000040c
 80011d4:	40006400 	.word	0x40006400

080011d8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_CAN2_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_CAN2_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_CAN2_Init+0x64>)
 80011e4:	2210      	movs	r2, #16
 80011e6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_CAN2_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_CAN2_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_CAN2_Init+0x64>)
 80011f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011fa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_CAN2_Init+0x64>)
 80011fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001202:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_CAN2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_CAN2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_CAN2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_CAN2_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_CAN2_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_CAN2_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_CAN2_Init+0x64>)
 800122a:	f001 fddf 	bl	8002dec <HAL_CAN_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 f9bc 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000380 	.word	0x20000380
 8001240:	40006800 	.word	0x40006800

08001244 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_I2C2_Init+0x74>)
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <MX_I2C2_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <MX_I2C2_Init+0x7c>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_I2C2_Init+0x74>)
 800125c:	2201      	movs	r2, #1
 800125e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_I2C2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_I2C2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001280:	f002 f940 	bl	8003504 <HAL_I2C_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800128a:	f000 f991 	bl	80015b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001292:	f002 fe11 	bl	8003eb8 <HAL_I2CEx_ConfigAnalogFilter>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800129c:	f000 f988 	bl	80015b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_I2C2_Init+0x74>)
 80012a4:	f002 fe53 	bl	8003f4e <HAL_I2CEx_ConfigDigitalFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 f97f 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002cc 	.word	0x200002cc
 80012bc:	40005800 	.word	0x40005800
 80012c0:	00303d5b 	.word	0x00303d5b

080012c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_I2C3_Init+0x74>)
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <MX_I2C3_Init+0x78>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_I2C3_Init+0x74>)
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <MX_I2C3_Init+0x7c>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_I2C3_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_I2C3_Init+0x74>)
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_I2C3_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_I2C3_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_I2C3_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_I2C3_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_I2C3_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <MX_I2C3_Init+0x74>)
 8001300:	f002 f900 	bl	8003504 <HAL_I2C_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800130a:	f000 f951 	bl	80015b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <MX_I2C3_Init+0x74>)
 8001312:	f002 fdd1 	bl	8003eb8 <HAL_I2CEx_ConfigAnalogFilter>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800131c:	f000 f948 	bl	80015b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_I2C3_Init+0x74>)
 8001324:	f002 fe13 	bl	8003f4e <HAL_I2CEx_ConfigDigitalFilter>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800132e:	f000 f93f 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000218 	.word	0x20000218
 800133c:	40005c00 	.word	0x40005c00
 8001340:	00303d5b 	.word	0x00303d5b

08001344 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_QUADSPI_Init+0x54>)
 800134c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001356:	2201      	movs	r2, #1
 8001358:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001362:	221f      	movs	r2, #31
 8001364:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_QUADSPI_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_QUADSPI_Init+0x50>)
 8001380:	f002 fea6 	bl	80040d0 <HAL_QSPI_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 f911 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000434 	.word	0x20000434
 8001398:	a0001000 	.word	0xa0001000

0800139c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_SPI1_Init+0x74>)
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <MX_SPI1_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_SPI1_Init+0x74>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_SPI1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI1_Init+0x74>)
 80013b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_SPI1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI1_Init+0x74>)
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_SPI1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI1_Init+0x74>)
 80013ea:	2207      	movs	r2, #7
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_SPI1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI1_Init+0x74>)
 80013f6:	2208      	movs	r2, #8
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_SPI1_Init+0x74>)
 80013fc:	f004 fa2a 	bl	8005854 <HAL_SPI_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 f8d3 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200003a8 	.word	0x200003a8
 8001414:	40013000 	.word	0x40013000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a5b      	ldr	r2, [pc, #364]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <MX_GPIO_Init+0x188>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001446:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a55      	ldr	r2, [pc, #340]	; (80015a0 <MX_GPIO_Init+0x188>)
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <MX_GPIO_Init+0x188>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <MX_GPIO_Init+0x188>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a43      	ldr	r2, [pc, #268]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <MX_GPIO_Init+0x188>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <MX_GPIO_Init+0x188>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <MX_GPIO_Init+0x188>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <MX_GPIO_Init+0x188>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80014be:	f002 fdf7 	bl	80040b0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_GPIO_Init+0x188>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <MX_GPIO_Init+0x188>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <MX_GPIO_Init+0x188>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2102      	movs	r1, #2
 80014de:	4831      	ldr	r0, [pc, #196]	; (80015a4 <MX_GPIO_Init+0x18c>)
 80014e0:	f001 fff8 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HOLD_Pin|SP1_WP_Pin|SPI1_CS1_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2113      	movs	r1, #19
 80014e8:	482f      	ldr	r0, [pc, #188]	; (80015a8 <MX_GPIO_Init+0x190>)
 80014ea:	f001 fff3 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	211b      	movs	r1, #27
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f001 ffed 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, I2C3_EN_Pin|I2C2_EN_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001500:	482a      	ldr	r0, [pc, #168]	; (80015ac <MX_GPIO_Init+0x194>)
 8001502:	f001 ffe7 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <MX_GPIO_Init+0x18c>)
 800151e:	f001 fe47 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HOLD_Pin SP1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_HOLD_Pin|SP1_WP_Pin;
 8001522:	2303      	movs	r3, #3
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_GPIO_Init+0x190>)
 800153a:	f001 fe39 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin SPI1_CS3_Pin SPI1_CS2_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin;
 800153e:	231b      	movs	r3, #27
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f001 fe2a 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 800155c:	2310      	movs	r3, #16
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_GPIO_Init+0x190>)
 8001574:	f001 fe1c 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_EN_Pin I2C2_EN_Pin */
  GPIO_InitStruct.Pin = I2C3_EN_Pin|I2C2_EN_Pin;
 8001578:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_GPIO_Init+0x194>)
 8001592:	f001 fe0d 	bl	80031b0 <HAL_GPIO_Init>

}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	; 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48001c00 	.word	0x48001c00
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6613      	str	r3, [r2, #96]	; 0x60
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x44>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_ADC_MspInit+0xec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12d      	bne.n	8001682 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_ADC_MspInit+0xf0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a31      	ldr	r2, [pc, #196]	; (80016f4 <HAL_ADC_MspInit+0xf0>)
 800162e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_ADC_MspInit+0xf0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 800163e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF1_CUR_Pin;
 8001668:	2308      	movs	r3, #8
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800166c:	230b      	movs	r3, #11
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EF1_CUR_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4820      	ldr	r0, [pc, #128]	; (80016fc <HAL_ADC_MspInit+0xf8>)
 800167c:	f001 fd98 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001680:	e031      	b.n	80016e6 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_ADC_MspInit+0xfc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d12c      	bne.n	80016e6 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_ADC_MspInit+0xf0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_ADC_MspInit+0xf0>)
 8001694:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_ADC_MspInit+0xf0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10b      	bne.n	80016b6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 80016a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_ADC_MspInit+0xf4>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EF2_CUR_Pin|EF1_CUR_Pin;
 80016ce:	230c      	movs	r3, #12
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016d2:	230b      	movs	r3, #11
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_ADC_MspInit+0xf8>)
 80016e2:	f001 fd65 	bl	80031b0 <HAL_GPIO_Init>
}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	; 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	50040000 	.word	0x50040000
 80016f4:	20000200 	.word	0x20000200
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000800 	.word	0x48000800
 8001700:	50040100 	.word	0x50040100

08001704 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a45      	ldr	r2, [pc, #276]	; (8001838 <HAL_CAN_MspInit+0x134>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d132      	bne.n	800178c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_CAN_MspInit+0x138>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a43      	ldr	r2, [pc, #268]	; (800183c <HAL_CAN_MspInit+0x138>)
 800172e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001730:	4b42      	ldr	r3, [pc, #264]	; (800183c <HAL_CAN_MspInit+0x138>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10b      	bne.n	8001750 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001738:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a40      	ldr	r2, [pc, #256]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 800173e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
 8001744:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175c:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800177a:	2309      	movs	r3, #9
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	482f      	ldr	r0, [pc, #188]	; (8001844 <HAL_CAN_MspInit+0x140>)
 8001786:	f001 fd13 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800178a:	e051      	b.n	8001830 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <HAL_CAN_MspInit+0x144>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d14c      	bne.n	8001830 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 800179c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017a0:	6593      	str	r3, [r2, #88]	; 0x58
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_CAN_MspInit+0x138>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <HAL_CAN_MspInit+0x138>)
 80017b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_CAN_MspInit+0x138>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10b      	bne.n	80017d8 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_CAN_MspInit+0x13c>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f0:	2320      	movs	r3, #32
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001800:	2303      	movs	r3, #3
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <HAL_CAN_MspInit+0x140>)
 800180c:	f001 fcd0 	bl	80031b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001810:	2340      	movs	r3, #64	; 0x40
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001820:	2308      	movs	r3, #8
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <HAL_CAN_MspInit+0x140>)
 800182c:	f001 fcc0 	bl	80031b0 <HAL_GPIO_Init>
}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40006400 	.word	0x40006400
 800183c:	20000204 	.word	0x20000204
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400
 8001848:	40006800 	.word	0x40006800

0800184c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_I2C_MspInit+0xdc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d128      	bne.n	80018c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_I2C_MspInit+0xe0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a2e      	ldr	r2, [pc, #184]	; (800192c <HAL_I2C_MspInit+0xe0>)
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HAL_I2C_MspInit+0xe0>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001886:	2303      	movs	r3, #3
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188a:	2312      	movs	r3, #18
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001896:	2304      	movs	r3, #4
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	4823      	ldr	r0, [pc, #140]	; (8001930 <HAL_I2C_MspInit+0xe4>)
 80018a2:	f001 fc85 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_I2C_MspInit+0xe0>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_I2C_MspInit+0xe0>)
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_I2C_MspInit+0xe0>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018be:	e02f      	b.n	8001920 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_I2C_MspInit+0xe8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12a      	bne.n	8001920 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_I2C_MspInit+0xe0>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_I2C_MspInit+0xe0>)
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_I2C_MspInit+0xe0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80018e2:	f002 fbe5 	bl	80040b0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018f8:	2304      	movs	r3, #4
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <HAL_I2C_MspInit+0xec>)
 8001904:	f001 fc54 	bl	80031b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_I2C_MspInit+0xe0>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_I2C_MspInit+0xe0>)
 800190e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_I2C_MspInit+0xe0>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	bf00      	nop
 8001922:	3730      	adds	r7, #48	; 0x30
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005800 	.word	0x40005800
 800192c:	40021000 	.word	0x40021000
 8001930:	48001400 	.word	0x48001400
 8001934:	40005c00 	.word	0x40005c00
 8001938:	48001800 	.word	0x48001800

0800193c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <HAL_QSPI_MspInit+0xd8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d156      	bne.n	8001a0c <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 8001960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001962:	4a2d      	ldr	r2, [pc, #180]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6513      	str	r3, [r2, #80]	; 0x50
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_QSPI_MspInit+0xdc>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80019a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019b8:	230a      	movs	r3, #10
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4816      	ldr	r0, [pc, #88]	; (8001a1c <HAL_QSPI_MspInit+0xe0>)
 80019c4:	f001 fbf4 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 80019da:	2303      	movs	r3, #3
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <HAL_QSPI_MspInit+0xe0>)
 80019e6:	f001 fbe3 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CS3_Pin;
 80019ea:	2304      	movs	r3, #4
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019fa:	230a      	movs	r3, #10
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CS3_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f001 fbd2 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	a0001000 	.word	0xa0001000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48001400 	.word	0x48001400

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x7c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d128      	bne.n	8001a94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a72:	23e0      	movs	r3, #224	; 0xe0
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a82:	2305      	movs	r3, #5
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f001 fb8e 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40013000 	.word	0x40013000
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af0:	f000 f95c 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_kill>:

int _kill(int pid, int sig)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b12:	f004 fcc9 	bl	80064a8 <__errno>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2216      	movs	r2, #22
 8001b1a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_exit>:

void _exit (int status)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffe7 	bl	8001b08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b3a:	e7fe      	b.n	8001b3a <_exit+0x12>

08001b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e00a      	b.n	8001b64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b4e:	f3af 8000 	nop.w
 8001b52:	4601      	mov	r1, r0
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf0      	blt.n	8001b4e <_read+0x12>
	}

return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f004 fc4a 	bl	80064a8 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20050000 	.word	0x20050000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20000208 	.word	0x20000208
 8001c48:	20000498 	.word	0x20000498

08001c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <SystemInit+0x5c>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <SystemInit+0x5c>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <SystemInit+0x60>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <SystemInit+0x60>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <SystemInit+0x60>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <SystemInit+0x60>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <SystemInit+0x60>)
 8001c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <SystemInit+0x60>)
 8001c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SystemInit+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <SystemInit+0x60>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SystemInit+0x60>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	40021000 	.word	0x40021000

08001cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb4:	f7ff ffca 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cba:	e003      	b.n	8001cc4 <LoopCopyDataInit>

08001cbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cc2:	3104      	adds	r1, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cc4:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ccc:	d3f6      	bcc.n	8001cbc <CopyDataInit>
	ldr	r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cd0:	e002      	b.n	8001cd8 <LoopFillZerobss>

08001cd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cd4:	f842 3b04 	str.w	r3, [r2], #4

08001cd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <LoopForever+0x16>)
	cmp	r2, r3
 8001cda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cdc:	d3f9      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f004 fbe9 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce2:	f7ff f85b 	bl	8000d9c <main>

08001ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce6:	e7fe      	b.n	8001ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce8:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001cec:	0800b574 	.word	0x0800b574
	ldr	r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cf4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001cf8:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001cfc:	20000494 	.word	0x20000494

08001d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC1_2_IRQHandler>

08001d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f001 fa1b 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d12:	2000      	movs	r0, #0
 8001d14:	f000 f80e 	bl	8001d34 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e001      	b.n	8001d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d24:	f7ff fc4a 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_InitTick+0x6c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_InitTick+0x70>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_InitTick+0x6c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fa19 	bl	8003196 <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d809      	bhi.n	8001d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d78:	f001 f9f1 	bl	800315e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_InitTick+0x74>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e007      	b.n	8001d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e004      	b.n	8001d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e001      	b.n	8001d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000480 	.word	0x20000480

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000480 	.word	0x20000480

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008

08001e34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3360      	adds	r3, #96	; 0x60
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <LL_ADC_SetOffset+0x44>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	03fff000 	.word	0x03fff000

08001ee4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3360      	adds	r3, #96	; 0x60
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3360      	adds	r3, #96	; 0x60
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	615a      	str	r2, [r3, #20]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3330      	adds	r3, #48	; 0x30
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	211f      	movs	r1, #31
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0e9b      	lsrs	r3, r3, #26
 8001fa4:	f003 011f 	and.w	r1, r3, #31
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0e5b      	lsrs	r3, r3, #25
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0d1b      	lsrs	r3, r3, #20
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0d1b      	lsrs	r3, r3, #20
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0318 	and.w	r3, r3, #24
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002040:	40d9      	lsrs	r1, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	400b      	ands	r3, r1
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	431a      	orrs	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	0007ffff 	.word	0x0007ffff

08002064 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6093      	str	r3, [r2, #8]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <LL_ADC_IsEnabled+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_IsEnabled+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d101      	bne.n	800213e <LL_ADC_REG_IsConversionOngoing+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d101      	bne.n	8002164 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e139      	b.n	8002402 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fa31 	bl	8001604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff67 	bl	8002088 <LL_ADC_IsDeepPowerDownEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff4d 	bl	8002064 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff82 	bl	80020d8 <LL_ADC_IsInternalRegulatorEnabled>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d115      	bne.n	8002206 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff66 	bl	80020b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e4:	4b89      	ldr	r3, [pc, #548]	; (800240c <HAL_ADC_Init+0x298>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	4a89      	ldr	r2, [pc, #548]	; (8002410 <HAL_ADC_Init+0x29c>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff64 	bl	80020d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff75 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 800223c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80d2 	bne.w	80023f0 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80ce 	bne.w	80023f0 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff49 	bl	8002100 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d115      	bne.n	80022a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002274:	4867      	ldr	r0, [pc, #412]	; (8002414 <HAL_ADC_Init+0x2a0>)
 8002276:	f7ff ff43 	bl	8002100 <LL_ADC_IsEnabled>
 800227a:	4604      	mov	r4, r0
 800227c:	4866      	ldr	r0, [pc, #408]	; (8002418 <HAL_ADC_Init+0x2a4>)
 800227e:	f7ff ff3f 	bl	8002100 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	431c      	orrs	r4, r3
 8002286:	4865      	ldr	r0, [pc, #404]	; (800241c <HAL_ADC_Init+0x2a8>)
 8002288:	f7ff ff3a 	bl	8002100 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	4323      	orrs	r3, r4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4619      	mov	r1, r3
 800229a:	4861      	ldr	r0, [pc, #388]	; (8002420 <HAL_ADC_Init+0x2ac>)
 800229c:	f7ff fdca 	bl	8001e34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e5b      	ldrb	r3, [r3, #25]
 80022a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	3b01      	subs	r3, #1
 80022d4:	045b      	lsls	r3, r3, #17
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_ADC_Init+0x2b0>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff08 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 8002316:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff15 	bl	800214c <LL_ADC_INJ_IsConversionOngoing>
 8002322:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d140      	bne.n	80023ac <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d13d      	bne.n	80023ac <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e1b      	ldrb	r3, [r3, #24]
 8002338:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800233a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002342:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002352:	f023 0306 	bic.w	r3, r3, #6
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	430b      	orrs	r3, r1
 800235e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002366:	2b01      	cmp	r3, #1
 8002368:	d118      	bne.n	800239c <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800238c:	430a      	orrs	r2, r1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	e007      	b.n	80023ac <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10c      	bne.n	80023ce <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f023 010f 	bic.w	r1, r3, #15
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	1e5a      	subs	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
 80023cc:	e007      	b.n	80023de <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 020f 	bic.w	r2, r2, #15
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	; 0x58
 80023ee:	e007      	b.n	8002400 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	f043 0210 	orr.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002400:	7ffb      	ldrb	r3, [r7, #31]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	50040000 	.word	0x50040000
 8002418:	50040100 	.word	0x50040100
 800241c:	50040200 	.word	0x50040200
 8002420:	50040300 	.word	0x50040300
 8002424:	fff0c007 	.word	0xfff0c007

08002428 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0b6      	sub	sp, #216	; 0xd8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x22>
 8002446:	2302      	movs	r3, #2
 8002448:	e3e3      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x7ea>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fe65 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 83c4 	bne.w	8002bec <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d824      	bhi.n	80024b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	3b02      	subs	r3, #2
 8002472:	2b03      	cmp	r3, #3
 8002474:	d81b      	bhi.n	80024ae <HAL_ADC_ConfigChannel+0x86>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_ADC_ConfigChannel+0x54>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002495 	.word	0x08002495
 8002484:	0800249d 	.word	0x0800249d
 8002488:	080024a5 	.word	0x080024a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	220c      	movs	r2, #12
 8002490:	605a      	str	r2, [r3, #4]
          break;
 8002492:	e011      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2212      	movs	r2, #18
 8002498:	605a      	str	r2, [r3, #4]
          break;
 800249a:	e00d      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2218      	movs	r2, #24
 80024a0:	605a      	str	r2, [r3, #4]
          break;
 80024a2:	e009      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024aa:	605a      	str	r2, [r3, #4]
          break;
 80024ac:	e004      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2206      	movs	r2, #6
 80024b2:	605a      	str	r2, [r3, #4]
          break;
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f7ff fd51 	bl	8001f6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fe29 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 80024d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fe35 	bl	800214c <LL_ADC_INJ_IsConversionOngoing>
 80024e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 81c1 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 81bc 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002502:	d10f      	bne.n	8002524 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	4619      	mov	r1, r3
 8002510:	f7ff fd58 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fd12 	bl	8001f46 <LL_ADC_SetSamplingTimeCommonConfig>
 8002522:	e00e      	b.n	8002542 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	461a      	mov	r2, r3
 8002532:	f7ff fd47 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fd02 	bl	8001f46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d00a      	beq.n	800257a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6919      	ldr	r1, [r3, #16]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002574:	f7ff fc92 	bl	8001e9c <LL_ADC_SetOffset>
 8002578:	e17b      	b.n	8002872 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fcaf 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x17e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fca4 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	e01e      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x1bc>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fc99 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e004      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80025d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1d4>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	e018      	b.n	800262e <HAL_ADC_ConfigChannel+0x206>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e004      	b.n	800262e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800262e:	429a      	cmp	r2, r3
 8002630:	d106      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc68 	bl	8001f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fc4c 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x244>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fc41 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	e01e      	b.n	80026aa <HAL_ADC_ConfigChannel+0x282>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fc36 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800268a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800268e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e004      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800269e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x29a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	e018      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x2cc>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80026ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2101      	movs	r1, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fc05 	bl	8001f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fbe9 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x30a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2102      	movs	r1, #2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fbde 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	e01e      	b.n	8002770 <HAL_ADC_ConfigChannel+0x348>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fbd3 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e004      	b.n	800276e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x360>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	e016      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x38e>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800279a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800279c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e004      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d106      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	2102      	movs	r1, #2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fba4 	bl	8001f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2103      	movs	r1, #3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fb88 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x3cc>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2103      	movs	r1, #3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fb7d 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	f003 021f 	and.w	r2, r3, #31
 80027f2:	e017      	b.n	8002824 <HAL_ADC_ConfigChannel+0x3fc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2103      	movs	r1, #3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fb72 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800280c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e003      	b.n	8002822 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800281a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_ConfigChannel+0x414>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	e011      	b.n	8002860 <HAL_ADC_ConfigChannel+0x438>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800284a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800284c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	2103      	movs	r1, #3
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fb4f 	bl	8001f10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fc42 	bl	8002100 <LL_ADC_IsEnabled>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8140 	bne.w	8002b04 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	461a      	mov	r2, r3
 8002892:	f7ff fbc3 	bl	800201c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4a8f      	ldr	r2, [pc, #572]	; (8002ad8 <HAL_ADC_ConfigChannel+0x6b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	f040 8131 	bne.w	8002b04 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10b      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x4a2>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	2b09      	cmp	r3, #9
 80028c0:	bf94      	ite	ls
 80028c2:	2301      	movls	r3, #1
 80028c4:	2300      	movhi	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e019      	b.n	80028fe <HAL_ADC_ConfigChannel+0x4d6>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028da:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e003      	b.n	80028ee <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d079      	beq.n	80029f6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_ADC_ConfigChannel+0x4f6>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	3301      	adds	r3, #1
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291c:	e015      	b.n	800294a <HAL_ADC_ConfigChannel+0x522>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800292c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e003      	b.n	8002942 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3301      	adds	r3, #1
 8002944:	069b      	lsls	r3, r3, #26
 8002946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_ADC_ConfigChannel+0x542>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	e017      	b.n	800299a <HAL_ADC_ConfigChannel+0x572>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	ea42 0103 	orr.w	r1, r2, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x598>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0e9b      	lsrs	r3, r3, #26
 80029b0:	3301      	adds	r3, #1
 80029b2:	f003 021f 	and.w	r2, r3, #31
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	051b      	lsls	r3, r3, #20
 80029be:	e018      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x5ca>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80029d8:	2320      	movs	r3, #32
 80029da:	e003      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80029dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 021f 	and.w	r2, r3, #31
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f2:	430b      	orrs	r3, r1
 80029f4:	e081      	b.n	8002afa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x5ea>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	3301      	adds	r3, #1
 8002a0a:	069b      	lsls	r3, r3, #26
 8002a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a10:	e015      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x616>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e003      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	069b      	lsls	r3, r3, #26
 8002a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x636>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	3301      	adds	r3, #1
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	e017      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x666>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e003      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	ea42 0103 	orr.w	r1, r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x692>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x6d0>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	613b      	str	r3, [r7, #16]
  return result;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d104      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e006      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x6bc>
 8002ad6:	bf00      	nop
 8002ad8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	3b1e      	subs	r3, #30
 8002af2:	051b      	lsls	r3, r3, #20
 8002af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af8:	430b      	orrs	r3, r1
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	6892      	ldr	r2, [r2, #8]
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7ff fa60 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_ADC_ConfigChannel+0x7f4>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d07a      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b10:	4843      	ldr	r0, [pc, #268]	; (8002c20 <HAL_ADC_ConfigChannel+0x7f8>)
 8002b12:	f7ff f9b5 	bl	8001e80 <LL_ADC_GetCommonPathInternalCh>
 8002b16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <HAL_ADC_ConfigChannel+0x7fc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d12c      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d126      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a3c      	ldr	r2, [pc, #240]	; (8002c28 <HAL_ADC_ConfigChannel+0x800>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x71c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3b      	ldr	r2, [pc, #236]	; (8002c2c <HAL_ADC_ConfigChannel+0x804>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d15d      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4834      	ldr	r0, [pc, #208]	; (8002c20 <HAL_ADC_ConfigChannel+0x7f8>)
 8002b50:	f7ff f983 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_ADC_ConfigChannel+0x808>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <HAL_ADC_ConfigChannel+0x80c>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b6e:	e002      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f9      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b7c:	e040      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2d      	ldr	r2, [pc, #180]	; (8002c38 <HAL_ADC_ConfigChannel+0x810>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d118      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x792>
 8002b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d112      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <HAL_ADC_ConfigChannel+0x800>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x780>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_ADC_ConfigChannel+0x804>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d12d      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	481b      	ldr	r0, [pc, #108]	; (8002c20 <HAL_ADC_ConfigChannel+0x7f8>)
 8002bb4:	f7ff f951 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb8:	e024      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_ADC_ConfigChannel+0x814>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d120      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11a      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_ADC_ConfigChannel+0x800>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d115      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be2:	4619      	mov	r1, r3
 8002be4:	480e      	ldr	r0, [pc, #56]	; (8002c20 <HAL_ADC_ConfigChannel+0x7f8>)
 8002be6:	f7ff f938 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
 8002bea:	e00c      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bfe:	e002      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	37d8      	adds	r7, #216	; 0xd8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	80080000 	.word	0x80080000
 8002c20:	50040300 	.word	0x50040300
 8002c24:	c7520000 	.word	0xc7520000
 8002c28:	50040000 	.word	0x50040000
 8002c2c:	50040200 	.word	0x50040200
 8002c30:	20000000 	.word	0x20000000
 8002c34:	053e2d63 	.word	0x053e2d63
 8002c38:	cb840000 	.word	0xcb840000
 8002c3c:	80000001 	.word	0x80000001

08002c40 <LL_ADC_IsEnabled>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_ADC_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_ADC_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d101      	bne.n	8002c7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b0a1      	sub	sp, #132	; 0x84
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e093      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a47      	ldr	r2, [pc, #284]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d102      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e001      	b.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e072      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ffb9 	bl	8002c66 <LL_ADC_REG_IsConversionOngoing>
 8002cf4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ffb3 	bl	8002c66 <LL_ADC_REG_IsConversionOngoing>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d154      	bne.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d151      	bne.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d0c:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d0e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02c      	beq.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d2a:	035b      	lsls	r3, r3, #13
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d34:	4829      	ldr	r0, [pc, #164]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d36:	f7ff ff83 	bl	8002c40 <LL_ADC_IsEnabled>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4828      	ldr	r0, [pc, #160]	; (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d3e:	f7ff ff7f 	bl	8002c40 <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	431c      	orrs	r4, r3
 8002d46:	4828      	ldr	r0, [pc, #160]	; (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d48:	f7ff ff7a 	bl	8002c40 <LL_ADC_IsEnabled>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4323      	orrs	r3, r4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d137      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d5c:	f023 030f 	bic.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	6811      	ldr	r1, [r2, #0]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d70:	e028      	b.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7e:	4817      	ldr	r0, [pc, #92]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d80:	f7ff ff5e 	bl	8002c40 <LL_ADC_IsEnabled>
 8002d84:	4604      	mov	r4, r0
 8002d86:	4816      	ldr	r0, [pc, #88]	; (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d88:	f7ff ff5a 	bl	8002c40 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	431c      	orrs	r4, r3
 8002d90:	4815      	ldr	r0, [pc, #84]	; (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d92:	f7ff ff55 	bl	8002c40 <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4323      	orrs	r3, r4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d112      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002da6:	f023 030f 	bic.w	r3, r3, #15
 8002daa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002dac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dae:	e009      	b.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002dc2:	e000      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3784      	adds	r7, #132	; 0x84
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	50040000 	.word	0x50040000
 8002de0:	50040100 	.word	0x50040100
 8002de4:	50040300 	.word	0x50040300
 8002de8:	50040200 	.word	0x50040200

08002dec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0ed      	b.n	8002fda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fc7a 	bl	8001704 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0202 	bic.w	r2, r2, #2
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e20:	f7fe ffd8 	bl	8001dd4 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e26:	e012      	b.n	8002e4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e28:	f7fe ffd4 	bl	8001dd4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b0a      	cmp	r3, #10
 8002e34:	d90b      	bls.n	8002e4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2205      	movs	r2, #5
 8002e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0c5      	b.n	8002fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e5      	bne.n	8002e28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7fe ffb2 	bl	8001dd4 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e72:	e012      	b.n	8002e9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e74:	f7fe ffae 	bl	8001dd4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d90b      	bls.n	8002e9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2205      	movs	r2, #5
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e09f      	b.n	8002fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0e5      	beq.n	8002e74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e1b      	ldrb	r3, [r3, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d108      	bne.n	8002ec2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e007      	b.n	8002ed2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7e5b      	ldrb	r3, [r3, #25]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e007      	b.n	8002efc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e9b      	ldrb	r3, [r3, #26]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e007      	b.n	8002f26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0220 	bic.w	r2, r2, #32
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7edb      	ldrb	r3, [r3, #27]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0210 	bic.w	r2, r2, #16
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0210 	orr.w	r2, r2, #16
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7f1b      	ldrb	r3, [r3, #28]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d108      	bne.n	8002f6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e007      	b.n	8002f7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7f5b      	ldrb	r3, [r3, #29]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0204 	orr.w	r2, r2, #4
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e007      	b.n	8002fa4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	ea42 0103 	orr.w	r1, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <__NVIC_SetPriorityGrouping>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_SetPriority>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff47 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff5c 	bl	800302c <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff8e 	bl	800309c <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffb0 	bl	8003104 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031be:	e166      	b.n	800348e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8158 	beq.w	8003488 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d00b      	beq.n	80031f8 <HAL_GPIO_Init+0x48>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d007      	beq.n	80031f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ec:	2b11      	cmp	r3, #17
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d130      	bne.n	800325a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800322e:	2201      	movs	r2, #1
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 0201 	and.w	r2, r3, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0xea>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b12      	cmp	r3, #18
 8003298:	d123      	bne.n	80032e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	6939      	ldr	r1, [r7, #16]
 80032de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2203      	movs	r2, #3
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80b2 	beq.w	8003488 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003324:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_GPIO_Init+0x2fc>)
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_GPIO_Init+0x2fc>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6613      	str	r3, [r2, #96]	; 0x60
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_GPIO_Init+0x2fc>)
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800333c:	4a5c      	ldr	r2, [pc, #368]	; (80034b0 <HAL_GPIO_Init+0x300>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003366:	d02b      	beq.n	80033c0 <HAL_GPIO_Init+0x210>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_GPIO_Init+0x304>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d025      	beq.n	80033bc <HAL_GPIO_Init+0x20c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_GPIO_Init+0x308>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d01f      	beq.n	80033b8 <HAL_GPIO_Init+0x208>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_GPIO_Init+0x30c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d019      	beq.n	80033b4 <HAL_GPIO_Init+0x204>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a4f      	ldr	r2, [pc, #316]	; (80034c0 <HAL_GPIO_Init+0x310>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d013      	beq.n	80033b0 <HAL_GPIO_Init+0x200>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a4e      	ldr	r2, [pc, #312]	; (80034c4 <HAL_GPIO_Init+0x314>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00d      	beq.n	80033ac <HAL_GPIO_Init+0x1fc>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a4d      	ldr	r2, [pc, #308]	; (80034c8 <HAL_GPIO_Init+0x318>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <HAL_GPIO_Init+0x1f8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_GPIO_Init+0x31c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_GPIO_Init+0x1f4>
 80033a0:	2307      	movs	r3, #7
 80033a2:	e00e      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033a4:	2308      	movs	r3, #8
 80033a6:	e00c      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033a8:	2306      	movs	r3, #6
 80033aa:	e00a      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033ac:	2305      	movs	r3, #5
 80033ae:	e008      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033b0:	2304      	movs	r3, #4
 80033b2:	e006      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033b4:	2303      	movs	r3, #3
 80033b6:	e004      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e002      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_GPIO_Init+0x212>
 80033c0:	2300      	movs	r3, #0
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	f002 0203 	and.w	r2, r2, #3
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	4093      	lsls	r3, r2
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033d2:	4937      	ldr	r1, [pc, #220]	; (80034b0 <HAL_GPIO_Init+0x300>)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3302      	adds	r3, #2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033e0:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_GPIO_Init+0x320>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003404:	4a32      	ldr	r2, [pc, #200]	; (80034d0 <HAL_GPIO_Init+0x320>)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_GPIO_Init+0x320>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_GPIO_Init+0x320>)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003434:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_GPIO_Init+0x320>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003458:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_GPIO_Init+0x320>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <HAL_GPIO_Init+0x320>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_GPIO_Init+0x320>)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3301      	adds	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	f47f ae91 	bne.w	80031c0 <HAL_GPIO_Init+0x10>
  }
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40010000 	.word	0x40010000
 80034b4:	48000400 	.word	0x48000400
 80034b8:	48000800 	.word	0x48000800
 80034bc:	48000c00 	.word	0x48000c00
 80034c0:	48001000 	.word	0x48001000
 80034c4:	48001400 	.word	0x48001400
 80034c8:	48001800 	.word	0x48001800
 80034cc:	48001c00 	.word	0x48001c00
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
 80034e0:	4613      	mov	r3, r2
 80034e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e4:	787b      	ldrb	r3, [r7, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e081      	b.n	800361a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe f98e 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003554:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003564:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	e006      	b.n	800358c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800358a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d104      	bne.n	800359e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	021a      	lsls	r2, r3, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	460b      	mov	r3, r1
 8003638:	813b      	strh	r3, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 80f9 	bne.w	800383e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_I2C_Mem_Write+0x34>
 8003652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0ed      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Mem_Write+0x4e>
 800366e:	2302      	movs	r3, #2
 8003670:	e0e6      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800367a:	f7fe fbab 	bl	8001dd4 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2319      	movs	r3, #25
 8003686:	2201      	movs	r2, #1
 8003688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fac3 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0d1      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2221      	movs	r2, #33	; 0x21
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c4:	88f8      	ldrh	r0, [r7, #6]
 80036c6:	893a      	ldrh	r2, [r7, #8]
 80036c8:	8979      	ldrh	r1, [r7, #10]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4603      	mov	r3, r0
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f9d3 	bl	8003a80 <I2C_RequestMemoryWrite>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0a9      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2bff      	cmp	r3, #255	; 0xff
 80036f4:	d90e      	bls.n	8003714 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	2300      	movs	r3, #0
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fba5 	bl	8003e5c <I2C_TransferConfig>
 8003712:	e00f      	b.n	8003734 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	b2da      	uxtb	r2, r3
 8003724:	8979      	ldrh	r1, [r7, #10]
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fb94 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 faad 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e07b      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d034      	beq.n	80037ec <HAL_I2C_Mem_Write+0x1c8>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d130      	bne.n	80037ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fa3f 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e04d      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d90e      	bls.n	80037cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	2300      	movs	r3, #0
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fb49 	bl	8003e5c <I2C_TransferConfig>
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fb38 	bl	8003e5c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d19e      	bne.n	8003734 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa8c 	bl	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e01a      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_I2C_Mem_Write+0x224>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fe00e800 	.word	0xfe00e800

0800384c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	f040 80fd 	bne.w	8003a6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_I2C_Mem_Read+0x34>
 800387a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0f1      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2C_Mem_Read+0x4e>
 8003896:	2302      	movs	r3, #2
 8003898:	e0ea      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038a2:	f7fe fa97 	bl	8001dd4 <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f9af 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0d5      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2222      	movs	r2, #34	; 0x22
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ec:	88f8      	ldrh	r0, [r7, #6]
 80038ee:	893a      	ldrh	r2, [r7, #8]
 80038f0:	8979      	ldrh	r1, [r7, #10]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4603      	mov	r3, r0
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f913 	bl	8003b28 <I2C_RequestMemoryRead>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0ad      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2bff      	cmp	r3, #255	; 0xff
 800391c:	d90e      	bls.n	800393c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	b2da      	uxtb	r2, r3
 800392a:	8979      	ldrh	r1, [r7, #10]
 800392c:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <HAL_I2C_Mem_Read+0x22c>)
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fa91 	bl	8003e5c <I2C_TransferConfig>
 800393a:	e00f      	b.n	800395c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	b2da      	uxtb	r2, r3
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_I2C_Mem_Read+0x22c>)
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa80 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2200      	movs	r2, #0
 8003964:	2104      	movs	r1, #4
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f956 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07c      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d034      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x1d0>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f927 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04d      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d90e      	bls.n	80039fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fa31 	bl	8003e5c <I2C_TransferConfig>
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa20 	bl	8003e5c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d19a      	bne.n	800395c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f974 	bl	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01a      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_I2C_Mem_Read+0x230>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	80002400 	.word	0x80002400
 8003a7c:	fe00e800 	.word	0xfe00e800

08003a80 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	817b      	strh	r3, [r7, #10]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <I2C_RequestMemoryWrite+0xa4>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f9d7 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f8f0 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02c      	b.n	8003b1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad2:	e015      	b.n	8003b00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8d6 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e012      	b.n	8003b1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f884 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	80002000 	.word	0x80002000

08003b28 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	813b      	strh	r3, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	8979      	ldrh	r1, [r7, #10]
 8003b48:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <I2C_RequestMemoryRead+0xa4>)
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f984 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f89d 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e02c      	b.n	8003bc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6e:	893b      	ldrh	r3, [r7, #8]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
 8003b78:	e015      	b.n	8003ba6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f883 	bl	8003c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e012      	b.n	8003bc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2140      	movs	r1, #64	; 0x40
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f831 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	80002000 	.word	0x80002000

08003bd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d103      	bne.n	8003bee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d007      	beq.n	8003c0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	619a      	str	r2, [r3, #24]
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c28:	e022      	b.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c30:	d01e      	beq.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe f8cf 	bl	8001dd4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d113      	bne.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e00f      	b.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d0cd      	beq.n	8003c2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ca4:	e02c      	b.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f870 	bl	8003d90 <I2C_IsAcknowledgeFailed>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02a      	b.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc0:	d01e      	beq.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fe f887 	bl	8001dd4 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d113      	bne.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e007      	b.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d1cb      	bne.n	8003ca6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d24:	e028      	b.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f830 	bl	8003d90 <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e026      	b.n	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fe f84b 	bl	8001dd4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d113      	bne.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e007      	b.n	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d1cf      	bne.n	8003d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d151      	bne.n	8003e4e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003daa:	e022      	b.n	8003df2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db2:	d01e      	beq.n	8003df2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fe f80e 	bl	8001dd4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_IsAcknowledgeFailed+0x3a>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d113      	bne.n	8003df2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02e      	b.n	8003e50 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d1d5      	bne.n	8003dac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2210      	movs	r2, #16
 8003e06:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fedd 	bl	8003bd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	fe00e800 	.word	0xfe00e800

08003e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	0d5b      	lsrs	r3, r3, #21
 8003e78:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <I2C_TransferConfig+0x58>)
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	43db      	mvns	r3, r3
 8003e82:	ea02 0103 	and.w	r1, r2, r3
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e8c:	7a7b      	ldrb	r3, [r7, #9]
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	03ff63ff 	.word	0x03ff63ff

08003eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d138      	bne.n	8003f40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e032      	b.n	8003f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d139      	bne.n	8003fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e033      	b.n	8003fda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40007000 	.word	0x40007000

08004004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d130      	bne.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800401c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004020:	d038      	beq.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800402a:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2232      	movs	r2, #50	; 0x32
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	0c9b      	lsrs	r3, r3, #18
 8004044:	3301      	adds	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004048:	e002      	b.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b01      	subs	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405c:	d102      	bne.n	8004064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f2      	bne.n	800404a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004070:	d110      	bne.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	d007      	beq.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800408c:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40007000 	.word	0x40007000
 80040a8:	20000000 	.word	0x20000000
 80040ac:	431bde83 	.word	0x431bde83

080040b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80040ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040be:	6053      	str	r3, [r2, #4]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040d8:	f7fd fe7c 	bl	8001dd4 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e069      	b.n	80041bc <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd fc1d 	bl	800193c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004102:	f241 3188 	movw	r1, #5000	; 0x1388
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f85e 	bl	80041c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	3b01      	subs	r3, #1
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	2120      	movs	r1, #32
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f856 	bl	80041e4 <QSPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d137      	bne.n	80041b2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800414c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6852      	ldr	r2, [r2, #4]
 8004154:	0611      	lsls	r1, r2, #24
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	69d2      	ldr	r2, [r2, #28]
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a12      	ldr	r2, [r2, #32]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <HAL_QSPI_Init+0xf4>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6912      	ldr	r2, [r2, #16]
 800417e:	0411      	lsls	r1, r2, #16
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6952      	ldr	r2, [r2, #20]
 8004184:	4311      	orrs	r1, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6992      	ldr	r2, [r2, #24]
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	430b      	orrs	r3, r1
 8004192:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	ffe0f8fe 	.word	0xffe0f8fe

080041c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041f4:	e01a      	b.n	800422c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fc:	d016      	beq.n	800422c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fe:	f7fd fde9 	bl	8001dd4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	429a      	cmp	r2, r3
 800420c:	d302      	bcc.n	8004214 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2204      	movs	r2, #4
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e00e      	b.n	800424a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d1d6      	bne.n	80041f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f000 bc16 	b.w	8004a94 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004268:	4ba0      	ldr	r3, [pc, #640]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004272:	4b9e      	ldr	r3, [pc, #632]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80e4 	beq.w	8004452 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4c>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b0c      	cmp	r3, #12
 8004294:	f040 808b 	bne.w	80043ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b01      	cmp	r3, #1
 800429c:	f040 8087 	bne.w	80043ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a0:	4b92      	ldr	r3, [pc, #584]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_OscConfig+0x64>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e3ed      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <HAL_RCC_OscConfig+0x7e>
 80042c8:	4b88      	ldr	r3, [pc, #544]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d0:	e005      	b.n	80042de <HAL_RCC_OscConfig+0x8a>
 80042d2:	4b86      	ldr	r3, [pc, #536]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042de:	4293      	cmp	r3, r2
 80042e0:	d223      	bcs.n	800432a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd48 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e3ce      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f6:	4b7d      	ldr	r3, [pc, #500]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7c      	ldr	r2, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4977      	ldr	r1, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004314:	4b75      	ldr	r3, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4972      	ldr	r1, [pc, #456]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
 8004328:	e025      	b.n	8004376 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432a:	4b70      	ldr	r3, [pc, #448]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6f      	ldr	r2, [pc, #444]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	496a      	ldr	r1, [pc, #424]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004348:	4b68      	ldr	r3, [pc, #416]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	4965      	ldr	r1, [pc, #404]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fd08 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e38e      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004376:	f000 fc75 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800437a:	4602      	mov	r2, r0
 800437c:	4b5b      	ldr	r3, [pc, #364]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	495a      	ldr	r1, [pc, #360]	; (80044f0 <HAL_RCC_OscConfig+0x29c>)
 8004388:	5ccb      	ldrb	r3, [r1, r3]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_RCC_OscConfig+0x2a0>)
 8004394:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004396:	4b58      	ldr	r3, [pc, #352]	; (80044f8 <HAL_RCC_OscConfig+0x2a4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd fcca 	bl	8001d34 <HAL_InitTick>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d052      	beq.n	8004450 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	e372      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d032      	beq.n	800441c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043b6:	4b4d      	ldr	r3, [pc, #308]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4c      	ldr	r2, [pc, #304]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c2:	f7fd fd07 	bl	8001dd4 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ca:	f7fd fd03 	bl	8001dd4 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e35b      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043dc:	4b43      	ldr	r3, [pc, #268]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e8:	4b40      	ldr	r3, [pc, #256]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	493a      	ldr	r1, [pc, #232]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004406:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4935      	ldr	r1, [pc, #212]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
 800441a:	e01a      	b.n	8004452 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a32      	ldr	r2, [pc, #200]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004428:	f7fd fcd4 	bl	8001dd4 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004430:	f7fd fcd0 	bl	8001dd4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e328      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1dc>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d073      	beq.n	8004546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d005      	beq.n	8004470 <HAL_RCC_OscConfig+0x21c>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d10e      	bne.n	8004488 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d063      	beq.n	8004544 <HAL_RCC_OscConfig+0x2f0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d15f      	bne.n	8004544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e305      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x24c>
 8004492:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0x288>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x270>
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0x288>
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a08      	ldr	r2, [pc, #32]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a05      	ldr	r2, [pc, #20]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fc76 	bl	8001dd4 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	e010      	b.n	800450e <HAL_RCC_OscConfig+0x2ba>
 80044ec:	40021000 	.word	0x40021000
 80044f0:	0800b060 	.word	0x0800b060
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fc6a 	bl	8001dd4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e2c2      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	4baf      	ldr	r3, [pc, #700]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2a8>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fc5a 	bl	8001dd4 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fc56 	bl	8001dd4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e2ae      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4ba5      	ldr	r3, [pc, #660]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d0>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d060      	beq.n	8004614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x310>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d119      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b99      	ldr	r3, [pc, #612]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x328>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e28b      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b93      	ldr	r3, [pc, #588]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4990      	ldr	r1, [pc, #576]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	e040      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d023      	beq.n	80045e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459a:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a8b      	ldr	r2, [pc, #556]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fc15 	bl	8001dd4 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fd fc11 	bl	8001dd4 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e269      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b82      	ldr	r3, [pc, #520]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b7f      	ldr	r3, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	497c      	ldr	r1, [pc, #496]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a79      	ldr	r2, [pc, #484]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fd fbf1 	bl	8001dd4 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fd fbed 	bl	8001dd4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e245      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	4b70      	ldr	r3, [pc, #448]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004628:	4b68      	ldr	r3, [pc, #416]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	4a67      	ldr	r2, [pc, #412]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fbcc 	bl	8001dd4 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7fd fbc8 	bl	8001dd4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e220      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCC_OscConfig+0x3ec>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b5a      	ldr	r3, [pc, #360]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd fbaf 	bl	8001dd4 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7fd fbab 	bl	8001dd4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e203      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a6 	beq.w	80047f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b44      	ldr	r3, [pc, #272]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a43      	ldr	r2, [pc, #268]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b41      	ldr	r3, [pc, #260]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d118      	bne.n	8004712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3a      	ldr	r2, [pc, #232]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ec:	f7fd fb72 	bl	8001dd4 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fd fb6e 	bl	8001dd4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1c6      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_RCC_OscConfig+0x4d8>
 800471a:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472a:	e024      	b.n	8004776 <HAL_RCC_OscConfig+0x522>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d110      	bne.n	8004756 <HAL_RCC_OscConfig+0x502>
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	4a20      	ldr	r2, [pc, #128]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004754:	e00f      	b.n	8004776 <HAL_RCC_OscConfig+0x522>
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800476e:	f023 0304 	bic.w	r3, r3, #4
 8004772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fd fb29 	bl	8001dd4 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fd fb25 	bl	8001dd4 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e17b      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ed      	beq.n	8004786 <HAL_RCC_OscConfig+0x532>
 80047aa:	e01a      	b.n	80047e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fd fb12 	bl	8001dd4 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b2:	e00f      	b.n	80047d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd fb0e 	bl	8001dd4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d906      	bls.n	80047d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e164      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d4:	4ba8      	ldr	r3, [pc, #672]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e8      	bne.n	80047b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e2:	7ffb      	ldrb	r3, [r7, #31]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4ba3      	ldr	r3, [pc, #652]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	4aa2      	ldr	r2, [pc, #648]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03c      	beq.n	800487a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01c      	beq.n	8004842 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004808:	4b9b      	ldr	r3, [pc, #620]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 800480a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800480e:	4a9a      	ldr	r2, [pc, #616]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd fadc 	bl	8001dd4 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004820:	f7fd fad8 	bl	8001dd4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e130      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004832:	4b91      	ldr	r3, [pc, #580]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <HAL_RCC_OscConfig+0x5cc>
 8004840:	e01b      	b.n	800487a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004842:	4b8d      	ldr	r3, [pc, #564]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004848:	4a8b      	ldr	r2, [pc, #556]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fd fabf 	bl	8001dd4 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800485a:	f7fd fabb 	bl	8001dd4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e113      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800486c:	4b82      	ldr	r3, [pc, #520]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 800486e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ef      	bne.n	800485a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8107 	beq.w	8004a92 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	2b02      	cmp	r3, #2
 800488a:	f040 80cb 	bne.w	8004a24 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800488e:	4b7a      	ldr	r3, [pc, #488]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0203 	and.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d12c      	bne.n	80048fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	3b01      	subs	r3, #1
 80048ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d123      	bne.n	80048fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d11b      	bne.n	80048fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d113      	bne.n	80048fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	3b01      	subs	r3, #1
 80048e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d109      	bne.n	80048fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	3b01      	subs	r3, #1
 80048f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d06d      	beq.n	80049d8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d068      	beq.n	80049d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004902:	4b5d      	ldr	r3, [pc, #372]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800490e:	4b5a      	ldr	r3, [pc, #360]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0ba      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800491e:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a55      	ldr	r2, [pc, #340]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004928:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800492a:	f7fd fa53 	bl	8001dd4 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004932:	f7fd fa4f 	bl	8001dd4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e0a7      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004944:	4b4c      	ldr	r3, [pc, #304]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004950:	4b49      	ldr	r3, [pc, #292]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <HAL_RCC_OscConfig+0x828>)
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004960:	3a01      	subs	r2, #1
 8004962:	0112      	lsls	r2, r2, #4
 8004964:	4311      	orrs	r1, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800496a:	0212      	lsls	r2, r2, #8
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004972:	0852      	lsrs	r2, r2, #1
 8004974:	3a01      	subs	r2, #1
 8004976:	0552      	lsls	r2, r2, #21
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800497e:	0852      	lsrs	r2, r2, #1
 8004980:	3a01      	subs	r2, #1
 8004982:	0652      	lsls	r2, r2, #25
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800498a:	06d2      	lsls	r2, r2, #27
 800498c:	430a      	orrs	r2, r1
 800498e:	493a      	ldr	r1, [pc, #232]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004990:	4313      	orrs	r3, r2
 8004992:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a37      	ldr	r2, [pc, #220]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a0:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a34      	ldr	r2, [pc, #208]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ac:	f7fd fa12 	bl	8001dd4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd fa0e 	bl	8001dd4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e066      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d2:	e05e      	b.n	8004a92 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e05d      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d8:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d156      	bne.n	8004a92 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049fc:	f7fd f9ea 	bl	8001dd4 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fd f9e6 	bl	8001dd4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e03e      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x7b0>
 8004a22:	e036      	b.n	8004a92 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d031      	beq.n	8004a8e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d105      	bne.n	8004a4e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a48:	f023 0303 	bic.w	r3, r3, #3
 8004a4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_RCC_OscConfig+0x824>)
 8004a54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fd f9b9 	bl	8001dd4 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	e00c      	b.n	8004a80 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fd f9b5 	bl	8001dd4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d905      	bls.n	8004a80 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e00d      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCC_OscConfig+0x848>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1ec      	bne.n	8004a66 <HAL_RCC_OscConfig+0x812>
 8004a8c:	e001      	b.n	8004a92 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0c8      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d910      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 0207 	bic.w	r2, r3, #7
 8004aca:	4961      	ldr	r1, [pc, #388]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b5f      	ldr	r3, [pc, #380]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0b0      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d04c      	beq.n	8004b8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af8:	4b56      	ldr	r3, [pc, #344]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d121      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e09e      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b10:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d115      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e092      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b28:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e086      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b38:	4b46      	ldr	r3, [pc, #280]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e07e      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 0203 	bic.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	493f      	ldr	r1, [pc, #252]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fd f93b 	bl	8001dd4 <HAL_GetTick>
 8004b5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b62:	f7fd f937 	bl	8001dd4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e066      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b78:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 020c 	and.w	r2, r3, #12
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d1eb      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	492c      	ldr	r1, [pc, #176]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d210      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0207 	bic.w	r2, r3, #7
 8004bbe:	4924      	ldr	r1, [pc, #144]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <HAL_RCC_ClockConfig+0x1b0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e036      	b.n	8004c46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4918      	ldr	r1, [pc, #96]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4910      	ldr	r1, [pc, #64]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c16:	f000 f825 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCC_ClockConfig+0x1b4>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	490c      	ldr	r1, [pc, #48]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	5ccb      	ldrb	r3, [r1, r3]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd f87a 	bl	8001d34 <HAL_InitTick>
 8004c40:	4603      	mov	r3, r0
 8004c42:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c44:	7afb      	ldrb	r3, [r7, #11]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40021000 	.word	0x40021000
 8004c58:	0800b060 	.word	0x0800b060
 8004c5c:	20000000 	.word	0x20000000
 8004c60:	20000004 	.word	0x20000004

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x34>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d121      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11e      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c98:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d102      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e004      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ce8:	4b23      	ldr	r3, [pc, #140]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d134      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d003      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0xac>
 8004d08:	e005      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d0c:	617b      	str	r3, [r7, #20]
      break;
 8004d0e:	e005      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d12:	617b      	str	r3, [r7, #20]
      break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	617b      	str	r3, [r7, #20]
      break;
 8004d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	3301      	adds	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	fb02 f203 	mul.w	r2, r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	0e5b      	lsrs	r3, r3, #25
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	0800b070 	.word	0x0800b070
 8004d74:	00f42400 	.word	0x00f42400
 8004d78:	018cba80 	.word	0x018cba80

08004d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d88:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d94:	f7ff f928 	bl	8003fe8 <HAL_PWREx_GetVoltageRange>
 8004d98:	6178      	str	r0, [r7, #20]
 8004d9a:	e014      	b.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6593      	str	r3, [r2, #88]	; 0x58
 8004da8:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004db4:	f7ff f918 	bl	8003fe8 <HAL_PWREx_GetVoltageRange>
 8004db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d10b      	bne.n	8004de6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d919      	bls.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2ba0      	cmp	r3, #160	; 0xa0
 8004dd8:	d902      	bls.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dda:	2302      	movs	r3, #2
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	e013      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004de0:	2301      	movs	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	e010      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d902      	bls.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dec:	2303      	movs	r3, #3
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e00a      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d102      	bne.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004df8:	2302      	movs	r3, #2
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e004      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d101      	bne.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e04:	2301      	movs	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0207 	bic.w	r2, r3, #7
 8004e10:	4909      	ldr	r1, [pc, #36]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d001      	beq.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40022000 	.word	0x40022000

08004e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e44:	2300      	movs	r3, #0
 8004e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e48:	2300      	movs	r3, #0
 8004e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d041      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e60:	d02a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e66:	d824      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e72:	d81e      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e7e:	e018      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e80:	4b86      	ldr	r3, [pc, #536]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a85      	ldr	r2, [pc, #532]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e8c:	e015      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fb0f 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e9e:	e00c      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3320      	adds	r3, #32
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fbf8 	bl	800569c <RCCEx_PLLSAI2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb0:	e003      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004eb6:	e000      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ec0:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ece:	4973      	ldr	r1, [pc, #460]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ed6:	e001      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d041      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ef0:	d02a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ef6:	d824      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004efc:	d008      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f02:	d81e      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f0e:	e018      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f10:	4b62      	ldr	r3, [pc, #392]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a61      	ldr	r2, [pc, #388]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f1c:	e015      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fac7 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f2e:	e00c      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3320      	adds	r3, #32
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fbb0 	bl	800569c <RCCEx_PLLSAI2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	74fb      	strb	r3, [r7, #19]
      break;
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f50:	4b52      	ldr	r3, [pc, #328]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5e:	494f      	ldr	r1, [pc, #316]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f66:	e001      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a0 	beq.w	80050ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	4a40      	ldr	r2, [pc, #256]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fac:	2301      	movs	r3, #1
 8004fae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb0:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a3a      	ldr	r2, [pc, #232]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fbc:	f7fc ff0a 	bl	8001dd4 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fc2:	e009      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc4:	f7fc ff06 	bl	8001dd4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d902      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd8:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ef      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d15c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01f      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	d019      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	4a20      	ldr	r2, [pc, #128]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fc fec5 	bl	8001dd4 <HAL_GetTick>
 800504a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504c:	e00b      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fc fec1 	bl	8001dd4 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	; 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d902      	bls.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	74fb      	strb	r3, [r7, #19]
            break;
 8005064:	e006      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ec      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	4904      	ldr	r1, [pc, #16]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
 8005098:	e006      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a8:	7c7b      	ldrb	r3, [r7, #17]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4ba6      	ldr	r3, [pc, #664]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	4aa5      	ldr	r2, [pc, #660]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c6:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f023 0203 	bic.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	499c      	ldr	r1, [pc, #624]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e8:	4b97      	ldr	r3, [pc, #604]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f023 020c 	bic.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	4994      	ldr	r1, [pc, #592]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800510a:	4b8f      	ldr	r3, [pc, #572]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	498b      	ldr	r1, [pc, #556]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800512c:	4b86      	ldr	r3, [pc, #536]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	4983      	ldr	r1, [pc, #524]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800514e:	4b7e      	ldr	r3, [pc, #504]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515c:	497a      	ldr	r1, [pc, #488]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005170:	4b75      	ldr	r3, [pc, #468]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	4972      	ldr	r1, [pc, #456]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005192:	4b6d      	ldr	r3, [pc, #436]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	4969      	ldr	r1, [pc, #420]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051b4:	4b64      	ldr	r3, [pc, #400]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c2:	4961      	ldr	r1, [pc, #388]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d6:	4b5c      	ldr	r3, [pc, #368]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	4958      	ldr	r1, [pc, #352]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	4950      	ldr	r1, [pc, #320]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	4947      	ldr	r1, [pc, #284]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800523c:	4b42      	ldr	r3, [pc, #264]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800523e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005242:	f023 0203 	bic.w	r2, r3, #3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	493f      	ldr	r1, [pc, #252]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d028      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800525e:	4b3a      	ldr	r3, [pc, #232]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	4936      	ldr	r1, [pc, #216]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527c:	d106      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527e:	4b32      	ldr	r3, [pc, #200]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4a31      	ldr	r2, [pc, #196]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005288:	60d3      	str	r3, [r2, #12]
 800528a:	e011      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f90b 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d028      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052bc:	4b22      	ldr	r3, [pc, #136]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	491f      	ldr	r1, [pc, #124]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052da:	d106      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052dc:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e6:	60d3      	str	r3, [r2, #12]
 80052e8:	e011      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f2:	d10c      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	2101      	movs	r1, #1
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f8dc 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005328:	4907      	ldr	r1, [pc, #28]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005338:	d108      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533a:	4b03      	ldr	r3, [pc, #12]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	4a02      	ldr	r2, [pc, #8]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005344:	60d3      	str	r3, [r2, #12]
 8005346:	e013      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005348:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005354:	d10c      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f8ab 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537c:	4b2c      	ldr	r3, [pc, #176]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800538a:	4929      	ldr	r1, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539a:	d10d      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f888 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d014      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	74bb      	strb	r3, [r7, #18]
 80053b6:	e011      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3320      	adds	r3, #32
 80053c6:	2102      	movs	r1, #2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f967 	bl	800569c <RCCEx_PLLSAI2_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f8:	490d      	ldr	r1, [pc, #52]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00b      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	4904      	ldr	r1, [pc, #16]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005424:	7cbb      	ldrb	r3, [r7, #18]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000

08005434 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <HAL_RCCEx_CRSConfig+0x7c>)
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <HAL_RCCEx_CRSConfig+0x7c>)
 8005442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005446:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCCEx_CRSConfig+0x7c>)
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_RCCEx_CRSConfig+0x7c>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	041b      	lsls	r3, r3, #16
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800547c:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <HAL_RCCEx_CRSConfig+0x80>)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_RCCEx_CRSConfig+0x80>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	4908      	ldr	r1, [pc, #32]	; (80054b4 <HAL_RCCEx_CRSConfig+0x80>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <HAL_RCCEx_CRSConfig+0x80>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <HAL_RCCEx_CRSConfig+0x80>)
 800549c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054a0:	6013      	str	r3, [r2, #0]
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40006000 	.word	0x40006000

080054b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054c6:	4b74      	ldr	r3, [pc, #464]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054d2:	4b71      	ldr	r3, [pc, #452]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0203 	and.w	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d10d      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
       ||
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ea:	4b6b      	ldr	r3, [pc, #428]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
       ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d047      	beq.n	800558e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	e044      	b.n	800558e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d018      	beq.n	800553e <RCCEx_PLLSAI1_Config+0x86>
 800550c:	2b03      	cmp	r3, #3
 800550e:	d825      	bhi.n	800555c <RCCEx_PLLSAI1_Config+0xa4>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d002      	beq.n	800551a <RCCEx_PLLSAI1_Config+0x62>
 8005514:	2b02      	cmp	r3, #2
 8005516:	d009      	beq.n	800552c <RCCEx_PLLSAI1_Config+0x74>
 8005518:	e020      	b.n	800555c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800551a:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d11d      	bne.n	8005562 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552a:	e01a      	b.n	8005562 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800552c:	4b5a      	ldr	r3, [pc, #360]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553c:	e013      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800554a:	4b53      	ldr	r3, [pc, #332]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800555a:	e006      	b.n	800556a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	e004      	b.n	800556c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800556a:	bf00      	nop
    }

    if(status == HAL_OK)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10d      	bne.n	800558e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005572:	4b49      	ldr	r3, [pc, #292]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	3b01      	subs	r3, #1
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	430b      	orrs	r3, r1
 8005588:	4943      	ldr	r1, [pc, #268]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800558a:	4313      	orrs	r3, r2
 800558c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d17c      	bne.n	800568e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005594:	4b40      	ldr	r3, [pc, #256]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a3f      	ldr	r2, [pc, #252]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800559a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800559e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a0:	f7fc fc18 	bl	8001dd4 <HAL_GetTick>
 80055a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a6:	e009      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055a8:	f7fc fc14 	bl	8001dd4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d902      	bls.n	80055bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	73fb      	strb	r3, [r7, #15]
        break;
 80055ba:	e005      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055bc:	4b36      	ldr	r3, [pc, #216]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ef      	bne.n	80055a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d15f      	bne.n	800568e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d110      	bne.n	80055f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d4:	4b30      	ldr	r3, [pc, #192]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80055dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6892      	ldr	r2, [r2, #8]
 80055e4:	0211      	lsls	r1, r2, #8
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68d2      	ldr	r2, [r2, #12]
 80055ea:	06d2      	lsls	r2, r2, #27
 80055ec:	430a      	orrs	r2, r1
 80055ee:	492a      	ldr	r1, [pc, #168]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
 80055f4:	e027      	b.n	8005646 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d112      	bne.n	8005622 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	0211      	lsls	r1, r2, #8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6912      	ldr	r2, [r2, #16]
 8005612:	0852      	lsrs	r2, r2, #1
 8005614:	3a01      	subs	r2, #1
 8005616:	0552      	lsls	r2, r2, #21
 8005618:	430a      	orrs	r2, r1
 800561a:	491f      	ldr	r1, [pc, #124]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
 8005620:	e011      	b.n	8005646 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005622:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800562a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6892      	ldr	r2, [r2, #8]
 8005632:	0211      	lsls	r1, r2, #8
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6952      	ldr	r2, [r2, #20]
 8005638:	0852      	lsrs	r2, r2, #1
 800563a:	3a01      	subs	r2, #1
 800563c:	0652      	lsls	r2, r2, #25
 800563e:	430a      	orrs	r2, r1
 8005640:	4915      	ldr	r1, [pc, #84]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800564c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005650:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005652:	f7fc fbbf 	bl	8001dd4 <HAL_GetTick>
 8005656:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005658:	e009      	b.n	800566e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800565a:	f7fc fbbb 	bl	8001dd4 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d902      	bls.n	800566e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	73fb      	strb	r3, [r7, #15]
          break;
 800566c:	e005      	b.n	800567a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800566e:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ef      	beq.n	800565a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	4903      	ldr	r1, [pc, #12]	; (8005698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800568a:	4313      	orrs	r3, r2
 800568c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40021000 	.word	0x40021000

0800569c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056aa:	4b69      	ldr	r3, [pc, #420]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d018      	beq.n	80056e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056b6:	4b66      	ldr	r3, [pc, #408]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0203 	and.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d10d      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
       ||
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056ce:	4b60      	ldr	r3, [pc, #384]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
       ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d047      	beq.n	8005772 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	e044      	b.n	8005772 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d018      	beq.n	8005722 <RCCEx_PLLSAI2_Config+0x86>
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d825      	bhi.n	8005740 <RCCEx_PLLSAI2_Config+0xa4>
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <RCCEx_PLLSAI2_Config+0x62>
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d009      	beq.n	8005710 <RCCEx_PLLSAI2_Config+0x74>
 80056fc:	e020      	b.n	8005740 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056fe:	4b54      	ldr	r3, [pc, #336]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11d      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570e:	e01a      	b.n	8005746 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005710:	4b4f      	ldr	r3, [pc, #316]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005720:	e013      	b.n	800574a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005722:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800572e:	4b48      	ldr	r3, [pc, #288]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800573e:	e006      	b.n	800574e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      break;
 8005744:	e004      	b.n	8005750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800574e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005756:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	430b      	orrs	r3, r1
 800576c:	4938      	ldr	r1, [pc, #224]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 800576e:	4313      	orrs	r3, r2
 8005770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d166      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005778:	4b35      	ldr	r3, [pc, #212]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a34      	ldr	r2, [pc, #208]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005784:	f7fc fb26 	bl	8001dd4 <HAL_GetTick>
 8005788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800578a:	e009      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800578c:	f7fc fb22 	bl	8001dd4 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d902      	bls.n	80057a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	73fb      	strb	r3, [r7, #15]
        break;
 800579e:	e005      	b.n	80057ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ef      	bne.n	800578c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d149      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d110      	bne.n	80057da <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80057c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	0211      	lsls	r1, r2, #8
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68d2      	ldr	r2, [r2, #12]
 80057ce:	06d2      	lsls	r2, r2, #27
 80057d0:	430a      	orrs	r2, r1
 80057d2:	491f      	ldr	r1, [pc, #124]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	614b      	str	r3, [r1, #20]
 80057d8:	e011      	b.n	80057fe <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057da:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6892      	ldr	r2, [r2, #8]
 80057ea:	0211      	lsls	r1, r2, #8
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6912      	ldr	r2, [r2, #16]
 80057f0:	0852      	lsrs	r2, r2, #1
 80057f2:	3a01      	subs	r2, #1
 80057f4:	0652      	lsls	r2, r2, #25
 80057f6:	430a      	orrs	r2, r1
 80057f8:	4915      	ldr	r1, [pc, #84]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057fe:	4b14      	ldr	r3, [pc, #80]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a13      	ldr	r2, [pc, #76]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005808:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fc fae3 	bl	8001dd4 <HAL_GetTick>
 800580e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005810:	e009      	b.n	8005826 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005812:	f7fc fadf 	bl	8001dd4 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d902      	bls.n	8005826 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	73fb      	strb	r3, [r7, #15]
          break;
 8005824:	e005      	b.n	8005832 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ef      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	4903      	ldr	r1, [pc, #12]	; (8005850 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005842:	4313      	orrs	r3, r2
 8005844:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000

08005854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e095      	b.n	8005992 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005876:	d009      	beq.n	800588c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
 800587e:	e005      	b.n	800588c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc f8ba 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058cc:	d902      	bls.n	80058d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e002      	b.n	80058da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058e2:	d007      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	ea42 0103 	orr.w	r1, r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	0c1b      	lsrs	r3, r3, #16
 8005950:	f003 0204 	and.w	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <mcp9804_powerReset>:
// MCP9804 significant commands


/* SUPPORT FUNCTIONS */

void mcp9804_powerReset() {
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_RESET);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2180      	movs	r1, #128	; 0x80
 80059a4:	480c      	ldr	r0, [pc, #48]	; (80059d8 <mcp9804_powerReset+0x3c>)
 80059a6:	f7fd fd95 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80059aa:	20c8      	movs	r0, #200	; 0xc8
 80059ac:	f7fc fa1e 	bl	8001dec <HAL_Delay>
	HAL_GPIO_WritePin(I2C2_EN_GPIO_Port, I2C2_EN_Pin, GPIO_PIN_SET);
 80059b0:	2201      	movs	r2, #1
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	4808      	ldr	r0, [pc, #32]	; (80059d8 <mcp9804_powerReset+0x3c>)
 80059b6:	f7fd fd8d 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80059ba:	2064      	movs	r0, #100	; 0x64
 80059bc:	f7fc fa16 	bl	8001dec <HAL_Delay>

	log_send(0, "mcp9804_powerReset", -1, "na", NAN);
 80059c0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80059dc <mcp9804_powerReset+0x40>
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <mcp9804_powerReset+0x44>)
 80059c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ca:	4906      	ldr	r1, [pc, #24]	; (80059e4 <mcp9804_powerReset+0x48>)
 80059cc:	2000      	movs	r0, #0
 80059ce:	f000 fceb 	bl	80063a8 <log_send>
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	48000c00 	.word	0x48000c00
 80059dc:	7fc00000 	.word	0x7fc00000
 80059e0:	0800aea4 	.word	0x0800aea4
 80059e4:	0800aea8 	.word	0x0800aea8

080059e8 <mcp9804_configure>:


/* MAIN FUNCTIONS */

void mcp9804_configure(I2C_HandleTypeDef *hand, int dev) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]

	// right now nothing to do

	log_send(0, "temp_configure", dev, "na", NAN);
 80059f2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005a0c <mcp9804_configure+0x24>
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <mcp9804_configure+0x28>)
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	4906      	ldr	r1, [pc, #24]	; (8005a14 <mcp9804_configure+0x2c>)
 80059fc:	2000      	movs	r0, #0
 80059fe:	f000 fcd3 	bl	80063a8 <log_send>
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	7fc00000 	.word	0x7fc00000
 8005a10:	0800aea4 	.word	0x0800aea4
 8005a14:	0800aebc 	.word	0x0800aebc

08005a18 <mcp9884_readManufac>:


void mcp9884_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af04      	add	r7, sp, #16
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2];

	// read manufacturer ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, buff, 2, HAL_MAX_DELAY);
 8005a22:	4a3d      	ldr	r2, [pc, #244]	; (8005b18 <mcp9884_readManufac+0x100>)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	b299      	uxth	r1, r3
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a34:	9302      	str	r3, [sp, #8]
 8005a36:	2302      	movs	r3, #2
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2301      	movs	r3, #1
 8005a42:	2206      	movs	r2, #6
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fd ff01 	bl	800384c <HAL_I2C_Mem_Read>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mcp9884_readManufac", dev, "na", 1);
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <mcp9884_readManufac+0x4c>
 8005a54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a58:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <mcp9884_readManufac+0x104>)
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	4930      	ldr	r1, [pc, #192]	; (8005b20 <mcp9884_readManufac+0x108>)
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f000 fca2 	bl	80063a8 <log_send>

	// convert address to string
	char tmp[5];
	addr2str(buff, 2, tmp);
 8005a64:	f107 020c 	add.w	r2, r7, #12
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fc72 	bl	8006358 <addr2str>
	log_send(2, "mcp9884_readManufac->manufacturer_id", dev, tmp, NAN);
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8005b24 <mcp9884_readManufac+0x10c>
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	492a      	ldr	r1, [pc, #168]	; (8005b28 <mcp9884_readManufac+0x110>)
 8005a80:	2002      	movs	r0, #2
 8005a82:	f000 fc91 	bl	80063a8 <log_send>

	// read dev ID and revision register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_DEV, 1, buff, 2, HAL_MAX_DELAY);
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <mcp9884_readManufac+0x100>)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	b299      	uxth	r1, r3
 8005a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a98:	9302      	str	r3, [sp, #8]
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	2207      	movs	r2, #7
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fd fecf 	bl	800384c <HAL_I2C_Mem_Read>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mcp9884_readManufac", dev, "na", 2);
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <mcp9884_readManufac+0xb0>
 8005ab8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005abc:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <mcp9884_readManufac+0x104>)
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	4917      	ldr	r1, [pc, #92]	; (8005b20 <mcp9884_readManufac+0x108>)
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f000 fc70 	bl	80063a8 <log_send>

	// convert address to string
	addr2str(&buff[0], 1, tmp);
 8005ac8:	f107 020c 	add.w	r2, r7, #12
 8005acc:	f107 0314 	add.w	r3, r7, #20
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc40 	bl	8006358 <addr2str>
	log_send(2, "mcp9884_readManufac->dev_id", dev, tmp, NAN);
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005b24 <mcp9884_readManufac+0x10c>
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	4912      	ldr	r1, [pc, #72]	; (8005b2c <mcp9884_readManufac+0x114>)
 8005ae4:	2002      	movs	r0, #2
 8005ae6:	f000 fc5f 	bl	80063a8 <log_send>

	// convert address to string
	addr2str(&buff[1], 1, tmp);
 8005aea:	f107 020c 	add.w	r2, r7, #12
 8005aee:	f107 0314 	add.w	r3, r7, #20
 8005af2:	3301      	adds	r3, #1
 8005af4:	2101      	movs	r1, #1
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fc2e 	bl	8006358 <addr2str>
	log_send(2, "mcp9884_readManufac->revision", dev, tmp, NAN);
 8005afc:	f107 030c 	add.w	r3, r7, #12
 8005b00:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005b24 <mcp9884_readManufac+0x10c>
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	490a      	ldr	r1, [pc, #40]	; (8005b30 <mcp9884_readManufac+0x118>)
 8005b08:	2002      	movs	r0, #2
 8005b0a:	f000 fc4d 	bl	80063a8 <log_send>
}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	0800b0a0 	.word	0x0800b0a0
 8005b1c:	0800aea4 	.word	0x0800aea4
 8005b20:	0800aecc 	.word	0x0800aecc
 8005b24:	7fc00000 	.word	0x7fc00000
 8005b28:	0800aee0 	.word	0x0800aee0
 8005b2c:	0800af08 	.word	0x0800af08
 8005b30:	0800af24 	.word	0x0800af24

08005b34 <mcp9884_readData>:


void mcp9884_readData(I2C_HandleTypeDef *hand, int dev) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af04      	add	r7, sp, #16
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[2];

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, HAL_MAX_DELAY);
 8005b3e:	4a33      	ldr	r2, [pc, #204]	; (8005c0c <mcp9884_readData+0xd8>)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	2302      	movs	r3, #2
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	f107 0308 	add.w	r3, r7, #8
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	2205      	movs	r2, #5
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fd fe73 	bl	800384c <HAL_I2C_Mem_Read>
 8005b66:	4603      	mov	r3, r0
 8005b68:	72fb      	strb	r3, [r7, #11]
	if(ret != HAL_OK) log_send(1, "mcp9884_readData", dev, "na", 1);
 8005b6a:	7afb      	ldrb	r3, [r7, #11]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <mcp9884_readData+0x4c>
 8005b70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005b74:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <mcp9884_readData+0xdc>)
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	4926      	ldr	r1, [pc, #152]	; (8005c14 <mcp9884_readData+0xe0>)
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	f000 fc14 	bl	80063a8 <log_send>

	// clear flag byte
	if(buff[0] & 0xE0)
 8005b80:	7a3b      	ldrb	r3, [r7, #8]
 8005b82:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <mcp9884_readData+0x60>
		buff[0] = buff[0] & 0x1F;
 8005b8a:	7a3b      	ldrb	r3, [r7, #8]
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	723b      	strb	r3, [r7, #8]

	// convert Ta value to degC temperature
	float value;
	if((buff[0] & 0x10) == 0x10){
 8005b94:	7a3b      	ldrb	r3, [r7, #8]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d014      	beq.n	8005bc8 <mcp9884_readData+0x94>
		buff[0] = buff[0] & 0x0F;
 8005b9e:	7a3b      	ldrb	r3, [r7, #8]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	723b      	strb	r3, [r7, #8]
		value = (256 - (buff[0] << 4) + (buff[1] >> 4)) * -1;
 8005ba8:	7a3b      	ldrb	r3, [r7, #8]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005bb0:	7a7a      	ldrb	r2, [r7, #9]
 8005bb2:	0912      	lsrs	r2, r2, #4
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	425b      	negs	r3, r3
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc2:	edc7 7a03 	vstr	s15, [r7, #12]
 8005bc6:	e015      	b.n	8005bf4 <mcp9884_readData+0xc0>
	}
	else
		value = (float)buff[0] * 16 + (float)buff[1] / 16;
 8005bc8:	7a3b      	ldrb	r3, [r7, #8]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005bd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bda:	7a7b      	ldrb	r3, [r7, #9]
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be4:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8005be8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf0:	edc7 7a03 	vstr	s15, [r7, #12]

	log_send(2, "mcp9884_readData", dev, "na", value);
 8005bf4:	ed97 0a03 	vldr	s0, [r7, #12]
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <mcp9884_readData+0xdc>)
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	4905      	ldr	r1, [pc, #20]	; (8005c14 <mcp9884_readData+0xe0>)
 8005bfe:	2002      	movs	r0, #2
 8005c00:	f000 fbd2 	bl	80063a8 <log_send>
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	0800b0a0 	.word	0x0800b0a0
 8005c10:	0800aea4 	.word	0x0800aea4
 8005c14:	0800af44 	.word	0x0800af44

08005c18 <mmc5883_powerReset>:
uint8_t CMD_SW_RST	= 0x80;


/* SUPPORT FUNCTIONS */

void mmc5883_powerReset() {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_RESET);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c22:	480d      	ldr	r0, [pc, #52]	; (8005c58 <mmc5883_powerReset+0x40>)
 8005c24:	f7fd fc56 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005c28:	20c8      	movs	r0, #200	; 0xc8
 8005c2a:	f7fc f8df 	bl	8001dec <HAL_Delay>
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_SET);
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c34:	4808      	ldr	r0, [pc, #32]	; (8005c58 <mmc5883_powerReset+0x40>)
 8005c36:	f7fd fc4d 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005c3a:	2064      	movs	r0, #100	; 0x64
 8005c3c:	f7fc f8d6 	bl	8001dec <HAL_Delay>

	log_send(0, "mmc5883_powerReset", -1, "na", NAN);
 8005c40:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005c5c <mmc5883_powerReset+0x44>
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <mmc5883_powerReset+0x48>)
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c4a:	4906      	ldr	r1, [pc, #24]	; (8005c64 <mmc5883_powerReset+0x4c>)
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f000 fbab 	bl	80063a8 <log_send>
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	48000c00 	.word	0x48000c00
 8005c5c:	7fc00000 	.word	0x7fc00000
 8005c60:	0800af58 	.word	0x0800af58
 8005c64:	0800af5c 	.word	0x0800af5c

08005c68 <mmc5883_waitMeasure>:


int mmc5883_waitMeasure(I2C_HandleTypeDef *hand, bool type, int dev) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	460b      	mov	r3, r1
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]

	// periodically check status register
	while(cnt*10 < TIMEOUT) {
 8005c7a:	e03a      	b.n	8005cf2 <mmc5883_waitMeasure+0x8a>
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, HAL_MAX_DELAY);
 8005c7c:	2330      	movs	r3, #48	; 0x30
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	b299      	uxth	r1, r3
 8005c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c88:	9302      	str	r3, [sp, #8]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	f107 0312 	add.w	r3, r7, #18
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	2207      	movs	r2, #7
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7fd fdd7 	bl	800384c <HAL_I2C_Mem_Read>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK) log_send(1, "mmc5883_waitMeasure", dev, "na", 1);
 8005ca2:	7cfb      	ldrb	r3, [r7, #19]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <mmc5883_waitMeasure+0x50>
 8005ca8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005cac:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <mmc5883_waitMeasure+0xa4>)
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4917      	ldr	r1, [pc, #92]	; (8005d10 <mmc5883_waitMeasure+0xa8>)
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f000 fb78 	bl	80063a8 <log_send>

		// check buffer (0:mag, 1:temp)
		if(!type && (buff & (1 << RDY_TM_M))) return 0;
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	f083 0301 	eor.w	r3, r3, #1
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <mmc5883_waitMeasure+0x6a>
 8005cc4:	7cbb      	ldrb	r3, [r7, #18]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <mmc5883_waitMeasure+0x6a>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e018      	b.n	8005d04 <mmc5883_waitMeasure+0x9c>
		else if(type && (buff & (1 << RDY_TM_T))) return 0;
 8005cd2:	7afb      	ldrb	r3, [r7, #11]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d006      	beq.n	8005ce6 <mmc5883_waitMeasure+0x7e>
 8005cd8:	7cbb      	ldrb	r3, [r7, #18]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <mmc5883_waitMeasure+0x7e>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e00e      	b.n	8005d04 <mmc5883_waitMeasure+0x9c>

		// wait 10ms and increase counter
		HAL_Delay(10);
 8005ce6:	200a      	movs	r0, #10
 8005ce8:	f7fc f880 	bl	8001dec <HAL_Delay>
		cnt++;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
	while(cnt*10 < TIMEOUT) {
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	2bc7      	cmp	r3, #199	; 0xc7
 8005cfe:	ddbd      	ble.n	8005c7c <mmc5883_waitMeasure+0x14>
	}

	// timeout error
	return -1;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	0800af58 	.word	0x0800af58
 8005d10:	0800af70 	.word	0x0800af70

08005d14 <mmc5883_configure>:


/* MAIN FUNCTIONS */

void mmc5883_configure(I2C_HandleTypeDef *hand, int dev) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af04      	add	r7, sp, #16
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	// reset device - clear registers (5ms power on)
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_SW_RST, 1, HAL_MAX_DELAY);
 8005d1e:	2330      	movs	r3, #48	; 0x30
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	b299      	uxth	r1, r3
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <mmc5883_configure+0x9c>)
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	2301      	movs	r3, #1
 8005d36:	2209      	movs	r2, #9
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fd fc73 	bl	8003624 <HAL_I2C_Mem_Write>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "mmc5883_config", dev, "na", 1);
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <mmc5883_configure+0x44>
 8005d48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d4c:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <mmc5883_configure+0xa0>)
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4919      	ldr	r1, [pc, #100]	; (8005db8 <mmc5883_configure+0xa4>)
 8005d52:	2001      	movs	r0, #1
 8005d54:	f000 fb28 	bl	80063a8 <log_send>
	HAL_Delay(100);
 8005d58:	2064      	movs	r0, #100	; 0x64
 8005d5a:	f7fc f847 	bl	8001dec <HAL_Delay>

	// set output resolution
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_100HZ, 1, HAL_MAX_DELAY);
 8005d5e:	2330      	movs	r3, #48	; 0x30
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	b299      	uxth	r1, r3
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d6a:	9302      	str	r3, [sp, #8]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <mmc5883_configure+0xa8>)
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2301      	movs	r3, #1
 8005d76:	2209      	movs	r2, #9
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fd fc53 	bl	8003624 <HAL_I2C_Mem_Write>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "mmc5883_config", dev, "na", 2);
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <mmc5883_configure+0x84>
 8005d88:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <mmc5883_configure+0xa0>)
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	4909      	ldr	r1, [pc, #36]	; (8005db8 <mmc5883_configure+0xa4>)
 8005d92:	2001      	movs	r0, #1
 8005d94:	f000 fb08 	bl	80063a8 <log_send>

	log_send(0, "mmc5883_config", dev, "na", NAN);
 8005d98:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005dc0 <mmc5883_configure+0xac>
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <mmc5883_configure+0xa0>)
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	4905      	ldr	r1, [pc, #20]	; (8005db8 <mmc5883_configure+0xa4>)
 8005da2:	2000      	movs	r0, #0
 8005da4:	f000 fb00 	bl	80063a8 <log_send>
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	2000000d 	.word	0x2000000d
 8005db4:	0800af58 	.word	0x0800af58
 8005db8:	0800af84 	.word	0x0800af84
 8005dbc:	2000020c 	.word	0x2000020c
 8005dc0:	7fc00000 	.word	0x7fc00000

08005dc4 <mmc5883_readManufac>:


void mmc5883_readManufac(I2C_HandleTypeDef *hand, int dev) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af04      	add	r7, sp, #16
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, HAL_MAX_DELAY);
 8005dce:	2330      	movs	r3, #48	; 0x30
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	b299      	uxth	r1, r3
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dda:	9302      	str	r3, [sp, #8]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	f107 030e 	add.w	r3, r7, #14
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2301      	movs	r3, #1
 8005de8:	222f      	movs	r2, #47	; 0x2f
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fd fd2e 	bl	800384c <HAL_I2C_Mem_Read>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) log_send(1, "mmc5883_readManufac", dev, "na", 2);
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <mmc5883_readManufac+0x46>
 8005dfa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <mmc5883_readManufac+0x70>)
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	490d      	ldr	r1, [pc, #52]	; (8005e38 <mmc5883_readManufac+0x74>)
 8005e04:	2001      	movs	r0, #1
 8005e06:	f000 facf 	bl	80063a8 <log_send>

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
 8005e0a:	f107 0208 	add.w	r2, r7, #8
 8005e0e:	f107 030e 	add.w	r3, r7, #14
 8005e12:	2101      	movs	r1, #1
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fa9f 	bl	8006358 <addr2str>
	log_send(2, "mmc5883_readManufac", dev, tmp, NAN);
 8005e1a:	f107 0308 	add.w	r3, r7, #8
 8005e1e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8005e3c <mmc5883_readManufac+0x78>
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4904      	ldr	r1, [pc, #16]	; (8005e38 <mmc5883_readManufac+0x74>)
 8005e26:	2002      	movs	r0, #2
 8005e28:	f000 fabe 	bl	80063a8 <log_send>
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	0800af58 	.word	0x0800af58
 8005e38:	0800af94 	.word	0x0800af94
 8005e3c:	7fc00000 	.word	0x7fc00000

08005e40 <mmc5883_readTempData>:


void mmc5883_readTempData(I2C_HandleTypeDef *hand, int dev) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff; int waitRet;

	// initiate temperature measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_T, 1, HAL_MAX_DELAY);
 8005e4a:	2330      	movs	r3, #48	; 0x30
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	b299      	uxth	r1, r3
 8005e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	2301      	movs	r3, #1
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	4b4a      	ldr	r3, [pc, #296]	; (8005f88 <mmc5883_readTempData+0x148>)
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	2301      	movs	r3, #1
 8005e62:	2208      	movs	r2, #8
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7fd fbdd 	bl	8003624 <HAL_I2C_Mem_Write>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mmc5883_readData", dev, "na", 1);
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <mmc5883_readTempData+0x44>
 8005e74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005e78:	4b44      	ldr	r3, [pc, #272]	; (8005f8c <mmc5883_readTempData+0x14c>)
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4944      	ldr	r1, [pc, #272]	; (8005f90 <mmc5883_readTempData+0x150>)
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f000 fa92 	bl	80063a8 <log_send>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 1, dev);
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	2101      	movs	r1, #1
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff feed 	bl	8005c68 <mmc5883_waitMeasure>
 8005e8e:	6138      	str	r0, [r7, #16]
	if(waitRet != 0) log_send(1, "mmc5883_readData", dev, "na", 2);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <mmc5883_readTempData+0x66>
 8005e96:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005e9a:	4b3c      	ldr	r3, [pc, #240]	; (8005f8c <mmc5883_readTempData+0x14c>)
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	493c      	ldr	r1, [pc, #240]	; (8005f90 <mmc5883_readTempData+0x150>)
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	f000 fa81 	bl	80063a8 <log_send>

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, &buff, 1, HAL_MAX_DELAY);
 8005ea6:	2330      	movs	r3, #48	; 0x30
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	b299      	uxth	r1, r3
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	f107 030b 	add.w	r3, r7, #11
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	2206      	movs	r2, #6
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fd fcc2 	bl	800384c <HAL_I2C_Mem_Read>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) log_send(1, "mmc5883_readData", dev, "na", 3);
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <mmc5883_readTempData+0xa2>
 8005ed2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <mmc5883_readTempData+0x14c>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	492d      	ldr	r1, [pc, #180]	; (8005f90 <mmc5883_readTempData+0x150>)
 8005edc:	2001      	movs	r0, #1
 8005ede:	f000 fa63 	bl	80063a8 <log_send>

	// process temperature value (formula from data-sheet, bit flip required)
	float val = -75.0 + 0.7*(buff << 8);
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa fb2c 	bl	8000544 <__aeabi_i2d>
 8005eec:	a320      	add	r3, pc, #128	; (adr r3, 8005f70 <mmc5883_readTempData+0x130>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa fb91 	bl	8000618 <__aeabi_dmul>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4610      	mov	r0, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	a31e      	add	r3, pc, #120	; (adr r3, 8005f78 <mmc5883_readTempData+0x138>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f9d0 	bl	80002a8 <__aeabi_dsub>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f7fa fe7a 	bl	8000c08 <__aeabi_d2f>
 8005f14:	4603      	mov	r3, r0
 8005f16:	60fb      	str	r3, [r7, #12]
	val = round(val*10) / 10000;
 8005f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f24:	ee17 0a90 	vmov	r0, s15
 8005f28:	f7fa fb1e 	bl	8000568 <__aeabi_f2d>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	ec43 2b10 	vmov	d0, r2, r3
 8005f34:	f000 fa72 	bl	800641c <round>
 8005f38:	ec51 0b10 	vmov	r0, r1, d0
 8005f3c:	a310      	add	r3, pc, #64	; (adr r3, 8005f80 <mmc5883_readTempData+0x140>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f7fa fc93 	bl	800086c <__aeabi_ddiv>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f7fa fe5b 	bl	8000c08 <__aeabi_d2f>
 8005f52:	4603      	mov	r3, r0
 8005f54:	60fb      	str	r3, [r7, #12]

	log_send(2, "mmc5883_readTempData", dev, "temp", val);
 8005f56:	ed97 0a03 	vldr	s0, [r7, #12]
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <mmc5883_readTempData+0x154>)
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	490e      	ldr	r1, [pc, #56]	; (8005f98 <mmc5883_readTempData+0x158>)
 8005f60:	2002      	movs	r0, #2
 8005f62:	f000 fa21 	bl	80063a8 <log_send>
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	66666666 	.word	0x66666666
 8005f74:	3fe66666 	.word	0x3fe66666
 8005f78:	00000000 	.word	0x00000000
 8005f7c:	4052c000 	.word	0x4052c000
 8005f80:	00000000 	.word	0x00000000
 8005f84:	40c38800 	.word	0x40c38800
 8005f88:	2000000a 	.word	0x2000000a
 8005f8c:	0800af58 	.word	0x0800af58
 8005f90:	0800afa8 	.word	0x0800afa8
 8005f94:	0800afbc 	.word	0x0800afbc
 8005f98:	0800afc4 	.word	0x0800afc4

08005f9c <mmc5883_readMagData>:


void mmc5883_readMagData(I2C_HandleTypeDef *hand, int dev) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b096      	sub	sp, #88	; 0x58
 8005fa0:	af04      	add	r7, sp, #16
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// set magnetometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_SET, 1, HAL_MAX_DELAY);
 8005fa6:	2330      	movs	r3, #48	; 0x30
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	b299      	uxth	r1, r3
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	4ba3      	ldr	r3, [pc, #652]	; (8006248 <mmc5883_readMagData+0x2ac>)
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fd fb2f 	bl	8003624 <HAL_I2C_Mem_Write>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 1);
 8005fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <mmc5883_readMagData+0x48>
 8005fd4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005fd8:	4b9c      	ldr	r3, [pc, #624]	; (800624c <mmc5883_readMagData+0x2b0>)
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	499c      	ldr	r1, [pc, #624]	; (8006250 <mmc5883_readMagData+0x2b4>)
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f000 f9e2 	bl	80063a8 <log_send>

	// initiate magnetic measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_M, 1, HAL_MAX_DELAY);
 8005fe4:	2330      	movs	r3, #48	; 0x30
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	b299      	uxth	r1, r3
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff0:	9302      	str	r3, [sp, #8]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	4b97      	ldr	r3, [pc, #604]	; (8006254 <mmc5883_readMagData+0x2b8>)
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fd fb10 	bl	8003624 <HAL_I2C_Mem_Write>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 2);
 800600a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <mmc5883_readMagData+0x86>
 8006012:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006016:	4b8d      	ldr	r3, [pc, #564]	; (800624c <mmc5883_readMagData+0x2b0>)
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	498d      	ldr	r1, [pc, #564]	; (8006250 <mmc5883_readMagData+0x2b4>)
 800601c:	2001      	movs	r0, #1
 800601e:	f000 f9c3 	bl	80063a8 <log_send>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 0, dev);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fe1e 	bl	8005c68 <mmc5883_waitMeasure>
 800602c:	6338      	str	r0, [r7, #48]	; 0x30
	if(waitRet != 0) log_send(1, "mmc5883_readMagData", dev, "na", 3);
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <mmc5883_readMagData+0xa8>
 8006034:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8006038:	4b84      	ldr	r3, [pc, #528]	; (800624c <mmc5883_readMagData+0x2b0>)
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4984      	ldr	r1, [pc, #528]	; (8006250 <mmc5883_readMagData+0x2b4>)
 800603e:	2001      	movs	r0, #1
 8006040:	f000 f9b2 	bl	80063a8 <log_send>

	// read magnetic register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_DATA, 1, buff, 6, HAL_MAX_DELAY);
 8006044:	2330      	movs	r3, #48	; 0x30
 8006046:	b29b      	uxth	r3, r3
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	b299      	uxth	r1, r3
 800604c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	2306      	movs	r3, #6
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2301      	movs	r3, #1
 800605e:	2200      	movs	r2, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fd fbf3 	bl	800384c <HAL_I2C_Mem_Read>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 4);
 800606c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <mmc5883_readMagData+0xe8>
 8006074:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8006078:	4b74      	ldr	r3, [pc, #464]	; (800624c <mmc5883_readMagData+0x2b0>)
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	4974      	ldr	r1, [pc, #464]	; (8006250 <mmc5883_readMagData+0x2b4>)
 800607e:	2001      	movs	r0, #1
 8006080:	f000 f992 	bl	80063a8 <log_send>

	// process measurement 1
	uint16_t valTmp[6];
	for(int i=0; i<3; i++)
 8006084:	2300      	movs	r3, #0
 8006086:	647b      	str	r3, [r7, #68]	; 0x44
 8006088:	e01e      	b.n	80060c8 <mmc5883_readMagData+0x12c>
		valTmp[i] = ((uint16_t)buff[2*i+1] << 8) | buff[2*i];
 800608a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	3301      	adds	r3, #1
 8006090:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006094:	4413      	add	r3, r2
 8006096:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	b21a      	sxth	r2, r3
 800609e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80060a6:	440b      	add	r3, r1
 80060a8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80060ac:	b21b      	sxth	r3, r3
 80060ae:	4313      	orrs	r3, r2
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80060bc:	440b      	add	r3, r1
 80060be:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for(int i=0; i<3; i++)
 80060c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c4:	3301      	adds	r3, #1
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
 80060c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	dddd      	ble.n	800608a <mmc5883_readMagData+0xee>

	// reset magnetometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_RST, 1, HAL_MAX_DELAY);
 80060ce:	2330      	movs	r3, #48	; 0x30
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	b299      	uxth	r1, r3
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	2301      	movs	r3, #1
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <mmc5883_readMagData+0x2bc>)
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2301      	movs	r3, #1
 80060e6:	2208      	movs	r2, #8
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7fd fa9b 	bl	8003624 <HAL_I2C_Mem_Write>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 5);
 80060f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <mmc5883_readMagData+0x170>
 80060fc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8006100:	4b52      	ldr	r3, [pc, #328]	; (800624c <mmc5883_readMagData+0x2b0>)
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4952      	ldr	r1, [pc, #328]	; (8006250 <mmc5883_readMagData+0x2b4>)
 8006106:	2001      	movs	r0, #1
 8006108:	f000 f94e 	bl	80063a8 <log_send>

	// initiate magnetic measurement
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL0, 1, &CMD_TM_M, 1, HAL_MAX_DELAY);
 800610c:	2330      	movs	r3, #48	; 0x30
 800610e:	b29b      	uxth	r3, r3
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	b299      	uxth	r1, r3
 8006114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	2301      	movs	r3, #1
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <mmc5883_readMagData+0x2b8>)
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	2301      	movs	r3, #1
 8006124:	2208      	movs	r2, #8
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fd fa7c 	bl	8003624 <HAL_I2C_Mem_Write>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) log_send(1, "mmc5883_readMagData", dev, "na", 6);
 8006132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <mmc5883_readMagData+0x1ae>
 800613a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800613e:	4b43      	ldr	r3, [pc, #268]	; (800624c <mmc5883_readMagData+0x2b0>)
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	4943      	ldr	r1, [pc, #268]	; (8006250 <mmc5883_readMagData+0x2b4>)
 8006144:	2001      	movs	r0, #1
 8006146:	f000 f92f 	bl	80063a8 <log_send>

	// wait for measurement to complete
	waitRet = mmc5883_waitMeasure(hand, 0, dev);
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fd8a 	bl	8005c68 <mmc5883_waitMeasure>
 8006154:	6338      	str	r0, [r7, #48]	; 0x30
	if(waitRet != 0) log_send(1, "mmc5883_readMagData", dev, "na", 7);
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <mmc5883_readMagData+0x1d0>
 800615c:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8006160:	4b3a      	ldr	r3, [pc, #232]	; (800624c <mmc5883_readMagData+0x2b0>)
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	493a      	ldr	r1, [pc, #232]	; (8006250 <mmc5883_readMagData+0x2b4>)
 8006166:	2001      	movs	r0, #1
 8006168:	f000 f91e 	bl	80063a8 <log_send>

	// read magnetic register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_DATA, 1, buff, 6, HAL_MAX_DELAY);
 800616c:	2330      	movs	r3, #48	; 0x30
 800616e:	b29b      	uxth	r3, r3
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	b299      	uxth	r1, r3
 8006174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006178:	9302      	str	r3, [sp, #8]
 800617a:	2306      	movs	r3, #6
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	2301      	movs	r3, #1
 8006186:	2200      	movs	r2, #0
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fd fb5f 	bl	800384c <HAL_I2C_Mem_Read>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) log_send(1, "mmc5883_readData", dev, "na", 8);
 8006194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <mmc5883_readMagData+0x210>
 800619c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80061a0:	4b2a      	ldr	r3, [pc, #168]	; (800624c <mmc5883_readMagData+0x2b0>)
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	492d      	ldr	r1, [pc, #180]	; (800625c <mmc5883_readMagData+0x2c0>)
 80061a6:	2001      	movs	r0, #1
 80061a8:	f000 f8fe 	bl	80063a8 <log_send>

	// process measurement 2
	for(int i=0; i<3; i++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	643b      	str	r3, [r7, #64]	; 0x40
 80061b0:	e01f      	b.n	80061f2 <mmc5883_readMagData+0x256>
		valTmp[i+3] = ((uint16_t)buff[2*i+1] << 8) | buff[2*i];
 80061b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	3301      	adds	r3, #1
 80061b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061bc:	4413      	add	r3, r2
 80061be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	b21a      	sxth	r2, r3
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80061ce:	440b      	add	r3, r1
 80061d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b21a      	sxth	r2, r3
 80061da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061dc:	3303      	adds	r3, #3
 80061de:	b292      	uxth	r2, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80061e6:	440b      	add	r3, r1
 80061e8:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for(int i=0; i<3; i++)
 80061ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ee:	3301      	adds	r3, #1
 80061f0:	643b      	str	r3, [r7, #64]	; 0x40
 80061f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	dddc      	ble.n	80061b2 <mmc5883_readMagData+0x216>

	// find data offset
	uint16_t valOffset[3];
	for(int i=0; i<3; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fc:	e01e      	b.n	800623c <mmc5883_readMagData+0x2a0>
		valOffset[i] = (valTmp[i] + valTmp[i+3]) / 2;
 80061fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006206:	4413      	add	r3, r2
 8006208:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800620c:	461a      	mov	r2, r3
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	3303      	adds	r3, #3
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006218:	440b      	add	r3, r1
 800621a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800621e:	4413      	add	r3, r2
 8006220:	0fda      	lsrs	r2, r3, #31
 8006222:	4413      	add	r3, r2
 8006224:	105b      	asrs	r3, r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006230:	440b      	add	r3, r1
 8006232:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i=0; i<3; i++)
 8006236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006238:	3301      	adds	r3, #1
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800623c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623e:	2b02      	cmp	r3, #2
 8006240:	dddd      	ble.n	80061fe <mmc5883_readMagData+0x262>

	// process final data
	float val[3];
	for(int i=0; i<3; i++) {
 8006242:	2300      	movs	r3, #0
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
 8006246:	e057      	b.n	80062f8 <mmc5883_readMagData+0x35c>
 8006248:	2000000b 	.word	0x2000000b
 800624c:	0800af58 	.word	0x0800af58
 8006250:	0800afdc 	.word	0x0800afdc
 8006254:	20000009 	.word	0x20000009
 8006258:	2000000c 	.word	0x2000000c
 800625c:	0800afa8 	.word	0x0800afa8
 8006260:	447a0000 	.word	0x447a0000
		val[i] = (float)(valTmp[i] - valOffset[i]);
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800626c:	4413      	add	r3, r2
 800626e:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8006272:	461a      	mov	r2, r3
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800627c:	440b      	add	r3, r1
 800627e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006294:	4413      	add	r3, r2
 8006296:	3b40      	subs	r3, #64	; 0x40
 8006298:	edc3 7a00 	vstr	s15, [r3]
		val[i] = round(val[i]*1000) / 1000;
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062a4:	4413      	add	r3, r2
 80062a6:	3b40      	subs	r3, #64	; 0x40
 80062a8:	edd3 7a00 	vldr	s15, [r3]
 80062ac:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8006260 <mmc5883_readMagData+0x2c4>
 80062b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062b4:	ee17 0a90 	vmov	r0, s15
 80062b8:	f7fa f956 	bl	8000568 <__aeabi_f2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	ec43 2b10 	vmov	d0, r2, r3
 80062c4:	f000 f8aa 	bl	800641c <round>
 80062c8:	ec51 0b10 	vmov	r0, r1, d0
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <mmc5883_readMagData+0x3a8>)
 80062d2:	f7fa facb 	bl	800086c <__aeabi_ddiv>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	f7fa fc93 	bl	8000c08 <__aeabi_d2f>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80062ec:	440b      	add	r3, r1
 80062ee:	3b40      	subs	r3, #64	; 0x40
 80062f0:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	3301      	adds	r3, #1
 80062f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	ddb2      	ble.n	8006264 <mmc5883_readMagData+0x2c8>
	}

	log_send(2, "mmc5883_readMagData", dev, "mag_x", val[0]);
 80062fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8006302:	eeb0 0a67 	vmov.f32	s0, s15
 8006306:	4b10      	ldr	r3, [pc, #64]	; (8006348 <mmc5883_readMagData+0x3ac>)
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	4910      	ldr	r1, [pc, #64]	; (800634c <mmc5883_readMagData+0x3b0>)
 800630c:	2002      	movs	r0, #2
 800630e:	f000 f84b 	bl	80063a8 <log_send>
	log_send(2, "mmc5883_readMagData", dev, "mag_y", val[1]);
 8006312:	edd7 7a03 	vldr	s15, [r7, #12]
 8006316:	eeb0 0a67 	vmov.f32	s0, s15
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <mmc5883_readMagData+0x3b4>)
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	490b      	ldr	r1, [pc, #44]	; (800634c <mmc5883_readMagData+0x3b0>)
 8006320:	2002      	movs	r0, #2
 8006322:	f000 f841 	bl	80063a8 <log_send>
	log_send(2, "mmc5883_readMagData", dev, "mag_z", val[2]);
 8006326:	edd7 7a04 	vldr	s15, [r7, #16]
 800632a:	eeb0 0a67 	vmov.f32	s0, s15
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <mmc5883_readMagData+0x3b8>)
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	4906      	ldr	r1, [pc, #24]	; (800634c <mmc5883_readMagData+0x3b0>)
 8006334:	2002      	movs	r0, #2
 8006336:	f000 f837 	bl	80063a8 <log_send>
}
 800633a:	bf00      	nop
 800633c:	3748      	adds	r7, #72	; 0x48
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	408f4000 	.word	0x408f4000
 8006348:	0800aff0 	.word	0x0800aff0
 800634c:	0800afdc 	.word	0x0800afdc
 8006350:	0800aff8 	.word	0x0800aff8
 8006354:	0800b000 	.word	0x0800b000

08006358 <addr2str>:
static const char LOG_types[3][4] = {"INF", "ERR", "DAT"};


/* FUNCTIONS */

void addr2str(uint8_t *addr, int addr_len, char *str) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	int index = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	e011      	b.n	8006392 <addr2str+0x3a>
	   index += sprintf(&str[index], "%02X", addr[i]);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	18d0      	adds	r0, r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	4909      	ldr	r1, [pc, #36]	; (80063a4 <addr2str+0x4c>)
 8006380:	f000 ffd2 	bl	8007328 <siprintf>
 8006384:	4602      	mov	r2, r0
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
	for(int i=0; i<addr_len; i++)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	3301      	adds	r3, #1
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	429a      	cmp	r2, r3
 8006398:	dbe9      	blt.n	800636e <addr2str+0x16>
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	0800b008 	.word	0x0800b008

080063a8 <log_send>:
	}
	printf("Scanning completed\n");
}


void log_send(int type, char *identity, int device, char *data_str, float data_flt) {
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b08d      	sub	sp, #52	; 0x34
 80063ac:	af04      	add	r7, sp, #16
 80063ae:	6178      	str	r0, [r7, #20]
 80063b0:	6139      	str	r1, [r7, #16]
 80063b2:	60fa      	str	r2, [r7, #12]
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	ed87 0a01 	vstr	s0, [r7, #4]
	// process device
	char device_str[8] = "na";
 80063ba:	f246 136e 	movw	r3, #24942	; 0x616e
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
	if(device >= 0) sprintf(device_str, "%d", device);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	db06      	blt.n	80063d8 <log_send+0x30>
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	490f      	ldr	r1, [pc, #60]	; (8006410 <log_send+0x68>)
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 ffa8 	bl	8007328 <siprintf>

	// send to SWD
	printf("%s -i %s -d %s -s %s -f %f\n", LOG_types[type], identity, device_str, data_str, data_flt);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4a0d      	ldr	r2, [pc, #52]	; (8006414 <log_send+0x6c>)
 80063de:	189c      	adds	r4, r3, r2
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fa f8c1 	bl	8000568 <__aeabi_f2d>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	f107 0118 	add.w	r1, r7, #24
 80063ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	460b      	mov	r3, r1
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4621      	mov	r1, r4
 80063fc:	4806      	ldr	r0, [pc, #24]	; (8006418 <log_send+0x70>)
 80063fe:	f000 feff 	bl	8007200 <iprintf>
	HAL_Delay(100);
 8006402:	2064      	movs	r0, #100	; 0x64
 8006404:	f7fb fcf2 	bl	8001dec <HAL_Delay>
}
 8006408:	bf00      	nop
 800640a:	3724      	adds	r7, #36	; 0x24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd90      	pop	{r4, r7, pc}
 8006410:	0800b040 	.word	0x0800b040
 8006414:	0800b0a8 	.word	0x0800b0a8
 8006418:	0800b044 	.word	0x0800b044

0800641c <round>:
 800641c:	ec51 0b10 	vmov	r0, r1, d0
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006426:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800642a:	2c13      	cmp	r4, #19
 800642c:	ee10 2a10 	vmov	r2, s0
 8006430:	460b      	mov	r3, r1
 8006432:	dc19      	bgt.n	8006468 <round+0x4c>
 8006434:	2c00      	cmp	r4, #0
 8006436:	da09      	bge.n	800644c <round+0x30>
 8006438:	3401      	adds	r4, #1
 800643a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800643e:	d103      	bne.n	8006448 <round+0x2c>
 8006440:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006444:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006448:	2100      	movs	r1, #0
 800644a:	e028      	b.n	800649e <round+0x82>
 800644c:	4d15      	ldr	r5, [pc, #84]	; (80064a4 <round+0x88>)
 800644e:	4125      	asrs	r5, r4
 8006450:	ea01 0605 	and.w	r6, r1, r5
 8006454:	4332      	orrs	r2, r6
 8006456:	d00e      	beq.n	8006476 <round+0x5a>
 8006458:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800645c:	fa42 f404 	asr.w	r4, r2, r4
 8006460:	4423      	add	r3, r4
 8006462:	ea23 0305 	bic.w	r3, r3, r5
 8006466:	e7ef      	b.n	8006448 <round+0x2c>
 8006468:	2c33      	cmp	r4, #51	; 0x33
 800646a:	dd07      	ble.n	800647c <round+0x60>
 800646c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006470:	d101      	bne.n	8006476 <round+0x5a>
 8006472:	f7f9 ff1b 	bl	80002ac <__adddf3>
 8006476:	ec41 0b10 	vmov	d0, r0, r1
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006480:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006484:	40f5      	lsrs	r5, r6
 8006486:	4228      	tst	r0, r5
 8006488:	d0f5      	beq.n	8006476 <round+0x5a>
 800648a:	2101      	movs	r1, #1
 800648c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006490:	fa01 f404 	lsl.w	r4, r1, r4
 8006494:	1912      	adds	r2, r2, r4
 8006496:	bf28      	it	cs
 8006498:	185b      	addcs	r3, r3, r1
 800649a:	ea22 0105 	bic.w	r1, r2, r5
 800649e:	4608      	mov	r0, r1
 80064a0:	4619      	mov	r1, r3
 80064a2:	e7e8      	b.n	8006476 <round+0x5a>
 80064a4:	000fffff 	.word	0x000fffff

080064a8 <__errno>:
 80064a8:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <__errno+0x8>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000010 	.word	0x20000010

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	4d0d      	ldr	r5, [pc, #52]	; (80064ec <__libc_init_array+0x38>)
 80064b8:	4c0d      	ldr	r4, [pc, #52]	; (80064f0 <__libc_init_array+0x3c>)
 80064ba:	1b64      	subs	r4, r4, r5
 80064bc:	10a4      	asrs	r4, r4, #2
 80064be:	2600      	movs	r6, #0
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	4d0b      	ldr	r5, [pc, #44]	; (80064f4 <__libc_init_array+0x40>)
 80064c6:	4c0c      	ldr	r4, [pc, #48]	; (80064f8 <__libc_init_array+0x44>)
 80064c8:	f004 fcd0 	bl	800ae6c <_init>
 80064cc:	1b64      	subs	r4, r4, r5
 80064ce:	10a4      	asrs	r4, r4, #2
 80064d0:	2600      	movs	r6, #0
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064dc:	4798      	blx	r3
 80064de:	3601      	adds	r6, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e6:	4798      	blx	r3
 80064e8:	3601      	adds	r6, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	0800b56c 	.word	0x0800b56c
 80064f0:	0800b56c 	.word	0x0800b56c
 80064f4:	0800b56c 	.word	0x0800b56c
 80064f8:	0800b570 	.word	0x0800b570

080064fc <memset>:
 80064fc:	4402      	add	r2, r0
 80064fe:	4603      	mov	r3, r0
 8006500:	4293      	cmp	r3, r2
 8006502:	d100      	bne.n	8006506 <memset+0xa>
 8006504:	4770      	bx	lr
 8006506:	f803 1b01 	strb.w	r1, [r3], #1
 800650a:	e7f9      	b.n	8006500 <memset+0x4>

0800650c <__cvt>:
 800650c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	ec55 4b10 	vmov	r4, r5, d0
 8006514:	2d00      	cmp	r5, #0
 8006516:	460e      	mov	r6, r1
 8006518:	4619      	mov	r1, r3
 800651a:	462b      	mov	r3, r5
 800651c:	bfbb      	ittet	lt
 800651e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006522:	461d      	movlt	r5, r3
 8006524:	2300      	movge	r3, #0
 8006526:	232d      	movlt	r3, #45	; 0x2d
 8006528:	700b      	strb	r3, [r1, #0]
 800652a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006530:	4691      	mov	r9, r2
 8006532:	f023 0820 	bic.w	r8, r3, #32
 8006536:	bfbc      	itt	lt
 8006538:	4622      	movlt	r2, r4
 800653a:	4614      	movlt	r4, r2
 800653c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006540:	d005      	beq.n	800654e <__cvt+0x42>
 8006542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006546:	d100      	bne.n	800654a <__cvt+0x3e>
 8006548:	3601      	adds	r6, #1
 800654a:	2102      	movs	r1, #2
 800654c:	e000      	b.n	8006550 <__cvt+0x44>
 800654e:	2103      	movs	r1, #3
 8006550:	ab03      	add	r3, sp, #12
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	ab02      	add	r3, sp, #8
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	ec45 4b10 	vmov	d0, r4, r5
 800655c:	4653      	mov	r3, sl
 800655e:	4632      	mov	r2, r6
 8006560:	f001 ff02 	bl	8008368 <_dtoa_r>
 8006564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006568:	4607      	mov	r7, r0
 800656a:	d102      	bne.n	8006572 <__cvt+0x66>
 800656c:	f019 0f01 	tst.w	r9, #1
 8006570:	d022      	beq.n	80065b8 <__cvt+0xac>
 8006572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006576:	eb07 0906 	add.w	r9, r7, r6
 800657a:	d110      	bne.n	800659e <__cvt+0x92>
 800657c:	783b      	ldrb	r3, [r7, #0]
 800657e:	2b30      	cmp	r3, #48	; 0x30
 8006580:	d10a      	bne.n	8006598 <__cvt+0x8c>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa faad 	bl	8000ae8 <__aeabi_dcmpeq>
 800658e:	b918      	cbnz	r0, 8006598 <__cvt+0x8c>
 8006590:	f1c6 0601 	rsb	r6, r6, #1
 8006594:	f8ca 6000 	str.w	r6, [sl]
 8006598:	f8da 3000 	ldr.w	r3, [sl]
 800659c:	4499      	add	r9, r3
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7fa fa9f 	bl	8000ae8 <__aeabi_dcmpeq>
 80065aa:	b108      	cbz	r0, 80065b0 <__cvt+0xa4>
 80065ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80065b0:	2230      	movs	r2, #48	; 0x30
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	454b      	cmp	r3, r9
 80065b6:	d307      	bcc.n	80065c8 <__cvt+0xbc>
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065bc:	1bdb      	subs	r3, r3, r7
 80065be:	4638      	mov	r0, r7
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	b004      	add	sp, #16
 80065c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	9103      	str	r1, [sp, #12]
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e7f0      	b.n	80065b2 <__cvt+0xa6>

080065d0 <__exponent>:
 80065d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d2:	4603      	mov	r3, r0
 80065d4:	2900      	cmp	r1, #0
 80065d6:	bfb8      	it	lt
 80065d8:	4249      	neglt	r1, r1
 80065da:	f803 2b02 	strb.w	r2, [r3], #2
 80065de:	bfb4      	ite	lt
 80065e0:	222d      	movlt	r2, #45	; 0x2d
 80065e2:	222b      	movge	r2, #43	; 0x2b
 80065e4:	2909      	cmp	r1, #9
 80065e6:	7042      	strb	r2, [r0, #1]
 80065e8:	dd2a      	ble.n	8006640 <__exponent+0x70>
 80065ea:	f10d 0407 	add.w	r4, sp, #7
 80065ee:	46a4      	mov	ip, r4
 80065f0:	270a      	movs	r7, #10
 80065f2:	46a6      	mov	lr, r4
 80065f4:	460a      	mov	r2, r1
 80065f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80065fa:	fb07 1516 	mls	r5, r7, r6, r1
 80065fe:	3530      	adds	r5, #48	; 0x30
 8006600:	2a63      	cmp	r2, #99	; 0x63
 8006602:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006606:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800660a:	4631      	mov	r1, r6
 800660c:	dcf1      	bgt.n	80065f2 <__exponent+0x22>
 800660e:	3130      	adds	r1, #48	; 0x30
 8006610:	f1ae 0502 	sub.w	r5, lr, #2
 8006614:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006618:	1c44      	adds	r4, r0, #1
 800661a:	4629      	mov	r1, r5
 800661c:	4561      	cmp	r1, ip
 800661e:	d30a      	bcc.n	8006636 <__exponent+0x66>
 8006620:	f10d 0209 	add.w	r2, sp, #9
 8006624:	eba2 020e 	sub.w	r2, r2, lr
 8006628:	4565      	cmp	r5, ip
 800662a:	bf88      	it	hi
 800662c:	2200      	movhi	r2, #0
 800662e:	4413      	add	r3, r2
 8006630:	1a18      	subs	r0, r3, r0
 8006632:	b003      	add	sp, #12
 8006634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800663a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800663e:	e7ed      	b.n	800661c <__exponent+0x4c>
 8006640:	2330      	movs	r3, #48	; 0x30
 8006642:	3130      	adds	r1, #48	; 0x30
 8006644:	7083      	strb	r3, [r0, #2]
 8006646:	70c1      	strb	r1, [r0, #3]
 8006648:	1d03      	adds	r3, r0, #4
 800664a:	e7f1      	b.n	8006630 <__exponent+0x60>

0800664c <_printf_float>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	ed2d 8b02 	vpush	{d8}
 8006654:	b08d      	sub	sp, #52	; 0x34
 8006656:	460c      	mov	r4, r1
 8006658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800665c:	4616      	mov	r6, r2
 800665e:	461f      	mov	r7, r3
 8006660:	4605      	mov	r5, r0
 8006662:	f003 f993 	bl	800998c <_localeconv_r>
 8006666:	f8d0 a000 	ldr.w	sl, [r0]
 800666a:	4650      	mov	r0, sl
 800666c:	f7f9 fdc0 	bl	80001f0 <strlen>
 8006670:	2300      	movs	r3, #0
 8006672:	930a      	str	r3, [sp, #40]	; 0x28
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	f8d8 3000 	ldr.w	r3, [r8]
 800667c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006680:	3307      	adds	r3, #7
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	f103 0208 	add.w	r2, r3, #8
 800668a:	f8c8 2000 	str.w	r2, [r8]
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006696:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800669a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80066a4:	ee08 0a10 	vmov	s16, r0
 80066a8:	4b9f      	ldr	r3, [pc, #636]	; (8006928 <_printf_float+0x2dc>)
 80066aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b2:	f7fa fa4b 	bl	8000b4c <__aeabi_dcmpun>
 80066b6:	bb88      	cbnz	r0, 800671c <_printf_float+0xd0>
 80066b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066bc:	4b9a      	ldr	r3, [pc, #616]	; (8006928 <_printf_float+0x2dc>)
 80066be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c2:	f7fa fa25 	bl	8000b10 <__aeabi_dcmple>
 80066c6:	bb48      	cbnz	r0, 800671c <_printf_float+0xd0>
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7fa fa14 	bl	8000afc <__aeabi_dcmplt>
 80066d4:	b110      	cbz	r0, 80066dc <_printf_float+0x90>
 80066d6:	232d      	movs	r3, #45	; 0x2d
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066dc:	4b93      	ldr	r3, [pc, #588]	; (800692c <_printf_float+0x2e0>)
 80066de:	4894      	ldr	r0, [pc, #592]	; (8006930 <_printf_float+0x2e4>)
 80066e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066e4:	bf94      	ite	ls
 80066e6:	4698      	movls	r8, r3
 80066e8:	4680      	movhi	r8, r0
 80066ea:	2303      	movs	r3, #3
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	9b05      	ldr	r3, [sp, #20]
 80066f0:	f023 0204 	bic.w	r2, r3, #4
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	f04f 0900 	mov.w	r9, #0
 80066fa:	9700      	str	r7, [sp, #0]
 80066fc:	4633      	mov	r3, r6
 80066fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	f000 f9d8 	bl	8006ab8 <_printf_common>
 8006708:	3001      	adds	r0, #1
 800670a:	f040 8090 	bne.w	800682e <_printf_float+0x1e2>
 800670e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006712:	b00d      	add	sp, #52	; 0x34
 8006714:	ecbd 8b02 	vpop	{d8}
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7fa fa12 	bl	8000b4c <__aeabi_dcmpun>
 8006728:	b140      	cbz	r0, 800673c <_printf_float+0xf0>
 800672a:	464b      	mov	r3, r9
 800672c:	2b00      	cmp	r3, #0
 800672e:	bfbc      	itt	lt
 8006730:	232d      	movlt	r3, #45	; 0x2d
 8006732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006736:	487f      	ldr	r0, [pc, #508]	; (8006934 <_printf_float+0x2e8>)
 8006738:	4b7f      	ldr	r3, [pc, #508]	; (8006938 <_printf_float+0x2ec>)
 800673a:	e7d1      	b.n	80066e0 <_printf_float+0x94>
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006742:	9206      	str	r2, [sp, #24]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	d13f      	bne.n	80067c8 <_printf_float+0x17c>
 8006748:	2306      	movs	r3, #6
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	9b05      	ldr	r3, [sp, #20]
 800674e:	6861      	ldr	r1, [r4, #4]
 8006750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006754:	2300      	movs	r3, #0
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	ab0a      	add	r3, sp, #40	; 0x28
 800675a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800675e:	ab09      	add	r3, sp, #36	; 0x24
 8006760:	ec49 8b10 	vmov	d0, r8, r9
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800676c:	4628      	mov	r0, r5
 800676e:	f7ff fecd 	bl	800650c <__cvt>
 8006772:	9b06      	ldr	r3, [sp, #24]
 8006774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006776:	2b47      	cmp	r3, #71	; 0x47
 8006778:	4680      	mov	r8, r0
 800677a:	d108      	bne.n	800678e <_printf_float+0x142>
 800677c:	1cc8      	adds	r0, r1, #3
 800677e:	db02      	blt.n	8006786 <_printf_float+0x13a>
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	4299      	cmp	r1, r3
 8006784:	dd41      	ble.n	800680a <_printf_float+0x1be>
 8006786:	f1ab 0b02 	sub.w	fp, fp, #2
 800678a:	fa5f fb8b 	uxtb.w	fp, fp
 800678e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006792:	d820      	bhi.n	80067d6 <_printf_float+0x18a>
 8006794:	3901      	subs	r1, #1
 8006796:	465a      	mov	r2, fp
 8006798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800679c:	9109      	str	r1, [sp, #36]	; 0x24
 800679e:	f7ff ff17 	bl	80065d0 <__exponent>
 80067a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a4:	1813      	adds	r3, r2, r0
 80067a6:	2a01      	cmp	r2, #1
 80067a8:	4681      	mov	r9, r0
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	dc02      	bgt.n	80067b4 <_printf_float+0x168>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	07d2      	lsls	r2, r2, #31
 80067b2:	d501      	bpl.n	80067b8 <_printf_float+0x16c>
 80067b4:	3301      	adds	r3, #1
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d09c      	beq.n	80066fa <_printf_float+0xae>
 80067c0:	232d      	movs	r3, #45	; 0x2d
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c6:	e798      	b.n	80066fa <_printf_float+0xae>
 80067c8:	9a06      	ldr	r2, [sp, #24]
 80067ca:	2a47      	cmp	r2, #71	; 0x47
 80067cc:	d1be      	bne.n	800674c <_printf_float+0x100>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1bc      	bne.n	800674c <_printf_float+0x100>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7b9      	b.n	800674a <_printf_float+0xfe>
 80067d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067da:	d118      	bne.n	800680e <_printf_float+0x1c2>
 80067dc:	2900      	cmp	r1, #0
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	dd0b      	ble.n	80067fa <_printf_float+0x1ae>
 80067e2:	6121      	str	r1, [r4, #16]
 80067e4:	b913      	cbnz	r3, 80067ec <_printf_float+0x1a0>
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	07d0      	lsls	r0, r2, #31
 80067ea:	d502      	bpl.n	80067f2 <_printf_float+0x1a6>
 80067ec:	3301      	adds	r3, #1
 80067ee:	440b      	add	r3, r1
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	e7de      	b.n	80067b8 <_printf_float+0x16c>
 80067fa:	b913      	cbnz	r3, 8006802 <_printf_float+0x1b6>
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	07d2      	lsls	r2, r2, #31
 8006800:	d501      	bpl.n	8006806 <_printf_float+0x1ba>
 8006802:	3302      	adds	r3, #2
 8006804:	e7f4      	b.n	80067f0 <_printf_float+0x1a4>
 8006806:	2301      	movs	r3, #1
 8006808:	e7f2      	b.n	80067f0 <_printf_float+0x1a4>
 800680a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800680e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006810:	4299      	cmp	r1, r3
 8006812:	db05      	blt.n	8006820 <_printf_float+0x1d4>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	6121      	str	r1, [r4, #16]
 8006818:	07d8      	lsls	r0, r3, #31
 800681a:	d5ea      	bpl.n	80067f2 <_printf_float+0x1a6>
 800681c:	1c4b      	adds	r3, r1, #1
 800681e:	e7e7      	b.n	80067f0 <_printf_float+0x1a4>
 8006820:	2900      	cmp	r1, #0
 8006822:	bfd4      	ite	le
 8006824:	f1c1 0202 	rsble	r2, r1, #2
 8006828:	2201      	movgt	r2, #1
 800682a:	4413      	add	r3, r2
 800682c:	e7e0      	b.n	80067f0 <_printf_float+0x1a4>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	055a      	lsls	r2, r3, #21
 8006832:	d407      	bmi.n	8006844 <_printf_float+0x1f8>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	4642      	mov	r2, r8
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d12c      	bne.n	800689c <_printf_float+0x250>
 8006842:	e764      	b.n	800670e <_printf_float+0xc2>
 8006844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006848:	f240 80e0 	bls.w	8006a0c <_printf_float+0x3c0>
 800684c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	f7fa f948 	bl	8000ae8 <__aeabi_dcmpeq>
 8006858:	2800      	cmp	r0, #0
 800685a:	d034      	beq.n	80068c6 <_printf_float+0x27a>
 800685c:	4a37      	ldr	r2, [pc, #220]	; (800693c <_printf_float+0x2f0>)
 800685e:	2301      	movs	r3, #1
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af51 	beq.w	800670e <_printf_float+0xc2>
 800686c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006870:	429a      	cmp	r2, r3
 8006872:	db02      	blt.n	800687a <_printf_float+0x22e>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	07d8      	lsls	r0, r3, #31
 8006878:	d510      	bpl.n	800689c <_printf_float+0x250>
 800687a:	ee18 3a10 	vmov	r3, s16
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af41 	beq.w	800670e <_printf_float+0xc2>
 800688c:	f04f 0800 	mov.w	r8, #0
 8006890:	f104 091a 	add.w	r9, r4, #26
 8006894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006896:	3b01      	subs	r3, #1
 8006898:	4543      	cmp	r3, r8
 800689a:	dc09      	bgt.n	80068b0 <_printf_float+0x264>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	079b      	lsls	r3, r3, #30
 80068a0:	f100 8105 	bmi.w	8006aae <_printf_float+0x462>
 80068a4:	68e0      	ldr	r0, [r4, #12]
 80068a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a8:	4298      	cmp	r0, r3
 80068aa:	bfb8      	it	lt
 80068ac:	4618      	movlt	r0, r3
 80068ae:	e730      	b.n	8006712 <_printf_float+0xc6>
 80068b0:	2301      	movs	r3, #1
 80068b2:	464a      	mov	r2, r9
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f af27 	beq.w	800670e <_printf_float+0xc2>
 80068c0:	f108 0801 	add.w	r8, r8, #1
 80068c4:	e7e6      	b.n	8006894 <_printf_float+0x248>
 80068c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dc39      	bgt.n	8006940 <_printf_float+0x2f4>
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <_printf_float+0x2f0>)
 80068ce:	2301      	movs	r3, #1
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f af19 	beq.w	800670e <_printf_float+0xc2>
 80068dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068e0:	4313      	orrs	r3, r2
 80068e2:	d102      	bne.n	80068ea <_printf_float+0x29e>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07d9      	lsls	r1, r3, #31
 80068e8:	d5d8      	bpl.n	800689c <_printf_float+0x250>
 80068ea:	ee18 3a10 	vmov	r3, s16
 80068ee:	4652      	mov	r2, sl
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f af09 	beq.w	800670e <_printf_float+0xc2>
 80068fc:	f04f 0900 	mov.w	r9, #0
 8006900:	f104 0a1a 	add.w	sl, r4, #26
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	425b      	negs	r3, r3
 8006908:	454b      	cmp	r3, r9
 800690a:	dc01      	bgt.n	8006910 <_printf_float+0x2c4>
 800690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690e:	e792      	b.n	8006836 <_printf_float+0x1ea>
 8006910:	2301      	movs	r3, #1
 8006912:	4652      	mov	r2, sl
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f aef7 	beq.w	800670e <_printf_float+0xc2>
 8006920:	f109 0901 	add.w	r9, r9, #1
 8006924:	e7ee      	b.n	8006904 <_printf_float+0x2b8>
 8006926:	bf00      	nop
 8006928:	7fefffff 	.word	0x7fefffff
 800692c:	0800b0b8 	.word	0x0800b0b8
 8006930:	0800b0bc 	.word	0x0800b0bc
 8006934:	0800b0c4 	.word	0x0800b0c4
 8006938:	0800b0c0 	.word	0x0800b0c0
 800693c:	0800b0c8 	.word	0x0800b0c8
 8006940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006944:	429a      	cmp	r2, r3
 8006946:	bfa8      	it	ge
 8006948:	461a      	movge	r2, r3
 800694a:	2a00      	cmp	r2, #0
 800694c:	4691      	mov	r9, r2
 800694e:	dc37      	bgt.n	80069c0 <_printf_float+0x374>
 8006950:	f04f 0b00 	mov.w	fp, #0
 8006954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006958:	f104 021a 	add.w	r2, r4, #26
 800695c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695e:	9305      	str	r3, [sp, #20]
 8006960:	eba3 0309 	sub.w	r3, r3, r9
 8006964:	455b      	cmp	r3, fp
 8006966:	dc33      	bgt.n	80069d0 <_printf_float+0x384>
 8006968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800696c:	429a      	cmp	r2, r3
 800696e:	db3b      	blt.n	80069e8 <_printf_float+0x39c>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	07da      	lsls	r2, r3, #31
 8006974:	d438      	bmi.n	80069e8 <_printf_float+0x39c>
 8006976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006978:	9b05      	ldr	r3, [sp, #20]
 800697a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	eba2 0901 	sub.w	r9, r2, r1
 8006982:	4599      	cmp	r9, r3
 8006984:	bfa8      	it	ge
 8006986:	4699      	movge	r9, r3
 8006988:	f1b9 0f00 	cmp.w	r9, #0
 800698c:	dc35      	bgt.n	80069fa <_printf_float+0x3ae>
 800698e:	f04f 0800 	mov.w	r8, #0
 8006992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006996:	f104 0a1a 	add.w	sl, r4, #26
 800699a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	eba3 0309 	sub.w	r3, r3, r9
 80069a4:	4543      	cmp	r3, r8
 80069a6:	f77f af79 	ble.w	800689c <_printf_float+0x250>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4652      	mov	r2, sl
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	f43f aeaa 	beq.w	800670e <_printf_float+0xc2>
 80069ba:	f108 0801 	add.w	r8, r8, #1
 80069be:	e7ec      	b.n	800699a <_printf_float+0x34e>
 80069c0:	4613      	mov	r3, r2
 80069c2:	4631      	mov	r1, r6
 80069c4:	4642      	mov	r2, r8
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	d1c0      	bne.n	8006950 <_printf_float+0x304>
 80069ce:	e69e      	b.n	800670e <_printf_float+0xc2>
 80069d0:	2301      	movs	r3, #1
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	9205      	str	r2, [sp, #20]
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f ae97 	beq.w	800670e <_printf_float+0xc2>
 80069e0:	9a05      	ldr	r2, [sp, #20]
 80069e2:	f10b 0b01 	add.w	fp, fp, #1
 80069e6:	e7b9      	b.n	800695c <_printf_float+0x310>
 80069e8:	ee18 3a10 	vmov	r3, s16
 80069ec:	4652      	mov	r2, sl
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	d1be      	bne.n	8006976 <_printf_float+0x32a>
 80069f8:	e689      	b.n	800670e <_printf_float+0xc2>
 80069fa:	9a05      	ldr	r2, [sp, #20]
 80069fc:	464b      	mov	r3, r9
 80069fe:	4442      	add	r2, r8
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	d1c1      	bne.n	800698e <_printf_float+0x342>
 8006a0a:	e680      	b.n	800670e <_printf_float+0xc2>
 8006a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a0e:	2a01      	cmp	r2, #1
 8006a10:	dc01      	bgt.n	8006a16 <_printf_float+0x3ca>
 8006a12:	07db      	lsls	r3, r3, #31
 8006a14:	d538      	bpl.n	8006a88 <_printf_float+0x43c>
 8006a16:	2301      	movs	r3, #1
 8006a18:	4642      	mov	r2, r8
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	f43f ae74 	beq.w	800670e <_printf_float+0xc2>
 8006a26:	ee18 3a10 	vmov	r3, s16
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f ae6b 	beq.w	800670e <_printf_float+0xc2>
 8006a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f7fa f852 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a44:	b9d8      	cbnz	r0, 8006a7e <_printf_float+0x432>
 8006a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a48:	f108 0201 	add.w	r2, r8, #1
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	d10e      	bne.n	8006a76 <_printf_float+0x42a>
 8006a58:	e659      	b.n	800670e <_printf_float+0xc2>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae52 	beq.w	800670e <_printf_float+0xc2>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4543      	cmp	r3, r8
 8006a74:	dcf1      	bgt.n	8006a5a <_printf_float+0x40e>
 8006a76:	464b      	mov	r3, r9
 8006a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a7c:	e6dc      	b.n	8006838 <_printf_float+0x1ec>
 8006a7e:	f04f 0800 	mov.w	r8, #0
 8006a82:	f104 0a1a 	add.w	sl, r4, #26
 8006a86:	e7f2      	b.n	8006a6e <_printf_float+0x422>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	e7df      	b.n	8006a4e <_printf_float+0x402>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	464a      	mov	r2, r9
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f43f ae38 	beq.w	800670e <_printf_float+0xc2>
 8006a9e:	f108 0801 	add.w	r8, r8, #1
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aa6:	1a5b      	subs	r3, r3, r1
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	dcf0      	bgt.n	8006a8e <_printf_float+0x442>
 8006aac:	e6fa      	b.n	80068a4 <_printf_float+0x258>
 8006aae:	f04f 0800 	mov.w	r8, #0
 8006ab2:	f104 0919 	add.w	r9, r4, #25
 8006ab6:	e7f4      	b.n	8006aa2 <_printf_float+0x456>

08006ab8 <_printf_common>:
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	4616      	mov	r6, r2
 8006abe:	4699      	mov	r9, r3
 8006ac0:	688a      	ldr	r2, [r1, #8]
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	bfb8      	it	lt
 8006acc:	4613      	movlt	r3, r2
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	b10a      	cbz	r2, 8006ade <_printf_common+0x26>
 8006ada:	3301      	adds	r3, #1
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	0699      	lsls	r1, r3, #26
 8006ae2:	bf42      	ittt	mi
 8006ae4:	6833      	ldrmi	r3, [r6, #0]
 8006ae6:	3302      	addmi	r3, #2
 8006ae8:	6033      	strmi	r3, [r6, #0]
 8006aea:	6825      	ldr	r5, [r4, #0]
 8006aec:	f015 0506 	ands.w	r5, r5, #6
 8006af0:	d106      	bne.n	8006b00 <_printf_common+0x48>
 8006af2:	f104 0a19 	add.w	sl, r4, #25
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	6832      	ldr	r2, [r6, #0]
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	42ab      	cmp	r3, r5
 8006afe:	dc26      	bgt.n	8006b4e <_printf_common+0x96>
 8006b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b04:	1e13      	subs	r3, r2, #0
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	bf18      	it	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	0692      	lsls	r2, r2, #26
 8006b0e:	d42b      	bmi.n	8006b68 <_printf_common+0xb0>
 8006b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b14:	4649      	mov	r1, r9
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d01e      	beq.n	8006b5c <_printf_common+0xa4>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	68e5      	ldr	r5, [r4, #12]
 8006b22:	6832      	ldr	r2, [r6, #0]
 8006b24:	f003 0306 	and.w	r3, r3, #6
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	bf08      	it	eq
 8006b2c:	1aad      	subeq	r5, r5, r2
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	6922      	ldr	r2, [r4, #16]
 8006b32:	bf0c      	ite	eq
 8006b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b38:	2500      	movne	r5, #0
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bfc4      	itt	gt
 8006b3e:	1a9b      	subgt	r3, r3, r2
 8006b40:	18ed      	addgt	r5, r5, r3
 8006b42:	2600      	movs	r6, #0
 8006b44:	341a      	adds	r4, #26
 8006b46:	42b5      	cmp	r5, r6
 8006b48:	d11a      	bne.n	8006b80 <_printf_common+0xc8>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e008      	b.n	8006b60 <_printf_common+0xa8>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4652      	mov	r2, sl
 8006b52:	4649      	mov	r1, r9
 8006b54:	4638      	mov	r0, r7
 8006b56:	47c0      	blx	r8
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d103      	bne.n	8006b64 <_printf_common+0xac>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	3501      	adds	r5, #1
 8006b66:	e7c6      	b.n	8006af6 <_printf_common+0x3e>
 8006b68:	18e1      	adds	r1, r4, r3
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	2030      	movs	r0, #48	; 0x30
 8006b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b72:	4422      	add	r2, r4
 8006b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	e7c7      	b.n	8006b10 <_printf_common+0x58>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4622      	mov	r2, r4
 8006b84:	4649      	mov	r1, r9
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d0e6      	beq.n	8006b5c <_printf_common+0xa4>
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7d9      	b.n	8006b46 <_printf_common+0x8e>
	...

08006b94 <_printf_i>:
 8006b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	4691      	mov	r9, r2
 8006b9c:	7e27      	ldrb	r7, [r4, #24]
 8006b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ba0:	2f78      	cmp	r7, #120	; 0x78
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	469a      	mov	sl, r3
 8006ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006baa:	d807      	bhi.n	8006bbc <_printf_i+0x28>
 8006bac:	2f62      	cmp	r7, #98	; 0x62
 8006bae:	d80a      	bhi.n	8006bc6 <_printf_i+0x32>
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	f000 80d8 	beq.w	8006d66 <_printf_i+0x1d2>
 8006bb6:	2f58      	cmp	r7, #88	; 0x58
 8006bb8:	f000 80a3 	beq.w	8006d02 <_printf_i+0x16e>
 8006bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc4:	e03a      	b.n	8006c3c <_printf_i+0xa8>
 8006bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bca:	2b15      	cmp	r3, #21
 8006bcc:	d8f6      	bhi.n	8006bbc <_printf_i+0x28>
 8006bce:	a001      	add	r0, pc, #4	; (adr r0, 8006bd4 <_printf_i+0x40>)
 8006bd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006bbd 	.word	0x08006bbd
 8006be0:	08006bbd 	.word	0x08006bbd
 8006be4:	08006bbd 	.word	0x08006bbd
 8006be8:	08006bbd 	.word	0x08006bbd
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006bbd 	.word	0x08006bbd
 8006bf4:	08006bbd 	.word	0x08006bbd
 8006bf8:	08006bbd 	.word	0x08006bbd
 8006bfc:	08006bbd 	.word	0x08006bbd
 8006c00:	08006d4d 	.word	0x08006d4d
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006d2f 	.word	0x08006d2f
 8006c0c:	08006bbd 	.word	0x08006bbd
 8006c10:	08006bbd 	.word	0x08006bbd
 8006c14:	08006d6f 	.word	0x08006d6f
 8006c18:	08006bbd 	.word	0x08006bbd
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006bbd 	.word	0x08006bbd
 8006c24:	08006bbd 	.word	0x08006bbd
 8006c28:	08006d37 	.word	0x08006d37
 8006c2c:	680b      	ldr	r3, [r1, #0]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	600a      	str	r2, [r1, #0]
 8006c34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e0a3      	b.n	8006d88 <_printf_i+0x1f4>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	6808      	ldr	r0, [r1, #0]
 8006c44:	062e      	lsls	r6, r5, #24
 8006c46:	f100 0304 	add.w	r3, r0, #4
 8006c4a:	d50a      	bpl.n	8006c62 <_printf_i+0xce>
 8006c4c:	6805      	ldr	r5, [r0, #0]
 8006c4e:	600b      	str	r3, [r1, #0]
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	da03      	bge.n	8006c5c <_printf_i+0xc8>
 8006c54:	232d      	movs	r3, #45	; 0x2d
 8006c56:	426d      	negs	r5, r5
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5c:	485e      	ldr	r0, [pc, #376]	; (8006dd8 <_printf_i+0x244>)
 8006c5e:	230a      	movs	r3, #10
 8006c60:	e019      	b.n	8006c96 <_printf_i+0x102>
 8006c62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c66:	6805      	ldr	r5, [r0, #0]
 8006c68:	600b      	str	r3, [r1, #0]
 8006c6a:	bf18      	it	ne
 8006c6c:	b22d      	sxthne	r5, r5
 8006c6e:	e7ef      	b.n	8006c50 <_printf_i+0xbc>
 8006c70:	680b      	ldr	r3, [r1, #0]
 8006c72:	6825      	ldr	r5, [r4, #0]
 8006c74:	1d18      	adds	r0, r3, #4
 8006c76:	6008      	str	r0, [r1, #0]
 8006c78:	0628      	lsls	r0, r5, #24
 8006c7a:	d501      	bpl.n	8006c80 <_printf_i+0xec>
 8006c7c:	681d      	ldr	r5, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <_printf_i+0xf2>
 8006c80:	0669      	lsls	r1, r5, #25
 8006c82:	d5fb      	bpl.n	8006c7c <_printf_i+0xe8>
 8006c84:	881d      	ldrh	r5, [r3, #0]
 8006c86:	4854      	ldr	r0, [pc, #336]	; (8006dd8 <_printf_i+0x244>)
 8006c88:	2f6f      	cmp	r7, #111	; 0x6f
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2308      	moveq	r3, #8
 8006c8e:	230a      	movne	r3, #10
 8006c90:	2100      	movs	r1, #0
 8006c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c96:	6866      	ldr	r6, [r4, #4]
 8006c98:	60a6      	str	r6, [r4, #8]
 8006c9a:	2e00      	cmp	r6, #0
 8006c9c:	bfa2      	ittt	ge
 8006c9e:	6821      	ldrge	r1, [r4, #0]
 8006ca0:	f021 0104 	bicge.w	r1, r1, #4
 8006ca4:	6021      	strge	r1, [r4, #0]
 8006ca6:	b90d      	cbnz	r5, 8006cac <_printf_i+0x118>
 8006ca8:	2e00      	cmp	r6, #0
 8006caa:	d04d      	beq.n	8006d48 <_printf_i+0x1b4>
 8006cac:	4616      	mov	r6, r2
 8006cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8006cb6:	5dc7      	ldrb	r7, [r0, r7]
 8006cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cbc:	462f      	mov	r7, r5
 8006cbe:	42bb      	cmp	r3, r7
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	d9f4      	bls.n	8006cae <_printf_i+0x11a>
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d10b      	bne.n	8006ce0 <_printf_i+0x14c>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	07df      	lsls	r7, r3, #31
 8006ccc:	d508      	bpl.n	8006ce0 <_printf_i+0x14c>
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	6861      	ldr	r1, [r4, #4]
 8006cd2:	4299      	cmp	r1, r3
 8006cd4:	bfde      	ittt	le
 8006cd6:	2330      	movle	r3, #48	; 0x30
 8006cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cdc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006ce0:	1b92      	subs	r2, r2, r6
 8006ce2:	6122      	str	r2, [r4, #16]
 8006ce4:	f8cd a000 	str.w	sl, [sp]
 8006ce8:	464b      	mov	r3, r9
 8006cea:	aa03      	add	r2, sp, #12
 8006cec:	4621      	mov	r1, r4
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f7ff fee2 	bl	8006ab8 <_printf_common>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d14c      	bne.n	8006d92 <_printf_i+0x1fe>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cfc:	b004      	add	sp, #16
 8006cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d02:	4835      	ldr	r0, [pc, #212]	; (8006dd8 <_printf_i+0x244>)
 8006d04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	680e      	ldr	r6, [r1, #0]
 8006d0c:	061f      	lsls	r7, r3, #24
 8006d0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d12:	600e      	str	r6, [r1, #0]
 8006d14:	d514      	bpl.n	8006d40 <_printf_i+0x1ac>
 8006d16:	07d9      	lsls	r1, r3, #31
 8006d18:	bf44      	itt	mi
 8006d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1e:	6023      	strmi	r3, [r4, #0]
 8006d20:	b91d      	cbnz	r5, 8006d2a <_printf_i+0x196>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f023 0320 	bic.w	r3, r3, #32
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	2310      	movs	r3, #16
 8006d2c:	e7b0      	b.n	8006c90 <_printf_i+0xfc>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f043 0320 	orr.w	r3, r3, #32
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	2378      	movs	r3, #120	; 0x78
 8006d38:	4828      	ldr	r0, [pc, #160]	; (8006ddc <_printf_i+0x248>)
 8006d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d3e:	e7e3      	b.n	8006d08 <_printf_i+0x174>
 8006d40:	065e      	lsls	r6, r3, #25
 8006d42:	bf48      	it	mi
 8006d44:	b2ad      	uxthmi	r5, r5
 8006d46:	e7e6      	b.n	8006d16 <_printf_i+0x182>
 8006d48:	4616      	mov	r6, r2
 8006d4a:	e7bb      	b.n	8006cc4 <_printf_i+0x130>
 8006d4c:	680b      	ldr	r3, [r1, #0]
 8006d4e:	6826      	ldr	r6, [r4, #0]
 8006d50:	6960      	ldr	r0, [r4, #20]
 8006d52:	1d1d      	adds	r5, r3, #4
 8006d54:	600d      	str	r5, [r1, #0]
 8006d56:	0635      	lsls	r5, r6, #24
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	d501      	bpl.n	8006d60 <_printf_i+0x1cc>
 8006d5c:	6018      	str	r0, [r3, #0]
 8006d5e:	e002      	b.n	8006d66 <_printf_i+0x1d2>
 8006d60:	0671      	lsls	r1, r6, #25
 8006d62:	d5fb      	bpl.n	8006d5c <_printf_i+0x1c8>
 8006d64:	8018      	strh	r0, [r3, #0]
 8006d66:	2300      	movs	r3, #0
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	4616      	mov	r6, r2
 8006d6c:	e7ba      	b.n	8006ce4 <_printf_i+0x150>
 8006d6e:	680b      	ldr	r3, [r1, #0]
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	600a      	str	r2, [r1, #0]
 8006d74:	681e      	ldr	r6, [r3, #0]
 8006d76:	6862      	ldr	r2, [r4, #4]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7f9 fa40 	bl	8000200 <memchr>
 8006d80:	b108      	cbz	r0, 8006d86 <_printf_i+0x1f2>
 8006d82:	1b80      	subs	r0, r0, r6
 8006d84:	6060      	str	r0, [r4, #4]
 8006d86:	6863      	ldr	r3, [r4, #4]
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d90:	e7a8      	b.n	8006ce4 <_printf_i+0x150>
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	4632      	mov	r2, r6
 8006d96:	4649      	mov	r1, r9
 8006d98:	4640      	mov	r0, r8
 8006d9a:	47d0      	blx	sl
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d0ab      	beq.n	8006cf8 <_printf_i+0x164>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	079b      	lsls	r3, r3, #30
 8006da4:	d413      	bmi.n	8006dce <_printf_i+0x23a>
 8006da6:	68e0      	ldr	r0, [r4, #12]
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	4298      	cmp	r0, r3
 8006dac:	bfb8      	it	lt
 8006dae:	4618      	movlt	r0, r3
 8006db0:	e7a4      	b.n	8006cfc <_printf_i+0x168>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4632      	mov	r2, r6
 8006db6:	4649      	mov	r1, r9
 8006db8:	4640      	mov	r0, r8
 8006dba:	47d0      	blx	sl
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d09b      	beq.n	8006cf8 <_printf_i+0x164>
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	9903      	ldr	r1, [sp, #12]
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	dcf2      	bgt.n	8006db2 <_printf_i+0x21e>
 8006dcc:	e7eb      	b.n	8006da6 <_printf_i+0x212>
 8006dce:	2500      	movs	r5, #0
 8006dd0:	f104 0619 	add.w	r6, r4, #25
 8006dd4:	e7f5      	b.n	8006dc2 <_printf_i+0x22e>
 8006dd6:	bf00      	nop
 8006dd8:	0800b0ca 	.word	0x0800b0ca
 8006ddc:	0800b0db 	.word	0x0800b0db

08006de0 <_scanf_float>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	b087      	sub	sp, #28
 8006de6:	4617      	mov	r7, r2
 8006de8:	9303      	str	r3, [sp, #12]
 8006dea:	688b      	ldr	r3, [r1, #8]
 8006dec:	1e5a      	subs	r2, r3, #1
 8006dee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006df2:	bf83      	ittte	hi
 8006df4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006df8:	195b      	addhi	r3, r3, r5
 8006dfa:	9302      	strhi	r3, [sp, #8]
 8006dfc:	2300      	movls	r3, #0
 8006dfe:	bf86      	itte	hi
 8006e00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e04:	608b      	strhi	r3, [r1, #8]
 8006e06:	9302      	strls	r3, [sp, #8]
 8006e08:	680b      	ldr	r3, [r1, #0]
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e12:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	465e      	mov	r6, fp
 8006e20:	46aa      	mov	sl, r5
 8006e22:	46a9      	mov	r9, r5
 8006e24:	9501      	str	r5, [sp, #4]
 8006e26:	68a2      	ldr	r2, [r4, #8]
 8006e28:	b152      	cbz	r2, 8006e40 <_scanf_float+0x60>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b4e      	cmp	r3, #78	; 0x4e
 8006e30:	d864      	bhi.n	8006efc <_scanf_float+0x11c>
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d83c      	bhi.n	8006eb0 <_scanf_float+0xd0>
 8006e36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e3a:	b2c8      	uxtb	r0, r1
 8006e3c:	280e      	cmp	r0, #14
 8006e3e:	d93a      	bls.n	8006eb6 <_scanf_float+0xd6>
 8006e40:	f1b9 0f00 	cmp.w	r9, #0
 8006e44:	d003      	beq.n	8006e4e <_scanf_float+0x6e>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e52:	f1ba 0f01 	cmp.w	sl, #1
 8006e56:	f200 8113 	bhi.w	8007080 <_scanf_float+0x2a0>
 8006e5a:	455e      	cmp	r6, fp
 8006e5c:	f200 8105 	bhi.w	800706a <_scanf_float+0x28a>
 8006e60:	2501      	movs	r5, #1
 8006e62:	4628      	mov	r0, r5
 8006e64:	b007      	add	sp, #28
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e6e:	2a0d      	cmp	r2, #13
 8006e70:	d8e6      	bhi.n	8006e40 <_scanf_float+0x60>
 8006e72:	a101      	add	r1, pc, #4	; (adr r1, 8006e78 <_scanf_float+0x98>)
 8006e74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e78:	08006fb7 	.word	0x08006fb7
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006e41 	.word	0x08006e41
 8006e88:	08007017 	.word	0x08007017
 8006e8c:	08006fef 	.word	0x08006fef
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006fc5 	.word	0x08006fc5
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006e41 	.word	0x08006e41
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006f7d 	.word	0x08006f7d
 8006eb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006eb4:	e7db      	b.n	8006e6e <_scanf_float+0x8e>
 8006eb6:	290e      	cmp	r1, #14
 8006eb8:	d8c2      	bhi.n	8006e40 <_scanf_float+0x60>
 8006eba:	a001      	add	r0, pc, #4	; (adr r0, 8006ec0 <_scanf_float+0xe0>)
 8006ebc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ec0:	08006f6f 	.word	0x08006f6f
 8006ec4:	08006e41 	.word	0x08006e41
 8006ec8:	08006f6f 	.word	0x08006f6f
 8006ecc:	08007003 	.word	0x08007003
 8006ed0:	08006e41 	.word	0x08006e41
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f59 	.word	0x08006f59
 8006edc:	08006f59 	.word	0x08006f59
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f59 	.word	0x08006f59
 8006ee8:	08006f59 	.word	0x08006f59
 8006eec:	08006f59 	.word	0x08006f59
 8006ef0:	08006f59 	.word	0x08006f59
 8006ef4:	08006f59 	.word	0x08006f59
 8006ef8:	08006f59 	.word	0x08006f59
 8006efc:	2b6e      	cmp	r3, #110	; 0x6e
 8006efe:	d809      	bhi.n	8006f14 <_scanf_float+0x134>
 8006f00:	2b60      	cmp	r3, #96	; 0x60
 8006f02:	d8b2      	bhi.n	8006e6a <_scanf_float+0x8a>
 8006f04:	2b54      	cmp	r3, #84	; 0x54
 8006f06:	d077      	beq.n	8006ff8 <_scanf_float+0x218>
 8006f08:	2b59      	cmp	r3, #89	; 0x59
 8006f0a:	d199      	bne.n	8006e40 <_scanf_float+0x60>
 8006f0c:	2d07      	cmp	r5, #7
 8006f0e:	d197      	bne.n	8006e40 <_scanf_float+0x60>
 8006f10:	2508      	movs	r5, #8
 8006f12:	e029      	b.n	8006f68 <_scanf_float+0x188>
 8006f14:	2b74      	cmp	r3, #116	; 0x74
 8006f16:	d06f      	beq.n	8006ff8 <_scanf_float+0x218>
 8006f18:	2b79      	cmp	r3, #121	; 0x79
 8006f1a:	e7f6      	b.n	8006f0a <_scanf_float+0x12a>
 8006f1c:	6821      	ldr	r1, [r4, #0]
 8006f1e:	05c8      	lsls	r0, r1, #23
 8006f20:	d51a      	bpl.n	8006f58 <_scanf_float+0x178>
 8006f22:	9b02      	ldr	r3, [sp, #8]
 8006f24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f28:	6021      	str	r1, [r4, #0]
 8006f2a:	f109 0901 	add.w	r9, r9, #1
 8006f2e:	b11b      	cbz	r3, 8006f38 <_scanf_float+0x158>
 8006f30:	3b01      	subs	r3, #1
 8006f32:	3201      	adds	r2, #1
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	60a2      	str	r2, [r4, #8]
 8006f38:	68a3      	ldr	r3, [r4, #8]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	607b      	str	r3, [r7, #4]
 8006f4c:	f340 8084 	ble.w	8007058 <_scanf_float+0x278>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	e766      	b.n	8006e26 <_scanf_float+0x46>
 8006f58:	eb1a 0f05 	cmn.w	sl, r5
 8006f5c:	f47f af70 	bne.w	8006e40 <_scanf_float+0x60>
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f66:	6022      	str	r2, [r4, #0]
 8006f68:	f806 3b01 	strb.w	r3, [r6], #1
 8006f6c:	e7e4      	b.n	8006f38 <_scanf_float+0x158>
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	0610      	lsls	r0, r2, #24
 8006f72:	f57f af65 	bpl.w	8006e40 <_scanf_float+0x60>
 8006f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f7a:	e7f4      	b.n	8006f66 <_scanf_float+0x186>
 8006f7c:	f1ba 0f00 	cmp.w	sl, #0
 8006f80:	d10e      	bne.n	8006fa0 <_scanf_float+0x1c0>
 8006f82:	f1b9 0f00 	cmp.w	r9, #0
 8006f86:	d10e      	bne.n	8006fa6 <_scanf_float+0x1c6>
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f92:	d108      	bne.n	8006fa6 <_scanf_float+0x1c6>
 8006f94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f98:	6022      	str	r2, [r4, #0]
 8006f9a:	f04f 0a01 	mov.w	sl, #1
 8006f9e:	e7e3      	b.n	8006f68 <_scanf_float+0x188>
 8006fa0:	f1ba 0f02 	cmp.w	sl, #2
 8006fa4:	d055      	beq.n	8007052 <_scanf_float+0x272>
 8006fa6:	2d01      	cmp	r5, #1
 8006fa8:	d002      	beq.n	8006fb0 <_scanf_float+0x1d0>
 8006faa:	2d04      	cmp	r5, #4
 8006fac:	f47f af48 	bne.w	8006e40 <_scanf_float+0x60>
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	b2ed      	uxtb	r5, r5
 8006fb4:	e7d8      	b.n	8006f68 <_scanf_float+0x188>
 8006fb6:	f1ba 0f01 	cmp.w	sl, #1
 8006fba:	f47f af41 	bne.w	8006e40 <_scanf_float+0x60>
 8006fbe:	f04f 0a02 	mov.w	sl, #2
 8006fc2:	e7d1      	b.n	8006f68 <_scanf_float+0x188>
 8006fc4:	b97d      	cbnz	r5, 8006fe6 <_scanf_float+0x206>
 8006fc6:	f1b9 0f00 	cmp.w	r9, #0
 8006fca:	f47f af3c 	bne.w	8006e46 <_scanf_float+0x66>
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fd8:	f47f af39 	bne.w	8006e4e <_scanf_float+0x6e>
 8006fdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	2501      	movs	r5, #1
 8006fe4:	e7c0      	b.n	8006f68 <_scanf_float+0x188>
 8006fe6:	2d03      	cmp	r5, #3
 8006fe8:	d0e2      	beq.n	8006fb0 <_scanf_float+0x1d0>
 8006fea:	2d05      	cmp	r5, #5
 8006fec:	e7de      	b.n	8006fac <_scanf_float+0x1cc>
 8006fee:	2d02      	cmp	r5, #2
 8006ff0:	f47f af26 	bne.w	8006e40 <_scanf_float+0x60>
 8006ff4:	2503      	movs	r5, #3
 8006ff6:	e7b7      	b.n	8006f68 <_scanf_float+0x188>
 8006ff8:	2d06      	cmp	r5, #6
 8006ffa:	f47f af21 	bne.w	8006e40 <_scanf_float+0x60>
 8006ffe:	2507      	movs	r5, #7
 8007000:	e7b2      	b.n	8006f68 <_scanf_float+0x188>
 8007002:	6822      	ldr	r2, [r4, #0]
 8007004:	0591      	lsls	r1, r2, #22
 8007006:	f57f af1b 	bpl.w	8006e40 <_scanf_float+0x60>
 800700a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800700e:	6022      	str	r2, [r4, #0]
 8007010:	f8cd 9004 	str.w	r9, [sp, #4]
 8007014:	e7a8      	b.n	8006f68 <_scanf_float+0x188>
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800701c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007020:	d006      	beq.n	8007030 <_scanf_float+0x250>
 8007022:	0550      	lsls	r0, r2, #21
 8007024:	f57f af0c 	bpl.w	8006e40 <_scanf_float+0x60>
 8007028:	f1b9 0f00 	cmp.w	r9, #0
 800702c:	f43f af0f 	beq.w	8006e4e <_scanf_float+0x6e>
 8007030:	0591      	lsls	r1, r2, #22
 8007032:	bf58      	it	pl
 8007034:	9901      	ldrpl	r1, [sp, #4]
 8007036:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800703a:	bf58      	it	pl
 800703c:	eba9 0101 	subpl.w	r1, r9, r1
 8007040:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007044:	bf58      	it	pl
 8007046:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800704a:	6022      	str	r2, [r4, #0]
 800704c:	f04f 0900 	mov.w	r9, #0
 8007050:	e78a      	b.n	8006f68 <_scanf_float+0x188>
 8007052:	f04f 0a03 	mov.w	sl, #3
 8007056:	e787      	b.n	8006f68 <_scanf_float+0x188>
 8007058:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800705c:	4639      	mov	r1, r7
 800705e:	4640      	mov	r0, r8
 8007060:	4798      	blx	r3
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f aedf 	beq.w	8006e26 <_scanf_float+0x46>
 8007068:	e6ea      	b.n	8006e40 <_scanf_float+0x60>
 800706a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800706e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007072:	463a      	mov	r2, r7
 8007074:	4640      	mov	r0, r8
 8007076:	4798      	blx	r3
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	3b01      	subs	r3, #1
 800707c:	6123      	str	r3, [r4, #16]
 800707e:	e6ec      	b.n	8006e5a <_scanf_float+0x7a>
 8007080:	1e6b      	subs	r3, r5, #1
 8007082:	2b06      	cmp	r3, #6
 8007084:	d825      	bhi.n	80070d2 <_scanf_float+0x2f2>
 8007086:	2d02      	cmp	r5, #2
 8007088:	d836      	bhi.n	80070f8 <_scanf_float+0x318>
 800708a:	455e      	cmp	r6, fp
 800708c:	f67f aee8 	bls.w	8006e60 <_scanf_float+0x80>
 8007090:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007094:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007098:	463a      	mov	r2, r7
 800709a:	4640      	mov	r0, r8
 800709c:	4798      	blx	r3
 800709e:	6923      	ldr	r3, [r4, #16]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	e7f1      	b.n	800708a <_scanf_float+0x2aa>
 80070a6:	9802      	ldr	r0, [sp, #8]
 80070a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070b0:	9002      	str	r0, [sp, #8]
 80070b2:	463a      	mov	r2, r7
 80070b4:	4640      	mov	r0, r8
 80070b6:	4798      	blx	r3
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070c2:	fa5f fa8a 	uxtb.w	sl, sl
 80070c6:	f1ba 0f02 	cmp.w	sl, #2
 80070ca:	d1ec      	bne.n	80070a6 <_scanf_float+0x2c6>
 80070cc:	3d03      	subs	r5, #3
 80070ce:	b2ed      	uxtb	r5, r5
 80070d0:	1b76      	subs	r6, r6, r5
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	05da      	lsls	r2, r3, #23
 80070d6:	d52f      	bpl.n	8007138 <_scanf_float+0x358>
 80070d8:	055b      	lsls	r3, r3, #21
 80070da:	d510      	bpl.n	80070fe <_scanf_float+0x31e>
 80070dc:	455e      	cmp	r6, fp
 80070de:	f67f aebf 	bls.w	8006e60 <_scanf_float+0x80>
 80070e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ea:	463a      	mov	r2, r7
 80070ec:	4640      	mov	r0, r8
 80070ee:	4798      	blx	r3
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	e7f1      	b.n	80070dc <_scanf_float+0x2fc>
 80070f8:	46aa      	mov	sl, r5
 80070fa:	9602      	str	r6, [sp, #8]
 80070fc:	e7df      	b.n	80070be <_scanf_float+0x2de>
 80070fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	2965      	cmp	r1, #101	; 0x65
 8007106:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800710a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	d00c      	beq.n	800712c <_scanf_float+0x34c>
 8007112:	2945      	cmp	r1, #69	; 0x45
 8007114:	d00a      	beq.n	800712c <_scanf_float+0x34c>
 8007116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800711a:	463a      	mov	r2, r7
 800711c:	4640      	mov	r0, r8
 800711e:	4798      	blx	r3
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007126:	3b01      	subs	r3, #1
 8007128:	1eb5      	subs	r5, r6, #2
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007130:	463a      	mov	r2, r7
 8007132:	4640      	mov	r0, r8
 8007134:	4798      	blx	r3
 8007136:	462e      	mov	r6, r5
 8007138:	6825      	ldr	r5, [r4, #0]
 800713a:	f015 0510 	ands.w	r5, r5, #16
 800713e:	d158      	bne.n	80071f2 <_scanf_float+0x412>
 8007140:	7035      	strb	r5, [r6, #0]
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714c:	d11c      	bne.n	8007188 <_scanf_float+0x3a8>
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	454b      	cmp	r3, r9
 8007152:	eba3 0209 	sub.w	r2, r3, r9
 8007156:	d124      	bne.n	80071a2 <_scanf_float+0x3c2>
 8007158:	2200      	movs	r2, #0
 800715a:	4659      	mov	r1, fp
 800715c:	4640      	mov	r0, r8
 800715e:	f000 ff29 	bl	8007fb4 <_strtod_r>
 8007162:	9b03      	ldr	r3, [sp, #12]
 8007164:	6821      	ldr	r1, [r4, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f011 0f02 	tst.w	r1, #2
 800716c:	ec57 6b10 	vmov	r6, r7, d0
 8007170:	f103 0204 	add.w	r2, r3, #4
 8007174:	d020      	beq.n	80071b8 <_scanf_float+0x3d8>
 8007176:	9903      	ldr	r1, [sp, #12]
 8007178:	600a      	str	r2, [r1, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	e9c3 6700 	strd	r6, r7, [r3]
 8007180:	68e3      	ldr	r3, [r4, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	60e3      	str	r3, [r4, #12]
 8007186:	e66c      	b.n	8006e62 <_scanf_float+0x82>
 8007188:	9b04      	ldr	r3, [sp, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0e4      	beq.n	8007158 <_scanf_float+0x378>
 800718e:	9905      	ldr	r1, [sp, #20]
 8007190:	230a      	movs	r3, #10
 8007192:	462a      	mov	r2, r5
 8007194:	3101      	adds	r1, #1
 8007196:	4640      	mov	r0, r8
 8007198:	f000 ff96 	bl	80080c8 <_strtol_r>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	9e05      	ldr	r6, [sp, #20]
 80071a0:	1ac2      	subs	r2, r0, r3
 80071a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071a6:	429e      	cmp	r6, r3
 80071a8:	bf28      	it	cs
 80071aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071ae:	4912      	ldr	r1, [pc, #72]	; (80071f8 <_scanf_float+0x418>)
 80071b0:	4630      	mov	r0, r6
 80071b2:	f000 f8b9 	bl	8007328 <siprintf>
 80071b6:	e7cf      	b.n	8007158 <_scanf_float+0x378>
 80071b8:	f011 0f04 	tst.w	r1, #4
 80071bc:	9903      	ldr	r1, [sp, #12]
 80071be:	600a      	str	r2, [r1, #0]
 80071c0:	d1db      	bne.n	800717a <_scanf_float+0x39a>
 80071c2:	f8d3 8000 	ldr.w	r8, [r3]
 80071c6:	ee10 2a10 	vmov	r2, s0
 80071ca:	ee10 0a10 	vmov	r0, s0
 80071ce:	463b      	mov	r3, r7
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fcbb 	bl	8000b4c <__aeabi_dcmpun>
 80071d6:	b128      	cbz	r0, 80071e4 <_scanf_float+0x404>
 80071d8:	4808      	ldr	r0, [pc, #32]	; (80071fc <_scanf_float+0x41c>)
 80071da:	f000 f89f 	bl	800731c <nanf>
 80071de:	ed88 0a00 	vstr	s0, [r8]
 80071e2:	e7cd      	b.n	8007180 <_scanf_float+0x3a0>
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 fd0e 	bl	8000c08 <__aeabi_d2f>
 80071ec:	f8c8 0000 	str.w	r0, [r8]
 80071f0:	e7c6      	b.n	8007180 <_scanf_float+0x3a0>
 80071f2:	2500      	movs	r5, #0
 80071f4:	e635      	b.n	8006e62 <_scanf_float+0x82>
 80071f6:	bf00      	nop
 80071f8:	0800b0ec 	.word	0x0800b0ec
 80071fc:	0800b568 	.word	0x0800b568

08007200 <iprintf>:
 8007200:	b40f      	push	{r0, r1, r2, r3}
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <iprintf+0x2c>)
 8007204:	b513      	push	{r0, r1, r4, lr}
 8007206:	681c      	ldr	r4, [r3, #0]
 8007208:	b124      	cbz	r4, 8007214 <iprintf+0x14>
 800720a:	69a3      	ldr	r3, [r4, #24]
 800720c:	b913      	cbnz	r3, 8007214 <iprintf+0x14>
 800720e:	4620      	mov	r0, r4
 8007210:	f001 ffb0 	bl	8009174 <__sinit>
 8007214:	ab05      	add	r3, sp, #20
 8007216:	9a04      	ldr	r2, [sp, #16]
 8007218:	68a1      	ldr	r1, [r4, #8]
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	4620      	mov	r0, r4
 800721e:	f003 fb43 	bl	800a8a8 <_vfiprintf_r>
 8007222:	b002      	add	sp, #8
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr
 800722c:	20000010 	.word	0x20000010

08007230 <_puts_r>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	460e      	mov	r6, r1
 8007234:	4605      	mov	r5, r0
 8007236:	b118      	cbz	r0, 8007240 <_puts_r+0x10>
 8007238:	6983      	ldr	r3, [r0, #24]
 800723a:	b90b      	cbnz	r3, 8007240 <_puts_r+0x10>
 800723c:	f001 ff9a 	bl	8009174 <__sinit>
 8007240:	69ab      	ldr	r3, [r5, #24]
 8007242:	68ac      	ldr	r4, [r5, #8]
 8007244:	b913      	cbnz	r3, 800724c <_puts_r+0x1c>
 8007246:	4628      	mov	r0, r5
 8007248:	f001 ff94 	bl	8009174 <__sinit>
 800724c:	4b2c      	ldr	r3, [pc, #176]	; (8007300 <_puts_r+0xd0>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d120      	bne.n	8007294 <_puts_r+0x64>
 8007252:	686c      	ldr	r4, [r5, #4]
 8007254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007256:	07db      	lsls	r3, r3, #31
 8007258:	d405      	bmi.n	8007266 <_puts_r+0x36>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	0598      	lsls	r0, r3, #22
 800725e:	d402      	bmi.n	8007266 <_puts_r+0x36>
 8007260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007262:	f002 fb98 	bl	8009996 <__retarget_lock_acquire_recursive>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d51d      	bpl.n	80072a8 <_puts_r+0x78>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	b1db      	cbz	r3, 80072a8 <_puts_r+0x78>
 8007270:	3e01      	subs	r6, #1
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007278:	3b01      	subs	r3, #1
 800727a:	60a3      	str	r3, [r4, #8]
 800727c:	bb39      	cbnz	r1, 80072ce <_puts_r+0x9e>
 800727e:	2b00      	cmp	r3, #0
 8007280:	da38      	bge.n	80072f4 <_puts_r+0xc4>
 8007282:	4622      	mov	r2, r4
 8007284:	210a      	movs	r1, #10
 8007286:	4628      	mov	r0, r5
 8007288:	f000 ff20 	bl	80080cc <__swbuf_r>
 800728c:	3001      	adds	r0, #1
 800728e:	d011      	beq.n	80072b4 <_puts_r+0x84>
 8007290:	250a      	movs	r5, #10
 8007292:	e011      	b.n	80072b8 <_puts_r+0x88>
 8007294:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <_puts_r+0xd4>)
 8007296:	429c      	cmp	r4, r3
 8007298:	d101      	bne.n	800729e <_puts_r+0x6e>
 800729a:	68ac      	ldr	r4, [r5, #8]
 800729c:	e7da      	b.n	8007254 <_puts_r+0x24>
 800729e:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <_puts_r+0xd8>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	bf08      	it	eq
 80072a4:	68ec      	ldreq	r4, [r5, #12]
 80072a6:	e7d5      	b.n	8007254 <_puts_r+0x24>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 ff60 	bl	8008170 <__swsetup_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0dd      	beq.n	8007270 <_puts_r+0x40>
 80072b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80072b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ba:	07da      	lsls	r2, r3, #31
 80072bc:	d405      	bmi.n	80072ca <_puts_r+0x9a>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	059b      	lsls	r3, r3, #22
 80072c2:	d402      	bmi.n	80072ca <_puts_r+0x9a>
 80072c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072c6:	f002 fb67 	bl	8009998 <__retarget_lock_release_recursive>
 80072ca:	4628      	mov	r0, r5
 80072cc:	bd70      	pop	{r4, r5, r6, pc}
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da04      	bge.n	80072dc <_puts_r+0xac>
 80072d2:	69a2      	ldr	r2, [r4, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	dc06      	bgt.n	80072e6 <_puts_r+0xb6>
 80072d8:	290a      	cmp	r1, #10
 80072da:	d004      	beq.n	80072e6 <_puts_r+0xb6>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	7019      	strb	r1, [r3, #0]
 80072e4:	e7c5      	b.n	8007272 <_puts_r+0x42>
 80072e6:	4622      	mov	r2, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 feef 	bl	80080cc <__swbuf_r>
 80072ee:	3001      	adds	r0, #1
 80072f0:	d1bf      	bne.n	8007272 <_puts_r+0x42>
 80072f2:	e7df      	b.n	80072b4 <_puts_r+0x84>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	250a      	movs	r5, #10
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	6022      	str	r2, [r4, #0]
 80072fc:	701d      	strb	r5, [r3, #0]
 80072fe:	e7db      	b.n	80072b8 <_puts_r+0x88>
 8007300:	0800b300 	.word	0x0800b300
 8007304:	0800b320 	.word	0x0800b320
 8007308:	0800b2e0 	.word	0x0800b2e0

0800730c <puts>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <puts+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f7ff bf8d 	b.w	8007230 <_puts_r>
 8007316:	bf00      	nop
 8007318:	20000010 	.word	0x20000010

0800731c <nanf>:
 800731c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007324 <nanf+0x8>
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	7fc00000 	.word	0x7fc00000

08007328 <siprintf>:
 8007328:	b40e      	push	{r1, r2, r3}
 800732a:	b500      	push	{lr}
 800732c:	b09c      	sub	sp, #112	; 0x70
 800732e:	ab1d      	add	r3, sp, #116	; 0x74
 8007330:	9002      	str	r0, [sp, #8]
 8007332:	9006      	str	r0, [sp, #24]
 8007334:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007338:	4809      	ldr	r0, [pc, #36]	; (8007360 <siprintf+0x38>)
 800733a:	9107      	str	r1, [sp, #28]
 800733c:	9104      	str	r1, [sp, #16]
 800733e:	4909      	ldr	r1, [pc, #36]	; (8007364 <siprintf+0x3c>)
 8007340:	f853 2b04 	ldr.w	r2, [r3], #4
 8007344:	9105      	str	r1, [sp, #20]
 8007346:	6800      	ldr	r0, [r0, #0]
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	a902      	add	r1, sp, #8
 800734c:	f003 f982 	bl	800a654 <_svfiprintf_r>
 8007350:	9b02      	ldr	r3, [sp, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	b01c      	add	sp, #112	; 0x70
 8007358:	f85d eb04 	ldr.w	lr, [sp], #4
 800735c:	b003      	add	sp, #12
 800735e:	4770      	bx	lr
 8007360:	20000010 	.word	0x20000010
 8007364:	ffff0208 	.word	0xffff0208

08007368 <sulp>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4604      	mov	r4, r0
 800736c:	460d      	mov	r5, r1
 800736e:	ec45 4b10 	vmov	d0, r4, r5
 8007372:	4616      	mov	r6, r2
 8007374:	f002 ff0a 	bl	800a18c <__ulp>
 8007378:	ec51 0b10 	vmov	r0, r1, d0
 800737c:	b17e      	cbz	r6, 800739e <sulp+0x36>
 800737e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007386:	2b00      	cmp	r3, #0
 8007388:	dd09      	ble.n	800739e <sulp+0x36>
 800738a:	051b      	lsls	r3, r3, #20
 800738c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007390:	2400      	movs	r4, #0
 8007392:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007396:	4622      	mov	r2, r4
 8007398:	462b      	mov	r3, r5
 800739a:	f7f9 f93d 	bl	8000618 <__aeabi_dmul>
 800739e:	bd70      	pop	{r4, r5, r6, pc}

080073a0 <_strtod_l>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	b0a3      	sub	sp, #140	; 0x8c
 80073a6:	461f      	mov	r7, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	931e      	str	r3, [sp, #120]	; 0x78
 80073ac:	4ba4      	ldr	r3, [pc, #656]	; (8007640 <_strtod_l+0x2a0>)
 80073ae:	9219      	str	r2, [sp, #100]	; 0x64
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	9307      	str	r3, [sp, #28]
 80073b4:	4604      	mov	r4, r0
 80073b6:	4618      	mov	r0, r3
 80073b8:	4688      	mov	r8, r1
 80073ba:	f7f8 ff19 	bl	80001f0 <strlen>
 80073be:	f04f 0a00 	mov.w	sl, #0
 80073c2:	4605      	mov	r5, r0
 80073c4:	f04f 0b00 	mov.w	fp, #0
 80073c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80073cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	2a2b      	cmp	r2, #43	; 0x2b
 80073d2:	d04c      	beq.n	800746e <_strtod_l+0xce>
 80073d4:	d839      	bhi.n	800744a <_strtod_l+0xaa>
 80073d6:	2a0d      	cmp	r2, #13
 80073d8:	d832      	bhi.n	8007440 <_strtod_l+0xa0>
 80073da:	2a08      	cmp	r2, #8
 80073dc:	d832      	bhi.n	8007444 <_strtod_l+0xa4>
 80073de:	2a00      	cmp	r2, #0
 80073e0:	d03c      	beq.n	800745c <_strtod_l+0xbc>
 80073e2:	2300      	movs	r3, #0
 80073e4:	930e      	str	r3, [sp, #56]	; 0x38
 80073e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80073e8:	7833      	ldrb	r3, [r6, #0]
 80073ea:	2b30      	cmp	r3, #48	; 0x30
 80073ec:	f040 80b4 	bne.w	8007558 <_strtod_l+0x1b8>
 80073f0:	7873      	ldrb	r3, [r6, #1]
 80073f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073f6:	2b58      	cmp	r3, #88	; 0x58
 80073f8:	d16c      	bne.n	80074d4 <_strtod_l+0x134>
 80073fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	ab1e      	add	r3, sp, #120	; 0x78
 8007400:	9702      	str	r7, [sp, #8]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4a8f      	ldr	r2, [pc, #572]	; (8007644 <_strtod_l+0x2a4>)
 8007406:	ab1f      	add	r3, sp, #124	; 0x7c
 8007408:	a91d      	add	r1, sp, #116	; 0x74
 800740a:	4620      	mov	r0, r4
 800740c:	f001 ffb6 	bl	800937c <__gethex>
 8007410:	f010 0707 	ands.w	r7, r0, #7
 8007414:	4605      	mov	r5, r0
 8007416:	d005      	beq.n	8007424 <_strtod_l+0x84>
 8007418:	2f06      	cmp	r7, #6
 800741a:	d12a      	bne.n	8007472 <_strtod_l+0xd2>
 800741c:	3601      	adds	r6, #1
 800741e:	2300      	movs	r3, #0
 8007420:	961d      	str	r6, [sp, #116]	; 0x74
 8007422:	930e      	str	r3, [sp, #56]	; 0x38
 8007424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 8596 	bne.w	8007f58 <_strtod_l+0xbb8>
 800742c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742e:	b1db      	cbz	r3, 8007468 <_strtod_l+0xc8>
 8007430:	4652      	mov	r2, sl
 8007432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007436:	ec43 2b10 	vmov	d0, r2, r3
 800743a:	b023      	add	sp, #140	; 0x8c
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	2a20      	cmp	r2, #32
 8007442:	d1ce      	bne.n	80073e2 <_strtod_l+0x42>
 8007444:	3301      	adds	r3, #1
 8007446:	931d      	str	r3, [sp, #116]	; 0x74
 8007448:	e7c0      	b.n	80073cc <_strtod_l+0x2c>
 800744a:	2a2d      	cmp	r2, #45	; 0x2d
 800744c:	d1c9      	bne.n	80073e2 <_strtod_l+0x42>
 800744e:	2201      	movs	r2, #1
 8007450:	920e      	str	r2, [sp, #56]	; 0x38
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	921d      	str	r2, [sp, #116]	; 0x74
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1c4      	bne.n	80073e6 <_strtod_l+0x46>
 800745c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800745e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 8576 	bne.w	8007f54 <_strtod_l+0xbb4>
 8007468:	4652      	mov	r2, sl
 800746a:	465b      	mov	r3, fp
 800746c:	e7e3      	b.n	8007436 <_strtod_l+0x96>
 800746e:	2200      	movs	r2, #0
 8007470:	e7ee      	b.n	8007450 <_strtod_l+0xb0>
 8007472:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007474:	b13a      	cbz	r2, 8007486 <_strtod_l+0xe6>
 8007476:	2135      	movs	r1, #53	; 0x35
 8007478:	a820      	add	r0, sp, #128	; 0x80
 800747a:	f002 ff92 	bl	800a3a2 <__copybits>
 800747e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007480:	4620      	mov	r0, r4
 8007482:	f002 fb57 	bl	8009b34 <_Bfree>
 8007486:	3f01      	subs	r7, #1
 8007488:	2f05      	cmp	r7, #5
 800748a:	d807      	bhi.n	800749c <_strtod_l+0xfc>
 800748c:	e8df f007 	tbb	[pc, r7]
 8007490:	1d180b0e 	.word	0x1d180b0e
 8007494:	030e      	.short	0x030e
 8007496:	f04f 0b00 	mov.w	fp, #0
 800749a:	46da      	mov	sl, fp
 800749c:	0728      	lsls	r0, r5, #28
 800749e:	d5c1      	bpl.n	8007424 <_strtod_l+0x84>
 80074a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80074a4:	e7be      	b.n	8007424 <_strtod_l+0x84>
 80074a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80074aa:	e7f7      	b.n	800749c <_strtod_l+0xfc>
 80074ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80074b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074be:	e7ed      	b.n	800749c <_strtod_l+0xfc>
 80074c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007648 <_strtod_l+0x2a8>
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	e7e8      	b.n	800749c <_strtod_l+0xfc>
 80074ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80074ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80074d2:	e7e3      	b.n	800749c <_strtod_l+0xfc>
 80074d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	921d      	str	r2, [sp, #116]	; 0x74
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d0f9      	beq.n	80074d4 <_strtod_l+0x134>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d09f      	beq.n	8007424 <_strtod_l+0x84>
 80074e4:	2301      	movs	r3, #1
 80074e6:	f04f 0900 	mov.w	r9, #0
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074ee:	930a      	str	r3, [sp, #40]	; 0x28
 80074f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80074f4:	464f      	mov	r7, r9
 80074f6:	220a      	movs	r2, #10
 80074f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80074fa:	7806      	ldrb	r6, [r0, #0]
 80074fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007500:	b2d9      	uxtb	r1, r3
 8007502:	2909      	cmp	r1, #9
 8007504:	d92a      	bls.n	800755c <_strtod_l+0x1bc>
 8007506:	9907      	ldr	r1, [sp, #28]
 8007508:	462a      	mov	r2, r5
 800750a:	f003 fb58 	bl	800abbe <strncmp>
 800750e:	b398      	cbz	r0, 8007578 <_strtod_l+0x1d8>
 8007510:	2000      	movs	r0, #0
 8007512:	4633      	mov	r3, r6
 8007514:	463d      	mov	r5, r7
 8007516:	9007      	str	r0, [sp, #28]
 8007518:	4602      	mov	r2, r0
 800751a:	2b65      	cmp	r3, #101	; 0x65
 800751c:	d001      	beq.n	8007522 <_strtod_l+0x182>
 800751e:	2b45      	cmp	r3, #69	; 0x45
 8007520:	d118      	bne.n	8007554 <_strtod_l+0x1b4>
 8007522:	b91d      	cbnz	r5, 800752c <_strtod_l+0x18c>
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	4303      	orrs	r3, r0
 8007528:	d098      	beq.n	800745c <_strtod_l+0xbc>
 800752a:	2500      	movs	r5, #0
 800752c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007530:	f108 0301 	add.w	r3, r8, #1
 8007534:	931d      	str	r3, [sp, #116]	; 0x74
 8007536:	f898 3001 	ldrb.w	r3, [r8, #1]
 800753a:	2b2b      	cmp	r3, #43	; 0x2b
 800753c:	d075      	beq.n	800762a <_strtod_l+0x28a>
 800753e:	2b2d      	cmp	r3, #45	; 0x2d
 8007540:	d07b      	beq.n	800763a <_strtod_l+0x29a>
 8007542:	f04f 0c00 	mov.w	ip, #0
 8007546:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800754a:	2909      	cmp	r1, #9
 800754c:	f240 8082 	bls.w	8007654 <_strtod_l+0x2b4>
 8007550:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007554:	2600      	movs	r6, #0
 8007556:	e09d      	b.n	8007694 <_strtod_l+0x2f4>
 8007558:	2300      	movs	r3, #0
 800755a:	e7c4      	b.n	80074e6 <_strtod_l+0x146>
 800755c:	2f08      	cmp	r7, #8
 800755e:	bfd8      	it	le
 8007560:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007562:	f100 0001 	add.w	r0, r0, #1
 8007566:	bfda      	itte	le
 8007568:	fb02 3301 	mlale	r3, r2, r1, r3
 800756c:	9309      	strle	r3, [sp, #36]	; 0x24
 800756e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007572:	3701      	adds	r7, #1
 8007574:	901d      	str	r0, [sp, #116]	; 0x74
 8007576:	e7bf      	b.n	80074f8 <_strtod_l+0x158>
 8007578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800757a:	195a      	adds	r2, r3, r5
 800757c:	921d      	str	r2, [sp, #116]	; 0x74
 800757e:	5d5b      	ldrb	r3, [r3, r5]
 8007580:	2f00      	cmp	r7, #0
 8007582:	d037      	beq.n	80075f4 <_strtod_l+0x254>
 8007584:	9007      	str	r0, [sp, #28]
 8007586:	463d      	mov	r5, r7
 8007588:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800758c:	2a09      	cmp	r2, #9
 800758e:	d912      	bls.n	80075b6 <_strtod_l+0x216>
 8007590:	2201      	movs	r2, #1
 8007592:	e7c2      	b.n	800751a <_strtod_l+0x17a>
 8007594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	921d      	str	r2, [sp, #116]	; 0x74
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	3001      	adds	r0, #1
 800759e:	2b30      	cmp	r3, #48	; 0x30
 80075a0:	d0f8      	beq.n	8007594 <_strtod_l+0x1f4>
 80075a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80075a6:	2a08      	cmp	r2, #8
 80075a8:	f200 84db 	bhi.w	8007f62 <_strtod_l+0xbc2>
 80075ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80075ae:	9007      	str	r0, [sp, #28]
 80075b0:	2000      	movs	r0, #0
 80075b2:	920a      	str	r2, [sp, #40]	; 0x28
 80075b4:	4605      	mov	r5, r0
 80075b6:	3b30      	subs	r3, #48	; 0x30
 80075b8:	f100 0201 	add.w	r2, r0, #1
 80075bc:	d014      	beq.n	80075e8 <_strtod_l+0x248>
 80075be:	9907      	ldr	r1, [sp, #28]
 80075c0:	4411      	add	r1, r2
 80075c2:	9107      	str	r1, [sp, #28]
 80075c4:	462a      	mov	r2, r5
 80075c6:	eb00 0e05 	add.w	lr, r0, r5
 80075ca:	210a      	movs	r1, #10
 80075cc:	4572      	cmp	r2, lr
 80075ce:	d113      	bne.n	80075f8 <_strtod_l+0x258>
 80075d0:	182a      	adds	r2, r5, r0
 80075d2:	2a08      	cmp	r2, #8
 80075d4:	f105 0501 	add.w	r5, r5, #1
 80075d8:	4405      	add	r5, r0
 80075da:	dc1c      	bgt.n	8007616 <_strtod_l+0x276>
 80075dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075de:	220a      	movs	r2, #10
 80075e0:	fb02 3301 	mla	r3, r2, r1, r3
 80075e4:	9309      	str	r3, [sp, #36]	; 0x24
 80075e6:	2200      	movs	r2, #0
 80075e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	911d      	str	r1, [sp, #116]	; 0x74
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	4610      	mov	r0, r2
 80075f2:	e7c9      	b.n	8007588 <_strtod_l+0x1e8>
 80075f4:	4638      	mov	r0, r7
 80075f6:	e7d2      	b.n	800759e <_strtod_l+0x1fe>
 80075f8:	2a08      	cmp	r2, #8
 80075fa:	dc04      	bgt.n	8007606 <_strtod_l+0x266>
 80075fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075fe:	434e      	muls	r6, r1
 8007600:	9609      	str	r6, [sp, #36]	; 0x24
 8007602:	3201      	adds	r2, #1
 8007604:	e7e2      	b.n	80075cc <_strtod_l+0x22c>
 8007606:	f102 0c01 	add.w	ip, r2, #1
 800760a:	f1bc 0f10 	cmp.w	ip, #16
 800760e:	bfd8      	it	le
 8007610:	fb01 f909 	mulle.w	r9, r1, r9
 8007614:	e7f5      	b.n	8007602 <_strtod_l+0x262>
 8007616:	2d10      	cmp	r5, #16
 8007618:	bfdc      	itt	le
 800761a:	220a      	movle	r2, #10
 800761c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007620:	e7e1      	b.n	80075e6 <_strtod_l+0x246>
 8007622:	2300      	movs	r3, #0
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	2201      	movs	r2, #1
 8007628:	e77c      	b.n	8007524 <_strtod_l+0x184>
 800762a:	f04f 0c00 	mov.w	ip, #0
 800762e:	f108 0302 	add.w	r3, r8, #2
 8007632:	931d      	str	r3, [sp, #116]	; 0x74
 8007634:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007638:	e785      	b.n	8007546 <_strtod_l+0x1a6>
 800763a:	f04f 0c01 	mov.w	ip, #1
 800763e:	e7f6      	b.n	800762e <_strtod_l+0x28e>
 8007640:	0800b3ac 	.word	0x0800b3ac
 8007644:	0800b0f4 	.word	0x0800b0f4
 8007648:	7ff00000 	.word	0x7ff00000
 800764c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	911d      	str	r1, [sp, #116]	; 0x74
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b30      	cmp	r3, #48	; 0x30
 8007656:	d0f9      	beq.n	800764c <_strtod_l+0x2ac>
 8007658:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800765c:	2908      	cmp	r1, #8
 800765e:	f63f af79 	bhi.w	8007554 <_strtod_l+0x1b4>
 8007662:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007666:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800766c:	1c59      	adds	r1, r3, #1
 800766e:	911d      	str	r1, [sp, #116]	; 0x74
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007676:	2e09      	cmp	r6, #9
 8007678:	d937      	bls.n	80076ea <_strtod_l+0x34a>
 800767a:	9e08      	ldr	r6, [sp, #32]
 800767c:	1b89      	subs	r1, r1, r6
 800767e:	2908      	cmp	r1, #8
 8007680:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007684:	dc02      	bgt.n	800768c <_strtod_l+0x2ec>
 8007686:	4576      	cmp	r6, lr
 8007688:	bfa8      	it	ge
 800768a:	4676      	movge	r6, lr
 800768c:	f1bc 0f00 	cmp.w	ip, #0
 8007690:	d000      	beq.n	8007694 <_strtod_l+0x2f4>
 8007692:	4276      	negs	r6, r6
 8007694:	2d00      	cmp	r5, #0
 8007696:	d14f      	bne.n	8007738 <_strtod_l+0x398>
 8007698:	9904      	ldr	r1, [sp, #16]
 800769a:	4301      	orrs	r1, r0
 800769c:	f47f aec2 	bne.w	8007424 <_strtod_l+0x84>
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	f47f aedb 	bne.w	800745c <_strtod_l+0xbc>
 80076a6:	2b69      	cmp	r3, #105	; 0x69
 80076a8:	d027      	beq.n	80076fa <_strtod_l+0x35a>
 80076aa:	dc24      	bgt.n	80076f6 <_strtod_l+0x356>
 80076ac:	2b49      	cmp	r3, #73	; 0x49
 80076ae:	d024      	beq.n	80076fa <_strtod_l+0x35a>
 80076b0:	2b4e      	cmp	r3, #78	; 0x4e
 80076b2:	f47f aed3 	bne.w	800745c <_strtod_l+0xbc>
 80076b6:	499e      	ldr	r1, [pc, #632]	; (8007930 <_strtod_l+0x590>)
 80076b8:	a81d      	add	r0, sp, #116	; 0x74
 80076ba:	f002 f8b7 	bl	800982c <__match>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aecc 	beq.w	800745c <_strtod_l+0xbc>
 80076c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b28      	cmp	r3, #40	; 0x28
 80076ca:	d12d      	bne.n	8007728 <_strtod_l+0x388>
 80076cc:	4999      	ldr	r1, [pc, #612]	; (8007934 <_strtod_l+0x594>)
 80076ce:	aa20      	add	r2, sp, #128	; 0x80
 80076d0:	a81d      	add	r0, sp, #116	; 0x74
 80076d2:	f002 f8bf 	bl	8009854 <__hexnan>
 80076d6:	2805      	cmp	r0, #5
 80076d8:	d126      	bne.n	8007728 <_strtod_l+0x388>
 80076da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80076e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80076e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80076e8:	e69c      	b.n	8007424 <_strtod_l+0x84>
 80076ea:	210a      	movs	r1, #10
 80076ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80076f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80076f4:	e7b9      	b.n	800766a <_strtod_l+0x2ca>
 80076f6:	2b6e      	cmp	r3, #110	; 0x6e
 80076f8:	e7db      	b.n	80076b2 <_strtod_l+0x312>
 80076fa:	498f      	ldr	r1, [pc, #572]	; (8007938 <_strtod_l+0x598>)
 80076fc:	a81d      	add	r0, sp, #116	; 0x74
 80076fe:	f002 f895 	bl	800982c <__match>
 8007702:	2800      	cmp	r0, #0
 8007704:	f43f aeaa 	beq.w	800745c <_strtod_l+0xbc>
 8007708:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800770a:	498c      	ldr	r1, [pc, #560]	; (800793c <_strtod_l+0x59c>)
 800770c:	3b01      	subs	r3, #1
 800770e:	a81d      	add	r0, sp, #116	; 0x74
 8007710:	931d      	str	r3, [sp, #116]	; 0x74
 8007712:	f002 f88b 	bl	800982c <__match>
 8007716:	b910      	cbnz	r0, 800771e <_strtod_l+0x37e>
 8007718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800771a:	3301      	adds	r3, #1
 800771c:	931d      	str	r3, [sp, #116]	; 0x74
 800771e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800794c <_strtod_l+0x5ac>
 8007722:	f04f 0a00 	mov.w	sl, #0
 8007726:	e67d      	b.n	8007424 <_strtod_l+0x84>
 8007728:	4885      	ldr	r0, [pc, #532]	; (8007940 <_strtod_l+0x5a0>)
 800772a:	f003 f9ed 	bl	800ab08 <nan>
 800772e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007732:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007736:	e675      	b.n	8007424 <_strtod_l+0x84>
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800773c:	1af3      	subs	r3, r6, r3
 800773e:	2f00      	cmp	r7, #0
 8007740:	bf08      	it	eq
 8007742:	462f      	moveq	r7, r5
 8007744:	2d10      	cmp	r5, #16
 8007746:	9308      	str	r3, [sp, #32]
 8007748:	46a8      	mov	r8, r5
 800774a:	bfa8      	it	ge
 800774c:	f04f 0810 	movge.w	r8, #16
 8007750:	f7f8 fee8 	bl	8000524 <__aeabi_ui2d>
 8007754:	2d09      	cmp	r5, #9
 8007756:	4682      	mov	sl, r0
 8007758:	468b      	mov	fp, r1
 800775a:	dd13      	ble.n	8007784 <_strtod_l+0x3e4>
 800775c:	4b79      	ldr	r3, [pc, #484]	; (8007944 <_strtod_l+0x5a4>)
 800775e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007762:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007766:	f7f8 ff57 	bl	8000618 <__aeabi_dmul>
 800776a:	4682      	mov	sl, r0
 800776c:	4648      	mov	r0, r9
 800776e:	468b      	mov	fp, r1
 8007770:	f7f8 fed8 	bl	8000524 <__aeabi_ui2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4650      	mov	r0, sl
 800777a:	4659      	mov	r1, fp
 800777c:	f7f8 fd96 	bl	80002ac <__adddf3>
 8007780:	4682      	mov	sl, r0
 8007782:	468b      	mov	fp, r1
 8007784:	2d0f      	cmp	r5, #15
 8007786:	dc38      	bgt.n	80077fa <_strtod_l+0x45a>
 8007788:	9b08      	ldr	r3, [sp, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f43f ae4a 	beq.w	8007424 <_strtod_l+0x84>
 8007790:	dd24      	ble.n	80077dc <_strtod_l+0x43c>
 8007792:	2b16      	cmp	r3, #22
 8007794:	dc0b      	bgt.n	80077ae <_strtod_l+0x40e>
 8007796:	4d6b      	ldr	r5, [pc, #428]	; (8007944 <_strtod_l+0x5a4>)
 8007798:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800779c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80077a0:	4652      	mov	r2, sl
 80077a2:	465b      	mov	r3, fp
 80077a4:	f7f8 ff38 	bl	8000618 <__aeabi_dmul>
 80077a8:	4682      	mov	sl, r0
 80077aa:	468b      	mov	fp, r1
 80077ac:	e63a      	b.n	8007424 <_strtod_l+0x84>
 80077ae:	9a08      	ldr	r2, [sp, #32]
 80077b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80077b4:	4293      	cmp	r3, r2
 80077b6:	db20      	blt.n	80077fa <_strtod_l+0x45a>
 80077b8:	4c62      	ldr	r4, [pc, #392]	; (8007944 <_strtod_l+0x5a4>)
 80077ba:	f1c5 050f 	rsb	r5, r5, #15
 80077be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077c2:	4652      	mov	r2, sl
 80077c4:	465b      	mov	r3, fp
 80077c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ca:	f7f8 ff25 	bl	8000618 <__aeabi_dmul>
 80077ce:	9b08      	ldr	r3, [sp, #32]
 80077d0:	1b5d      	subs	r5, r3, r5
 80077d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077da:	e7e3      	b.n	80077a4 <_strtod_l+0x404>
 80077dc:	9b08      	ldr	r3, [sp, #32]
 80077de:	3316      	adds	r3, #22
 80077e0:	db0b      	blt.n	80077fa <_strtod_l+0x45a>
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	4a57      	ldr	r2, [pc, #348]	; (8007944 <_strtod_l+0x5a4>)
 80077e6:	1b9e      	subs	r6, r3, r6
 80077e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80077ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077f0:	4650      	mov	r0, sl
 80077f2:	4659      	mov	r1, fp
 80077f4:	f7f9 f83a 	bl	800086c <__aeabi_ddiv>
 80077f8:	e7d6      	b.n	80077a8 <_strtod_l+0x408>
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	eba5 0808 	sub.w	r8, r5, r8
 8007800:	4498      	add	r8, r3
 8007802:	f1b8 0f00 	cmp.w	r8, #0
 8007806:	dd71      	ble.n	80078ec <_strtod_l+0x54c>
 8007808:	f018 030f 	ands.w	r3, r8, #15
 800780c:	d00a      	beq.n	8007824 <_strtod_l+0x484>
 800780e:	494d      	ldr	r1, [pc, #308]	; (8007944 <_strtod_l+0x5a4>)
 8007810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007814:	4652      	mov	r2, sl
 8007816:	465b      	mov	r3, fp
 8007818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800781c:	f7f8 fefc 	bl	8000618 <__aeabi_dmul>
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	f038 080f 	bics.w	r8, r8, #15
 8007828:	d04d      	beq.n	80078c6 <_strtod_l+0x526>
 800782a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800782e:	dd22      	ble.n	8007876 <_strtod_l+0x4d6>
 8007830:	2500      	movs	r5, #0
 8007832:	462e      	mov	r6, r5
 8007834:	9509      	str	r5, [sp, #36]	; 0x24
 8007836:	9507      	str	r5, [sp, #28]
 8007838:	2322      	movs	r3, #34	; 0x22
 800783a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800794c <_strtod_l+0x5ac>
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	f04f 0a00 	mov.w	sl, #0
 8007844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007846:	2b00      	cmp	r3, #0
 8007848:	f43f adec 	beq.w	8007424 <_strtod_l+0x84>
 800784c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800784e:	4620      	mov	r0, r4
 8007850:	f002 f970 	bl	8009b34 <_Bfree>
 8007854:	9907      	ldr	r1, [sp, #28]
 8007856:	4620      	mov	r0, r4
 8007858:	f002 f96c 	bl	8009b34 <_Bfree>
 800785c:	4631      	mov	r1, r6
 800785e:	4620      	mov	r0, r4
 8007860:	f002 f968 	bl	8009b34 <_Bfree>
 8007864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007866:	4620      	mov	r0, r4
 8007868:	f002 f964 	bl	8009b34 <_Bfree>
 800786c:	4629      	mov	r1, r5
 800786e:	4620      	mov	r0, r4
 8007870:	f002 f960 	bl	8009b34 <_Bfree>
 8007874:	e5d6      	b.n	8007424 <_strtod_l+0x84>
 8007876:	2300      	movs	r3, #0
 8007878:	ea4f 1828 	mov.w	r8, r8, asr #4
 800787c:	4650      	mov	r0, sl
 800787e:	4659      	mov	r1, fp
 8007880:	4699      	mov	r9, r3
 8007882:	f1b8 0f01 	cmp.w	r8, #1
 8007886:	dc21      	bgt.n	80078cc <_strtod_l+0x52c>
 8007888:	b10b      	cbz	r3, 800788e <_strtod_l+0x4ee>
 800788a:	4682      	mov	sl, r0
 800788c:	468b      	mov	fp, r1
 800788e:	4b2e      	ldr	r3, [pc, #184]	; (8007948 <_strtod_l+0x5a8>)
 8007890:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007894:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007898:	4652      	mov	r2, sl
 800789a:	465b      	mov	r3, fp
 800789c:	e9d9 0100 	ldrd	r0, r1, [r9]
 80078a0:	f7f8 feba 	bl	8000618 <__aeabi_dmul>
 80078a4:	4b29      	ldr	r3, [pc, #164]	; (800794c <_strtod_l+0x5ac>)
 80078a6:	460a      	mov	r2, r1
 80078a8:	400b      	ands	r3, r1
 80078aa:	4929      	ldr	r1, [pc, #164]	; (8007950 <_strtod_l+0x5b0>)
 80078ac:	428b      	cmp	r3, r1
 80078ae:	4682      	mov	sl, r0
 80078b0:	d8be      	bhi.n	8007830 <_strtod_l+0x490>
 80078b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078b6:	428b      	cmp	r3, r1
 80078b8:	bf86      	itte	hi
 80078ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007954 <_strtod_l+0x5b4>
 80078be:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80078c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80078c6:	2300      	movs	r3, #0
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	e081      	b.n	80079d0 <_strtod_l+0x630>
 80078cc:	f018 0f01 	tst.w	r8, #1
 80078d0:	d007      	beq.n	80078e2 <_strtod_l+0x542>
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <_strtod_l+0x5a8>)
 80078d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f8 fe9c 	bl	8000618 <__aeabi_dmul>
 80078e0:	2301      	movs	r3, #1
 80078e2:	f109 0901 	add.w	r9, r9, #1
 80078e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078ea:	e7ca      	b.n	8007882 <_strtod_l+0x4e2>
 80078ec:	d0eb      	beq.n	80078c6 <_strtod_l+0x526>
 80078ee:	f1c8 0800 	rsb	r8, r8, #0
 80078f2:	f018 020f 	ands.w	r2, r8, #15
 80078f6:	d00a      	beq.n	800790e <_strtod_l+0x56e>
 80078f8:	4b12      	ldr	r3, [pc, #72]	; (8007944 <_strtod_l+0x5a4>)
 80078fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078fe:	4650      	mov	r0, sl
 8007900:	4659      	mov	r1, fp
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 ffb1 	bl	800086c <__aeabi_ddiv>
 800790a:	4682      	mov	sl, r0
 800790c:	468b      	mov	fp, r1
 800790e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007912:	d0d8      	beq.n	80078c6 <_strtod_l+0x526>
 8007914:	f1b8 0f1f 	cmp.w	r8, #31
 8007918:	dd1e      	ble.n	8007958 <_strtod_l+0x5b8>
 800791a:	2500      	movs	r5, #0
 800791c:	462e      	mov	r6, r5
 800791e:	9509      	str	r5, [sp, #36]	; 0x24
 8007920:	9507      	str	r5, [sp, #28]
 8007922:	2322      	movs	r3, #34	; 0x22
 8007924:	f04f 0a00 	mov.w	sl, #0
 8007928:	f04f 0b00 	mov.w	fp, #0
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	e789      	b.n	8007844 <_strtod_l+0x4a4>
 8007930:	0800b0c5 	.word	0x0800b0c5
 8007934:	0800b108 	.word	0x0800b108
 8007938:	0800b0bd 	.word	0x0800b0bd
 800793c:	0800b24c 	.word	0x0800b24c
 8007940:	0800b568 	.word	0x0800b568
 8007944:	0800b448 	.word	0x0800b448
 8007948:	0800b420 	.word	0x0800b420
 800794c:	7ff00000 	.word	0x7ff00000
 8007950:	7ca00000 	.word	0x7ca00000
 8007954:	7fefffff 	.word	0x7fefffff
 8007958:	f018 0310 	ands.w	r3, r8, #16
 800795c:	bf18      	it	ne
 800795e:	236a      	movne	r3, #106	; 0x6a
 8007960:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007d18 <_strtod_l+0x978>
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	4650      	mov	r0, sl
 8007968:	4659      	mov	r1, fp
 800796a:	2300      	movs	r3, #0
 800796c:	f018 0f01 	tst.w	r8, #1
 8007970:	d004      	beq.n	800797c <_strtod_l+0x5dc>
 8007972:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007976:	f7f8 fe4f 	bl	8000618 <__aeabi_dmul>
 800797a:	2301      	movs	r3, #1
 800797c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007980:	f109 0908 	add.w	r9, r9, #8
 8007984:	d1f2      	bne.n	800796c <_strtod_l+0x5cc>
 8007986:	b10b      	cbz	r3, 800798c <_strtod_l+0x5ec>
 8007988:	4682      	mov	sl, r0
 800798a:	468b      	mov	fp, r1
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	b1bb      	cbz	r3, 80079c0 <_strtod_l+0x620>
 8007990:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007994:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007998:	2b00      	cmp	r3, #0
 800799a:	4659      	mov	r1, fp
 800799c:	dd10      	ble.n	80079c0 <_strtod_l+0x620>
 800799e:	2b1f      	cmp	r3, #31
 80079a0:	f340 8128 	ble.w	8007bf4 <_strtod_l+0x854>
 80079a4:	2b34      	cmp	r3, #52	; 0x34
 80079a6:	bfde      	ittt	le
 80079a8:	3b20      	suble	r3, #32
 80079aa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80079ae:	fa02 f303 	lslle.w	r3, r2, r3
 80079b2:	f04f 0a00 	mov.w	sl, #0
 80079b6:	bfcc      	ite	gt
 80079b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80079bc:	ea03 0b01 	andle.w	fp, r3, r1
 80079c0:	2200      	movs	r2, #0
 80079c2:	2300      	movs	r3, #0
 80079c4:	4650      	mov	r0, sl
 80079c6:	4659      	mov	r1, fp
 80079c8:	f7f9 f88e 	bl	8000ae8 <__aeabi_dcmpeq>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d1a4      	bne.n	800791a <_strtod_l+0x57a>
 80079d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079d6:	462b      	mov	r3, r5
 80079d8:	463a      	mov	r2, r7
 80079da:	4620      	mov	r0, r4
 80079dc:	f002 f916 	bl	8009c0c <__s2b>
 80079e0:	9009      	str	r0, [sp, #36]	; 0x24
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f43f af24 	beq.w	8007830 <_strtod_l+0x490>
 80079e8:	9b07      	ldr	r3, [sp, #28]
 80079ea:	1b9e      	subs	r6, r3, r6
 80079ec:	9b08      	ldr	r3, [sp, #32]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfb4      	ite	lt
 80079f2:	4633      	movlt	r3, r6
 80079f4:	2300      	movge	r3, #0
 80079f6:	9310      	str	r3, [sp, #64]	; 0x40
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	2500      	movs	r5, #0
 80079fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a00:	9318      	str	r3, [sp, #96]	; 0x60
 8007a02:	462e      	mov	r6, r5
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	4620      	mov	r0, r4
 8007a08:	6859      	ldr	r1, [r3, #4]
 8007a0a:	f002 f853 	bl	8009ab4 <_Balloc>
 8007a0e:	9007      	str	r0, [sp, #28]
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f43f af11 	beq.w	8007838 <_strtod_l+0x498>
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	691a      	ldr	r2, [r3, #16]
 8007a1a:	3202      	adds	r2, #2
 8007a1c:	f103 010c 	add.w	r1, r3, #12
 8007a20:	0092      	lsls	r2, r2, #2
 8007a22:	300c      	adds	r0, #12
 8007a24:	f002 f838 	bl	8009a98 <memcpy>
 8007a28:	ec4b ab10 	vmov	d0, sl, fp
 8007a2c:	aa20      	add	r2, sp, #128	; 0x80
 8007a2e:	a91f      	add	r1, sp, #124	; 0x7c
 8007a30:	4620      	mov	r0, r4
 8007a32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007a36:	f002 fc25 	bl	800a284 <__d2b>
 8007a3a:	901e      	str	r0, [sp, #120]	; 0x78
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f43f aefb 	beq.w	8007838 <_strtod_l+0x498>
 8007a42:	2101      	movs	r1, #1
 8007a44:	4620      	mov	r0, r4
 8007a46:	f002 f97b 	bl	8009d40 <__i2b>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f aef3 	beq.w	8007838 <_strtod_l+0x498>
 8007a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a54:	9904      	ldr	r1, [sp, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfab      	itete	ge
 8007a5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007a5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007a5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007a60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007a64:	bfac      	ite	ge
 8007a66:	eb03 0902 	addge.w	r9, r3, r2
 8007a6a:	1ad7      	sublt	r7, r2, r3
 8007a6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a6e:	eba3 0801 	sub.w	r8, r3, r1
 8007a72:	4490      	add	r8, r2
 8007a74:	4ba3      	ldr	r3, [pc, #652]	; (8007d04 <_strtod_l+0x964>)
 8007a76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007a7a:	4598      	cmp	r8, r3
 8007a7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a80:	f280 80cc 	bge.w	8007c1c <_strtod_l+0x87c>
 8007a84:	eba3 0308 	sub.w	r3, r3, r8
 8007a88:	2b1f      	cmp	r3, #31
 8007a8a:	eba2 0203 	sub.w	r2, r2, r3
 8007a8e:	f04f 0101 	mov.w	r1, #1
 8007a92:	f300 80b6 	bgt.w	8007c02 <_strtod_l+0x862>
 8007a96:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9a:	9311      	str	r3, [sp, #68]	; 0x44
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa0:	eb09 0802 	add.w	r8, r9, r2
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	45c1      	cmp	r9, r8
 8007aa8:	4417      	add	r7, r2
 8007aaa:	441f      	add	r7, r3
 8007aac:	464b      	mov	r3, r9
 8007aae:	bfa8      	it	ge
 8007ab0:	4643      	movge	r3, r8
 8007ab2:	42bb      	cmp	r3, r7
 8007ab4:	bfa8      	it	ge
 8007ab6:	463b      	movge	r3, r7
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfc2      	ittt	gt
 8007abc:	eba8 0803 	subgt.w	r8, r8, r3
 8007ac0:	1aff      	subgt	r7, r7, r3
 8007ac2:	eba9 0903 	subgt.w	r9, r9, r3
 8007ac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dd17      	ble.n	8007afc <_strtod_l+0x75c>
 8007acc:	4631      	mov	r1, r6
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f002 f9f1 	bl	8009eb8 <__pow5mult>
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f43f aead 	beq.w	8007838 <_strtod_l+0x498>
 8007ade:	4601      	mov	r1, r0
 8007ae0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f002 f942 	bl	8009d6c <__multiply>
 8007ae8:	900f      	str	r0, [sp, #60]	; 0x3c
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f43f aea4 	beq.w	8007838 <_strtod_l+0x498>
 8007af0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007af2:	4620      	mov	r0, r4
 8007af4:	f002 f81e 	bl	8009b34 <_Bfree>
 8007af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007afa:	931e      	str	r3, [sp, #120]	; 0x78
 8007afc:	f1b8 0f00 	cmp.w	r8, #0
 8007b00:	f300 8091 	bgt.w	8007c26 <_strtod_l+0x886>
 8007b04:	9b08      	ldr	r3, [sp, #32]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dd08      	ble.n	8007b1c <_strtod_l+0x77c>
 8007b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b0c:	9907      	ldr	r1, [sp, #28]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f002 f9d2 	bl	8009eb8 <__pow5mult>
 8007b14:	9007      	str	r0, [sp, #28]
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f ae8e 	beq.w	8007838 <_strtod_l+0x498>
 8007b1c:	2f00      	cmp	r7, #0
 8007b1e:	dd08      	ble.n	8007b32 <_strtod_l+0x792>
 8007b20:	9907      	ldr	r1, [sp, #28]
 8007b22:	463a      	mov	r2, r7
 8007b24:	4620      	mov	r0, r4
 8007b26:	f002 fa21 	bl	8009f6c <__lshift>
 8007b2a:	9007      	str	r0, [sp, #28]
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f43f ae83 	beq.w	8007838 <_strtod_l+0x498>
 8007b32:	f1b9 0f00 	cmp.w	r9, #0
 8007b36:	dd08      	ble.n	8007b4a <_strtod_l+0x7aa>
 8007b38:	4631      	mov	r1, r6
 8007b3a:	464a      	mov	r2, r9
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f002 fa15 	bl	8009f6c <__lshift>
 8007b42:	4606      	mov	r6, r0
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f43f ae77 	beq.w	8007838 <_strtod_l+0x498>
 8007b4a:	9a07      	ldr	r2, [sp, #28]
 8007b4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f002 fa94 	bl	800a07c <__mdiff>
 8007b54:	4605      	mov	r5, r0
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f43f ae6e 	beq.w	8007838 <_strtod_l+0x498>
 8007b5c:	68c3      	ldr	r3, [r0, #12]
 8007b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b60:	2300      	movs	r3, #0
 8007b62:	60c3      	str	r3, [r0, #12]
 8007b64:	4631      	mov	r1, r6
 8007b66:	f002 fa6d 	bl	800a044 <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	da65      	bge.n	8007c3a <_strtod_l+0x89a>
 8007b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b70:	ea53 030a 	orrs.w	r3, r3, sl
 8007b74:	f040 8087 	bne.w	8007c86 <_strtod_l+0x8e6>
 8007b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 8082 	bne.w	8007c86 <_strtod_l+0x8e6>
 8007b82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b86:	0d1b      	lsrs	r3, r3, #20
 8007b88:	051b      	lsls	r3, r3, #20
 8007b8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b8e:	d97a      	bls.n	8007c86 <_strtod_l+0x8e6>
 8007b90:	696b      	ldr	r3, [r5, #20]
 8007b92:	b913      	cbnz	r3, 8007b9a <_strtod_l+0x7fa>
 8007b94:	692b      	ldr	r3, [r5, #16]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	dd75      	ble.n	8007c86 <_strtod_l+0x8e6>
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f002 f9e4 	bl	8009f6c <__lshift>
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	f002 fa4c 	bl	800a044 <__mcmp>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	dd6a      	ble.n	8007c86 <_strtod_l+0x8e6>
 8007bb0:	9904      	ldr	r1, [sp, #16]
 8007bb2:	4a55      	ldr	r2, [pc, #340]	; (8007d08 <_strtod_l+0x968>)
 8007bb4:	465b      	mov	r3, fp
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	f000 8085 	beq.w	8007cc6 <_strtod_l+0x926>
 8007bbc:	ea02 010b 	and.w	r1, r2, fp
 8007bc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007bc4:	dc7f      	bgt.n	8007cc6 <_strtod_l+0x926>
 8007bc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007bca:	f77f aeaa 	ble.w	8007922 <_strtod_l+0x582>
 8007bce:	4a4f      	ldr	r2, [pc, #316]	; (8007d0c <_strtod_l+0x96c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007bdc:	4659      	mov	r1, fp
 8007bde:	f7f8 fd1b 	bl	8000618 <__aeabi_dmul>
 8007be2:	460b      	mov	r3, r1
 8007be4:	4303      	orrs	r3, r0
 8007be6:	bf08      	it	eq
 8007be8:	2322      	moveq	r3, #34	; 0x22
 8007bea:	4682      	mov	sl, r0
 8007bec:	468b      	mov	fp, r1
 8007bee:	bf08      	it	eq
 8007bf0:	6023      	streq	r3, [r4, #0]
 8007bf2:	e62b      	b.n	800784c <_strtod_l+0x4ac>
 8007bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	ea03 0a0a 	and.w	sl, r3, sl
 8007c00:	e6de      	b.n	80079c0 <_strtod_l+0x620>
 8007c02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007c06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007c0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007c0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007c12:	fa01 f308 	lsl.w	r3, r1, r8
 8007c16:	930c      	str	r3, [sp, #48]	; 0x30
 8007c18:	9111      	str	r1, [sp, #68]	; 0x44
 8007c1a:	e741      	b.n	8007aa0 <_strtod_l+0x700>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c20:	2301      	movs	r3, #1
 8007c22:	9311      	str	r3, [sp, #68]	; 0x44
 8007c24:	e73c      	b.n	8007aa0 <_strtod_l+0x700>
 8007c26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007c28:	4642      	mov	r2, r8
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f002 f99e 	bl	8009f6c <__lshift>
 8007c30:	901e      	str	r0, [sp, #120]	; 0x78
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f47f af66 	bne.w	8007b04 <_strtod_l+0x764>
 8007c38:	e5fe      	b.n	8007838 <_strtod_l+0x498>
 8007c3a:	465f      	mov	r7, fp
 8007c3c:	d16e      	bne.n	8007d1c <_strtod_l+0x97c>
 8007c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c44:	b342      	cbz	r2, 8007c98 <_strtod_l+0x8f8>
 8007c46:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <_strtod_l+0x970>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d128      	bne.n	8007c9e <_strtod_l+0x8fe>
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	4650      	mov	r0, sl
 8007c50:	b1eb      	cbz	r3, 8007c8e <_strtod_l+0x8ee>
 8007c52:	4a2d      	ldr	r2, [pc, #180]	; (8007d08 <_strtod_l+0x968>)
 8007c54:	403a      	ands	r2, r7
 8007c56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c5e:	d819      	bhi.n	8007c94 <_strtod_l+0x8f4>
 8007c60:	0d12      	lsrs	r2, r2, #20
 8007c62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c66:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6a:	4298      	cmp	r0, r3
 8007c6c:	d117      	bne.n	8007c9e <_strtod_l+0x8fe>
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <_strtod_l+0x974>)
 8007c70:	429f      	cmp	r7, r3
 8007c72:	d102      	bne.n	8007c7a <_strtod_l+0x8da>
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f addf 	beq.w	8007838 <_strtod_l+0x498>
 8007c7a:	4b23      	ldr	r3, [pc, #140]	; (8007d08 <_strtod_l+0x968>)
 8007c7c:	403b      	ands	r3, r7
 8007c7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c82:	f04f 0a00 	mov.w	sl, #0
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1a0      	bne.n	8007bce <_strtod_l+0x82e>
 8007c8c:	e5de      	b.n	800784c <_strtod_l+0x4ac>
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c92:	e7ea      	b.n	8007c6a <_strtod_l+0x8ca>
 8007c94:	460b      	mov	r3, r1
 8007c96:	e7e8      	b.n	8007c6a <_strtod_l+0x8ca>
 8007c98:	ea53 030a 	orrs.w	r3, r3, sl
 8007c9c:	d088      	beq.n	8007bb0 <_strtod_l+0x810>
 8007c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ca0:	b1db      	cbz	r3, 8007cda <_strtod_l+0x93a>
 8007ca2:	423b      	tst	r3, r7
 8007ca4:	d0ef      	beq.n	8007c86 <_strtod_l+0x8e6>
 8007ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca8:	9a04      	ldr	r2, [sp, #16]
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	b1c3      	cbz	r3, 8007ce2 <_strtod_l+0x942>
 8007cb0:	f7ff fb5a 	bl	8007368 <sulp>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cbc:	f7f8 faf6 	bl	80002ac <__adddf3>
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	468b      	mov	fp, r1
 8007cc4:	e7df      	b.n	8007c86 <_strtod_l+0x8e6>
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ccc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007cd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007cd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007cd8:	e7d5      	b.n	8007c86 <_strtod_l+0x8e6>
 8007cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cdc:	ea13 0f0a 	tst.w	r3, sl
 8007ce0:	e7e0      	b.n	8007ca4 <_strtod_l+0x904>
 8007ce2:	f7ff fb41 	bl	8007368 <sulp>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cee:	f7f8 fadb 	bl	80002a8 <__aeabi_dsub>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	f7f8 fef5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d0c1      	beq.n	8007c86 <_strtod_l+0x8e6>
 8007d02:	e60e      	b.n	8007922 <_strtod_l+0x582>
 8007d04:	fffffc02 	.word	0xfffffc02
 8007d08:	7ff00000 	.word	0x7ff00000
 8007d0c:	39500000 	.word	0x39500000
 8007d10:	000fffff 	.word	0x000fffff
 8007d14:	7fefffff 	.word	0x7fefffff
 8007d18:	0800b120 	.word	0x0800b120
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f002 fb0c 	bl	800a33c <__ratio>
 8007d24:	ec59 8b10 	vmov	r8, r9, d0
 8007d28:	ee10 0a10 	vmov	r0, s0
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d32:	4649      	mov	r1, r9
 8007d34:	f7f8 feec 	bl	8000b10 <__aeabi_dcmple>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d07c      	beq.n	8007e36 <_strtod_l+0xa96>
 8007d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d04c      	beq.n	8007ddc <_strtod_l+0xa3c>
 8007d42:	4b95      	ldr	r3, [pc, #596]	; (8007f98 <_strtod_l+0xbf8>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007d4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f98 <_strtod_l+0xbf8>
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	4b92      	ldr	r3, [pc, #584]	; (8007f9c <_strtod_l+0xbfc>)
 8007d54:	403b      	ands	r3, r7
 8007d56:	9311      	str	r3, [sp, #68]	; 0x44
 8007d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d5a:	4b91      	ldr	r3, [pc, #580]	; (8007fa0 <_strtod_l+0xc00>)
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	f040 80b2 	bne.w	8007ec6 <_strtod_l+0xb26>
 8007d62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007d6e:	ec4b ab10 	vmov	d0, sl, fp
 8007d72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007d76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d7a:	f002 fa07 	bl	800a18c <__ulp>
 8007d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d82:	ec53 2b10 	vmov	r2, r3, d0
 8007d86:	f7f8 fc47 	bl	8000618 <__aeabi_dmul>
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	f7f8 fa8d 	bl	80002ac <__adddf3>
 8007d92:	460b      	mov	r3, r1
 8007d94:	4981      	ldr	r1, [pc, #516]	; (8007f9c <_strtod_l+0xbfc>)
 8007d96:	4a83      	ldr	r2, [pc, #524]	; (8007fa4 <_strtod_l+0xc04>)
 8007d98:	4019      	ands	r1, r3
 8007d9a:	4291      	cmp	r1, r2
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	d95e      	bls.n	8007e5e <_strtod_l+0xabe>
 8007da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d103      	bne.n	8007db2 <_strtod_l+0xa12>
 8007daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dac:	3301      	adds	r3, #1
 8007dae:	f43f ad43 	beq.w	8007838 <_strtod_l+0x498>
 8007db2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007fb0 <_strtod_l+0xc10>
 8007db6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007dba:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f001 feb9 	bl	8009b34 <_Bfree>
 8007dc2:	9907      	ldr	r1, [sp, #28]
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 feb5 	bl	8009b34 <_Bfree>
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f001 feb1 	bl	8009b34 <_Bfree>
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 fead 	bl	8009b34 <_Bfree>
 8007dda:	e613      	b.n	8007a04 <_strtod_l+0x664>
 8007ddc:	f1ba 0f00 	cmp.w	sl, #0
 8007de0:	d11b      	bne.n	8007e1a <_strtod_l+0xa7a>
 8007de2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007de6:	b9f3      	cbnz	r3, 8007e26 <_strtod_l+0xa86>
 8007de8:	4b6b      	ldr	r3, [pc, #428]	; (8007f98 <_strtod_l+0xbf8>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe84 	bl	8000afc <__aeabi_dcmplt>
 8007df4:	b9d0      	cbnz	r0, 8007e2c <_strtod_l+0xa8c>
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4b6b      	ldr	r3, [pc, #428]	; (8007fa8 <_strtod_l+0xc08>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f7f8 fc0b 	bl	8000618 <__aeabi_dmul>
 8007e02:	4680      	mov	r8, r0
 8007e04:	4689      	mov	r9, r1
 8007e06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007e0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e18:	e79b      	b.n	8007d52 <_strtod_l+0x9b2>
 8007e1a:	f1ba 0f01 	cmp.w	sl, #1
 8007e1e:	d102      	bne.n	8007e26 <_strtod_l+0xa86>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	f43f ad7e 	beq.w	8007922 <_strtod_l+0x582>
 8007e26:	4b61      	ldr	r3, [pc, #388]	; (8007fac <_strtod_l+0xc0c>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	e78c      	b.n	8007d46 <_strtod_l+0x9a6>
 8007e2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007fa8 <_strtod_l+0xc08>
 8007e30:	f04f 0800 	mov.w	r8, #0
 8007e34:	e7e7      	b.n	8007e06 <_strtod_l+0xa66>
 8007e36:	4b5c      	ldr	r3, [pc, #368]	; (8007fa8 <_strtod_l+0xc08>)
 8007e38:	4640      	mov	r0, r8
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f7f8 fbeb 	bl	8000618 <__aeabi_dmul>
 8007e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	b933      	cbnz	r3, 8007e58 <_strtod_l+0xab8>
 8007e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e4e:	9012      	str	r0, [sp, #72]	; 0x48
 8007e50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007e56:	e7dd      	b.n	8007e14 <_strtod_l+0xa74>
 8007e58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007e5c:	e7f9      	b.n	8007e52 <_strtod_l+0xab2>
 8007e5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1a8      	bne.n	8007dba <_strtod_l+0xa1a>
 8007e68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e6e:	0d1b      	lsrs	r3, r3, #20
 8007e70:	051b      	lsls	r3, r3, #20
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d1a1      	bne.n	8007dba <_strtod_l+0xa1a>
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 ff15 	bl	8000ca8 <__aeabi_d2lz>
 8007e7e:	f7f8 fb9d 	bl	80005bc <__aeabi_l2d>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	f7f8 fa0d 	bl	80002a8 <__aeabi_dsub>
 8007e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e94:	ea43 030a 	orr.w	r3, r3, sl
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	d053      	beq.n	8007f48 <_strtod_l+0xba8>
 8007ea0:	a335      	add	r3, pc, #212	; (adr r3, 8007f78 <_strtod_l+0xbd8>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 fe29 	bl	8000afc <__aeabi_dcmplt>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f47f acce 	bne.w	800784c <_strtod_l+0x4ac>
 8007eb0:	a333      	add	r3, pc, #204	; (adr r3, 8007f80 <_strtod_l+0xbe0>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 fe3d 	bl	8000b38 <__aeabi_dcmpgt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f43f af7b 	beq.w	8007dba <_strtod_l+0xa1a>
 8007ec4:	e4c2      	b.n	800784c <_strtod_l+0x4ac>
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	b333      	cbz	r3, 8007f18 <_strtod_l+0xb78>
 8007eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ecc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ed0:	d822      	bhi.n	8007f18 <_strtod_l+0xb78>
 8007ed2:	a32d      	add	r3, pc, #180	; (adr r3, 8007f88 <_strtod_l+0xbe8>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 fe18 	bl	8000b10 <__aeabi_dcmple>
 8007ee0:	b1a0      	cbz	r0, 8007f0c <_strtod_l+0xb6c>
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	f7f8 fe6f 	bl	8000bc8 <__aeabi_d2uiz>
 8007eea:	2801      	cmp	r0, #1
 8007eec:	bf38      	it	cc
 8007eee:	2001      	movcc	r0, #1
 8007ef0:	f7f8 fb18 	bl	8000524 <__aeabi_ui2d>
 8007ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	4689      	mov	r9, r1
 8007efa:	bb13      	cbnz	r3, 8007f42 <_strtod_l+0xba2>
 8007efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f00:	9014      	str	r0, [sp, #80]	; 0x50
 8007f02:	9315      	str	r3, [sp, #84]	; 0x54
 8007f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	930d      	str	r3, [sp, #52]	; 0x34
 8007f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f24:	f002 f932 	bl	800a18c <__ulp>
 8007f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f2c:	ec53 2b10 	vmov	r2, r3, d0
 8007f30:	f7f8 fb72 	bl	8000618 <__aeabi_dmul>
 8007f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f38:	f7f8 f9b8 	bl	80002ac <__adddf3>
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	468b      	mov	fp, r1
 8007f40:	e78f      	b.n	8007e62 <_strtod_l+0xac2>
 8007f42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007f46:	e7dd      	b.n	8007f04 <_strtod_l+0xb64>
 8007f48:	a311      	add	r3, pc, #68	; (adr r3, 8007f90 <_strtod_l+0xbf0>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f7f8 fdd5 	bl	8000afc <__aeabi_dcmplt>
 8007f52:	e7b4      	b.n	8007ebe <_strtod_l+0xb1e>
 8007f54:	2300      	movs	r3, #0
 8007f56:	930e      	str	r3, [sp, #56]	; 0x38
 8007f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	f7ff ba65 	b.w	800742c <_strtod_l+0x8c>
 8007f62:	2b65      	cmp	r3, #101	; 0x65
 8007f64:	f43f ab5d 	beq.w	8007622 <_strtod_l+0x282>
 8007f68:	2b45      	cmp	r3, #69	; 0x45
 8007f6a:	f43f ab5a 	beq.w	8007622 <_strtod_l+0x282>
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f7ff bb92 	b.w	8007698 <_strtod_l+0x2f8>
 8007f74:	f3af 8000 	nop.w
 8007f78:	94a03595 	.word	0x94a03595
 8007f7c:	3fdfffff 	.word	0x3fdfffff
 8007f80:	35afe535 	.word	0x35afe535
 8007f84:	3fe00000 	.word	0x3fe00000
 8007f88:	ffc00000 	.word	0xffc00000
 8007f8c:	41dfffff 	.word	0x41dfffff
 8007f90:	94a03595 	.word	0x94a03595
 8007f94:	3fcfffff 	.word	0x3fcfffff
 8007f98:	3ff00000 	.word	0x3ff00000
 8007f9c:	7ff00000 	.word	0x7ff00000
 8007fa0:	7fe00000 	.word	0x7fe00000
 8007fa4:	7c9fffff 	.word	0x7c9fffff
 8007fa8:	3fe00000 	.word	0x3fe00000
 8007fac:	bff00000 	.word	0xbff00000
 8007fb0:	7fefffff 	.word	0x7fefffff

08007fb4 <_strtod_r>:
 8007fb4:	4b01      	ldr	r3, [pc, #4]	; (8007fbc <_strtod_r+0x8>)
 8007fb6:	f7ff b9f3 	b.w	80073a0 <_strtod_l>
 8007fba:	bf00      	nop
 8007fbc:	20000078 	.word	0x20000078

08007fc0 <_strtol_l.isra.0>:
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc6:	d001      	beq.n	8007fcc <_strtol_l.isra.0+0xc>
 8007fc8:	2b24      	cmp	r3, #36	; 0x24
 8007fca:	d906      	bls.n	8007fda <_strtol_l.isra.0+0x1a>
 8007fcc:	f7fe fa6c 	bl	80064a8 <__errno>
 8007fd0:	2316      	movs	r3, #22
 8007fd2:	6003      	str	r3, [r0, #0]
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fda:	4f3a      	ldr	r7, [pc, #232]	; (80080c4 <_strtol_l.isra.0+0x104>)
 8007fdc:	468e      	mov	lr, r1
 8007fde:	4676      	mov	r6, lr
 8007fe0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007fe4:	5de5      	ldrb	r5, [r4, r7]
 8007fe6:	f015 0508 	ands.w	r5, r5, #8
 8007fea:	d1f8      	bne.n	8007fde <_strtol_l.isra.0+0x1e>
 8007fec:	2c2d      	cmp	r4, #45	; 0x2d
 8007fee:	d134      	bne.n	800805a <_strtol_l.isra.0+0x9a>
 8007ff0:	f89e 4000 	ldrb.w	r4, [lr]
 8007ff4:	f04f 0801 	mov.w	r8, #1
 8007ff8:	f106 0e02 	add.w	lr, r6, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d05c      	beq.n	80080ba <_strtol_l.isra.0+0xfa>
 8008000:	2b10      	cmp	r3, #16
 8008002:	d10c      	bne.n	800801e <_strtol_l.isra.0+0x5e>
 8008004:	2c30      	cmp	r4, #48	; 0x30
 8008006:	d10a      	bne.n	800801e <_strtol_l.isra.0+0x5e>
 8008008:	f89e 4000 	ldrb.w	r4, [lr]
 800800c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008010:	2c58      	cmp	r4, #88	; 0x58
 8008012:	d14d      	bne.n	80080b0 <_strtol_l.isra.0+0xf0>
 8008014:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008018:	2310      	movs	r3, #16
 800801a:	f10e 0e02 	add.w	lr, lr, #2
 800801e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008022:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008026:	2600      	movs	r6, #0
 8008028:	fbbc f9f3 	udiv	r9, ip, r3
 800802c:	4635      	mov	r5, r6
 800802e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008032:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008036:	2f09      	cmp	r7, #9
 8008038:	d818      	bhi.n	800806c <_strtol_l.isra.0+0xac>
 800803a:	463c      	mov	r4, r7
 800803c:	42a3      	cmp	r3, r4
 800803e:	dd24      	ble.n	800808a <_strtol_l.isra.0+0xca>
 8008040:	2e00      	cmp	r6, #0
 8008042:	db1f      	blt.n	8008084 <_strtol_l.isra.0+0xc4>
 8008044:	45a9      	cmp	r9, r5
 8008046:	d31d      	bcc.n	8008084 <_strtol_l.isra.0+0xc4>
 8008048:	d101      	bne.n	800804e <_strtol_l.isra.0+0x8e>
 800804a:	45a2      	cmp	sl, r4
 800804c:	db1a      	blt.n	8008084 <_strtol_l.isra.0+0xc4>
 800804e:	fb05 4503 	mla	r5, r5, r3, r4
 8008052:	2601      	movs	r6, #1
 8008054:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008058:	e7eb      	b.n	8008032 <_strtol_l.isra.0+0x72>
 800805a:	2c2b      	cmp	r4, #43	; 0x2b
 800805c:	bf08      	it	eq
 800805e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008062:	46a8      	mov	r8, r5
 8008064:	bf08      	it	eq
 8008066:	f106 0e02 	addeq.w	lr, r6, #2
 800806a:	e7c7      	b.n	8007ffc <_strtol_l.isra.0+0x3c>
 800806c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008070:	2f19      	cmp	r7, #25
 8008072:	d801      	bhi.n	8008078 <_strtol_l.isra.0+0xb8>
 8008074:	3c37      	subs	r4, #55	; 0x37
 8008076:	e7e1      	b.n	800803c <_strtol_l.isra.0+0x7c>
 8008078:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800807c:	2f19      	cmp	r7, #25
 800807e:	d804      	bhi.n	800808a <_strtol_l.isra.0+0xca>
 8008080:	3c57      	subs	r4, #87	; 0x57
 8008082:	e7db      	b.n	800803c <_strtol_l.isra.0+0x7c>
 8008084:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008088:	e7e4      	b.n	8008054 <_strtol_l.isra.0+0x94>
 800808a:	2e00      	cmp	r6, #0
 800808c:	da05      	bge.n	800809a <_strtol_l.isra.0+0xda>
 800808e:	2322      	movs	r3, #34	; 0x22
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	4665      	mov	r5, ip
 8008094:	b942      	cbnz	r2, 80080a8 <_strtol_l.isra.0+0xe8>
 8008096:	4628      	mov	r0, r5
 8008098:	e79d      	b.n	8007fd6 <_strtol_l.isra.0+0x16>
 800809a:	f1b8 0f00 	cmp.w	r8, #0
 800809e:	d000      	beq.n	80080a2 <_strtol_l.isra.0+0xe2>
 80080a0:	426d      	negs	r5, r5
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	d0f7      	beq.n	8008096 <_strtol_l.isra.0+0xd6>
 80080a6:	b10e      	cbz	r6, 80080ac <_strtol_l.isra.0+0xec>
 80080a8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	e7f2      	b.n	8008096 <_strtol_l.isra.0+0xd6>
 80080b0:	2430      	movs	r4, #48	; 0x30
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1b3      	bne.n	800801e <_strtol_l.isra.0+0x5e>
 80080b6:	2308      	movs	r3, #8
 80080b8:	e7b1      	b.n	800801e <_strtol_l.isra.0+0x5e>
 80080ba:	2c30      	cmp	r4, #48	; 0x30
 80080bc:	d0a4      	beq.n	8008008 <_strtol_l.isra.0+0x48>
 80080be:	230a      	movs	r3, #10
 80080c0:	e7ad      	b.n	800801e <_strtol_l.isra.0+0x5e>
 80080c2:	bf00      	nop
 80080c4:	0800b149 	.word	0x0800b149

080080c8 <_strtol_r>:
 80080c8:	f7ff bf7a 	b.w	8007fc0 <_strtol_l.isra.0>

080080cc <__swbuf_r>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	460e      	mov	r6, r1
 80080d0:	4614      	mov	r4, r2
 80080d2:	4605      	mov	r5, r0
 80080d4:	b118      	cbz	r0, 80080de <__swbuf_r+0x12>
 80080d6:	6983      	ldr	r3, [r0, #24]
 80080d8:	b90b      	cbnz	r3, 80080de <__swbuf_r+0x12>
 80080da:	f001 f84b 	bl	8009174 <__sinit>
 80080de:	4b21      	ldr	r3, [pc, #132]	; (8008164 <__swbuf_r+0x98>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	d12b      	bne.n	800813c <__swbuf_r+0x70>
 80080e4:	686c      	ldr	r4, [r5, #4]
 80080e6:	69a3      	ldr	r3, [r4, #24]
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	071a      	lsls	r2, r3, #28
 80080ee:	d52f      	bpl.n	8008150 <__swbuf_r+0x84>
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	b36b      	cbz	r3, 8008150 <__swbuf_r+0x84>
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	1ac0      	subs	r0, r0, r3
 80080fa:	6963      	ldr	r3, [r4, #20]
 80080fc:	b2f6      	uxtb	r6, r6
 80080fe:	4283      	cmp	r3, r0
 8008100:	4637      	mov	r7, r6
 8008102:	dc04      	bgt.n	800810e <__swbuf_r+0x42>
 8008104:	4621      	mov	r1, r4
 8008106:	4628      	mov	r0, r5
 8008108:	f000 ffa0 	bl	800904c <_fflush_r>
 800810c:	bb30      	cbnz	r0, 800815c <__swbuf_r+0x90>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	3b01      	subs	r3, #1
 8008112:	60a3      	str	r3, [r4, #8]
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	6022      	str	r2, [r4, #0]
 800811a:	701e      	strb	r6, [r3, #0]
 800811c:	6963      	ldr	r3, [r4, #20]
 800811e:	3001      	adds	r0, #1
 8008120:	4283      	cmp	r3, r0
 8008122:	d004      	beq.n	800812e <__swbuf_r+0x62>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	07db      	lsls	r3, r3, #31
 8008128:	d506      	bpl.n	8008138 <__swbuf_r+0x6c>
 800812a:	2e0a      	cmp	r6, #10
 800812c:	d104      	bne.n	8008138 <__swbuf_r+0x6c>
 800812e:	4621      	mov	r1, r4
 8008130:	4628      	mov	r0, r5
 8008132:	f000 ff8b 	bl	800904c <_fflush_r>
 8008136:	b988      	cbnz	r0, 800815c <__swbuf_r+0x90>
 8008138:	4638      	mov	r0, r7
 800813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <__swbuf_r+0x9c>)
 800813e:	429c      	cmp	r4, r3
 8008140:	d101      	bne.n	8008146 <__swbuf_r+0x7a>
 8008142:	68ac      	ldr	r4, [r5, #8]
 8008144:	e7cf      	b.n	80080e6 <__swbuf_r+0x1a>
 8008146:	4b09      	ldr	r3, [pc, #36]	; (800816c <__swbuf_r+0xa0>)
 8008148:	429c      	cmp	r4, r3
 800814a:	bf08      	it	eq
 800814c:	68ec      	ldreq	r4, [r5, #12]
 800814e:	e7ca      	b.n	80080e6 <__swbuf_r+0x1a>
 8008150:	4621      	mov	r1, r4
 8008152:	4628      	mov	r0, r5
 8008154:	f000 f80c 	bl	8008170 <__swsetup_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	d0cb      	beq.n	80080f4 <__swbuf_r+0x28>
 800815c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008160:	e7ea      	b.n	8008138 <__swbuf_r+0x6c>
 8008162:	bf00      	nop
 8008164:	0800b300 	.word	0x0800b300
 8008168:	0800b320 	.word	0x0800b320
 800816c:	0800b2e0 	.word	0x0800b2e0

08008170 <__swsetup_r>:
 8008170:	4b32      	ldr	r3, [pc, #200]	; (800823c <__swsetup_r+0xcc>)
 8008172:	b570      	push	{r4, r5, r6, lr}
 8008174:	681d      	ldr	r5, [r3, #0]
 8008176:	4606      	mov	r6, r0
 8008178:	460c      	mov	r4, r1
 800817a:	b125      	cbz	r5, 8008186 <__swsetup_r+0x16>
 800817c:	69ab      	ldr	r3, [r5, #24]
 800817e:	b913      	cbnz	r3, 8008186 <__swsetup_r+0x16>
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fff7 	bl	8009174 <__sinit>
 8008186:	4b2e      	ldr	r3, [pc, #184]	; (8008240 <__swsetup_r+0xd0>)
 8008188:	429c      	cmp	r4, r3
 800818a:	d10f      	bne.n	80081ac <__swsetup_r+0x3c>
 800818c:	686c      	ldr	r4, [r5, #4]
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008194:	0719      	lsls	r1, r3, #28
 8008196:	d42c      	bmi.n	80081f2 <__swsetup_r+0x82>
 8008198:	06dd      	lsls	r5, r3, #27
 800819a:	d411      	bmi.n	80081c0 <__swsetup_r+0x50>
 800819c:	2309      	movs	r3, #9
 800819e:	6033      	str	r3, [r6, #0]
 80081a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081aa:	e03e      	b.n	800822a <__swsetup_r+0xba>
 80081ac:	4b25      	ldr	r3, [pc, #148]	; (8008244 <__swsetup_r+0xd4>)
 80081ae:	429c      	cmp	r4, r3
 80081b0:	d101      	bne.n	80081b6 <__swsetup_r+0x46>
 80081b2:	68ac      	ldr	r4, [r5, #8]
 80081b4:	e7eb      	b.n	800818e <__swsetup_r+0x1e>
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <__swsetup_r+0xd8>)
 80081b8:	429c      	cmp	r4, r3
 80081ba:	bf08      	it	eq
 80081bc:	68ec      	ldreq	r4, [r5, #12]
 80081be:	e7e6      	b.n	800818e <__swsetup_r+0x1e>
 80081c0:	0758      	lsls	r0, r3, #29
 80081c2:	d512      	bpl.n	80081ea <__swsetup_r+0x7a>
 80081c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081c6:	b141      	cbz	r1, 80081da <__swsetup_r+0x6a>
 80081c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081cc:	4299      	cmp	r1, r3
 80081ce:	d002      	beq.n	80081d6 <__swsetup_r+0x66>
 80081d0:	4630      	mov	r0, r6
 80081d2:	f002 f939 	bl	800a448 <_free_r>
 80081d6:	2300      	movs	r3, #0
 80081d8:	6363      	str	r3, [r4, #52]	; 0x34
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	2300      	movs	r3, #0
 80081e4:	6063      	str	r3, [r4, #4]
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f043 0308 	orr.w	r3, r3, #8
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	b94b      	cbnz	r3, 800820a <__swsetup_r+0x9a>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008200:	d003      	beq.n	800820a <__swsetup_r+0x9a>
 8008202:	4621      	mov	r1, r4
 8008204:	4630      	mov	r0, r6
 8008206:	f001 fbed 	bl	80099e4 <__smakebuf_r>
 800820a:	89a0      	ldrh	r0, [r4, #12]
 800820c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008210:	f010 0301 	ands.w	r3, r0, #1
 8008214:	d00a      	beq.n	800822c <__swsetup_r+0xbc>
 8008216:	2300      	movs	r3, #0
 8008218:	60a3      	str	r3, [r4, #8]
 800821a:	6963      	ldr	r3, [r4, #20]
 800821c:	425b      	negs	r3, r3
 800821e:	61a3      	str	r3, [r4, #24]
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	b943      	cbnz	r3, 8008236 <__swsetup_r+0xc6>
 8008224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008228:	d1ba      	bne.n	80081a0 <__swsetup_r+0x30>
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	0781      	lsls	r1, r0, #30
 800822e:	bf58      	it	pl
 8008230:	6963      	ldrpl	r3, [r4, #20]
 8008232:	60a3      	str	r3, [r4, #8]
 8008234:	e7f4      	b.n	8008220 <__swsetup_r+0xb0>
 8008236:	2000      	movs	r0, #0
 8008238:	e7f7      	b.n	800822a <__swsetup_r+0xba>
 800823a:	bf00      	nop
 800823c:	20000010 	.word	0x20000010
 8008240:	0800b300 	.word	0x0800b300
 8008244:	0800b320 	.word	0x0800b320
 8008248:	0800b2e0 	.word	0x0800b2e0

0800824c <quorem>:
 800824c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	6903      	ldr	r3, [r0, #16]
 8008252:	690c      	ldr	r4, [r1, #16]
 8008254:	42a3      	cmp	r3, r4
 8008256:	4607      	mov	r7, r0
 8008258:	f2c0 8081 	blt.w	800835e <quorem+0x112>
 800825c:	3c01      	subs	r4, #1
 800825e:	f101 0814 	add.w	r8, r1, #20
 8008262:	f100 0514 	add.w	r5, r0, #20
 8008266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008274:	3301      	adds	r3, #1
 8008276:	429a      	cmp	r2, r3
 8008278:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800827c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008280:	fbb2 f6f3 	udiv	r6, r2, r3
 8008284:	d331      	bcc.n	80082ea <quorem+0x9e>
 8008286:	f04f 0e00 	mov.w	lr, #0
 800828a:	4640      	mov	r0, r8
 800828c:	46ac      	mov	ip, r5
 800828e:	46f2      	mov	sl, lr
 8008290:	f850 2b04 	ldr.w	r2, [r0], #4
 8008294:	b293      	uxth	r3, r2
 8008296:	fb06 e303 	mla	r3, r6, r3, lr
 800829a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ebaa 0303 	sub.w	r3, sl, r3
 80082a4:	0c12      	lsrs	r2, r2, #16
 80082a6:	f8dc a000 	ldr.w	sl, [ip]
 80082aa:	fb06 e202 	mla	r2, r6, r2, lr
 80082ae:	fa13 f38a 	uxtah	r3, r3, sl
 80082b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082b6:	fa1f fa82 	uxth.w	sl, r2
 80082ba:	f8dc 2000 	ldr.w	r2, [ip]
 80082be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80082c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082cc:	4581      	cmp	r9, r0
 80082ce:	f84c 3b04 	str.w	r3, [ip], #4
 80082d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082d6:	d2db      	bcs.n	8008290 <quorem+0x44>
 80082d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80082dc:	b92b      	cbnz	r3, 80082ea <quorem+0x9e>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	3b04      	subs	r3, #4
 80082e2:	429d      	cmp	r5, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	d32e      	bcc.n	8008346 <quorem+0xfa>
 80082e8:	613c      	str	r4, [r7, #16]
 80082ea:	4638      	mov	r0, r7
 80082ec:	f001 feaa 	bl	800a044 <__mcmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	db24      	blt.n	800833e <quorem+0xf2>
 80082f4:	3601      	adds	r6, #1
 80082f6:	4628      	mov	r0, r5
 80082f8:	f04f 0c00 	mov.w	ip, #0
 80082fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008300:	f8d0 e000 	ldr.w	lr, [r0]
 8008304:	b293      	uxth	r3, r2
 8008306:	ebac 0303 	sub.w	r3, ip, r3
 800830a:	0c12      	lsrs	r2, r2, #16
 800830c:	fa13 f38e 	uxtah	r3, r3, lr
 8008310:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008318:	b29b      	uxth	r3, r3
 800831a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800831e:	45c1      	cmp	r9, r8
 8008320:	f840 3b04 	str.w	r3, [r0], #4
 8008324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008328:	d2e8      	bcs.n	80082fc <quorem+0xb0>
 800832a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800832e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008332:	b922      	cbnz	r2, 800833e <quorem+0xf2>
 8008334:	3b04      	subs	r3, #4
 8008336:	429d      	cmp	r5, r3
 8008338:	461a      	mov	r2, r3
 800833a:	d30a      	bcc.n	8008352 <quorem+0x106>
 800833c:	613c      	str	r4, [r7, #16]
 800833e:	4630      	mov	r0, r6
 8008340:	b003      	add	sp, #12
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	3b04      	subs	r3, #4
 800834a:	2a00      	cmp	r2, #0
 800834c:	d1cc      	bne.n	80082e8 <quorem+0x9c>
 800834e:	3c01      	subs	r4, #1
 8008350:	e7c7      	b.n	80082e2 <quorem+0x96>
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	3b04      	subs	r3, #4
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1f0      	bne.n	800833c <quorem+0xf0>
 800835a:	3c01      	subs	r4, #1
 800835c:	e7eb      	b.n	8008336 <quorem+0xea>
 800835e:	2000      	movs	r0, #0
 8008360:	e7ee      	b.n	8008340 <quorem+0xf4>
 8008362:	0000      	movs	r0, r0
 8008364:	0000      	movs	r0, r0
	...

08008368 <_dtoa_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	ed2d 8b02 	vpush	{d8}
 8008370:	ec57 6b10 	vmov	r6, r7, d0
 8008374:	b095      	sub	sp, #84	; 0x54
 8008376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008382:	4604      	mov	r4, r0
 8008384:	9209      	str	r2, [sp, #36]	; 0x24
 8008386:	930f      	str	r3, [sp, #60]	; 0x3c
 8008388:	b975      	cbnz	r5, 80083a8 <_dtoa_r+0x40>
 800838a:	2010      	movs	r0, #16
 800838c:	f001 fb6a 	bl	8009a64 <malloc>
 8008390:	4602      	mov	r2, r0
 8008392:	6260      	str	r0, [r4, #36]	; 0x24
 8008394:	b920      	cbnz	r0, 80083a0 <_dtoa_r+0x38>
 8008396:	4bb2      	ldr	r3, [pc, #712]	; (8008660 <_dtoa_r+0x2f8>)
 8008398:	21ea      	movs	r1, #234	; 0xea
 800839a:	48b2      	ldr	r0, [pc, #712]	; (8008664 <_dtoa_r+0x2fc>)
 800839c:	f002 fc40 	bl	800ac20 <__assert_func>
 80083a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083a4:	6005      	str	r5, [r0, #0]
 80083a6:	60c5      	str	r5, [r0, #12]
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	6819      	ldr	r1, [r3, #0]
 80083ac:	b151      	cbz	r1, 80083c4 <_dtoa_r+0x5c>
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	604a      	str	r2, [r1, #4]
 80083b2:	2301      	movs	r3, #1
 80083b4:	4093      	lsls	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f001 fbbb 	bl	8009b34 <_Bfree>
 80083be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	1e3b      	subs	r3, r7, #0
 80083c6:	bfb9      	ittee	lt
 80083c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083cc:	9303      	strlt	r3, [sp, #12]
 80083ce:	2300      	movge	r3, #0
 80083d0:	f8c8 3000 	strge.w	r3, [r8]
 80083d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80083d8:	4ba3      	ldr	r3, [pc, #652]	; (8008668 <_dtoa_r+0x300>)
 80083da:	bfbc      	itt	lt
 80083dc:	2201      	movlt	r2, #1
 80083de:	f8c8 2000 	strlt.w	r2, [r8]
 80083e2:	ea33 0309 	bics.w	r3, r3, r9
 80083e6:	d11b      	bne.n	8008420 <_dtoa_r+0xb8>
 80083e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083f4:	4333      	orrs	r3, r6
 80083f6:	f000 857a 	beq.w	8008eee <_dtoa_r+0xb86>
 80083fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083fc:	b963      	cbnz	r3, 8008418 <_dtoa_r+0xb0>
 80083fe:	4b9b      	ldr	r3, [pc, #620]	; (800866c <_dtoa_r+0x304>)
 8008400:	e024      	b.n	800844c <_dtoa_r+0xe4>
 8008402:	4b9b      	ldr	r3, [pc, #620]	; (8008670 <_dtoa_r+0x308>)
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	9800      	ldr	r0, [sp, #0]
 800840e:	b015      	add	sp, #84	; 0x54
 8008410:	ecbd 8b02 	vpop	{d8}
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	4b94      	ldr	r3, [pc, #592]	; (800866c <_dtoa_r+0x304>)
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	3303      	adds	r3, #3
 800841e:	e7f3      	b.n	8008408 <_dtoa_r+0xa0>
 8008420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	ec51 0b17 	vmov	r0, r1, d7
 800842a:	2300      	movs	r3, #0
 800842c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008430:	f7f8 fb5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008434:	4680      	mov	r8, r0
 8008436:	b158      	cbz	r0, 8008450 <_dtoa_r+0xe8>
 8008438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800843a:	2301      	movs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8551 	beq.w	8008ee8 <_dtoa_r+0xb80>
 8008446:	488b      	ldr	r0, [pc, #556]	; (8008674 <_dtoa_r+0x30c>)
 8008448:	6018      	str	r0, [r3, #0]
 800844a:	1e43      	subs	r3, r0, #1
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	e7dd      	b.n	800840c <_dtoa_r+0xa4>
 8008450:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008454:	aa12      	add	r2, sp, #72	; 0x48
 8008456:	a913      	add	r1, sp, #76	; 0x4c
 8008458:	4620      	mov	r0, r4
 800845a:	f001 ff13 	bl	800a284 <__d2b>
 800845e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008462:	4683      	mov	fp, r0
 8008464:	2d00      	cmp	r5, #0
 8008466:	d07c      	beq.n	8008562 <_dtoa_r+0x1fa>
 8008468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800846a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800846e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008472:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008476:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800847a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800847e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008482:	4b7d      	ldr	r3, [pc, #500]	; (8008678 <_dtoa_r+0x310>)
 8008484:	2200      	movs	r2, #0
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7f7 ff0d 	bl	80002a8 <__aeabi_dsub>
 800848e:	a36e      	add	r3, pc, #440	; (adr r3, 8008648 <_dtoa_r+0x2e0>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f8 f8c0 	bl	8000618 <__aeabi_dmul>
 8008498:	a36d      	add	r3, pc, #436	; (adr r3, 8008650 <_dtoa_r+0x2e8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f7 ff05 	bl	80002ac <__adddf3>
 80084a2:	4606      	mov	r6, r0
 80084a4:	4628      	mov	r0, r5
 80084a6:	460f      	mov	r7, r1
 80084a8:	f7f8 f84c 	bl	8000544 <__aeabi_i2d>
 80084ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008658 <_dtoa_r+0x2f0>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f8 f8b1 	bl	8000618 <__aeabi_dmul>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f7 fef5 	bl	80002ac <__adddf3>
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	f7f8 fb57 	bl	8000b78 <__aeabi_d2iz>
 80084ca:	2200      	movs	r2, #0
 80084cc:	4682      	mov	sl, r0
 80084ce:	2300      	movs	r3, #0
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fb12 	bl	8000afc <__aeabi_dcmplt>
 80084d8:	b148      	cbz	r0, 80084ee <_dtoa_r+0x186>
 80084da:	4650      	mov	r0, sl
 80084dc:	f7f8 f832 	bl	8000544 <__aeabi_i2d>
 80084e0:	4632      	mov	r2, r6
 80084e2:	463b      	mov	r3, r7
 80084e4:	f7f8 fb00 	bl	8000ae8 <__aeabi_dcmpeq>
 80084e8:	b908      	cbnz	r0, 80084ee <_dtoa_r+0x186>
 80084ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80084ee:	f1ba 0f16 	cmp.w	sl, #22
 80084f2:	d854      	bhi.n	800859e <_dtoa_r+0x236>
 80084f4:	4b61      	ldr	r3, [pc, #388]	; (800867c <_dtoa_r+0x314>)
 80084f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008502:	f7f8 fafb 	bl	8000afc <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d04b      	beq.n	80085a2 <_dtoa_r+0x23a>
 800850a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800850e:	2300      	movs	r3, #0
 8008510:	930e      	str	r3, [sp, #56]	; 0x38
 8008512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008514:	1b5d      	subs	r5, r3, r5
 8008516:	1e6b      	subs	r3, r5, #1
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	bf43      	ittte	mi
 800851c:	2300      	movmi	r3, #0
 800851e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008522:	9304      	strmi	r3, [sp, #16]
 8008524:	f04f 0800 	movpl.w	r8, #0
 8008528:	f1ba 0f00 	cmp.w	sl, #0
 800852c:	db3b      	blt.n	80085a6 <_dtoa_r+0x23e>
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008534:	4453      	add	r3, sl
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	2300      	movs	r3, #0
 800853a:	9306      	str	r3, [sp, #24]
 800853c:	9b05      	ldr	r3, [sp, #20]
 800853e:	2b09      	cmp	r3, #9
 8008540:	d869      	bhi.n	8008616 <_dtoa_r+0x2ae>
 8008542:	2b05      	cmp	r3, #5
 8008544:	bfc4      	itt	gt
 8008546:	3b04      	subgt	r3, #4
 8008548:	9305      	strgt	r3, [sp, #20]
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	f1a3 0302 	sub.w	r3, r3, #2
 8008550:	bfcc      	ite	gt
 8008552:	2500      	movgt	r5, #0
 8008554:	2501      	movle	r5, #1
 8008556:	2b03      	cmp	r3, #3
 8008558:	d869      	bhi.n	800862e <_dtoa_r+0x2c6>
 800855a:	e8df f003 	tbb	[pc, r3]
 800855e:	4e2c      	.short	0x4e2c
 8008560:	5a4c      	.short	0x5a4c
 8008562:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008566:	441d      	add	r5, r3
 8008568:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800856c:	2b20      	cmp	r3, #32
 800856e:	bfc1      	itttt	gt
 8008570:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008574:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008578:	fa09 f303 	lslgt.w	r3, r9, r3
 800857c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008580:	bfda      	itte	le
 8008582:	f1c3 0320 	rsble	r3, r3, #32
 8008586:	fa06 f003 	lslle.w	r0, r6, r3
 800858a:	4318      	orrgt	r0, r3
 800858c:	f7f7 ffca 	bl	8000524 <__aeabi_ui2d>
 8008590:	2301      	movs	r3, #1
 8008592:	4606      	mov	r6, r0
 8008594:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008598:	3d01      	subs	r5, #1
 800859a:	9310      	str	r3, [sp, #64]	; 0x40
 800859c:	e771      	b.n	8008482 <_dtoa_r+0x11a>
 800859e:	2301      	movs	r3, #1
 80085a0:	e7b6      	b.n	8008510 <_dtoa_r+0x1a8>
 80085a2:	900e      	str	r0, [sp, #56]	; 0x38
 80085a4:	e7b5      	b.n	8008512 <_dtoa_r+0x1aa>
 80085a6:	f1ca 0300 	rsb	r3, sl, #0
 80085aa:	9306      	str	r3, [sp, #24]
 80085ac:	2300      	movs	r3, #0
 80085ae:	eba8 080a 	sub.w	r8, r8, sl
 80085b2:	930d      	str	r3, [sp, #52]	; 0x34
 80085b4:	e7c2      	b.n	800853c <_dtoa_r+0x1d4>
 80085b6:	2300      	movs	r3, #0
 80085b8:	9308      	str	r3, [sp, #32]
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dc39      	bgt.n	8008634 <_dtoa_r+0x2cc>
 80085c0:	f04f 0901 	mov.w	r9, #1
 80085c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085c8:	464b      	mov	r3, r9
 80085ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80085ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085d0:	2200      	movs	r2, #0
 80085d2:	6042      	str	r2, [r0, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	f102 0614 	add.w	r6, r2, #20
 80085da:	429e      	cmp	r6, r3
 80085dc:	6841      	ldr	r1, [r0, #4]
 80085de:	d92f      	bls.n	8008640 <_dtoa_r+0x2d8>
 80085e0:	4620      	mov	r0, r4
 80085e2:	f001 fa67 	bl	8009ab4 <_Balloc>
 80085e6:	9000      	str	r0, [sp, #0]
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d14b      	bne.n	8008684 <_dtoa_r+0x31c>
 80085ec:	4b24      	ldr	r3, [pc, #144]	; (8008680 <_dtoa_r+0x318>)
 80085ee:	4602      	mov	r2, r0
 80085f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085f4:	e6d1      	b.n	800839a <_dtoa_r+0x32>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e7de      	b.n	80085b8 <_dtoa_r+0x250>
 80085fa:	2300      	movs	r3, #0
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008600:	eb0a 0903 	add.w	r9, sl, r3
 8008604:	f109 0301 	add.w	r3, r9, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	bfb8      	it	lt
 800860e:	2301      	movlt	r3, #1
 8008610:	e7dd      	b.n	80085ce <_dtoa_r+0x266>
 8008612:	2301      	movs	r3, #1
 8008614:	e7f2      	b.n	80085fc <_dtoa_r+0x294>
 8008616:	2501      	movs	r5, #1
 8008618:	2300      	movs	r3, #0
 800861a:	9305      	str	r3, [sp, #20]
 800861c:	9508      	str	r5, [sp, #32]
 800861e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008622:	2200      	movs	r2, #0
 8008624:	f8cd 9004 	str.w	r9, [sp, #4]
 8008628:	2312      	movs	r3, #18
 800862a:	9209      	str	r2, [sp, #36]	; 0x24
 800862c:	e7cf      	b.n	80085ce <_dtoa_r+0x266>
 800862e:	2301      	movs	r3, #1
 8008630:	9308      	str	r3, [sp, #32]
 8008632:	e7f4      	b.n	800861e <_dtoa_r+0x2b6>
 8008634:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008638:	f8cd 9004 	str.w	r9, [sp, #4]
 800863c:	464b      	mov	r3, r9
 800863e:	e7c6      	b.n	80085ce <_dtoa_r+0x266>
 8008640:	3101      	adds	r1, #1
 8008642:	6041      	str	r1, [r0, #4]
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	e7c6      	b.n	80085d6 <_dtoa_r+0x26e>
 8008648:	636f4361 	.word	0x636f4361
 800864c:	3fd287a7 	.word	0x3fd287a7
 8008650:	8b60c8b3 	.word	0x8b60c8b3
 8008654:	3fc68a28 	.word	0x3fc68a28
 8008658:	509f79fb 	.word	0x509f79fb
 800865c:	3fd34413 	.word	0x3fd34413
 8008660:	0800b256 	.word	0x0800b256
 8008664:	0800b26d 	.word	0x0800b26d
 8008668:	7ff00000 	.word	0x7ff00000
 800866c:	0800b252 	.word	0x0800b252
 8008670:	0800b249 	.word	0x0800b249
 8008674:	0800b0c9 	.word	0x0800b0c9
 8008678:	3ff80000 	.word	0x3ff80000
 800867c:	0800b448 	.word	0x0800b448
 8008680:	0800b2cc 	.word	0x0800b2cc
 8008684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	9b01      	ldr	r3, [sp, #4]
 800868c:	2b0e      	cmp	r3, #14
 800868e:	f200 80ad 	bhi.w	80087ec <_dtoa_r+0x484>
 8008692:	2d00      	cmp	r5, #0
 8008694:	f000 80aa 	beq.w	80087ec <_dtoa_r+0x484>
 8008698:	f1ba 0f00 	cmp.w	sl, #0
 800869c:	dd36      	ble.n	800870c <_dtoa_r+0x3a4>
 800869e:	4ac3      	ldr	r2, [pc, #780]	; (80089ac <_dtoa_r+0x644>)
 80086a0:	f00a 030f 	and.w	r3, sl, #15
 80086a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086a8:	ed93 7b00 	vldr	d7, [r3]
 80086ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80086b4:	eeb0 8a47 	vmov.f32	s16, s14
 80086b8:	eef0 8a67 	vmov.f32	s17, s15
 80086bc:	d016      	beq.n	80086ec <_dtoa_r+0x384>
 80086be:	4bbc      	ldr	r3, [pc, #752]	; (80089b0 <_dtoa_r+0x648>)
 80086c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086c8:	f7f8 f8d0 	bl	800086c <__aeabi_ddiv>
 80086cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d0:	f007 070f 	and.w	r7, r7, #15
 80086d4:	2503      	movs	r5, #3
 80086d6:	4eb6      	ldr	r6, [pc, #728]	; (80089b0 <_dtoa_r+0x648>)
 80086d8:	b957      	cbnz	r7, 80086f0 <_dtoa_r+0x388>
 80086da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086de:	ec53 2b18 	vmov	r2, r3, d8
 80086e2:	f7f8 f8c3 	bl	800086c <__aeabi_ddiv>
 80086e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ea:	e029      	b.n	8008740 <_dtoa_r+0x3d8>
 80086ec:	2502      	movs	r5, #2
 80086ee:	e7f2      	b.n	80086d6 <_dtoa_r+0x36e>
 80086f0:	07f9      	lsls	r1, r7, #31
 80086f2:	d508      	bpl.n	8008706 <_dtoa_r+0x39e>
 80086f4:	ec51 0b18 	vmov	r0, r1, d8
 80086f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086fc:	f7f7 ff8c 	bl	8000618 <__aeabi_dmul>
 8008700:	ec41 0b18 	vmov	d8, r0, r1
 8008704:	3501      	adds	r5, #1
 8008706:	107f      	asrs	r7, r7, #1
 8008708:	3608      	adds	r6, #8
 800870a:	e7e5      	b.n	80086d8 <_dtoa_r+0x370>
 800870c:	f000 80a6 	beq.w	800885c <_dtoa_r+0x4f4>
 8008710:	f1ca 0600 	rsb	r6, sl, #0
 8008714:	4ba5      	ldr	r3, [pc, #660]	; (80089ac <_dtoa_r+0x644>)
 8008716:	4fa6      	ldr	r7, [pc, #664]	; (80089b0 <_dtoa_r+0x648>)
 8008718:	f006 020f 	and.w	r2, r6, #15
 800871c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008728:	f7f7 ff76 	bl	8000618 <__aeabi_dmul>
 800872c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008730:	1136      	asrs	r6, r6, #4
 8008732:	2300      	movs	r3, #0
 8008734:	2502      	movs	r5, #2
 8008736:	2e00      	cmp	r6, #0
 8008738:	f040 8085 	bne.w	8008846 <_dtoa_r+0x4de>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1d2      	bne.n	80086e6 <_dtoa_r+0x37e>
 8008740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 808c 	beq.w	8008860 <_dtoa_r+0x4f8>
 8008748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800874c:	4b99      	ldr	r3, [pc, #612]	; (80089b4 <_dtoa_r+0x64c>)
 800874e:	2200      	movs	r2, #0
 8008750:	4630      	mov	r0, r6
 8008752:	4639      	mov	r1, r7
 8008754:	f7f8 f9d2 	bl	8000afc <__aeabi_dcmplt>
 8008758:	2800      	cmp	r0, #0
 800875a:	f000 8081 	beq.w	8008860 <_dtoa_r+0x4f8>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d07d      	beq.n	8008860 <_dtoa_r+0x4f8>
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	dd3c      	ble.n	80087e4 <_dtoa_r+0x47c>
 800876a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	2200      	movs	r2, #0
 8008772:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <_dtoa_r+0x650>)
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f7 ff4e 	bl	8000618 <__aeabi_dmul>
 800877c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008780:	3501      	adds	r5, #1
 8008782:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008786:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800878a:	4628      	mov	r0, r5
 800878c:	f7f7 feda 	bl	8000544 <__aeabi_i2d>
 8008790:	4632      	mov	r2, r6
 8008792:	463b      	mov	r3, r7
 8008794:	f7f7 ff40 	bl	8000618 <__aeabi_dmul>
 8008798:	4b88      	ldr	r3, [pc, #544]	; (80089bc <_dtoa_r+0x654>)
 800879a:	2200      	movs	r2, #0
 800879c:	f7f7 fd86 	bl	80002ac <__adddf3>
 80087a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d15c      	bne.n	800886a <_dtoa_r+0x502>
 80087b0:	4b83      	ldr	r3, [pc, #524]	; (80089c0 <_dtoa_r+0x658>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd76 	bl	80002a8 <__aeabi_dsub>
 80087bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	f7f8 f9b8 	bl	8000b38 <__aeabi_dcmpgt>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f040 8296 	bne.w	8008cfa <_dtoa_r+0x992>
 80087ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087d2:	4630      	mov	r0, r6
 80087d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f8 f98f 	bl	8000afc <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f040 8288 	bne.w	8008cf4 <_dtoa_r+0x98c>
 80087e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f2c0 8158 	blt.w	8008aa4 <_dtoa_r+0x73c>
 80087f4:	f1ba 0f0e 	cmp.w	sl, #14
 80087f8:	f300 8154 	bgt.w	8008aa4 <_dtoa_r+0x73c>
 80087fc:	4b6b      	ldr	r3, [pc, #428]	; (80089ac <_dtoa_r+0x644>)
 80087fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	f280 80e3 	bge.w	80089d4 <_dtoa_r+0x66c>
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f300 80df 	bgt.w	80089d4 <_dtoa_r+0x66c>
 8008816:	f040 826d 	bne.w	8008cf4 <_dtoa_r+0x98c>
 800881a:	4b69      	ldr	r3, [pc, #420]	; (80089c0 <_dtoa_r+0x658>)
 800881c:	2200      	movs	r2, #0
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	f7f7 fef9 	bl	8000618 <__aeabi_dmul>
 8008826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800882a:	f7f8 f97b 	bl	8000b24 <__aeabi_dcmpge>
 800882e:	9e01      	ldr	r6, [sp, #4]
 8008830:	4637      	mov	r7, r6
 8008832:	2800      	cmp	r0, #0
 8008834:	f040 8243 	bne.w	8008cbe <_dtoa_r+0x956>
 8008838:	9d00      	ldr	r5, [sp, #0]
 800883a:	2331      	movs	r3, #49	; 0x31
 800883c:	f805 3b01 	strb.w	r3, [r5], #1
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	e23f      	b.n	8008cc6 <_dtoa_r+0x95e>
 8008846:	07f2      	lsls	r2, r6, #31
 8008848:	d505      	bpl.n	8008856 <_dtoa_r+0x4ee>
 800884a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884e:	f7f7 fee3 	bl	8000618 <__aeabi_dmul>
 8008852:	3501      	adds	r5, #1
 8008854:	2301      	movs	r3, #1
 8008856:	1076      	asrs	r6, r6, #1
 8008858:	3708      	adds	r7, #8
 800885a:	e76c      	b.n	8008736 <_dtoa_r+0x3ce>
 800885c:	2502      	movs	r5, #2
 800885e:	e76f      	b.n	8008740 <_dtoa_r+0x3d8>
 8008860:	9b01      	ldr	r3, [sp, #4]
 8008862:	f8cd a01c 	str.w	sl, [sp, #28]
 8008866:	930c      	str	r3, [sp, #48]	; 0x30
 8008868:	e78d      	b.n	8008786 <_dtoa_r+0x41e>
 800886a:	9900      	ldr	r1, [sp, #0]
 800886c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800886e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008870:	4b4e      	ldr	r3, [pc, #312]	; (80089ac <_dtoa_r+0x644>)
 8008872:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008876:	4401      	add	r1, r0
 8008878:	9102      	str	r1, [sp, #8]
 800887a:	9908      	ldr	r1, [sp, #32]
 800887c:	eeb0 8a47 	vmov.f32	s16, s14
 8008880:	eef0 8a67 	vmov.f32	s17, s15
 8008884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800888c:	2900      	cmp	r1, #0
 800888e:	d045      	beq.n	800891c <_dtoa_r+0x5b4>
 8008890:	494c      	ldr	r1, [pc, #304]	; (80089c4 <_dtoa_r+0x65c>)
 8008892:	2000      	movs	r0, #0
 8008894:	f7f7 ffea 	bl	800086c <__aeabi_ddiv>
 8008898:	ec53 2b18 	vmov	r2, r3, d8
 800889c:	f7f7 fd04 	bl	80002a8 <__aeabi_dsub>
 80088a0:	9d00      	ldr	r5, [sp, #0]
 80088a2:	ec41 0b18 	vmov	d8, r0, r1
 80088a6:	4639      	mov	r1, r7
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7f8 f965 	bl	8000b78 <__aeabi_d2iz>
 80088ae:	900c      	str	r0, [sp, #48]	; 0x30
 80088b0:	f7f7 fe48 	bl	8000544 <__aeabi_i2d>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4630      	mov	r0, r6
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f7 fcf4 	bl	80002a8 <__aeabi_dsub>
 80088c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088c2:	3330      	adds	r3, #48	; 0x30
 80088c4:	f805 3b01 	strb.w	r3, [r5], #1
 80088c8:	ec53 2b18 	vmov	r2, r3, d8
 80088cc:	4606      	mov	r6, r0
 80088ce:	460f      	mov	r7, r1
 80088d0:	f7f8 f914 	bl	8000afc <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d165      	bne.n	80089a4 <_dtoa_r+0x63c>
 80088d8:	4632      	mov	r2, r6
 80088da:	463b      	mov	r3, r7
 80088dc:	4935      	ldr	r1, [pc, #212]	; (80089b4 <_dtoa_r+0x64c>)
 80088de:	2000      	movs	r0, #0
 80088e0:	f7f7 fce2 	bl	80002a8 <__aeabi_dsub>
 80088e4:	ec53 2b18 	vmov	r2, r3, d8
 80088e8:	f7f8 f908 	bl	8000afc <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 80b9 	bne.w	8008a64 <_dtoa_r+0x6fc>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	429d      	cmp	r5, r3
 80088f6:	f43f af75 	beq.w	80087e4 <_dtoa_r+0x47c>
 80088fa:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <_dtoa_r+0x650>)
 80088fc:	ec51 0b18 	vmov	r0, r1, d8
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fe89 	bl	8000618 <__aeabi_dmul>
 8008906:	4b2c      	ldr	r3, [pc, #176]	; (80089b8 <_dtoa_r+0x650>)
 8008908:	ec41 0b18 	vmov	d8, r0, r1
 800890c:	2200      	movs	r2, #0
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 fe81 	bl	8000618 <__aeabi_dmul>
 8008916:	4606      	mov	r6, r0
 8008918:	460f      	mov	r7, r1
 800891a:	e7c4      	b.n	80088a6 <_dtoa_r+0x53e>
 800891c:	ec51 0b17 	vmov	r0, r1, d7
 8008920:	f7f7 fe7a 	bl	8000618 <__aeabi_dmul>
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	9d00      	ldr	r5, [sp, #0]
 8008928:	930c      	str	r3, [sp, #48]	; 0x30
 800892a:	ec41 0b18 	vmov	d8, r0, r1
 800892e:	4639      	mov	r1, r7
 8008930:	4630      	mov	r0, r6
 8008932:	f7f8 f921 	bl	8000b78 <__aeabi_d2iz>
 8008936:	9011      	str	r0, [sp, #68]	; 0x44
 8008938:	f7f7 fe04 	bl	8000544 <__aeabi_i2d>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fcb0 	bl	80002a8 <__aeabi_dsub>
 8008948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800894a:	3330      	adds	r3, #48	; 0x30
 800894c:	f805 3b01 	strb.w	r3, [r5], #1
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	429d      	cmp	r5, r3
 8008954:	4606      	mov	r6, r0
 8008956:	460f      	mov	r7, r1
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	d134      	bne.n	80089c8 <_dtoa_r+0x660>
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <_dtoa_r+0x65c>)
 8008960:	ec51 0b18 	vmov	r0, r1, d8
 8008964:	f7f7 fca2 	bl	80002ac <__adddf3>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f7f8 f8e2 	bl	8000b38 <__aeabi_dcmpgt>
 8008974:	2800      	cmp	r0, #0
 8008976:	d175      	bne.n	8008a64 <_dtoa_r+0x6fc>
 8008978:	ec53 2b18 	vmov	r2, r3, d8
 800897c:	4911      	ldr	r1, [pc, #68]	; (80089c4 <_dtoa_r+0x65c>)
 800897e:	2000      	movs	r0, #0
 8008980:	f7f7 fc92 	bl	80002a8 <__aeabi_dsub>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f8 f8b6 	bl	8000afc <__aeabi_dcmplt>
 8008990:	2800      	cmp	r0, #0
 8008992:	f43f af27 	beq.w	80087e4 <_dtoa_r+0x47c>
 8008996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008998:	1e6b      	subs	r3, r5, #1
 800899a:	930c      	str	r3, [sp, #48]	; 0x30
 800899c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a0:	2b30      	cmp	r3, #48	; 0x30
 80089a2:	d0f8      	beq.n	8008996 <_dtoa_r+0x62e>
 80089a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80089a8:	e04a      	b.n	8008a40 <_dtoa_r+0x6d8>
 80089aa:	bf00      	nop
 80089ac:	0800b448 	.word	0x0800b448
 80089b0:	0800b420 	.word	0x0800b420
 80089b4:	3ff00000 	.word	0x3ff00000
 80089b8:	40240000 	.word	0x40240000
 80089bc:	401c0000 	.word	0x401c0000
 80089c0:	40140000 	.word	0x40140000
 80089c4:	3fe00000 	.word	0x3fe00000
 80089c8:	4baf      	ldr	r3, [pc, #700]	; (8008c88 <_dtoa_r+0x920>)
 80089ca:	f7f7 fe25 	bl	8000618 <__aeabi_dmul>
 80089ce:	4606      	mov	r6, r0
 80089d0:	460f      	mov	r7, r1
 80089d2:	e7ac      	b.n	800892e <_dtoa_r+0x5c6>
 80089d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089d8:	9d00      	ldr	r5, [sp, #0]
 80089da:	4642      	mov	r2, r8
 80089dc:	464b      	mov	r3, r9
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	f7f7 ff43 	bl	800086c <__aeabi_ddiv>
 80089e6:	f7f8 f8c7 	bl	8000b78 <__aeabi_d2iz>
 80089ea:	9002      	str	r0, [sp, #8]
 80089ec:	f7f7 fdaa 	bl	8000544 <__aeabi_i2d>
 80089f0:	4642      	mov	r2, r8
 80089f2:	464b      	mov	r3, r9
 80089f4:	f7f7 fe10 	bl	8000618 <__aeabi_dmul>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 fc52 	bl	80002a8 <__aeabi_dsub>
 8008a04:	9e02      	ldr	r6, [sp, #8]
 8008a06:	9f01      	ldr	r7, [sp, #4]
 8008a08:	3630      	adds	r6, #48	; 0x30
 8008a0a:	f805 6b01 	strb.w	r6, [r5], #1
 8008a0e:	9e00      	ldr	r6, [sp, #0]
 8008a10:	1bae      	subs	r6, r5, r6
 8008a12:	42b7      	cmp	r7, r6
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	d137      	bne.n	8008a8a <_dtoa_r+0x722>
 8008a1a:	f7f7 fc47 	bl	80002ac <__adddf3>
 8008a1e:	4642      	mov	r2, r8
 8008a20:	464b      	mov	r3, r9
 8008a22:	4606      	mov	r6, r0
 8008a24:	460f      	mov	r7, r1
 8008a26:	f7f8 f887 	bl	8000b38 <__aeabi_dcmpgt>
 8008a2a:	b9c8      	cbnz	r0, 8008a60 <_dtoa_r+0x6f8>
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f8 f858 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a38:	b110      	cbz	r0, 8008a40 <_dtoa_r+0x6d8>
 8008a3a:	9b02      	ldr	r3, [sp, #8]
 8008a3c:	07d9      	lsls	r1, r3, #31
 8008a3e:	d40f      	bmi.n	8008a60 <_dtoa_r+0x6f8>
 8008a40:	4620      	mov	r0, r4
 8008a42:	4659      	mov	r1, fp
 8008a44:	f001 f876 	bl	8009b34 <_Bfree>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	702b      	strb	r3, [r5, #0]
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a4e:	f10a 0001 	add.w	r0, sl, #1
 8008a52:	6018      	str	r0, [r3, #0]
 8008a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f43f acd8 	beq.w	800840c <_dtoa_r+0xa4>
 8008a5c:	601d      	str	r5, [r3, #0]
 8008a5e:	e4d5      	b.n	800840c <_dtoa_r+0xa4>
 8008a60:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a64:	462b      	mov	r3, r5
 8008a66:	461d      	mov	r5, r3
 8008a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6c:	2a39      	cmp	r2, #57	; 0x39
 8008a6e:	d108      	bne.n	8008a82 <_dtoa_r+0x71a>
 8008a70:	9a00      	ldr	r2, [sp, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d1f7      	bne.n	8008a66 <_dtoa_r+0x6fe>
 8008a76:	9a07      	ldr	r2, [sp, #28]
 8008a78:	9900      	ldr	r1, [sp, #0]
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	9207      	str	r2, [sp, #28]
 8008a7e:	2230      	movs	r2, #48	; 0x30
 8008a80:	700a      	strb	r2, [r1, #0]
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	3201      	adds	r2, #1
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e78c      	b.n	80089a4 <_dtoa_r+0x63c>
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	; (8008c88 <_dtoa_r+0x920>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f7f7 fdc3 	bl	8000618 <__aeabi_dmul>
 8008a92:	2200      	movs	r2, #0
 8008a94:	2300      	movs	r3, #0
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	f7f8 f825 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d09b      	beq.n	80089da <_dtoa_r+0x672>
 8008aa2:	e7cd      	b.n	8008a40 <_dtoa_r+0x6d8>
 8008aa4:	9a08      	ldr	r2, [sp, #32]
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	f000 80c4 	beq.w	8008c34 <_dtoa_r+0x8cc>
 8008aac:	9a05      	ldr	r2, [sp, #20]
 8008aae:	2a01      	cmp	r2, #1
 8008ab0:	f300 80a8 	bgt.w	8008c04 <_dtoa_r+0x89c>
 8008ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	f000 80a0 	beq.w	8008bfc <_dtoa_r+0x894>
 8008abc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ac0:	9e06      	ldr	r6, [sp, #24]
 8008ac2:	4645      	mov	r5, r8
 8008ac4:	9a04      	ldr	r2, [sp, #16]
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	441a      	add	r2, r3
 8008aca:	4620      	mov	r0, r4
 8008acc:	4498      	add	r8, r3
 8008ace:	9204      	str	r2, [sp, #16]
 8008ad0:	f001 f936 	bl	8009d40 <__i2b>
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	dd0b      	ble.n	8008af2 <_dtoa_r+0x78a>
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd08      	ble.n	8008af2 <_dtoa_r+0x78a>
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	9a04      	ldr	r2, [sp, #16]
 8008ae4:	bfa8      	it	ge
 8008ae6:	462b      	movge	r3, r5
 8008ae8:	eba8 0803 	sub.w	r8, r8, r3
 8008aec:	1aed      	subs	r5, r5, r3
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	b1fb      	cbz	r3, 8008b36 <_dtoa_r+0x7ce>
 8008af6:	9b08      	ldr	r3, [sp, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 809f 	beq.w	8008c3c <_dtoa_r+0x8d4>
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	dd11      	ble.n	8008b26 <_dtoa_r+0x7be>
 8008b02:	4639      	mov	r1, r7
 8008b04:	4632      	mov	r2, r6
 8008b06:	4620      	mov	r0, r4
 8008b08:	f001 f9d6 	bl	8009eb8 <__pow5mult>
 8008b0c:	465a      	mov	r2, fp
 8008b0e:	4601      	mov	r1, r0
 8008b10:	4607      	mov	r7, r0
 8008b12:	4620      	mov	r0, r4
 8008b14:	f001 f92a 	bl	8009d6c <__multiply>
 8008b18:	4659      	mov	r1, fp
 8008b1a:	9007      	str	r0, [sp, #28]
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f001 f809 	bl	8009b34 <_Bfree>
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	469b      	mov	fp, r3
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	1b9a      	subs	r2, r3, r6
 8008b2a:	d004      	beq.n	8008b36 <_dtoa_r+0x7ce>
 8008b2c:	4659      	mov	r1, fp
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f001 f9c2 	bl	8009eb8 <__pow5mult>
 8008b34:	4683      	mov	fp, r0
 8008b36:	2101      	movs	r1, #1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f001 f901 	bl	8009d40 <__i2b>
 8008b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	4606      	mov	r6, r0
 8008b44:	dd7c      	ble.n	8008c40 <_dtoa_r+0x8d8>
 8008b46:	461a      	mov	r2, r3
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f001 f9b4 	bl	8009eb8 <__pow5mult>
 8008b50:	9b05      	ldr	r3, [sp, #20]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	4606      	mov	r6, r0
 8008b56:	dd76      	ble.n	8008c46 <_dtoa_r+0x8de>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9306      	str	r3, [sp, #24]
 8008b5c:	6933      	ldr	r3, [r6, #16]
 8008b5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b62:	6918      	ldr	r0, [r3, #16]
 8008b64:	f001 f89c 	bl	8009ca0 <__hi0bits>
 8008b68:	f1c0 0020 	rsb	r0, r0, #32
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	4418      	add	r0, r3
 8008b70:	f010 001f 	ands.w	r0, r0, #31
 8008b74:	f000 8086 	beq.w	8008c84 <_dtoa_r+0x91c>
 8008b78:	f1c0 0320 	rsb	r3, r0, #32
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	dd7f      	ble.n	8008c80 <_dtoa_r+0x918>
 8008b80:	f1c0 001c 	rsb	r0, r0, #28
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	4403      	add	r3, r0
 8008b88:	4480      	add	r8, r0
 8008b8a:	4405      	add	r5, r0
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	f1b8 0f00 	cmp.w	r8, #0
 8008b92:	dd05      	ble.n	8008ba0 <_dtoa_r+0x838>
 8008b94:	4659      	mov	r1, fp
 8008b96:	4642      	mov	r2, r8
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f001 f9e7 	bl	8009f6c <__lshift>
 8008b9e:	4683      	mov	fp, r0
 8008ba0:	9b04      	ldr	r3, [sp, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x84a>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4620      	mov	r0, r4
 8008bac:	f001 f9de 	bl	8009f6c <__lshift>
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d069      	beq.n	8008c8c <_dtoa_r+0x924>
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f001 fa42 	bl	800a044 <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	da63      	bge.n	8008c8c <_dtoa_r+0x924>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4659      	mov	r1, fp
 8008bc8:	220a      	movs	r2, #10
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 ffd4 	bl	8009b78 <__multadd>
 8008bd0:	9b08      	ldr	r3, [sp, #32]
 8008bd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bd6:	4683      	mov	fp, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 818f 	beq.w	8008efc <_dtoa_r+0xb94>
 8008bde:	4639      	mov	r1, r7
 8008be0:	2300      	movs	r3, #0
 8008be2:	220a      	movs	r2, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 ffc7 	bl	8009b78 <__multadd>
 8008bea:	f1b9 0f00 	cmp.w	r9, #0
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f300 808e 	bgt.w	8008d10 <_dtoa_r+0x9a8>
 8008bf4:	9b05      	ldr	r3, [sp, #20]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	dc50      	bgt.n	8008c9c <_dtoa_r+0x934>
 8008bfa:	e089      	b.n	8008d10 <_dtoa_r+0x9a8>
 8008bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c02:	e75d      	b.n	8008ac0 <_dtoa_r+0x758>
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	1e5e      	subs	r6, r3, #1
 8008c08:	9b06      	ldr	r3, [sp, #24]
 8008c0a:	42b3      	cmp	r3, r6
 8008c0c:	bfbf      	itttt	lt
 8008c0e:	9b06      	ldrlt	r3, [sp, #24]
 8008c10:	9606      	strlt	r6, [sp, #24]
 8008c12:	1af2      	sublt	r2, r6, r3
 8008c14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008c16:	bfb6      	itet	lt
 8008c18:	189b      	addlt	r3, r3, r2
 8008c1a:	1b9e      	subge	r6, r3, r6
 8008c1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	bfb8      	it	lt
 8008c22:	2600      	movlt	r6, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bfb5      	itete	lt
 8008c28:	eba8 0503 	sublt.w	r5, r8, r3
 8008c2c:	9b01      	ldrge	r3, [sp, #4]
 8008c2e:	2300      	movlt	r3, #0
 8008c30:	4645      	movge	r5, r8
 8008c32:	e747      	b.n	8008ac4 <_dtoa_r+0x75c>
 8008c34:	9e06      	ldr	r6, [sp, #24]
 8008c36:	9f08      	ldr	r7, [sp, #32]
 8008c38:	4645      	mov	r5, r8
 8008c3a:	e74c      	b.n	8008ad6 <_dtoa_r+0x76e>
 8008c3c:	9a06      	ldr	r2, [sp, #24]
 8008c3e:	e775      	b.n	8008b2c <_dtoa_r+0x7c4>
 8008c40:	9b05      	ldr	r3, [sp, #20]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	dc18      	bgt.n	8008c78 <_dtoa_r+0x910>
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	b9b3      	cbnz	r3, 8008c78 <_dtoa_r+0x910>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c50:	b9a3      	cbnz	r3, 8008c7c <_dtoa_r+0x914>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c58:	0d1b      	lsrs	r3, r3, #20
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	b12b      	cbz	r3, 8008c6a <_dtoa_r+0x902>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	f108 0801 	add.w	r8, r8, #1
 8008c68:	2301      	movs	r3, #1
 8008c6a:	9306      	str	r3, [sp, #24]
 8008c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f47f af74 	bne.w	8008b5c <_dtoa_r+0x7f4>
 8008c74:	2001      	movs	r0, #1
 8008c76:	e779      	b.n	8008b6c <_dtoa_r+0x804>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e7f6      	b.n	8008c6a <_dtoa_r+0x902>
 8008c7c:	9b02      	ldr	r3, [sp, #8]
 8008c7e:	e7f4      	b.n	8008c6a <_dtoa_r+0x902>
 8008c80:	d085      	beq.n	8008b8e <_dtoa_r+0x826>
 8008c82:	4618      	mov	r0, r3
 8008c84:	301c      	adds	r0, #28
 8008c86:	e77d      	b.n	8008b84 <_dtoa_r+0x81c>
 8008c88:	40240000 	.word	0x40240000
 8008c8c:	9b01      	ldr	r3, [sp, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dc38      	bgt.n	8008d04 <_dtoa_r+0x99c>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	dd35      	ble.n	8008d04 <_dtoa_r+0x99c>
 8008c98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	d10d      	bne.n	8008cbe <_dtoa_r+0x956>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	2205      	movs	r2, #5
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 ff65 	bl	8009b78 <__multadd>
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	4658      	mov	r0, fp
 8008cb4:	f001 f9c6 	bl	800a044 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f73f adbd 	bgt.w	8008838 <_dtoa_r+0x4d0>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	9d00      	ldr	r5, [sp, #0]
 8008cc2:	ea6f 0a03 	mvn.w	sl, r3
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 ff31 	bl	8009b34 <_Bfree>
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	f43f aeb4 	beq.w	8008a40 <_dtoa_r+0x6d8>
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d005      	beq.n	8008cea <_dtoa_r+0x982>
 8008cde:	45b8      	cmp	r8, r7
 8008ce0:	d003      	beq.n	8008cea <_dtoa_r+0x982>
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 ff25 	bl	8009b34 <_Bfree>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 ff21 	bl	8009b34 <_Bfree>
 8008cf2:	e6a5      	b.n	8008a40 <_dtoa_r+0x6d8>
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	4637      	mov	r7, r6
 8008cf8:	e7e1      	b.n	8008cbe <_dtoa_r+0x956>
 8008cfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008cfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d00:	4637      	mov	r7, r6
 8008d02:	e599      	b.n	8008838 <_dtoa_r+0x4d0>
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80fd 	beq.w	8008f0a <_dtoa_r+0xba2>
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	dd05      	ble.n	8008d20 <_dtoa_r+0x9b8>
 8008d14:	4639      	mov	r1, r7
 8008d16:	462a      	mov	r2, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f001 f927 	bl	8009f6c <__lshift>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d05c      	beq.n	8008de0 <_dtoa_r+0xa78>
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fec3 	bl	8009ab4 <_Balloc>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_dtoa_r+0x9d6>
 8008d32:	4b80      	ldr	r3, [pc, #512]	; (8008f34 <_dtoa_r+0xbcc>)
 8008d34:	4602      	mov	r2, r0
 8008d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d3a:	f7ff bb2e 	b.w	800839a <_dtoa_r+0x32>
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	3202      	adds	r2, #2
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f107 010c 	add.w	r1, r7, #12
 8008d48:	300c      	adds	r0, #12
 8008d4a:	f000 fea5 	bl	8009a98 <memcpy>
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f001 f90a 	bl	8009f6c <__lshift>
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	444b      	add	r3, r9
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	46b8      	mov	r8, r7
 8008d6c:	9306      	str	r3, [sp, #24]
 8008d6e:	4607      	mov	r7, r0
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	4631      	mov	r1, r6
 8008d74:	3b01      	subs	r3, #1
 8008d76:	4658      	mov	r0, fp
 8008d78:	9302      	str	r3, [sp, #8]
 8008d7a:	f7ff fa67 	bl	800824c <quorem>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	3330      	adds	r3, #48	; 0x30
 8008d82:	9004      	str	r0, [sp, #16]
 8008d84:	4641      	mov	r1, r8
 8008d86:	4658      	mov	r0, fp
 8008d88:	9308      	str	r3, [sp, #32]
 8008d8a:	f001 f95b 	bl	800a044 <__mcmp>
 8008d8e:	463a      	mov	r2, r7
 8008d90:	4681      	mov	r9, r0
 8008d92:	4631      	mov	r1, r6
 8008d94:	4620      	mov	r0, r4
 8008d96:	f001 f971 	bl	800a07c <__mdiff>
 8008d9a:	68c2      	ldr	r2, [r0, #12]
 8008d9c:	9b08      	ldr	r3, [sp, #32]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	bb02      	cbnz	r2, 8008de4 <_dtoa_r+0xa7c>
 8008da2:	4601      	mov	r1, r0
 8008da4:	4658      	mov	r0, fp
 8008da6:	f001 f94d 	bl	800a044 <__mcmp>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	4602      	mov	r2, r0
 8008dae:	4629      	mov	r1, r5
 8008db0:	4620      	mov	r0, r4
 8008db2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008db6:	f000 febd 	bl	8009b34 <_Bfree>
 8008dba:	9b05      	ldr	r3, [sp, #20]
 8008dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbe:	9d01      	ldr	r5, [sp, #4]
 8008dc0:	ea43 0102 	orr.w	r1, r3, r2
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	9b08      	ldr	r3, [sp, #32]
 8008dca:	d10d      	bne.n	8008de8 <_dtoa_r+0xa80>
 8008dcc:	2b39      	cmp	r3, #57	; 0x39
 8008dce:	d029      	beq.n	8008e24 <_dtoa_r+0xabc>
 8008dd0:	f1b9 0f00 	cmp.w	r9, #0
 8008dd4:	dd01      	ble.n	8008dda <_dtoa_r+0xa72>
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	3331      	adds	r3, #49	; 0x31
 8008dda:	9a02      	ldr	r2, [sp, #8]
 8008ddc:	7013      	strb	r3, [r2, #0]
 8008dde:	e774      	b.n	8008cca <_dtoa_r+0x962>
 8008de0:	4638      	mov	r0, r7
 8008de2:	e7b9      	b.n	8008d58 <_dtoa_r+0x9f0>
 8008de4:	2201      	movs	r2, #1
 8008de6:	e7e2      	b.n	8008dae <_dtoa_r+0xa46>
 8008de8:	f1b9 0f00 	cmp.w	r9, #0
 8008dec:	db06      	blt.n	8008dfc <_dtoa_r+0xa94>
 8008dee:	9905      	ldr	r1, [sp, #20]
 8008df0:	ea41 0909 	orr.w	r9, r1, r9
 8008df4:	9906      	ldr	r1, [sp, #24]
 8008df6:	ea59 0101 	orrs.w	r1, r9, r1
 8008dfa:	d120      	bne.n	8008e3e <_dtoa_r+0xad6>
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	ddec      	ble.n	8008dda <_dtoa_r+0xa72>
 8008e00:	4659      	mov	r1, fp
 8008e02:	2201      	movs	r2, #1
 8008e04:	4620      	mov	r0, r4
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	f001 f8b0 	bl	8009f6c <__lshift>
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4683      	mov	fp, r0
 8008e10:	f001 f918 	bl	800a044 <__mcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	dc02      	bgt.n	8008e20 <_dtoa_r+0xab8>
 8008e1a:	d1de      	bne.n	8008dda <_dtoa_r+0xa72>
 8008e1c:	07da      	lsls	r2, r3, #31
 8008e1e:	d5dc      	bpl.n	8008dda <_dtoa_r+0xa72>
 8008e20:	2b39      	cmp	r3, #57	; 0x39
 8008e22:	d1d8      	bne.n	8008dd6 <_dtoa_r+0xa6e>
 8008e24:	9a02      	ldr	r2, [sp, #8]
 8008e26:	2339      	movs	r3, #57	; 0x39
 8008e28:	7013      	strb	r3, [r2, #0]
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	461d      	mov	r5, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e34:	2a39      	cmp	r2, #57	; 0x39
 8008e36:	d050      	beq.n	8008eda <_dtoa_r+0xb72>
 8008e38:	3201      	adds	r2, #1
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e745      	b.n	8008cca <_dtoa_r+0x962>
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	dd03      	ble.n	8008e4a <_dtoa_r+0xae2>
 8008e42:	2b39      	cmp	r3, #57	; 0x39
 8008e44:	d0ee      	beq.n	8008e24 <_dtoa_r+0xabc>
 8008e46:	3301      	adds	r3, #1
 8008e48:	e7c7      	b.n	8008dda <_dtoa_r+0xa72>
 8008e4a:	9a01      	ldr	r2, [sp, #4]
 8008e4c:	9907      	ldr	r1, [sp, #28]
 8008e4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e52:	428a      	cmp	r2, r1
 8008e54:	d02a      	beq.n	8008eac <_dtoa_r+0xb44>
 8008e56:	4659      	mov	r1, fp
 8008e58:	2300      	movs	r3, #0
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 fe8b 	bl	8009b78 <__multadd>
 8008e62:	45b8      	cmp	r8, r7
 8008e64:	4683      	mov	fp, r0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	f04f 020a 	mov.w	r2, #10
 8008e6e:	4641      	mov	r1, r8
 8008e70:	4620      	mov	r0, r4
 8008e72:	d107      	bne.n	8008e84 <_dtoa_r+0xb1c>
 8008e74:	f000 fe80 	bl	8009b78 <__multadd>
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	9b01      	ldr	r3, [sp, #4]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	e775      	b.n	8008d70 <_dtoa_r+0xa08>
 8008e84:	f000 fe78 	bl	8009b78 <__multadd>
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	220a      	movs	r2, #10
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fe71 	bl	8009b78 <__multadd>
 8008e96:	4607      	mov	r7, r0
 8008e98:	e7f0      	b.n	8008e7c <_dtoa_r+0xb14>
 8008e9a:	f1b9 0f00 	cmp.w	r9, #0
 8008e9e:	9a00      	ldr	r2, [sp, #0]
 8008ea0:	bfcc      	ite	gt
 8008ea2:	464d      	movgt	r5, r9
 8008ea4:	2501      	movle	r5, #1
 8008ea6:	4415      	add	r5, r2
 8008ea8:	f04f 0800 	mov.w	r8, #0
 8008eac:	4659      	mov	r1, fp
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	f001 f85a 	bl	8009f6c <__lshift>
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4683      	mov	fp, r0
 8008ebc:	f001 f8c2 	bl	800a044 <__mcmp>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	dcb2      	bgt.n	8008e2a <_dtoa_r+0xac2>
 8008ec4:	d102      	bne.n	8008ecc <_dtoa_r+0xb64>
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	07db      	lsls	r3, r3, #31
 8008eca:	d4ae      	bmi.n	8008e2a <_dtoa_r+0xac2>
 8008ecc:	462b      	mov	r3, r5
 8008ece:	461d      	mov	r5, r3
 8008ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ed4:	2a30      	cmp	r2, #48	; 0x30
 8008ed6:	d0fa      	beq.n	8008ece <_dtoa_r+0xb66>
 8008ed8:	e6f7      	b.n	8008cca <_dtoa_r+0x962>
 8008eda:	9a00      	ldr	r2, [sp, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d1a5      	bne.n	8008e2c <_dtoa_r+0xac4>
 8008ee0:	f10a 0a01 	add.w	sl, sl, #1
 8008ee4:	2331      	movs	r3, #49	; 0x31
 8008ee6:	e779      	b.n	8008ddc <_dtoa_r+0xa74>
 8008ee8:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <_dtoa_r+0xbd0>)
 8008eea:	f7ff baaf 	b.w	800844c <_dtoa_r+0xe4>
 8008eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f47f aa86 	bne.w	8008402 <_dtoa_r+0x9a>
 8008ef6:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <_dtoa_r+0xbd4>)
 8008ef8:	f7ff baa8 	b.w	800844c <_dtoa_r+0xe4>
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	dc03      	bgt.n	8008f0a <_dtoa_r+0xba2>
 8008f02:	9b05      	ldr	r3, [sp, #20]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	f73f aec9 	bgt.w	8008c9c <_dtoa_r+0x934>
 8008f0a:	9d00      	ldr	r5, [sp, #0]
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f7ff f99c 	bl	800824c <quorem>
 8008f14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f18:	f805 3b01 	strb.w	r3, [r5], #1
 8008f1c:	9a00      	ldr	r2, [sp, #0]
 8008f1e:	1aaa      	subs	r2, r5, r2
 8008f20:	4591      	cmp	r9, r2
 8008f22:	ddba      	ble.n	8008e9a <_dtoa_r+0xb32>
 8008f24:	4659      	mov	r1, fp
 8008f26:	2300      	movs	r3, #0
 8008f28:	220a      	movs	r2, #10
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fe24 	bl	8009b78 <__multadd>
 8008f30:	4683      	mov	fp, r0
 8008f32:	e7eb      	b.n	8008f0c <_dtoa_r+0xba4>
 8008f34:	0800b2cc 	.word	0x0800b2cc
 8008f38:	0800b0c8 	.word	0x0800b0c8
 8008f3c:	0800b249 	.word	0x0800b249

08008f40 <__sflush_r>:
 8008f40:	898a      	ldrh	r2, [r1, #12]
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	0710      	lsls	r0, r2, #28
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	d458      	bmi.n	8009000 <__sflush_r+0xc0>
 8008f4e:	684b      	ldr	r3, [r1, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dc05      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc02      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d0f9      	beq.n	8008f5a <__sflush_r+0x1a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	d032      	beq.n	8008fd8 <__sflush_r+0x98>
 8008f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	075a      	lsls	r2, r3, #29
 8008f78:	d505      	bpl.n	8008f86 <__sflush_r+0x46>
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	1ac0      	subs	r0, r0, r3
 8008f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f80:	b10b      	cbz	r3, 8008f86 <__sflush_r+0x46>
 8008f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f84:	1ac0      	subs	r0, r0, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b0      	blx	r6
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	d106      	bne.n	8008fa6 <__sflush_r+0x66>
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	291d      	cmp	r1, #29
 8008f9c:	d82c      	bhi.n	8008ff8 <__sflush_r+0xb8>
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	; (8009048 <__sflush_r+0x108>)
 8008fa0:	40ca      	lsrs	r2, r1
 8008fa2:	07d6      	lsls	r6, r2, #31
 8008fa4:	d528      	bpl.n	8008ff8 <__sflush_r+0xb8>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6062      	str	r2, [r4, #4]
 8008faa:	04d9      	lsls	r1, r3, #19
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	d504      	bpl.n	8008fbc <__sflush_r+0x7c>
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0x7a>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b903      	cbnz	r3, 8008fbc <__sflush_r+0x7c>
 8008fba:	6560      	str	r0, [r4, #84]	; 0x54
 8008fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fbe:	602f      	str	r7, [r5, #0]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d0ca      	beq.n	8008f5a <__sflush_r+0x1a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__sflush_r+0x92>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f001 fa3b 	bl	800a448 <_free_r>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd6:	e7c1      	b.n	8008f5c <__sflush_r+0x1c>
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c41      	adds	r1, r0, #1
 8008fe2:	d1c7      	bne.n	8008f74 <__sflush_r+0x34>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c4      	beq.n	8008f74 <__sflush_r+0x34>
 8008fea:	2b1d      	cmp	r3, #29
 8008fec:	d001      	beq.n	8008ff2 <__sflush_r+0xb2>
 8008fee:	2b16      	cmp	r3, #22
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0xb6>
 8008ff2:	602f      	str	r7, [r5, #0]
 8008ff4:	e7b1      	b.n	8008f5a <__sflush_r+0x1a>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ad      	b.n	8008f5c <__sflush_r+0x1c>
 8009000:	690f      	ldr	r7, [r1, #16]
 8009002:	2f00      	cmp	r7, #0
 8009004:	d0a9      	beq.n	8008f5a <__sflush_r+0x1a>
 8009006:	0793      	lsls	r3, r2, #30
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	bf08      	it	eq
 800900c:	694b      	ldreq	r3, [r1, #20]
 800900e:	600f      	str	r7, [r1, #0]
 8009010:	bf18      	it	ne
 8009012:	2300      	movne	r3, #0
 8009014:	eba6 0807 	sub.w	r8, r6, r7
 8009018:	608b      	str	r3, [r1, #8]
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	dd9c      	ble.n	8008f5a <__sflush_r+0x1a>
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009024:	4643      	mov	r3, r8
 8009026:	463a      	mov	r2, r7
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	2800      	cmp	r0, #0
 800902e:	dc06      	bgt.n	800903e <__sflush_r+0xfe>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800903c:	e78e      	b.n	8008f5c <__sflush_r+0x1c>
 800903e:	4407      	add	r7, r0
 8009040:	eba8 0800 	sub.w	r8, r8, r0
 8009044:	e7e9      	b.n	800901a <__sflush_r+0xda>
 8009046:	bf00      	nop
 8009048:	20400001 	.word	0x20400001

0800904c <_fflush_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	690b      	ldr	r3, [r1, #16]
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b913      	cbnz	r3, 800905c <_fflush_r+0x10>
 8009056:	2500      	movs	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	b118      	cbz	r0, 8009066 <_fflush_r+0x1a>
 800905e:	6983      	ldr	r3, [r0, #24]
 8009060:	b90b      	cbnz	r3, 8009066 <_fflush_r+0x1a>
 8009062:	f000 f887 	bl	8009174 <__sinit>
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <_fflush_r+0x6c>)
 8009068:	429c      	cmp	r4, r3
 800906a:	d11b      	bne.n	80090a4 <_fflush_r+0x58>
 800906c:	686c      	ldr	r4, [r5, #4]
 800906e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0ef      	beq.n	8009056 <_fflush_r+0xa>
 8009076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009078:	07d0      	lsls	r0, r2, #31
 800907a:	d404      	bmi.n	8009086 <_fflush_r+0x3a>
 800907c:	0599      	lsls	r1, r3, #22
 800907e:	d402      	bmi.n	8009086 <_fflush_r+0x3a>
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f000 fc88 	bl	8009996 <__retarget_lock_acquire_recursive>
 8009086:	4628      	mov	r0, r5
 8009088:	4621      	mov	r1, r4
 800908a:	f7ff ff59 	bl	8008f40 <__sflush_r>
 800908e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009090:	07da      	lsls	r2, r3, #31
 8009092:	4605      	mov	r5, r0
 8009094:	d4e0      	bmi.n	8009058 <_fflush_r+0xc>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	059b      	lsls	r3, r3, #22
 800909a:	d4dd      	bmi.n	8009058 <_fflush_r+0xc>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f000 fc7b 	bl	8009998 <__retarget_lock_release_recursive>
 80090a2:	e7d9      	b.n	8009058 <_fflush_r+0xc>
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <_fflush_r+0x70>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <_fflush_r+0x62>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7df      	b.n	800906e <_fflush_r+0x22>
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <_fflush_r+0x74>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7da      	b.n	800906e <_fflush_r+0x22>
 80090b8:	0800b300 	.word	0x0800b300
 80090bc:	0800b320 	.word	0x0800b320
 80090c0:	0800b2e0 	.word	0x0800b2e0

080090c4 <std>:
 80090c4:	2300      	movs	r3, #0
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	e9c0 3300 	strd	r3, r3, [r0]
 80090ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d2:	6083      	str	r3, [r0, #8]
 80090d4:	8181      	strh	r1, [r0, #12]
 80090d6:	6643      	str	r3, [r0, #100]	; 0x64
 80090d8:	81c2      	strh	r2, [r0, #14]
 80090da:	6183      	str	r3, [r0, #24]
 80090dc:	4619      	mov	r1, r3
 80090de:	2208      	movs	r2, #8
 80090e0:	305c      	adds	r0, #92	; 0x5c
 80090e2:	f7fd fa0b 	bl	80064fc <memset>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x38>)
 80090e8:	6263      	str	r3, [r4, #36]	; 0x24
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x3c>)
 80090ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x40>)
 80090f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x44>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	6323      	str	r3, [r4, #48]	; 0x30
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	0800ab39 	.word	0x0800ab39
 8009100:	0800ab5b 	.word	0x0800ab5b
 8009104:	0800ab93 	.word	0x0800ab93
 8009108:	0800abb7 	.word	0x0800abb7

0800910c <_cleanup_r>:
 800910c:	4901      	ldr	r1, [pc, #4]	; (8009114 <_cleanup_r+0x8>)
 800910e:	f000 b8af 	b.w	8009270 <_fwalk_reent>
 8009112:	bf00      	nop
 8009114:	0800904d 	.word	0x0800904d

08009118 <__sfmoreglue>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	1e4a      	subs	r2, r1, #1
 800911c:	2568      	movs	r5, #104	; 0x68
 800911e:	4355      	muls	r5, r2
 8009120:	460e      	mov	r6, r1
 8009122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009126:	f001 f9df 	bl	800a4e8 <_malloc_r>
 800912a:	4604      	mov	r4, r0
 800912c:	b140      	cbz	r0, 8009140 <__sfmoreglue+0x28>
 800912e:	2100      	movs	r1, #0
 8009130:	e9c0 1600 	strd	r1, r6, [r0]
 8009134:	300c      	adds	r0, #12
 8009136:	60a0      	str	r0, [r4, #8]
 8009138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800913c:	f7fd f9de 	bl	80064fc <memset>
 8009140:	4620      	mov	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}

08009144 <__sfp_lock_acquire>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__sfp_lock_acquire+0x8>)
 8009146:	f000 bc26 	b.w	8009996 <__retarget_lock_acquire_recursive>
 800914a:	bf00      	nop
 800914c:	2000048c 	.word	0x2000048c

08009150 <__sfp_lock_release>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__sfp_lock_release+0x8>)
 8009152:	f000 bc21 	b.w	8009998 <__retarget_lock_release_recursive>
 8009156:	bf00      	nop
 8009158:	2000048c 	.word	0x2000048c

0800915c <__sinit_lock_acquire>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sinit_lock_acquire+0x8>)
 800915e:	f000 bc1a 	b.w	8009996 <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	20000487 	.word	0x20000487

08009168 <__sinit_lock_release>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__sinit_lock_release+0x8>)
 800916a:	f000 bc15 	b.w	8009998 <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	20000487 	.word	0x20000487

08009174 <__sinit>:
 8009174:	b510      	push	{r4, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	f7ff fff0 	bl	800915c <__sinit_lock_acquire>
 800917c:	69a3      	ldr	r3, [r4, #24]
 800917e:	b11b      	cbz	r3, 8009188 <__sinit+0x14>
 8009180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009184:	f7ff bff0 	b.w	8009168 <__sinit_lock_release>
 8009188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800918c:	6523      	str	r3, [r4, #80]	; 0x50
 800918e:	4b13      	ldr	r3, [pc, #76]	; (80091dc <__sinit+0x68>)
 8009190:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <__sinit+0x6c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	62a2      	str	r2, [r4, #40]	; 0x28
 8009196:	42a3      	cmp	r3, r4
 8009198:	bf04      	itt	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	61a3      	streq	r3, [r4, #24]
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 f820 	bl	80091e4 <__sfp>
 80091a4:	6060      	str	r0, [r4, #4]
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f81c 	bl	80091e4 <__sfp>
 80091ac:	60a0      	str	r0, [r4, #8]
 80091ae:	4620      	mov	r0, r4
 80091b0:	f000 f818 	bl	80091e4 <__sfp>
 80091b4:	2200      	movs	r2, #0
 80091b6:	60e0      	str	r0, [r4, #12]
 80091b8:	2104      	movs	r1, #4
 80091ba:	6860      	ldr	r0, [r4, #4]
 80091bc:	f7ff ff82 	bl	80090c4 <std>
 80091c0:	68a0      	ldr	r0, [r4, #8]
 80091c2:	2201      	movs	r2, #1
 80091c4:	2109      	movs	r1, #9
 80091c6:	f7ff ff7d 	bl	80090c4 <std>
 80091ca:	68e0      	ldr	r0, [r4, #12]
 80091cc:	2202      	movs	r2, #2
 80091ce:	2112      	movs	r1, #18
 80091d0:	f7ff ff78 	bl	80090c4 <std>
 80091d4:	2301      	movs	r3, #1
 80091d6:	61a3      	str	r3, [r4, #24]
 80091d8:	e7d2      	b.n	8009180 <__sinit+0xc>
 80091da:	bf00      	nop
 80091dc:	0800b0b4 	.word	0x0800b0b4
 80091e0:	0800910d 	.word	0x0800910d

080091e4 <__sfp>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	4607      	mov	r7, r0
 80091e8:	f7ff ffac 	bl	8009144 <__sfp_lock_acquire>
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <__sfp+0x84>)
 80091ee:	681e      	ldr	r6, [r3, #0]
 80091f0:	69b3      	ldr	r3, [r6, #24]
 80091f2:	b913      	cbnz	r3, 80091fa <__sfp+0x16>
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff ffbd 	bl	8009174 <__sinit>
 80091fa:	3648      	adds	r6, #72	; 0x48
 80091fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	d503      	bpl.n	800920c <__sfp+0x28>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	b30b      	cbz	r3, 800924c <__sfp+0x68>
 8009208:	6836      	ldr	r6, [r6, #0]
 800920a:	e7f7      	b.n	80091fc <__sfp+0x18>
 800920c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009210:	b9d5      	cbnz	r5, 8009248 <__sfp+0x64>
 8009212:	4b16      	ldr	r3, [pc, #88]	; (800926c <__sfp+0x88>)
 8009214:	60e3      	str	r3, [r4, #12]
 8009216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800921a:	6665      	str	r5, [r4, #100]	; 0x64
 800921c:	f000 fbba 	bl	8009994 <__retarget_lock_init_recursive>
 8009220:	f7ff ff96 	bl	8009150 <__sfp_lock_release>
 8009224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800922c:	6025      	str	r5, [r4, #0]
 800922e:	61a5      	str	r5, [r4, #24]
 8009230:	2208      	movs	r2, #8
 8009232:	4629      	mov	r1, r5
 8009234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009238:	f7fd f960 	bl	80064fc <memset>
 800923c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009244:	4620      	mov	r0, r4
 8009246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009248:	3468      	adds	r4, #104	; 0x68
 800924a:	e7d9      	b.n	8009200 <__sfp+0x1c>
 800924c:	2104      	movs	r1, #4
 800924e:	4638      	mov	r0, r7
 8009250:	f7ff ff62 	bl	8009118 <__sfmoreglue>
 8009254:	4604      	mov	r4, r0
 8009256:	6030      	str	r0, [r6, #0]
 8009258:	2800      	cmp	r0, #0
 800925a:	d1d5      	bne.n	8009208 <__sfp+0x24>
 800925c:	f7ff ff78 	bl	8009150 <__sfp_lock_release>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	e7ee      	b.n	8009244 <__sfp+0x60>
 8009266:	bf00      	nop
 8009268:	0800b0b4 	.word	0x0800b0b4
 800926c:	ffff0001 	.word	0xffff0001

08009270 <_fwalk_reent>:
 8009270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009274:	4606      	mov	r6, r0
 8009276:	4688      	mov	r8, r1
 8009278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800927c:	2700      	movs	r7, #0
 800927e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009282:	f1b9 0901 	subs.w	r9, r9, #1
 8009286:	d505      	bpl.n	8009294 <_fwalk_reent+0x24>
 8009288:	6824      	ldr	r4, [r4, #0]
 800928a:	2c00      	cmp	r4, #0
 800928c:	d1f7      	bne.n	800927e <_fwalk_reent+0xe>
 800928e:	4638      	mov	r0, r7
 8009290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009294:	89ab      	ldrh	r3, [r5, #12]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d907      	bls.n	80092aa <_fwalk_reent+0x3a>
 800929a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800929e:	3301      	adds	r3, #1
 80092a0:	d003      	beq.n	80092aa <_fwalk_reent+0x3a>
 80092a2:	4629      	mov	r1, r5
 80092a4:	4630      	mov	r0, r6
 80092a6:	47c0      	blx	r8
 80092a8:	4307      	orrs	r7, r0
 80092aa:	3568      	adds	r5, #104	; 0x68
 80092ac:	e7e9      	b.n	8009282 <_fwalk_reent+0x12>

080092ae <rshift>:
 80092ae:	6903      	ldr	r3, [r0, #16]
 80092b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092bc:	f100 0414 	add.w	r4, r0, #20
 80092c0:	dd45      	ble.n	800934e <rshift+0xa0>
 80092c2:	f011 011f 	ands.w	r1, r1, #31
 80092c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092ce:	d10c      	bne.n	80092ea <rshift+0x3c>
 80092d0:	f100 0710 	add.w	r7, r0, #16
 80092d4:	4629      	mov	r1, r5
 80092d6:	42b1      	cmp	r1, r6
 80092d8:	d334      	bcc.n	8009344 <rshift+0x96>
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	1eea      	subs	r2, r5, #3
 80092e0:	4296      	cmp	r6, r2
 80092e2:	bf38      	it	cc
 80092e4:	2300      	movcc	r3, #0
 80092e6:	4423      	add	r3, r4
 80092e8:	e015      	b.n	8009316 <rshift+0x68>
 80092ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80092ee:	f1c1 0820 	rsb	r8, r1, #32
 80092f2:	40cf      	lsrs	r7, r1
 80092f4:	f105 0e04 	add.w	lr, r5, #4
 80092f8:	46a1      	mov	r9, r4
 80092fa:	4576      	cmp	r6, lr
 80092fc:	46f4      	mov	ip, lr
 80092fe:	d815      	bhi.n	800932c <rshift+0x7e>
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	009a      	lsls	r2, r3, #2
 8009304:	3a04      	subs	r2, #4
 8009306:	3501      	adds	r5, #1
 8009308:	42ae      	cmp	r6, r5
 800930a:	bf38      	it	cc
 800930c:	2200      	movcc	r2, #0
 800930e:	18a3      	adds	r3, r4, r2
 8009310:	50a7      	str	r7, [r4, r2]
 8009312:	b107      	cbz	r7, 8009316 <rshift+0x68>
 8009314:	3304      	adds	r3, #4
 8009316:	1b1a      	subs	r2, r3, r4
 8009318:	42a3      	cmp	r3, r4
 800931a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800931e:	bf08      	it	eq
 8009320:	2300      	moveq	r3, #0
 8009322:	6102      	str	r2, [r0, #16]
 8009324:	bf08      	it	eq
 8009326:	6143      	streq	r3, [r0, #20]
 8009328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932c:	f8dc c000 	ldr.w	ip, [ip]
 8009330:	fa0c fc08 	lsl.w	ip, ip, r8
 8009334:	ea4c 0707 	orr.w	r7, ip, r7
 8009338:	f849 7b04 	str.w	r7, [r9], #4
 800933c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009340:	40cf      	lsrs	r7, r1
 8009342:	e7da      	b.n	80092fa <rshift+0x4c>
 8009344:	f851 cb04 	ldr.w	ip, [r1], #4
 8009348:	f847 cf04 	str.w	ip, [r7, #4]!
 800934c:	e7c3      	b.n	80092d6 <rshift+0x28>
 800934e:	4623      	mov	r3, r4
 8009350:	e7e1      	b.n	8009316 <rshift+0x68>

08009352 <__hexdig_fun>:
 8009352:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009356:	2b09      	cmp	r3, #9
 8009358:	d802      	bhi.n	8009360 <__hexdig_fun+0xe>
 800935a:	3820      	subs	r0, #32
 800935c:	b2c0      	uxtb	r0, r0
 800935e:	4770      	bx	lr
 8009360:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009364:	2b05      	cmp	r3, #5
 8009366:	d801      	bhi.n	800936c <__hexdig_fun+0x1a>
 8009368:	3847      	subs	r0, #71	; 0x47
 800936a:	e7f7      	b.n	800935c <__hexdig_fun+0xa>
 800936c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009370:	2b05      	cmp	r3, #5
 8009372:	d801      	bhi.n	8009378 <__hexdig_fun+0x26>
 8009374:	3827      	subs	r0, #39	; 0x27
 8009376:	e7f1      	b.n	800935c <__hexdig_fun+0xa>
 8009378:	2000      	movs	r0, #0
 800937a:	4770      	bx	lr

0800937c <__gethex>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	ed2d 8b02 	vpush	{d8}
 8009384:	b089      	sub	sp, #36	; 0x24
 8009386:	ee08 0a10 	vmov	s16, r0
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	4bbc      	ldr	r3, [pc, #752]	; (8009680 <__gethex+0x304>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	4618      	mov	r0, r3
 8009394:	468b      	mov	fp, r1
 8009396:	4690      	mov	r8, r2
 8009398:	f7f6 ff2a 	bl	80001f0 <strlen>
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	f8db 2000 	ldr.w	r2, [fp]
 80093a2:	4403      	add	r3, r0
 80093a4:	4682      	mov	sl, r0
 80093a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	1c93      	adds	r3, r2, #2
 80093ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80093b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093b6:	32fe      	adds	r2, #254	; 0xfe
 80093b8:	18d1      	adds	r1, r2, r3
 80093ba:	461f      	mov	r7, r3
 80093bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093c0:	9100      	str	r1, [sp, #0]
 80093c2:	2830      	cmp	r0, #48	; 0x30
 80093c4:	d0f8      	beq.n	80093b8 <__gethex+0x3c>
 80093c6:	f7ff ffc4 	bl	8009352 <__hexdig_fun>
 80093ca:	4604      	mov	r4, r0
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d13a      	bne.n	8009446 <__gethex+0xca>
 80093d0:	9901      	ldr	r1, [sp, #4]
 80093d2:	4652      	mov	r2, sl
 80093d4:	4638      	mov	r0, r7
 80093d6:	f001 fbf2 	bl	800abbe <strncmp>
 80093da:	4605      	mov	r5, r0
 80093dc:	2800      	cmp	r0, #0
 80093de:	d168      	bne.n	80094b2 <__gethex+0x136>
 80093e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80093e4:	eb07 060a 	add.w	r6, r7, sl
 80093e8:	f7ff ffb3 	bl	8009352 <__hexdig_fun>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d062      	beq.n	80094b6 <__gethex+0x13a>
 80093f0:	4633      	mov	r3, r6
 80093f2:	7818      	ldrb	r0, [r3, #0]
 80093f4:	2830      	cmp	r0, #48	; 0x30
 80093f6:	461f      	mov	r7, r3
 80093f8:	f103 0301 	add.w	r3, r3, #1
 80093fc:	d0f9      	beq.n	80093f2 <__gethex+0x76>
 80093fe:	f7ff ffa8 	bl	8009352 <__hexdig_fun>
 8009402:	2301      	movs	r3, #1
 8009404:	fab0 f480 	clz	r4, r0
 8009408:	0964      	lsrs	r4, r4, #5
 800940a:	4635      	mov	r5, r6
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	463a      	mov	r2, r7
 8009410:	4616      	mov	r6, r2
 8009412:	3201      	adds	r2, #1
 8009414:	7830      	ldrb	r0, [r6, #0]
 8009416:	f7ff ff9c 	bl	8009352 <__hexdig_fun>
 800941a:	2800      	cmp	r0, #0
 800941c:	d1f8      	bne.n	8009410 <__gethex+0x94>
 800941e:	9901      	ldr	r1, [sp, #4]
 8009420:	4652      	mov	r2, sl
 8009422:	4630      	mov	r0, r6
 8009424:	f001 fbcb 	bl	800abbe <strncmp>
 8009428:	b980      	cbnz	r0, 800944c <__gethex+0xd0>
 800942a:	b94d      	cbnz	r5, 8009440 <__gethex+0xc4>
 800942c:	eb06 050a 	add.w	r5, r6, sl
 8009430:	462a      	mov	r2, r5
 8009432:	4616      	mov	r6, r2
 8009434:	3201      	adds	r2, #1
 8009436:	7830      	ldrb	r0, [r6, #0]
 8009438:	f7ff ff8b 	bl	8009352 <__hexdig_fun>
 800943c:	2800      	cmp	r0, #0
 800943e:	d1f8      	bne.n	8009432 <__gethex+0xb6>
 8009440:	1bad      	subs	r5, r5, r6
 8009442:	00ad      	lsls	r5, r5, #2
 8009444:	e004      	b.n	8009450 <__gethex+0xd4>
 8009446:	2400      	movs	r4, #0
 8009448:	4625      	mov	r5, r4
 800944a:	e7e0      	b.n	800940e <__gethex+0x92>
 800944c:	2d00      	cmp	r5, #0
 800944e:	d1f7      	bne.n	8009440 <__gethex+0xc4>
 8009450:	7833      	ldrb	r3, [r6, #0]
 8009452:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009456:	2b50      	cmp	r3, #80	; 0x50
 8009458:	d13b      	bne.n	80094d2 <__gethex+0x156>
 800945a:	7873      	ldrb	r3, [r6, #1]
 800945c:	2b2b      	cmp	r3, #43	; 0x2b
 800945e:	d02c      	beq.n	80094ba <__gethex+0x13e>
 8009460:	2b2d      	cmp	r3, #45	; 0x2d
 8009462:	d02e      	beq.n	80094c2 <__gethex+0x146>
 8009464:	1c71      	adds	r1, r6, #1
 8009466:	f04f 0900 	mov.w	r9, #0
 800946a:	7808      	ldrb	r0, [r1, #0]
 800946c:	f7ff ff71 	bl	8009352 <__hexdig_fun>
 8009470:	1e43      	subs	r3, r0, #1
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b18      	cmp	r3, #24
 8009476:	d82c      	bhi.n	80094d2 <__gethex+0x156>
 8009478:	f1a0 0210 	sub.w	r2, r0, #16
 800947c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009480:	f7ff ff67 	bl	8009352 <__hexdig_fun>
 8009484:	1e43      	subs	r3, r0, #1
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b18      	cmp	r3, #24
 800948a:	d91d      	bls.n	80094c8 <__gethex+0x14c>
 800948c:	f1b9 0f00 	cmp.w	r9, #0
 8009490:	d000      	beq.n	8009494 <__gethex+0x118>
 8009492:	4252      	negs	r2, r2
 8009494:	4415      	add	r5, r2
 8009496:	f8cb 1000 	str.w	r1, [fp]
 800949a:	b1e4      	cbz	r4, 80094d6 <__gethex+0x15a>
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf14      	ite	ne
 80094a2:	2700      	movne	r7, #0
 80094a4:	2706      	moveq	r7, #6
 80094a6:	4638      	mov	r0, r7
 80094a8:	b009      	add	sp, #36	; 0x24
 80094aa:	ecbd 8b02 	vpop	{d8}
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	463e      	mov	r6, r7
 80094b4:	4625      	mov	r5, r4
 80094b6:	2401      	movs	r4, #1
 80094b8:	e7ca      	b.n	8009450 <__gethex+0xd4>
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	1cb1      	adds	r1, r6, #2
 80094c0:	e7d3      	b.n	800946a <__gethex+0xee>
 80094c2:	f04f 0901 	mov.w	r9, #1
 80094c6:	e7fa      	b.n	80094be <__gethex+0x142>
 80094c8:	230a      	movs	r3, #10
 80094ca:	fb03 0202 	mla	r2, r3, r2, r0
 80094ce:	3a10      	subs	r2, #16
 80094d0:	e7d4      	b.n	800947c <__gethex+0x100>
 80094d2:	4631      	mov	r1, r6
 80094d4:	e7df      	b.n	8009496 <__gethex+0x11a>
 80094d6:	1bf3      	subs	r3, r6, r7
 80094d8:	3b01      	subs	r3, #1
 80094da:	4621      	mov	r1, r4
 80094dc:	2b07      	cmp	r3, #7
 80094de:	dc0b      	bgt.n	80094f8 <__gethex+0x17c>
 80094e0:	ee18 0a10 	vmov	r0, s16
 80094e4:	f000 fae6 	bl	8009ab4 <_Balloc>
 80094e8:	4604      	mov	r4, r0
 80094ea:	b940      	cbnz	r0, 80094fe <__gethex+0x182>
 80094ec:	4b65      	ldr	r3, [pc, #404]	; (8009684 <__gethex+0x308>)
 80094ee:	4602      	mov	r2, r0
 80094f0:	21de      	movs	r1, #222	; 0xde
 80094f2:	4865      	ldr	r0, [pc, #404]	; (8009688 <__gethex+0x30c>)
 80094f4:	f001 fb94 	bl	800ac20 <__assert_func>
 80094f8:	3101      	adds	r1, #1
 80094fa:	105b      	asrs	r3, r3, #1
 80094fc:	e7ee      	b.n	80094dc <__gethex+0x160>
 80094fe:	f100 0914 	add.w	r9, r0, #20
 8009502:	f04f 0b00 	mov.w	fp, #0
 8009506:	f1ca 0301 	rsb	r3, sl, #1
 800950a:	f8cd 9008 	str.w	r9, [sp, #8]
 800950e:	f8cd b000 	str.w	fp, [sp]
 8009512:	9306      	str	r3, [sp, #24]
 8009514:	42b7      	cmp	r7, r6
 8009516:	d340      	bcc.n	800959a <__gethex+0x21e>
 8009518:	9802      	ldr	r0, [sp, #8]
 800951a:	9b00      	ldr	r3, [sp, #0]
 800951c:	f840 3b04 	str.w	r3, [r0], #4
 8009520:	eba0 0009 	sub.w	r0, r0, r9
 8009524:	1080      	asrs	r0, r0, #2
 8009526:	0146      	lsls	r6, r0, #5
 8009528:	6120      	str	r0, [r4, #16]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fbb8 	bl	8009ca0 <__hi0bits>
 8009530:	1a30      	subs	r0, r6, r0
 8009532:	f8d8 6000 	ldr.w	r6, [r8]
 8009536:	42b0      	cmp	r0, r6
 8009538:	dd63      	ble.n	8009602 <__gethex+0x286>
 800953a:	1b87      	subs	r7, r0, r6
 800953c:	4639      	mov	r1, r7
 800953e:	4620      	mov	r0, r4
 8009540:	f000 ff52 	bl	800a3e8 <__any_on>
 8009544:	4682      	mov	sl, r0
 8009546:	b1a8      	cbz	r0, 8009574 <__gethex+0x1f8>
 8009548:	1e7b      	subs	r3, r7, #1
 800954a:	1159      	asrs	r1, r3, #5
 800954c:	f003 021f 	and.w	r2, r3, #31
 8009550:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009554:	f04f 0a01 	mov.w	sl, #1
 8009558:	fa0a f202 	lsl.w	r2, sl, r2
 800955c:	420a      	tst	r2, r1
 800955e:	d009      	beq.n	8009574 <__gethex+0x1f8>
 8009560:	4553      	cmp	r3, sl
 8009562:	dd05      	ble.n	8009570 <__gethex+0x1f4>
 8009564:	1eb9      	subs	r1, r7, #2
 8009566:	4620      	mov	r0, r4
 8009568:	f000 ff3e 	bl	800a3e8 <__any_on>
 800956c:	2800      	cmp	r0, #0
 800956e:	d145      	bne.n	80095fc <__gethex+0x280>
 8009570:	f04f 0a02 	mov.w	sl, #2
 8009574:	4639      	mov	r1, r7
 8009576:	4620      	mov	r0, r4
 8009578:	f7ff fe99 	bl	80092ae <rshift>
 800957c:	443d      	add	r5, r7
 800957e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009582:	42ab      	cmp	r3, r5
 8009584:	da4c      	bge.n	8009620 <__gethex+0x2a4>
 8009586:	ee18 0a10 	vmov	r0, s16
 800958a:	4621      	mov	r1, r4
 800958c:	f000 fad2 	bl	8009b34 <_Bfree>
 8009590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009592:	2300      	movs	r3, #0
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	27a3      	movs	r7, #163	; 0xa3
 8009598:	e785      	b.n	80094a6 <__gethex+0x12a>
 800959a:	1e73      	subs	r3, r6, #1
 800959c:	9a05      	ldr	r2, [sp, #20]
 800959e:	9303      	str	r3, [sp, #12]
 80095a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d019      	beq.n	80095dc <__gethex+0x260>
 80095a8:	f1bb 0f20 	cmp.w	fp, #32
 80095ac:	d107      	bne.n	80095be <__gethex+0x242>
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	9a00      	ldr	r2, [sp, #0]
 80095b2:	f843 2b04 	str.w	r2, [r3], #4
 80095b6:	9302      	str	r3, [sp, #8]
 80095b8:	2300      	movs	r3, #0
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	469b      	mov	fp, r3
 80095be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80095c2:	f7ff fec6 	bl	8009352 <__hexdig_fun>
 80095c6:	9b00      	ldr	r3, [sp, #0]
 80095c8:	f000 000f 	and.w	r0, r0, #15
 80095cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80095d0:	4303      	orrs	r3, r0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	f10b 0b04 	add.w	fp, fp, #4
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	e00d      	b.n	80095f8 <__gethex+0x27c>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	9a06      	ldr	r2, [sp, #24]
 80095e0:	4413      	add	r3, r2
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	d3e0      	bcc.n	80095a8 <__gethex+0x22c>
 80095e6:	4618      	mov	r0, r3
 80095e8:	9901      	ldr	r1, [sp, #4]
 80095ea:	9307      	str	r3, [sp, #28]
 80095ec:	4652      	mov	r2, sl
 80095ee:	f001 fae6 	bl	800abbe <strncmp>
 80095f2:	9b07      	ldr	r3, [sp, #28]
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1d7      	bne.n	80095a8 <__gethex+0x22c>
 80095f8:	461e      	mov	r6, r3
 80095fa:	e78b      	b.n	8009514 <__gethex+0x198>
 80095fc:	f04f 0a03 	mov.w	sl, #3
 8009600:	e7b8      	b.n	8009574 <__gethex+0x1f8>
 8009602:	da0a      	bge.n	800961a <__gethex+0x29e>
 8009604:	1a37      	subs	r7, r6, r0
 8009606:	4621      	mov	r1, r4
 8009608:	ee18 0a10 	vmov	r0, s16
 800960c:	463a      	mov	r2, r7
 800960e:	f000 fcad 	bl	8009f6c <__lshift>
 8009612:	1bed      	subs	r5, r5, r7
 8009614:	4604      	mov	r4, r0
 8009616:	f100 0914 	add.w	r9, r0, #20
 800961a:	f04f 0a00 	mov.w	sl, #0
 800961e:	e7ae      	b.n	800957e <__gethex+0x202>
 8009620:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009624:	42a8      	cmp	r0, r5
 8009626:	dd72      	ble.n	800970e <__gethex+0x392>
 8009628:	1b45      	subs	r5, r0, r5
 800962a:	42ae      	cmp	r6, r5
 800962c:	dc36      	bgt.n	800969c <__gethex+0x320>
 800962e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d02a      	beq.n	800968c <__gethex+0x310>
 8009636:	2b03      	cmp	r3, #3
 8009638:	d02c      	beq.n	8009694 <__gethex+0x318>
 800963a:	2b01      	cmp	r3, #1
 800963c:	d115      	bne.n	800966a <__gethex+0x2ee>
 800963e:	42ae      	cmp	r6, r5
 8009640:	d113      	bne.n	800966a <__gethex+0x2ee>
 8009642:	2e01      	cmp	r6, #1
 8009644:	d10b      	bne.n	800965e <__gethex+0x2e2>
 8009646:	9a04      	ldr	r2, [sp, #16]
 8009648:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	2301      	movs	r3, #1
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	f8c9 3000 	str.w	r3, [r9]
 8009656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009658:	2762      	movs	r7, #98	; 0x62
 800965a:	601c      	str	r4, [r3, #0]
 800965c:	e723      	b.n	80094a6 <__gethex+0x12a>
 800965e:	1e71      	subs	r1, r6, #1
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fec1 	bl	800a3e8 <__any_on>
 8009666:	2800      	cmp	r0, #0
 8009668:	d1ed      	bne.n	8009646 <__gethex+0x2ca>
 800966a:	ee18 0a10 	vmov	r0, s16
 800966e:	4621      	mov	r1, r4
 8009670:	f000 fa60 	bl	8009b34 <_Bfree>
 8009674:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009676:	2300      	movs	r3, #0
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	2750      	movs	r7, #80	; 0x50
 800967c:	e713      	b.n	80094a6 <__gethex+0x12a>
 800967e:	bf00      	nop
 8009680:	0800b3ac 	.word	0x0800b3ac
 8009684:	0800b2cc 	.word	0x0800b2cc
 8009688:	0800b340 	.word	0x0800b340
 800968c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1eb      	bne.n	800966a <__gethex+0x2ee>
 8009692:	e7d8      	b.n	8009646 <__gethex+0x2ca>
 8009694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1d5      	bne.n	8009646 <__gethex+0x2ca>
 800969a:	e7e6      	b.n	800966a <__gethex+0x2ee>
 800969c:	1e6f      	subs	r7, r5, #1
 800969e:	f1ba 0f00 	cmp.w	sl, #0
 80096a2:	d131      	bne.n	8009708 <__gethex+0x38c>
 80096a4:	b127      	cbz	r7, 80096b0 <__gethex+0x334>
 80096a6:	4639      	mov	r1, r7
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fe9d 	bl	800a3e8 <__any_on>
 80096ae:	4682      	mov	sl, r0
 80096b0:	117b      	asrs	r3, r7, #5
 80096b2:	2101      	movs	r1, #1
 80096b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80096b8:	f007 071f 	and.w	r7, r7, #31
 80096bc:	fa01 f707 	lsl.w	r7, r1, r7
 80096c0:	421f      	tst	r7, r3
 80096c2:	4629      	mov	r1, r5
 80096c4:	4620      	mov	r0, r4
 80096c6:	bf18      	it	ne
 80096c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80096cc:	1b76      	subs	r6, r6, r5
 80096ce:	f7ff fdee 	bl	80092ae <rshift>
 80096d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80096d6:	2702      	movs	r7, #2
 80096d8:	f1ba 0f00 	cmp.w	sl, #0
 80096dc:	d048      	beq.n	8009770 <__gethex+0x3f4>
 80096de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d015      	beq.n	8009712 <__gethex+0x396>
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d017      	beq.n	800971a <__gethex+0x39e>
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d109      	bne.n	8009702 <__gethex+0x386>
 80096ee:	f01a 0f02 	tst.w	sl, #2
 80096f2:	d006      	beq.n	8009702 <__gethex+0x386>
 80096f4:	f8d9 0000 	ldr.w	r0, [r9]
 80096f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80096fc:	f01a 0f01 	tst.w	sl, #1
 8009700:	d10e      	bne.n	8009720 <__gethex+0x3a4>
 8009702:	f047 0710 	orr.w	r7, r7, #16
 8009706:	e033      	b.n	8009770 <__gethex+0x3f4>
 8009708:	f04f 0a01 	mov.w	sl, #1
 800970c:	e7d0      	b.n	80096b0 <__gethex+0x334>
 800970e:	2701      	movs	r7, #1
 8009710:	e7e2      	b.n	80096d8 <__gethex+0x35c>
 8009712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009714:	f1c3 0301 	rsb	r3, r3, #1
 8009718:	9315      	str	r3, [sp, #84]	; 0x54
 800971a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0f0      	beq.n	8009702 <__gethex+0x386>
 8009720:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009724:	f104 0314 	add.w	r3, r4, #20
 8009728:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800972c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009730:	f04f 0c00 	mov.w	ip, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f853 2b04 	ldr.w	r2, [r3], #4
 800973a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800973e:	d01c      	beq.n	800977a <__gethex+0x3fe>
 8009740:	3201      	adds	r2, #1
 8009742:	6002      	str	r2, [r0, #0]
 8009744:	2f02      	cmp	r7, #2
 8009746:	f104 0314 	add.w	r3, r4, #20
 800974a:	d13f      	bne.n	80097cc <__gethex+0x450>
 800974c:	f8d8 2000 	ldr.w	r2, [r8]
 8009750:	3a01      	subs	r2, #1
 8009752:	42b2      	cmp	r2, r6
 8009754:	d10a      	bne.n	800976c <__gethex+0x3f0>
 8009756:	1171      	asrs	r1, r6, #5
 8009758:	2201      	movs	r2, #1
 800975a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800975e:	f006 061f 	and.w	r6, r6, #31
 8009762:	fa02 f606 	lsl.w	r6, r2, r6
 8009766:	421e      	tst	r6, r3
 8009768:	bf18      	it	ne
 800976a:	4617      	movne	r7, r2
 800976c:	f047 0720 	orr.w	r7, r7, #32
 8009770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009772:	601c      	str	r4, [r3, #0]
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	601d      	str	r5, [r3, #0]
 8009778:	e695      	b.n	80094a6 <__gethex+0x12a>
 800977a:	4299      	cmp	r1, r3
 800977c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009780:	d8d8      	bhi.n	8009734 <__gethex+0x3b8>
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	459b      	cmp	fp, r3
 8009786:	db19      	blt.n	80097bc <__gethex+0x440>
 8009788:	6861      	ldr	r1, [r4, #4]
 800978a:	ee18 0a10 	vmov	r0, s16
 800978e:	3101      	adds	r1, #1
 8009790:	f000 f990 	bl	8009ab4 <_Balloc>
 8009794:	4681      	mov	r9, r0
 8009796:	b918      	cbnz	r0, 80097a0 <__gethex+0x424>
 8009798:	4b1a      	ldr	r3, [pc, #104]	; (8009804 <__gethex+0x488>)
 800979a:	4602      	mov	r2, r0
 800979c:	2184      	movs	r1, #132	; 0x84
 800979e:	e6a8      	b.n	80094f2 <__gethex+0x176>
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	3202      	adds	r2, #2
 80097a4:	f104 010c 	add.w	r1, r4, #12
 80097a8:	0092      	lsls	r2, r2, #2
 80097aa:	300c      	adds	r0, #12
 80097ac:	f000 f974 	bl	8009a98 <memcpy>
 80097b0:	4621      	mov	r1, r4
 80097b2:	ee18 0a10 	vmov	r0, s16
 80097b6:	f000 f9bd 	bl	8009b34 <_Bfree>
 80097ba:	464c      	mov	r4, r9
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097c4:	6122      	str	r2, [r4, #16]
 80097c6:	2201      	movs	r2, #1
 80097c8:	615a      	str	r2, [r3, #20]
 80097ca:	e7bb      	b.n	8009744 <__gethex+0x3c8>
 80097cc:	6922      	ldr	r2, [r4, #16]
 80097ce:	455a      	cmp	r2, fp
 80097d0:	dd0b      	ble.n	80097ea <__gethex+0x46e>
 80097d2:	2101      	movs	r1, #1
 80097d4:	4620      	mov	r0, r4
 80097d6:	f7ff fd6a 	bl	80092ae <rshift>
 80097da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097de:	3501      	adds	r5, #1
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	f6ff aed0 	blt.w	8009586 <__gethex+0x20a>
 80097e6:	2701      	movs	r7, #1
 80097e8:	e7c0      	b.n	800976c <__gethex+0x3f0>
 80097ea:	f016 061f 	ands.w	r6, r6, #31
 80097ee:	d0fa      	beq.n	80097e6 <__gethex+0x46a>
 80097f0:	449a      	add	sl, r3
 80097f2:	f1c6 0620 	rsb	r6, r6, #32
 80097f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80097fa:	f000 fa51 	bl	8009ca0 <__hi0bits>
 80097fe:	42b0      	cmp	r0, r6
 8009800:	dbe7      	blt.n	80097d2 <__gethex+0x456>
 8009802:	e7f0      	b.n	80097e6 <__gethex+0x46a>
 8009804:	0800b2cc 	.word	0x0800b2cc

08009808 <L_shift>:
 8009808:	f1c2 0208 	rsb	r2, r2, #8
 800980c:	0092      	lsls	r2, r2, #2
 800980e:	b570      	push	{r4, r5, r6, lr}
 8009810:	f1c2 0620 	rsb	r6, r2, #32
 8009814:	6843      	ldr	r3, [r0, #4]
 8009816:	6804      	ldr	r4, [r0, #0]
 8009818:	fa03 f506 	lsl.w	r5, r3, r6
 800981c:	432c      	orrs	r4, r5
 800981e:	40d3      	lsrs	r3, r2
 8009820:	6004      	str	r4, [r0, #0]
 8009822:	f840 3f04 	str.w	r3, [r0, #4]!
 8009826:	4288      	cmp	r0, r1
 8009828:	d3f4      	bcc.n	8009814 <L_shift+0xc>
 800982a:	bd70      	pop	{r4, r5, r6, pc}

0800982c <__match>:
 800982c:	b530      	push	{r4, r5, lr}
 800982e:	6803      	ldr	r3, [r0, #0]
 8009830:	3301      	adds	r3, #1
 8009832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009836:	b914      	cbnz	r4, 800983e <__match+0x12>
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	2001      	movs	r0, #1
 800983c:	bd30      	pop	{r4, r5, pc}
 800983e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009842:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009846:	2d19      	cmp	r5, #25
 8009848:	bf98      	it	ls
 800984a:	3220      	addls	r2, #32
 800984c:	42a2      	cmp	r2, r4
 800984e:	d0f0      	beq.n	8009832 <__match+0x6>
 8009850:	2000      	movs	r0, #0
 8009852:	e7f3      	b.n	800983c <__match+0x10>

08009854 <__hexnan>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	680b      	ldr	r3, [r1, #0]
 800985a:	6801      	ldr	r1, [r0, #0]
 800985c:	115e      	asrs	r6, r3, #5
 800985e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009862:	f013 031f 	ands.w	r3, r3, #31
 8009866:	b087      	sub	sp, #28
 8009868:	bf18      	it	ne
 800986a:	3604      	addne	r6, #4
 800986c:	2500      	movs	r5, #0
 800986e:	1f37      	subs	r7, r6, #4
 8009870:	4682      	mov	sl, r0
 8009872:	4690      	mov	r8, r2
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	f846 5c04 	str.w	r5, [r6, #-4]
 800987a:	46b9      	mov	r9, r7
 800987c:	463c      	mov	r4, r7
 800987e:	9502      	str	r5, [sp, #8]
 8009880:	46ab      	mov	fp, r5
 8009882:	784a      	ldrb	r2, [r1, #1]
 8009884:	1c4b      	adds	r3, r1, #1
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	b342      	cbz	r2, 80098dc <__hexnan+0x88>
 800988a:	4610      	mov	r0, r2
 800988c:	9105      	str	r1, [sp, #20]
 800988e:	9204      	str	r2, [sp, #16]
 8009890:	f7ff fd5f 	bl	8009352 <__hexdig_fun>
 8009894:	2800      	cmp	r0, #0
 8009896:	d14f      	bne.n	8009938 <__hexnan+0xe4>
 8009898:	9a04      	ldr	r2, [sp, #16]
 800989a:	9905      	ldr	r1, [sp, #20]
 800989c:	2a20      	cmp	r2, #32
 800989e:	d818      	bhi.n	80098d2 <__hexnan+0x7e>
 80098a0:	9b02      	ldr	r3, [sp, #8]
 80098a2:	459b      	cmp	fp, r3
 80098a4:	dd13      	ble.n	80098ce <__hexnan+0x7a>
 80098a6:	454c      	cmp	r4, r9
 80098a8:	d206      	bcs.n	80098b8 <__hexnan+0x64>
 80098aa:	2d07      	cmp	r5, #7
 80098ac:	dc04      	bgt.n	80098b8 <__hexnan+0x64>
 80098ae:	462a      	mov	r2, r5
 80098b0:	4649      	mov	r1, r9
 80098b2:	4620      	mov	r0, r4
 80098b4:	f7ff ffa8 	bl	8009808 <L_shift>
 80098b8:	4544      	cmp	r4, r8
 80098ba:	d950      	bls.n	800995e <__hexnan+0x10a>
 80098bc:	2300      	movs	r3, #0
 80098be:	f1a4 0904 	sub.w	r9, r4, #4
 80098c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80098c6:	f8cd b008 	str.w	fp, [sp, #8]
 80098ca:	464c      	mov	r4, r9
 80098cc:	461d      	mov	r5, r3
 80098ce:	9903      	ldr	r1, [sp, #12]
 80098d0:	e7d7      	b.n	8009882 <__hexnan+0x2e>
 80098d2:	2a29      	cmp	r2, #41	; 0x29
 80098d4:	d156      	bne.n	8009984 <__hexnan+0x130>
 80098d6:	3102      	adds	r1, #2
 80098d8:	f8ca 1000 	str.w	r1, [sl]
 80098dc:	f1bb 0f00 	cmp.w	fp, #0
 80098e0:	d050      	beq.n	8009984 <__hexnan+0x130>
 80098e2:	454c      	cmp	r4, r9
 80098e4:	d206      	bcs.n	80098f4 <__hexnan+0xa0>
 80098e6:	2d07      	cmp	r5, #7
 80098e8:	dc04      	bgt.n	80098f4 <__hexnan+0xa0>
 80098ea:	462a      	mov	r2, r5
 80098ec:	4649      	mov	r1, r9
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7ff ff8a 	bl	8009808 <L_shift>
 80098f4:	4544      	cmp	r4, r8
 80098f6:	d934      	bls.n	8009962 <__hexnan+0x10e>
 80098f8:	f1a8 0204 	sub.w	r2, r8, #4
 80098fc:	4623      	mov	r3, r4
 80098fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8009902:	f842 1f04 	str.w	r1, [r2, #4]!
 8009906:	429f      	cmp	r7, r3
 8009908:	d2f9      	bcs.n	80098fe <__hexnan+0xaa>
 800990a:	1b3b      	subs	r3, r7, r4
 800990c:	f023 0303 	bic.w	r3, r3, #3
 8009910:	3304      	adds	r3, #4
 8009912:	3401      	adds	r4, #1
 8009914:	3e03      	subs	r6, #3
 8009916:	42b4      	cmp	r4, r6
 8009918:	bf88      	it	hi
 800991a:	2304      	movhi	r3, #4
 800991c:	4443      	add	r3, r8
 800991e:	2200      	movs	r2, #0
 8009920:	f843 2b04 	str.w	r2, [r3], #4
 8009924:	429f      	cmp	r7, r3
 8009926:	d2fb      	bcs.n	8009920 <__hexnan+0xcc>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	b91b      	cbnz	r3, 8009934 <__hexnan+0xe0>
 800992c:	4547      	cmp	r7, r8
 800992e:	d127      	bne.n	8009980 <__hexnan+0x12c>
 8009930:	2301      	movs	r3, #1
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	2005      	movs	r0, #5
 8009936:	e026      	b.n	8009986 <__hexnan+0x132>
 8009938:	3501      	adds	r5, #1
 800993a:	2d08      	cmp	r5, #8
 800993c:	f10b 0b01 	add.w	fp, fp, #1
 8009940:	dd06      	ble.n	8009950 <__hexnan+0xfc>
 8009942:	4544      	cmp	r4, r8
 8009944:	d9c3      	bls.n	80098ce <__hexnan+0x7a>
 8009946:	2300      	movs	r3, #0
 8009948:	f844 3c04 	str.w	r3, [r4, #-4]
 800994c:	2501      	movs	r5, #1
 800994e:	3c04      	subs	r4, #4
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	f000 000f 	and.w	r0, r0, #15
 8009956:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800995a:	6022      	str	r2, [r4, #0]
 800995c:	e7b7      	b.n	80098ce <__hexnan+0x7a>
 800995e:	2508      	movs	r5, #8
 8009960:	e7b5      	b.n	80098ce <__hexnan+0x7a>
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0df      	beq.n	8009928 <__hexnan+0xd4>
 8009968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800996c:	f1c3 0320 	rsb	r3, r3, #32
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
 8009974:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009978:	401a      	ands	r2, r3
 800997a:	f846 2c04 	str.w	r2, [r6, #-4]
 800997e:	e7d3      	b.n	8009928 <__hexnan+0xd4>
 8009980:	3f04      	subs	r7, #4
 8009982:	e7d1      	b.n	8009928 <__hexnan+0xd4>
 8009984:	2004      	movs	r0, #4
 8009986:	b007      	add	sp, #28
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800998c <_localeconv_r>:
 800998c:	4800      	ldr	r0, [pc, #0]	; (8009990 <_localeconv_r+0x4>)
 800998e:	4770      	bx	lr
 8009990:	20000168 	.word	0x20000168

08009994 <__retarget_lock_init_recursive>:
 8009994:	4770      	bx	lr

08009996 <__retarget_lock_acquire_recursive>:
 8009996:	4770      	bx	lr

08009998 <__retarget_lock_release_recursive>:
 8009998:	4770      	bx	lr

0800999a <__swhatbuf_r>:
 800999a:	b570      	push	{r4, r5, r6, lr}
 800999c:	460e      	mov	r6, r1
 800999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a2:	2900      	cmp	r1, #0
 80099a4:	b096      	sub	sp, #88	; 0x58
 80099a6:	4614      	mov	r4, r2
 80099a8:	461d      	mov	r5, r3
 80099aa:	da07      	bge.n	80099bc <__swhatbuf_r+0x22>
 80099ac:	2300      	movs	r3, #0
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	89b3      	ldrh	r3, [r6, #12]
 80099b2:	061a      	lsls	r2, r3, #24
 80099b4:	d410      	bmi.n	80099d8 <__swhatbuf_r+0x3e>
 80099b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ba:	e00e      	b.n	80099da <__swhatbuf_r+0x40>
 80099bc:	466a      	mov	r2, sp
 80099be:	f001 f96f 	bl	800aca0 <_fstat_r>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	dbf2      	blt.n	80099ac <__swhatbuf_r+0x12>
 80099c6:	9a01      	ldr	r2, [sp, #4]
 80099c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099d0:	425a      	negs	r2, r3
 80099d2:	415a      	adcs	r2, r3
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	e7ee      	b.n	80099b6 <__swhatbuf_r+0x1c>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	2000      	movs	r0, #0
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	b016      	add	sp, #88	; 0x58
 80099e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099e4 <__smakebuf_r>:
 80099e4:	898b      	ldrh	r3, [r1, #12]
 80099e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099e8:	079d      	lsls	r5, r3, #30
 80099ea:	4606      	mov	r6, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	d507      	bpl.n	8009a00 <__smakebuf_r+0x1c>
 80099f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	2301      	movs	r3, #1
 80099fa:	6163      	str	r3, [r4, #20]
 80099fc:	b002      	add	sp, #8
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	ab01      	add	r3, sp, #4
 8009a02:	466a      	mov	r2, sp
 8009a04:	f7ff ffc9 	bl	800999a <__swhatbuf_r>
 8009a08:	9900      	ldr	r1, [sp, #0]
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f000 fd6b 	bl	800a4e8 <_malloc_r>
 8009a12:	b948      	cbnz	r0, 8009a28 <__smakebuf_r+0x44>
 8009a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a18:	059a      	lsls	r2, r3, #22
 8009a1a:	d4ef      	bmi.n	80099fc <__smakebuf_r+0x18>
 8009a1c:	f023 0303 	bic.w	r3, r3, #3
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	81a3      	strh	r3, [r4, #12]
 8009a26:	e7e3      	b.n	80099f0 <__smakebuf_r+0xc>
 8009a28:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <__smakebuf_r+0x7c>)
 8009a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	9b00      	ldr	r3, [sp, #0]
 8009a38:	6163      	str	r3, [r4, #20]
 8009a3a:	9b01      	ldr	r3, [sp, #4]
 8009a3c:	6120      	str	r0, [r4, #16]
 8009a3e:	b15b      	cbz	r3, 8009a58 <__smakebuf_r+0x74>
 8009a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a44:	4630      	mov	r0, r6
 8009a46:	f001 f93d 	bl	800acc4 <_isatty_r>
 8009a4a:	b128      	cbz	r0, 8009a58 <__smakebuf_r+0x74>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	89a0      	ldrh	r0, [r4, #12]
 8009a5a:	4305      	orrs	r5, r0
 8009a5c:	81a5      	strh	r5, [r4, #12]
 8009a5e:	e7cd      	b.n	80099fc <__smakebuf_r+0x18>
 8009a60:	0800910d 	.word	0x0800910d

08009a64 <malloc>:
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <malloc+0xc>)
 8009a66:	4601      	mov	r1, r0
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f000 bd3d 	b.w	800a4e8 <_malloc_r>
 8009a6e:	bf00      	nop
 8009a70:	20000010 	.word	0x20000010

08009a74 <__ascii_mbtowc>:
 8009a74:	b082      	sub	sp, #8
 8009a76:	b901      	cbnz	r1, 8009a7a <__ascii_mbtowc+0x6>
 8009a78:	a901      	add	r1, sp, #4
 8009a7a:	b142      	cbz	r2, 8009a8e <__ascii_mbtowc+0x1a>
 8009a7c:	b14b      	cbz	r3, 8009a92 <__ascii_mbtowc+0x1e>
 8009a7e:	7813      	ldrb	r3, [r2, #0]
 8009a80:	600b      	str	r3, [r1, #0]
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	1e10      	subs	r0, r2, #0
 8009a86:	bf18      	it	ne
 8009a88:	2001      	movne	r0, #1
 8009a8a:	b002      	add	sp, #8
 8009a8c:	4770      	bx	lr
 8009a8e:	4610      	mov	r0, r2
 8009a90:	e7fb      	b.n	8009a8a <__ascii_mbtowc+0x16>
 8009a92:	f06f 0001 	mvn.w	r0, #1
 8009a96:	e7f8      	b.n	8009a8a <__ascii_mbtowc+0x16>

08009a98 <memcpy>:
 8009a98:	440a      	add	r2, r1
 8009a9a:	4291      	cmp	r1, r2
 8009a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009aa0:	d100      	bne.n	8009aa4 <memcpy+0xc>
 8009aa2:	4770      	bx	lr
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aae:	4291      	cmp	r1, r2
 8009ab0:	d1f9      	bne.n	8009aa6 <memcpy+0xe>
 8009ab2:	bd10      	pop	{r4, pc}

08009ab4 <_Balloc>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	b976      	cbnz	r6, 8009adc <_Balloc+0x28>
 8009abe:	2010      	movs	r0, #16
 8009ac0:	f7ff ffd0 	bl	8009a64 <malloc>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6260      	str	r0, [r4, #36]	; 0x24
 8009ac8:	b920      	cbnz	r0, 8009ad4 <_Balloc+0x20>
 8009aca:	4b18      	ldr	r3, [pc, #96]	; (8009b2c <_Balloc+0x78>)
 8009acc:	4818      	ldr	r0, [pc, #96]	; (8009b30 <_Balloc+0x7c>)
 8009ace:	2166      	movs	r1, #102	; 0x66
 8009ad0:	f001 f8a6 	bl	800ac20 <__assert_func>
 8009ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad8:	6006      	str	r6, [r0, #0]
 8009ada:	60c6      	str	r6, [r0, #12]
 8009adc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ade:	68f3      	ldr	r3, [r6, #12]
 8009ae0:	b183      	cbz	r3, 8009b04 <_Balloc+0x50>
 8009ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aea:	b9b8      	cbnz	r0, 8009b1c <_Balloc+0x68>
 8009aec:	2101      	movs	r1, #1
 8009aee:	fa01 f605 	lsl.w	r6, r1, r5
 8009af2:	1d72      	adds	r2, r6, #5
 8009af4:	0092      	lsls	r2, r2, #2
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 fc97 	bl	800a42a <_calloc_r>
 8009afc:	b160      	cbz	r0, 8009b18 <_Balloc+0x64>
 8009afe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b02:	e00e      	b.n	8009b22 <_Balloc+0x6e>
 8009b04:	2221      	movs	r2, #33	; 0x21
 8009b06:	2104      	movs	r1, #4
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fc8e 	bl	800a42a <_calloc_r>
 8009b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b10:	60f0      	str	r0, [r6, #12]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e4      	bne.n	8009ae2 <_Balloc+0x2e>
 8009b18:	2000      	movs	r0, #0
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	6802      	ldr	r2, [r0, #0]
 8009b1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b22:	2300      	movs	r3, #0
 8009b24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b28:	e7f7      	b.n	8009b1a <_Balloc+0x66>
 8009b2a:	bf00      	nop
 8009b2c:	0800b256 	.word	0x0800b256
 8009b30:	0800b3c0 	.word	0x0800b3c0

08009b34 <_Bfree>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b38:	4605      	mov	r5, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b976      	cbnz	r6, 8009b5c <_Bfree+0x28>
 8009b3e:	2010      	movs	r0, #16
 8009b40:	f7ff ff90 	bl	8009a64 <malloc>
 8009b44:	4602      	mov	r2, r0
 8009b46:	6268      	str	r0, [r5, #36]	; 0x24
 8009b48:	b920      	cbnz	r0, 8009b54 <_Bfree+0x20>
 8009b4a:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <_Bfree+0x3c>)
 8009b4c:	4809      	ldr	r0, [pc, #36]	; (8009b74 <_Bfree+0x40>)
 8009b4e:	218a      	movs	r1, #138	; 0x8a
 8009b50:	f001 f866 	bl	800ac20 <__assert_func>
 8009b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b58:	6006      	str	r6, [r0, #0]
 8009b5a:	60c6      	str	r6, [r0, #12]
 8009b5c:	b13c      	cbz	r4, 8009b6e <_Bfree+0x3a>
 8009b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b60:	6862      	ldr	r2, [r4, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b68:	6021      	str	r1, [r4, #0]
 8009b6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	0800b256 	.word	0x0800b256
 8009b74:	0800b3c0 	.word	0x0800b3c0

08009b78 <__multadd>:
 8009b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7c:	690e      	ldr	r6, [r1, #16]
 8009b7e:	4607      	mov	r7, r0
 8009b80:	4698      	mov	r8, r3
 8009b82:	460c      	mov	r4, r1
 8009b84:	f101 0014 	add.w	r0, r1, #20
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6805      	ldr	r5, [r0, #0]
 8009b8c:	b2a9      	uxth	r1, r5
 8009b8e:	fb02 8101 	mla	r1, r2, r1, r8
 8009b92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009b96:	0c2d      	lsrs	r5, r5, #16
 8009b98:	fb02 c505 	mla	r5, r2, r5, ip
 8009b9c:	b289      	uxth	r1, r1
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ba4:	429e      	cmp	r6, r3
 8009ba6:	f840 1b04 	str.w	r1, [r0], #4
 8009baa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009bae:	dcec      	bgt.n	8009b8a <__multadd+0x12>
 8009bb0:	f1b8 0f00 	cmp.w	r8, #0
 8009bb4:	d022      	beq.n	8009bfc <__multadd+0x84>
 8009bb6:	68a3      	ldr	r3, [r4, #8]
 8009bb8:	42b3      	cmp	r3, r6
 8009bba:	dc19      	bgt.n	8009bf0 <__multadd+0x78>
 8009bbc:	6861      	ldr	r1, [r4, #4]
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	3101      	adds	r1, #1
 8009bc2:	f7ff ff77 	bl	8009ab4 <_Balloc>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b928      	cbnz	r0, 8009bd6 <__multadd+0x5e>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <__multadd+0x8c>)
 8009bce:	480e      	ldr	r0, [pc, #56]	; (8009c08 <__multadd+0x90>)
 8009bd0:	21b5      	movs	r1, #181	; 0xb5
 8009bd2:	f001 f825 	bl	800ac20 <__assert_func>
 8009bd6:	6922      	ldr	r2, [r4, #16]
 8009bd8:	3202      	adds	r2, #2
 8009bda:	f104 010c 	add.w	r1, r4, #12
 8009bde:	0092      	lsls	r2, r2, #2
 8009be0:	300c      	adds	r0, #12
 8009be2:	f7ff ff59 	bl	8009a98 <memcpy>
 8009be6:	4621      	mov	r1, r4
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff ffa3 	bl	8009b34 <_Bfree>
 8009bee:	462c      	mov	r4, r5
 8009bf0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	f8c3 8014 	str.w	r8, [r3, #20]
 8009bfa:	6126      	str	r6, [r4, #16]
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c02:	bf00      	nop
 8009c04:	0800b2cc 	.word	0x0800b2cc
 8009c08:	0800b3c0 	.word	0x0800b3c0

08009c0c <__s2b>:
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	460c      	mov	r4, r1
 8009c12:	4615      	mov	r5, r2
 8009c14:	461f      	mov	r7, r3
 8009c16:	2209      	movs	r2, #9
 8009c18:	3308      	adds	r3, #8
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c20:	2100      	movs	r1, #0
 8009c22:	2201      	movs	r2, #1
 8009c24:	429a      	cmp	r2, r3
 8009c26:	db09      	blt.n	8009c3c <__s2b+0x30>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ff43 	bl	8009ab4 <_Balloc>
 8009c2e:	b940      	cbnz	r0, 8009c42 <__s2b+0x36>
 8009c30:	4602      	mov	r2, r0
 8009c32:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <__s2b+0x8c>)
 8009c34:	4819      	ldr	r0, [pc, #100]	; (8009c9c <__s2b+0x90>)
 8009c36:	21ce      	movs	r1, #206	; 0xce
 8009c38:	f000 fff2 	bl	800ac20 <__assert_func>
 8009c3c:	0052      	lsls	r2, r2, #1
 8009c3e:	3101      	adds	r1, #1
 8009c40:	e7f0      	b.n	8009c24 <__s2b+0x18>
 8009c42:	9b08      	ldr	r3, [sp, #32]
 8009c44:	6143      	str	r3, [r0, #20]
 8009c46:	2d09      	cmp	r5, #9
 8009c48:	f04f 0301 	mov.w	r3, #1
 8009c4c:	6103      	str	r3, [r0, #16]
 8009c4e:	dd16      	ble.n	8009c7e <__s2b+0x72>
 8009c50:	f104 0909 	add.w	r9, r4, #9
 8009c54:	46c8      	mov	r8, r9
 8009c56:	442c      	add	r4, r5
 8009c58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	3b30      	subs	r3, #48	; 0x30
 8009c60:	220a      	movs	r2, #10
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ff88 	bl	8009b78 <__multadd>
 8009c68:	45a0      	cmp	r8, r4
 8009c6a:	d1f5      	bne.n	8009c58 <__s2b+0x4c>
 8009c6c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c70:	444c      	add	r4, r9
 8009c72:	1b2d      	subs	r5, r5, r4
 8009c74:	1963      	adds	r3, r4, r5
 8009c76:	42bb      	cmp	r3, r7
 8009c78:	db04      	blt.n	8009c84 <__s2b+0x78>
 8009c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7e:	340a      	adds	r4, #10
 8009c80:	2509      	movs	r5, #9
 8009c82:	e7f6      	b.n	8009c72 <__s2b+0x66>
 8009c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c88:	4601      	mov	r1, r0
 8009c8a:	3b30      	subs	r3, #48	; 0x30
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff72 	bl	8009b78 <__multadd>
 8009c94:	e7ee      	b.n	8009c74 <__s2b+0x68>
 8009c96:	bf00      	nop
 8009c98:	0800b2cc 	.word	0x0800b2cc
 8009c9c:	0800b3c0 	.word	0x0800b3c0

08009ca0 <__hi0bits>:
 8009ca0:	0c03      	lsrs	r3, r0, #16
 8009ca2:	041b      	lsls	r3, r3, #16
 8009ca4:	b9d3      	cbnz	r3, 8009cdc <__hi0bits+0x3c>
 8009ca6:	0400      	lsls	r0, r0, #16
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cae:	bf04      	itt	eq
 8009cb0:	0200      	lsleq	r0, r0, #8
 8009cb2:	3308      	addeq	r3, #8
 8009cb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cb8:	bf04      	itt	eq
 8009cba:	0100      	lsleq	r0, r0, #4
 8009cbc:	3304      	addeq	r3, #4
 8009cbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009cc2:	bf04      	itt	eq
 8009cc4:	0080      	lsleq	r0, r0, #2
 8009cc6:	3302      	addeq	r3, #2
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	db05      	blt.n	8009cd8 <__hi0bits+0x38>
 8009ccc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cd0:	f103 0301 	add.w	r3, r3, #1
 8009cd4:	bf08      	it	eq
 8009cd6:	2320      	moveq	r3, #32
 8009cd8:	4618      	mov	r0, r3
 8009cda:	4770      	bx	lr
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e7e4      	b.n	8009caa <__hi0bits+0xa>

08009ce0 <__lo0bits>:
 8009ce0:	6803      	ldr	r3, [r0, #0]
 8009ce2:	f013 0207 	ands.w	r2, r3, #7
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	d00b      	beq.n	8009d02 <__lo0bits+0x22>
 8009cea:	07da      	lsls	r2, r3, #31
 8009cec:	d424      	bmi.n	8009d38 <__lo0bits+0x58>
 8009cee:	0798      	lsls	r0, r3, #30
 8009cf0:	bf49      	itett	mi
 8009cf2:	085b      	lsrmi	r3, r3, #1
 8009cf4:	089b      	lsrpl	r3, r3, #2
 8009cf6:	2001      	movmi	r0, #1
 8009cf8:	600b      	strmi	r3, [r1, #0]
 8009cfa:	bf5c      	itt	pl
 8009cfc:	600b      	strpl	r3, [r1, #0]
 8009cfe:	2002      	movpl	r0, #2
 8009d00:	4770      	bx	lr
 8009d02:	b298      	uxth	r0, r3
 8009d04:	b9b0      	cbnz	r0, 8009d34 <__lo0bits+0x54>
 8009d06:	0c1b      	lsrs	r3, r3, #16
 8009d08:	2010      	movs	r0, #16
 8009d0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d0e:	bf04      	itt	eq
 8009d10:	0a1b      	lsreq	r3, r3, #8
 8009d12:	3008      	addeq	r0, #8
 8009d14:	071a      	lsls	r2, r3, #28
 8009d16:	bf04      	itt	eq
 8009d18:	091b      	lsreq	r3, r3, #4
 8009d1a:	3004      	addeq	r0, #4
 8009d1c:	079a      	lsls	r2, r3, #30
 8009d1e:	bf04      	itt	eq
 8009d20:	089b      	lsreq	r3, r3, #2
 8009d22:	3002      	addeq	r0, #2
 8009d24:	07da      	lsls	r2, r3, #31
 8009d26:	d403      	bmi.n	8009d30 <__lo0bits+0x50>
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	f100 0001 	add.w	r0, r0, #1
 8009d2e:	d005      	beq.n	8009d3c <__lo0bits+0x5c>
 8009d30:	600b      	str	r3, [r1, #0]
 8009d32:	4770      	bx	lr
 8009d34:	4610      	mov	r0, r2
 8009d36:	e7e8      	b.n	8009d0a <__lo0bits+0x2a>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	4770      	bx	lr
 8009d3c:	2020      	movs	r0, #32
 8009d3e:	4770      	bx	lr

08009d40 <__i2b>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	460c      	mov	r4, r1
 8009d44:	2101      	movs	r1, #1
 8009d46:	f7ff feb5 	bl	8009ab4 <_Balloc>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	b928      	cbnz	r0, 8009d5a <__i2b+0x1a>
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <__i2b+0x24>)
 8009d50:	4805      	ldr	r0, [pc, #20]	; (8009d68 <__i2b+0x28>)
 8009d52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d56:	f000 ff63 	bl	800ac20 <__assert_func>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	6144      	str	r4, [r0, #20]
 8009d5e:	6103      	str	r3, [r0, #16]
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	bf00      	nop
 8009d64:	0800b2cc 	.word	0x0800b2cc
 8009d68:	0800b3c0 	.word	0x0800b3c0

08009d6c <__multiply>:
 8009d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	4614      	mov	r4, r2
 8009d72:	690a      	ldr	r2, [r1, #16]
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	bfb8      	it	lt
 8009d7a:	460b      	movlt	r3, r1
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	bfbc      	itt	lt
 8009d80:	4625      	movlt	r5, r4
 8009d82:	461c      	movlt	r4, r3
 8009d84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009d88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d8c:	68ab      	ldr	r3, [r5, #8]
 8009d8e:	6869      	ldr	r1, [r5, #4]
 8009d90:	eb0a 0709 	add.w	r7, sl, r9
 8009d94:	42bb      	cmp	r3, r7
 8009d96:	b085      	sub	sp, #20
 8009d98:	bfb8      	it	lt
 8009d9a:	3101      	addlt	r1, #1
 8009d9c:	f7ff fe8a 	bl	8009ab4 <_Balloc>
 8009da0:	b930      	cbnz	r0, 8009db0 <__multiply+0x44>
 8009da2:	4602      	mov	r2, r0
 8009da4:	4b42      	ldr	r3, [pc, #264]	; (8009eb0 <__multiply+0x144>)
 8009da6:	4843      	ldr	r0, [pc, #268]	; (8009eb4 <__multiply+0x148>)
 8009da8:	f240 115d 	movw	r1, #349	; 0x15d
 8009dac:	f000 ff38 	bl	800ac20 <__assert_func>
 8009db0:	f100 0614 	add.w	r6, r0, #20
 8009db4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009db8:	4633      	mov	r3, r6
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4543      	cmp	r3, r8
 8009dbe:	d31e      	bcc.n	8009dfe <__multiply+0x92>
 8009dc0:	f105 0c14 	add.w	ip, r5, #20
 8009dc4:	f104 0314 	add.w	r3, r4, #20
 8009dc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009dcc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009dd0:	9202      	str	r2, [sp, #8]
 8009dd2:	ebac 0205 	sub.w	r2, ip, r5
 8009dd6:	3a15      	subs	r2, #21
 8009dd8:	f022 0203 	bic.w	r2, r2, #3
 8009ddc:	3204      	adds	r2, #4
 8009dde:	f105 0115 	add.w	r1, r5, #21
 8009de2:	458c      	cmp	ip, r1
 8009de4:	bf38      	it	cc
 8009de6:	2204      	movcc	r2, #4
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	9a02      	ldr	r2, [sp, #8]
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d808      	bhi.n	8009e04 <__multiply+0x98>
 8009df2:	2f00      	cmp	r7, #0
 8009df4:	dc55      	bgt.n	8009ea2 <__multiply+0x136>
 8009df6:	6107      	str	r7, [r0, #16]
 8009df8:	b005      	add	sp, #20
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	f843 2b04 	str.w	r2, [r3], #4
 8009e02:	e7db      	b.n	8009dbc <__multiply+0x50>
 8009e04:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e08:	f1ba 0f00 	cmp.w	sl, #0
 8009e0c:	d020      	beq.n	8009e50 <__multiply+0xe4>
 8009e0e:	f105 0e14 	add.w	lr, r5, #20
 8009e12:	46b1      	mov	r9, r6
 8009e14:	2200      	movs	r2, #0
 8009e16:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e1a:	f8d9 b000 	ldr.w	fp, [r9]
 8009e1e:	b2a1      	uxth	r1, r4
 8009e20:	fa1f fb8b 	uxth.w	fp, fp
 8009e24:	fb0a b101 	mla	r1, sl, r1, fp
 8009e28:	4411      	add	r1, r2
 8009e2a:	f8d9 2000 	ldr.w	r2, [r9]
 8009e2e:	0c24      	lsrs	r4, r4, #16
 8009e30:	0c12      	lsrs	r2, r2, #16
 8009e32:	fb0a 2404 	mla	r4, sl, r4, r2
 8009e36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009e3a:	b289      	uxth	r1, r1
 8009e3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e40:	45f4      	cmp	ip, lr
 8009e42:	f849 1b04 	str.w	r1, [r9], #4
 8009e46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009e4a:	d8e4      	bhi.n	8009e16 <__multiply+0xaa>
 8009e4c:	9901      	ldr	r1, [sp, #4]
 8009e4e:	5072      	str	r2, [r6, r1]
 8009e50:	9a03      	ldr	r2, [sp, #12]
 8009e52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e56:	3304      	adds	r3, #4
 8009e58:	f1b9 0f00 	cmp.w	r9, #0
 8009e5c:	d01f      	beq.n	8009e9e <__multiply+0x132>
 8009e5e:	6834      	ldr	r4, [r6, #0]
 8009e60:	f105 0114 	add.w	r1, r5, #20
 8009e64:	46b6      	mov	lr, r6
 8009e66:	f04f 0a00 	mov.w	sl, #0
 8009e6a:	880a      	ldrh	r2, [r1, #0]
 8009e6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009e70:	fb09 b202 	mla	r2, r9, r2, fp
 8009e74:	4492      	add	sl, r2
 8009e76:	b2a4      	uxth	r4, r4
 8009e78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009e7c:	f84e 4b04 	str.w	r4, [lr], #4
 8009e80:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e84:	f8be 2000 	ldrh.w	r2, [lr]
 8009e88:	0c24      	lsrs	r4, r4, #16
 8009e8a:	fb09 2404 	mla	r4, r9, r4, r2
 8009e8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009e92:	458c      	cmp	ip, r1
 8009e94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e98:	d8e7      	bhi.n	8009e6a <__multiply+0xfe>
 8009e9a:	9a01      	ldr	r2, [sp, #4]
 8009e9c:	50b4      	str	r4, [r6, r2]
 8009e9e:	3604      	adds	r6, #4
 8009ea0:	e7a3      	b.n	8009dea <__multiply+0x7e>
 8009ea2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1a5      	bne.n	8009df6 <__multiply+0x8a>
 8009eaa:	3f01      	subs	r7, #1
 8009eac:	e7a1      	b.n	8009df2 <__multiply+0x86>
 8009eae:	bf00      	nop
 8009eb0:	0800b2cc 	.word	0x0800b2cc
 8009eb4:	0800b3c0 	.word	0x0800b3c0

08009eb8 <__pow5mult>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	4615      	mov	r5, r2
 8009ebe:	f012 0203 	ands.w	r2, r2, #3
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	d007      	beq.n	8009ed8 <__pow5mult+0x20>
 8009ec8:	4c25      	ldr	r4, [pc, #148]	; (8009f60 <__pow5mult+0xa8>)
 8009eca:	3a01      	subs	r2, #1
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ed2:	f7ff fe51 	bl	8009b78 <__multadd>
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	10ad      	asrs	r5, r5, #2
 8009eda:	d03d      	beq.n	8009f58 <__pow5mult+0xa0>
 8009edc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ede:	b97c      	cbnz	r4, 8009f00 <__pow5mult+0x48>
 8009ee0:	2010      	movs	r0, #16
 8009ee2:	f7ff fdbf 	bl	8009a64 <malloc>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6270      	str	r0, [r6, #36]	; 0x24
 8009eea:	b928      	cbnz	r0, 8009ef8 <__pow5mult+0x40>
 8009eec:	4b1d      	ldr	r3, [pc, #116]	; (8009f64 <__pow5mult+0xac>)
 8009eee:	481e      	ldr	r0, [pc, #120]	; (8009f68 <__pow5mult+0xb0>)
 8009ef0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ef4:	f000 fe94 	bl	800ac20 <__assert_func>
 8009ef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009efc:	6004      	str	r4, [r0, #0]
 8009efe:	60c4      	str	r4, [r0, #12]
 8009f00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f08:	b94c      	cbnz	r4, 8009f1e <__pow5mult+0x66>
 8009f0a:	f240 2171 	movw	r1, #625	; 0x271
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f7ff ff16 	bl	8009d40 <__i2b>
 8009f14:	2300      	movs	r3, #0
 8009f16:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	6003      	str	r3, [r0, #0]
 8009f1e:	f04f 0900 	mov.w	r9, #0
 8009f22:	07eb      	lsls	r3, r5, #31
 8009f24:	d50a      	bpl.n	8009f3c <__pow5mult+0x84>
 8009f26:	4639      	mov	r1, r7
 8009f28:	4622      	mov	r2, r4
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7ff ff1e 	bl	8009d6c <__multiply>
 8009f30:	4639      	mov	r1, r7
 8009f32:	4680      	mov	r8, r0
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff fdfd 	bl	8009b34 <_Bfree>
 8009f3a:	4647      	mov	r7, r8
 8009f3c:	106d      	asrs	r5, r5, #1
 8009f3e:	d00b      	beq.n	8009f58 <__pow5mult+0xa0>
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	b938      	cbnz	r0, 8009f54 <__pow5mult+0x9c>
 8009f44:	4622      	mov	r2, r4
 8009f46:	4621      	mov	r1, r4
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7ff ff0f 	bl	8009d6c <__multiply>
 8009f4e:	6020      	str	r0, [r4, #0]
 8009f50:	f8c0 9000 	str.w	r9, [r0]
 8009f54:	4604      	mov	r4, r0
 8009f56:	e7e4      	b.n	8009f22 <__pow5mult+0x6a>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f5e:	bf00      	nop
 8009f60:	0800b510 	.word	0x0800b510
 8009f64:	0800b256 	.word	0x0800b256
 8009f68:	0800b3c0 	.word	0x0800b3c0

08009f6c <__lshift>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	460c      	mov	r4, r1
 8009f72:	6849      	ldr	r1, [r1, #4]
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f7a:	68a3      	ldr	r3, [r4, #8]
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	4691      	mov	r9, r2
 8009f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f84:	f108 0601 	add.w	r6, r8, #1
 8009f88:	42b3      	cmp	r3, r6
 8009f8a:	db0b      	blt.n	8009fa4 <__lshift+0x38>
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff fd91 	bl	8009ab4 <_Balloc>
 8009f92:	4605      	mov	r5, r0
 8009f94:	b948      	cbnz	r0, 8009faa <__lshift+0x3e>
 8009f96:	4602      	mov	r2, r0
 8009f98:	4b28      	ldr	r3, [pc, #160]	; (800a03c <__lshift+0xd0>)
 8009f9a:	4829      	ldr	r0, [pc, #164]	; (800a040 <__lshift+0xd4>)
 8009f9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fa0:	f000 fe3e 	bl	800ac20 <__assert_func>
 8009fa4:	3101      	adds	r1, #1
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	e7ee      	b.n	8009f88 <__lshift+0x1c>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f100 0114 	add.w	r1, r0, #20
 8009fb0:	f100 0210 	add.w	r2, r0, #16
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	4553      	cmp	r3, sl
 8009fb8:	db33      	blt.n	800a022 <__lshift+0xb6>
 8009fba:	6920      	ldr	r0, [r4, #16]
 8009fbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fc0:	f104 0314 	add.w	r3, r4, #20
 8009fc4:	f019 091f 	ands.w	r9, r9, #31
 8009fc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fd0:	d02b      	beq.n	800a02a <__lshift+0xbe>
 8009fd2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fd6:	468a      	mov	sl, r1
 8009fd8:	2200      	movs	r2, #0
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	fa00 f009 	lsl.w	r0, r0, r9
 8009fe0:	4302      	orrs	r2, r0
 8009fe2:	f84a 2b04 	str.w	r2, [sl], #4
 8009fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fea:	459c      	cmp	ip, r3
 8009fec:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ff0:	d8f3      	bhi.n	8009fda <__lshift+0x6e>
 8009ff2:	ebac 0304 	sub.w	r3, ip, r4
 8009ff6:	3b15      	subs	r3, #21
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	f104 0015 	add.w	r0, r4, #21
 800a002:	4584      	cmp	ip, r0
 800a004:	bf38      	it	cc
 800a006:	2304      	movcc	r3, #4
 800a008:	50ca      	str	r2, [r1, r3]
 800a00a:	b10a      	cbz	r2, 800a010 <__lshift+0xa4>
 800a00c:	f108 0602 	add.w	r6, r8, #2
 800a010:	3e01      	subs	r6, #1
 800a012:	4638      	mov	r0, r7
 800a014:	612e      	str	r6, [r5, #16]
 800a016:	4621      	mov	r1, r4
 800a018:	f7ff fd8c 	bl	8009b34 <_Bfree>
 800a01c:	4628      	mov	r0, r5
 800a01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a022:	f842 0f04 	str.w	r0, [r2, #4]!
 800a026:	3301      	adds	r3, #1
 800a028:	e7c5      	b.n	8009fb6 <__lshift+0x4a>
 800a02a:	3904      	subs	r1, #4
 800a02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a030:	f841 2f04 	str.w	r2, [r1, #4]!
 800a034:	459c      	cmp	ip, r3
 800a036:	d8f9      	bhi.n	800a02c <__lshift+0xc0>
 800a038:	e7ea      	b.n	800a010 <__lshift+0xa4>
 800a03a:	bf00      	nop
 800a03c:	0800b2cc 	.word	0x0800b2cc
 800a040:	0800b3c0 	.word	0x0800b3c0

0800a044 <__mcmp>:
 800a044:	b530      	push	{r4, r5, lr}
 800a046:	6902      	ldr	r2, [r0, #16]
 800a048:	690c      	ldr	r4, [r1, #16]
 800a04a:	1b12      	subs	r2, r2, r4
 800a04c:	d10e      	bne.n	800a06c <__mcmp+0x28>
 800a04e:	f100 0314 	add.w	r3, r0, #20
 800a052:	3114      	adds	r1, #20
 800a054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a05c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a064:	42a5      	cmp	r5, r4
 800a066:	d003      	beq.n	800a070 <__mcmp+0x2c>
 800a068:	d305      	bcc.n	800a076 <__mcmp+0x32>
 800a06a:	2201      	movs	r2, #1
 800a06c:	4610      	mov	r0, r2
 800a06e:	bd30      	pop	{r4, r5, pc}
 800a070:	4283      	cmp	r3, r0
 800a072:	d3f3      	bcc.n	800a05c <__mcmp+0x18>
 800a074:	e7fa      	b.n	800a06c <__mcmp+0x28>
 800a076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a07a:	e7f7      	b.n	800a06c <__mcmp+0x28>

0800a07c <__mdiff>:
 800a07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	4606      	mov	r6, r0
 800a084:	4611      	mov	r1, r2
 800a086:	4620      	mov	r0, r4
 800a088:	4617      	mov	r7, r2
 800a08a:	f7ff ffdb 	bl	800a044 <__mcmp>
 800a08e:	1e05      	subs	r5, r0, #0
 800a090:	d110      	bne.n	800a0b4 <__mdiff+0x38>
 800a092:	4629      	mov	r1, r5
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff fd0d 	bl	8009ab4 <_Balloc>
 800a09a:	b930      	cbnz	r0, 800a0aa <__mdiff+0x2e>
 800a09c:	4b39      	ldr	r3, [pc, #228]	; (800a184 <__mdiff+0x108>)
 800a09e:	4602      	mov	r2, r0
 800a0a0:	f240 2132 	movw	r1, #562	; 0x232
 800a0a4:	4838      	ldr	r0, [pc, #224]	; (800a188 <__mdiff+0x10c>)
 800a0a6:	f000 fdbb 	bl	800ac20 <__assert_func>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	bfa4      	itt	ge
 800a0b6:	463b      	movge	r3, r7
 800a0b8:	4627      	movge	r7, r4
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	bfa6      	itte	ge
 800a0c0:	461c      	movge	r4, r3
 800a0c2:	2500      	movge	r5, #0
 800a0c4:	2501      	movlt	r5, #1
 800a0c6:	f7ff fcf5 	bl	8009ab4 <_Balloc>
 800a0ca:	b920      	cbnz	r0, 800a0d6 <__mdiff+0x5a>
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	; (800a184 <__mdiff+0x108>)
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0d4:	e7e6      	b.n	800a0a4 <__mdiff+0x28>
 800a0d6:	693e      	ldr	r6, [r7, #16]
 800a0d8:	60c5      	str	r5, [r0, #12]
 800a0da:	6925      	ldr	r5, [r4, #16]
 800a0dc:	f107 0114 	add.w	r1, r7, #20
 800a0e0:	f104 0914 	add.w	r9, r4, #20
 800a0e4:	f100 0e14 	add.w	lr, r0, #20
 800a0e8:	f107 0210 	add.w	r2, r7, #16
 800a0ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a0f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a0f4:	46f2      	mov	sl, lr
 800a0f6:	2700      	movs	r7, #0
 800a0f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a100:	fa1f f883 	uxth.w	r8, r3
 800a104:	fa17 f78b 	uxtah	r7, r7, fp
 800a108:	0c1b      	lsrs	r3, r3, #16
 800a10a:	eba7 0808 	sub.w	r8, r7, r8
 800a10e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a112:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a116:	fa1f f888 	uxth.w	r8, r8
 800a11a:	141f      	asrs	r7, r3, #16
 800a11c:	454d      	cmp	r5, r9
 800a11e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a122:	f84a 3b04 	str.w	r3, [sl], #4
 800a126:	d8e7      	bhi.n	800a0f8 <__mdiff+0x7c>
 800a128:	1b2b      	subs	r3, r5, r4
 800a12a:	3b15      	subs	r3, #21
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	3304      	adds	r3, #4
 800a132:	3415      	adds	r4, #21
 800a134:	42a5      	cmp	r5, r4
 800a136:	bf38      	it	cc
 800a138:	2304      	movcc	r3, #4
 800a13a:	4419      	add	r1, r3
 800a13c:	4473      	add	r3, lr
 800a13e:	469e      	mov	lr, r3
 800a140:	460d      	mov	r5, r1
 800a142:	4565      	cmp	r5, ip
 800a144:	d30e      	bcc.n	800a164 <__mdiff+0xe8>
 800a146:	f10c 0203 	add.w	r2, ip, #3
 800a14a:	1a52      	subs	r2, r2, r1
 800a14c:	f022 0203 	bic.w	r2, r2, #3
 800a150:	3903      	subs	r1, #3
 800a152:	458c      	cmp	ip, r1
 800a154:	bf38      	it	cc
 800a156:	2200      	movcc	r2, #0
 800a158:	441a      	add	r2, r3
 800a15a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a15e:	b17b      	cbz	r3, 800a180 <__mdiff+0x104>
 800a160:	6106      	str	r6, [r0, #16]
 800a162:	e7a5      	b.n	800a0b0 <__mdiff+0x34>
 800a164:	f855 8b04 	ldr.w	r8, [r5], #4
 800a168:	fa17 f488 	uxtah	r4, r7, r8
 800a16c:	1422      	asrs	r2, r4, #16
 800a16e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a172:	b2a4      	uxth	r4, r4
 800a174:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a178:	f84e 4b04 	str.w	r4, [lr], #4
 800a17c:	1417      	asrs	r7, r2, #16
 800a17e:	e7e0      	b.n	800a142 <__mdiff+0xc6>
 800a180:	3e01      	subs	r6, #1
 800a182:	e7ea      	b.n	800a15a <__mdiff+0xde>
 800a184:	0800b2cc 	.word	0x0800b2cc
 800a188:	0800b3c0 	.word	0x0800b3c0

0800a18c <__ulp>:
 800a18c:	b082      	sub	sp, #8
 800a18e:	ed8d 0b00 	vstr	d0, [sp]
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	4912      	ldr	r1, [pc, #72]	; (800a1e0 <__ulp+0x54>)
 800a196:	4019      	ands	r1, r3
 800a198:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a19c:	2900      	cmp	r1, #0
 800a19e:	dd05      	ble.n	800a1ac <__ulp+0x20>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	ec43 2b10 	vmov	d0, r2, r3
 800a1a8:	b002      	add	sp, #8
 800a1aa:	4770      	bx	lr
 800a1ac:	4249      	negs	r1, r1
 800a1ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a1b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a1b6:	f04f 0200 	mov.w	r2, #0
 800a1ba:	f04f 0300 	mov.w	r3, #0
 800a1be:	da04      	bge.n	800a1ca <__ulp+0x3e>
 800a1c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a1c4:	fa41 f300 	asr.w	r3, r1, r0
 800a1c8:	e7ec      	b.n	800a1a4 <__ulp+0x18>
 800a1ca:	f1a0 0114 	sub.w	r1, r0, #20
 800a1ce:	291e      	cmp	r1, #30
 800a1d0:	bfda      	itte	le
 800a1d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a1d6:	fa20 f101 	lsrle.w	r1, r0, r1
 800a1da:	2101      	movgt	r1, #1
 800a1dc:	460a      	mov	r2, r1
 800a1de:	e7e1      	b.n	800a1a4 <__ulp+0x18>
 800a1e0:	7ff00000 	.word	0x7ff00000

0800a1e4 <__b2d>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	6905      	ldr	r5, [r0, #16]
 800a1e8:	f100 0714 	add.w	r7, r0, #20
 800a1ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a1f0:	1f2e      	subs	r6, r5, #4
 800a1f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff fd52 	bl	8009ca0 <__hi0bits>
 800a1fc:	f1c0 0320 	rsb	r3, r0, #32
 800a200:	280a      	cmp	r0, #10
 800a202:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a280 <__b2d+0x9c>
 800a206:	600b      	str	r3, [r1, #0]
 800a208:	dc14      	bgt.n	800a234 <__b2d+0x50>
 800a20a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a20e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a212:	42b7      	cmp	r7, r6
 800a214:	ea41 030c 	orr.w	r3, r1, ip
 800a218:	bf34      	ite	cc
 800a21a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a21e:	2100      	movcs	r1, #0
 800a220:	3015      	adds	r0, #21
 800a222:	fa04 f000 	lsl.w	r0, r4, r0
 800a226:	fa21 f10e 	lsr.w	r1, r1, lr
 800a22a:	ea40 0201 	orr.w	r2, r0, r1
 800a22e:	ec43 2b10 	vmov	d0, r2, r3
 800a232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a234:	42b7      	cmp	r7, r6
 800a236:	bf3a      	itte	cc
 800a238:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a23c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a240:	2100      	movcs	r1, #0
 800a242:	380b      	subs	r0, #11
 800a244:	d017      	beq.n	800a276 <__b2d+0x92>
 800a246:	f1c0 0c20 	rsb	ip, r0, #32
 800a24a:	fa04 f500 	lsl.w	r5, r4, r0
 800a24e:	42be      	cmp	r6, r7
 800a250:	fa21 f40c 	lsr.w	r4, r1, ip
 800a254:	ea45 0504 	orr.w	r5, r5, r4
 800a258:	bf8c      	ite	hi
 800a25a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a25e:	2400      	movls	r4, #0
 800a260:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a264:	fa01 f000 	lsl.w	r0, r1, r0
 800a268:	fa24 f40c 	lsr.w	r4, r4, ip
 800a26c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a270:	ea40 0204 	orr.w	r2, r0, r4
 800a274:	e7db      	b.n	800a22e <__b2d+0x4a>
 800a276:	ea44 030c 	orr.w	r3, r4, ip
 800a27a:	460a      	mov	r2, r1
 800a27c:	e7d7      	b.n	800a22e <__b2d+0x4a>
 800a27e:	bf00      	nop
 800a280:	3ff00000 	.word	0x3ff00000

0800a284 <__d2b>:
 800a284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a288:	4689      	mov	r9, r1
 800a28a:	2101      	movs	r1, #1
 800a28c:	ec57 6b10 	vmov	r6, r7, d0
 800a290:	4690      	mov	r8, r2
 800a292:	f7ff fc0f 	bl	8009ab4 <_Balloc>
 800a296:	4604      	mov	r4, r0
 800a298:	b930      	cbnz	r0, 800a2a8 <__d2b+0x24>
 800a29a:	4602      	mov	r2, r0
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <__d2b+0xb0>)
 800a29e:	4826      	ldr	r0, [pc, #152]	; (800a338 <__d2b+0xb4>)
 800a2a0:	f240 310a 	movw	r1, #778	; 0x30a
 800a2a4:	f000 fcbc 	bl	800ac20 <__assert_func>
 800a2a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2b0:	bb35      	cbnz	r5, 800a300 <__d2b+0x7c>
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	d028      	beq.n	800a30a <__d2b+0x86>
 800a2b8:	4668      	mov	r0, sp
 800a2ba:	9600      	str	r6, [sp, #0]
 800a2bc:	f7ff fd10 	bl	8009ce0 <__lo0bits>
 800a2c0:	9900      	ldr	r1, [sp, #0]
 800a2c2:	b300      	cbz	r0, 800a306 <__d2b+0x82>
 800a2c4:	9a01      	ldr	r2, [sp, #4]
 800a2c6:	f1c0 0320 	rsb	r3, r0, #32
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	40c2      	lsrs	r2, r0
 800a2d2:	6163      	str	r3, [r4, #20]
 800a2d4:	9201      	str	r2, [sp, #4]
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	61a3      	str	r3, [r4, #24]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bf14      	ite	ne
 800a2de:	2202      	movne	r2, #2
 800a2e0:	2201      	moveq	r2, #1
 800a2e2:	6122      	str	r2, [r4, #16]
 800a2e4:	b1d5      	cbz	r5, 800a31c <__d2b+0x98>
 800a2e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2ea:	4405      	add	r5, r0
 800a2ec:	f8c9 5000 	str.w	r5, [r9]
 800a2f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2f4:	f8c8 0000 	str.w	r0, [r8]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	b003      	add	sp, #12
 800a2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a304:	e7d5      	b.n	800a2b2 <__d2b+0x2e>
 800a306:	6161      	str	r1, [r4, #20]
 800a308:	e7e5      	b.n	800a2d6 <__d2b+0x52>
 800a30a:	a801      	add	r0, sp, #4
 800a30c:	f7ff fce8 	bl	8009ce0 <__lo0bits>
 800a310:	9b01      	ldr	r3, [sp, #4]
 800a312:	6163      	str	r3, [r4, #20]
 800a314:	2201      	movs	r2, #1
 800a316:	6122      	str	r2, [r4, #16]
 800a318:	3020      	adds	r0, #32
 800a31a:	e7e3      	b.n	800a2e4 <__d2b+0x60>
 800a31c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a320:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a324:	f8c9 0000 	str.w	r0, [r9]
 800a328:	6918      	ldr	r0, [r3, #16]
 800a32a:	f7ff fcb9 	bl	8009ca0 <__hi0bits>
 800a32e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a332:	e7df      	b.n	800a2f4 <__d2b+0x70>
 800a334:	0800b2cc 	.word	0x0800b2cc
 800a338:	0800b3c0 	.word	0x0800b3c0

0800a33c <__ratio>:
 800a33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	4688      	mov	r8, r1
 800a342:	4669      	mov	r1, sp
 800a344:	4681      	mov	r9, r0
 800a346:	f7ff ff4d 	bl	800a1e4 <__b2d>
 800a34a:	a901      	add	r1, sp, #4
 800a34c:	4640      	mov	r0, r8
 800a34e:	ec55 4b10 	vmov	r4, r5, d0
 800a352:	f7ff ff47 	bl	800a1e4 <__b2d>
 800a356:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a35a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a35e:	eba3 0c02 	sub.w	ip, r3, r2
 800a362:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a366:	1a9b      	subs	r3, r3, r2
 800a368:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a36c:	ec51 0b10 	vmov	r0, r1, d0
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfd6      	itet	le
 800a374:	460a      	movle	r2, r1
 800a376:	462a      	movgt	r2, r5
 800a378:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a37c:	468b      	mov	fp, r1
 800a37e:	462f      	mov	r7, r5
 800a380:	bfd4      	ite	le
 800a382:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a38a:	4620      	mov	r0, r4
 800a38c:	ee10 2a10 	vmov	r2, s0
 800a390:	465b      	mov	r3, fp
 800a392:	4639      	mov	r1, r7
 800a394:	f7f6 fa6a 	bl	800086c <__aeabi_ddiv>
 800a398:	ec41 0b10 	vmov	d0, r0, r1
 800a39c:	b003      	add	sp, #12
 800a39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3a2 <__copybits>:
 800a3a2:	3901      	subs	r1, #1
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	1149      	asrs	r1, r1, #5
 800a3a8:	6914      	ldr	r4, [r2, #16]
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	f102 0314 	add.w	r3, r2, #20
 800a3b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3b8:	1f05      	subs	r5, r0, #4
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	d30c      	bcc.n	800a3d8 <__copybits+0x36>
 800a3be:	1aa3      	subs	r3, r4, r2
 800a3c0:	3b11      	subs	r3, #17
 800a3c2:	f023 0303 	bic.w	r3, r3, #3
 800a3c6:	3211      	adds	r2, #17
 800a3c8:	42a2      	cmp	r2, r4
 800a3ca:	bf88      	it	hi
 800a3cc:	2300      	movhi	r3, #0
 800a3ce:	4418      	add	r0, r3
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4288      	cmp	r0, r1
 800a3d4:	d305      	bcc.n	800a3e2 <__copybits+0x40>
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3e0:	e7eb      	b.n	800a3ba <__copybits+0x18>
 800a3e2:	f840 3b04 	str.w	r3, [r0], #4
 800a3e6:	e7f4      	b.n	800a3d2 <__copybits+0x30>

0800a3e8 <__any_on>:
 800a3e8:	f100 0214 	add.w	r2, r0, #20
 800a3ec:	6900      	ldr	r0, [r0, #16]
 800a3ee:	114b      	asrs	r3, r1, #5
 800a3f0:	4298      	cmp	r0, r3
 800a3f2:	b510      	push	{r4, lr}
 800a3f4:	db11      	blt.n	800a41a <__any_on+0x32>
 800a3f6:	dd0a      	ble.n	800a40e <__any_on+0x26>
 800a3f8:	f011 011f 	ands.w	r1, r1, #31
 800a3fc:	d007      	beq.n	800a40e <__any_on+0x26>
 800a3fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a402:	fa24 f001 	lsr.w	r0, r4, r1
 800a406:	fa00 f101 	lsl.w	r1, r0, r1
 800a40a:	428c      	cmp	r4, r1
 800a40c:	d10b      	bne.n	800a426 <__any_on+0x3e>
 800a40e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a412:	4293      	cmp	r3, r2
 800a414:	d803      	bhi.n	800a41e <__any_on+0x36>
 800a416:	2000      	movs	r0, #0
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	4603      	mov	r3, r0
 800a41c:	e7f7      	b.n	800a40e <__any_on+0x26>
 800a41e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a422:	2900      	cmp	r1, #0
 800a424:	d0f5      	beq.n	800a412 <__any_on+0x2a>
 800a426:	2001      	movs	r0, #1
 800a428:	e7f6      	b.n	800a418 <__any_on+0x30>

0800a42a <_calloc_r>:
 800a42a:	b513      	push	{r0, r1, r4, lr}
 800a42c:	434a      	muls	r2, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	9201      	str	r2, [sp, #4]
 800a432:	f000 f859 	bl	800a4e8 <_malloc_r>
 800a436:	4604      	mov	r4, r0
 800a438:	b118      	cbz	r0, 800a442 <_calloc_r+0x18>
 800a43a:	9a01      	ldr	r2, [sp, #4]
 800a43c:	2100      	movs	r1, #0
 800a43e:	f7fc f85d 	bl	80064fc <memset>
 800a442:	4620      	mov	r0, r4
 800a444:	b002      	add	sp, #8
 800a446:	bd10      	pop	{r4, pc}

0800a448 <_free_r>:
 800a448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a44a:	2900      	cmp	r1, #0
 800a44c:	d048      	beq.n	800a4e0 <_free_r+0x98>
 800a44e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a452:	9001      	str	r0, [sp, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f1a1 0404 	sub.w	r4, r1, #4
 800a45a:	bfb8      	it	lt
 800a45c:	18e4      	addlt	r4, r4, r3
 800a45e:	f000 fc6d 	bl	800ad3c <__malloc_lock>
 800a462:	4a20      	ldr	r2, [pc, #128]	; (800a4e4 <_free_r+0x9c>)
 800a464:	9801      	ldr	r0, [sp, #4]
 800a466:	6813      	ldr	r3, [r2, #0]
 800a468:	4615      	mov	r5, r2
 800a46a:	b933      	cbnz	r3, 800a47a <_free_r+0x32>
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	6014      	str	r4, [r2, #0]
 800a470:	b003      	add	sp, #12
 800a472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a476:	f000 bc67 	b.w	800ad48 <__malloc_unlock>
 800a47a:	42a3      	cmp	r3, r4
 800a47c:	d90b      	bls.n	800a496 <_free_r+0x4e>
 800a47e:	6821      	ldr	r1, [r4, #0]
 800a480:	1862      	adds	r2, r4, r1
 800a482:	4293      	cmp	r3, r2
 800a484:	bf04      	itt	eq
 800a486:	681a      	ldreq	r2, [r3, #0]
 800a488:	685b      	ldreq	r3, [r3, #4]
 800a48a:	6063      	str	r3, [r4, #4]
 800a48c:	bf04      	itt	eq
 800a48e:	1852      	addeq	r2, r2, r1
 800a490:	6022      	streq	r2, [r4, #0]
 800a492:	602c      	str	r4, [r5, #0]
 800a494:	e7ec      	b.n	800a470 <_free_r+0x28>
 800a496:	461a      	mov	r2, r3
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	b10b      	cbz	r3, 800a4a0 <_free_r+0x58>
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	d9fa      	bls.n	800a496 <_free_r+0x4e>
 800a4a0:	6811      	ldr	r1, [r2, #0]
 800a4a2:	1855      	adds	r5, r2, r1
 800a4a4:	42a5      	cmp	r5, r4
 800a4a6:	d10b      	bne.n	800a4c0 <_free_r+0x78>
 800a4a8:	6824      	ldr	r4, [r4, #0]
 800a4aa:	4421      	add	r1, r4
 800a4ac:	1854      	adds	r4, r2, r1
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	6011      	str	r1, [r2, #0]
 800a4b2:	d1dd      	bne.n	800a470 <_free_r+0x28>
 800a4b4:	681c      	ldr	r4, [r3, #0]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	6053      	str	r3, [r2, #4]
 800a4ba:	4421      	add	r1, r4
 800a4bc:	6011      	str	r1, [r2, #0]
 800a4be:	e7d7      	b.n	800a470 <_free_r+0x28>
 800a4c0:	d902      	bls.n	800a4c8 <_free_r+0x80>
 800a4c2:	230c      	movs	r3, #12
 800a4c4:	6003      	str	r3, [r0, #0]
 800a4c6:	e7d3      	b.n	800a470 <_free_r+0x28>
 800a4c8:	6825      	ldr	r5, [r4, #0]
 800a4ca:	1961      	adds	r1, r4, r5
 800a4cc:	428b      	cmp	r3, r1
 800a4ce:	bf04      	itt	eq
 800a4d0:	6819      	ldreq	r1, [r3, #0]
 800a4d2:	685b      	ldreq	r3, [r3, #4]
 800a4d4:	6063      	str	r3, [r4, #4]
 800a4d6:	bf04      	itt	eq
 800a4d8:	1949      	addeq	r1, r1, r5
 800a4da:	6021      	streq	r1, [r4, #0]
 800a4dc:	6054      	str	r4, [r2, #4]
 800a4de:	e7c7      	b.n	800a470 <_free_r+0x28>
 800a4e0:	b003      	add	sp, #12
 800a4e2:	bd30      	pop	{r4, r5, pc}
 800a4e4:	20000210 	.word	0x20000210

0800a4e8 <_malloc_r>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	1ccd      	adds	r5, r1, #3
 800a4ec:	f025 0503 	bic.w	r5, r5, #3
 800a4f0:	3508      	adds	r5, #8
 800a4f2:	2d0c      	cmp	r5, #12
 800a4f4:	bf38      	it	cc
 800a4f6:	250c      	movcc	r5, #12
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	db01      	blt.n	800a502 <_malloc_r+0x1a>
 800a4fe:	42a9      	cmp	r1, r5
 800a500:	d903      	bls.n	800a50a <_malloc_r+0x22>
 800a502:	230c      	movs	r3, #12
 800a504:	6033      	str	r3, [r6, #0]
 800a506:	2000      	movs	r0, #0
 800a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a50a:	f000 fc17 	bl	800ad3c <__malloc_lock>
 800a50e:	4921      	ldr	r1, [pc, #132]	; (800a594 <_malloc_r+0xac>)
 800a510:	680a      	ldr	r2, [r1, #0]
 800a512:	4614      	mov	r4, r2
 800a514:	b99c      	cbnz	r4, 800a53e <_malloc_r+0x56>
 800a516:	4f20      	ldr	r7, [pc, #128]	; (800a598 <_malloc_r+0xb0>)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	b923      	cbnz	r3, 800a526 <_malloc_r+0x3e>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4630      	mov	r0, r6
 800a520:	f000 fafa 	bl	800ab18 <_sbrk_r>
 800a524:	6038      	str	r0, [r7, #0]
 800a526:	4629      	mov	r1, r5
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 faf5 	bl	800ab18 <_sbrk_r>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d123      	bne.n	800a57a <_malloc_r+0x92>
 800a532:	230c      	movs	r3, #12
 800a534:	6033      	str	r3, [r6, #0]
 800a536:	4630      	mov	r0, r6
 800a538:	f000 fc06 	bl	800ad48 <__malloc_unlock>
 800a53c:	e7e3      	b.n	800a506 <_malloc_r+0x1e>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	1b5b      	subs	r3, r3, r5
 800a542:	d417      	bmi.n	800a574 <_malloc_r+0x8c>
 800a544:	2b0b      	cmp	r3, #11
 800a546:	d903      	bls.n	800a550 <_malloc_r+0x68>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	441c      	add	r4, r3
 800a54c:	6025      	str	r5, [r4, #0]
 800a54e:	e004      	b.n	800a55a <_malloc_r+0x72>
 800a550:	6863      	ldr	r3, [r4, #4]
 800a552:	42a2      	cmp	r2, r4
 800a554:	bf0c      	ite	eq
 800a556:	600b      	streq	r3, [r1, #0]
 800a558:	6053      	strne	r3, [r2, #4]
 800a55a:	4630      	mov	r0, r6
 800a55c:	f000 fbf4 	bl	800ad48 <__malloc_unlock>
 800a560:	f104 000b 	add.w	r0, r4, #11
 800a564:	1d23      	adds	r3, r4, #4
 800a566:	f020 0007 	bic.w	r0, r0, #7
 800a56a:	1ac2      	subs	r2, r0, r3
 800a56c:	d0cc      	beq.n	800a508 <_malloc_r+0x20>
 800a56e:	1a1b      	subs	r3, r3, r0
 800a570:	50a3      	str	r3, [r4, r2]
 800a572:	e7c9      	b.n	800a508 <_malloc_r+0x20>
 800a574:	4622      	mov	r2, r4
 800a576:	6864      	ldr	r4, [r4, #4]
 800a578:	e7cc      	b.n	800a514 <_malloc_r+0x2c>
 800a57a:	1cc4      	adds	r4, r0, #3
 800a57c:	f024 0403 	bic.w	r4, r4, #3
 800a580:	42a0      	cmp	r0, r4
 800a582:	d0e3      	beq.n	800a54c <_malloc_r+0x64>
 800a584:	1a21      	subs	r1, r4, r0
 800a586:	4630      	mov	r0, r6
 800a588:	f000 fac6 	bl	800ab18 <_sbrk_r>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d1dd      	bne.n	800a54c <_malloc_r+0x64>
 800a590:	e7cf      	b.n	800a532 <_malloc_r+0x4a>
 800a592:	bf00      	nop
 800a594:	20000210 	.word	0x20000210
 800a598:	20000214 	.word	0x20000214

0800a59c <__ssputs_r>:
 800a59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a0:	688e      	ldr	r6, [r1, #8]
 800a5a2:	429e      	cmp	r6, r3
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	4690      	mov	r8, r2
 800a5aa:	461f      	mov	r7, r3
 800a5ac:	d838      	bhi.n	800a620 <__ssputs_r+0x84>
 800a5ae:	898a      	ldrh	r2, [r1, #12]
 800a5b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5b4:	d032      	beq.n	800a61c <__ssputs_r+0x80>
 800a5b6:	6825      	ldr	r5, [r4, #0]
 800a5b8:	6909      	ldr	r1, [r1, #16]
 800a5ba:	eba5 0901 	sub.w	r9, r5, r1
 800a5be:	6965      	ldr	r5, [r4, #20]
 800a5c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	444b      	add	r3, r9
 800a5cc:	106d      	asrs	r5, r5, #1
 800a5ce:	429d      	cmp	r5, r3
 800a5d0:	bf38      	it	cc
 800a5d2:	461d      	movcc	r5, r3
 800a5d4:	0553      	lsls	r3, r2, #21
 800a5d6:	d531      	bpl.n	800a63c <__ssputs_r+0xa0>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	f7ff ff85 	bl	800a4e8 <_malloc_r>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	b950      	cbnz	r0, 800a5f8 <__ssputs_r+0x5c>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	f8ca 3000 	str.w	r3, [sl]
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ee:	81a3      	strh	r3, [r4, #12]
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f8:	6921      	ldr	r1, [r4, #16]
 800a5fa:	464a      	mov	r2, r9
 800a5fc:	f7ff fa4c 	bl	8009a98 <memcpy>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	6126      	str	r6, [r4, #16]
 800a60e:	6165      	str	r5, [r4, #20]
 800a610:	444e      	add	r6, r9
 800a612:	eba5 0509 	sub.w	r5, r5, r9
 800a616:	6026      	str	r6, [r4, #0]
 800a618:	60a5      	str	r5, [r4, #8]
 800a61a:	463e      	mov	r6, r7
 800a61c:	42be      	cmp	r6, r7
 800a61e:	d900      	bls.n	800a622 <__ssputs_r+0x86>
 800a620:	463e      	mov	r6, r7
 800a622:	4632      	mov	r2, r6
 800a624:	6820      	ldr	r0, [r4, #0]
 800a626:	4641      	mov	r1, r8
 800a628:	f000 fb6e 	bl	800ad08 <memmove>
 800a62c:	68a3      	ldr	r3, [r4, #8]
 800a62e:	6822      	ldr	r2, [r4, #0]
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	4432      	add	r2, r6
 800a634:	60a3      	str	r3, [r4, #8]
 800a636:	6022      	str	r2, [r4, #0]
 800a638:	2000      	movs	r0, #0
 800a63a:	e7db      	b.n	800a5f4 <__ssputs_r+0x58>
 800a63c:	462a      	mov	r2, r5
 800a63e:	f000 fb89 	bl	800ad54 <_realloc_r>
 800a642:	4606      	mov	r6, r0
 800a644:	2800      	cmp	r0, #0
 800a646:	d1e1      	bne.n	800a60c <__ssputs_r+0x70>
 800a648:	6921      	ldr	r1, [r4, #16]
 800a64a:	4650      	mov	r0, sl
 800a64c:	f7ff fefc 	bl	800a448 <_free_r>
 800a650:	e7c7      	b.n	800a5e2 <__ssputs_r+0x46>
	...

0800a654 <_svfiprintf_r>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	4698      	mov	r8, r3
 800a65a:	898b      	ldrh	r3, [r1, #12]
 800a65c:	061b      	lsls	r3, r3, #24
 800a65e:	b09d      	sub	sp, #116	; 0x74
 800a660:	4607      	mov	r7, r0
 800a662:	460d      	mov	r5, r1
 800a664:	4614      	mov	r4, r2
 800a666:	d50e      	bpl.n	800a686 <_svfiprintf_r+0x32>
 800a668:	690b      	ldr	r3, [r1, #16]
 800a66a:	b963      	cbnz	r3, 800a686 <_svfiprintf_r+0x32>
 800a66c:	2140      	movs	r1, #64	; 0x40
 800a66e:	f7ff ff3b 	bl	800a4e8 <_malloc_r>
 800a672:	6028      	str	r0, [r5, #0]
 800a674:	6128      	str	r0, [r5, #16]
 800a676:	b920      	cbnz	r0, 800a682 <_svfiprintf_r+0x2e>
 800a678:	230c      	movs	r3, #12
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a680:	e0d1      	b.n	800a826 <_svfiprintf_r+0x1d2>
 800a682:	2340      	movs	r3, #64	; 0x40
 800a684:	616b      	str	r3, [r5, #20]
 800a686:	2300      	movs	r3, #0
 800a688:	9309      	str	r3, [sp, #36]	; 0x24
 800a68a:	2320      	movs	r3, #32
 800a68c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a690:	f8cd 800c 	str.w	r8, [sp, #12]
 800a694:	2330      	movs	r3, #48	; 0x30
 800a696:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a840 <_svfiprintf_r+0x1ec>
 800a69a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a69e:	f04f 0901 	mov.w	r9, #1
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	469a      	mov	sl, r3
 800a6a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6aa:	b10a      	cbz	r2, 800a6b0 <_svfiprintf_r+0x5c>
 800a6ac:	2a25      	cmp	r2, #37	; 0x25
 800a6ae:	d1f9      	bne.n	800a6a4 <_svfiprintf_r+0x50>
 800a6b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a6b4:	d00b      	beq.n	800a6ce <_svfiprintf_r+0x7a>
 800a6b6:	465b      	mov	r3, fp
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff ff6d 	bl	800a59c <__ssputs_r>
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	f000 80aa 	beq.w	800a81c <_svfiprintf_r+0x1c8>
 800a6c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ca:	445a      	add	r2, fp
 800a6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 80a2 	beq.w	800a81c <_svfiprintf_r+0x1c8>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6e2:	f10a 0a01 	add.w	sl, sl, #1
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	9307      	str	r3, [sp, #28]
 800a6ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a6f0:	4654      	mov	r4, sl
 800a6f2:	2205      	movs	r2, #5
 800a6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f8:	4851      	ldr	r0, [pc, #324]	; (800a840 <_svfiprintf_r+0x1ec>)
 800a6fa:	f7f5 fd81 	bl	8000200 <memchr>
 800a6fe:	9a04      	ldr	r2, [sp, #16]
 800a700:	b9d8      	cbnz	r0, 800a73a <_svfiprintf_r+0xe6>
 800a702:	06d0      	lsls	r0, r2, #27
 800a704:	bf44      	itt	mi
 800a706:	2320      	movmi	r3, #32
 800a708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a70c:	0711      	lsls	r1, r2, #28
 800a70e:	bf44      	itt	mi
 800a710:	232b      	movmi	r3, #43	; 0x2b
 800a712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a716:	f89a 3000 	ldrb.w	r3, [sl]
 800a71a:	2b2a      	cmp	r3, #42	; 0x2a
 800a71c:	d015      	beq.n	800a74a <_svfiprintf_r+0xf6>
 800a71e:	9a07      	ldr	r2, [sp, #28]
 800a720:	4654      	mov	r4, sl
 800a722:	2000      	movs	r0, #0
 800a724:	f04f 0c0a 	mov.w	ip, #10
 800a728:	4621      	mov	r1, r4
 800a72a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a72e:	3b30      	subs	r3, #48	; 0x30
 800a730:	2b09      	cmp	r3, #9
 800a732:	d94e      	bls.n	800a7d2 <_svfiprintf_r+0x17e>
 800a734:	b1b0      	cbz	r0, 800a764 <_svfiprintf_r+0x110>
 800a736:	9207      	str	r2, [sp, #28]
 800a738:	e014      	b.n	800a764 <_svfiprintf_r+0x110>
 800a73a:	eba0 0308 	sub.w	r3, r0, r8
 800a73e:	fa09 f303 	lsl.w	r3, r9, r3
 800a742:	4313      	orrs	r3, r2
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	46a2      	mov	sl, r4
 800a748:	e7d2      	b.n	800a6f0 <_svfiprintf_r+0x9c>
 800a74a:	9b03      	ldr	r3, [sp, #12]
 800a74c:	1d19      	adds	r1, r3, #4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	9103      	str	r1, [sp, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	bfbb      	ittet	lt
 800a756:	425b      	neglt	r3, r3
 800a758:	f042 0202 	orrlt.w	r2, r2, #2
 800a75c:	9307      	strge	r3, [sp, #28]
 800a75e:	9307      	strlt	r3, [sp, #28]
 800a760:	bfb8      	it	lt
 800a762:	9204      	strlt	r2, [sp, #16]
 800a764:	7823      	ldrb	r3, [r4, #0]
 800a766:	2b2e      	cmp	r3, #46	; 0x2e
 800a768:	d10c      	bne.n	800a784 <_svfiprintf_r+0x130>
 800a76a:	7863      	ldrb	r3, [r4, #1]
 800a76c:	2b2a      	cmp	r3, #42	; 0x2a
 800a76e:	d135      	bne.n	800a7dc <_svfiprintf_r+0x188>
 800a770:	9b03      	ldr	r3, [sp, #12]
 800a772:	1d1a      	adds	r2, r3, #4
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	9203      	str	r2, [sp, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bfb8      	it	lt
 800a77c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a780:	3402      	adds	r4, #2
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a850 <_svfiprintf_r+0x1fc>
 800a788:	7821      	ldrb	r1, [r4, #0]
 800a78a:	2203      	movs	r2, #3
 800a78c:	4650      	mov	r0, sl
 800a78e:	f7f5 fd37 	bl	8000200 <memchr>
 800a792:	b140      	cbz	r0, 800a7a6 <_svfiprintf_r+0x152>
 800a794:	2340      	movs	r3, #64	; 0x40
 800a796:	eba0 000a 	sub.w	r0, r0, sl
 800a79a:	fa03 f000 	lsl.w	r0, r3, r0
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	4303      	orrs	r3, r0
 800a7a2:	3401      	adds	r4, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7aa:	4826      	ldr	r0, [pc, #152]	; (800a844 <_svfiprintf_r+0x1f0>)
 800a7ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7b0:	2206      	movs	r2, #6
 800a7b2:	f7f5 fd25 	bl	8000200 <memchr>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d038      	beq.n	800a82c <_svfiprintf_r+0x1d8>
 800a7ba:	4b23      	ldr	r3, [pc, #140]	; (800a848 <_svfiprintf_r+0x1f4>)
 800a7bc:	bb1b      	cbnz	r3, 800a806 <_svfiprintf_r+0x1b2>
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	3307      	adds	r3, #7
 800a7c2:	f023 0307 	bic.w	r3, r3, #7
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	9303      	str	r3, [sp, #12]
 800a7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7cc:	4433      	add	r3, r6
 800a7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d0:	e767      	b.n	800a6a2 <_svfiprintf_r+0x4e>
 800a7d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e7a5      	b.n	800a728 <_svfiprintf_r+0xd4>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	3401      	adds	r4, #1
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	f04f 0c0a 	mov.w	ip, #10
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ee:	3a30      	subs	r2, #48	; 0x30
 800a7f0:	2a09      	cmp	r2, #9
 800a7f2:	d903      	bls.n	800a7fc <_svfiprintf_r+0x1a8>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d0c5      	beq.n	800a784 <_svfiprintf_r+0x130>
 800a7f8:	9105      	str	r1, [sp, #20]
 800a7fa:	e7c3      	b.n	800a784 <_svfiprintf_r+0x130>
 800a7fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a800:	4604      	mov	r4, r0
 800a802:	2301      	movs	r3, #1
 800a804:	e7f0      	b.n	800a7e8 <_svfiprintf_r+0x194>
 800a806:	ab03      	add	r3, sp, #12
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	462a      	mov	r2, r5
 800a80c:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <_svfiprintf_r+0x1f8>)
 800a80e:	a904      	add	r1, sp, #16
 800a810:	4638      	mov	r0, r7
 800a812:	f7fb ff1b 	bl	800664c <_printf_float>
 800a816:	1c42      	adds	r2, r0, #1
 800a818:	4606      	mov	r6, r0
 800a81a:	d1d6      	bne.n	800a7ca <_svfiprintf_r+0x176>
 800a81c:	89ab      	ldrh	r3, [r5, #12]
 800a81e:	065b      	lsls	r3, r3, #25
 800a820:	f53f af2c 	bmi.w	800a67c <_svfiprintf_r+0x28>
 800a824:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a826:	b01d      	add	sp, #116	; 0x74
 800a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82c:	ab03      	add	r3, sp, #12
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	462a      	mov	r2, r5
 800a832:	4b06      	ldr	r3, [pc, #24]	; (800a84c <_svfiprintf_r+0x1f8>)
 800a834:	a904      	add	r1, sp, #16
 800a836:	4638      	mov	r0, r7
 800a838:	f7fc f9ac 	bl	8006b94 <_printf_i>
 800a83c:	e7eb      	b.n	800a816 <_svfiprintf_r+0x1c2>
 800a83e:	bf00      	nop
 800a840:	0800b51c 	.word	0x0800b51c
 800a844:	0800b526 	.word	0x0800b526
 800a848:	0800664d 	.word	0x0800664d
 800a84c:	0800a59d 	.word	0x0800a59d
 800a850:	0800b522 	.word	0x0800b522

0800a854 <__sfputc_r>:
 800a854:	6893      	ldr	r3, [r2, #8]
 800a856:	3b01      	subs	r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	b410      	push	{r4}
 800a85c:	6093      	str	r3, [r2, #8]
 800a85e:	da08      	bge.n	800a872 <__sfputc_r+0x1e>
 800a860:	6994      	ldr	r4, [r2, #24]
 800a862:	42a3      	cmp	r3, r4
 800a864:	db01      	blt.n	800a86a <__sfputc_r+0x16>
 800a866:	290a      	cmp	r1, #10
 800a868:	d103      	bne.n	800a872 <__sfputc_r+0x1e>
 800a86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a86e:	f7fd bc2d 	b.w	80080cc <__swbuf_r>
 800a872:	6813      	ldr	r3, [r2, #0]
 800a874:	1c58      	adds	r0, r3, #1
 800a876:	6010      	str	r0, [r2, #0]
 800a878:	7019      	strb	r1, [r3, #0]
 800a87a:	4608      	mov	r0, r1
 800a87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <__sfputs_r>:
 800a882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a884:	4606      	mov	r6, r0
 800a886:	460f      	mov	r7, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	18d5      	adds	r5, r2, r3
 800a88c:	42ac      	cmp	r4, r5
 800a88e:	d101      	bne.n	800a894 <__sfputs_r+0x12>
 800a890:	2000      	movs	r0, #0
 800a892:	e007      	b.n	800a8a4 <__sfputs_r+0x22>
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	463a      	mov	r2, r7
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ffda 	bl	800a854 <__sfputc_r>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d1f3      	bne.n	800a88c <__sfputs_r+0xa>
 800a8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a8 <_vfiprintf_r>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	b09d      	sub	sp, #116	; 0x74
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	4698      	mov	r8, r3
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	b118      	cbz	r0, 800a8c0 <_vfiprintf_r+0x18>
 800a8b8:	6983      	ldr	r3, [r0, #24]
 800a8ba:	b90b      	cbnz	r3, 800a8c0 <_vfiprintf_r+0x18>
 800a8bc:	f7fe fc5a 	bl	8009174 <__sinit>
 800a8c0:	4b89      	ldr	r3, [pc, #548]	; (800aae8 <_vfiprintf_r+0x240>)
 800a8c2:	429d      	cmp	r5, r3
 800a8c4:	d11b      	bne.n	800a8fe <_vfiprintf_r+0x56>
 800a8c6:	6875      	ldr	r5, [r6, #4]
 800a8c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	d405      	bmi.n	800a8da <_vfiprintf_r+0x32>
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	059a      	lsls	r2, r3, #22
 800a8d2:	d402      	bmi.n	800a8da <_vfiprintf_r+0x32>
 800a8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d6:	f7ff f85e 	bl	8009996 <__retarget_lock_acquire_recursive>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	071b      	lsls	r3, r3, #28
 800a8de:	d501      	bpl.n	800a8e4 <_vfiprintf_r+0x3c>
 800a8e0:	692b      	ldr	r3, [r5, #16]
 800a8e2:	b9eb      	cbnz	r3, 800a920 <_vfiprintf_r+0x78>
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7fd fc42 	bl	8008170 <__swsetup_r>
 800a8ec:	b1c0      	cbz	r0, 800a920 <_vfiprintf_r+0x78>
 800a8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8f0:	07dc      	lsls	r4, r3, #31
 800a8f2:	d50e      	bpl.n	800a912 <_vfiprintf_r+0x6a>
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f8:	b01d      	add	sp, #116	; 0x74
 800a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fe:	4b7b      	ldr	r3, [pc, #492]	; (800aaec <_vfiprintf_r+0x244>)
 800a900:	429d      	cmp	r5, r3
 800a902:	d101      	bne.n	800a908 <_vfiprintf_r+0x60>
 800a904:	68b5      	ldr	r5, [r6, #8]
 800a906:	e7df      	b.n	800a8c8 <_vfiprintf_r+0x20>
 800a908:	4b79      	ldr	r3, [pc, #484]	; (800aaf0 <_vfiprintf_r+0x248>)
 800a90a:	429d      	cmp	r5, r3
 800a90c:	bf08      	it	eq
 800a90e:	68f5      	ldreq	r5, [r6, #12]
 800a910:	e7da      	b.n	800a8c8 <_vfiprintf_r+0x20>
 800a912:	89ab      	ldrh	r3, [r5, #12]
 800a914:	0598      	lsls	r0, r3, #22
 800a916:	d4ed      	bmi.n	800a8f4 <_vfiprintf_r+0x4c>
 800a918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91a:	f7ff f83d 	bl	8009998 <__retarget_lock_release_recursive>
 800a91e:	e7e9      	b.n	800a8f4 <_vfiprintf_r+0x4c>
 800a920:	2300      	movs	r3, #0
 800a922:	9309      	str	r3, [sp, #36]	; 0x24
 800a924:	2320      	movs	r3, #32
 800a926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a92a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92e:	2330      	movs	r3, #48	; 0x30
 800a930:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aaf4 <_vfiprintf_r+0x24c>
 800a934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a938:	f04f 0901 	mov.w	r9, #1
 800a93c:	4623      	mov	r3, r4
 800a93e:	469a      	mov	sl, r3
 800a940:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a944:	b10a      	cbz	r2, 800a94a <_vfiprintf_r+0xa2>
 800a946:	2a25      	cmp	r2, #37	; 0x25
 800a948:	d1f9      	bne.n	800a93e <_vfiprintf_r+0x96>
 800a94a:	ebba 0b04 	subs.w	fp, sl, r4
 800a94e:	d00b      	beq.n	800a968 <_vfiprintf_r+0xc0>
 800a950:	465b      	mov	r3, fp
 800a952:	4622      	mov	r2, r4
 800a954:	4629      	mov	r1, r5
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff ff93 	bl	800a882 <__sfputs_r>
 800a95c:	3001      	adds	r0, #1
 800a95e:	f000 80aa 	beq.w	800aab6 <_vfiprintf_r+0x20e>
 800a962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a964:	445a      	add	r2, fp
 800a966:	9209      	str	r2, [sp, #36]	; 0x24
 800a968:	f89a 3000 	ldrb.w	r3, [sl]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 80a2 	beq.w	800aab6 <_vfiprintf_r+0x20e>
 800a972:	2300      	movs	r3, #0
 800a974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a97c:	f10a 0a01 	add.w	sl, sl, #1
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a988:	931a      	str	r3, [sp, #104]	; 0x68
 800a98a:	4654      	mov	r4, sl
 800a98c:	2205      	movs	r2, #5
 800a98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a992:	4858      	ldr	r0, [pc, #352]	; (800aaf4 <_vfiprintf_r+0x24c>)
 800a994:	f7f5 fc34 	bl	8000200 <memchr>
 800a998:	9a04      	ldr	r2, [sp, #16]
 800a99a:	b9d8      	cbnz	r0, 800a9d4 <_vfiprintf_r+0x12c>
 800a99c:	06d1      	lsls	r1, r2, #27
 800a99e:	bf44      	itt	mi
 800a9a0:	2320      	movmi	r3, #32
 800a9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a6:	0713      	lsls	r3, r2, #28
 800a9a8:	bf44      	itt	mi
 800a9aa:	232b      	movmi	r3, #43	; 0x2b
 800a9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b6:	d015      	beq.n	800a9e4 <_vfiprintf_r+0x13c>
 800a9b8:	9a07      	ldr	r2, [sp, #28]
 800a9ba:	4654      	mov	r4, sl
 800a9bc:	2000      	movs	r0, #0
 800a9be:	f04f 0c0a 	mov.w	ip, #10
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c8:	3b30      	subs	r3, #48	; 0x30
 800a9ca:	2b09      	cmp	r3, #9
 800a9cc:	d94e      	bls.n	800aa6c <_vfiprintf_r+0x1c4>
 800a9ce:	b1b0      	cbz	r0, 800a9fe <_vfiprintf_r+0x156>
 800a9d0:	9207      	str	r2, [sp, #28]
 800a9d2:	e014      	b.n	800a9fe <_vfiprintf_r+0x156>
 800a9d4:	eba0 0308 	sub.w	r3, r0, r8
 800a9d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	9304      	str	r3, [sp, #16]
 800a9e0:	46a2      	mov	sl, r4
 800a9e2:	e7d2      	b.n	800a98a <_vfiprintf_r+0xe2>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	1d19      	adds	r1, r3, #4
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	9103      	str	r1, [sp, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfbb      	ittet	lt
 800a9f0:	425b      	neglt	r3, r3
 800a9f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f6:	9307      	strge	r3, [sp, #28]
 800a9f8:	9307      	strlt	r3, [sp, #28]
 800a9fa:	bfb8      	it	lt
 800a9fc:	9204      	strlt	r2, [sp, #16]
 800a9fe:	7823      	ldrb	r3, [r4, #0]
 800aa00:	2b2e      	cmp	r3, #46	; 0x2e
 800aa02:	d10c      	bne.n	800aa1e <_vfiprintf_r+0x176>
 800aa04:	7863      	ldrb	r3, [r4, #1]
 800aa06:	2b2a      	cmp	r3, #42	; 0x2a
 800aa08:	d135      	bne.n	800aa76 <_vfiprintf_r+0x1ce>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	1d1a      	adds	r2, r3, #4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	9203      	str	r2, [sp, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	bfb8      	it	lt
 800aa16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa1a:	3402      	adds	r4, #2
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab04 <_vfiprintf_r+0x25c>
 800aa22:	7821      	ldrb	r1, [r4, #0]
 800aa24:	2203      	movs	r2, #3
 800aa26:	4650      	mov	r0, sl
 800aa28:	f7f5 fbea 	bl	8000200 <memchr>
 800aa2c:	b140      	cbz	r0, 800aa40 <_vfiprintf_r+0x198>
 800aa2e:	2340      	movs	r3, #64	; 0x40
 800aa30:	eba0 000a 	sub.w	r0, r0, sl
 800aa34:	fa03 f000 	lsl.w	r0, r3, r0
 800aa38:	9b04      	ldr	r3, [sp, #16]
 800aa3a:	4303      	orrs	r3, r0
 800aa3c:	3401      	adds	r4, #1
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa44:	482c      	ldr	r0, [pc, #176]	; (800aaf8 <_vfiprintf_r+0x250>)
 800aa46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa4a:	2206      	movs	r2, #6
 800aa4c:	f7f5 fbd8 	bl	8000200 <memchr>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d03f      	beq.n	800aad4 <_vfiprintf_r+0x22c>
 800aa54:	4b29      	ldr	r3, [pc, #164]	; (800aafc <_vfiprintf_r+0x254>)
 800aa56:	bb1b      	cbnz	r3, 800aaa0 <_vfiprintf_r+0x1f8>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	3307      	adds	r3, #7
 800aa5c:	f023 0307 	bic.w	r3, r3, #7
 800aa60:	3308      	adds	r3, #8
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa66:	443b      	add	r3, r7
 800aa68:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6a:	e767      	b.n	800a93c <_vfiprintf_r+0x94>
 800aa6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa70:	460c      	mov	r4, r1
 800aa72:	2001      	movs	r0, #1
 800aa74:	e7a5      	b.n	800a9c2 <_vfiprintf_r+0x11a>
 800aa76:	2300      	movs	r3, #0
 800aa78:	3401      	adds	r4, #1
 800aa7a:	9305      	str	r3, [sp, #20]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f04f 0c0a 	mov.w	ip, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa88:	3a30      	subs	r2, #48	; 0x30
 800aa8a:	2a09      	cmp	r2, #9
 800aa8c:	d903      	bls.n	800aa96 <_vfiprintf_r+0x1ee>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0c5      	beq.n	800aa1e <_vfiprintf_r+0x176>
 800aa92:	9105      	str	r1, [sp, #20]
 800aa94:	e7c3      	b.n	800aa1e <_vfiprintf_r+0x176>
 800aa96:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e7f0      	b.n	800aa82 <_vfiprintf_r+0x1da>
 800aaa0:	ab03      	add	r3, sp, #12
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <_vfiprintf_r+0x258>)
 800aaa8:	a904      	add	r1, sp, #16
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7fb fdce 	bl	800664c <_printf_float>
 800aab0:	4607      	mov	r7, r0
 800aab2:	1c78      	adds	r0, r7, #1
 800aab4:	d1d6      	bne.n	800aa64 <_vfiprintf_r+0x1bc>
 800aab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	d405      	bmi.n	800aac8 <_vfiprintf_r+0x220>
 800aabc:	89ab      	ldrh	r3, [r5, #12]
 800aabe:	059a      	lsls	r2, r3, #22
 800aac0:	d402      	bmi.n	800aac8 <_vfiprintf_r+0x220>
 800aac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac4:	f7fe ff68 	bl	8009998 <__retarget_lock_release_recursive>
 800aac8:	89ab      	ldrh	r3, [r5, #12]
 800aaca:	065b      	lsls	r3, r3, #25
 800aacc:	f53f af12 	bmi.w	800a8f4 <_vfiprintf_r+0x4c>
 800aad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aad2:	e711      	b.n	800a8f8 <_vfiprintf_r+0x50>
 800aad4:	ab03      	add	r3, sp, #12
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	462a      	mov	r2, r5
 800aada:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <_vfiprintf_r+0x258>)
 800aadc:	a904      	add	r1, sp, #16
 800aade:	4630      	mov	r0, r6
 800aae0:	f7fc f858 	bl	8006b94 <_printf_i>
 800aae4:	e7e4      	b.n	800aab0 <_vfiprintf_r+0x208>
 800aae6:	bf00      	nop
 800aae8:	0800b300 	.word	0x0800b300
 800aaec:	0800b320 	.word	0x0800b320
 800aaf0:	0800b2e0 	.word	0x0800b2e0
 800aaf4:	0800b51c 	.word	0x0800b51c
 800aaf8:	0800b526 	.word	0x0800b526
 800aafc:	0800664d 	.word	0x0800664d
 800ab00:	0800a883 	.word	0x0800a883
 800ab04:	0800b522 	.word	0x0800b522

0800ab08 <nan>:
 800ab08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab10 <nan+0x8>
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	00000000 	.word	0x00000000
 800ab14:	7ff80000 	.word	0x7ff80000

0800ab18 <_sbrk_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d06      	ldr	r5, [pc, #24]	; (800ab34 <_sbrk_r+0x1c>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	f7f7 f85c 	bl	8001be0 <_sbrk>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_sbrk_r+0x1a>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_sbrk_r+0x1a>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	20000490 	.word	0x20000490

0800ab38 <__sread>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	f000 f92e 	bl	800ada0 <_read_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	bfab      	itete	ge
 800ab48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab4c:	181b      	addge	r3, r3, r0
 800ab4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab52:	bfac      	ite	ge
 800ab54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab56:	81a3      	strhlt	r3, [r4, #12]
 800ab58:	bd10      	pop	{r4, pc}

0800ab5a <__swrite>:
 800ab5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5e:	461f      	mov	r7, r3
 800ab60:	898b      	ldrh	r3, [r1, #12]
 800ab62:	05db      	lsls	r3, r3, #23
 800ab64:	4605      	mov	r5, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4616      	mov	r6, r2
 800ab6a:	d505      	bpl.n	800ab78 <__swrite+0x1e>
 800ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab70:	2302      	movs	r3, #2
 800ab72:	2200      	movs	r2, #0
 800ab74:	f000 f8b6 	bl	800ace4 <_lseek_r>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	4628      	mov	r0, r5
 800ab8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8e:	f000 b835 	b.w	800abfc <_write_r>

0800ab92 <__sseek>:
 800ab92:	b510      	push	{r4, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9a:	f000 f8a3 	bl	800ace4 <_lseek_r>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	bf15      	itete	ne
 800aba4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abae:	81a3      	strheq	r3, [r4, #12]
 800abb0:	bf18      	it	ne
 800abb2:	81a3      	strhne	r3, [r4, #12]
 800abb4:	bd10      	pop	{r4, pc}

0800abb6 <__sclose>:
 800abb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abba:	f000 b84f 	b.w	800ac5c <_close_r>

0800abbe <strncmp>:
 800abbe:	b510      	push	{r4, lr}
 800abc0:	b16a      	cbz	r2, 800abde <strncmp+0x20>
 800abc2:	3901      	subs	r1, #1
 800abc4:	1884      	adds	r4, r0, r2
 800abc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800abca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abce:	4293      	cmp	r3, r2
 800abd0:	d103      	bne.n	800abda <strncmp+0x1c>
 800abd2:	42a0      	cmp	r0, r4
 800abd4:	d001      	beq.n	800abda <strncmp+0x1c>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1f5      	bne.n	800abc6 <strncmp+0x8>
 800abda:	1a98      	subs	r0, r3, r2
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	4610      	mov	r0, r2
 800abe0:	e7fc      	b.n	800abdc <strncmp+0x1e>

0800abe2 <__ascii_wctomb>:
 800abe2:	b149      	cbz	r1, 800abf8 <__ascii_wctomb+0x16>
 800abe4:	2aff      	cmp	r2, #255	; 0xff
 800abe6:	bf85      	ittet	hi
 800abe8:	238a      	movhi	r3, #138	; 0x8a
 800abea:	6003      	strhi	r3, [r0, #0]
 800abec:	700a      	strbls	r2, [r1, #0]
 800abee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800abf2:	bf98      	it	ls
 800abf4:	2001      	movls	r0, #1
 800abf6:	4770      	bx	lr
 800abf8:	4608      	mov	r0, r1
 800abfa:	4770      	bx	lr

0800abfc <_write_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d07      	ldr	r5, [pc, #28]	; (800ac1c <_write_r+0x20>)
 800ac00:	4604      	mov	r4, r0
 800ac02:	4608      	mov	r0, r1
 800ac04:	4611      	mov	r1, r2
 800ac06:	2200      	movs	r2, #0
 800ac08:	602a      	str	r2, [r5, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f7f6 f8a9 	bl	8000d62 <_write>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_write_r+0x1e>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_write_r+0x1e>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	20000490 	.word	0x20000490

0800ac20 <__assert_func>:
 800ac20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac22:	4614      	mov	r4, r2
 800ac24:	461a      	mov	r2, r3
 800ac26:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <__assert_func+0x2c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	68d8      	ldr	r0, [r3, #12]
 800ac2e:	b14c      	cbz	r4, 800ac44 <__assert_func+0x24>
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <__assert_func+0x30>)
 800ac32:	9100      	str	r1, [sp, #0]
 800ac34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac38:	4906      	ldr	r1, [pc, #24]	; (800ac54 <__assert_func+0x34>)
 800ac3a:	462b      	mov	r3, r5
 800ac3c:	f000 f81e 	bl	800ac7c <fiprintf>
 800ac40:	f000 f8c0 	bl	800adc4 <abort>
 800ac44:	4b04      	ldr	r3, [pc, #16]	; (800ac58 <__assert_func+0x38>)
 800ac46:	461c      	mov	r4, r3
 800ac48:	e7f3      	b.n	800ac32 <__assert_func+0x12>
 800ac4a:	bf00      	nop
 800ac4c:	20000010 	.word	0x20000010
 800ac50:	0800b52d 	.word	0x0800b52d
 800ac54:	0800b53a 	.word	0x0800b53a
 800ac58:	0800b568 	.word	0x0800b568

0800ac5c <_close_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d06      	ldr	r5, [pc, #24]	; (800ac78 <_close_r+0x1c>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	602b      	str	r3, [r5, #0]
 800ac68:	f7f6 ff85 	bl	8001b76 <_close>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_close_r+0x1a>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_close_r+0x1a>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	20000490 	.word	0x20000490

0800ac7c <fiprintf>:
 800ac7c:	b40e      	push	{r1, r2, r3}
 800ac7e:	b503      	push	{r0, r1, lr}
 800ac80:	4601      	mov	r1, r0
 800ac82:	ab03      	add	r3, sp, #12
 800ac84:	4805      	ldr	r0, [pc, #20]	; (800ac9c <fiprintf+0x20>)
 800ac86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	f7ff fe0b 	bl	800a8a8 <_vfiprintf_r>
 800ac92:	b002      	add	sp, #8
 800ac94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac98:	b003      	add	sp, #12
 800ac9a:	4770      	bx	lr
 800ac9c:	20000010 	.word	0x20000010

0800aca0 <_fstat_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d07      	ldr	r5, [pc, #28]	; (800acc0 <_fstat_r+0x20>)
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	4611      	mov	r1, r2
 800acac:	602b      	str	r3, [r5, #0]
 800acae:	f7f6 ff6e 	bl	8001b8e <_fstat>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	d102      	bne.n	800acbc <_fstat_r+0x1c>
 800acb6:	682b      	ldr	r3, [r5, #0]
 800acb8:	b103      	cbz	r3, 800acbc <_fstat_r+0x1c>
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	bd38      	pop	{r3, r4, r5, pc}
 800acbe:	bf00      	nop
 800acc0:	20000490 	.word	0x20000490

0800acc4 <_isatty_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d06      	ldr	r5, [pc, #24]	; (800ace0 <_isatty_r+0x1c>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	f7f6 ff6d 	bl	8001bae <_isatty>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_isatty_r+0x1a>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_isatty_r+0x1a>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	20000490 	.word	0x20000490

0800ace4 <_lseek_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	; (800ad04 <_lseek_r+0x20>)
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f7f6 ff66 	bl	8001bc4 <_lseek>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_lseek_r+0x1e>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_lseek_r+0x1e>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	20000490 	.word	0x20000490

0800ad08 <memmove>:
 800ad08:	4288      	cmp	r0, r1
 800ad0a:	b510      	push	{r4, lr}
 800ad0c:	eb01 0402 	add.w	r4, r1, r2
 800ad10:	d902      	bls.n	800ad18 <memmove+0x10>
 800ad12:	4284      	cmp	r4, r0
 800ad14:	4623      	mov	r3, r4
 800ad16:	d807      	bhi.n	800ad28 <memmove+0x20>
 800ad18:	1e43      	subs	r3, r0, #1
 800ad1a:	42a1      	cmp	r1, r4
 800ad1c:	d008      	beq.n	800ad30 <memmove+0x28>
 800ad1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad26:	e7f8      	b.n	800ad1a <memmove+0x12>
 800ad28:	4402      	add	r2, r0
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	428a      	cmp	r2, r1
 800ad2e:	d100      	bne.n	800ad32 <memmove+0x2a>
 800ad30:	bd10      	pop	{r4, pc}
 800ad32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad3a:	e7f7      	b.n	800ad2c <memmove+0x24>

0800ad3c <__malloc_lock>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__malloc_lock+0x8>)
 800ad3e:	f7fe be2a 	b.w	8009996 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	20000488 	.word	0x20000488

0800ad48 <__malloc_unlock>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__malloc_unlock+0x8>)
 800ad4a:	f7fe be25 	b.w	8009998 <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	20000488 	.word	0x20000488

0800ad54 <_realloc_r>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	4607      	mov	r7, r0
 800ad58:	4614      	mov	r4, r2
 800ad5a:	460e      	mov	r6, r1
 800ad5c:	b921      	cbnz	r1, 800ad68 <_realloc_r+0x14>
 800ad5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad62:	4611      	mov	r1, r2
 800ad64:	f7ff bbc0 	b.w	800a4e8 <_malloc_r>
 800ad68:	b922      	cbnz	r2, 800ad74 <_realloc_r+0x20>
 800ad6a:	f7ff fb6d 	bl	800a448 <_free_r>
 800ad6e:	4625      	mov	r5, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad74:	f000 f82d 	bl	800add2 <_malloc_usable_size_r>
 800ad78:	42a0      	cmp	r0, r4
 800ad7a:	d20f      	bcs.n	800ad9c <_realloc_r+0x48>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4638      	mov	r0, r7
 800ad80:	f7ff fbb2 	bl	800a4e8 <_malloc_r>
 800ad84:	4605      	mov	r5, r0
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d0f2      	beq.n	800ad70 <_realloc_r+0x1c>
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	f7fe fe83 	bl	8009a98 <memcpy>
 800ad92:	4631      	mov	r1, r6
 800ad94:	4638      	mov	r0, r7
 800ad96:	f7ff fb57 	bl	800a448 <_free_r>
 800ad9a:	e7e9      	b.n	800ad70 <_realloc_r+0x1c>
 800ad9c:	4635      	mov	r5, r6
 800ad9e:	e7e7      	b.n	800ad70 <_realloc_r+0x1c>

0800ada0 <_read_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d07      	ldr	r5, [pc, #28]	; (800adc0 <_read_r+0x20>)
 800ada4:	4604      	mov	r4, r0
 800ada6:	4608      	mov	r0, r1
 800ada8:	4611      	mov	r1, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	602a      	str	r2, [r5, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	f7f6 fec4 	bl	8001b3c <_read>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_read_r+0x1e>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_read_r+0x1e>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20000490 	.word	0x20000490

0800adc4 <abort>:
 800adc4:	b508      	push	{r3, lr}
 800adc6:	2006      	movs	r0, #6
 800adc8:	f000 f834 	bl	800ae34 <raise>
 800adcc:	2001      	movs	r0, #1
 800adce:	f7f6 feab 	bl	8001b28 <_exit>

0800add2 <_malloc_usable_size_r>:
 800add2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add6:	1f18      	subs	r0, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfbc      	itt	lt
 800addc:	580b      	ldrlt	r3, [r1, r0]
 800adde:	18c0      	addlt	r0, r0, r3
 800ade0:	4770      	bx	lr

0800ade2 <_raise_r>:
 800ade2:	291f      	cmp	r1, #31
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4604      	mov	r4, r0
 800ade8:	460d      	mov	r5, r1
 800adea:	d904      	bls.n	800adf6 <_raise_r+0x14>
 800adec:	2316      	movs	r3, #22
 800adee:	6003      	str	r3, [r0, #0]
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adf4:	bd38      	pop	{r3, r4, r5, pc}
 800adf6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adf8:	b112      	cbz	r2, 800ae00 <_raise_r+0x1e>
 800adfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adfe:	b94b      	cbnz	r3, 800ae14 <_raise_r+0x32>
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 f831 	bl	800ae68 <_getpid_r>
 800ae06:	462a      	mov	r2, r5
 800ae08:	4601      	mov	r1, r0
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae10:	f000 b818 	b.w	800ae44 <_kill_r>
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d00a      	beq.n	800ae2e <_raise_r+0x4c>
 800ae18:	1c59      	adds	r1, r3, #1
 800ae1a:	d103      	bne.n	800ae24 <_raise_r+0x42>
 800ae1c:	2316      	movs	r3, #22
 800ae1e:	6003      	str	r3, [r0, #0]
 800ae20:	2001      	movs	r0, #1
 800ae22:	e7e7      	b.n	800adf4 <_raise_r+0x12>
 800ae24:	2400      	movs	r4, #0
 800ae26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	4798      	blx	r3
 800ae2e:	2000      	movs	r0, #0
 800ae30:	e7e0      	b.n	800adf4 <_raise_r+0x12>
	...

0800ae34 <raise>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <raise+0xc>)
 800ae36:	4601      	mov	r1, r0
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	f7ff bfd2 	b.w	800ade2 <_raise_r>
 800ae3e:	bf00      	nop
 800ae40:	20000010 	.word	0x20000010

0800ae44 <_kill_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d07      	ldr	r5, [pc, #28]	; (800ae64 <_kill_r+0x20>)
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	f7f6 fe59 	bl	8001b08 <_kill>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d102      	bne.n	800ae60 <_kill_r+0x1c>
 800ae5a:	682b      	ldr	r3, [r5, #0]
 800ae5c:	b103      	cbz	r3, 800ae60 <_kill_r+0x1c>
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	bd38      	pop	{r3, r4, r5, pc}
 800ae62:	bf00      	nop
 800ae64:	20000490 	.word	0x20000490

0800ae68 <_getpid_r>:
 800ae68:	f7f6 be46 	b.w	8001af8 <_getpid>

0800ae6c <_init>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr

0800ae78 <_fini>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr
