/*
 *	Author: Filip Geib
 *	(c) 2021
 */


#include"s25fl256l.h"


/* DEFINITIONS AND CONSTANTS */

// S25FL256L significant constants
#define SEC_CNT		8191
#define SEC_ADDR	3840

// S25FL256L significant commands
static uint8_t CMD_QPIEN	= 0x38;
static uint8_t CMD_4BEN		= 0xB7;

static uint8_t CMD_CE		= 0x60;
static uint8_t CMD_4SE		= 0x21;

static uint8_t CMD_4QPP		= 0x34;

static uint8_t CMD_WREN		= 0x06;
static uint8_t CMD_WRENV	= 0x50;

static uint8_t CMD_RDID		= 0x9F;
static uint8_t CMD_RUID		= 0x4B;


/* SUPPORT FUNCTIONS */

void s25fl256l_defaultCommand(QSPI_CommandTypeDef *command) {
	command->InstructionMode   	= QSPI_INSTRUCTION_NONE;
	command->DataMode          	= QSPI_DATA_NONE;
	command->AddressMode       	= QSPI_ADDRESS_NONE;
	command->AddressSize       	= QSPI_ADDRESS_32_BITS;

	command->AlternateByteMode 	= QSPI_ALTERNATE_BYTES_NONE;
	command->NbData            	= 1;
	command->DummyCycles       	= 0;

	command->DdrMode           	= QSPI_DDR_MODE_DISABLE;
	command->DdrHoldHalfCycle  	= QSPI_DDR_HHC_ANALOG_DELAY;
	command->SIOOMode          	= QSPI_SIOO_INST_EVERY_CMD;
}


int s25fl256l_sendCommand(QSPI_HandleTypeDef *hand, QSPI_CommandTypeDef *cmd, int dev) {
	HAL_StatusTypeDef ret;

	// set all devices
	HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin | QSPI_CS2_Pin | QSPI_CS3_Pin, GPIO_PIN_SET);
	HAL_Delay(5);

	// reset appropriate device
	if(dev == 0) 		HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin, GPIO_PIN_RESET);
	else if(dev == 1) 	HAL_GPIO_WritePin(GPIOA, QSPI_CS2_Pin, GPIO_PIN_RESET);
	else 				HAL_GPIO_WritePin(GPIOA, QSPI_CS3_Pin, GPIO_PIN_RESET);

	// send command
	ret = HAL_QSPI_Command(hand, cmd, TIMEOUT_QPSI);
	if(ret != HAL_OK) {
		log_error("s25fl256l_sendCommand", dev, 0, ret);
		return 1;
	}

	return 0;
}


void s25fl256l_writeSectorRandom(QSPI_HandleTypeDef *hand, int *dev, int devSize, int sector) {
	QSPI_CommandTypeDef command; HAL_StatusTypeDef ret;

	// create vanilla command
	s25fl256l_defaultCommand(&command);
	command.InstructionMode	= QSPI_INSTRUCTION_4_LINES;
	command.AddressMode		= QSPI_ADDRESS_4_LINES;
	command.NbData          = 1;
	command.DummyCycles     = 0;

	// generate random 4kB array
	uint8_t *buff = calloc(500, sizeof(uint8_t));
	for(int i=0; i<500; i++)
		buff[i] = rand();

	// loop thru every device
	for(int i=0; i<devSize; i++) {
		// erase sector
		command.Instruction	= CMD_4SE;
		command.Address		= (uint32_t)sector * SEC_ADDR;

		ret = s25fl256l_sendCommand(hand, &command, dev[i]);
		if(ret != 0) log_error("s25fl256l_writeRandomSector", dev[i], 0, HAL_QSPI);

		// write to sector
		command.Instruction	= CMD_4QPP;
		command.Address		= (uint32_t)sector * SEC_ADDR;
		command.DataMode	= QSPI_DATA_4_LINES;
		command.NbData      = 500;

		ret = s25fl256l_sendCommand(hand, &command, dev[i]);
		if(ret != 0) log_error("s25fl256l_writeRandomSector", dev[i], 1, HAL_QSPI);

		// transmit data
		ret = HAL_QSPI_Transmit(hand, buff, TIMEOUT_QPSI);
		if(ret != HAL_OK) log_error("s25fl256l_writeRandomSector", dev[i], 2, ret);
	}
}


/* MAIN FUNCTIONS */

void s25fl256l_configure(QSPI_HandleTypeDef *hand, int dev) {
	QSPI_CommandTypeDef command; HAL_StatusTypeDef ret;

	// erase chip
	s25fl256l_defaultCommand(&command);
	command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
	command.Instruction       = CMD_CE;
	command.NbData            = 1;
	command.DummyCycles       = 0;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_configure", dev, 0, HAL_QSPI);

	// enable write
	command.Instruction = CMD_WREN;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_configure", dev, 1, HAL_QSPI);

	// enable volatile write
	command.Instruction = CMD_WRENV;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_configure", dev, 2, HAL_QSPI);

	// switch to 4B address mode
	command.Instruction = CMD_4BEN;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_configure", dev, 3, HAL_QSPI);

	// switch to QSPI
	command.Instruction = CMD_QPIEN;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_configure", dev, 4, HAL_QSPI);

	log_info("s25fl256l_configure", dev);
}


void s25fl256l_readManufac(QSPI_HandleTypeDef *hand, int dev) {
	QSPI_CommandTypeDef command; HAL_StatusTypeDef ret; uint8_t buff[8];

	// request and read manufacturer device type
	s25fl256l_defaultCommand(&command);
	command.InstructionMode   	= QSPI_INSTRUCTION_4_LINES;
	command.Instruction       	= CMD_RDID;
	command.DataMode          	= QSPI_DATA_4_LINES;
	command.NbData            	= 3;
	command.DummyCycles       	= 0;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_readManufac", dev, 0, HAL_QSPI);

	ret = HAL_QSPI_Receive(hand, buff, QSPI_TIMEOUT);
	if(ret != HAL_OK) log_error("s25fl256l_readManufac", dev, 1, ret);

	// convert address to string
	char tmp[17];
	addr2str(buff, 3, tmp);
	log_data("s25fl256l", dev, "dev_manufac", tmp, NAN);

	// request and read unique device ID
	command.Instruction 		= CMD_RUID;
	command.NbData          	= 8;
	command.DummyCycles     	= 31;

	ret = s25fl256l_sendCommand(hand, &command, dev);
	if(ret != 0) log_error("s25fl256l_readManufac", dev, 2, HAL_QSPI);

	ret = HAL_QSPI_Receive(hand, buff, QSPI_TIMEOUT);
	if(ret != HAL_OK) log_error("s25fl256l_readManufac", dev, 3, ret);

	// convert address to string
	addr2str(buff, 8, tmp);
	log_data("s25fl256l", dev, "dev_id", tmp, NAN);
}

