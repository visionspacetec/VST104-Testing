/*
 *	Author: Filip Geib
 *	(c) 2021
 */


#include "mpu6050.h"


/* DEFINITIONS AND CONSTANTS */

// MPU6050 list of I2C addresses
static const uint8_t ADDR[] = {0x68};

// measurement maximal timeout (in ms)
#define TIMEOUT		800		// 1.25 Hz

// MPU6050 significant registers
#define REG_ENBL	0x38
#define REG_STAT	0x3A
#define REG_CONF	0x1A
#define REG_PWR1	0x6B
#define REG_RST		0x68

#define REG_ACC		0x3B
#define REG_TEMP	0x41
#define REG_GYRO	0x43
#define REG_ID		0x75

// MPU6050 significant commands
static uint8_t CMD_SW_RST	= 0x40;
static uint8_t CMD_SP_RST	= 0x07;
static uint8_t CMD_RDY_EN	= 0x01;

// MPU6050 significant constants
#define RDY_INT		0

#define GYRO_So		131		// LSB/(deg/s)
#define GYRO_FS		250		// deg/s
#define	ACC_So		16384 	// LSB/g
#define	ACC_FS		2		// g
#define	T_So		340		// LSB/degC
#define	T_Off		36.53	// degC


/* SUPPORT FUNCTIONS */
void mpu6050_powerReset() {
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);

	// connect I2C bus
	HAL_GPIO_WritePin(I2C3_EN_GPIO_Port, I2C3_EN_Pin, GPIO_PIN_SET);
	HAL_Delay(100);

	log_send(0, "mpu6050_powerReset", -1, "na", NAN);
}


int mpu6050_waitMeasure(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;

	// periodically check status register
	while(cnt*10 < TIMEOUT) {
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
		if(ret != HAL_OK) log_send(1, "mpu6050_waitMeasure", dev, "na", 1);

		// check buffer
		if(buff & (1 << RDY_INT)) return 0;

		// wait 5ms and increase counter
		HAL_Delay(5);
		cnt++;
	}

	// timeout error
	return -1;
}


int16_t mpu6050_processBuff(uint8_t *buff, int data) {
	return (int16_t)buff[0 + 2*data] << 8 | (int16_t)(buff[1 + 2*data]);
}


/* MAIN FUNCTIONS */

void mpu6050_configure(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret;

	// reset device - clear registers
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_PWR1, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_configure", dev, "na", 1);
	HAL_Delay(100);

	// reset signal paths - clear registers
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_RST, 1, &CMD_SP_RST, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_configure", dev, "na", 2);
	HAL_Delay(100);

	// enable data ready interrupt
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_ENBL, 1, &CMD_RDY_EN, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_configure", dev, "na", 3);

	log_send(0, "mpu6050_configure", dev, "na", NAN);
}


void mpu6050_readManufac(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_readManufac", dev, "na", 2);

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
	log_send(2, "mpu6050_readManufac", dev, tmp, NAN);
}


void mpu6050_readAccData(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	//waitRet = mpu6050_waitMeasure(hand, dev);
	//if(waitRet != 0) log_send(1, "mpu6050_readAccData", dev, "na", 1);

	// read accelerometer register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ACC, 1, buff, 6, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_readAccData", dev, "na", 2);

	// process accelerometer data
	float val[3];
	for(int i=0; i<3; i++) {
		val[i] = (float)mpu6050_processBuff(buff, i) * (1 / ACC_So) * (ACC_FS / 2);
	}

	log_send(2, "mpu6050_readAccData", dev, "acc_x", val[0]);
	log_send(2, "mpu6050_readAccData", dev, "acc_y", val[1]);
	log_send(2, "mpu6050_readAccData", dev, "acc_z", val[2]);
}


void mpu6050_readGyroData(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	//waitRet = mpu6050_waitMeasure(hand, dev);
	//if(waitRet != 0) log_send(1, "mpu6050_readGyroData", dev, "na", 1);

	// read gyroscope register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_GYRO, 1, buff, 6, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_readGyroData", dev, "na", 2);

	// process gyroscope data
	float val[3];
	for(int i=0; i<3; i++) {
		val[i] = (float)mpu6050_processBuff(buff, i) * (1 / GYRO_So) * (GYRO_FS / 250);
	}

	log_send(2, "mpu6050_readGyroData", dev, "gyro_x", val[0]);
	log_send(2, "mpu6050_readGyroData", dev, "gyro_y", val[1]);
	log_send(2, "mpu6050_readGyroData", dev, "gyro_z", val[2]);
}


void mpu6050_readTempData(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff[2]; int waitRet;

	// wait for measurement to complete
	//waitRet = mpu6050_waitMeasure(hand, dev);
	//if(waitRet != 0) log_send(1, "mpu6050_readTempData", dev, "na", 1);

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "mpu6050_readTempData", dev, "na", 2);

	// process temperature value
	float val = T_Off + (float)mpu6050_processBuff(buff,0) / T_So;

	log_send(2, "mpu6050_readTempData", dev, "temp", val);
}
