/*
 *	Author: Filip Geib
 *	(c) 2021
 */


#include "lsm6ds3.h"


/* DEFINITIONS AND CONSTANTS */

// LSM6DS3 list of I2C addresses
static const uint8_t ADDR[] = {0x6A};

// measurement maximal timeout (in ms)
#define TIMEOUT		80	// 12.5 Hz

// LSM6DS3 significant registers
#define REG_STAT	0x1E
#define REG_CTRL1	0x10
#define REG_CTRL2	0x11
#define REG_CTRL3	0x12
#define REG_CTRL5	0x0A

#define REG_TEMP	0x20
#define REG_GYRO	0x22
#define	REG_ACC		0x28
#define	REG_ID		0x0F

// LSM6DS3 significant commands
static uint8_t CMD_SW_RST	= 0x05;

static uint8_t CMD_ODR_G	= 0x10;
static uint8_t CMD_ODR_XL	= 0x10;

// LSM6DS3 significant constants
#define RDY_XLDA	0
#define RDY_GDA		1
#define RDY_TDA		2

#define LA_So		0.061	// mg/LSB
#define	LA_FS		2.0		// g
#define G_So		4.375	// mdps/LSB
#define G_FS		125.0	// dps
#define T_So		16.0	// LSB/degC
#define T_Off		25.0	// degC


/* SUPPORT FUNCTIONS */

void lsm6ds3_powerReset() {
	// isolate I2C bus
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);

	// connect I2C bus
	HAL_GPIO_WritePin(I2C4_EN_GPIO_Port, I2C4_EN_Pin, GPIO_PIN_SET);
	HAL_Delay(100);

	log_info("lsm6ds3_powerReset", -1);
}


int lsm6ds3_waitMeasure(I2C_HandleTypeDef *hand, int type, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff;

	// variable for time management
	int cnt = 0;

	// periodically check status register
	while(cnt*5 < TIMEOUT) {
		// read status register
		ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_STAT, 1, &buff, 1, I2C_TIMEOUT);
		if(ret != HAL_OK) log_error("lsm6ds3_waitMeasure", dev, 0, ret);

		// check buffer (0:acc, 1:gyro, 2:temp)
		if(type == 0 && (buff & (1 << RDY_XLDA))) return 0;
		else if(type == 1 && (buff & (1 << RDY_GDA))) return 0;
		else if(type == 2 && (buff & (1 << RDY_TDA))) return 0;

		// wait 5ms and increase counter
		HAL_Delay(5);
		cnt++;
	}

	// timeout error
	return -1;
}


int16_t lsm6ds3_processBuff(uint8_t *buff, int data) {
	return (int16_t)buff[0 + 2*data] | (int16_t)(buff[1 + 2*data] << 8);
}


/* MAIN FUNCTIONS */

void lsm6ds3_configure(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret;

	// reset device
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL3, 1, &CMD_SW_RST, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_error("lsm6ds3_configure", dev, 0, ret);
	HAL_Delay(100);

	// enable accelerometer
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL1, 1, &CMD_ODR_XL, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_error("lsm6ds3_configure", dev, 1, ret);

	// enable gyroscope
	ret = HAL_I2C_Mem_Write(hand, ADDR[dev] << 1, REG_CTRL2, 1, &CMD_ODR_G, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_error("lsm6ds3_configure", dev, 2, ret);

	log_info("lsm6ds3_configure", dev);
}


void lsm6ds3_readManufac(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff;

	// read product ID register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ID, 1, &buff, 1, I2C_TIMEOUT);
	if(ret != HAL_OK) log_error("lsm6ds3_readManufac", dev, 0, ret);

	// convert address to string
	char tmp[3];
	addr2str(&buff, 1, tmp);
	log_data("lsm6ds3", dev, "dev_id", tmp, NAN);
}


void lsm6ds3_readAccData(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 0, dev);
	if(waitRet != 0) log_error("lsm6ds3_readAccData", dev, 0, 4);

	// read accelerometer register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_ACC, 1, buff, 6, I2C_TIMEOUT);
	if(ret != HAL_OK) log_error("lsm6ds3_readAccData", dev, 1, ret);

	// process accelerometer data
	float val[3];
	for(int i=0; i<3; i++) {
		val[i] = (float)lsm6ds3_processBuff(buff, i) * (LA_So / 1000) * (LA_FS / 2);
	}

	log_data("lsm6ds3", dev, "acc_x", "NA", val[0]);
	log_data("lsm6ds3", dev, "acc_y", "NA", val[1]);
	log_data("lsm6ds3", dev, "acc_z", "NA", val[2]);
}


void lsm6ds3_readGyroData(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff[6]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 1, dev);
	if(waitRet != 0) log_send(1, "lsm6ds3_readGyroData", dev, "na", 1);

	// read gyroscope register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_GYRO, 1, buff, 6, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "lsm6ds3_readGyroData", dev, "na", 2);

	// process gyroscope data
	float val[3];
	for(int i=0; i<3; i++) {
		val[i] = (float)lsm6ds3_processBuff(buff, i) * (G_So / 1000) * (G_FS / 125);
	}

	log_send(2, "lsm6ds3_readGyroData", dev, "gyro_x", val[0]);
	log_send(2, "lsm6ds3_readGyroData", dev, "gyro_y", val[1]);
	log_send(2, "lsm6ds3_readGyroData", dev, "gyro_z", val[2]);
}


void lsm6ds3_readTempData(I2C_HandleTypeDef *hand, int dev) {
	HAL_StatusTypeDef ret; uint8_t buff[2]; int waitRet;

	// wait for measurement to complete
	waitRet = lsm6ds3_waitMeasure(hand, 2, dev);
	if(waitRet != 0) log_send(1, "lsm6ds3_readTempData", dev, "na", 1);

	// read temperature register
	ret = HAL_I2C_Mem_Read(hand, ADDR[dev] << 1, REG_TEMP, 1, buff, 2, I2C_TIMEOUT);
	if(ret != HAL_OK) log_send(1, "lsm6ds3_readTempData", dev, "na", 2);

	// process temperature value
	float val = T_Off + (float)lsm6ds3_processBuff(buff,0) / T_So;

	log_send(2, "mmc5883_readTempData", dev, "temp", val);
}
