/*
 * testing_tools.cpp
 *
 *  Created on: Mar 13, 2021
 *      Author: Filip Geib
 */

#include "testing_tools.h"


/* VARIABLES */

UART_HandleTypeDef* huart_A;
UART_HandleTypeDef* huart_B;


/* DEFINITIONS AND CONSTANTS */

// HAL_Status abbreviations
static const char STATUS[4][12] = {"HAL_OK", "HAL_ERROR", "HAL_BUSY", "HAL_TIMEOUT"};

/* FUNCTIONS */

void addr2str(uint8_t *addr, int addr_len, char *str) {
	int index = 0;
	for(int i=0; i<addr_len; i++)
	   index += sprintf(&str[index], "%02X", addr[i]);
}


void log_enable() {
	HAL_GPIO_WritePin(GPIOG, UART2_EN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin, GPIO_PIN_SET);
}


void log_send(char* buff, int lenght) {
	HAL_StatusTypeDef ret

	ret = HAL_UART_Transmit(&huart_A, (uint8_t *)buff, lenght, UART_TIMEOUT);
	if(ret != HAL_OK) printf("ERROR: UART-A %s\n", STATUS[ret]);

	ret = HAL_UART_Transmit(&huart_B, (uint8_t *)buff, lenght, UART_TIMEOUT);
	if(ret != HAL_OK) printf("ERROR: UART-B %s\n", STATUS[ret]);
}


void scanI2Caddr(I2C_HandleTypeDef *handler) {
	printf("Scanning I2C bus:\n");
	HAL_StatusTypeDef ret;

	// check all possible addresses
	for(int i=1; i<128; i++) {
	  ret = HAL_I2C_IsDeviceReady(handler, (uint16_t)(i<<1), 2, 10);
	  if (ret == HAL_OK)
		  printf("0x%02X\n", i);
	}
	printf("Scanning completed\n");
}


void assign_huartPtr(UART_HandleTypeDef* hand1, UART_HandleTypeDef* hand2) {
	huartPtrs[0] = hand1;
	huartPtrs[1] = hand2;
}


void log_send(int type, char *identity, int device, char *data_str, float data_flt) {
	// process device
	char device_str[8] = "na";
	if(device >= 0) sprintf(device_str, "%d", device);

	// generate message string
	char msg[256];
	sprintf(msg, "%s -i %s -d %s -s %s -f %f\n", LOG_types[type], identity, device_str, data_str, data_flt);

	// send to SWD
	printf("%s", msg);

	// send to UARTs
	for(int i=0; i<2; i++) {
		if(HAL_UART_Transmit(huartPtrs[i], (uint8_t *)msg, strlen(msg)+1, UART_TIMEOUT) != HAL_OK)
			printf("#### UART-%d ERROR ####\n", i+1);
	}
}

